
BongZhu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018214  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f18  080184e8  080184e8  000284e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a400  0801a400  0002a400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a408  0801a408  0002a408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a40c  0801a40c  0002a40c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000234  24000000  0801a410  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000011cc  24000238  0801a644  00030238  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24001404  0801a644  00031404  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a30d  00000000  00000000  00030262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005c77  00000000  00000000  0006a56f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ae8  00000000  00000000  000701e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018e0  00000000  00000000  00071cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039e94  00000000  00000000  000735b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002963f  00000000  00000000  000ad444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016e13a  00000000  00000000  000d6a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00244bbd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000083bc  00000000  00000000  00244c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000238 	.word	0x24000238
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080184cc 	.word	0x080184cc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400023c 	.word	0x2400023c
 800030c:	080184cc 	.word	0x080184cc

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <AMT21_initialise>:
 *      Author: fame
 */
#include <Library/AMT21.h>

void AMT21_initialise(AMT21 *dev, UART_HandleTypeDef *uartHandle,
		uint8_t address, GPIO_TypeDef *DE_port, uint16_t DE_Pin) {
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4613      	mov	r3, r2
 80006c6:	71fb      	strb	r3, [r7, #7]
	dev->uartHandle = uartHandle;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	601a      	str	r2, [r3, #0]
	dev->DE_port = DE_port;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	605a      	str	r2, [r3, #4]
	dev->DE_pin = DE_Pin;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	8b3a      	ldrh	r2, [r7, #24]
 80006d8:	811a      	strh	r2, [r3, #8]
	dev->address = address;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	79fa      	ldrb	r2, [r7, #7]
 80006de:	729a      	strb	r2, [r3, #10]

	dev->uart_buf = 0;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2200      	movs	r2, #0
 80006e4:	819a      	strh	r2, [r3, #12]
	dev->position = 0;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2200      	movs	r2, #0
 80006ea:	81da      	strh	r2, [r3, #14]
	dev->prev_position = 0;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2200      	movs	r2, #0
 80006f0:	821a      	strh	r2, [r3, #16]
	dev->k0 = 0;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2200      	movs	r2, #0
 80006f6:	749a      	strb	r2, [r3, #18]
	dev->k1 = 0;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	2200      	movs	r2, #0
 80006fc:	74da      	strb	r2, [r3, #19]
}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <AMT21_read_value>:

void AMT21_read_value(AMT21 *dev) {
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
	 AMT21_read_value does read raw data from encoder but you must use AMT21_check_value first.

	 :param dev = AMT21 struct
	 :return: None
	 */
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6858      	ldr	r0, [r3, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	891b      	ldrh	r3, [r3, #8]
 800071a:	2201      	movs	r2, #1
 800071c:	4619      	mov	r1, r3
 800071e:	f00c fd41 	bl	800d1a4 <HAL_GPIO_WritePin>
	//HAL_UART_Transmit(dev->uartHandle, (uint8_t*) &(dev->address),
			//1, 100);
	HAL_UART_Transmit(dev->uartHandle, &(dev->address),
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f103 010a 	add.w	r1, r3, #10
 800072c:	2364      	movs	r3, #100	; 0x64
 800072e:	2201      	movs	r2, #1
 8000730:	f011 f850 	bl	80117d4 <HAL_UART_Transmit>
				1, 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6858      	ldr	r0, [r3, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	891b      	ldrh	r3, [r3, #8]
 800073c:	2200      	movs	r2, #0
 800073e:	4619      	mov	r1, r3
 8000740:	f00c fd30 	bl	800d1a4 <HAL_GPIO_WritePin>
	HAL_UART_Receive(dev->uartHandle, (uint8_t*) &(dev->uart_buf), 2, 100);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6818      	ldr	r0, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f103 010c 	add.w	r1, r3, #12
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2202      	movs	r2, #2
 8000752:	f011 f8d5 	bl	8011900 <HAL_UART_Receive>
	dev->k0 = (dev->uart_buf & 0x4000) == 0x4000;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	899b      	ldrh	r3, [r3, #12]
 800075a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075e:	2b00      	cmp	r3, #0
 8000760:	bf14      	ite	ne
 8000762:	2301      	movne	r3, #1
 8000764:	2300      	moveq	r3, #0
 8000766:	b2db      	uxtb	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	749a      	strb	r2, [r3, #18]
	dev->k1 = (dev->uart_buf & 0x8000) == 0x8000;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	899b      	ldrh	r3, [r3, #12]
 8000772:	b21b      	sxth	r3, r3
 8000774:	b29b      	uxth	r3, r3
 8000776:	0bdb      	lsrs	r3, r3, #15
 8000778:	b2db      	uxtb	r3, r3
 800077a:	461a      	mov	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	74da      	strb	r2, [r3, #19]
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <AMT21_check_value>:
	HAL_UART_Transmit(dev->uartHandle, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21_check_value(AMT21 *dev) {
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

	 :param dev = AMT21 struct
	 :return: HAL_OK 	: if value is right
	 HAL_ERROR : if value is wrong
	 */
	uint16_t position_temp = dev->uart_buf & 0x3FFF;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	899b      	ldrh	r3, [r3, #12]
 8000794:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000798:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = dev->uart_buf & 0x0001;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	899b      	ldrh	r3, [r3, #12]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (dev->uart_buf >> 1) & 0x0001;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	899b      	ldrh	r3, [r3, #12]
 80007aa:	085b      	lsrs	r3, r3, #1
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007b6:	2300      	movs	r3, #0
 80007b8:	737b      	strb	r3, [r7, #13]
 80007ba:	e020      	b.n	80007fe <AMT21_check_value+0x76>
		dev->uart_buf = dev->uart_buf >> 2;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	899b      	ldrh	r3, [r3, #12]
 80007c0:	089b      	lsrs	r3, r3, #2
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	819a      	strh	r2, [r3, #12]
		k0_check ^= dev->uart_buf & 0x0001;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	899b      	ldrh	r3, [r3, #12]
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	b25a      	sxtb	r2, r3
 80007d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d8:	4053      	eors	r3, r2
 80007da:	b25b      	sxtb	r3, r3
 80007dc:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (dev->uart_buf >> 1) & 0x0001;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	899b      	ldrh	r3, [r3, #12]
 80007e2:	085b      	lsrs	r3, r3, #1
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	b25a      	sxtb	r2, r3
 80007ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007f2:	4053      	eors	r3, r2
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007f8:	7b7b      	ldrb	r3, [r7, #13]
 80007fa:	3301      	adds	r3, #1
 80007fc:	737b      	strb	r3, [r7, #13]
 80007fe:	7b7b      	ldrb	r3, [r7, #13]
 8000800:	2b05      	cmp	r3, #5
 8000802:	d9db      	bls.n	80007bc <AMT21_check_value+0x34>
	}
	k0_check = !k0_check;
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	2b00      	cmp	r3, #0
 8000808:	bf0c      	ite	eq
 800080a:	2301      	moveq	r3, #1
 800080c:	2300      	movne	r3, #0
 800080e:	b2db      	uxtb	r3, r3
 8000810:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 8000812:	7bbb      	ldrb	r3, [r7, #14]
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf0c      	ite	eq
 8000818:	2301      	moveq	r3, #1
 800081a:	2300      	movne	r3, #0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	73bb      	strb	r3, [r7, #14]
	if ((dev->k0 == k0_check) && (dev->k1 == k1_check)) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7c9b      	ldrb	r3, [r3, #18]
 8000824:	7bfa      	ldrb	r2, [r7, #15]
 8000826:	429a      	cmp	r2, r3
 8000828:	d109      	bne.n	800083e <AMT21_check_value+0xb6>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	7cdb      	ldrb	r3, [r3, #19]
 800082e:	7bba      	ldrb	r2, [r7, #14]
 8000830:	429a      	cmp	r2, r3
 8000832:	d104      	bne.n	800083e <AMT21_check_value+0xb6>
		dev->position = position_temp;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	897a      	ldrh	r2, [r7, #10]
 8000838:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 800083a:	2300      	movs	r3, #0
 800083c:	e000      	b.n	8000840 <AMT21_check_value+0xb8>
	} else {
		return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
	}
}
 8000840:	4618      	mov	r0, r3
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <AMT21_unwrap>:

int32_t AMT21_unwrap(int32_t pulse, int32_t prev_pulse) {
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
	int32_t dPulse = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
	if (pulse - prev_pulse > 8191) {
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000864:	db06      	blt.n	8000874 <AMT21_unwrap+0x28>
		dPulse = -(16383 - (pulse-prev_pulse));
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	1ad2      	subs	r2, r2, r3
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <AMT21_unwrap+0x5c>)
 800086e:	4413      	add	r3, r2
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	e011      	b.n	8000898 <AMT21_unwrap+0x4c>
	} else if ( pulse -  prev_pulse < -8191) {
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800087e:	dc07      	bgt.n	8000890 <AMT21_unwrap+0x44>
		dPulse = 16383 - (prev_pulse - pulse);
 8000880:	683a      	ldr	r2, [r7, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	1ad2      	subs	r2, r2, r3
 8000886:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800088a:	1a9b      	subs	r3, r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	e003      	b.n	8000898 <AMT21_unwrap+0x4c>
	} else {
		dPulse =  pulse -  prev_pulse;
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	60fb      	str	r3, [r7, #12]
	}
	return dPulse;
 8000898:	68fb      	ldr	r3, [r7, #12]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	ffffc001 	.word	0xffffc001

080008ac <ARMsProtocol_FUNC_Init>:
/**
 * @brief	Initial Function : Initial the parameters that use in this library
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Init(void){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	// setting ARMsProtocol_h1
	ARMsProtocol_h1.handle = &huart3;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <ARMsProtocol_FUNC_Init+0x40>)
 80008b2:	4a0f      	ldr	r2, [pc, #60]	; (80008f0 <ARMsProtocol_FUNC_Init+0x44>)
 80008b4:	601a      	str	r2, [r3, #0]
	ARMsProtocol_h1.Instance = USART3;
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <ARMsProtocol_FUNC_Init+0x40>)
 80008b8:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <ARMsProtocol_FUNC_Init+0x48>)
 80008ba:	605a      	str	r2, [r3, #4]
	ARMsProtocol_h1.slave_id = 0;
 80008bc:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <ARMsProtocol_FUNC_Init+0x40>)
 80008be:	2200      	movs	r2, #0
 80008c0:	721a      	strb	r2, [r3, #8]

	//setting ARMsProtocol_Data
	ARMsProtocol_Data.Code = 0;
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <ARMsProtocol_FUNC_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
	ARMsProtocol_Data.State = 0;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <ARMsProtocol_FUNC_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
	ARMsProtocol_Data.Rx_count = 0;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <ARMsProtocol_FUNC_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8

	// Enable UART IT
	HAL_UART_Receive_IT(ARMsProtocol_h1.handle, &ARMsProtocol_Data.Rx_reg, 1);
 80008da:	4b04      	ldr	r3, [pc, #16]	; (80008ec <ARMsProtocol_FUNC_Init+0x40>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2201      	movs	r2, #1
 80008e0:	4906      	ldr	r1, [pc, #24]	; (80008fc <ARMsProtocol_FUNC_Init+0x50>)
 80008e2:	4618      	mov	r0, r3
 80008e4:	f011 f988 	bl	8011bf8 <HAL_UART_Receive_IT>
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	24000354 	.word	0x24000354
 80008f0:	240011b0 	.word	0x240011b0
 80008f4:	40004800 	.word	0x40004800
 80008f8:	24000360 	.word	0x24000360
 80008fc:	240003c4 	.word	0x240003c4

08000900 <ARMsProtocol_FUNC_Interface>:
/**
 * @brief	Interface Function : Data frame checking and state machine
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Interface(void){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
	ARMsProtocol_Data.Flag = 1;
 8000906:	4b6b      	ldr	r3, [pc, #428]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000908:	2201      	movs	r2, #1
 800090a:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
	if(ARMsProtocol_Data.Flag  == 1){
 800090e:	4b69      	ldr	r3, [pc, #420]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000910:	f893 30e5 	ldrb.w	r3, [r3, #229]	; 0xe5
 8000914:	2b01      	cmp	r3, #1
 8000916:	f040 80c8 	bne.w	8000aaa <ARMsProtocol_FUNC_Interface+0x1aa>
		//check header
		if(ARMsProtocol_Data.State == 0){
 800091a:	4b66      	ldr	r3, [pc, #408]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 800091c:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8000920:	2b00      	cmp	r3, #0
 8000922:	d10d      	bne.n	8000940 <ARMsProtocol_FUNC_Interface+0x40>
			ARMsProtocol_Data.Header = ARMsProtocol_Data.Rx_buf[0];
 8000924:	4b63      	ldr	r3, [pc, #396]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000926:	781a      	ldrb	r2, [r3, #0]
 8000928:	4b62      	ldr	r3, [pc, #392]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 800092a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			if(ARMsProtocol_Data.Header == ARMsProtocol_HEADER){
 800092e:	4b61      	ldr	r3, [pc, #388]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000930:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8000934:	2bff      	cmp	r3, #255	; 0xff
 8000936:	d103      	bne.n	8000940 <ARMsProtocol_FUNC_Interface+0x40>
				ARMsProtocol_Data.State = 1;
 8000938:	4b5e      	ldr	r3, [pc, #376]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 800093a:	2201      	movs	r2, #1
 800093c:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
			}
		}
		//check slave id
		if(ARMsProtocol_Data.State == 1){
 8000940:	4b5c      	ldr	r3, [pc, #368]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000942:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8000946:	2b01      	cmp	r3, #1
 8000948:	d122      	bne.n	8000990 <ARMsProtocol_FUNC_Interface+0x90>
			ARMsProtocol_Data.Id = ARMsProtocol_Data.Rx_buf[1];
 800094a:	4b5a      	ldr	r3, [pc, #360]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 800094c:	785a      	ldrb	r2, [r3, #1]
 800094e:	4b59      	ldr	r3, [pc, #356]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000950:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
			if(ARMsProtocol_Data.Id == ARMsProtocol_h1.slave_id){
 8000954:	4b57      	ldr	r3, [pc, #348]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000956:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800095a:	4b57      	ldr	r3, [pc, #348]	; (8000ab8 <ARMsProtocol_FUNC_Interface+0x1b8>)
 800095c:	7a1b      	ldrb	r3, [r3, #8]
 800095e:	429a      	cmp	r2, r3
 8000960:	d116      	bne.n	8000990 <ARMsProtocol_FUNC_Interface+0x90>
				ARMsProtocol_Data.Instruction = ARMsProtocol_Data.Rx_buf[2];
 8000962:	4b54      	ldr	r3, [pc, #336]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000964:	789a      	ldrb	r2, [r3, #2]
 8000966:	4b53      	ldr	r3, [pc, #332]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000968:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
				ARMsProtocol_Data.Length = ARMsProtocol_Data.Rx_buf[3];
 800096c:	4b51      	ldr	r3, [pc, #324]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 800096e:	78da      	ldrb	r2, [r3, #3]
 8000970:	4b50      	ldr	r3, [pc, #320]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000972:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
				ARMsProtocol_Data._CRC = ARMsProtocol_Data.Rx_buf[3 + ARMsProtocol_Data.Length];
 8000976:	4b4f      	ldr	r3, [pc, #316]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000978:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800097c:	3303      	adds	r3, #3
 800097e:	4a4d      	ldr	r2, [pc, #308]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000980:	5cd2      	ldrb	r2, [r2, r3]
 8000982:	4b4c      	ldr	r3, [pc, #304]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000984:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
				ARMsProtocol_Data.State = 2;
 8000988:	4b4a      	ldr	r3, [pc, #296]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 800098a:	2202      	movs	r2, #2
 800098c:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
			}
		}
		// check crc
		if(ARMsProtocol_Data.State == 2){
 8000990:	4b48      	ldr	r3, [pc, #288]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000992:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8000996:	2b02      	cmp	r3, #2
 8000998:	d13b      	bne.n	8000a12 <ARMsProtocol_FUNC_Interface+0x112>
			ARMsProtocol_CALC_CRC((uint32_t *) &ARMsProtocol_Data.Rx_buf[2], ARMsProtocol_Data.Length + 1);
 800099a:	4b46      	ldr	r3, [pc, #280]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 800099c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80009a0:	3301      	adds	r3, #1
 80009a2:	4619      	mov	r1, r3
 80009a4:	4845      	ldr	r0, [pc, #276]	; (8000abc <ARMsProtocol_FUNC_Interface+0x1bc>)
 80009a6:	f000 f915 	bl	8000bd4 <ARMsProtocol_CALC_CRC>
			if(ARMsProtocol_Data._CRC == ARMsProtocol_Data.CRC_CAL){
 80009aa:	4b42      	ldr	r3, [pc, #264]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 80009ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b40      	ldr	r3, [pc, #256]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 80009b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d11b      	bne.n	80009f2 <ARMsProtocol_FUNC_Interface+0xf2>
				for(int i = 0;i <= ARMsProtocol_Data.Length - 2;i++){
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	e00c      	b.n	80009da <ARMsProtocol_FUNC_Interface+0xda>
					ARMsProtocol_Data.Data_buf[i] = ARMsProtocol_Data.Rx_buf[i+4];
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3304      	adds	r3, #4
 80009c4:	4a3b      	ldr	r2, [pc, #236]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 80009c6:	5cd1      	ldrb	r1, [r2, r3]
 80009c8:	4a3a      	ldr	r2, [pc, #232]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	3380      	adds	r3, #128	; 0x80
 80009d0:	460a      	mov	r2, r1
 80009d2:	701a      	strb	r2, [r3, #0]
				for(int i = 0;i <= ARMsProtocol_Data.Length - 2;i++){
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3301      	adds	r3, #1
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b36      	ldr	r3, [pc, #216]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 80009dc:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80009e0:	3b01      	subs	r3, #1
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	dbeb      	blt.n	80009c0 <ARMsProtocol_FUNC_Interface+0xc0>
				}
				ARMsProtocol_Data.State = 3;
 80009e8:	4b32      	ldr	r3, [pc, #200]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 80009ea:	2203      	movs	r2, #3
 80009ec:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 80009f0:	e005      	b.n	80009fe <ARMsProtocol_FUNC_Interface+0xfe>
			}
			else{
				ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ILLEGALCRC);
 80009f2:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <ARMsProtocol_FUNC_Interface+0x1b8>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2102      	movs	r1, #2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 f8b5 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
			}
			ARMsProtocol_FUNC_Rx_Clrbuf(ARMsProtocol_Data.Rx_count);
 80009fe:	4b2d      	ldr	r3, [pc, #180]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000a00:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 f8fd 	bl	8000c04 <ARMsProtocol_FUNC_Rx_Clrbuf>
			ARMsProtocol_Data.Rx_count = 0;
 8000a0a:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
		}
		if(ARMsProtocol_Data.State == 3){
 8000a12:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000a14:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8000a18:	2b03      	cmp	r3, #3
 8000a1a:	d139      	bne.n	8000a90 <ARMsProtocol_FUNC_Interface+0x190>
			switch(ARMsProtocol_Data.Instruction){
 8000a1c:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000a1e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8000a22:	3b01      	subs	r3, #1
 8000a24:	2b06      	cmp	r3, #6
 8000a26:	d82c      	bhi.n	8000a82 <ARMsProtocol_FUNC_Interface+0x182>
 8000a28:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <ARMsProtocol_FUNC_Interface+0x130>)
 8000a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2e:	bf00      	nop
 8000a30:	08000a4d 	.word	0x08000a4d
 8000a34:	08000a53 	.word	0x08000a53
 8000a38:	08000a59 	.word	0x08000a59
 8000a3c:	08000a5f 	.word	0x08000a5f
 8000a40:	08000a65 	.word	0x08000a65
 8000a44:	08000a6b 	.word	0x08000a6b
 8000a48:	08000a77 	.word	0x08000a77
			/* USER CODE BEGIN 0 */
			case ARMsProtocol_ADDR_JOINTJOG:
				ARMsProtocol_FUNC_Jointjog();
 8000a4c:	f000 f92c 	bl	8000ca8 <ARMsProtocol_FUNC_Jointjog>
				break;
 8000a50:	e01f      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			case ARMsProtocol_ADDR_CATESIANJOG:
				ARMsProtocol_FUNC_Catesianjog();
 8000a52:	f000 fa1d 	bl	8000e90 <ARMsProtocol_FUNC_Catesianjog>
				break;
 8000a56:	e01c      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			case ARMsProtocol_ADDR_TRAJECTORY:
				ARMsProtocol_FUNC_Trajectory();
 8000a58:	f000 fb40 	bl	80010dc <ARMsProtocol_FUNC_Trajectory>
				break;
 8000a5c:	e019      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			case ARMsProtocol_ADDR_PATHWAY:
				ARMsProtocol_FUNC_Pathway();
 8000a5e:	f000 f90f 	bl	8000c80 <ARMsProtocol_FUNC_Pathway>
				break;
 8000a62:	e016      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			case ARMsProtocol_ADDR_GRIPPER:
				ARMsProtocol_FUNC_Gripper();
 8000a64:	f000 fb4e 	bl	8001104 <ARMsProtocol_FUNC_Gripper>
				break;
 8000a68:	e013      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			case ARMsProtocol_ADDR_JOTNTFEEDBACK:
				ARMsProtocol_FUNC_Jointfeedback(ARMsProtocol_h1.handle);
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <ARMsProtocol_FUNC_Interface+0x1b8>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 fb6a 	bl	8001148 <ARMsProtocol_FUNC_Jointfeedback>
				break;
 8000a74:	e00d      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			case ARMsProtocol_ADDR_BOARDFEEDBACK:
				ARMsProtocol_FUNC_Boardfeedback(ARMsProtocol_h1.handle);
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <ARMsProtocol_FUNC_Interface+0x1b8>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 fcbc 	bl	80013f8 <ARMsProtocol_FUNC_Boardfeedback>
				break;
 8000a80:	e007      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			/* USER CODE END 0 */
			default:
				ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ILLEGALFUNC);
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <ARMsProtocol_FUNC_Interface+0x1b8>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2101      	movs	r1, #1
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 f86d 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
 8000a8e:	e000      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			}
		}
 8000a90:	bf00      	nop
		ARMsProtocol_Data.Flag  = 0;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
		ARMsProtocol_Data.State = 0;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
		ARMsProtocol_Data.Rx_count = 0;
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	}
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	24000360 	.word	0x24000360
 8000ab8:	24000354 	.word	0x24000354
 8000abc:	24000362 	.word	0x24000362

08000ac0 <ARMsProtocol_FUNC_Rx_Callback>:
/**
 * @brief	Recieve Callback Function
 * @param  	huart : UART_TypeDef of USART
 * @retval 	None
 */
void ARMsProtocol_FUNC_Rx_Callback(UART_HandleTypeDef *huart){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == ARMsProtocol_h1.Instance) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <ARMsProtocol_FUNC_Rx_Callback+0x54>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d11b      	bne.n	8000b0c <ARMsProtocol_FUNC_Rx_Callback+0x4c>
		ARMsProtocol_Data.Rx_buf[ARMsProtocol_Data.Rx_count++] = ARMsProtocol_Data.Rx_reg;
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <ARMsProtocol_FUNC_Rx_Callback+0x58>)
 8000ad6:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8000ada:	1c5a      	adds	r2, r3, #1
 8000adc:	b2d1      	uxtb	r1, r2
 8000ade:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <ARMsProtocol_FUNC_Rx_Callback+0x58>)
 8000ae0:	f882 10e8 	strb.w	r1, [r2, #232]	; 0xe8
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <ARMsProtocol_FUNC_Rx_Callback+0x58>)
 8000ae8:	f893 1064 	ldrb.w	r1, [r3, #100]	; 0x64
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <ARMsProtocol_FUNC_Rx_Callback+0x58>)
 8000aee:	5499      	strb	r1, [r3, r2]
			if (ARMsProtocol_Data.Rx_count >= sizeof(ARMsProtocol_Data.Rx_buf)) {
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <ARMsProtocol_FUNC_Rx_Callback+0x58>)
 8000af2:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8000af6:	2b63      	cmp	r3, #99	; 0x63
 8000af8:	d903      	bls.n	8000b02 <ARMsProtocol_FUNC_Rx_Callback+0x42>
				ARMsProtocol_Data.Rx_count = 0;
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <ARMsProtocol_FUNC_Rx_Callback+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
			}
		HAL_UART_Receive_IT(huart, &ARMsProtocol_Data.Rx_reg, 1);
 8000b02:	2201      	movs	r2, #1
 8000b04:	4905      	ldr	r1, [pc, #20]	; (8000b1c <ARMsProtocol_FUNC_Rx_Callback+0x5c>)
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f011 f876 	bl	8011bf8 <HAL_UART_Receive_IT>
	}
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	24000354 	.word	0x24000354
 8000b18:	24000360 	.word	0x24000360
 8000b1c:	240003c4 	.word	0x240003c4

08000b20 <ARMsProtocol_FUNC_Tx_Callback>:
/**
 * @brief	Transmit Callback Function
 * @param  	huart : UART_TypeDef of USART
 * @retval 	None
 */
void ARMsProtocol_FUNC_Tx_Callback(UART_HandleTypeDef *huart){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	if (huart->Instance == ARMsProtocol_h1.Instance){
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <ARMsProtocol_FUNC_Tx_Callback+0x3c>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d10e      	bne.n	8000b52 <ARMsProtocol_FUNC_Tx_Callback+0x32>
			HAL_UART_Transmit_IT(huart, &ARMsProtocol_Data.Tx_buf[0], ARMsProtocol_Data.Tx_count);
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <ARMsProtocol_FUNC_Tx_Callback+0x40>)
 8000b36:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4909      	ldr	r1, [pc, #36]	; (8000b64 <ARMsProtocol_FUNC_Tx_Callback+0x44>)
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f010 ffb1 	bl	8011aa8 <HAL_UART_Transmit_IT>
			while(ARMsProtocol_Data.Tx_flag);
 8000b46:	bf00      	nop
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <ARMsProtocol_FUNC_Tx_Callback+0x40>)
 8000b4a:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1fa      	bne.n	8000b48 <ARMsProtocol_FUNC_Tx_Callback+0x28>
			//ARMsProtocol_Data.Tx_count = 0;
	}
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	24000354 	.word	0x24000354
 8000b60:	24000360 	.word	0x24000360
 8000b64:	240003c5 	.word	0x240003c5

08000b68 <ARMsProtocol_EXCEPTION_Response>:
 * 									0x02 = ARMsProtocol_TRANSMIT_ILLEGALCRC
 * 									0x03 = ARMsProtocol_TRANSMIT_ACKNOWLEDGE
 * 									0x04 = ARMsProtocol_TRANSMIT_DONE
 * @retval 	None
 */
void ARMsProtocol_EXCEPTION_Response(UART_HandleTypeDef *huart, uint8_t code){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	70fb      	strb	r3, [r7, #3]
	ARMsProtocol_Data.Tx_count = 4;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000b76:	2204      	movs	r2, #4
 8000b78:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	ARMsProtocol_Data.Tx_buf[0] = 0xFF;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000b7e:	22ff      	movs	r2, #255	; 0xff
 8000b80:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	ARMsProtocol_Data.Tx_buf[1] = ARMsProtocol_h1.slave_id;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <ARMsProtocol_EXCEPTION_Response+0x64>)
 8000b86:	7a1a      	ldrb	r2, [r3, #8]
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000b8a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	ARMsProtocol_Data.Tx_buf[2] = code;
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	ARMsProtocol_CALC_CRC((uint32_t*) &ARMsProtocol_Data.Tx_buf, ARMsProtocol_Data.Tx_count - 1);
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000b98:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <ARMsProtocol_EXCEPTION_Response+0x68>)
 8000ba2:	f000 f817 	bl	8000bd4 <ARMsProtocol_CALC_CRC>
	ARMsProtocol_Data.Tx_buf[3] = ARMsProtocol_Data.CRC_CAL;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000bae:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	ARMsProtocol_Data.Tx_flag = 1;
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
	ARMsProtocol_FUNC_Tx_Callback(huart);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ffb0 	bl	8000b20 <ARMsProtocol_FUNC_Tx_Callback>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	24000360 	.word	0x24000360
 8000bcc:	24000354 	.word	0x24000354
 8000bd0:	240003c5 	.word	0x240003c5

08000bd4 <ARMsProtocol_CALC_CRC>:
 * @param  	*nData  : Data
 * 			wLength : Length of Data
 * @retval 	None
 */
void ARMsProtocol_CALC_CRC (uint32_t *pBuffer, uint32_t BufferLength)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
	ARMsProtocol_Data.CRC_CAL = HAL_CRC_Calculate(&hcrc, pBuffer, BufferLength) ^ 0xFF;
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <ARMsProtocol_CALC_CRC+0x28>)
 8000be4:	f00b fa3a 	bl	800c05c <HAL_CRC_Calculate>
 8000be8:	4603      	mov	r3, r0
 8000bea:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8000bee:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <ARMsProtocol_CALC_CRC+0x2c>)
 8000bf0:	6793      	str	r3, [r2, #120]	; 0x78
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	24000530 	.word	0x24000530
 8000c00:	24000360 	.word	0x24000360

08000c04 <ARMsProtocol_FUNC_Rx_Clrbuf>:
/**
 * @brief	Clear Recieve Buffer
 * @param  	count : amount of data in Rx_buf
 * @retval 	None
 */
void ARMsProtocol_FUNC_Rx_Clrbuf(uint8_t count){
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
	for(int i =0; i <= count; i++){
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	e007      	b.n	8000c24 <ARMsProtocol_FUNC_Rx_Clrbuf+0x20>
		ARMsProtocol_Data.Rx_buf[i] = 0;
 8000c14:	4a09      	ldr	r2, [pc, #36]	; (8000c3c <ARMsProtocol_FUNC_Rx_Clrbuf+0x38>)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4413      	add	r3, r2
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
	for(int i =0; i <= count; i++){
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	3301      	adds	r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	ddf3      	ble.n	8000c14 <ARMsProtocol_FUNC_Rx_Clrbuf+0x10>
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	24000360 	.word	0x24000360

08000c40 <ARMsProtocol_FUNC_Data_Clrbuf>:
/**
 * @brief	Clear Data Buffer
 * @param  	count : amount of data in Data_buf
 * @retval 	None
 */
void ARMsProtocol_FUNC_Data_Clrbuf(){
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
	for(int i =0; i <= ARMsProtocol_Data.Length; i++){
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	e008      	b.n	8000c5e <ARMsProtocol_FUNC_Data_Clrbuf+0x1e>
		ARMsProtocol_Data.Data_buf[i] = 0;
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <ARMsProtocol_FUNC_Data_Clrbuf+0x3c>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	3380      	adds	r3, #128	; 0x80
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
	for(int i =0; i <= ARMsProtocol_Data.Length; i++){
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <ARMsProtocol_FUNC_Data_Clrbuf+0x3c>)
 8000c60:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8000c64:	461a      	mov	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	ddef      	ble.n	8000c4c <ARMsProtocol_FUNC_Data_Clrbuf+0xc>
	}
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	24000360 	.word	0x24000360

08000c80 <ARMsProtocol_FUNC_Pathway>:
/**
 * @brief	Sethome Function
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Pathway(void){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	// Acknowledge Func
	ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ACKNOWLEDGE);
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <ARMsProtocol_FUNC_Pathway+0x20>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2103      	movs	r1, #3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ff6c 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
	ARMsProtocol_Data.Pathway_flag = 1;
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <ARMsProtocol_FUNC_Pathway+0x24>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	// Clear Data
	ARMsProtocol_FUNC_Data_Clrbuf();
 8000c98:	f7ff ffd2 	bl	8000c40 <ARMsProtocol_FUNC_Data_Clrbuf>
	// Done Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_DONE);
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	24000354 	.word	0x24000354
 8000ca4:	24000360 	.word	0x24000360

08000ca8 <ARMsProtocol_FUNC_Jointjog>:
/**
 * @brief	Jointjog Function
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Jointjog(void){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
	// Acknowledge Func
	ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ACKNOWLEDGE);
 8000cae:	4b74      	ldr	r3, [pc, #464]	; (8000e80 <ARMsProtocol_FUNC_Jointjog+0x1d8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2103      	movs	r1, #3
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff57 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
	ARMsProtocol_Data.Jointjog_flag = 1;
 8000cba:	4b72      	ldr	r3, [pc, #456]	; (8000e84 <ARMsProtocol_FUNC_Jointjog+0x1dc>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
	double data_buf = 0.0;
 8000cc2:	f04f 0200 	mov.w	r2, #0
 8000cc6:	f04f 0300 	mov.w	r3, #0
 8000cca:	e9c7 2300 	strd	r2, r3, [r7]
	/* USER CODE BEGIN 3 */
	for(int i = 0;i < 5;i++){		data_buf = (int16_t)((ARMsProtocol_Data.Data_buf[i*2] << 8) + ARMsProtocol_Data.Data_buf[(i*2)+1]);
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	e0bb      	b.n	8000e4c <ARMsProtocol_FUNC_Jointjog+0x1a4>
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4a6a      	ldr	r2, [pc, #424]	; (8000e84 <ARMsProtocol_FUNC_Jointjog+0x1dc>)
 8000cda:	4413      	add	r3, r2
 8000cdc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	3301      	adds	r3, #1
 8000cec:	4965      	ldr	r1, [pc, #404]	; (8000e84 <ARMsProtocol_FUNC_Jointjog+0x1dc>)
 8000cee:	440b      	add	r3, r1
 8000cf0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	4413      	add	r3, r2
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	b21b      	sxth	r3, r3
 8000cfc:	ee07 3a90 	vmov	s15, r3
 8000d00:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d04:	ed87 7b00 	vstr	d7, [r7]
		data_buf = data_buf/1000.0;
 8000d08:	ed97 6b00 	vldr	d6, [r7]
 8000d0c:	ed9f 5b54 	vldr	d5, [pc, #336]	; 8000e60 <ARMsProtocol_FUNC_Jointjog+0x1b8>
 8000d10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d14:	ed87 7b00 	vstr	d7, [r7]
		if (i == 0){
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d118      	bne.n	8000d50 <ARMsProtocol_FUNC_Jointjog+0xa8>
			data_buf = data_buf * (9.0 / 25.0);
 8000d1e:	ed97 7b00 	vldr	d7, [r7]
 8000d22:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8000e68 <ARMsProtocol_FUNC_Jointjog+0x1c0>
 8000d26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d2a:	ed87 7b00 	vstr	d7, [r7]
			desired_position[i] += data_buf;
 8000d2e:	4a56      	ldr	r2, [pc, #344]	; (8000e88 <ARMsProtocol_FUNC_Jointjog+0x1e0>)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	4413      	add	r3, r2
 8000d36:	ed93 6b00 	vldr	d6, [r3]
 8000d3a:	ed97 7b00 	vldr	d7, [r7]
 8000d3e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d42:	4a51      	ldr	r2, [pc, #324]	; (8000e88 <ARMsProtocol_FUNC_Jointjog+0x1e0>)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	4413      	add	r3, r2
 8000d4a:	ed83 7b00 	vstr	d7, [r3]
 8000d4e:	e07a      	b.n	8000e46 <ARMsProtocol_FUNC_Jointjog+0x19e>
		}
		else if (i == 1){
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d118      	bne.n	8000d88 <ARMsProtocol_FUNC_Jointjog+0xe0>
			data_buf = data_buf / 27.0;
 8000d56:	ed97 6b00 	vldr	d6, [r7]
 8000d5a:	eeb3 5b0b 	vmov.f64	d5, #59	; 0x41d80000  27.0
 8000d5e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d62:	ed87 7b00 	vstr	d7, [r7]
			desired_position[i] += data_buf;
 8000d66:	4a48      	ldr	r2, [pc, #288]	; (8000e88 <ARMsProtocol_FUNC_Jointjog+0x1e0>)
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	4413      	add	r3, r2
 8000d6e:	ed93 6b00 	vldr	d6, [r3]
 8000d72:	ed97 7b00 	vldr	d7, [r7]
 8000d76:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d7a:	4a43      	ldr	r2, [pc, #268]	; (8000e88 <ARMsProtocol_FUNC_Jointjog+0x1e0>)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	4413      	add	r3, r2
 8000d82:	ed83 7b00 	vstr	d7, [r3]
 8000d86:	e05e      	b.n	8000e46 <ARMsProtocol_FUNC_Jointjog+0x19e>
		}
		else if (i == 2){
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d11c      	bne.n	8000dc8 <ARMsProtocol_FUNC_Jointjog+0x120>
			data_buf = asin(data_buf/22.5);
 8000d8e:	ed97 7b00 	vldr	d7, [r7]
 8000d92:	ed9f 5b37 	vldr	d5, [pc, #220]	; 8000e70 <ARMsProtocol_FUNC_Jointjog+0x1c8>
 8000d96:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000d9a:	eeb0 0b46 	vmov.f64	d0, d6
 8000d9e:	f016 fc43 	bl	8017628 <asin>
 8000da2:	ed87 0b00 	vstr	d0, [r7]
			desired_position[i] += data_buf;
 8000da6:	4a38      	ldr	r2, [pc, #224]	; (8000e88 <ARMsProtocol_FUNC_Jointjog+0x1e0>)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	4413      	add	r3, r2
 8000dae:	ed93 6b00 	vldr	d6, [r3]
 8000db2:	ed97 7b00 	vldr	d7, [r7]
 8000db6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000dba:	4a33      	ldr	r2, [pc, #204]	; (8000e88 <ARMsProtocol_FUNC_Jointjog+0x1e0>)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	00db      	lsls	r3, r3, #3
 8000dc0:	4413      	add	r3, r2
 8000dc2:	ed83 7b00 	vstr	d7, [r3]
 8000dc6:	e03e      	b.n	8000e46 <ARMsProtocol_FUNC_Jointjog+0x19e>
		}
		else if (i ==3){
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2b03      	cmp	r3, #3
 8000dcc:	d11c      	bne.n	8000e08 <ARMsProtocol_FUNC_Jointjog+0x160>
			desired_position[3] += (4.444444444 * data_buf);
 8000dce:	4b2e      	ldr	r3, [pc, #184]	; (8000e88 <ARMsProtocol_FUNC_Jointjog+0x1e0>)
 8000dd0:	ed93 6b06 	vldr	d6, [r3, #24]
 8000dd4:	ed97 7b00 	vldr	d7, [r7]
 8000dd8:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8000e78 <ARMsProtocol_FUNC_Jointjog+0x1d0>
 8000ddc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000de0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000de4:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <ARMsProtocol_FUNC_Jointjog+0x1e0>)
 8000de6:	ed83 7b06 	vstr	d7, [r3, #24]
			desired_position[4] += (4.444444444 * data_buf);
 8000dea:	4b27      	ldr	r3, [pc, #156]	; (8000e88 <ARMsProtocol_FUNC_Jointjog+0x1e0>)
 8000dec:	ed93 6b08 	vldr	d6, [r3, #32]
 8000df0:	ed97 7b00 	vldr	d7, [r7]
 8000df4:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8000e78 <ARMsProtocol_FUNC_Jointjog+0x1d0>
 8000df8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000dfc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e00:	4b21      	ldr	r3, [pc, #132]	; (8000e88 <ARMsProtocol_FUNC_Jointjog+0x1e0>)
 8000e02:	ed83 7b08 	vstr	d7, [r3, #32]
 8000e06:	e01e      	b.n	8000e46 <ARMsProtocol_FUNC_Jointjog+0x19e>
		}
		else if (i ==4){
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	d11b      	bne.n	8000e46 <ARMsProtocol_FUNC_Jointjog+0x19e>
			desired_position[3] += (4 * data_buf);
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <ARMsProtocol_FUNC_Jointjog+0x1e0>)
 8000e10:	ed93 6b06 	vldr	d6, [r3, #24]
 8000e14:	ed97 7b00 	vldr	d7, [r7]
 8000e18:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000e1c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e20:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e24:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <ARMsProtocol_FUNC_Jointjog+0x1e0>)
 8000e26:	ed83 7b06 	vstr	d7, [r3, #24]
			desired_position[4] -= (4 * data_buf);
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <ARMsProtocol_FUNC_Jointjog+0x1e0>)
 8000e2c:	ed93 6b08 	vldr	d6, [r3, #32]
 8000e30:	ed97 7b00 	vldr	d7, [r7]
 8000e34:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000e38:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e3c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <ARMsProtocol_FUNC_Jointjog+0x1e0>)
 8000e42:	ed83 7b08 	vstr	d7, [r3, #32]
	for(int i = 0;i < 5;i++){		data_buf = (int16_t)((ARMsProtocol_Data.Data_buf[i*2] << 8) + ARMsProtocol_Data.Data_buf[(i*2)+1]);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	f77f af40 	ble.w	8000cd4 <ARMsProtocol_FUNC_Jointjog+0x2c>
		}
	}
	/* USER CODE END 3 */

	// Clear Data
	ARMsProtocol_FUNC_Data_Clrbuf();
 8000e54:	f7ff fef4 	bl	8000c40 <ARMsProtocol_FUNC_Data_Clrbuf>
	// Done Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_DONE);
}
 8000e58:	bf00      	nop
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	00000000 	.word	0x00000000
 8000e64:	408f4000 	.word	0x408f4000
 8000e68:	70a3d70a 	.word	0x70a3d70a
 8000e6c:	3fd70a3d 	.word	0x3fd70a3d
 8000e70:	00000000 	.word	0x00000000
 8000e74:	40368000 	.word	0x40368000
 8000e78:	71bf79c2 	.word	0x71bf79c2
 8000e7c:	4011c71c 	.word	0x4011c71c
 8000e80:	24000354 	.word	0x24000354
 8000e84:	24000360 	.word	0x24000360
 8000e88:	24000258 	.word	0x24000258
 8000e8c:	00000000 	.word	0x00000000

08000e90 <ARMsProtocol_FUNC_Catesianjog>:
/**
 * @brief	Catesianjog Function
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Catesianjog(void){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b0a0      	sub	sp, #128	; 0x80
 8000e94:	af00      	add	r7, sp, #0
	// Acknowledge Func
	ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ACKNOWLEDGE);
 8000e96:	4b8e      	ldr	r3, [pc, #568]	; (80010d0 <ARMsProtocol_FUNC_Catesianjog+0x240>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2103      	movs	r1, #3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fe63 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
	ARMsProtocol_Data.Catesian_flag = 1;
 8000ea2:	4b8c      	ldr	r3, [pc, #560]	; (80010d4 <ARMsProtocol_FUNC_Catesianjog+0x244>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
	/* USER CODE BEGIN 4 */
	double joint_config[5] = {0};
 8000eaa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000eae:	2228      	movs	r2, #40	; 0x28
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f013 fbe8 	bl	8014688 <memset>
	double delta_q[5] = {0};
 8000eb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ebc:	2228      	movs	r2, #40	; 0x28
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f013 fbe1 	bl	8014688 <memset>
	double delta_khe[5] = {0};
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	2228      	movs	r2, #40	; 0x28
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f013 fbdb 	bl	8014688 <memset>
	for (int i = 0; i <5; i++){
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000ed6:	e071      	b.n	8000fbc <ARMsProtocol_FUNC_Catesianjog+0x12c>
		delta_khe[i] = (int16_t)((ARMsProtocol_Data.Data_buf[i*2] << 8) + ARMsProtocol_Data.Data_buf[(i*2)+1]);
 8000ed8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4a7d      	ldr	r2, [pc, #500]	; (80010d4 <ARMsProtocol_FUNC_Catesianjog+0x244>)
 8000ede:	4413      	add	r3, r2
 8000ee0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	3301      	adds	r3, #1
 8000ef0:	4978      	ldr	r1, [pc, #480]	; (80010d4 <ARMsProtocol_FUNC_Catesianjog+0x244>)
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	4413      	add	r3, r2
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	b21b      	sxth	r3, r3
 8000f00:	ee07 3a90 	vmov	s15, r3
 8000f04:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000f10:	4413      	add	r3, r2
 8000f12:	3b80      	subs	r3, #128	; 0x80
 8000f14:	ed83 7b00 	vstr	d7, [r3]
		if (i == 0){
 8000f18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d117      	bne.n	8000f4e <ARMsProtocol_FUNC_Catesianjog+0xbe>
			delta_khe[i] = (delta_khe[i]/1000.0f)/10;
 8000f1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000f26:	4413      	add	r3, r2
 8000f28:	3b80      	subs	r3, #128	; 0x80
 8000f2a:	ed93 7b00 	vldr	d7, [r3]
 8000f2e:	ed9f 5b60 	vldr	d5, [pc, #384]	; 80010b0 <ARMsProtocol_FUNC_Catesianjog+0x220>
 8000f32:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000f36:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000f3a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000f46:	4413      	add	r3, r2
 8000f48:	3b80      	subs	r3, #128	; 0x80
 8000f4a:	ed83 7b00 	vstr	d7, [r3]
		}
		if (i == 1){
 8000f4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d118      	bne.n	8000f86 <ARMsProtocol_FUNC_Catesianjog+0xf6>
			delta_khe[i] = (delta_khe[i]/1000.0f)/10;
 8000f54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000f5c:	4413      	add	r3, r2
 8000f5e:	3b80      	subs	r3, #128	; 0x80
 8000f60:	ed93 7b00 	vldr	d7, [r3]
 8000f64:	ed9f 5b52 	vldr	d5, [pc, #328]	; 80010b0 <ARMsProtocol_FUNC_Catesianjog+0x220>
 8000f68:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000f6c:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8000f70:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f76:	00db      	lsls	r3, r3, #3
 8000f78:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000f7c:	4413      	add	r3, r2
 8000f7e:	3b80      	subs	r3, #128	; 0x80
 8000f80:	ed83 7b00 	vstr	d7, [r3]
 8000f84:	e017      	b.n	8000fb6 <ARMsProtocol_FUNC_Catesianjog+0x126>
		}
		else {
			delta_khe[i] = 5*(delta_khe[i]/1000.0f);
 8000f86:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000f8e:	4413      	add	r3, r2
 8000f90:	3b80      	subs	r3, #128	; 0x80
 8000f92:	ed93 6b00 	vldr	d6, [r3]
 8000f96:	ed9f 5b46 	vldr	d5, [pc, #280]	; 80010b0 <ARMsProtocol_FUNC_Catesianjog+0x220>
 8000f9a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f9e:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 8000fa2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000fae:	4413      	add	r3, r2
 8000fb0:	3b80      	subs	r3, #128	; 0x80
 8000fb2:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i <5; i++){
 8000fb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fb8:	3301      	adds	r3, #1
 8000fba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000fbc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	dd8a      	ble.n	8000ed8 <ARMsProtocol_FUNC_Catesianjog+0x48>
//	joint_config[2] = (2*M_PI * encoder_config[2])/16384.0f;
//	double m4 = (2*M_PI * encoder_config[3])/16384.0f;
//	double m5 =  (2*M_PI * encoder_config[4])/16384.0f;
//	joint_config[3] = (m4 + m5) * 0.1125;
//	joint_config[4] = (m4 - m5)/8.0;
	joint_config[0] = desired_position[0] * (9.0/25.0);
 8000fc2:	4b45      	ldr	r3, [pc, #276]	; (80010d8 <ARMsProtocol_FUNC_Catesianjog+0x248>)
 8000fc4:	ed93 7b00 	vldr	d7, [r3]
 8000fc8:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 80010b8 <ARMsProtocol_FUNC_Catesianjog+0x228>
 8000fcc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fd0:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	joint_config[1] = desired_position[1] / 27.0;
 8000fd4:	4b40      	ldr	r3, [pc, #256]	; (80010d8 <ARMsProtocol_FUNC_Catesianjog+0x248>)
 8000fd6:	ed93 6b02 	vldr	d6, [r3, #8]
 8000fda:	eeb3 5b0b 	vmov.f64	d5, #59	; 0x41d80000  27.0
 8000fde:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fe2:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	joint_config[2] = asin(desired_position[2]/22.5);
 8000fe6:	4b3c      	ldr	r3, [pc, #240]	; (80010d8 <ARMsProtocol_FUNC_Catesianjog+0x248>)
 8000fe8:	ed93 7b04 	vldr	d7, [r3, #16]
 8000fec:	ed9f 5b34 	vldr	d5, [pc, #208]	; 80010c0 <ARMsProtocol_FUNC_Catesianjog+0x230>
 8000ff0:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000ff4:	eeb0 0b46 	vmov.f64	d0, d6
 8000ff8:	f016 fb16 	bl	8017628 <asin>
 8000ffc:	eeb0 7b40 	vmov.f64	d7, d0
 8001000:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
	joint_config[3] = (desired_position[3] + desired_position[4]) * 0.1125;
 8001004:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <ARMsProtocol_FUNC_Catesianjog+0x248>)
 8001006:	ed93 6b06 	vldr	d6, [r3, #24]
 800100a:	4b33      	ldr	r3, [pc, #204]	; (80010d8 <ARMsProtocol_FUNC_Catesianjog+0x248>)
 800100c:	ed93 7b08 	vldr	d7, [r3, #32]
 8001010:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001014:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 80010c8 <ARMsProtocol_FUNC_Catesianjog+0x238>
 8001018:	ee27 7b06 	vmul.f64	d7, d7, d6
 800101c:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
	joint_config[4] = (desired_position[3] - desired_position[4])/8.0;
 8001020:	4b2d      	ldr	r3, [pc, #180]	; (80010d8 <ARMsProtocol_FUNC_Catesianjog+0x248>)
 8001022:	ed93 6b06 	vldr	d6, [r3, #24]
 8001026:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <ARMsProtocol_FUNC_Catesianjog+0x248>)
 8001028:	ed93 7b08 	vldr	d7, [r3, #32]
 800102c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001030:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8001034:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001038:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
	IVK(joint_config, delta_khe, delta_q);
 800103c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001040:	4639      	mov	r1, r7
 8001042:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001046:	4618      	mov	r0, r3
 8001048:	f000 fd6e 	bl	8001b28 <IVK>
	for (int i = 0; i < 5; i++) {
 800104c:	2300      	movs	r3, #0
 800104e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001050:	e025      	b.n	800109e <ARMsProtocol_FUNC_Catesianjog+0x20e>
		delta_khe[i] = 0;
 8001052:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800105a:	4413      	add	r3, r2
 800105c:	f1a3 0180 	sub.w	r1, r3, #128	; 0x80
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	e9c1 2300 	strd	r2, r3, [r1]
		desired_position[i] += delta_q[i];
 800106c:	4a1a      	ldr	r2, [pc, #104]	; (80010d8 <ARMsProtocol_FUNC_Catesianjog+0x248>)
 800106e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	4413      	add	r3, r2
 8001074:	ed93 6b00 	vldr	d6, [r3]
 8001078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001080:	4413      	add	r3, r2
 8001082:	3b58      	subs	r3, #88	; 0x58
 8001084:	ed93 7b00 	vldr	d7, [r3]
 8001088:	ee36 7b07 	vadd.f64	d7, d6, d7
 800108c:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <ARMsProtocol_FUNC_Catesianjog+0x248>)
 800108e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	4413      	add	r3, r2
 8001094:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i < 5; i++) {
 8001098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800109a:	3301      	adds	r3, #1
 800109c:	67bb      	str	r3, [r7, #120]	; 0x78
 800109e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	ddd6      	ble.n	8001052 <ARMsProtocol_FUNC_Catesianjog+0x1c2>
	}
	/* USER CODE END 4 */

	// Clear Data
	ARMsProtocol_FUNC_Data_Clrbuf();
 80010a4:	f7ff fdcc 	bl	8000c40 <ARMsProtocol_FUNC_Data_Clrbuf>
	// Done Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_DONE);
}
 80010a8:	bf00      	nop
 80010aa:	3780      	adds	r7, #128	; 0x80
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	00000000 	.word	0x00000000
 80010b4:	408f4000 	.word	0x408f4000
 80010b8:	70a3d70a 	.word	0x70a3d70a
 80010bc:	3fd70a3d 	.word	0x3fd70a3d
 80010c0:	00000000 	.word	0x00000000
 80010c4:	40368000 	.word	0x40368000
 80010c8:	cccccccd 	.word	0xcccccccd
 80010cc:	3fbccccc 	.word	0x3fbccccc
 80010d0:	24000354 	.word	0x24000354
 80010d4:	24000360 	.word	0x24000360
 80010d8:	24000258 	.word	0x24000258

080010dc <ARMsProtocol_FUNC_Trajectory>:
 *
 * @brief	Recievetrajectory Function
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Trajectory(void){
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	// Acknowledge Func
	ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ACKNOWLEDGE);
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <ARMsProtocol_FUNC_Trajectory+0x20>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2103      	movs	r1, #3
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fd3e 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
	ARMsProtocol_Data.Trajectory_flag = 1;
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <ARMsProtocol_FUNC_Trajectory+0x24>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	/* USER CODE BEGIN 5 */

	/* USER CODE END 5 */

	// Clear Data
	ARMsProtocol_FUNC_Data_Clrbuf();
 80010f4:	f7ff fda4 	bl	8000c40 <ARMsProtocol_FUNC_Data_Clrbuf>
	// Done Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_DONE);
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	24000354 	.word	0x24000354
 8001100:	24000360 	.word	0x24000360

08001104 <ARMsProtocol_FUNC_Gripper>:
/**
 * @brief	Controlgripper Function
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Gripper(void){
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
	// Acknowledge Func
	ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ACKNOWLEDGE);
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <ARMsProtocol_FUNC_Gripper+0x34>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2103      	movs	r1, #3
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fd2a 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
	/* USER CODE BEGIN 6 */
	servo_flag = 1;
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <ARMsProtocol_FUNC_Gripper+0x38>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
	servo_degree = ARMsProtocol_Data.Data_buf[0];
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <ARMsProtocol_FUNC_Gripper+0x3c>)
 800111c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <ARMsProtocol_FUNC_Gripper+0x40>)
 800112a:	ed83 7b00 	vstr	d7, [r3]
	/* USER CODE END 6 */

	// Clear Data
	ARMsProtocol_FUNC_Data_Clrbuf();
 800112e:	f7ff fd87 	bl	8000c40 <ARMsProtocol_FUNC_Data_Clrbuf>
	// Done Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_DONE);
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	24000354 	.word	0x24000354
 800113c:	24000280 	.word	0x24000280
 8001140:	24000360 	.word	0x24000360
 8001144:	24000288 	.word	0x24000288

08001148 <ARMsProtocol_FUNC_Jointfeedback>:
/**
 * @brief	Setzeroencoder Function
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Jointfeedback(UART_HandleTypeDef *huart){
 8001148:	b580      	push	{r7, lr}
 800114a:	b090      	sub	sp, #64	; 0x40
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	// Acknowledge Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ACKNOWLEDGE);
	/* USER CODE BEGIN 7 */
	double joint_config[5] = {0};
 8001150:	f107 0308 	add.w	r3, r7, #8
 8001154:	2228      	movs	r2, #40	; 0x28
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f013 fa95 	bl	8014688 <memset>
	joint_config[0] = (2*M_PI * encoder_config[0])/16384.0f;
 800115e:	4ba2      	ldr	r3, [pc, #648]	; (80013e8 <ARMsProtocol_FUNC_Jointfeedback+0x2a0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	ee07 3a90 	vmov	s15, r3
 8001166:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800116a:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80013c8 <ARMsProtocol_FUNC_Jointfeedback+0x280>
 800116e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001172:	ed9f 5b97 	vldr	d5, [pc, #604]	; 80013d0 <ARMsProtocol_FUNC_Jointfeedback+0x288>
 8001176:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800117a:	ed87 7b02 	vstr	d7, [r7, #8]
	joint_config[1] = (2*M_PI * encoder_config[1])/16384.0f;
 800117e:	4b9a      	ldr	r3, [pc, #616]	; (80013e8 <ARMsProtocol_FUNC_Jointfeedback+0x2a0>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	ee07 3a90 	vmov	s15, r3
 8001186:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800118a:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 80013c8 <ARMsProtocol_FUNC_Jointfeedback+0x280>
 800118e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001192:	ed9f 5b8f 	vldr	d5, [pc, #572]	; 80013d0 <ARMsProtocol_FUNC_Jointfeedback+0x288>
 8001196:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800119a:	ed87 7b04 	vstr	d7, [r7, #16]
	joint_config[2] = (2*M_PI * encoder_config[2])/16384.0f;
 800119e:	4b92      	ldr	r3, [pc, #584]	; (80013e8 <ARMsProtocol_FUNC_Jointfeedback+0x2a0>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	ee07 3a90 	vmov	s15, r3
 80011a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011aa:	ed9f 6b87 	vldr	d6, [pc, #540]	; 80013c8 <ARMsProtocol_FUNC_Jointfeedback+0x280>
 80011ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011b2:	ed9f 5b87 	vldr	d5, [pc, #540]	; 80013d0 <ARMsProtocol_FUNC_Jointfeedback+0x288>
 80011b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011ba:	ed87 7b06 	vstr	d7, [r7, #24]
	double m4 = (2*M_PI * encoder_config[3])/16384.0f;
 80011be:	4b8a      	ldr	r3, [pc, #552]	; (80013e8 <ARMsProtocol_FUNC_Jointfeedback+0x2a0>)
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011ca:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 80013c8 <ARMsProtocol_FUNC_Jointfeedback+0x280>
 80011ce:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011d2:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 80013d0 <ARMsProtocol_FUNC_Jointfeedback+0x288>
 80011d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011da:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	double m5 =  (2*M_PI * encoder_config[4])/16384.0f;
 80011de:	4b82      	ldr	r3, [pc, #520]	; (80013e8 <ARMsProtocol_FUNC_Jointfeedback+0x2a0>)
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	ee07 3a90 	vmov	s15, r3
 80011e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011ea:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80013c8 <ARMsProtocol_FUNC_Jointfeedback+0x280>
 80011ee:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011f2:	ed9f 5b77 	vldr	d5, [pc, #476]	; 80013d0 <ARMsProtocol_FUNC_Jointfeedback+0x288>
 80011f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011fa:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	joint_config[3] = (m4 + m5) * 0.1125;
 80011fe:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8001202:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001206:	ee36 7b07 	vadd.f64	d7, d6, d7
 800120a:	ed9f 6b73 	vldr	d6, [pc, #460]	; 80013d8 <ARMsProtocol_FUNC_Jointfeedback+0x290>
 800120e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001212:	ed87 7b08 	vstr	d7, [r7, #32]
	joint_config[4] = (m4 - m5)/8.0;
 8001216:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 800121a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800121e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001222:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8001226:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800122a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	joint_config[0] = joint_config[0]*1000.0;
 800122e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001232:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 80013e0 <ARMsProtocol_FUNC_Jointfeedback+0x298>
 8001236:	ee27 7b06 	vmul.f64	d7, d7, d6
 800123a:	ed87 7b02 	vstr	d7, [r7, #8]
	joint_config[1] = joint_config[1]*1000.0;
 800123e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001242:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80013e0 <ARMsProtocol_FUNC_Jointfeedback+0x298>
 8001246:	ee27 7b06 	vmul.f64	d7, d7, d6
 800124a:	ed87 7b04 	vstr	d7, [r7, #16]
	joint_config[2] = joint_config[2]*1000.0;
 800124e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001252:	ed9f 6b63 	vldr	d6, [pc, #396]	; 80013e0 <ARMsProtocol_FUNC_Jointfeedback+0x298>
 8001256:	ee27 7b06 	vmul.f64	d7, d7, d6
 800125a:	ed87 7b06 	vstr	d7, [r7, #24]
	joint_config[3] = joint_config[3]*1000.0;
 800125e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001262:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 80013e0 <ARMsProtocol_FUNC_Jointfeedback+0x298>
 8001266:	ee27 7b06 	vmul.f64	d7, d7, d6
 800126a:	ed87 7b08 	vstr	d7, [r7, #32]
	joint_config[4] = joint_config[4]*1000.0;
 800126e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001272:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 80013e0 <ARMsProtocol_FUNC_Jointfeedback+0x298>
 8001276:	ee27 7b06 	vmul.f64	d7, d7, d6
 800127a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	ARMsProtocol_Data.Tx_count = 15;
 800127e:	4b5b      	ldr	r3, [pc, #364]	; (80013ec <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 8001280:	220f      	movs	r2, #15
 8001282:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	ARMsProtocol_Data.Tx_buf[0] = 0xFF;
 8001286:	4b59      	ldr	r3, [pc, #356]	; (80013ec <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 8001288:	22ff      	movs	r2, #255	; 0xff
 800128a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	ARMsProtocol_Data.Tx_buf[1] = ARMsProtocol_h1.slave_id;
 800128e:	4b58      	ldr	r3, [pc, #352]	; (80013f0 <ARMsProtocol_FUNC_Jointfeedback+0x2a8>)
 8001290:	7a1a      	ldrb	r2, [r3, #8]
 8001292:	4b56      	ldr	r3, [pc, #344]	; (80013ec <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 8001294:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	ARMsProtocol_Data.Tx_buf[2] = ARMsProtocol_ADDR_JOTNTFEEDBACK;
 8001298:	4b54      	ldr	r3, [pc, #336]	; (80013ec <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 800129a:	2206      	movs	r2, #6
 800129c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	ARMsProtocol_Data.Tx_buf[3] = 11;
 80012a0:	4b52      	ldr	r3, [pc, #328]	; (80013ec <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 80012a2:	220b      	movs	r2, #11
 80012a4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	ARMsProtocol_Data.Tx_buf[4] = ((int16_t)joint_config[0]) >> 8; //J1_H
 80012a8:	ed97 7b02 	vldr	d7, [r7, #8]
 80012ac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012b0:	ee17 3a90 	vmov	r3, s15
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	121b      	asrs	r3, r3, #8
 80012b8:	b21b      	sxth	r3, r3
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	4b4b      	ldr	r3, [pc, #300]	; (80013ec <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 80012be:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	ARMsProtocol_Data.Tx_buf[5] = ((int16_t)joint_config[0]);//J1_L
 80012c2:	ed97 7b02 	vldr	d7, [r7, #8]
 80012c6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012ca:	ee17 3a90 	vmov	r3, s15
 80012ce:	b21b      	sxth	r3, r3
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4b46      	ldr	r3, [pc, #280]	; (80013ec <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 80012d4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	ARMsProtocol_Data.Tx_buf[6] = ((int16_t)joint_config[1]) >> 8; //J2_H
 80012d8:	ed97 7b04 	vldr	d7, [r7, #16]
 80012dc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012e0:	ee17 3a90 	vmov	r3, s15
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	121b      	asrs	r3, r3, #8
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	4b3f      	ldr	r3, [pc, #252]	; (80013ec <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 80012ee:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	ARMsProtocol_Data.Tx_buf[7] = ((int16_t)joint_config[1]); //J2_L
 80012f2:	ed97 7b04 	vldr	d7, [r7, #16]
 80012f6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012fa:	ee17 3a90 	vmov	r3, s15
 80012fe:	b21b      	sxth	r3, r3
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b3a      	ldr	r3, [pc, #232]	; (80013ec <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 8001304:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	ARMsProtocol_Data.Tx_buf[8] = ((int16_t)joint_config[2]) >> 8; //J3_H
 8001308:	ed97 7b06 	vldr	d7, [r7, #24]
 800130c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001310:	ee17 3a90 	vmov	r3, s15
 8001314:	b21b      	sxth	r3, r3
 8001316:	121b      	asrs	r3, r3, #8
 8001318:	b21b      	sxth	r3, r3
 800131a:	b2da      	uxtb	r2, r3
 800131c:	4b33      	ldr	r3, [pc, #204]	; (80013ec <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 800131e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	ARMsProtocol_Data.Tx_buf[9] = ((int16_t)joint_config[2]); //J3_L
 8001322:	ed97 7b06 	vldr	d7, [r7, #24]
 8001326:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800132a:	ee17 3a90 	vmov	r3, s15
 800132e:	b21b      	sxth	r3, r3
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4b2e      	ldr	r3, [pc, #184]	; (80013ec <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 8001334:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	ARMsProtocol_Data.Tx_buf[10] = ((int16_t)joint_config[3]) >> 8;//J4_H
 8001338:	ed97 7b08 	vldr	d7, [r7, #32]
 800133c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001340:	ee17 3a90 	vmov	r3, s15
 8001344:	b21b      	sxth	r3, r3
 8001346:	121b      	asrs	r3, r3, #8
 8001348:	b21b      	sxth	r3, r3
 800134a:	b2da      	uxtb	r2, r3
 800134c:	4b27      	ldr	r3, [pc, #156]	; (80013ec <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 800134e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	ARMsProtocol_Data.Tx_buf[11] = ((int16_t)joint_config[3]);//J4_L
 8001352:	ed97 7b08 	vldr	d7, [r7, #32]
 8001356:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800135a:	ee17 3a90 	vmov	r3, s15
 800135e:	b21b      	sxth	r3, r3
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4b22      	ldr	r3, [pc, #136]	; (80013ec <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 8001364:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	ARMsProtocol_Data.Tx_buf[12] = ((int16_t)joint_config[4]) >> 8;//J5_H
 8001368:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800136c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001370:	ee17 3a90 	vmov	r3, s15
 8001374:	b21b      	sxth	r3, r3
 8001376:	121b      	asrs	r3, r3, #8
 8001378:	b21b      	sxth	r3, r3
 800137a:	b2da      	uxtb	r2, r3
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 800137e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	ARMsProtocol_Data.Tx_buf[13] = ((int16_t)joint_config[4]);//J6_L
 8001382:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001386:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800138a:	ee17 3a90 	vmov	r3, s15
 800138e:	b21b      	sxth	r3, r3
 8001390:	b2da      	uxtb	r2, r3
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 8001394:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	ARMsProtocol_CALC_CRC((uint32_t*) &ARMsProtocol_Data.Tx_buf[2], 12);
 8001398:	210c      	movs	r1, #12
 800139a:	4816      	ldr	r0, [pc, #88]	; (80013f4 <ARMsProtocol_FUNC_Jointfeedback+0x2ac>)
 800139c:	f7ff fc1a 	bl	8000bd4 <ARMsProtocol_CALC_CRC>
	ARMsProtocol_Data.Tx_buf[14] = ARMsProtocol_Data.CRC_CAL;
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 80013a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 80013a8:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	ARMsProtocol_Data.Tx_flag = 1;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
	ARMsProtocol_FUNC_Tx_Callback(huart);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff fbb3 	bl	8000b20 <ARMsProtocol_FUNC_Tx_Callback>
	/* USER CODE END 7 */

	// Clear Data
	ARMsProtocol_FUNC_Data_Clrbuf();
 80013ba:	f7ff fc41 	bl	8000c40 <ARMsProtocol_FUNC_Data_Clrbuf>
	// Done Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_DONE);
}
 80013be:	bf00      	nop
 80013c0:	3740      	adds	r7, #64	; 0x40
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	54442d18 	.word	0x54442d18
 80013cc:	401921fb 	.word	0x401921fb
 80013d0:	00000000 	.word	0x00000000
 80013d4:	40d00000 	.word	0x40d00000
 80013d8:	cccccccd 	.word	0xcccccccd
 80013dc:	3fbccccc 	.word	0x3fbccccc
 80013e0:	00000000 	.word	0x00000000
 80013e4:	408f4000 	.word	0x408f4000
 80013e8:	24000290 	.word	0x24000290
 80013ec:	24000360 	.word	0x24000360
 80013f0:	24000354 	.word	0x24000354
 80013f4:	240003c7 	.word	0x240003c7

080013f8 <ARMsProtocol_FUNC_Boardfeedback>:


void ARMsProtocol_FUNC_Boardfeedback(UART_HandleTypeDef *huart){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	// Acknowledge Func
	ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ACKNOWLEDGE);
 8001400:	4b1e      	ldr	r3, [pc, #120]	; (800147c <ARMsProtocol_FUNC_Boardfeedback+0x84>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2103      	movs	r1, #3
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fbae 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
	/* USER CODE BEGIN 8 */
	ARMsProtocol_Data.Tx_count = 7;
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 800140e:	2207      	movs	r2, #7
 8001410:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	ARMsProtocol_Data.Tx_buf[0] = 0xFF;
 8001414:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 8001416:	22ff      	movs	r2, #255	; 0xff
 8001418:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	ARMsProtocol_Data.Tx_buf[1] = ARMsProtocol_h1.slave_id;
 800141c:	4b17      	ldr	r3, [pc, #92]	; (800147c <ARMsProtocol_FUNC_Boardfeedback+0x84>)
 800141e:	7a1a      	ldrb	r2, [r3, #8]
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 8001422:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	ARMsProtocol_Data.Tx_buf[2] = ARMsProtocol_ADDR_BOARDFEEDBACK;
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 8001428:	2207      	movs	r2, #7
 800142a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	ARMsProtocol_Data.Tx_buf[3] = 11;
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 8001430:	220b      	movs	r2, #11
 8001432:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	ARMsProtocol_Data.Tx_buf[4] = 0;
 8001436:	4b12      	ldr	r3, [pc, #72]	; (8001480 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	ARMsProtocol_Data.Tx_buf[5] = 0;
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 8001440:	2200      	movs	r2, #0
 8001442:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	ARMsProtocol_CALC_CRC((uint32_t*) &ARMsProtocol_Data.Tx_buf, ARMsProtocol_Data.Tx_count - 1);
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 8001448:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 800144c:	3b01      	subs	r3, #1
 800144e:	4619      	mov	r1, r3
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <ARMsProtocol_FUNC_Boardfeedback+0x8c>)
 8001452:	f7ff fbbf 	bl	8000bd4 <ARMsProtocol_CALC_CRC>
	ARMsProtocol_Data.Tx_buf[6] = ARMsProtocol_Data.CRC_CAL;
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 8001458:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800145a:	b2da      	uxtb	r2, r3
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 800145e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	ARMsProtocol_Data.Tx_flag = 1;
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 8001464:	2201      	movs	r2, #1
 8001466:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
	ARMsProtocol_FUNC_Tx_Callback(huart);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff fb58 	bl	8000b20 <ARMsProtocol_FUNC_Tx_Callback>
	/* USER CODE END 8 */

	// Clear Data
	ARMsProtocol_FUNC_Data_Clrbuf();
 8001470:	f7ff fbe6 	bl	8000c40 <ARMsProtocol_FUNC_Data_Clrbuf>
	// Done Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_DONE);
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	24000354 	.word	0x24000354
 8001480:	24000360 	.word	0x24000360
 8001484:	240003c5 	.word	0x240003c5

08001488 <KalmanFilter_initialise>:
 *  Created on: Jan 28, 2022
 *      Author: fame
 */
#include <Library/KalmanFilter.h>

void KalmanFilter_initialise(KalmanFilter *dev, double x1,double x2,double p11,double p12,double p21,double p22, double R, double Q){
 8001488:	b480      	push	{r7}
 800148a:	b093      	sub	sp, #76	; 0x4c
 800148c:	af00      	add	r7, sp, #0
 800148e:	6478      	str	r0, [r7, #68]	; 0x44
 8001490:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 8001494:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 8001498:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 800149c:	ed87 3b08 	vstr	d3, [r7, #32]
 80014a0:	ed87 4b06 	vstr	d4, [r7, #24]
 80014a4:	ed87 5b04 	vstr	d5, [r7, #16]
 80014a8:	ed87 6b02 	vstr	d6, [r7, #8]
 80014ac:	ed87 7b00 	vstr	d7, [r7]
	/* Parameter */
	dev->R = R;
 80014b0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80014b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014b6:	e9c1 2300 	strd	r2, r3, [r1]
	dev->Q = Q;
 80014ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80014bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014c0:	e9c1 2302 	strd	r2, r3, [r1, #8]

	/* KF "memory" */
	dev->x1 = x1;
 80014c4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80014c6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80014ca:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dev->x2 = x2;
 80014ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80014d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80014d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	dev->p11 = p11;
 80014d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80014da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80014de:	e9c1 2308 	strd	r2, r3, [r1, #32]
	dev->p12 = p12;
 80014e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80014e4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014e8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	dev->p21 = p21;
 80014ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80014ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014f2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	dev->p22 = p22;
 80014f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80014f8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014fc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001500:	bf00      	nop
 8001502:	374c      	adds	r7, #76	; 0x4c
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	0000      	movs	r0, r0
	...

08001510 <KalmanFilter_Update>:

void KalmanFilter_Update(KalmanFilter *dev,double theta_k) {
 8001510:	b480      	push	{r7}
 8001512:	b09b      	sub	sp, #108	; 0x6c
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	ed87 0b00 	vstr	d0, [r7]
	double X1 = (dev->x1);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001522:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double X2 = (dev->x2);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800152c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double P11 = (dev->p11);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001536:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double P12 = (dev->p12);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001540:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double P21 = (dev->p21);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800154a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double P22 = (dev->p22);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001554:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double Q = (dev->Q);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800155e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double R = (dev->R);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double dt_pow2 = DT * DT;
 800156c:	f20f 4320 	addw	r3, pc, #1056	; 0x420
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double dt_pow3 = DT * DT * DT;
 8001578:	f20f 431c 	addw	r3, pc, #1052	; 0x41c
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double dt_pow4 = DT * DT * DT * DT;
 8001584:	f20f 4318 	addw	r3, pc, #1048	; 0x418
 8001588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	dev->x1 = X1 + X2*DT - ((X1 - theta_k + X2*DT)*(P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT)))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 8001590:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8001594:	ed9f 6bfc 	vldr	d6, [pc, #1008]	; 8001988 <KalmanFilter_Update+0x478>
 8001598:	ee27 6b06 	vmul.f64	d6, d7, d6
 800159c:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80015a0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015a4:	ed97 5b18 	vldr	d5, [r7, #96]	; 0x60
 80015a8:	ed97 7b00 	vldr	d7, [r7]
 80015ac:	ee35 5b47 	vsub.f64	d5, d5, d7
 80015b0:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80015b4:	ed9f 4bf4 	vldr	d4, [pc, #976]	; 8001988 <KalmanFilter_Update+0x478>
 80015b8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80015bc:	ee35 5b07 	vadd.f64	d5, d5, d7
 80015c0:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80015c4:	ed9f 4bf0 	vldr	d4, [pc, #960]	; 8001988 <KalmanFilter_Update+0x478>
 80015c8:	ee27 4b04 	vmul.f64	d4, d7, d4
 80015cc:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80015d0:	ee34 4b07 	vadd.f64	d4, d4, d7
 80015d4:	ed97 3b0c 	vldr	d3, [r7, #48]	; 0x30
 80015d8:	ed97 7b04 	vldr	d7, [r7, #16]
 80015dc:	ee23 3b07 	vmul.f64	d3, d3, d7
 80015e0:	eeb1 2b00 	vmov.f64	d2, #16	; 0x40800000  4.0
 80015e4:	ee83 7b02 	vdiv.f64	d7, d3, d2
 80015e8:	ee34 4b07 	vadd.f64	d4, d4, d7
 80015ec:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80015f0:	ed9f 3be5 	vldr	d3, [pc, #916]	; 8001988 <KalmanFilter_Update+0x478>
 80015f4:	ee27 3b03 	vmul.f64	d3, d7, d3
 80015f8:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80015fc:	ee33 7b07 	vadd.f64	d7, d3, d7
 8001600:	ed9f 3be1 	vldr	d3, [pc, #900]	; 8001988 <KalmanFilter_Update+0x478>
 8001604:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001608:	ee34 7b07 	vadd.f64	d7, d4, d7
 800160c:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001610:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 8001614:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001618:	ee35 5b07 	vadd.f64	d5, d5, d7
 800161c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001620:	ed9f 3bd9 	vldr	d3, [pc, #868]	; 8001988 <KalmanFilter_Update+0x478>
 8001624:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001628:	ee35 5b07 	vadd.f64	d5, d5, d7
 800162c:	ed97 3b0c 	vldr	d3, [r7, #48]	; 0x30
 8001630:	ed97 7b04 	vldr	d7, [r7, #16]
 8001634:	ee23 3b07 	vmul.f64	d3, d3, d7
 8001638:	eeb1 2b00 	vmov.f64	d2, #16	; 0x40800000  4.0
 800163c:	ee83 7b02 	vdiv.f64	d7, d3, d2
 8001640:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001644:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001648:	ed9f 3bcf 	vldr	d3, [pc, #828]	; 8001988 <KalmanFilter_Update+0x478>
 800164c:	ee27 3b03 	vmul.f64	d3, d7, d3
 8001650:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001654:	ee33 7b07 	vadd.f64	d7, d3, d7
 8001658:	ed9f 3bcb 	vldr	d3, [pc, #812]	; 8001988 <KalmanFilter_Update+0x478>
 800165c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001660:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001664:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001668:	ee36 7b47 	vsub.f64	d7, d6, d7
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	ed83 7b04 	vstr	d7, [r3, #16]
	dev->x2  = X2 - (((Q*dt_pow3)/2 + P22*DT + P21)*(X1 - theta_k + X2*DT))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 8001672:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8001676:	ed97 7b06 	vldr	d7, [r7, #24]
 800167a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800167e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001682:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001686:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800168a:	ed9f 5bbf 	vldr	d5, [pc, #764]	; 8001988 <KalmanFilter_Update+0x478>
 800168e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001692:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001696:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800169a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800169e:	ed97 5b18 	vldr	d5, [r7, #96]	; 0x60
 80016a2:	ed97 7b00 	vldr	d7, [r7]
 80016a6:	ee35 5b47 	vsub.f64	d5, d5, d7
 80016aa:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80016ae:	ed9f 4bb6 	vldr	d4, [pc, #728]	; 8001988 <KalmanFilter_Update+0x478>
 80016b2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80016b6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80016ba:	ee26 5b07 	vmul.f64	d5, d6, d7
 80016be:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80016c2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80016c6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016ca:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80016ce:	ed9f 4bae 	vldr	d4, [pc, #696]	; 8001988 <KalmanFilter_Update+0x478>
 80016d2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80016d6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016da:	ed97 4b0c 	vldr	d4, [r7, #48]	; 0x30
 80016de:	ed97 7b04 	vldr	d7, [r7, #16]
 80016e2:	ee24 4b07 	vmul.f64	d4, d4, d7
 80016e6:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
 80016ea:	ee84 7b03 	vdiv.f64	d7, d4, d3
 80016ee:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016f2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80016f6:	ed9f 4ba4 	vldr	d4, [pc, #656]	; 8001988 <KalmanFilter_Update+0x478>
 80016fa:	ee27 4b04 	vmul.f64	d4, d7, d4
 80016fe:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001702:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001706:	ed9f 4ba0 	vldr	d4, [pc, #640]	; 8001988 <KalmanFilter_Update+0x478>
 800170a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800170e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001712:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001716:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 800171a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	ed83 7b06 	vstr	d7, [r3, #24]
	dev->p11  = -((P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT)) - 1)*(P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 8001724:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001728:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8001988 <KalmanFilter_Update+0x478>
 800172c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001730:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8001734:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001738:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 800173c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001740:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001744:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 8001748:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800174c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001750:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001754:	ed9f 5b8c 	vldr	d5, [pc, #560]	; 8001988 <KalmanFilter_Update+0x478>
 8001758:	ee27 5b05 	vmul.f64	d5, d7, d5
 800175c:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001760:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001764:	ed9f 5b88 	vldr	d5, [pc, #544]	; 8001988 <KalmanFilter_Update+0x478>
 8001768:	ee27 7b05 	vmul.f64	d7, d7, d5
 800176c:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001770:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8001774:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001778:	ee36 6b07 	vadd.f64	d6, d6, d7
 800177c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001780:	ed9f 4b81 	vldr	d4, [pc, #516]	; 8001988 <KalmanFilter_Update+0x478>
 8001784:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001788:	ee36 6b07 	vadd.f64	d6, d6, d7
 800178c:	ed97 4b0c 	vldr	d4, [r7, #48]	; 0x30
 8001790:	ed97 7b04 	vldr	d7, [r7, #16]
 8001794:	ee24 4b07 	vmul.f64	d4, d4, d7
 8001798:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
 800179c:	ee84 7b03 	vdiv.f64	d7, d4, d3
 80017a0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80017a4:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80017a8:	ed9f 4b77 	vldr	d4, [pc, #476]	; 8001988 <KalmanFilter_Update+0x478>
 80017ac:	ee27 4b04 	vmul.f64	d4, d7, d4
 80017b0:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80017b4:	ee34 7b07 	vadd.f64	d7, d4, d7
 80017b8:	ed9f 4b73 	vldr	d4, [pc, #460]	; 8001988 <KalmanFilter_Update+0x478>
 80017bc:	ee27 7b04 	vmul.f64	d7, d7, d4
 80017c0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80017c4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80017cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80017d0:	eeb1 6b47 	vneg.f64	d6, d7
 80017d4:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80017d8:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8001988 <KalmanFilter_Update+0x478>
 80017dc:	ee27 5b05 	vmul.f64	d5, d7, d5
 80017e0:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80017e4:	ee35 5b07 	vadd.f64	d5, d5, d7
 80017e8:	ed97 4b0c 	vldr	d4, [r7, #48]	; 0x30
 80017ec:	ed97 7b04 	vldr	d7, [r7, #16]
 80017f0:	ee24 4b07 	vmul.f64	d4, d4, d7
 80017f4:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
 80017f8:	ee84 7b03 	vdiv.f64	d7, d4, d3
 80017fc:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001800:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001804:	ed9f 4b60 	vldr	d4, [pc, #384]	; 8001988 <KalmanFilter_Update+0x478>
 8001808:	ee27 4b04 	vmul.f64	d4, d7, d4
 800180c:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001810:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001814:	ed9f 4b5c 	vldr	d4, [pc, #368]	; 8001988 <KalmanFilter_Update+0x478>
 8001818:	ee27 7b04 	vmul.f64	d7, d7, d4
 800181c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001820:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	ed83 7b08 	vstr	d7, [r3, #32]
	dev->p12 = -((P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT)) - 1)*((Q*dt_pow3)/2 + P22*DT + P12);
 800182a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800182e:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001988 <KalmanFilter_Update+0x478>
 8001832:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001836:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800183a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800183e:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 8001842:	ed97 7b04 	vldr	d7, [r7, #16]
 8001846:	ee25 5b07 	vmul.f64	d5, d5, d7
 800184a:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 800184e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001852:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001856:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800185a:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 8001988 <KalmanFilter_Update+0x478>
 800185e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001862:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001866:	ee35 7b07 	vadd.f64	d7, d5, d7
 800186a:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8001988 <KalmanFilter_Update+0x478>
 800186e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001872:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001876:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 800187a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800187e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001882:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001886:	ed9f 4b40 	vldr	d4, [pc, #256]	; 8001988 <KalmanFilter_Update+0x478>
 800188a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800188e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001892:	ed97 4b0c 	vldr	d4, [r7, #48]	; 0x30
 8001896:	ed97 7b04 	vldr	d7, [r7, #16]
 800189a:	ee24 4b07 	vmul.f64	d4, d4, d7
 800189e:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
 80018a2:	ee84 7b03 	vdiv.f64	d7, d4, d3
 80018a6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80018aa:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80018ae:	ed9f 4b36 	vldr	d4, [pc, #216]	; 8001988 <KalmanFilter_Update+0x478>
 80018b2:	ee27 4b04 	vmul.f64	d4, d7, d4
 80018b6:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80018ba:	ee34 7b07 	vadd.f64	d7, d4, d7
 80018be:	ed9f 4b32 	vldr	d4, [pc, #200]	; 8001988 <KalmanFilter_Update+0x478>
 80018c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80018c6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80018ca:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80018ce:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80018d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80018d6:	eeb1 6b47 	vneg.f64	d6, d7
 80018da:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 80018de:	ed97 7b06 	vldr	d7, [r7, #24]
 80018e2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80018e6:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80018ea:	ee87 5b04 	vdiv.f64	d5, d7, d4
 80018ee:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80018f2:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8001988 <KalmanFilter_Update+0x478>
 80018f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80018fa:	ee35 5b07 	vadd.f64	d5, d5, d7
 80018fe:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001902:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001906:	ee26 7b07 	vmul.f64	d7, d6, d7
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	dev->p21 = P21 + P22*DT + (Q*dt_pow3)/2 - (((Q*dt_pow3)/2 + P22*DT + P21)*(P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT)))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 8001910:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001914:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8001988 <KalmanFilter_Update+0x478>
 8001918:	ee27 6b06 	vmul.f64	d6, d7, d6
 800191c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001920:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001924:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 8001928:	ed97 7b06 	vldr	d7, [r7, #24]
 800192c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001930:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8001934:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001938:	ee36 6b07 	vadd.f64	d6, d6, d7
 800193c:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 8001940:	ed97 7b06 	vldr	d7, [r7, #24]
 8001944:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001948:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 800194c:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8001950:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001954:	ed9f 4b0c 	vldr	d4, [pc, #48]	; 8001988 <KalmanFilter_Update+0x478>
 8001958:	ee27 7b04 	vmul.f64	d7, d7, d4
 800195c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001960:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001964:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001968:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800196c:	ed9f 4b06 	vldr	d4, [pc, #24]	; 8001988 <KalmanFilter_Update+0x478>
 8001970:	ee27 4b04 	vmul.f64	d4, d7, d4
 8001974:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8001978:	ee34 4b07 	vadd.f64	d4, d4, d7
 800197c:	ed97 3b0c 	vldr	d3, [r7, #48]	; 0x30
 8001980:	e016      	b.n	80019b0 <KalmanFilter_Update+0x4a0>
 8001982:	bf00      	nop
 8001984:	f3af 8000 	nop.w
 8001988:	47ae147b 	.word	0x47ae147b
 800198c:	3f847ae1 	.word	0x3f847ae1
 8001990:	eb1c432d 	.word	0xeb1c432d
 8001994:	3f1a36e2 	.word	0x3f1a36e2
 8001998:	a0b5ed8e 	.word	0xa0b5ed8e
 800199c:	3eb0c6f7 	.word	0x3eb0c6f7
 80019a0:	e2308c3b 	.word	0xe2308c3b
 80019a4:	3e45798e 	.word	0x3e45798e
 80019a8:	47ae147b 	.word	0x47ae147b
 80019ac:	3f847ae1 	.word	0x3f847ae1
 80019b0:	ed97 7b04 	vldr	d7, [r7, #16]
 80019b4:	ee23 3b07 	vmul.f64	d3, d3, d7
 80019b8:	eeb1 2b00 	vmov.f64	d2, #16	; 0x40800000  4.0
 80019bc:	ee83 7b02 	vdiv.f64	d7, d3, d2
 80019c0:	ee34 4b07 	vadd.f64	d4, d4, d7
 80019c4:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80019c8:	ed1f 3b09 	vldr	d3, [pc, #-36]	; 80019a8 <KalmanFilter_Update+0x498>
 80019cc:	ee27 3b03 	vmul.f64	d3, d7, d3
 80019d0:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80019d4:	ee33 7b07 	vadd.f64	d7, d3, d7
 80019d8:	ed1f 3b0d 	vldr	d3, [pc, #-52]	; 80019a8 <KalmanFilter_Update+0x498>
 80019dc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80019e0:	ee34 7b07 	vadd.f64	d7, d4, d7
 80019e4:	ee25 4b07 	vmul.f64	d4, d5, d7
 80019e8:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 80019ec:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80019f0:	ee35 5b07 	vadd.f64	d5, d5, d7
 80019f4:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80019f8:	ed1f 3b15 	vldr	d3, [pc, #-84]	; 80019a8 <KalmanFilter_Update+0x498>
 80019fc:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001a00:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001a04:	ed97 3b0c 	vldr	d3, [r7, #48]	; 0x30
 8001a08:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a0c:	ee23 3b07 	vmul.f64	d3, d3, d7
 8001a10:	eeb1 2b00 	vmov.f64	d2, #16	; 0x40800000  4.0
 8001a14:	ee83 7b02 	vdiv.f64	d7, d3, d2
 8001a18:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001a1c:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001a20:	ed1f 3b1f 	vldr	d3, [pc, #-124]	; 80019a8 <KalmanFilter_Update+0x498>
 8001a24:	ee27 3b03 	vmul.f64	d3, d7, d3
 8001a28:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001a2c:	ee33 7b07 	vadd.f64	d7, d3, d7
 8001a30:	ed1f 3b23 	vldr	d3, [pc, #-140]	; 80019a8 <KalmanFilter_Update+0x498>
 8001a34:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001a38:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001a3c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001a40:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	dev->p22 = P22 + Q*dt_pow2 - (((Q*dt_pow3)/2 + P22*DT + P12)*((Q*dt_pow3)/2 + P22*DT + P21))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 8001a4a:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8001a4e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001a52:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a56:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001a5a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001a5e:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 8001a62:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a66:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001a6a:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8001a6e:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8001a72:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001a76:	ed1f 4b34 	vldr	d4, [pc, #-208]	; 80019a8 <KalmanFilter_Update+0x498>
 8001a7a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001a7e:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001a82:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001a86:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001a8a:	ed97 4b0c 	vldr	d4, [r7, #48]	; 0x30
 8001a8e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a92:	ee24 7b07 	vmul.f64	d7, d4, d7
 8001a96:	eeb0 3b00 	vmov.f64	d3, #0	; 0x40000000  2.0
 8001a9a:	ee87 4b03 	vdiv.f64	d4, d7, d3
 8001a9e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001aa2:	ed1f 3b3f 	vldr	d3, [pc, #-252]	; 80019a8 <KalmanFilter_Update+0x498>
 8001aa6:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001aaa:	ee34 4b07 	vadd.f64	d4, d4, d7
 8001aae:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001ab2:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001ab6:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001aba:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 8001abe:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001ac2:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001ac6:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001aca:	ed1f 3b49 	vldr	d3, [pc, #-292]	; 80019a8 <KalmanFilter_Update+0x498>
 8001ace:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001ad2:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001ad6:	ed97 3b0c 	vldr	d3, [r7, #48]	; 0x30
 8001ada:	ed97 7b04 	vldr	d7, [r7, #16]
 8001ade:	ee23 3b07 	vmul.f64	d3, d3, d7
 8001ae2:	eeb1 2b00 	vmov.f64	d2, #16	; 0x40800000  4.0
 8001ae6:	ee83 7b02 	vdiv.f64	d7, d3, d2
 8001aea:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001aee:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001af2:	ed1f 3b53 	vldr	d3, [pc, #-332]	; 80019a8 <KalmanFilter_Update+0x498>
 8001af6:	ee27 3b03 	vmul.f64	d3, d7, d3
 8001afa:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001afe:	ee33 7b07 	vadd.f64	d7, d3, d7
 8001b02:	ed1f 3b57 	vldr	d3, [pc, #-348]	; 80019a8 <KalmanFilter_Update+0x498>
 8001b06:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001b0a:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001b0e:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001b12:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
}
 8001b1c:	bf00      	nop
 8001b1e:	376c      	adds	r7, #108	; 0x6c
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <IVK>:
	q_arr[4] = roll;
	memcpy(config_arr, q_arr, sizeof(q_arr));
	return 1;
}

void IVK(double q[5], double x_dot[5], double *m_dot){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	ed2d 8b04 	vpush	{d8-d9}
 8001b2e:	b0fc      	sub	sp, #496	; 0x1f0
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	f107 030c 	add.w	r3, r7, #12
 8001b36:	6018      	str	r0, [r3, #0]
 8001b38:	f107 0308 	add.w	r3, r7, #8
 8001b3c:	6019      	str	r1, [r3, #0]
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	601a      	str	r2, [r3, #0]
	  double e_J_inv_tmp;
	  double e_J_inv_tmp_tmp;
	  double f_J_inv_tmp_tmp;
	  int i;
	  int i1;
	  J_inv_tmp_tmp = q[1] + 2.0 * q[2];
 8001b42:	f107 030c 	add.w	r3, r7, #12
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	3308      	adds	r3, #8
 8001b4a:	ed93 6b00 	vldr	d6, [r3]
 8001b4e:	f107 030c 	add.w	r3, r7, #12
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	3310      	adds	r3, #16
 8001b56:	ed93 7b00 	vldr	d7, [r3]
 8001b5a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001b5e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b62:	ed87 7b76 	vstr	d7, [r7, #472]	; 0x1d8
	  b_J_inv_tmp_tmp =
	      ((((J_inv_tmp_tmp + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205;
 8001b66:	f107 030c 	add.w	r3, r7, #12
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	3318      	adds	r3, #24
 8001b6e:	ed93 6b00 	vldr	d6, [r3]
 8001b72:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8001b76:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b7a:	ed9f 6bf1 	vldr	d6, [pc, #964]	; 8001f40 <IVK+0x418>
 8001b7e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b82:	ed9f 6bf1 	vldr	d6, [pc, #964]	; 8001f48 <IVK+0x420>
 8001b86:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b8a:	ed9f 6bf1 	vldr	d6, [pc, #964]	; 8001f50 <IVK+0x428>
 8001b8e:	ee37 7b46 	vsub.f64	d7, d7, d6
	  b_J_inv_tmp_tmp =
 8001b92:	ed9f 6bf1 	vldr	d6, [pc, #964]	; 8001f58 <IVK+0x430>
 8001b96:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b9a:	ed87 7b74 	vstr	d7, [r7, #464]	; 0x1d0
	  c_J_inv_tmp_tmp = sin(b_J_inv_tmp_tmp);
 8001b9e:	ed97 0b74 	vldr	d0, [r7, #464]	; 0x1d0
 8001ba2:	f015 fcf9 	bl	8017598 <sin>
 8001ba6:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
	  d_J_inv_tmp_tmp = sin(q[0]);
 8001baa:	f107 030c 	add.w	r3, r7, #12
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	ed93 7b00 	vldr	d7, [r3]
 8001bb4:	eeb0 0b47 	vmov.f64	d0, d7
 8001bb8:	f015 fcee 	bl	8017598 <sin>
 8001bbc:	ed87 0b70 	vstr	d0, [r7, #448]	; 0x1c0
	  J_inv_tmp = cos(((J_inv_tmp_tmp + 1.6845) + -0.8995) + -0.73665);
 8001bc0:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8001bc4:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8001f40 <IVK+0x418>
 8001bc8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001bcc:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8001f48 <IVK+0x420>
 8001bd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001bd4:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8001f50 <IVK+0x428>
 8001bd8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001bdc:	eeb0 0b47 	vmov.f64	d0, d7
 8001be0:	f015 fc86 	bl	80174f0 <cos>
 8001be4:	ed87 0b6e 	vstr	d0, [r7, #440]	; 0x1b8
	  b_J_inv_tmp = cos(b_J_inv_tmp_tmp);
 8001be8:	ed97 0b74 	vldr	d0, [r7, #464]	; 0x1d0
 8001bec:	f015 fc80 	bl	80174f0 <cos>
 8001bf0:	ed87 0b6c 	vstr	d0, [r7, #432]	; 0x1b0
	  J_inv_tmp_tmp = ((q[1] + q[2]) + 1.6845) + -0.8995;
 8001bf4:	f107 030c 	add.w	r3, r7, #12
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3308      	adds	r3, #8
 8001bfc:	ed93 6b00 	vldr	d6, [r3]
 8001c00:	f107 030c 	add.w	r3, r7, #12
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	3310      	adds	r3, #16
 8001c08:	ed93 7b00 	vldr	d7, [r3]
 8001c0c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001c10:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 8001f40 <IVK+0x418>
 8001c14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c18:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 8001f48 <IVK+0x420>
 8001c1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c20:	ed87 7b76 	vstr	d7, [r7, #472]	; 0x1d8
	  c_J_inv_tmp = cos(J_inv_tmp_tmp);
 8001c24:	ed97 0b76 	vldr	d0, [r7, #472]	; 0x1d8
 8001c28:	f015 fc62 	bl	80174f0 <cos>
 8001c2c:	ed87 0b6a 	vstr	d0, [r7, #424]	; 0x1a8
	  d_J_inv_tmp = sin(J_inv_tmp_tmp);
 8001c30:	ed97 0b76 	vldr	d0, [r7, #472]	; 0x1d8
 8001c34:	f015 fcb0 	bl	8017598 <sin>
 8001c38:	ed87 0b68 	vstr	d0, [r7, #416]	; 0x1a0
	  J_inv_tmp_tmp = sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665);
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	3308      	adds	r3, #8
 8001c44:	ed93 6b00 	vldr	d6, [r3]
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	3310      	adds	r3, #16
 8001c50:	ed93 7b00 	vldr	d7, [r3]
 8001c54:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001c58:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001c5c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8001f40 <IVK+0x418>
 8001c60:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c64:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8001f48 <IVK+0x420>
 8001c68:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c6c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8001f50 <IVK+0x428>
 8001c70:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c74:	eeb0 0b47 	vmov.f64	d0, d7
 8001c78:	f015 fc8e 	bl	8017598 <sin>
 8001c7c:	ed87 0b76 	vstr	d0, [r7, #472]	; 0x1d8
	  b_J_inv_tmp_tmp = cos(q[1] + 1.6845);
 8001c80:	f107 030c 	add.w	r3, r7, #12
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	3308      	adds	r3, #8
 8001c88:	ed93 7b00 	vldr	d7, [r3]
 8001c8c:	ed9f 6bac 	vldr	d6, [pc, #688]	; 8001f40 <IVK+0x418>
 8001c90:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c94:	eeb0 0b47 	vmov.f64	d0, d7
 8001c98:	f015 fc2a 	bl	80174f0 <cos>
 8001c9c:	ed87 0b74 	vstr	d0, [r7, #464]	; 0x1d0
	  e_J_inv_tmp_tmp = sin(q[1] + 1.6845);
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	3308      	adds	r3, #8
 8001ca8:	ed93 7b00 	vldr	d7, [r3]
 8001cac:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8001f40 <IVK+0x418>
 8001cb0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001cb4:	eeb0 0b47 	vmov.f64	d0, d7
 8001cb8:	f015 fc6e 	bl	8017598 <sin>
 8001cbc:	ed87 0b66 	vstr	d0, [r7, #408]	; 0x198
	  f_J_inv_tmp_tmp = cos(q[0]);
 8001cc0:	f107 030c 	add.w	r3, r7, #12
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	ed93 7b00 	vldr	d7, [r3]
 8001cca:	eeb0 0b47 	vmov.f64	d0, d7
 8001cce:	f015 fc0f 	bl	80174f0 <cos>
 8001cd2:	ed87 0b64 	vstr	d0, [r7, #400]	; 0x190
	  e_J_inv_tmp = cos(q[2]);
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	3310      	adds	r3, #16
 8001cde:	ed93 7b00 	vldr	d7, [r3]
 8001ce2:	eeb0 0b47 	vmov.f64	d0, d7
 8001ce6:	f015 fc03 	bl	80174f0 <cos>
 8001cea:	ed87 0b62 	vstr	d0, [r7, #392]	; 0x188
	  dv[0] = 0.0;
 8001cee:	f107 0110 	add.w	r1, r7, #16
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	e9c1 2300 	strd	r2, r3, [r1]
	  dv[5] = 0.0;
 8001cfe:	f107 0110 	add.w	r1, r7, #16
 8001d02:	f04f 0200 	mov.w	r2, #0
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	  d = f_J_inv_tmp_tmp * f_J_inv_tmp_tmp;
 8001d0e:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8001d12:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001d16:	ed87 7b7a 	vstr	d7, [r7, #488]	; 0x1e8
	  d1 = d_J_inv_tmp_tmp * d_J_inv_tmp_tmp;
 8001d1a:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8001d1e:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001d22:	ed87 7b60 	vstr	d7, [r7, #384]	; 0x180
	  dv[10] =
	      -(25.0 * d_J_inv_tmp_tmp) /
 8001d26:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8001d2a:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 8001d2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d32:	eeb1 8b47 	vneg.f64	d8, d7
	      (9.0 *
	       (((((((146.0 * c_J_inv_tmp_tmp * d + 410.488 * J_inv_tmp * d) +
 8001d36:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8001d3a:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8001f68 <IVK+0x440>
 8001d3e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d42:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8001d46:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001d4a:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8001d4e:	ed9f 5b88 	vldr	d5, [pc, #544]	; 8001f70 <IVK+0x448>
 8001d52:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001d56:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8001d5a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001d5e:	ee36 9b07 	vadd.f64	d9, d6, d7
	             146.0 *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8001d62:	f107 030c 	add.w	r3, r7, #12
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	3308      	adds	r3, #8
 8001d6a:	ed93 6b00 	vldr	d6, [r3]
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	3310      	adds	r3, #16
 8001d76:	ed93 7b00 	vldr	d7, [r3]
 8001d7a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001d7e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001d82:	f107 030c 	add.w	r3, r7, #12
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	3318      	adds	r3, #24
 8001d8a:	ed93 7b00 	vldr	d7, [r3]
 8001d8e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d92:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8001f40 <IVK+0x418>
 8001d96:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001d9a:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8001f48 <IVK+0x420>
 8001d9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001da2:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8001f50 <IVK+0x428>
 8001da6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001daa:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8001f58 <IVK+0x430>
 8001dae:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001db2:	eeb0 0b47 	vmov.f64	d0, d7
 8001db6:	f015 fbef 	bl	8017598 <sin>
 8001dba:	eeb0 7b40 	vmov.f64	d7, d0
	             146.0 *
 8001dbe:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8001f68 <IVK+0x440>
 8001dc2:	ee27 6b06 	vmul.f64	d6, d7, d6
	                      -0.73665) +
	                     1.52205) *
 8001dc6:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001dca:	ee26 7b07 	vmul.f64	d7, d6, d7
	       (((((((146.0 * c_J_inv_tmp_tmp * d + 410.488 * J_inv_tmp * d) +
 8001dce:	ee39 9b07 	vadd.f64	d9, d9, d7
	                 d1) +
	            410.488 *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001dd2:	f107 030c 	add.w	r3, r7, #12
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	3308      	adds	r3, #8
 8001dda:	ed93 6b00 	vldr	d6, [r3]
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	3310      	adds	r3, #16
 8001de6:	ed93 7b00 	vldr	d7, [r3]
 8001dea:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001dee:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001df2:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8001f40 <IVK+0x418>
 8001df6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001dfa:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8001f48 <IVK+0x420>
 8001dfe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e02:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8001f50 <IVK+0x428>
 8001e06:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e0a:	eeb0 0b47 	vmov.f64	d0, d7
 8001e0e:	f015 fb6f 	bl	80174f0 <cos>
 8001e12:	eeb0 7b40 	vmov.f64	d7, d0
	            410.488 *
 8001e16:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001f70 <IVK+0x448>
 8001e1a:	ee27 6b06 	vmul.f64	d6, d7, d6
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001e1e:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001e22:	ee26 7b07 	vmul.f64	d7, d6, d7
	                 d1) +
 8001e26:	ee39 6b07 	vadd.f64	d6, d9, d7
	                d1) +
	           60.0 * c_J_inv_tmp * d) +
 8001e2a:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8001e2e:	ed9f 5b52 	vldr	d5, [pc, #328]	; 8001f78 <IVK+0x450>
 8001e32:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001e36:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8001e3a:	ee25 7b07 	vmul.f64	d7, d5, d7
	                d1) +
 8001e3e:	ee36 9b07 	vadd.f64	d9, d6, d7
	          60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * d1) +
 8001e42:	f107 030c 	add.w	r3, r7, #12
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	3308      	adds	r3, #8
 8001e4a:	ed93 6b00 	vldr	d6, [r3]
 8001e4e:	f107 030c 	add.w	r3, r7, #12
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	3310      	adds	r3, #16
 8001e56:	ed93 7b00 	vldr	d7, [r3]
 8001e5a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e5e:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8001f40 <IVK+0x418>
 8001e62:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e66:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8001f48 <IVK+0x420>
 8001e6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e6e:	eeb0 0b47 	vmov.f64	d0, d7
 8001e72:	f015 fb3d 	bl	80174f0 <cos>
 8001e76:	eeb0 7b40 	vmov.f64	d7, d0
 8001e7a:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8001f78 <IVK+0x450>
 8001e7e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001e82:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001e86:	ee26 7b07 	vmul.f64	d7, d6, d7
	           60.0 * c_J_inv_tmp * d) +
 8001e8a:	ee39 6b07 	vadd.f64	d6, d9, d7
	         352.278 * b_J_inv_tmp_tmp * d) +
 8001e8e:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8001e92:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8001f80 <IVK+0x458>
 8001e96:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001e9a:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8001e9e:	ee25 7b07 	vmul.f64	d7, d5, d7
	          60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * d1) +
 8001ea2:	ee36 9b07 	vadd.f64	d9, d6, d7
	        352.278 * cos(q[1] + 1.6845) * d1));
 8001ea6:	f107 030c 	add.w	r3, r7, #12
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	3308      	adds	r3, #8
 8001eae:	ed93 7b00 	vldr	d7, [r3]
 8001eb2:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001f40 <IVK+0x418>
 8001eb6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001eba:	eeb0 0b47 	vmov.f64	d0, d7
 8001ebe:	f015 fb17 	bl	80174f0 <cos>
 8001ec2:	eeb0 7b40 	vmov.f64	d7, d0
 8001ec6:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8001f80 <IVK+0x458>
 8001eca:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ece:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001ed2:	ee26 7b07 	vmul.f64	d7, d6, d7
	         352.278 * b_J_inv_tmp_tmp * d) +
 8001ed6:	ee39 7b07 	vadd.f64	d7, d9, d7
	      (9.0 *
 8001eda:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8001ede:	ee27 6b06 	vmul.f64	d6, d7, d6
	      -(25.0 * d_J_inv_tmp_tmp) /
 8001ee2:	ee88 7b06 	vdiv.f64	d7, d8, d6
	  dv[10] =
 8001ee6:	f107 0310 	add.w	r3, r7, #16
 8001eea:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	  dv[15] =
	      25.0 * f_J_inv_tmp_tmp /
 8001eee:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8001ef2:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 8001ef6:	ee27 8b06 	vmul.f64	d8, d7, d6
	      (9.0 *
	       (((((((146.0 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8001efa:	f107 030c 	add.w	r3, r7, #12
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	3308      	adds	r3, #8
 8001f02:	ed93 6b00 	vldr	d6, [r3]
 8001f06:	f107 030c 	add.w	r3, r7, #12
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	3310      	adds	r3, #16
 8001f0e:	ed93 7b00 	vldr	d7, [r3]
 8001f12:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001f16:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f1a:	f107 030c 	add.w	r3, r7, #12
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	3318      	adds	r3, #24
 8001f22:	ed93 7b00 	vldr	d7, [r3]
 8001f26:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f2a:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8001f40 <IVK+0x418>
 8001f2e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f32:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8001f48 <IVK+0x420>
 8001f36:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f3a:	e039      	b.n	8001fb0 <IVK+0x488>
 8001f3c:	f3af 8000 	nop.w
 8001f40:	45a1cac1 	.word	0x45a1cac1
 8001f44:	3ffaf3b6 	.word	0x3ffaf3b6
 8001f48:	39581062 	.word	0x39581062
 8001f4c:	3fecc8b4 	.word	0x3fecc8b4
 8001f50:	05532618 	.word	0x05532618
 8001f54:	3fe792a3 	.word	0x3fe792a3
 8001f58:	19ce075f 	.word	0x19ce075f
 8001f5c:	3ff85a51 	.word	0x3ff85a51
 8001f60:	19ce075f 	.word	0x19ce075f
 8001f64:	3ff85a51 	.word	0x3ff85a51
 8001f68:	00000000 	.word	0x00000000
 8001f6c:	40624000 	.word	0x40624000
 8001f70:	d916872b 	.word	0xd916872b
 8001f74:	4079a7ce 	.word	0x4079a7ce
 8001f78:	00000000 	.word	0x00000000
 8001f7c:	404e0000 	.word	0x404e0000
 8001f80:	b020c49c 	.word	0xb020c49c
 8001f84:	40760472 	.word	0x40760472
 8001f88:	eb851eb8 	.word	0xeb851eb8
 8001f8c:	40d80d51 	.word	0x40d80d51
 8001f90:	45a1cac1 	.word	0x45a1cac1
 8001f94:	3ffaf3b6 	.word	0x3ffaf3b6
 8001f98:	39581062 	.word	0x39581062
 8001f9c:	3fecc8b4 	.word	0x3fecc8b4
 8001fa0:	05532618 	.word	0x05532618
 8001fa4:	3fe792a3 	.word	0x3fe792a3
 8001fa8:	2220bc38 	.word	0x2220bc38
 8001fac:	4111a6ef 	.word	0x4111a6ef
 8001fb0:	ed1f 6b05 	vldr	d6, [pc, #-20]	; 8001fa0 <IVK+0x478>
 8001fb4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fb8:	ed1f 6b17 	vldr	d6, [pc, #-92]	; 8001f60 <IVK+0x438>
 8001fbc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001fc0:	eeb0 0b47 	vmov.f64	d0, d7
 8001fc4:	f015 fae8 	bl	8017598 <sin>
 8001fc8:	eeb0 7b40 	vmov.f64	d7, d0
	       (((((((146.0 *
 8001fcc:	ed1f 6b1a 	vldr	d6, [pc, #-104]	; 8001f68 <IVK+0x440>
 8001fd0:	ee27 6b06 	vmul.f64	d6, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) +
 8001fd4:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8001fd8:	ee27 7b07 	vmul.f64	d7, d7, d7
	                      1.52205) *
 8001fdc:	ee26 9b07 	vmul.f64	d9, d6, d7
	              410.488 *
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001fe0:	f107 030c 	add.w	r3, r7, #12
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	3308      	adds	r3, #8
 8001fe8:	ed93 6b00 	vldr	d6, [r3]
 8001fec:	f107 030c 	add.w	r3, r7, #12
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	3310      	adds	r3, #16
 8001ff4:	ed93 7b00 	vldr	d7, [r3]
 8001ff8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001ffc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002000:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 8001f90 <IVK+0x468>
 8002004:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002008:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 8001f98 <IVK+0x470>
 800200c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002010:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 8001fa0 <IVK+0x478>
 8002014:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002018:	eeb0 0b47 	vmov.f64	d0, d7
 800201c:	f015 fa68 	bl	80174f0 <cos>
 8002020:	eeb0 7b40 	vmov.f64	d7, d0
	              410.488 *
 8002024:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 8001f70 <IVK+0x448>
 8002028:	ee27 6b06 	vmul.f64	d6, d7, d6
	                  (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800202c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002030:	ee27 7b07 	vmul.f64	d7, d7, d7
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002034:	ee26 7b07 	vmul.f64	d7, d6, d7
	                  (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) +
 8002038:	ee39 9b07 	vadd.f64	d9, d9, d7
	             146.0 *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800203c:	f107 030c 	add.w	r3, r7, #12
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	3308      	adds	r3, #8
 8002044:	ed93 6b00 	vldr	d6, [r3]
 8002048:	f107 030c 	add.w	r3, r7, #12
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	3310      	adds	r3, #16
 8002050:	ed93 7b00 	vldr	d7, [r3]
 8002054:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002058:	ee36 6b07 	vadd.f64	d6, d6, d7
 800205c:	f107 030c 	add.w	r3, r7, #12
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	3318      	adds	r3, #24
 8002064:	ed93 7b00 	vldr	d7, [r3]
 8002068:	ee36 7b07 	vadd.f64	d7, d6, d7
 800206c:	ed1f 6b38 	vldr	d6, [pc, #-224]	; 8001f90 <IVK+0x468>
 8002070:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002074:	ed1f 6b38 	vldr	d6, [pc, #-224]	; 8001f98 <IVK+0x470>
 8002078:	ee37 7b46 	vsub.f64	d7, d7, d6
 800207c:	ed1f 6b38 	vldr	d6, [pc, #-224]	; 8001fa0 <IVK+0x478>
 8002080:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002084:	ed1f 6b4a 	vldr	d6, [pc, #-296]	; 8001f60 <IVK+0x438>
 8002088:	ee37 7b06 	vadd.f64	d7, d7, d6
 800208c:	eeb0 0b47 	vmov.f64	d0, d7
 8002090:	f015 fa82 	bl	8017598 <sin>
 8002094:	eeb0 7b40 	vmov.f64	d7, d0
	             146.0 *
 8002098:	ed1f 6b4d 	vldr	d6, [pc, #-308]	; 8001f68 <IVK+0x440>
 800209c:	ee27 6b06 	vmul.f64	d6, d7, d6
	                      -0.73665) +
	                     1.52205) *
	                 (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80020a0:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80020a4:	ee27 7b07 	vmul.f64	d7, d7, d7
	                     1.52205) *
 80020a8:	ee26 7b07 	vmul.f64	d7, d6, d7
	                  (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80020ac:	ee39 9b07 	vadd.f64	d9, d9, d7
	            410.488 *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	3308      	adds	r3, #8
 80020b8:	ed93 6b00 	vldr	d6, [r3]
 80020bc:	f107 030c 	add.w	r3, r7, #12
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	3310      	adds	r3, #16
 80020c4:	ed93 7b00 	vldr	d7, [r3]
 80020c8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80020cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020d0:	ed1f 6b51 	vldr	d6, [pc, #-324]	; 8001f90 <IVK+0x468>
 80020d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020d8:	ed1f 6b51 	vldr	d6, [pc, #-324]	; 8001f98 <IVK+0x470>
 80020dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020e0:	ed1f 6b51 	vldr	d6, [pc, #-324]	; 8001fa0 <IVK+0x478>
 80020e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020e8:	eeb0 0b47 	vmov.f64	d0, d7
 80020ec:	f015 fa00 	bl	80174f0 <cos>
 80020f0:	eeb0 7b40 	vmov.f64	d7, d0
	            410.488 *
 80020f4:	ed1f 6b62 	vldr	d6, [pc, #-392]	; 8001f70 <IVK+0x448>
 80020f8:	ee27 6b06 	vmul.f64	d6, d7, d6
	                (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80020fc:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002100:	ee27 7b07 	vmul.f64	d7, d7, d7
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002104:	ee26 7b07 	vmul.f64	d7, d6, d7
	                 (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8002108:	ee39 9b07 	vadd.f64	d9, d9, d7
	           60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800210c:	f107 030c 	add.w	r3, r7, #12
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	3308      	adds	r3, #8
 8002114:	ed93 6b00 	vldr	d6, [r3]
 8002118:	f107 030c 	add.w	r3, r7, #12
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	3310      	adds	r3, #16
 8002120:	ed93 7b00 	vldr	d7, [r3]
 8002124:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002128:	ed1f 6b67 	vldr	d6, [pc, #-412]	; 8001f90 <IVK+0x468>
 800212c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002130:	ed1f 6b67 	vldr	d6, [pc, #-412]	; 8001f98 <IVK+0x470>
 8002134:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002138:	eeb0 0b47 	vmov.f64	d0, d7
 800213c:	f015 f9d8 	bl	80174f0 <cos>
 8002140:	eeb0 7b40 	vmov.f64	d7, d0
 8002144:	ed1f 6b74 	vldr	d6, [pc, #-464]	; 8001f78 <IVK+0x450>
 8002148:	ee27 6b06 	vmul.f64	d6, d7, d6
	               (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800214c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002150:	ee27 7b07 	vmul.f64	d7, d7, d7
	           60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8002154:	ee26 7b07 	vmul.f64	d7, d6, d7
	                (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8002158:	ee39 9b07 	vadd.f64	d9, d9, d7
	          60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800215c:	f107 030c 	add.w	r3, r7, #12
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	3308      	adds	r3, #8
 8002164:	ed93 6b00 	vldr	d6, [r3]
 8002168:	f107 030c 	add.w	r3, r7, #12
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	3310      	adds	r3, #16
 8002170:	ed93 7b00 	vldr	d7, [r3]
 8002174:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002178:	ed1f 6b7b 	vldr	d6, [pc, #-492]	; 8001f90 <IVK+0x468>
 800217c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002180:	ed1f 6b7b 	vldr	d6, [pc, #-492]	; 8001f98 <IVK+0x470>
 8002184:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002188:	eeb0 0b47 	vmov.f64	d0, d7
 800218c:	f015 f9b0 	bl	80174f0 <cos>
 8002190:	eeb0 7b40 	vmov.f64	d7, d0
 8002194:	ed1f 6b88 	vldr	d6, [pc, #-544]	; 8001f78 <IVK+0x450>
 8002198:	ee27 6b06 	vmul.f64	d6, d7, d6
	              (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 800219c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80021a0:	ee27 7b07 	vmul.f64	d7, d7, d7
	          60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80021a4:	ee26 7b07 	vmul.f64	d7, d6, d7
	               (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80021a8:	ee39 9b07 	vadd.f64	d9, d9, d7
	         352.278 * cos(q[1] + 1.6845) * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80021ac:	f107 030c 	add.w	r3, r7, #12
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3308      	adds	r3, #8
 80021b4:	ed93 7b00 	vldr	d7, [r3]
 80021b8:	ed1f 6b8b 	vldr	d6, [pc, #-556]	; 8001f90 <IVK+0x468>
 80021bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80021c0:	eeb0 0b47 	vmov.f64	d0, d7
 80021c4:	f015 f994 	bl	80174f0 <cos>
 80021c8:	eeb0 7b40 	vmov.f64	d7, d0
 80021cc:	ed1f 6b94 	vldr	d6, [pc, #-592]	; 8001f80 <IVK+0x458>
 80021d0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80021d4:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80021d8:	ee27 7b07 	vmul.f64	d7, d7, d7
 80021dc:	ee26 7b07 	vmul.f64	d7, d6, d7
	              (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80021e0:	ee39 9b07 	vadd.f64	d9, d9, d7
	        352.278 * cos(q[1] + 1.6845) * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)));
 80021e4:	f107 030c 	add.w	r3, r7, #12
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	3308      	adds	r3, #8
 80021ec:	ed93 7b00 	vldr	d7, [r3]
 80021f0:	ed1f 6b99 	vldr	d6, [pc, #-612]	; 8001f90 <IVK+0x468>
 80021f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80021f8:	eeb0 0b47 	vmov.f64	d0, d7
 80021fc:	f015 f978 	bl	80174f0 <cos>
 8002200:	eeb0 7b40 	vmov.f64	d7, d0
 8002204:	ed1f 6ba2 	vldr	d6, [pc, #-648]	; 8001f80 <IVK+0x458>
 8002208:	ee27 6b06 	vmul.f64	d6, d7, d6
 800220c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002210:	ee27 7b07 	vmul.f64	d7, d7, d7
 8002214:	ee26 7b07 	vmul.f64	d7, d6, d7
	         352.278 * cos(q[1] + 1.6845) * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8002218:	ee39 7b07 	vadd.f64	d7, d9, d7
	      (9.0 *
 800221c:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8002220:	ee27 6b06 	vmul.f64	d6, d7, d6
	      25.0 * f_J_inv_tmp_tmp /
 8002224:	ee88 7b06 	vdiv.f64	d7, d8, d6
	  dv[15] =
 8002228:	f107 0310 	add.w	r3, r7, #16
 800222c:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
	  dv[20] = 0.0;
 8002230:	f107 0110 	add.w	r1, r7, #16
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	  d2 = sin(((q[1] + q[2]) + 1.6845) + -0.8995);
 8002240:	f107 030c 	add.w	r3, r7, #12
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	3308      	adds	r3, #8
 8002248:	ed93 6b00 	vldr	d6, [r3]
 800224c:	f107 030c 	add.w	r3, r7, #12
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	3310      	adds	r3, #16
 8002254:	ed93 7b00 	vldr	d7, [r3]
 8002258:	ee36 7b07 	vadd.f64	d7, d6, d7
 800225c:	ed1f 6bb4 	vldr	d6, [pc, #-720]	; 8001f90 <IVK+0x468>
 8002260:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002264:	ed1f 6bb4 	vldr	d6, [pc, #-720]	; 8001f98 <IVK+0x470>
 8002268:	ee37 7b46 	vsub.f64	d7, d7, d6
 800226c:	eeb0 0b47 	vmov.f64	d0, d7
 8002270:	f015 f992 	bl	8017598 <sin>
 8002274:	ed87 0b5e 	vstr	d0, [r7, #376]	; 0x178
	  d3 = 24629.28 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002278:	f107 030c 	add.w	r3, r7, #12
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3308      	adds	r3, #8
 8002280:	ed93 6b00 	vldr	d6, [r3]
 8002284:	f107 030c 	add.w	r3, r7, #12
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	3310      	adds	r3, #16
 800228c:	ed93 7b00 	vldr	d7, [r3]
 8002290:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002294:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002298:	ed1f 6bc3 	vldr	d6, [pc, #-780]	; 8001f90 <IVK+0x468>
 800229c:	ee37 7b06 	vadd.f64	d7, d7, d6
 80022a0:	ed1f 6bc3 	vldr	d6, [pc, #-780]	; 8001f98 <IVK+0x470>
 80022a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022a8:	ed1f 6bc3 	vldr	d6, [pc, #-780]	; 8001fa0 <IVK+0x478>
 80022ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022b0:	eeb0 0b47 	vmov.f64	d0, d7
 80022b4:	f015 f91c 	bl	80174f0 <cos>
 80022b8:	eeb0 7b40 	vmov.f64	d7, d0
 80022bc:	ed1f 6bce 	vldr	d6, [pc, #-824]	; 8001f88 <IVK+0x460>
 80022c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022c4:	ed97 6b5e 	vldr	d6, [r7, #376]	; 0x178
 80022c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80022cc:	ed87 7b5c 	vstr	d7, [r7, #368]	; 0x170
	       d2;
	  d4 = 24629.28 * J_inv_tmp_tmp * cos(((q[1] + q[2]) + 1.6845) + -0.8995);
 80022d0:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80022d4:	ed1f 6bd4 	vldr	d6, [pc, #-848]	; 8001f88 <IVK+0x460>
 80022d8:	ee27 8b06 	vmul.f64	d8, d7, d6
 80022dc:	f107 030c 	add.w	r3, r7, #12
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	3308      	adds	r3, #8
 80022e4:	ed93 6b00 	vldr	d6, [r3]
 80022e8:	f107 030c 	add.w	r3, r7, #12
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	3310      	adds	r3, #16
 80022f0:	ed93 7b00 	vldr	d7, [r3]
 80022f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80022f8:	ed1f 6bdb 	vldr	d6, [pc, #-876]	; 8001f90 <IVK+0x468>
 80022fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002300:	ed1f 6bdb 	vldr	d6, [pc, #-876]	; 8001f98 <IVK+0x470>
 8002304:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002308:	eeb0 0b47 	vmov.f64	d0, d7
 800230c:	f015 f8f0 	bl	80174f0 <cos>
 8002310:	eeb0 7b40 	vmov.f64	d7, d0
 8002314:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002318:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
	  d5 = 289211.783328 *
	       cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800231c:	f107 030c 	add.w	r3, r7, #12
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	3308      	adds	r3, #8
 8002324:	ed93 6b00 	vldr	d6, [r3]
 8002328:	f107 030c 	add.w	r3, r7, #12
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	3310      	adds	r3, #16
 8002330:	ed93 7b00 	vldr	d7, [r3]
 8002334:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002338:	ee36 7b07 	vadd.f64	d7, d6, d7
 800233c:	ed1f 6bec 	vldr	d6, [pc, #-944]	; 8001f90 <IVK+0x468>
 8002340:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002344:	ed1f 6bec 	vldr	d6, [pc, #-944]	; 8001f98 <IVK+0x470>
 8002348:	ee37 7b46 	vsub.f64	d7, d7, d6
 800234c:	ed1f 6bec 	vldr	d6, [pc, #-944]	; 8001fa0 <IVK+0x478>
 8002350:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002354:	eeb0 0b47 	vmov.f64	d0, d7
 8002358:	f015 f8ca 	bl	80174f0 <cos>
 800235c:	eeb0 7b40 	vmov.f64	d7, d0
	  d5 = 289211.783328 *
 8002360:	ed1f 6bef 	vldr	d6, [pc, #-956]	; 8001fa8 <IVK+0x480>
 8002364:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002368:	ed97 6b66 	vldr	d6, [r7, #408]	; 0x198
 800236c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002370:	ed87 7b58 	vstr	d7, [r7, #352]	; 0x160
	       e_J_inv_tmp_tmp;
	  d6 = 289211.783328 * J_inv_tmp_tmp * b_J_inv_tmp_tmp;
 8002374:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8002378:	ed9f 6bf7 	vldr	d6, [pc, #988]	; 8002758 <IVK+0xc30>
 800237c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002380:	ed97 6b74 	vldr	d6, [r7, #464]	; 0x1d0
 8002384:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002388:	ed87 7b56 	vstr	d7, [r7, #344]	; 0x158
	  d7 = 21136.68 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp_tmp;
 800238c:	f107 030c 	add.w	r3, r7, #12
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	3308      	adds	r3, #8
 8002394:	ed93 6b00 	vldr	d6, [r3]
 8002398:	f107 030c 	add.w	r3, r7, #12
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	3310      	adds	r3, #16
 80023a0:	ed93 7b00 	vldr	d7, [r3]
 80023a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80023a8:	ed9f 6bed 	vldr	d6, [pc, #948]	; 8002760 <IVK+0xc38>
 80023ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80023b0:	ed9f 6bed 	vldr	d6, [pc, #948]	; 8002768 <IVK+0xc40>
 80023b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80023b8:	eeb0 0b47 	vmov.f64	d0, d7
 80023bc:	f015 f898 	bl	80174f0 <cos>
 80023c0:	eeb0 7b40 	vmov.f64	d7, d0
 80023c4:	ed9f 6bea 	vldr	d6, [pc, #936]	; 8002770 <IVK+0xc48>
 80023c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023cc:	ed97 6b66 	vldr	d6, [r7, #408]	; 0x198
 80023d0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80023d4:	ed87 7b54 	vstr	d7, [r7, #336]	; 0x150
	  d8 = 21136.68 * d2 * b_J_inv_tmp_tmp;
 80023d8:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 80023dc:	ed9f 6be4 	vldr	d6, [pc, #912]	; 8002770 <IVK+0xc48>
 80023e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023e4:	ed97 6b74 	vldr	d6, [r7, #464]	; 0x1d0
 80023e8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80023ec:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
	  dv[1] = 27.0 *
	          (((8760.0 * c_J_inv_tmp_tmp * d_J_inv_tmp * d_J_inv_tmp_tmp +
 80023f0:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 80023f4:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8002778 <IVK+0xc50>
 80023f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80023fc:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8002400:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002404:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002408:	ee26 6b07 	vmul.f64	d6, d6, d7
	             119862.496 * b_J_inv_tmp * J_inv_tmp * d_J_inv_tmp_tmp) +
 800240c:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002410:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 8002790 <IVK+0xc68>
 8002414:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002418:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 800241c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002420:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002424:	ee25 7b07 	vmul.f64	d7, d5, d7
	          (((8760.0 * c_J_inv_tmp_tmp * d_J_inv_tmp * d_J_inv_tmp_tmp +
 8002428:	ee36 6b07 	vadd.f64	d6, d6, d7
	            119862.496 * c_J_inv_tmp_tmp * J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 800242c:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8002430:	ed9f 5bd7 	vldr	d5, [pc, #860]	; 8002790 <IVK+0xc68>
 8002434:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002438:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 800243c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002440:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002444:	ee25 7b07 	vmul.f64	d7, d5, d7
	             119862.496 * b_J_inv_tmp * J_inv_tmp * d_J_inv_tmp_tmp) +
 8002448:	ee36 6b07 	vadd.f64	d6, d6, d7
	           8760.0 * b_J_inv_tmp * c_J_inv_tmp * d_J_inv_tmp_tmp) /
 800244c:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002450:	ed9f 5bc9 	vldr	d5, [pc, #804]	; 8002778 <IVK+0xc50>
 8002454:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002458:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 800245c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002460:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002464:	ee25 7b07 	vmul.f64	d7, d5, d7
	            119862.496 * c_J_inv_tmp_tmp * J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 8002468:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[1] = 27.0 *
 800246c:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8002470:	ee27 5b06 	vmul.f64	d5, d7, d6
	          (((((((((((24629.28 * J_inv_tmp * d_J_inv_tmp * d -
 8002474:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8002478:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8002780 <IVK+0xc58>
 800247c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002480:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8002484:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002488:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 800248c:	ee26 6b07 	vmul.f64	d6, d6, d7
	                     24629.28 * J_inv_tmp_tmp * c_J_inv_tmp * d) +
 8002490:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8002494:	ed9f 4bba 	vldr	d4, [pc, #744]	; 8002780 <IVK+0xc58>
 8002498:	ee27 4b04 	vmul.f64	d4, d7, d4
 800249c:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80024a0:	ee24 4b07 	vmul.f64	d4, d4, d7
 80024a4:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 80024a8:	ee24 7b07 	vmul.f64	d7, d4, d7
	          (((((((((((24629.28 * J_inv_tmp * d_J_inv_tmp * d -
 80024ac:	ee36 6b47 	vsub.f64	d6, d6, d7
	                    d3 * d1) -
 80024b0:	ed97 4b5c 	vldr	d4, [r7, #368]	; 0x170
 80024b4:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80024b8:	ee24 7b07 	vmul.f64	d7, d4, d7
	                     24629.28 * J_inv_tmp_tmp * c_J_inv_tmp * d) +
 80024bc:	ee36 6b07 	vadd.f64	d6, d6, d7
	                   d4 * d1) +
 80024c0:	ed97 4b5a 	vldr	d4, [r7, #360]	; 0x168
 80024c4:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80024c8:	ee24 7b07 	vmul.f64	d7, d4, d7
	                    d3 * d1) -
 80024cc:	ee36 6b47 	vsub.f64	d6, d6, d7
	                  289211.783328 * J_inv_tmp * e_J_inv_tmp_tmp * d) -
 80024d0:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 80024d4:	ed9f 4ba0 	vldr	d4, [pc, #640]	; 8002758 <IVK+0xc30>
 80024d8:	ee27 4b04 	vmul.f64	d4, d7, d4
 80024dc:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 80024e0:	ee24 4b07 	vmul.f64	d4, d4, d7
 80024e4:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 80024e8:	ee24 7b07 	vmul.f64	d7, d4, d7
	                   d4 * d1) +
 80024ec:	ee36 6b07 	vadd.f64	d6, d6, d7
	                 d6 * d) +
 80024f0:	ed97 4b56 	vldr	d4, [r7, #344]	; 0x158
 80024f4:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 80024f8:	ee24 7b07 	vmul.f64	d7, d4, d7
	                  289211.783328 * J_inv_tmp * e_J_inv_tmp_tmp * d) -
 80024fc:	ee36 6b47 	vsub.f64	d6, d6, d7
	                d5 * d1) -
 8002500:	ed97 4b58 	vldr	d4, [r7, #352]	; 0x160
 8002504:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002508:	ee24 7b07 	vmul.f64	d7, d4, d7
	                 d6 * d) +
 800250c:	ee36 6b07 	vadd.f64	d6, d6, d7
	               d6 * d1) +
 8002510:	ed97 4b56 	vldr	d4, [r7, #344]	; 0x158
 8002514:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002518:	ee24 7b07 	vmul.f64	d7, d4, d7
	                d5 * d1) -
 800251c:	ee36 6b47 	vsub.f64	d6, d6, d7
	              21136.68 * c_J_inv_tmp * e_J_inv_tmp_tmp * d) -
 8002520:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8002524:	ed9f 4b92 	vldr	d4, [pc, #584]	; 8002770 <IVK+0xc48>
 8002528:	ee27 4b04 	vmul.f64	d4, d7, d4
 800252c:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8002530:	ee24 4b07 	vmul.f64	d4, d4, d7
 8002534:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8002538:	ee24 7b07 	vmul.f64	d7, d4, d7
	               d6 * d1) +
 800253c:	ee36 6b07 	vadd.f64	d6, d6, d7
	             21136.68 * d_J_inv_tmp * b_J_inv_tmp_tmp * d) +
 8002540:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8002544:	ed9f 4b8a 	vldr	d4, [pc, #552]	; 8002770 <IVK+0xc48>
 8002548:	ee27 4b04 	vmul.f64	d4, d7, d4
 800254c:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8002550:	ee24 4b07 	vmul.f64	d4, d4, d7
 8002554:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8002558:	ee24 7b07 	vmul.f64	d7, d4, d7
	              21136.68 * c_J_inv_tmp * e_J_inv_tmp_tmp * d) -
 800255c:	ee36 6b47 	vsub.f64	d6, d6, d7
	            d7 * d1) -
 8002560:	ed97 4b54 	vldr	d4, [r7, #336]	; 0x150
 8002564:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002568:	ee24 7b07 	vmul.f64	d7, d4, d7
	             21136.68 * d_J_inv_tmp * b_J_inv_tmp_tmp * d) +
 800256c:	ee36 6b07 	vadd.f64	d6, d6, d7
	           d8 * d1);
 8002570:	ed97 4b52 	vldr	d4, [r7, #328]	; 0x148
 8002574:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002578:	ee24 7b07 	vmul.f64	d7, d4, d7
	            d7 * d1) -
 800257c:	ee36 6b47 	vsub.f64	d6, d6, d7
	           8760.0 * b_J_inv_tmp * c_J_inv_tmp * d_J_inv_tmp_tmp) /
 8002580:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[1] = 27.0 *
 8002584:	f107 0310 	add.w	r3, r7, #16
 8002588:	ed83 7b02 	vstr	d7, [r3, #8]
	  d9 = 8760.0 *
	       cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 800258c:	f107 030c 	add.w	r3, r7, #12
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	3308      	adds	r3, #8
 8002594:	ed93 6b00 	vldr	d6, [r3]
 8002598:	f107 030c 	add.w	r3, r7, #12
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	3310      	adds	r3, #16
 80025a0:	ed93 7b00 	vldr	d7, [r3]
 80025a4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80025a8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80025ac:	f107 030c 	add.w	r3, r7, #12
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	3318      	adds	r3, #24
 80025b4:	ed93 7b00 	vldr	d7, [r3]
 80025b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80025bc:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8002760 <IVK+0xc38>
 80025c0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80025c4:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8002768 <IVK+0xc40>
 80025c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80025cc:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8002798 <IVK+0xc70>
 80025d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80025d4:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8002788 <IVK+0xc60>
 80025d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80025dc:	eeb0 0b47 	vmov.f64	d0, d7
 80025e0:	f014 ff86 	bl	80174f0 <cos>
 80025e4:	eeb0 7b40 	vmov.f64	d7, d0
	  d9 = 8760.0 *
 80025e8:	ed9f 6b63 	vldr	d6, [pc, #396]	; 8002778 <IVK+0xc50>
 80025ec:	ee27 8b06 	vmul.f64	d8, d7, d6
	           1.52205) *
	       cos(((q[1] + q[2]) + 1.6845) + -0.8995);
 80025f0:	f107 030c 	add.w	r3, r7, #12
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3308      	adds	r3, #8
 80025f8:	ed93 6b00 	vldr	d6, [r3]
 80025fc:	f107 030c 	add.w	r3, r7, #12
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	3310      	adds	r3, #16
 8002604:	ed93 7b00 	vldr	d7, [r3]
 8002608:	ee36 7b07 	vadd.f64	d7, d6, d7
 800260c:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8002760 <IVK+0xc38>
 8002610:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002614:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8002768 <IVK+0xc40>
 8002618:	ee37 7b46 	vsub.f64	d7, d7, d6
 800261c:	eeb0 0b47 	vmov.f64	d0, d7
 8002620:	f014 ff66 	bl	80174f0 <cos>
 8002624:	eeb0 7b40 	vmov.f64	d7, d0
	  d9 = 8760.0 *
 8002628:	ee28 7b07 	vmul.f64	d7, d8, d7
 800262c:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
	  d10 = 8760.0 *
	        sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 8002630:	f107 030c 	add.w	r3, r7, #12
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	3308      	adds	r3, #8
 8002638:	ed93 6b00 	vldr	d6, [r3]
 800263c:	f107 030c 	add.w	r3, r7, #12
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	3310      	adds	r3, #16
 8002644:	ed93 7b00 	vldr	d7, [r3]
 8002648:	ee37 7b07 	vadd.f64	d7, d7, d7
 800264c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002650:	f107 030c 	add.w	r3, r7, #12
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	3318      	adds	r3, #24
 8002658:	ed93 7b00 	vldr	d7, [r3]
 800265c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002660:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8002760 <IVK+0xc38>
 8002664:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002668:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8002768 <IVK+0xc40>
 800266c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002670:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8002798 <IVK+0xc70>
 8002674:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002678:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8002788 <IVK+0xc60>
 800267c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002680:	eeb0 0b47 	vmov.f64	d0, d7
 8002684:	f014 ff88 	bl	8017598 <sin>
 8002688:	eeb0 7b40 	vmov.f64	d7, d0
	  d10 = 8760.0 *
 800268c:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8002778 <IVK+0xc50>
 8002690:	ee27 8b06 	vmul.f64	d8, d7, d6
	            1.52205) *
	        sin(((q[1] + q[2]) + 1.6845) + -0.8995);
 8002694:	f107 030c 	add.w	r3, r7, #12
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	3308      	adds	r3, #8
 800269c:	ed93 6b00 	vldr	d6, [r3]
 80026a0:	f107 030c 	add.w	r3, r7, #12
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	3310      	adds	r3, #16
 80026a8:	ed93 7b00 	vldr	d7, [r3]
 80026ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80026b0:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8002760 <IVK+0xc38>
 80026b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80026b8:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8002768 <IVK+0xc40>
 80026bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80026c0:	eeb0 0b47 	vmov.f64	d0, d7
 80026c4:	f014 ff68 	bl	8017598 <sin>
 80026c8:	eeb0 7b40 	vmov.f64	d7, d0
	  d10 = 8760.0 *
 80026cc:	ee28 7b07 	vmul.f64	d7, d8, d7
 80026d0:	ed87 7b4e 	vstr	d7, [r7, #312]	; 0x138
	  d11 = ((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 80026d4:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80026d8:	ee27 6b07 	vmul.f64	d6, d7, d7
 80026dc:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80026e0:	ee26 6b07 	vmul.f64	d6, d6, d7
	                  d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80026e4:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80026e8:	ee27 5b07 	vmul.f64	d5, d7, d7
 80026ec:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 80026f0:	ee25 7b07 	vmul.f64	d7, d5, d7
	  d11 = ((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 80026f4:	ee36 6b47 	vsub.f64	d6, d6, d7
	                 d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80026f8:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80026fc:	ee27 5b07 	vmul.f64	d5, d7, d7
 8002700:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8002704:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8002708:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 800270c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002710:	ee27 5b07 	vmul.f64	d5, d7, d7
 8002714:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8002718:	ee25 7b07 	vmul.f64	d7, d5, d7
	                 d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 800271c:	ee36 6b47 	vsub.f64	d6, d6, d7
	               d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8002720:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002724:	ee27 5b07 	vmul.f64	d5, d7, d7
 8002728:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 800272c:	ee25 7b07 	vmul.f64	d7, d5, d7
	                d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8002730:	ee36 6b07 	vadd.f64	d6, d6, d7
	              d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8002734:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002738:	ee27 5b07 	vmul.f64	d5, d7, d7
 800273c:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8002740:	ee25 7b07 	vmul.f64	d7, d5, d7
	               d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8002744:	ee36 6b47 	vsub.f64	d6, d6, d7
	             d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8002748:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800274c:	ee27 5b07 	vmul.f64	d5, d7, d7
 8002750:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8002754:	e038      	b.n	80027c8 <IVK+0xca0>
 8002756:	bf00      	nop
 8002758:	2220bc38 	.word	0x2220bc38
 800275c:	4111a6ef 	.word	0x4111a6ef
 8002760:	45a1cac1 	.word	0x45a1cac1
 8002764:	3ffaf3b6 	.word	0x3ffaf3b6
 8002768:	39581062 	.word	0x39581062
 800276c:	3fecc8b4 	.word	0x3fecc8b4
 8002770:	851eb852 	.word	0x851eb852
 8002774:	40d4a42b 	.word	0x40d4a42b
 8002778:	00000000 	.word	0x00000000
 800277c:	40c11c00 	.word	0x40c11c00
 8002780:	eb851eb8 	.word	0xeb851eb8
 8002784:	40d80d51 	.word	0x40d80d51
 8002788:	19ce075f 	.word	0x19ce075f
 800278c:	3ff85a51 	.word	0x3ff85a51
 8002790:	ef9db22d 	.word	0xef9db22d
 8002794:	40fd4367 	.word	0x40fd4367
 8002798:	05532618 	.word	0x05532618
 800279c:	3fe792a3 	.word	0x3fe792a3
 80027a0:	45a1cac1 	.word	0x45a1cac1
 80027a4:	3ffaf3b6 	.word	0x3ffaf3b6
 80027a8:	39581062 	.word	0x39581062
 80027ac:	3fecc8b4 	.word	0x3fecc8b4
 80027b0:	d916872b 	.word	0xd916872b
 80027b4:	4089a7ce 	.word	0x4089a7ce
 80027b8:	00000000 	.word	0x00000000
 80027bc:	404e0000 	.word	0x404e0000
 80027c0:	ef9db22d 	.word	0xef9db22d
 80027c4:	40ed4367 	.word	0x40ed4367
 80027c8:	ee25 7b07 	vmul.f64	d7, d5, d7
	              d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80027cc:	ee36 6b07 	vadd.f64	d6, d6, d7
	            d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80027d0:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80027d4:	ee27 5b07 	vmul.f64	d5, d7, d7
 80027d8:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 80027dc:	ee25 7b07 	vmul.f64	d7, d5, d7
	             d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80027e0:	ee36 6b47 	vsub.f64	d6, d6, d7
	           d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 80027e4:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80027e8:	ee27 5b07 	vmul.f64	d5, d7, d7
 80027ec:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 80027f0:	ee25 7b07 	vmul.f64	d7, d5, d7
	            d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80027f4:	ee36 6b07 	vadd.f64	d6, d6, d7
	          d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80027f8:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80027fc:	ee27 5b07 	vmul.f64	d5, d7, d7
 8002800:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8002804:	ee25 7b07 	vmul.f64	d7, d5, d7
	           d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8002808:	ee36 6b47 	vsub.f64	d6, d6, d7
	         d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 800280c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002810:	ee27 5b07 	vmul.f64	d5, d7, d7
 8002814:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8002818:	ee25 7b07 	vmul.f64	d7, d5, d7
	          d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800281c:	ee36 6b07 	vadd.f64	d6, d6, d7
	        d8 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp);
 8002820:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002824:	ee27 5b07 	vmul.f64	d5, d7, d7
 8002828:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 800282c:	ee25 7b07 	vmul.f64	d7, d5, d7
	  d11 = ((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8002830:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002834:	ed87 7b4c 	vstr	d7, [r7, #304]	; 0x130
	  dv[6] = -(27.0 *
	            (((d10 * f_J_inv_tmp_tmp +
 8002838:	ed97 6b4e 	vldr	d6, [r7, #312]	; 0x138
 800283c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002840:	ee26 8b07 	vmul.f64	d8, d6, d7
	               119862.496 *
	                   cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002844:	f107 030c 	add.w	r3, r7, #12
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	3308      	adds	r3, #8
 800284c:	ed93 6b00 	vldr	d6, [r3]
 8002850:	f107 030c 	add.w	r3, r7, #12
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	3310      	adds	r3, #16
 8002858:	ed93 7b00 	vldr	d7, [r3]
 800285c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002860:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002864:	f107 030c 	add.w	r3, r7, #12
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3318      	adds	r3, #24
 800286c:	ed93 7b00 	vldr	d7, [r3]
 8002870:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002874:	ed1f 6b36 	vldr	d6, [pc, #-216]	; 80027a0 <IVK+0xc78>
 8002878:	ee37 7b06 	vadd.f64	d7, d7, d6
 800287c:	ed1f 6b36 	vldr	d6, [pc, #-216]	; 80027a8 <IVK+0xc80>
 8002880:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002884:	ed1f 6b3c 	vldr	d6, [pc, #-240]	; 8002798 <IVK+0xc70>
 8002888:	ee37 7b46 	vsub.f64	d7, d7, d6
 800288c:	ed1f 6b42 	vldr	d6, [pc, #-264]	; 8002788 <IVK+0xc60>
 8002890:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002894:	eeb0 0b47 	vmov.f64	d0, d7
 8002898:	f014 fe2a 	bl	80174f0 <cos>
 800289c:	eeb0 7b40 	vmov.f64	d7, d0
	               119862.496 *
 80028a0:	ed1f 6b45 	vldr	d6, [pc, #-276]	; 8002790 <IVK+0xc68>
 80028a4:	ee27 9b06 	vmul.f64	d9, d7, d6
	                        -0.73665) +
	                       1.52205) *
	                   cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80028a8:	f107 030c 	add.w	r3, r7, #12
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	3308      	adds	r3, #8
 80028b0:	ed93 6b00 	vldr	d6, [r3]
 80028b4:	f107 030c 	add.w	r3, r7, #12
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	3310      	adds	r3, #16
 80028bc:	ed93 7b00 	vldr	d7, [r3]
 80028c0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80028c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80028c8:	ed1f 6b4b 	vldr	d6, [pc, #-300]	; 80027a0 <IVK+0xc78>
 80028cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80028d0:	ed1f 6b4b 	vldr	d6, [pc, #-300]	; 80027a8 <IVK+0xc80>
 80028d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80028d8:	ed1f 6b51 	vldr	d6, [pc, #-324]	; 8002798 <IVK+0xc70>
 80028dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80028e0:	eeb0 0b47 	vmov.f64	d0, d7
 80028e4:	f014 fe04 	bl	80174f0 <cos>
 80028e8:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 80028ec:	ee29 6b07 	vmul.f64	d6, d9, d7
	                   cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80028f0:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80028f4:	ee26 7b07 	vmul.f64	d7, d6, d7
	            (((d10 * f_J_inv_tmp_tmp +
 80028f8:	ee38 8b07 	vadd.f64	d8, d8, d7
	                   f_J_inv_tmp_tmp) +
	              119862.496 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80028fc:	f107 030c 	add.w	r3, r7, #12
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3308      	adds	r3, #8
 8002904:	ed93 6b00 	vldr	d6, [r3]
 8002908:	f107 030c 	add.w	r3, r7, #12
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3310      	adds	r3, #16
 8002910:	ed93 7b00 	vldr	d7, [r3]
 8002914:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002918:	ee36 6b07 	vadd.f64	d6, d6, d7
 800291c:	f107 030c 	add.w	r3, r7, #12
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	3318      	adds	r3, #24
 8002924:	ed93 7b00 	vldr	d7, [r3]
 8002928:	ee36 7b07 	vadd.f64	d7, d6, d7
 800292c:	ed1f 6b64 	vldr	d6, [pc, #-400]	; 80027a0 <IVK+0xc78>
 8002930:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002934:	ed1f 6b64 	vldr	d6, [pc, #-400]	; 80027a8 <IVK+0xc80>
 8002938:	ee37 7b46 	vsub.f64	d7, d7, d6
 800293c:	ed1f 6b6a 	vldr	d6, [pc, #-424]	; 8002798 <IVK+0xc70>
 8002940:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002944:	ed1f 6b70 	vldr	d6, [pc, #-448]	; 8002788 <IVK+0xc60>
 8002948:	ee37 7b06 	vadd.f64	d7, d7, d6
 800294c:	eeb0 0b47 	vmov.f64	d0, d7
 8002950:	f014 fe22 	bl	8017598 <sin>
 8002954:	eeb0 7b40 	vmov.f64	d7, d0
	              119862.496 *
 8002958:	ed1f 6b73 	vldr	d6, [pc, #-460]	; 8002790 <IVK+0xc68>
 800295c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002960:	f107 030c 	add.w	r3, r7, #12
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	3308      	adds	r3, #8
 8002968:	ed93 6b00 	vldr	d6, [r3]
 800296c:	f107 030c 	add.w	r3, r7, #12
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	3310      	adds	r3, #16
 8002974:	ed93 7b00 	vldr	d7, [r3]
 8002978:	ee37 7b07 	vadd.f64	d7, d7, d7
 800297c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002980:	ed1f 6b79 	vldr	d6, [pc, #-484]	; 80027a0 <IVK+0xc78>
 8002984:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002988:	ed1f 6b79 	vldr	d6, [pc, #-484]	; 80027a8 <IVK+0xc80>
 800298c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002990:	ed1f 6b7f 	vldr	d6, [pc, #-508]	; 8002798 <IVK+0xc70>
 8002994:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002998:	eeb0 0b47 	vmov.f64	d0, d7
 800299c:	f014 fdfc 	bl	8017598 <sin>
 80029a0:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 80029a4:	ee29 6b07 	vmul.f64	d6, d9, d7
	                  sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80029a8:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80029ac:	ee26 7b07 	vmul.f64	d7, d6, d7
	                   f_J_inv_tmp_tmp) +
 80029b0:	ee38 6b07 	vadd.f64	d6, d8, d7
	                  f_J_inv_tmp_tmp) +
	             d9 * f_J_inv_tmp_tmp)) /
 80029b4:	ed97 5b50 	vldr	d5, [r7, #320]	; 0x140
 80029b8:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80029bc:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  f_J_inv_tmp_tmp) +
 80029c0:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[6] = -(27.0 *
 80029c4:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 80029c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80029cc:	eeb1 5b47 	vneg.f64	d5, d7
	             d9 * f_J_inv_tmp_tmp)) /
 80029d0:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 80029d4:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[6] = -(27.0 *
 80029d8:	f107 0310 	add.w	r3, r7, #16
 80029dc:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	          d11;
	  dv[11] = -(27.0 * (820.976 * J_inv_tmp * f_J_inv_tmp_tmp +
 80029e0:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 80029e4:	ed1f 6b8e 	vldr	d6, [pc, #-568]	; 80027b0 <IVK+0xc88>
 80029e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80029ec:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80029f0:	ee26 8b07 	vmul.f64	d8, d6, d7
	                     60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80029f4:	f107 030c 	add.w	r3, r7, #12
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	3308      	adds	r3, #8
 80029fc:	ed93 6b00 	vldr	d6, [r3]
 8002a00:	f107 030c 	add.w	r3, r7, #12
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	3310      	adds	r3, #16
 8002a08:	ed93 7b00 	vldr	d7, [r3]
 8002a0c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002a10:	ed1f 6b9d 	vldr	d6, [pc, #-628]	; 80027a0 <IVK+0xc78>
 8002a14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002a18:	ed1f 6b9d 	vldr	d6, [pc, #-628]	; 80027a8 <IVK+0xc80>
 8002a1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002a20:	eeb0 0b47 	vmov.f64	d0, d7
 8002a24:	f014 fd64 	bl	80174f0 <cos>
 8002a28:	eeb0 7b40 	vmov.f64	d7, d0
 8002a2c:	ed1f 6b9e 	vldr	d6, [pc, #-632]	; 80027b8 <IVK+0xc90>
 8002a30:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002a34:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002a38:	ee26 7b07 	vmul.f64	d7, d6, d7
	  dv[11] = -(27.0 * (820.976 * J_inv_tmp * f_J_inv_tmp_tmp +
 8002a3c:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002a40:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8002a44:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a48:	eeb1 5b47 	vneg.f64	d5, d7
	                         f_J_inv_tmp_tmp)) /
 8002a4c:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 8002a50:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[11] = -(27.0 * (820.976 * J_inv_tmp * f_J_inv_tmp_tmp +
 8002a54:	f107 0310 	add.w	r3, r7, #16
 8002a58:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	           d11;
	  dv[16] =
	      -(27.0 *
	        (820.976 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002a5c:	f107 030c 	add.w	r3, r7, #12
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	3308      	adds	r3, #8
 8002a64:	ed93 6b00 	vldr	d6, [r3]
 8002a68:	f107 030c 	add.w	r3, r7, #12
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3310      	adds	r3, #16
 8002a70:	ed93 7b00 	vldr	d7, [r3]
 8002a74:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002a78:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002a7c:	ed1f 6bb8 	vldr	d6, [pc, #-736]	; 80027a0 <IVK+0xc78>
 8002a80:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002a84:	ed1f 6bb8 	vldr	d6, [pc, #-736]	; 80027a8 <IVK+0xc80>
 8002a88:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002a8c:	ed1f 6bbe 	vldr	d6, [pc, #-760]	; 8002798 <IVK+0xc70>
 8002a90:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002a94:	eeb0 0b47 	vmov.f64	d0, d7
 8002a98:	f014 fd2a 	bl	80174f0 <cos>
 8002a9c:	eeb0 7b40 	vmov.f64	d7, d0
 8002aa0:	ed1f 6bbd 	vldr	d6, [pc, #-756]	; 80027b0 <IVK+0xc88>
 8002aa4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002aa8:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002aac:	ee26 8b07 	vmul.f64	d8, d6, d7
	             d_J_inv_tmp_tmp +
	         60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * d_J_inv_tmp_tmp)) /
 8002ab0:	f107 030c 	add.w	r3, r7, #12
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	3308      	adds	r3, #8
 8002ab8:	ed93 6b00 	vldr	d6, [r3]
 8002abc:	f107 030c 	add.w	r3, r7, #12
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	3310      	adds	r3, #16
 8002ac4:	ed93 7b00 	vldr	d7, [r3]
 8002ac8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002acc:	ed1f 6bcc 	vldr	d6, [pc, #-816]	; 80027a0 <IVK+0xc78>
 8002ad0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ad4:	ed1f 6bcc 	vldr	d6, [pc, #-816]	; 80027a8 <IVK+0xc80>
 8002ad8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002adc:	eeb0 0b47 	vmov.f64	d0, d7
 8002ae0:	f014 fd06 	bl	80174f0 <cos>
 8002ae4:	eeb0 7b40 	vmov.f64	d7, d0
 8002ae8:	ed1f 6bcd 	vldr	d6, [pc, #-820]	; 80027b8 <IVK+0xc90>
 8002aec:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002af0:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002af4:	ee26 7b07 	vmul.f64	d7, d6, d7
	             d_J_inv_tmp_tmp +
 8002af8:	ee38 7b07 	vadd.f64	d7, d8, d7
	      -(27.0 *
 8002afc:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8002b00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b04:	eeb1 5b47 	vneg.f64	d5, d7
	         60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * d_J_inv_tmp_tmp)) /
 8002b08:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 8002b0c:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[16] =
 8002b10:	f107 0310 	add.w	r3, r7, #16
 8002b14:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
	      d11;
	  dv[21] = -(27.0 * (820.976 * J_inv_tmp_tmp + 60.0 * d_J_inv_tmp)) / d11;
 8002b18:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8002b1c:	ed1f 6bdc 	vldr	d6, [pc, #-880]	; 80027b0 <IVK+0xc88>
 8002b20:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002b24:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8002b28:	ed1f 5bdd 	vldr	d5, [pc, #-884]	; 80027b8 <IVK+0xc90>
 8002b2c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002b30:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b34:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8002b38:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b3c:	eeb1 5b47 	vneg.f64	d5, d7
 8002b40:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 8002b44:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002b48:	f107 0310 	add.w	r3, r7, #16
 8002b4c:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8
	  d12 = 2.0 * d11;
 8002b50:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 8002b54:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002b58:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
	  dv[2] = -(55.0 * (((((59931.248 * b_J_inv_tmp * J_inv_tmp * e_J_inv_tmp *
 8002b5c:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002b60:	ed1f 6be9 	vldr	d6, [pc, #-932]	; 80027c0 <IVK+0xc98>
 8002b64:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002b68:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8002b6c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002b70:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002b74:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002b78:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002b7c:	ee26 6b07 	vmul.f64	d6, d6, d7
	                            d_J_inv_tmp_tmp +
	                        59931.248 * c_J_inv_tmp_tmp * J_inv_tmp_tmp *
 8002b80:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8002b84:	ed1f 5bf2 	vldr	d5, [pc, #-968]	; 80027c0 <IVK+0xc98>
 8002b88:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002b8c:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8002b90:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002b94:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002b98:	ee25 5b07 	vmul.f64	d5, d5, d7
	                            e_J_inv_tmp * d_J_inv_tmp_tmp) +
 8002b9c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002ba0:	ee25 7b07 	vmul.f64	d7, d5, d7
	                            d_J_inv_tmp_tmp +
 8002ba4:	ee36 6b07 	vadd.f64	d6, d6, d7
	                       d9 * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 8002ba8:	ed97 5b50 	vldr	d5, [r7, #320]	; 0x140
 8002bac:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002bb0:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002bb4:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002bb8:	ee25 7b07 	vmul.f64	d7, d5, d7
	                            e_J_inv_tmp * d_J_inv_tmp_tmp) +
 8002bbc:	ee36 6b07 	vadd.f64	d6, d6, d7
	                      51432.588 * b_J_inv_tmp * b_J_inv_tmp_tmp * e_J_inv_tmp *
 8002bc0:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002bc4:	ed9f 5bf2 	vldr	d5, [pc, #968]	; 8002f90 <IVK+0x1468>
 8002bc8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002bcc:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8002bd0:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002bd4:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002bd8:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002bdc:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002be0:	ee25 7b07 	vmul.f64	d7, d5, d7
	                       d9 * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 8002be4:	ee36 6b07 	vadd.f64	d6, d6, d7
	                          d_J_inv_tmp_tmp) +
	                     d10 * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 8002be8:	ed97 5b4e 	vldr	d5, [r7, #312]	; 0x138
 8002bec:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002bf0:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002bf4:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002bf8:	ee25 7b07 	vmul.f64	d7, d5, d7
	                          d_J_inv_tmp_tmp) +
 8002bfc:	ee36 6b07 	vadd.f64	d6, d6, d7
	                    51432.588 * c_J_inv_tmp_tmp * e_J_inv_tmp_tmp *
 8002c00:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8002c04:	ed9f 5be2 	vldr	d5, [pc, #904]	; 8002f90 <IVK+0x1468>
 8002c08:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002c0c:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8002c10:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002c14:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002c18:	ee25 5b07 	vmul.f64	d5, d5, d7
	                        e_J_inv_tmp * d_J_inv_tmp_tmp)) /
 8002c1c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002c20:	ee25 7b07 	vmul.f64	d7, d5, d7
	                     d10 * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 8002c24:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[2] = -(55.0 * (((((59931.248 * b_J_inv_tmp * J_inv_tmp * e_J_inv_tmp *
 8002c28:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8002fe8 <IVK+0x14c0>
 8002c2c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002c30:	eeb1 5b47 	vneg.f64	d5, d7
	                        e_J_inv_tmp * d_J_inv_tmp_tmp)) /
 8002c34:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 8002c38:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[2] = -(55.0 * (((((59931.248 * b_J_inv_tmp * J_inv_tmp * e_J_inv_tmp *
 8002c3c:	f107 0310 	add.w	r3, r7, #16
 8002c40:	ed83 7b04 	vstr	d7, [r3, #16]
	          d12;
	  dv[7] =
	      55.0 *
	      (((((59931.248 *
	               cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002c44:	f107 030c 	add.w	r3, r7, #12
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	3308      	adds	r3, #8
 8002c4c:	ed93 6b00 	vldr	d6, [r3]
 8002c50:	f107 030c 	add.w	r3, r7, #12
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3310      	adds	r3, #16
 8002c58:	ed93 7b00 	vldr	d7, [r3]
 8002c5c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002c60:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002c64:	f107 030c 	add.w	r3, r7, #12
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	3318      	adds	r3, #24
 8002c6c:	ed93 7b00 	vldr	d7, [r3]
 8002c70:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c74:	ed9f 6bd4 	vldr	d6, [pc, #848]	; 8002fc8 <IVK+0x14a0>
 8002c78:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002c7c:	ed9f 6bd4 	vldr	d6, [pc, #848]	; 8002fd0 <IVK+0x14a8>
 8002c80:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c84:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 8002fb8 <IVK+0x1490>
 8002c88:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c8c:	ed9f 6bc6 	vldr	d6, [pc, #792]	; 8002fa8 <IVK+0x1480>
 8002c90:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002c94:	eeb0 0b47 	vmov.f64	d0, d7
 8002c98:	f014 fc2a 	bl	80174f0 <cos>
 8002c9c:	eeb0 7b40 	vmov.f64	d7, d0
	      (((((59931.248 *
 8002ca0:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8002f98 <IVK+0x1470>
 8002ca4:	ee27 8b06 	vmul.f64	d8, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002ca8:	f107 030c 	add.w	r3, r7, #12
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3308      	adds	r3, #8
 8002cb0:	ed93 6b00 	vldr	d6, [r3]
 8002cb4:	f107 030c 	add.w	r3, r7, #12
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	3310      	adds	r3, #16
 8002cbc:	ed93 7b00 	vldr	d7, [r3]
 8002cc0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002cc4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002cc8:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 8002fc8 <IVK+0x14a0>
 8002ccc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002cd0:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 8002fd0 <IVK+0x14a8>
 8002cd4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002cd8:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8002fb8 <IVK+0x1490>
 8002cdc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ce0:	eeb0 0b47 	vmov.f64	d0, d7
 8002ce4:	f014 fc04 	bl	80174f0 <cos>
 8002ce8:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 8002cec:	ee28 6b07 	vmul.f64	d6, d8, d7
	               cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002cf0:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002cf4:	ee26 6b07 	vmul.f64	d6, d6, d7
	               f_J_inv_tmp_tmp * e_J_inv_tmp +
 8002cf8:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002cfc:	ee26 8b07 	vmul.f64	d8, d6, d7
	           59931.248 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002d00:	f107 030c 	add.w	r3, r7, #12
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3308      	adds	r3, #8
 8002d08:	ed93 6b00 	vldr	d6, [r3]
 8002d0c:	f107 030c 	add.w	r3, r7, #12
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	3310      	adds	r3, #16
 8002d14:	ed93 7b00 	vldr	d7, [r3]
 8002d18:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002d1c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002d20:	f107 030c 	add.w	r3, r7, #12
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	3318      	adds	r3, #24
 8002d28:	ed93 7b00 	vldr	d7, [r3]
 8002d2c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d30:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8002fc8 <IVK+0x14a0>
 8002d34:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002d38:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8002fd0 <IVK+0x14a8>
 8002d3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002d40:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8002fb8 <IVK+0x1490>
 8002d44:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002d48:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8002fa8 <IVK+0x1480>
 8002d4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002d50:	eeb0 0b47 	vmov.f64	d0, d7
 8002d54:	f014 fc20 	bl	8017598 <sin>
 8002d58:	eeb0 7b40 	vmov.f64	d7, d0
	           59931.248 *
 8002d5c:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 8002f98 <IVK+0x1470>
 8002d60:	ee27 9b06 	vmul.f64	d9, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002d64:	f107 030c 	add.w	r3, r7, #12
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	3308      	adds	r3, #8
 8002d6c:	ed93 6b00 	vldr	d6, [r3]
 8002d70:	f107 030c 	add.w	r3, r7, #12
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	3310      	adds	r3, #16
 8002d78:	ed93 7b00 	vldr	d7, [r3]
 8002d7c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002d80:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d84:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002fc8 <IVK+0x14a0>
 8002d88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002d8c:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002fd0 <IVK+0x14a8>
 8002d90:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002d94:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8002fb8 <IVK+0x1490>
 8002d98:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002d9c:	eeb0 0b47 	vmov.f64	d0, d7
 8002da0:	f014 fbfa 	bl	8017598 <sin>
 8002da4:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 8002da8:	ee29 6b07 	vmul.f64	d6, d9, d7
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002dac:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002db0:	ee26 6b07 	vmul.f64	d6, d6, d7
	               f_J_inv_tmp_tmp * e_J_inv_tmp) +
 8002db4:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002db8:	ee26 7b07 	vmul.f64	d7, d6, d7
	               f_J_inv_tmp_tmp * e_J_inv_tmp +
 8002dbc:	ee38 8b07 	vadd.f64	d8, d8, d7
	          8760.0 *
	              cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002dc0:	f107 030c 	add.w	r3, r7, #12
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	3308      	adds	r3, #8
 8002dc8:	ed93 6b00 	vldr	d6, [r3]
 8002dcc:	f107 030c 	add.w	r3, r7, #12
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	3310      	adds	r3, #16
 8002dd4:	ed93 7b00 	vldr	d7, [r3]
 8002dd8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002ddc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002de0:	f107 030c 	add.w	r3, r7, #12
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	3318      	adds	r3, #24
 8002de8:	ed93 7b00 	vldr	d7, [r3]
 8002dec:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002df0:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8002fc8 <IVK+0x14a0>
 8002df4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002df8:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8002fd0 <IVK+0x14a8>
 8002dfc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002e00:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8002fb8 <IVK+0x1490>
 8002e04:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002e08:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8002fa8 <IVK+0x1480>
 8002e0c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002e10:	eeb0 0b47 	vmov.f64	d0, d7
 8002e14:	f014 fb6c 	bl	80174f0 <cos>
 8002e18:	eeb0 7b40 	vmov.f64	d7, d0
	          8760.0 *
 8002e1c:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8002fa0 <IVK+0x1478>
 8002e20:	ee27 9b06 	vmul.f64	d9, d7, d6
	                   -0.73665) +
	                  1.52205) *
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) *
 8002e24:	f107 030c 	add.w	r3, r7, #12
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	3308      	adds	r3, #8
 8002e2c:	ed93 6b00 	vldr	d6, [r3]
 8002e30:	f107 030c 	add.w	r3, r7, #12
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	3310      	adds	r3, #16
 8002e38:	ed93 7b00 	vldr	d7, [r3]
 8002e3c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e40:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8002fc8 <IVK+0x14a0>
 8002e44:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002e48:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8002fd0 <IVK+0x14a8>
 8002e4c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002e50:	eeb0 0b47 	vmov.f64	d0, d7
 8002e54:	f014 fb4c 	bl	80174f0 <cos>
 8002e58:	eeb0 7b40 	vmov.f64	d7, d0
	                  1.52205) *
 8002e5c:	ee29 9b07 	vmul.f64	d9, d9, d7
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) *
 8002e60:	f107 030c 	add.w	r3, r7, #12
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	ed93 7b00 	vldr	d7, [r3]
 8002e6a:	eeb0 0b47 	vmov.f64	d0, d7
 8002e6e:	f014 fb3f 	bl	80174f0 <cos>
 8002e72:	eeb0 7b40 	vmov.f64	d7, d0
 8002e76:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002e7a:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002e7e:	ee26 7b07 	vmul.f64	d7, d6, d7
	               f_J_inv_tmp_tmp * e_J_inv_tmp) +
 8002e82:	ee38 8b07 	vadd.f64	d8, d8, d7
	              e_J_inv_tmp) +
	         51432.588 *
	             cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002e86:	f107 030c 	add.w	r3, r7, #12
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3308      	adds	r3, #8
 8002e8e:	ed93 6b00 	vldr	d6, [r3]
 8002e92:	f107 030c 	add.w	r3, r7, #12
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	3310      	adds	r3, #16
 8002e9a:	ed93 7b00 	vldr	d7, [r3]
 8002e9e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002ea2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002ea6:	f107 030c 	add.w	r3, r7, #12
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	3318      	adds	r3, #24
 8002eae:	ed93 7b00 	vldr	d7, [r3]
 8002eb2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002eb6:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8002fc8 <IVK+0x14a0>
 8002eba:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ebe:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8002fd0 <IVK+0x14a8>
 8002ec2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ec6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8002fb8 <IVK+0x1490>
 8002eca:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ece:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8002fa8 <IVK+0x1480>
 8002ed2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ed6:	eeb0 0b47 	vmov.f64	d0, d7
 8002eda:	f014 fb09 	bl	80174f0 <cos>
 8002ede:	eeb0 7b40 	vmov.f64	d7, d0
	         51432.588 *
 8002ee2:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8002f90 <IVK+0x1468>
 8002ee6:	ee27 9b06 	vmul.f64	d9, d7, d6
	                  -0.73665) +
	                 1.52205) *
	             cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 8002eea:	f107 030c 	add.w	r3, r7, #12
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3308      	adds	r3, #8
 8002ef2:	ed93 7b00 	vldr	d7, [r3]
 8002ef6:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8002fc8 <IVK+0x14a0>
 8002efa:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002efe:	eeb0 0b47 	vmov.f64	d0, d7
 8002f02:	f014 faf5 	bl	80174f0 <cos>
 8002f06:	eeb0 7b40 	vmov.f64	d7, d0
	                 1.52205) *
 8002f0a:	ee29 6b07 	vmul.f64	d6, d9, d7
	             cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 8002f0e:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002f12:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002f16:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002f1a:	ee26 7b07 	vmul.f64	d7, d6, d7
	              e_J_inv_tmp) +
 8002f1e:	ee38 8b07 	vadd.f64	d8, d8, d7
	        8760.0 *
	            sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002f22:	f107 030c 	add.w	r3, r7, #12
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	3308      	adds	r3, #8
 8002f2a:	ed93 6b00 	vldr	d6, [r3]
 8002f2e:	f107 030c 	add.w	r3, r7, #12
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	3310      	adds	r3, #16
 8002f36:	ed93 7b00 	vldr	d7, [r3]
 8002f3a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002f3e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002f42:	f107 030c 	add.w	r3, r7, #12
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	3318      	adds	r3, #24
 8002f4a:	ed93 7b00 	vldr	d7, [r3]
 8002f4e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002f52:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8002fc8 <IVK+0x14a0>
 8002f56:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002f5a:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8002fd0 <IVK+0x14a8>
 8002f5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002f62:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8002fb8 <IVK+0x1490>
 8002f66:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002f6a:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8002fa8 <IVK+0x1480>
 8002f6e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002f72:	eeb0 0b47 	vmov.f64	d0, d7
 8002f76:	f014 fb0f 	bl	8017598 <sin>
 8002f7a:	eeb0 7b40 	vmov.f64	d7, d0
	        8760.0 *
 8002f7e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8002fa0 <IVK+0x1478>
 8002f82:	ee27 9b06 	vmul.f64	d9, d7, d6
	                 -0.73665) +
	                1.52205) *
	            sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) * e_J_inv_tmp) +
 8002f86:	f107 030c 	add.w	r3, r7, #12
 8002f8a:	e031      	b.n	8002ff0 <IVK+0x14c8>
 8002f8c:	f3af 8000 	nop.w
 8002f90:	d0e56042 	.word	0xd0e56042
 8002f94:	40e91d12 	.word	0x40e91d12
 8002f98:	ef9db22d 	.word	0xef9db22d
 8002f9c:	40ed4367 	.word	0x40ed4367
 8002fa0:	00000000 	.word	0x00000000
 8002fa4:	40c11c00 	.word	0x40c11c00
 8002fa8:	19ce075f 	.word	0x19ce075f
 8002fac:	3ff85a51 	.word	0x3ff85a51
 8002fb0:	d0e56042 	.word	0xd0e56042
 8002fb4:	40e91d12 	.word	0x40e91d12
 8002fb8:	05532618 	.word	0x05532618
 8002fbc:	3fe792a3 	.word	0x3fe792a3
 8002fc0:	d916872b 	.word	0xd916872b
 8002fc4:	4079a7ce 	.word	0x4079a7ce
 8002fc8:	45a1cac1 	.word	0x45a1cac1
 8002fcc:	3ffaf3b6 	.word	0x3ffaf3b6
 8002fd0:	39581062 	.word	0x39581062
 8002fd4:	3fecc8b4 	.word	0x3fecc8b4
 8002fd8:	00000000 	.word	0x00000000
 8002fdc:	404e0000 	.word	0x404e0000
 8002fe0:	b020c49c 	.word	0xb020c49c
 8002fe4:	40760472 	.word	0x40760472
 8002fe8:	00000000 	.word	0x00000000
 8002fec:	404b8000 	.word	0x404b8000
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	3308      	adds	r3, #8
 8002ff4:	ed93 6b00 	vldr	d6, [r3]
 8002ff8:	f107 030c 	add.w	r3, r7, #12
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	3310      	adds	r3, #16
 8003000:	ed93 7b00 	vldr	d7, [r3]
 8003004:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003008:	ed1f 6b11 	vldr	d6, [pc, #-68]	; 8002fc8 <IVK+0x14a0>
 800300c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003010:	ed1f 6b11 	vldr	d6, [pc, #-68]	; 8002fd0 <IVK+0x14a8>
 8003014:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003018:	eeb0 0b47 	vmov.f64	d0, d7
 800301c:	f014 fabc 	bl	8017598 <sin>
 8003020:	eeb0 7b40 	vmov.f64	d7, d0
	                1.52205) *
 8003024:	ee29 9b07 	vmul.f64	d9, d9, d7
	            sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) * e_J_inv_tmp) +
 8003028:	f107 030c 	add.w	r3, r7, #12
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	ed93 7b00 	vldr	d7, [r3]
 8003032:	eeb0 0b47 	vmov.f64	d0, d7
 8003036:	f014 fa5b 	bl	80174f0 <cos>
 800303a:	eeb0 7b40 	vmov.f64	d7, d0
 800303e:	ee29 6b07 	vmul.f64	d6, d9, d7
 8003042:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8003046:	ee26 7b07 	vmul.f64	d7, d6, d7
	             cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 800304a:	ee38 8b07 	vadd.f64	d8, d8, d7
	       51432.588 *
	           sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800304e:	f107 030c 	add.w	r3, r7, #12
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3308      	adds	r3, #8
 8003056:	ed93 6b00 	vldr	d6, [r3]
 800305a:	f107 030c 	add.w	r3, r7, #12
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	3310      	adds	r3, #16
 8003062:	ed93 7b00 	vldr	d7, [r3]
 8003066:	ee37 7b07 	vadd.f64	d7, d7, d7
 800306a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800306e:	f107 030c 	add.w	r3, r7, #12
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3318      	adds	r3, #24
 8003076:	ed93 7b00 	vldr	d7, [r3]
 800307a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800307e:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 8002fc8 <IVK+0x14a0>
 8003082:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003086:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 8002fd0 <IVK+0x14a8>
 800308a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800308e:	ed1f 6b36 	vldr	d6, [pc, #-216]	; 8002fb8 <IVK+0x1490>
 8003092:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003096:	ed1f 6b3c 	vldr	d6, [pc, #-240]	; 8002fa8 <IVK+0x1480>
 800309a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800309e:	eeb0 0b47 	vmov.f64	d0, d7
 80030a2:	f014 fa79 	bl	8017598 <sin>
 80030a6:	eeb0 7b40 	vmov.f64	d7, d0
	       51432.588 *
 80030aa:	ed1f 6b3f 	vldr	d6, [pc, #-252]	; 8002fb0 <IVK+0x1488>
 80030ae:	ee27 9b06 	vmul.f64	d9, d7, d6
	                -0.73665) +
	               1.52205) *
	           sin(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) /
 80030b2:	f107 030c 	add.w	r3, r7, #12
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3308      	adds	r3, #8
 80030ba:	ed93 7b00 	vldr	d7, [r3]
 80030be:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 8002fc8 <IVK+0x14a0>
 80030c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80030c6:	eeb0 0b47 	vmov.f64	d0, d7
 80030ca:	f014 fa65 	bl	8017598 <sin>
 80030ce:	eeb0 7b40 	vmov.f64	d7, d0
	               1.52205) *
 80030d2:	ee29 6b07 	vmul.f64	d6, d9, d7
	           sin(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) /
 80030d6:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80030da:	ee26 6b07 	vmul.f64	d6, d6, d7
 80030de:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 80030e2:	ee26 7b07 	vmul.f64	d7, d6, d7
	            sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) * e_J_inv_tmp) +
 80030e6:	ee38 7b07 	vadd.f64	d7, d8, d7
	      55.0 *
 80030ea:	ed1f 6b41 	vldr	d6, [pc, #-260]	; 8002fe8 <IVK+0x14c0>
 80030ee:	ee27 5b06 	vmul.f64	d5, d7, d6
	           sin(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) /
 80030f2:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 80030f6:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[7] =
 80030fa:	f107 0310 	add.w	r3, r7, #16
 80030fe:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	      d12;
	  dv[12] =
	      55.0 *
	      ((60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) *
 8003102:	f107 030c 	add.w	r3, r7, #12
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3308      	adds	r3, #8
 800310a:	ed93 6b00 	vldr	d6, [r3]
 800310e:	f107 030c 	add.w	r3, r7, #12
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3310      	adds	r3, #16
 8003116:	ed93 7b00 	vldr	d7, [r3]
 800311a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800311e:	ed1f 6b56 	vldr	d6, [pc, #-344]	; 8002fc8 <IVK+0x14a0>
 8003122:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003126:	ed1f 6b56 	vldr	d6, [pc, #-344]	; 8002fd0 <IVK+0x14a8>
 800312a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800312e:	eeb0 0b47 	vmov.f64	d0, d7
 8003132:	f014 f9dd 	bl	80174f0 <cos>
 8003136:	eeb0 7b40 	vmov.f64	d7, d0
 800313a:	ed1f 6b59 	vldr	d6, [pc, #-356]	; 8002fd8 <IVK+0x14b0>
 800313e:	ee27 8b06 	vmul.f64	d8, d7, d6
 8003142:	f107 030c 	add.w	r3, r7, #12
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	ed93 7b00 	vldr	d7, [r3]
 800314c:	eeb0 0b47 	vmov.f64	d0, d7
 8003150:	f014 f9ce 	bl	80174f0 <cos>
 8003154:	eeb0 7b40 	vmov.f64	d7, d0
 8003158:	ee28 6b07 	vmul.f64	d6, d8, d7
 800315c:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8003160:	ee26 8b07 	vmul.f64	d8, d6, d7
	            e_J_inv_tmp +
	        352.278 * cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 8003164:	f107 030c 	add.w	r3, r7, #12
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	3308      	adds	r3, #8
 800316c:	ed93 7b00 	vldr	d7, [r3]
 8003170:	ed1f 6b6b 	vldr	d6, [pc, #-428]	; 8002fc8 <IVK+0x14a0>
 8003174:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003178:	eeb0 0b47 	vmov.f64	d0, d7
 800317c:	f014 f9b8 	bl	80174f0 <cos>
 8003180:	eeb0 7b40 	vmov.f64	d7, d0
 8003184:	ed1f 6b6a 	vldr	d6, [pc, #-424]	; 8002fe0 <IVK+0x14b8>
 8003188:	ee27 6b06 	vmul.f64	d6, d7, d6
 800318c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003190:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003194:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8003198:	ee26 7b07 	vmul.f64	d7, d6, d7
	            e_J_inv_tmp +
 800319c:	ee38 8b07 	vadd.f64	d8, d8, d7
	       410.488 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80031a0:	f107 030c 	add.w	r3, r7, #12
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3308      	adds	r3, #8
 80031a8:	ed93 6b00 	vldr	d6, [r3]
 80031ac:	f107 030c 	add.w	r3, r7, #12
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3310      	adds	r3, #16
 80031b4:	ed93 7b00 	vldr	d7, [r3]
 80031b8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80031bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80031c0:	ed1f 6b7f 	vldr	d6, [pc, #-508]	; 8002fc8 <IVK+0x14a0>
 80031c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80031c8:	ed1f 6b7f 	vldr	d6, [pc, #-508]	; 8002fd0 <IVK+0x14a8>
 80031cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80031d0:	ed1f 6b87 	vldr	d6, [pc, #-540]	; 8002fb8 <IVK+0x1490>
 80031d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80031d8:	eeb0 0b47 	vmov.f64	d0, d7
 80031dc:	f014 f988 	bl	80174f0 <cos>
 80031e0:	eeb0 7b40 	vmov.f64	d7, d0
 80031e4:	ed1f 6b8a 	vldr	d6, [pc, #-552]	; 8002fc0 <IVK+0x1498>
 80031e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80031ec:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80031f0:	ee26 6b07 	vmul.f64	d6, d6, d7
	           f_J_inv_tmp_tmp * e_J_inv_tmp) /
 80031f4:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 80031f8:	ee26 7b07 	vmul.f64	d7, d6, d7
	        352.278 * cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 80031fc:	ee38 7b07 	vadd.f64	d7, d8, d7
	      55.0 *
 8003200:	ed1f 6b87 	vldr	d6, [pc, #-540]	; 8002fe8 <IVK+0x14c0>
 8003204:	ee27 5b06 	vmul.f64	d5, d7, d6
	           f_J_inv_tmp_tmp * e_J_inv_tmp) /
 8003208:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 800320c:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[12] =
 8003210:	f107 0310 	add.w	r3, r7, #16
 8003214:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
	      d12;
	  dv[17] =
	      55.0 *
	      ((60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp *
 8003218:	f107 030c 	add.w	r3, r7, #12
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	3308      	adds	r3, #8
 8003220:	ed93 6b00 	vldr	d6, [r3]
 8003224:	f107 030c 	add.w	r3, r7, #12
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3310      	adds	r3, #16
 800322c:	ed93 7b00 	vldr	d7, [r3]
 8003230:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003234:	ed1f 6b9c 	vldr	d6, [pc, #-624]	; 8002fc8 <IVK+0x14a0>
 8003238:	ee37 7b06 	vadd.f64	d7, d7, d6
 800323c:	ed1f 6b9c 	vldr	d6, [pc, #-624]	; 8002fd0 <IVK+0x14a8>
 8003240:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003244:	eeb0 0b47 	vmov.f64	d0, d7
 8003248:	f014 f952 	bl	80174f0 <cos>
 800324c:	eeb0 7b40 	vmov.f64	d7, d0
 8003250:	ed1f 6b9f 	vldr	d6, [pc, #-636]	; 8002fd8 <IVK+0x14b0>
 8003254:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003258:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 800325c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003260:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003264:	ee26 8b07 	vmul.f64	d8, d6, d7
	            d_J_inv_tmp_tmp +
	        352.278 * cos(q[1] + 1.6845) * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 8003268:	f107 030c 	add.w	r3, r7, #12
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3308      	adds	r3, #8
 8003270:	ed93 7b00 	vldr	d7, [r3]
 8003274:	ed1f 6bac 	vldr	d6, [pc, #-688]	; 8002fc8 <IVK+0x14a0>
 8003278:	ee37 7b06 	vadd.f64	d7, d7, d6
 800327c:	eeb0 0b47 	vmov.f64	d0, d7
 8003280:	f014 f936 	bl	80174f0 <cos>
 8003284:	eeb0 7b40 	vmov.f64	d7, d0
 8003288:	ed1f 6bab 	vldr	d6, [pc, #-684]	; 8002fe0 <IVK+0x14b8>
 800328c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003290:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8003294:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003298:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800329c:	ee26 7b07 	vmul.f64	d7, d6, d7
	            d_J_inv_tmp_tmp +
 80032a0:	ee38 8b07 	vadd.f64	d8, d8, d7
	       410.488 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80032a4:	f107 030c 	add.w	r3, r7, #12
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	3308      	adds	r3, #8
 80032ac:	ed93 6b00 	vldr	d6, [r3]
 80032b0:	f107 030c 	add.w	r3, r7, #12
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3310      	adds	r3, #16
 80032b8:	ed93 7b00 	vldr	d7, [r3]
 80032bc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80032c0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80032c4:	ed1f 6bc0 	vldr	d6, [pc, #-768]	; 8002fc8 <IVK+0x14a0>
 80032c8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80032cc:	ed1f 6bc0 	vldr	d6, [pc, #-768]	; 8002fd0 <IVK+0x14a8>
 80032d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80032d4:	ed1f 6bc8 	vldr	d6, [pc, #-800]	; 8002fb8 <IVK+0x1490>
 80032d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80032dc:	eeb0 0b47 	vmov.f64	d0, d7
 80032e0:	f014 f906 	bl	80174f0 <cos>
 80032e4:	eeb0 7b40 	vmov.f64	d7, d0
 80032e8:	ed1f 6bcb 	vldr	d6, [pc, #-812]	; 8002fc0 <IVK+0x1498>
 80032ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80032f0:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 80032f4:	ee26 6b07 	vmul.f64	d6, d6, d7
	           e_J_inv_tmp * d_J_inv_tmp_tmp) /
 80032f8:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80032fc:	ee26 7b07 	vmul.f64	d7, d6, d7
	        352.278 * cos(q[1] + 1.6845) * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 8003300:	ee38 7b07 	vadd.f64	d7, d8, d7
	      55.0 *
 8003304:	ed1f 6bc8 	vldr	d6, [pc, #-800]	; 8002fe8 <IVK+0x14c0>
 8003308:	ee27 5b06 	vmul.f64	d5, d7, d6
	           e_J_inv_tmp * d_J_inv_tmp_tmp) /
 800330c:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 8003310:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[17] =
 8003314:	f107 0310 	add.w	r3, r7, #16
 8003318:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
	      d12;
	  dv[22] = 55.0 *
	           ((410.488 * J_inv_tmp_tmp * e_J_inv_tmp +
 800331c:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8003320:	ed1f 6bd9 	vldr	d6, [pc, #-868]	; 8002fc0 <IVK+0x1498>
 8003324:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003328:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 800332c:	ee26 8b07 	vmul.f64	d8, d6, d7
	             60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp) +
 8003330:	f107 030c 	add.w	r3, r7, #12
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	3308      	adds	r3, #8
 8003338:	ed93 6b00 	vldr	d6, [r3]
 800333c:	f107 030c 	add.w	r3, r7, #12
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	3310      	adds	r3, #16
 8003344:	ed93 7b00 	vldr	d7, [r3]
 8003348:	ee36 7b07 	vadd.f64	d7, d6, d7
 800334c:	ed1f 6be2 	vldr	d6, [pc, #-904]	; 8002fc8 <IVK+0x14a0>
 8003350:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003354:	ed1f 6be2 	vldr	d6, [pc, #-904]	; 8002fd0 <IVK+0x14a8>
 8003358:	ee37 7b46 	vsub.f64	d7, d7, d6
 800335c:	eeb0 0b47 	vmov.f64	d0, d7
 8003360:	f014 f91a 	bl	8017598 <sin>
 8003364:	eeb0 7b40 	vmov.f64	d7, d0
 8003368:	ed1f 6be5 	vldr	d6, [pc, #-916]	; 8002fd8 <IVK+0x14b0>
 800336c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003370:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8003374:	ee26 7b07 	vmul.f64	d7, d6, d7
	           ((410.488 * J_inv_tmp_tmp * e_J_inv_tmp +
 8003378:	ee38 6b07 	vadd.f64	d6, d8, d7
	            352.278 * e_J_inv_tmp_tmp * e_J_inv_tmp) /
 800337c:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8003380:	ed1f 5be9 	vldr	d5, [pc, #-932]	; 8002fe0 <IVK+0x14b8>
 8003384:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003388:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 800338c:	ee25 7b07 	vmul.f64	d7, d5, d7
	             60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp) +
 8003390:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[22] = 55.0 *
 8003394:	ed1f 6bec 	vldr	d6, [pc, #-944]	; 8002fe8 <IVK+0x14c0>
 8003398:	ee27 5b06 	vmul.f64	d5, d7, d6
	            352.278 * e_J_inv_tmp_tmp * e_J_inv_tmp) /
 800339c:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 80033a0:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[22] = 55.0 *
 80033a4:	f107 0310 	add.w	r3, r7, #16
 80033a8:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
	           d12;
	  d9 = 21136.68 *
	       sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 80033ac:	f107 030c 	add.w	r3, r7, #12
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	3308      	adds	r3, #8
 80033b4:	ed93 6b00 	vldr	d6, [r3]
 80033b8:	f107 030c 	add.w	r3, r7, #12
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3310      	adds	r3, #16
 80033c0:	ed93 7b00 	vldr	d7, [r3]
 80033c4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80033c8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80033cc:	f107 030c 	add.w	r3, r7, #12
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3318      	adds	r3, #24
 80033d4:	ed93 7b00 	vldr	d7, [r3]
 80033d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80033dc:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 80037b8 <IVK+0x1c90>
 80033e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80033e4:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 80037c0 <IVK+0x1c98>
 80033e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80033ec:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 80037c8 <IVK+0x1ca0>
 80033f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80033f4:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 80037d0 <IVK+0x1ca8>
 80033f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80033fc:	eeb0 0b47 	vmov.f64	d0, d7
 8003400:	f014 f8ca 	bl	8017598 <sin>
 8003404:	eeb0 7b40 	vmov.f64	d7, d0
	  d9 = 21136.68 *
 8003408:	ed9f 6bf3 	vldr	d6, [pc, #972]	; 80037d8 <IVK+0x1cb0>
 800340c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003410:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
	           1.52205);
	  d10 = d9 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp_tmp;
 8003414:	f107 030c 	add.w	r3, r7, #12
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3308      	adds	r3, #8
 800341c:	ed93 6b00 	vldr	d6, [r3]
 8003420:	f107 030c 	add.w	r3, r7, #12
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3310      	adds	r3, #16
 8003428:	ed93 7b00 	vldr	d7, [r3]
 800342c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003430:	ed9f 6be1 	vldr	d6, [pc, #900]	; 80037b8 <IVK+0x1c90>
 8003434:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003438:	ed9f 6be1 	vldr	d6, [pc, #900]	; 80037c0 <IVK+0x1c98>
 800343c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003440:	eeb0 0b47 	vmov.f64	d0, d7
 8003444:	f014 f854 	bl	80174f0 <cos>
 8003448:	eeb0 6b40 	vmov.f64	d6, d0
 800344c:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8003450:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003454:	ed97 6b66 	vldr	d6, [r7, #408]	; 0x198
 8003458:	ee26 7b07 	vmul.f64	d7, d6, d7
 800345c:	ed87 7b4e 	vstr	d7, [r7, #312]	; 0x138
	  d9 = d9 * d2 * b_J_inv_tmp_tmp;
 8003460:	ed97 6b50 	vldr	d6, [r7, #320]	; 0x140
 8003464:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8003468:	ee26 7b07 	vmul.f64	d7, d6, d7
 800346c:	ed97 6b74 	vldr	d6, [r7, #464]	; 0x1d0
 8003470:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003474:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
	  d12 = 24629.28 *
	        sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 8003478:	f107 030c 	add.w	r3, r7, #12
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3308      	adds	r3, #8
 8003480:	ed93 6b00 	vldr	d6, [r3]
 8003484:	f107 030c 	add.w	r3, r7, #12
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3310      	adds	r3, #16
 800348c:	ed93 7b00 	vldr	d7, [r3]
 8003490:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003494:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003498:	f107 030c 	add.w	r3, r7, #12
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	3318      	adds	r3, #24
 80034a0:	ed93 7b00 	vldr	d7, [r3]
 80034a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80034a8:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 80037b8 <IVK+0x1c90>
 80034ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80034b0:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 80037c0 <IVK+0x1c98>
 80034b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80034b8:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 80037c8 <IVK+0x1ca0>
 80034bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80034c0:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 80037d0 <IVK+0x1ca8>
 80034c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80034c8:	eeb0 0b47 	vmov.f64	d0, d7
 80034cc:	f014 f864 	bl	8017598 <sin>
 80034d0:	eeb0 7b40 	vmov.f64	d7, d0
	  d12 = 24629.28 *
 80034d4:	ed9f 6bdc 	vldr	d6, [pc, #880]	; 8003848 <IVK+0x1d20>
 80034d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80034dc:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
	            1.52205);
	  d2 *= d12 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665);
 80034e0:	f107 030c 	add.w	r3, r7, #12
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3308      	adds	r3, #8
 80034e8:	ed93 6b00 	vldr	d6, [r3]
 80034ec:	f107 030c 	add.w	r3, r7, #12
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3310      	adds	r3, #16
 80034f4:	ed93 7b00 	vldr	d7, [r3]
 80034f8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80034fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003500:	ed9f 6bad 	vldr	d6, [pc, #692]	; 80037b8 <IVK+0x1c90>
 8003504:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003508:	ed9f 6bad 	vldr	d6, [pc, #692]	; 80037c0 <IVK+0x1c98>
 800350c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003510:	ed9f 6bad 	vldr	d6, [pc, #692]	; 80037c8 <IVK+0x1ca0>
 8003514:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003518:	eeb0 0b47 	vmov.f64	d0, d7
 800351c:	f013 ffe8 	bl	80174f0 <cos>
 8003520:	eeb0 6b40 	vmov.f64	d6, d0
 8003524:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 8003528:	ee26 7b07 	vmul.f64	d7, d6, d7
 800352c:	ed97 6b5e 	vldr	d6, [r7, #376]	; 0x178
 8003530:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003534:	ed87 7b5e 	vstr	d7, [r7, #376]	; 0x178
	  d12 = d12 * J_inv_tmp_tmp * cos(((q[1] + q[2]) + 1.6845) + -0.8995);
 8003538:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 800353c:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8003540:	ee26 8b07 	vmul.f64	d8, d6, d7
 8003544:	f107 030c 	add.w	r3, r7, #12
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3308      	adds	r3, #8
 800354c:	ed93 6b00 	vldr	d6, [r3]
 8003550:	f107 030c 	add.w	r3, r7, #12
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3310      	adds	r3, #16
 8003558:	ed93 7b00 	vldr	d7, [r3]
 800355c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003560:	ed9f 6b95 	vldr	d6, [pc, #596]	; 80037b8 <IVK+0x1c90>
 8003564:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003568:	ed9f 6b95 	vldr	d6, [pc, #596]	; 80037c0 <IVK+0x1c98>
 800356c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003570:	eeb0 0b47 	vmov.f64	d0, d7
 8003574:	f013 ffbc 	bl	80174f0 <cos>
 8003578:	eeb0 7b40 	vmov.f64	d7, d0
 800357c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8003580:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
	  e_J_inv_tmp =
	      289211.783328 *
	      sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 8003584:	f107 030c 	add.w	r3, r7, #12
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3308      	adds	r3, #8
 800358c:	ed93 6b00 	vldr	d6, [r3]
 8003590:	f107 030c 	add.w	r3, r7, #12
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3310      	adds	r3, #16
 8003598:	ed93 7b00 	vldr	d7, [r3]
 800359c:	ee37 7b07 	vadd.f64	d7, d7, d7
 80035a0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80035a4:	f107 030c 	add.w	r3, r7, #12
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	3318      	adds	r3, #24
 80035ac:	ed93 7b00 	vldr	d7, [r3]
 80035b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80035b4:	ed9f 6b80 	vldr	d6, [pc, #512]	; 80037b8 <IVK+0x1c90>
 80035b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80035bc:	ed9f 6b80 	vldr	d6, [pc, #512]	; 80037c0 <IVK+0x1c98>
 80035c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80035c4:	ed9f 6b80 	vldr	d6, [pc, #512]	; 80037c8 <IVK+0x1ca0>
 80035c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80035cc:	ed9f 6b80 	vldr	d6, [pc, #512]	; 80037d0 <IVK+0x1ca8>
 80035d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80035d4:	eeb0 0b47 	vmov.f64	d0, d7
 80035d8:	f013 ffde 	bl	8017598 <sin>
 80035dc:	eeb0 7b40 	vmov.f64	d7, d0
	  e_J_inv_tmp =
 80035e0:	ed9f 6b9b 	vldr	d6, [pc, #620]	; 8003850 <IVK+0x1d28>
 80035e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80035e8:	ed87 7b62 	vstr	d7, [r7, #392]	; 0x188
	          1.52205);
	  d13 = e_J_inv_tmp *
	        cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80035ec:	f107 030c 	add.w	r3, r7, #12
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	3308      	adds	r3, #8
 80035f4:	ed93 6b00 	vldr	d6, [r3]
 80035f8:	f107 030c 	add.w	r3, r7, #12
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	3310      	adds	r3, #16
 8003600:	ed93 7b00 	vldr	d7, [r3]
 8003604:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003608:	ee36 7b07 	vadd.f64	d7, d6, d7
 800360c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80037b8 <IVK+0x1c90>
 8003610:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003614:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80037c0 <IVK+0x1c98>
 8003618:	ee37 7b46 	vsub.f64	d7, d7, d6
 800361c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80037c8 <IVK+0x1ca0>
 8003620:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003624:	eeb0 0b47 	vmov.f64	d0, d7
 8003628:	f013 ff62 	bl	80174f0 <cos>
 800362c:	eeb0 6b40 	vmov.f64	d6, d0
	  d13 = e_J_inv_tmp *
 8003630:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8003634:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003638:	ed97 6b66 	vldr	d6, [r7, #408]	; 0x198
 800363c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003640:	ed87 7b48 	vstr	d7, [r7, #288]	; 0x120
	        e_J_inv_tmp_tmp;
	  e_J_inv_tmp = e_J_inv_tmp * J_inv_tmp_tmp * b_J_inv_tmp_tmp;
 8003644:	ed97 6b62 	vldr	d6, [r7, #392]	; 0x188
 8003648:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 800364c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003650:	ed97 6b74 	vldr	d6, [r7, #464]	; 0x1d0
 8003654:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003658:	ed87 7b62 	vstr	d7, [r7, #392]	; 0x188
	  d14 = c_J_inv_tmp_tmp * c_J_inv_tmp_tmp;
 800365c:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8003660:	ee27 7b07 	vmul.f64	d7, d7, d7
 8003664:	ed87 7b46 	vstr	d7, [r7, #280]	; 0x118
	  d15 = 87600.0 * d14 * d_J_inv_tmp;
 8003668:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 800366c:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 80037e0 <IVK+0x1cb8>
 8003670:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003674:	ed97 6b68 	vldr	d6, [r7, #416]	; 0x1a0
 8003678:	ee26 7b07 	vmul.f64	d7, d6, d7
 800367c:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
	  d14 = 1.02865176E+6 * d14 * e_J_inv_tmp_tmp;
 8003680:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 8003684:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 8003800 <IVK+0x1cd8>
 8003688:	ee27 7b06 	vmul.f64	d7, d7, d6
 800368c:	ed97 6b66 	vldr	d6, [r7, #408]	; 0x198
 8003690:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003694:	ed87 7b46 	vstr	d7, [r7, #280]	; 0x118
	  d16 = d15 * d_J_inv_tmp_tmp;
 8003698:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 800369c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80036a0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80036a4:	ed87 7b42 	vstr	d7, [r7, #264]	; 0x108
	  d17 = d14 * d_J_inv_tmp_tmp;
 80036a8:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 80036ac:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80036b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80036b4:	ed87 7b40 	vstr	d7, [r7, #256]	; 0x100
	  dv[3] =
	      4.0 *
	      (((((((((((((((221663.52 * J_inv_tmp * d_J_inv_tmp * f_J_inv_tmp_tmp -
 80036b8:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 80036bc:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80037e8 <IVK+0x1cc0>
 80036c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80036c4:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 80036c8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80036cc:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80036d0:	ee26 6b07 	vmul.f64	d6, d6, d7
	                     221663.52 * J_inv_tmp_tmp * c_J_inv_tmp *
 80036d4:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80036d8:	ed9f 5b43 	vldr	d5, [pc, #268]	; 80037e8 <IVK+0x1cc0>
 80036dc:	ee27 5b05 	vmul.f64	d5, d7, d5
 80036e0:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80036e4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80036e8:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80036ec:	ee25 7b07 	vmul.f64	d7, d5, d7
	      (((((((((((((((221663.52 * J_inv_tmp * d_J_inv_tmp * f_J_inv_tmp_tmp -
 80036f0:	ee36 6b47 	vsub.f64	d6, d6, d7
	                         f_J_inv_tmp_tmp) +
	                    2.6029060499520004E+6 * J_inv_tmp * e_J_inv_tmp_tmp *
 80036f4:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 80036f8:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 80037f0 <IVK+0x1cc8>
 80036fc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003700:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8003704:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003708:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800370c:	ee25 7b07 	vmul.f64	d7, d5, d7
	                         f_J_inv_tmp_tmp) +
 8003710:	ee36 6b07 	vadd.f64	d6, d6, d7
	                        f_J_inv_tmp_tmp) -
	                   2.6029060499520004E+6 * J_inv_tmp_tmp * b_J_inv_tmp_tmp *
 8003714:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8003718:	ed9f 5b35 	vldr	d5, [pc, #212]	; 80037f0 <IVK+0x1cc8>
 800371c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003720:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8003724:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003728:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800372c:	ee25 7b07 	vmul.f64	d7, d5, d7
	                        f_J_inv_tmp_tmp) -
 8003730:	ee36 6b47 	vsub.f64	d6, d6, d7
	                       f_J_inv_tmp_tmp) +
	                  190230.12000000002 * c_J_inv_tmp * e_J_inv_tmp_tmp *
 8003734:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8003738:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 80037f8 <IVK+0x1cd0>
 800373c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003740:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8003744:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003748:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800374c:	ee25 7b07 	vmul.f64	d7, d5, d7
	                       f_J_inv_tmp_tmp) +
 8003750:	ee36 6b07 	vadd.f64	d6, d6, d7
	                      f_J_inv_tmp_tmp) -
	                 190230.12000000002 * d_J_inv_tmp * b_J_inv_tmp_tmp *
 8003754:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8003758:	ed9f 5b27 	vldr	d5, [pc, #156]	; 80037f8 <IVK+0x1cd0>
 800375c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003760:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8003764:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003768:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800376c:	ee25 7b07 	vmul.f64	d7, d5, d7
	                      f_J_inv_tmp_tmp) -
 8003770:	ee36 6b47 	vsub.f64	d6, d6, d7
	                     f_J_inv_tmp_tmp) +
 8003774:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 8003778:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d16) +
 800377c:	ed97 7b40 	vldr	d7, [r7, #256]	; 0x100
 8003780:	ee36 6b07 	vadd.f64	d6, d6, d7
	               d17) +
	              87600.0 * b_J_inv_tmp * c_J_inv_tmp_tmp * c_J_inv_tmp *
 8003784:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8003788:	ed9f 5b15 	vldr	d5, [pc, #84]	; 80037e0 <IVK+0x1cb8>
 800378c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003790:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8003794:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003798:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 800379c:	ee25 5b07 	vmul.f64	d5, d5, d7
 80037a0:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80037a4:	ee25 7b07 	vmul.f64	d7, d5, d7
	               d17) +
 80037a8:	ee36 6b07 	vadd.f64	d6, d6, d7
	                  d_J_inv_tmp_tmp) +
	             1.02865176E+6 * b_J_inv_tmp * c_J_inv_tmp_tmp * b_J_inv_tmp_tmp *
 80037ac:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80037b0:	e052      	b.n	8003858 <IVK+0x1d30>
 80037b2:	bf00      	nop
 80037b4:	f3af 8000 	nop.w
 80037b8:	45a1cac1 	.word	0x45a1cac1
 80037bc:	3ffaf3b6 	.word	0x3ffaf3b6
 80037c0:	39581062 	.word	0x39581062
 80037c4:	3fecc8b4 	.word	0x3fecc8b4
 80037c8:	05532618 	.word	0x05532618
 80037cc:	3fe792a3 	.word	0x3fe792a3
 80037d0:	19ce075f 	.word	0x19ce075f
 80037d4:	3ff85a51 	.word	0x3ff85a51
 80037d8:	851eb852 	.word	0x851eb852
 80037dc:	40d4a42b 	.word	0x40d4a42b
 80037e0:	00000000 	.word	0x00000000
 80037e4:	40f56300 	.word	0x40f56300
 80037e8:	28f5c28f 	.word	0x28f5c28f
 80037ec:	410b0efc 	.word	0x410b0efc
 80037f0:	0664d3c0 	.word	0x0664d3c0
 80037f4:	4143dbcd 	.word	0x4143dbcd
 80037f8:	f5c28f5d 	.word	0xf5c28f5d
 80037fc:	410738b0 	.word	0x410738b0
 8003800:	851eb852 	.word	0x851eb852
 8003804:	412f6457 	.word	0x412f6457
 8003808:	66666666 	.word	0x66666666
 800380c:	410e10a6 	.word	0x410e10a6
 8003810:	eaa8eb47 	.word	0xeaa8eb47
 8003814:	414610aa 	.word	0x414610aa
 8003818:	66666667 	.word	0x66666667
 800381c:	4109cd36 	.word	0x4109cd36
 8003820:	851eb852 	.word	0x851eb852
 8003824:	40d4a42b 	.word	0x40d4a42b
 8003828:	45a1cac1 	.word	0x45a1cac1
 800382c:	3ffaf3b6 	.word	0x3ffaf3b6
 8003830:	39581062 	.word	0x39581062
 8003834:	3fecc8b4 	.word	0x3fecc8b4
 8003838:	19ce075f 	.word	0x19ce075f
 800383c:	3ff85a51 	.word	0x3ff85a51
 8003840:	05532618 	.word	0x05532618
 8003844:	3fe792a3 	.word	0x3fe792a3
 8003848:	eb851eb8 	.word	0xeb851eb8
 800384c:	40d80d51 	.word	0x40d80d51
 8003850:	2220bc38 	.word	0x2220bc38
 8003854:	4111a6ef 	.word	0x4111a6ef
 8003858:	ed1f 5b17 	vldr	d5, [pc, #-92]	; 8003800 <IVK+0x1cd8>
 800385c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003860:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8003864:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003868:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 800386c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003870:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003874:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  d_J_inv_tmp_tmp) +
 8003878:	ee36 6b07 	vadd.f64	d6, d6, d7
	                 d_J_inv_tmp_tmp) +
	            246292.8 * c_J_inv_tmp_tmp * J_inv_tmp * d_J_inv_tmp *
 800387c:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8003880:	ed1f 5b1f 	vldr	d5, [pc, #-124]	; 8003808 <IVK+0x1ce0>
 8003884:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003888:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 800388c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003890:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8003894:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003898:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800389c:	ee25 7b07 	vmul.f64	d7, d5, d7
	                 d_J_inv_tmp_tmp) +
 80038a0:	ee36 8b07 	vadd.f64	d8, d6, d7
	                d_J_inv_tmp_tmp) -
	           246292.8 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80038a4:	f107 030c 	add.w	r3, r7, #12
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3308      	adds	r3, #8
 80038ac:	ed93 6b00 	vldr	d6, [r3]
 80038b0:	f107 030c 	add.w	r3, r7, #12
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3310      	adds	r3, #16
 80038b8:	ed93 7b00 	vldr	d7, [r3]
 80038bc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80038c0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80038c4:	f107 030c 	add.w	r3, r7, #12
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	3318      	adds	r3, #24
 80038cc:	ed93 7b00 	vldr	d7, [r3]
 80038d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80038d4:	ed1f 6b2c 	vldr	d6, [pc, #-176]	; 8003828 <IVK+0x1d00>
 80038d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80038dc:	ed1f 6b2c 	vldr	d6, [pc, #-176]	; 8003830 <IVK+0x1d08>
 80038e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80038e4:	ed1f 6b2a 	vldr	d6, [pc, #-168]	; 8003840 <IVK+0x1d18>
 80038e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80038ec:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 8003838 <IVK+0x1d10>
 80038f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80038f4:	eeb0 0b47 	vmov.f64	d0, d7
 80038f8:	f013 fe4e 	bl	8017598 <sin>
 80038fc:	eeb0 7b40 	vmov.f64	d7, d0
	           246292.8 *
 8003900:	ed1f 6b3f 	vldr	d6, [pc, #-252]	; 8003808 <IVK+0x1ce0>
 8003904:	ee27 6b06 	vmul.f64	d6, d7, d6
	                    -0.73665) +
	                   1.52205) *
 8003908:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 800390c:	ee26 6b07 	vmul.f64	d6, d6, d7
	               J_inv_tmp_tmp * c_J_inv_tmp * d_J_inv_tmp_tmp) +
 8003910:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8003914:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003918:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800391c:	ee26 7b07 	vmul.f64	d7, d6, d7
	                d_J_inv_tmp_tmp) -
 8003920:	ee38 6b47 	vsub.f64	d6, d8, d7
	          2.8921178332800004E+6 * c_J_inv_tmp_tmp * J_inv_tmp *
 8003924:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8003928:	ed1f 5b47 	vldr	d5, [pc, #-284]	; 8003810 <IVK+0x1ce8>
 800392c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003930:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8003934:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003938:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 800393c:	ee25 5b07 	vmul.f64	d5, d5, d7
	              e_J_inv_tmp_tmp * d_J_inv_tmp_tmp) -
 8003940:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003944:	ee25 7b07 	vmul.f64	d7, d5, d7
	               J_inv_tmp_tmp * c_J_inv_tmp * d_J_inv_tmp_tmp) +
 8003948:	ee36 8b07 	vadd.f64	d8, d6, d7
	         2.8921178332800004E+6 *
	             sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800394c:	f107 030c 	add.w	r3, r7, #12
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3308      	adds	r3, #8
 8003954:	ed93 6b00 	vldr	d6, [r3]
 8003958:	f107 030c 	add.w	r3, r7, #12
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3310      	adds	r3, #16
 8003960:	ed93 7b00 	vldr	d7, [r3]
 8003964:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003968:	ee36 6b07 	vadd.f64	d6, d6, d7
 800396c:	f107 030c 	add.w	r3, r7, #12
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	3318      	adds	r3, #24
 8003974:	ed93 7b00 	vldr	d7, [r3]
 8003978:	ee36 7b07 	vadd.f64	d7, d6, d7
 800397c:	ed1f 6b56 	vldr	d6, [pc, #-344]	; 8003828 <IVK+0x1d00>
 8003980:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003984:	ed1f 6b56 	vldr	d6, [pc, #-344]	; 8003830 <IVK+0x1d08>
 8003988:	ee37 7b46 	vsub.f64	d7, d7, d6
 800398c:	ed1f 6b54 	vldr	d6, [pc, #-336]	; 8003840 <IVK+0x1d18>
 8003990:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003994:	ed1f 6b58 	vldr	d6, [pc, #-352]	; 8003838 <IVK+0x1d10>
 8003998:	ee37 7b06 	vadd.f64	d7, d7, d6
 800399c:	eeb0 0b47 	vmov.f64	d0, d7
 80039a0:	f013 fdfa 	bl	8017598 <sin>
 80039a4:	eeb0 7b40 	vmov.f64	d7, d0
	         2.8921178332800004E+6 *
 80039a8:	ed1f 6b67 	vldr	d6, [pc, #-412]	; 8003810 <IVK+0x1ce8>
 80039ac:	ee27 6b06 	vmul.f64	d6, d7, d6
	                  -0.73665) +
	                 1.52205) *
 80039b0:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80039b4:	ee26 6b07 	vmul.f64	d6, d6, d7
	             J_inv_tmp_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 80039b8:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 80039bc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80039c0:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80039c4:	ee26 7b07 	vmul.f64	d7, d6, d7
	              e_J_inv_tmp_tmp * d_J_inv_tmp_tmp) -
 80039c8:	ee38 6b47 	vsub.f64	d6, d8, d7
	        211366.80000000002 * c_J_inv_tmp_tmp * c_J_inv_tmp * e_J_inv_tmp_tmp *
 80039cc:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 80039d0:	ed1f 5b6f 	vldr	d5, [pc, #-444]	; 8003818 <IVK+0x1cf0>
 80039d4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80039d8:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80039dc:	ee25 5b07 	vmul.f64	d5, d5, d7
 80039e0:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 80039e4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80039e8:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80039ec:	ee25 7b07 	vmul.f64	d7, d5, d7
	             J_inv_tmp_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 80039f0:	ee36 8b07 	vadd.f64	d8, d6, d7
	            d_J_inv_tmp_tmp) -
	       211366.80000000002 *
	           sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80039f4:	f107 030c 	add.w	r3, r7, #12
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3308      	adds	r3, #8
 80039fc:	ed93 6b00 	vldr	d6, [r3]
 8003a00:	f107 030c 	add.w	r3, r7, #12
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3310      	adds	r3, #16
 8003a08:	ed93 7b00 	vldr	d7, [r3]
 8003a0c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003a10:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003a14:	f107 030c 	add.w	r3, r7, #12
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	3318      	adds	r3, #24
 8003a1c:	ed93 7b00 	vldr	d7, [r3]
 8003a20:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a24:	ed1f 6b80 	vldr	d6, [pc, #-512]	; 8003828 <IVK+0x1d00>
 8003a28:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a2c:	ed1f 6b80 	vldr	d6, [pc, #-512]	; 8003830 <IVK+0x1d08>
 8003a30:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003a34:	ed1f 6b7e 	vldr	d6, [pc, #-504]	; 8003840 <IVK+0x1d18>
 8003a38:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003a3c:	ed1f 6b82 	vldr	d6, [pc, #-520]	; 8003838 <IVK+0x1d10>
 8003a40:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a44:	eeb0 0b47 	vmov.f64	d0, d7
 8003a48:	f013 fda6 	bl	8017598 <sin>
 8003a4c:	eeb0 7b40 	vmov.f64	d7, d0
	       211366.80000000002 *
 8003a50:	ed1f 6b8f 	vldr	d6, [pc, #-572]	; 8003818 <IVK+0x1cf0>
 8003a54:	ee27 6b06 	vmul.f64	d6, d7, d6
	                -0.73665) +
	               1.52205) *
 8003a58:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8003a5c:	ee26 6b07 	vmul.f64	d6, d6, d7
	           d_J_inv_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) /
 8003a60:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8003a64:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003a68:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003a6c:	ee26 7b07 	vmul.f64	d7, d6, d7
	            d_J_inv_tmp_tmp) -
 8003a70:	ee38 7b47 	vsub.f64	d7, d8, d7
	      4.0 *
 8003a74:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8003a78:	ee27 8b06 	vmul.f64	d8, d7, d6
	      (9.0 *
	       (((((((((((21136.68 * c_J_inv_tmp_tmp * c_J_inv_tmp * e_J_inv_tmp_tmp *
 8003a7c:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8003a80:	ed1f 6b99 	vldr	d6, [pc, #-612]	; 8003820 <IVK+0x1cf8>
 8003a84:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003a88:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8003a8c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003a90:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8003a94:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003a98:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8003a9c:	ee26 9b07 	vmul.f64	d9, d6, d7
	                      d -
	                  21136.68 *
	                      sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8003aa0:	f107 030c 	add.w	r3, r7, #12
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3308      	adds	r3, #8
 8003aa8:	ed93 6b00 	vldr	d6, [r3]
 8003aac:	f107 030c 	add.w	r3, r7, #12
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3310      	adds	r3, #16
 8003ab4:	ed93 7b00 	vldr	d7, [r3]
 8003ab8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003abc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003ac0:	f107 030c 	add.w	r3, r7, #12
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	3318      	adds	r3, #24
 8003ac8:	ed93 7b00 	vldr	d7, [r3]
 8003acc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003ad0:	ed1f 6bab 	vldr	d6, [pc, #-684]	; 8003828 <IVK+0x1d00>
 8003ad4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003ad8:	ed1f 6bab 	vldr	d6, [pc, #-684]	; 8003830 <IVK+0x1d08>
 8003adc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ae0:	ed1f 6ba9 	vldr	d6, [pc, #-676]	; 8003840 <IVK+0x1d18>
 8003ae4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ae8:	ed1f 6bad 	vldr	d6, [pc, #-692]	; 8003838 <IVK+0x1d10>
 8003aec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003af0:	eeb0 0b47 	vmov.f64	d0, d7
 8003af4:	f013 fd50 	bl	8017598 <sin>
 8003af8:	eeb0 7b40 	vmov.f64	d7, d0
	                  21136.68 *
 8003afc:	ed1f 6bb8 	vldr	d6, [pc, #-736]	; 8003820 <IVK+0x1cf8>
 8003b00:	ee27 6b06 	vmul.f64	d6, d7, d6
	                           -0.73665) +
	                          1.52205) *
 8003b04:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8003b08:	ee26 6b07 	vmul.f64	d6, d6, d7
	                      d_J_inv_tmp * b_J_inv_tmp_tmp * d) +
 8003b0c:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8003b10:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003b14:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8003b18:	ee26 7b07 	vmul.f64	d7, d6, d7
	                      d -
 8003b1c:	ee39 6b47 	vsub.f64	d6, d9, d7
	                 d10 * d1) -
 8003b20:	ed97 5b4e 	vldr	d5, [r7, #312]	; 0x138
 8003b24:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003b28:	ee25 7b07 	vmul.f64	d7, d5, d7
	                      d_J_inv_tmp * b_J_inv_tmp_tmp * d) +
 8003b2c:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d9 * d1) +
 8003b30:	ed97 5b50 	vldr	d5, [r7, #320]	; 0x140
 8003b34:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003b38:	ee25 7b07 	vmul.f64	d7, d5, d7
	                 d10 * d1) -
 8003b3c:	ee36 6b47 	vsub.f64	d6, d6, d7
	               24629.28 * c_J_inv_tmp_tmp * J_inv_tmp * d_J_inv_tmp * d) -
 8003b40:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8003b44:	ed1f 5bc0 	vldr	d5, [pc, #-768]	; 8003848 <IVK+0x1d20>
 8003b48:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003b4c:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8003b50:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003b54:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8003b58:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003b5c:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8003b60:	ee25 7b07 	vmul.f64	d7, d5, d7
	                d9 * d1) +
 8003b64:	ee36 9b07 	vadd.f64	d9, d6, d7
	              24629.28 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8003b68:	f107 030c 	add.w	r3, r7, #12
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3308      	adds	r3, #8
 8003b70:	ed93 6b00 	vldr	d6, [r3]
 8003b74:	f107 030c 	add.w	r3, r7, #12
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	3310      	adds	r3, #16
 8003b7c:	ed93 7b00 	vldr	d7, [r3]
 8003b80:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003b84:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003b88:	f107 030c 	add.w	r3, r7, #12
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3318      	adds	r3, #24
 8003b90:	ed93 7b00 	vldr	d7, [r3]
 8003b94:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b98:	ed1f 6bdd 	vldr	d6, [pc, #-884]	; 8003828 <IVK+0x1d00>
 8003b9c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003ba0:	ed1f 6bdd 	vldr	d6, [pc, #-884]	; 8003830 <IVK+0x1d08>
 8003ba4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ba8:	ed1f 6bdb 	vldr	d6, [pc, #-876]	; 8003840 <IVK+0x1d18>
 8003bac:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003bb0:	ed1f 6bdf 	vldr	d6, [pc, #-892]	; 8003838 <IVK+0x1d10>
 8003bb4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003bb8:	eeb0 0b47 	vmov.f64	d0, d7
 8003bbc:	f013 fcec 	bl	8017598 <sin>
 8003bc0:	eeb0 7b40 	vmov.f64	d7, d0
	              24629.28 *
 8003bc4:	ed1f 6be0 	vldr	d6, [pc, #-896]	; 8003848 <IVK+0x1d20>
 8003bc8:	ee27 6b06 	vmul.f64	d6, d7, d6
	                       -0.73665) +
	                      1.52205) *
 8003bcc:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8003bd0:	ee26 6b07 	vmul.f64	d6, d6, d7
	                  J_inv_tmp_tmp * c_J_inv_tmp * d) +
 8003bd4:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8003bd8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003bdc:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8003be0:	ee26 7b07 	vmul.f64	d7, d6, d7
	               24629.28 * c_J_inv_tmp_tmp * J_inv_tmp * d_J_inv_tmp * d) -
 8003be4:	ee39 6b47 	vsub.f64	d6, d9, d7
	             d2 * d1) -
 8003be8:	ed97 5b5e 	vldr	d5, [r7, #376]	; 0x178
 8003bec:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003bf0:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  J_inv_tmp_tmp * c_J_inv_tmp * d) +
 8003bf4:	ee36 6b07 	vadd.f64	d6, d6, d7
	            d12 * d1) +
 8003bf8:	ed97 5b4a 	vldr	d5, [r7, #296]	; 0x128
 8003bfc:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003c00:	ee25 7b07 	vmul.f64	d7, d5, d7
	             d2 * d1) -
 8003c04:	ee36 6b47 	vsub.f64	d6, d6, d7
	           289211.783328 * c_J_inv_tmp_tmp * J_inv_tmp * e_J_inv_tmp_tmp * d) -
 8003c08:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8003c0c:	ed1f 5bf0 	vldr	d5, [pc, #-960]	; 8003850 <IVK+0x1d28>
 8003c10:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003c14:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8003c18:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003c1c:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8003c20:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003c24:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8003c28:	ee25 7b07 	vmul.f64	d7, d5, d7
	            d12 * d1) +
 8003c2c:	ee36 6b07 	vadd.f64	d6, d6, d7
	          e_J_inv_tmp * d) +
 8003c30:	ed97 5b62 	vldr	d5, [r7, #392]	; 0x188
 8003c34:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8003c38:	ee25 7b07 	vmul.f64	d7, d5, d7
	           289211.783328 * c_J_inv_tmp_tmp * J_inv_tmp * e_J_inv_tmp_tmp * d) -
 8003c3c:	ee36 6b47 	vsub.f64	d6, d6, d7
	         d13 * d1) -
 8003c40:	ed97 5b48 	vldr	d5, [r7, #288]	; 0x120
 8003c44:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003c48:	ee25 7b07 	vmul.f64	d7, d5, d7
	          e_J_inv_tmp * d) +
 8003c4c:	ee36 6b07 	vadd.f64	d6, d6, d7
	        e_J_inv_tmp * d1));
 8003c50:	ed97 5b62 	vldr	d5, [r7, #392]	; 0x188
 8003c54:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003c58:	ee25 7b07 	vmul.f64	d7, d5, d7
	         d13 * d1) -
 8003c5c:	ee36 7b47 	vsub.f64	d7, d6, d7
	      (9.0 *
 8003c60:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8003c64:	ee27 6b06 	vmul.f64	d6, d7, d6
	           d_J_inv_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) /
 8003c68:	ee88 7b06 	vdiv.f64	d7, d8, d6
	  dv[3] =
 8003c6c:	f107 0310 	add.w	r3, r7, #16
 8003c70:	ed83 7b06 	vstr	d7, [r3, #24]
	  d = 9.0 * (((((((((((d10 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8003c74:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003c78:	ee27 6b07 	vmul.f64	d6, d7, d7
 8003c7c:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8003c80:	ee26 6b07 	vmul.f64	d6, d6, d7
	                       d9 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003c84:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003c88:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003c8c:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8003c90:	ee25 7b07 	vmul.f64	d7, d5, d7
	  d = 9.0 * (((((((((((d10 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8003c94:	ee36 6b47 	vsub.f64	d6, d6, d7
	                      d10 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003c98:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003c9c:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003ca0:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8003ca4:	ee25 7b07 	vmul.f64	d7, d5, d7
	                       d9 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003ca8:	ee36 6b07 	vadd.f64	d6, d6, d7
	                     d9 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8003cac:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003cb0:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003cb4:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8003cb8:	ee25 7b07 	vmul.f64	d7, d5, d7
	                      d10 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003cbc:	ee36 6b47 	vsub.f64	d6, d6, d7
	                    d2 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8003cc0:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003cc4:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003cc8:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8003ccc:	ee25 7b07 	vmul.f64	d7, d5, d7
	                     d9 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8003cd0:	ee36 6b07 	vadd.f64	d6, d6, d7
	                   d12 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003cd4:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003cd8:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003cdc:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 8003ce0:	ee25 7b07 	vmul.f64	d7, d5, d7
	                    d2 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8003ce4:	ee36 6b47 	vsub.f64	d6, d6, d7
	                  d2 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003ce8:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003cec:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003cf0:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8003cf4:	ee25 7b07 	vmul.f64	d7, d5, d7
	                   d12 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003cf8:	ee36 6b07 	vadd.f64	d6, d6, d7
	                 d12 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8003cfc:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003d00:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003d04:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 8003d08:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  d2 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003d0c:	ee36 6b47 	vsub.f64	d6, d6, d7
	                d13 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8003d10:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003d14:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003d18:	ed97 7b48 	vldr	d7, [r7, #288]	; 0x120
 8003d1c:	ee25 7b07 	vmul.f64	d7, d5, d7
	                 d12 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8003d20:	ee36 6b07 	vadd.f64	d6, d6, d7
	               e_J_inv_tmp * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003d24:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003d28:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003d2c:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8003d30:	ee25 7b07 	vmul.f64	d7, d5, d7
	                d13 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8003d34:	ee36 6b47 	vsub.f64	d6, d6, d7
	              d13 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003d38:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003d3c:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003d40:	ed97 7b48 	vldr	d7, [r7, #288]	; 0x120
 8003d44:	ee25 7b07 	vmul.f64	d7, d5, d7
	               e_J_inv_tmp * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003d48:	ee36 6b07 	vadd.f64	d6, d6, d7
	             e_J_inv_tmp * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp));
 8003d4c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003d50:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003d54:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8003d58:	ee25 7b07 	vmul.f64	d7, d5, d7
	              d13 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003d5c:	ee36 7b47 	vsub.f64	d7, d6, d7
	  d = 9.0 * (((((((((((d10 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8003d60:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8003d64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003d68:	ed87 7b7a 	vstr	d7, [r7, #488]	; 0x1e8
	  d1 = d15 * f_J_inv_tmp_tmp;
 8003d6c:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 8003d70:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003d74:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003d78:	ed87 7b60 	vstr	d7, [r7, #384]	; 0x180
	  d2 = d14 * f_J_inv_tmp_tmp;
 8003d7c:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 8003d80:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003d84:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003d88:	ed87 7b5e 	vstr	d7, [r7, #376]	; 0x178
	  dv[8] =
	      -(4.0 *
	        (((((((((((((((221663.52 *
	                           sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8003d8c:	f107 030c 	add.w	r3, r7, #12
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3308      	adds	r3, #8
 8003d94:	ed93 6b00 	vldr	d6, [r3]
 8003d98:	f107 030c 	add.w	r3, r7, #12
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3310      	adds	r3, #16
 8003da0:	ed93 7b00 	vldr	d7, [r3]
 8003da4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003da8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003dac:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8004170 <IVK+0x2648>
 8003db0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003db4:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8004178 <IVK+0x2650>
 8003db8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003dbc:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8004180 <IVK+0x2658>
 8003dc0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003dc4:	eeb0 0b47 	vmov.f64	d0, d7
 8003dc8:	f013 fbe6 	bl	8017598 <sin>
 8003dcc:	eeb0 7b40 	vmov.f64	d7, d0
	        (((((((((((((((221663.52 *
 8003dd0:	ed9f 6bed 	vldr	d6, [pc, #948]	; 8004188 <IVK+0x2660>
 8003dd4:	ee27 8b06 	vmul.f64	d8, d7, d6
	                               -0.73665) *
	                           cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003dd8:	f107 030c 	add.w	r3, r7, #12
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	3308      	adds	r3, #8
 8003de0:	ed93 6b00 	vldr	d6, [r3]
 8003de4:	f107 030c 	add.w	r3, r7, #12
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3310      	adds	r3, #16
 8003dec:	ed93 7b00 	vldr	d7, [r3]
 8003df0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003df4:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8004170 <IVK+0x2648>
 8003df8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003dfc:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8004178 <IVK+0x2650>
 8003e00:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003e04:	eeb0 0b47 	vmov.f64	d0, d7
 8003e08:	f013 fb72 	bl	80174f0 <cos>
 8003e0c:	eeb0 7b40 	vmov.f64	d7, d0
	                               -0.73665) *
 8003e10:	ee28 6b07 	vmul.f64	d6, d8, d7
	                           cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003e14:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003e18:	ee26 8b07 	vmul.f64	d8, d6, d7
	                           d_J_inv_tmp_tmp -
	                       221663.52 *
	                           cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8003e1c:	f107 030c 	add.w	r3, r7, #12
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3308      	adds	r3, #8
 8003e24:	ed93 6b00 	vldr	d6, [r3]
 8003e28:	f107 030c 	add.w	r3, r7, #12
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3310      	adds	r3, #16
 8003e30:	ed93 7b00 	vldr	d7, [r3]
 8003e34:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003e38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e3c:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 8004170 <IVK+0x2648>
 8003e40:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e44:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 8004178 <IVK+0x2650>
 8003e48:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003e4c:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 8004180 <IVK+0x2658>
 8003e50:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003e54:	eeb0 0b47 	vmov.f64	d0, d7
 8003e58:	f013 fb4a 	bl	80174f0 <cos>
 8003e5c:	eeb0 7b40 	vmov.f64	d7, d0
	                       221663.52 *
 8003e60:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8004188 <IVK+0x2660>
 8003e64:	ee27 9b06 	vmul.f64	d9, d7, d6
	                               -0.73665) *
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003e68:	f107 030c 	add.w	r3, r7, #12
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3308      	adds	r3, #8
 8003e70:	ed93 6b00 	vldr	d6, [r3]
 8003e74:	f107 030c 	add.w	r3, r7, #12
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	3310      	adds	r3, #16
 8003e7c:	ed93 7b00 	vldr	d7, [r3]
 8003e80:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e84:	ed9f 6bba 	vldr	d6, [pc, #744]	; 8004170 <IVK+0x2648>
 8003e88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e8c:	ed9f 6bba 	vldr	d6, [pc, #744]	; 8004178 <IVK+0x2650>
 8003e90:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003e94:	eeb0 0b47 	vmov.f64	d0, d7
 8003e98:	f013 fb7e 	bl	8017598 <sin>
 8003e9c:	eeb0 7b40 	vmov.f64	d7, d0
	                               -0.73665) *
 8003ea0:	ee29 6b07 	vmul.f64	d6, d9, d7
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003ea4:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003ea8:	ee26 7b07 	vmul.f64	d7, d6, d7
	                           d_J_inv_tmp_tmp -
 8003eac:	ee38 8b47 	vsub.f64	d8, d8, d7
	                           d_J_inv_tmp_tmp) -
	                      2.6029060499520004E+6 *
	                          cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8003eb0:	f107 030c 	add.w	r3, r7, #12
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3308      	adds	r3, #8
 8003eb8:	ed93 6b00 	vldr	d6, [r3]
 8003ebc:	f107 030c 	add.w	r3, r7, #12
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3310      	adds	r3, #16
 8003ec4:	ed93 7b00 	vldr	d7, [r3]
 8003ec8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003ecc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003ed0:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8004170 <IVK+0x2648>
 8003ed4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003ed8:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8004178 <IVK+0x2650>
 8003edc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ee0:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8004180 <IVK+0x2658>
 8003ee4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ee8:	eeb0 0b47 	vmov.f64	d0, d7
 8003eec:	f013 fb00 	bl	80174f0 <cos>
 8003ef0:	eeb0 7b40 	vmov.f64	d7, d0
	                      2.6029060499520004E+6 *
 8003ef4:	ed9f 6ba6 	vldr	d6, [pc, #664]	; 8004190 <IVK+0x2668>
 8003ef8:	ee27 9b06 	vmul.f64	d9, d7, d6
	                              -0.73665) *
	                          sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003efc:	f107 030c 	add.w	r3, r7, #12
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3308      	adds	r3, #8
 8003f04:	ed93 7b00 	vldr	d7, [r3]
 8003f08:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8004170 <IVK+0x2648>
 8003f0c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f10:	eeb0 0b47 	vmov.f64	d0, d7
 8003f14:	f013 fb40 	bl	8017598 <sin>
 8003f18:	eeb0 7b40 	vmov.f64	d7, d0
	                              -0.73665) *
 8003f1c:	ee29 6b07 	vmul.f64	d6, d9, d7
	                          sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003f20:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003f24:	ee26 7b07 	vmul.f64	d7, d6, d7
	                           d_J_inv_tmp_tmp) -
 8003f28:	ee38 8b47 	vsub.f64	d8, d8, d7
	                     2.6029060499520004E+6 *
	                         sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8003f2c:	f107 030c 	add.w	r3, r7, #12
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3308      	adds	r3, #8
 8003f34:	ed93 6b00 	vldr	d6, [r3]
 8003f38:	f107 030c 	add.w	r3, r7, #12
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3310      	adds	r3, #16
 8003f40:	ed93 7b00 	vldr	d7, [r3]
 8003f44:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003f48:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003f4c:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8004170 <IVK+0x2648>
 8003f50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f54:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8004178 <IVK+0x2650>
 8003f58:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003f5c:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8004180 <IVK+0x2658>
 8003f60:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003f64:	eeb0 0b47 	vmov.f64	d0, d7
 8003f68:	f013 fb16 	bl	8017598 <sin>
 8003f6c:	eeb0 7b40 	vmov.f64	d7, d0
	                     2.6029060499520004E+6 *
 8003f70:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8004190 <IVK+0x2668>
 8003f74:	ee27 9b06 	vmul.f64	d9, d7, d6
	                             -0.73665) *
	                         cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003f78:	f107 030c 	add.w	r3, r7, #12
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3308      	adds	r3, #8
 8003f80:	ed93 7b00 	vldr	d7, [r3]
 8003f84:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8004170 <IVK+0x2648>
 8003f88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f8c:	eeb0 0b47 	vmov.f64	d0, d7
 8003f90:	f013 faae 	bl	80174f0 <cos>
 8003f94:	eeb0 7b40 	vmov.f64	d7, d0
	                             -0.73665) *
 8003f98:	ee29 6b07 	vmul.f64	d6, d9, d7
	                         cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003f9c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003fa0:	ee26 7b07 	vmul.f64	d7, d6, d7
	                          sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003fa4:	ee38 6b07 	vadd.f64	d6, d8, d7
	                         cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003fa8:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003fac:	ee36 8b07 	vadd.f64	d8, d6, d7
	                    d1) -
	                   190230.12000000002 *
	                       cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003fb0:	f107 030c 	add.w	r3, r7, #12
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	ed93 6b00 	vldr	d6, [r3]
 8003fbc:	f107 030c 	add.w	r3, r7, #12
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3310      	adds	r3, #16
 8003fc4:	ed93 7b00 	vldr	d7, [r3]
 8003fc8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003fcc:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8004170 <IVK+0x2648>
 8003fd0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003fd4:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8004178 <IVK+0x2650>
 8003fd8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003fdc:	eeb0 0b47 	vmov.f64	d0, d7
 8003fe0:	f013 fa86 	bl	80174f0 <cos>
 8003fe4:	eeb0 7b40 	vmov.f64	d7, d0
	                   190230.12000000002 *
 8003fe8:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8004198 <IVK+0x2670>
 8003fec:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003ff0:	f107 030c 	add.w	r3, r7, #12
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3308      	adds	r3, #8
 8003ff8:	ed93 7b00 	vldr	d7, [r3]
 8003ffc:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8004170 <IVK+0x2648>
 8004000:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004004:	eeb0 0b47 	vmov.f64	d0, d7
 8004008:	f013 fac6 	bl	8017598 <sin>
 800400c:	eeb0 7b40 	vmov.f64	d7, d0
	                       cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004010:	ee29 6b07 	vmul.f64	d6, d9, d7
	                       sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8004014:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8004018:	ee26 7b07 	vmul.f64	d7, d6, d7
	                    d1) -
 800401c:	ee38 8b47 	vsub.f64	d8, d8, d7
	                  190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004020:	f107 030c 	add.w	r3, r7, #12
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3308      	adds	r3, #8
 8004028:	ed93 6b00 	vldr	d6, [r3]
 800402c:	f107 030c 	add.w	r3, r7, #12
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	3310      	adds	r3, #16
 8004034:	ed93 7b00 	vldr	d7, [r3]
 8004038:	ee36 7b07 	vadd.f64	d7, d6, d7
 800403c:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8004170 <IVK+0x2648>
 8004040:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004044:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8004178 <IVK+0x2650>
 8004048:	ee37 7b46 	vsub.f64	d7, d7, d6
 800404c:	eeb0 0b47 	vmov.f64	d0, d7
 8004050:	f013 faa2 	bl	8017598 <sin>
 8004054:	eeb0 7b40 	vmov.f64	d7, d0
 8004058:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8004198 <IVK+0x2670>
 800405c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8004060:	f107 030c 	add.w	r3, r7, #12
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	3308      	adds	r3, #8
 8004068:	ed93 7b00 	vldr	d7, [r3]
 800406c:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8004170 <IVK+0x2648>
 8004070:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004074:	eeb0 0b47 	vmov.f64	d0, d7
 8004078:	f013 fa3a 	bl	80174f0 <cos>
 800407c:	eeb0 7b40 	vmov.f64	d7, d0
	                  190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004080:	ee29 6b07 	vmul.f64	d6, d9, d7
	                      cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8004084:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8004088:	ee26 7b07 	vmul.f64	d7, d6, d7
	                       sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 800408c:	ee38 6b07 	vadd.f64	d6, d8, d7
	                      cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8004090:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8004094:	ee36 8b07 	vadd.f64	d8, d6, d7
	                 d2) +
	                87600.0 *
	                    cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004098:	f107 030c 	add.w	r3, r7, #12
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3308      	adds	r3, #8
 80040a0:	ed93 6b00 	vldr	d6, [r3]
 80040a4:	f107 030c 	add.w	r3, r7, #12
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3310      	adds	r3, #16
 80040ac:	ed93 7b00 	vldr	d7, [r3]
 80040b0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80040b4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80040b8:	f107 030c 	add.w	r3, r7, #12
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3318      	adds	r3, #24
 80040c0:	ed93 7b00 	vldr	d7, [r3]
 80040c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80040c8:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8004170 <IVK+0x2648>
 80040cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80040d0:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8004178 <IVK+0x2650>
 80040d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80040d8:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8004180 <IVK+0x2658>
 80040dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80040e0:	ed9f 6b35 	vldr	d6, [pc, #212]	; 80041b8 <IVK+0x2690>
 80040e4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80040e8:	eeb0 0b47 	vmov.f64	d0, d7
 80040ec:	f013 fa00 	bl	80174f0 <cos>
 80040f0:	eeb0 7b40 	vmov.f64	d7, d0
	                87600.0 *
 80040f4:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80041a0 <IVK+0x2678>
 80040f8:	ee27 9b06 	vmul.f64	d9, d7, d6
	                         -0.73665) +
	                        1.52205) *
	                    sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80040fc:	f107 030c 	add.w	r3, r7, #12
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	3308      	adds	r3, #8
 8004104:	ed93 6b00 	vldr	d6, [r3]
 8004108:	f107 030c 	add.w	r3, r7, #12
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3310      	adds	r3, #16
 8004110:	ed93 7b00 	vldr	d7, [r3]
 8004114:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004118:	ee36 6b07 	vadd.f64	d6, d6, d7
 800411c:	f107 030c 	add.w	r3, r7, #12
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3318      	adds	r3, #24
 8004124:	ed93 7b00 	vldr	d7, [r3]
 8004128:	ee36 7b07 	vadd.f64	d7, d6, d7
 800412c:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8004170 <IVK+0x2648>
 8004130:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004134:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8004178 <IVK+0x2650>
 8004138:	ee37 7b46 	vsub.f64	d7, d7, d6
 800413c:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8004180 <IVK+0x2658>
 8004140:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004144:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80041b8 <IVK+0x2690>
 8004148:	ee37 7b06 	vadd.f64	d7, d7, d6
 800414c:	eeb0 0b47 	vmov.f64	d0, d7
 8004150:	f013 fa22 	bl	8017598 <sin>
 8004154:	eeb0 7b40 	vmov.f64	d7, d0
	                        1.52205) *
 8004158:	ee29 9b07 	vmul.f64	d9, d9, d7
	                         -0.73665) +
	                        1.52205) *
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 800415c:	f107 030c 	add.w	r3, r7, #12
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3308      	adds	r3, #8
 8004164:	ed93 6b00 	vldr	d6, [r3]
 8004168:	f107 030c 	add.w	r3, r7, #12
 800416c:	e038      	b.n	80041e0 <IVK+0x26b8>
 800416e:	bf00      	nop
 8004170:	45a1cac1 	.word	0x45a1cac1
 8004174:	3ffaf3b6 	.word	0x3ffaf3b6
 8004178:	39581062 	.word	0x39581062
 800417c:	3fecc8b4 	.word	0x3fecc8b4
 8004180:	05532618 	.word	0x05532618
 8004184:	3fe792a3 	.word	0x3fe792a3
 8004188:	28f5c28f 	.word	0x28f5c28f
 800418c:	410b0efc 	.word	0x410b0efc
 8004190:	0664d3c0 	.word	0x0664d3c0
 8004194:	4143dbcd 	.word	0x4143dbcd
 8004198:	f5c28f5d 	.word	0xf5c28f5d
 800419c:	410738b0 	.word	0x410738b0
 80041a0:	00000000 	.word	0x00000000
 80041a4:	40f56300 	.word	0x40f56300
 80041a8:	851eb852 	.word	0x851eb852
 80041ac:	412f6457 	.word	0x412f6457
 80041b0:	66666666 	.word	0x66666666
 80041b4:	410e10a6 	.word	0x410e10a6
 80041b8:	19ce075f 	.word	0x19ce075f
 80041bc:	3ff85a51 	.word	0x3ff85a51
 80041c0:	eaa8eb47 	.word	0xeaa8eb47
 80041c4:	414610aa 	.word	0x414610aa
 80041c8:	45a1cac1 	.word	0x45a1cac1
 80041cc:	3ffaf3b6 	.word	0x3ffaf3b6
 80041d0:	39581062 	.word	0x39581062
 80041d4:	3fecc8b4 	.word	0x3fecc8b4
 80041d8:	05532618 	.word	0x05532618
 80041dc:	3fe792a3 	.word	0x3fe792a3
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3310      	adds	r3, #16
 80041e4:	ed93 7b00 	vldr	d7, [r3]
 80041e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80041ec:	ed1f 6b0a 	vldr	d6, [pc, #-40]	; 80041c8 <IVK+0x26a0>
 80041f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80041f4:	ed1f 6b0a 	vldr	d6, [pc, #-40]	; 80041d0 <IVK+0x26a8>
 80041f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80041fc:	eeb0 0b47 	vmov.f64	d0, d7
 8004200:	f013 f976 	bl	80174f0 <cos>
 8004204:	eeb0 7b40 	vmov.f64	d7, d0
	                        1.52205) *
 8004208:	ee29 6b07 	vmul.f64	d6, d9, d7
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 800420c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8004210:	ee26 7b07 	vmul.f64	d7, d6, d7
	                 d2) +
 8004214:	ee38 8b07 	vadd.f64	d8, d8, d7
	               1.02865176E+6 *
	                   cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004218:	f107 030c 	add.w	r3, r7, #12
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3308      	adds	r3, #8
 8004220:	ed93 6b00 	vldr	d6, [r3]
 8004224:	f107 030c 	add.w	r3, r7, #12
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	3310      	adds	r3, #16
 800422c:	ed93 7b00 	vldr	d7, [r3]
 8004230:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004234:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004238:	f107 030c 	add.w	r3, r7, #12
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3318      	adds	r3, #24
 8004240:	ed93 7b00 	vldr	d7, [r3]
 8004244:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004248:	ed1f 6b21 	vldr	d6, [pc, #-132]	; 80041c8 <IVK+0x26a0>
 800424c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004250:	ed1f 6b21 	vldr	d6, [pc, #-132]	; 80041d0 <IVK+0x26a8>
 8004254:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004258:	ed1f 6b21 	vldr	d6, [pc, #-132]	; 80041d8 <IVK+0x26b0>
 800425c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004260:	ed1f 6b2b 	vldr	d6, [pc, #-172]	; 80041b8 <IVK+0x2690>
 8004264:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004268:	eeb0 0b47 	vmov.f64	d0, d7
 800426c:	f013 f940 	bl	80174f0 <cos>
 8004270:	eeb0 7b40 	vmov.f64	d7, d0
	               1.02865176E+6 *
 8004274:	ed1f 6b34 	vldr	d6, [pc, #-208]	; 80041a8 <IVK+0x2680>
 8004278:	ee27 9b06 	vmul.f64	d9, d7, d6
	                        -0.73665) +
	                       1.52205) *
	                   sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800427c:	f107 030c 	add.w	r3, r7, #12
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3308      	adds	r3, #8
 8004284:	ed93 6b00 	vldr	d6, [r3]
 8004288:	f107 030c 	add.w	r3, r7, #12
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3310      	adds	r3, #16
 8004290:	ed93 7b00 	vldr	d7, [r3]
 8004294:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004298:	ee36 6b07 	vadd.f64	d6, d6, d7
 800429c:	f107 030c 	add.w	r3, r7, #12
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3318      	adds	r3, #24
 80042a4:	ed93 7b00 	vldr	d7, [r3]
 80042a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80042ac:	ed1f 6b3a 	vldr	d6, [pc, #-232]	; 80041c8 <IVK+0x26a0>
 80042b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80042b4:	ed1f 6b3a 	vldr	d6, [pc, #-232]	; 80041d0 <IVK+0x26a8>
 80042b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80042bc:	ed1f 6b3a 	vldr	d6, [pc, #-232]	; 80041d8 <IVK+0x26b0>
 80042c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80042c4:	ed1f 6b44 	vldr	d6, [pc, #-272]	; 80041b8 <IVK+0x2690>
 80042c8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80042cc:	eeb0 0b47 	vmov.f64	d0, d7
 80042d0:	f013 f962 	bl	8017598 <sin>
 80042d4:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 80042d8:	ee29 9b07 	vmul.f64	d9, d9, d7
	                        -0.73665) +
	                       1.52205) *
	                   cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 80042dc:	f107 030c 	add.w	r3, r7, #12
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3308      	adds	r3, #8
 80042e4:	ed93 7b00 	vldr	d7, [r3]
 80042e8:	ed1f 6b49 	vldr	d6, [pc, #-292]	; 80041c8 <IVK+0x26a0>
 80042ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80042f0:	eeb0 0b47 	vmov.f64	d0, d7
 80042f4:	f013 f8fc 	bl	80174f0 <cos>
 80042f8:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 80042fc:	ee29 6b07 	vmul.f64	d6, d9, d7
	                   cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 8004300:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8004304:	ee26 7b07 	vmul.f64	d7, d6, d7
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 8004308:	ee38 8b07 	vadd.f64	d8, d8, d7
	              246292.8 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800430c:	f107 030c 	add.w	r3, r7, #12
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3308      	adds	r3, #8
 8004314:	ed93 6b00 	vldr	d6, [r3]
 8004318:	f107 030c 	add.w	r3, r7, #12
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3310      	adds	r3, #16
 8004320:	ed93 7b00 	vldr	d7, [r3]
 8004324:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004328:	ee36 6b07 	vadd.f64	d6, d6, d7
 800432c:	f107 030c 	add.w	r3, r7, #12
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3318      	adds	r3, #24
 8004334:	ed93 7b00 	vldr	d7, [r3]
 8004338:	ee36 7b07 	vadd.f64	d7, d6, d7
 800433c:	ed1f 6b5e 	vldr	d6, [pc, #-376]	; 80041c8 <IVK+0x26a0>
 8004340:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004344:	ed1f 6b5e 	vldr	d6, [pc, #-376]	; 80041d0 <IVK+0x26a8>
 8004348:	ee37 7b46 	vsub.f64	d7, d7, d6
 800434c:	ed1f 6b5e 	vldr	d6, [pc, #-376]	; 80041d8 <IVK+0x26b0>
 8004350:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004354:	ed1f 6b68 	vldr	d6, [pc, #-416]	; 80041b8 <IVK+0x2690>
 8004358:	ee37 7b06 	vadd.f64	d7, d7, d6
 800435c:	eeb0 0b47 	vmov.f64	d0, d7
 8004360:	f013 f91a 	bl	8017598 <sin>
 8004364:	eeb0 7b40 	vmov.f64	d7, d0
	              246292.8 *
 8004368:	ed1f 6b6f 	vldr	d6, [pc, #-444]	; 80041b0 <IVK+0x2688>
 800436c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004370:	f107 030c 	add.w	r3, r7, #12
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3308      	adds	r3, #8
 8004378:	ed93 6b00 	vldr	d6, [r3]
 800437c:	f107 030c 	add.w	r3, r7, #12
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	3310      	adds	r3, #16
 8004384:	ed93 7b00 	vldr	d7, [r3]
 8004388:	ee37 7b07 	vadd.f64	d7, d7, d7
 800438c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004390:	ed1f 6b73 	vldr	d6, [pc, #-460]	; 80041c8 <IVK+0x26a0>
 8004394:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004398:	ed1f 6b73 	vldr	d6, [pc, #-460]	; 80041d0 <IVK+0x26a8>
 800439c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80043a0:	ed1f 6b73 	vldr	d6, [pc, #-460]	; 80041d8 <IVK+0x26b0>
 80043a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80043a8:	eeb0 0b47 	vmov.f64	d0, d7
 80043ac:	f013 f8a0 	bl	80174f0 <cos>
 80043b0:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 80043b4:	ee29 9b07 	vmul.f64	d9, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) -
 80043b8:	f107 030c 	add.w	r3, r7, #12
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3308      	adds	r3, #8
 80043c0:	ed93 6b00 	vldr	d6, [r3]
 80043c4:	f107 030c 	add.w	r3, r7, #12
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3310      	adds	r3, #16
 80043cc:	ed93 7b00 	vldr	d7, [r3]
 80043d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80043d4:	ed1f 6b84 	vldr	d6, [pc, #-528]	; 80041c8 <IVK+0x26a0>
 80043d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80043dc:	ed1f 6b84 	vldr	d6, [pc, #-528]	; 80041d0 <IVK+0x26a8>
 80043e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80043e4:	eeb0 0b47 	vmov.f64	d0, d7
 80043e8:	f013 f8d6 	bl	8017598 <sin>
 80043ec:	eeb0 7b40 	vmov.f64	d7, d0
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80043f0:	ee29 6b07 	vmul.f64	d6, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) -
 80043f4:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80043f8:	ee26 7b07 	vmul.f64	d7, d6, d7
	                   cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 80043fc:	ee38 8b07 	vadd.f64	d8, d8, d7
	             246292.8 *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004400:	f107 030c 	add.w	r3, r7, #12
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	3308      	adds	r3, #8
 8004408:	ed93 6b00 	vldr	d6, [r3]
 800440c:	f107 030c 	add.w	r3, r7, #12
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3310      	adds	r3, #16
 8004414:	ed93 7b00 	vldr	d7, [r3]
 8004418:	ee37 7b07 	vadd.f64	d7, d7, d7
 800441c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004420:	f107 030c 	add.w	r3, r7, #12
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3318      	adds	r3, #24
 8004428:	ed93 7b00 	vldr	d7, [r3]
 800442c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004430:	ed1f 6b9b 	vldr	d6, [pc, #-620]	; 80041c8 <IVK+0x26a0>
 8004434:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004438:	ed1f 6b9b 	vldr	d6, [pc, #-620]	; 80041d0 <IVK+0x26a8>
 800443c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004440:	ed1f 6b9b 	vldr	d6, [pc, #-620]	; 80041d8 <IVK+0x26b0>
 8004444:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004448:	ed1f 6ba5 	vldr	d6, [pc, #-660]	; 80041b8 <IVK+0x2690>
 800444c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004450:	eeb0 0b47 	vmov.f64	d0, d7
 8004454:	f013 f8a0 	bl	8017598 <sin>
 8004458:	eeb0 7b40 	vmov.f64	d7, d0
	             246292.8 *
 800445c:	ed1f 6bac 	vldr	d6, [pc, #-688]	; 80041b0 <IVK+0x2688>
 8004460:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      -0.73665) +
	                     1.52205) *
	                 sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004464:	f107 030c 	add.w	r3, r7, #12
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3308      	adds	r3, #8
 800446c:	ed93 6b00 	vldr	d6, [r3]
 8004470:	f107 030c 	add.w	r3, r7, #12
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	3310      	adds	r3, #16
 8004478:	ed93 7b00 	vldr	d7, [r3]
 800447c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004480:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004484:	ed1f 6bb0 	vldr	d6, [pc, #-704]	; 80041c8 <IVK+0x26a0>
 8004488:	ee37 7b06 	vadd.f64	d7, d7, d6
 800448c:	ed1f 6bb0 	vldr	d6, [pc, #-704]	; 80041d0 <IVK+0x26a8>
 8004490:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004494:	ed1f 6bb0 	vldr	d6, [pc, #-704]	; 80041d8 <IVK+0x26b0>
 8004498:	ee37 7b46 	vsub.f64	d7, d7, d6
 800449c:	eeb0 0b47 	vmov.f64	d0, d7
 80044a0:	f013 f87a 	bl	8017598 <sin>
 80044a4:	eeb0 7b40 	vmov.f64	d7, d0
	                     1.52205) *
 80044a8:	ee29 9b07 	vmul.f64	d9, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 80044ac:	f107 030c 	add.w	r3, r7, #12
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3308      	adds	r3, #8
 80044b4:	ed93 6b00 	vldr	d6, [r3]
 80044b8:	f107 030c 	add.w	r3, r7, #12
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3310      	adds	r3, #16
 80044c0:	ed93 7b00 	vldr	d7, [r3]
 80044c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80044c8:	ed1f 6bc1 	vldr	d6, [pc, #-772]	; 80041c8 <IVK+0x26a0>
 80044cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80044d0:	ed1f 6bc1 	vldr	d6, [pc, #-772]	; 80041d0 <IVK+0x26a8>
 80044d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80044d8:	eeb0 0b47 	vmov.f64	d0, d7
 80044dc:	f013 f808 	bl	80174f0 <cos>
 80044e0:	eeb0 7b40 	vmov.f64	d7, d0
	                 sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80044e4:	ee29 6b07 	vmul.f64	d6, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 80044e8:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80044ec:	ee26 7b07 	vmul.f64	d7, d6, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) -
 80044f0:	ee38 8b47 	vsub.f64	d8, d8, d7
	            2.8921178332800004E+6 *
	                sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80044f4:	f107 030c 	add.w	r3, r7, #12
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	3308      	adds	r3, #8
 80044fc:	ed93 6b00 	vldr	d6, [r3]
 8004500:	f107 030c 	add.w	r3, r7, #12
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3310      	adds	r3, #16
 8004508:	ed93 7b00 	vldr	d7, [r3]
 800450c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004510:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004514:	f107 030c 	add.w	r3, r7, #12
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	3318      	adds	r3, #24
 800451c:	ed93 7b00 	vldr	d7, [r3]
 8004520:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004524:	ed1f 6bd8 	vldr	d6, [pc, #-864]	; 80041c8 <IVK+0x26a0>
 8004528:	ee37 7b06 	vadd.f64	d7, d7, d6
 800452c:	ed1f 6bd8 	vldr	d6, [pc, #-864]	; 80041d0 <IVK+0x26a8>
 8004530:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004534:	ed1f 6bd8 	vldr	d6, [pc, #-864]	; 80041d8 <IVK+0x26b0>
 8004538:	ee37 7b46 	vsub.f64	d7, d7, d6
 800453c:	ed1f 6be2 	vldr	d6, [pc, #-904]	; 80041b8 <IVK+0x2690>
 8004540:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004544:	eeb0 0b47 	vmov.f64	d0, d7
 8004548:	f013 f826 	bl	8017598 <sin>
 800454c:	eeb0 7b40 	vmov.f64	d7, d0
	            2.8921178332800004E+6 *
 8004550:	ed1f 6be5 	vldr	d6, [pc, #-916]	; 80041c0 <IVK+0x2698>
 8004554:	ee27 9b06 	vmul.f64	d9, d7, d6
	                     -0.73665) +
	                    1.52205) *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004558:	f107 030c 	add.w	r3, r7, #12
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3308      	adds	r3, #8
 8004560:	ed93 6b00 	vldr	d6, [r3]
 8004564:	f107 030c 	add.w	r3, r7, #12
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3310      	adds	r3, #16
 800456c:	ed93 7b00 	vldr	d7, [r3]
 8004570:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004574:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004578:	ed1f 6bed 	vldr	d6, [pc, #-948]	; 80041c8 <IVK+0x26a0>
 800457c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004580:	ed1f 6bed 	vldr	d6, [pc, #-948]	; 80041d0 <IVK+0x26a8>
 8004584:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004588:	ed1f 6bed 	vldr	d6, [pc, #-948]	; 80041d8 <IVK+0x26b0>
 800458c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004590:	eeb0 0b47 	vmov.f64	d0, d7
 8004594:	f012 ffac 	bl	80174f0 <cos>
 8004598:	eeb0 7b40 	vmov.f64	d7, d0
	                    1.52205) *
 800459c:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(q[1] + 1.6845) * f_J_inv_tmp_tmp) -
 80045a0:	f107 030c 	add.w	r3, r7, #12
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3308      	adds	r3, #8
 80045a8:	ed93 7b00 	vldr	d7, [r3]
 80045ac:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8004968 <IVK+0x2e40>
 80045b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80045b4:	eeb0 0b47 	vmov.f64	d0, d7
 80045b8:	f012 ffee 	bl	8017598 <sin>
 80045bc:	eeb0 7b40 	vmov.f64	d7, d0
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80045c0:	ee29 6b07 	vmul.f64	d6, d9, d7
	                sin(q[1] + 1.6845) * f_J_inv_tmp_tmp) -
 80045c4:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80045c8:	ee26 7b07 	vmul.f64	d7, d6, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 80045cc:	ee38 8b07 	vadd.f64	d8, d8, d7
	           2.8921178332800004E+6 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80045d0:	f107 030c 	add.w	r3, r7, #12
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3308      	adds	r3, #8
 80045d8:	ed93 6b00 	vldr	d6, [r3]
 80045dc:	f107 030c 	add.w	r3, r7, #12
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3310      	adds	r3, #16
 80045e4:	ed93 7b00 	vldr	d7, [r3]
 80045e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80045ec:	ee36 6b07 	vadd.f64	d6, d6, d7
 80045f0:	f107 030c 	add.w	r3, r7, #12
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3318      	adds	r3, #24
 80045f8:	ed93 7b00 	vldr	d7, [r3]
 80045fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004600:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8004968 <IVK+0x2e40>
 8004604:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004608:	ed9f 6bed 	vldr	d6, [pc, #948]	; 80049c0 <IVK+0x2e98>
 800460c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004610:	ed9f 6be5 	vldr	d6, [pc, #916]	; 80049a8 <IVK+0x2e80>
 8004614:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004618:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8004970 <IVK+0x2e48>
 800461c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004620:	eeb0 0b47 	vmov.f64	d0, d7
 8004624:	f012 ffb8 	bl	8017598 <sin>
 8004628:	eeb0 7b40 	vmov.f64	d7, d0
	           2.8921178332800004E+6 *
 800462c:	ed9f 6bd2 	vldr	d6, [pc, #840]	; 8004978 <IVK+0x2e50>
 8004630:	ee27 9b06 	vmul.f64	d9, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004634:	f107 030c 	add.w	r3, r7, #12
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3308      	adds	r3, #8
 800463c:	ed93 6b00 	vldr	d6, [r3]
 8004640:	f107 030c 	add.w	r3, r7, #12
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3310      	adds	r3, #16
 8004648:	ed93 7b00 	vldr	d7, [r3]
 800464c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004650:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004654:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8004968 <IVK+0x2e40>
 8004658:	ee37 7b06 	vadd.f64	d7, d7, d6
 800465c:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 80049c0 <IVK+0x2e98>
 8004660:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004664:	ed9f 6bd0 	vldr	d6, [pc, #832]	; 80049a8 <IVK+0x2e80>
 8004668:	ee37 7b46 	vsub.f64	d7, d7, d6
 800466c:	eeb0 0b47 	vmov.f64	d0, d7
 8004670:	f012 ff92 	bl	8017598 <sin>
 8004674:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 8004678:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 800467c:	f107 030c 	add.w	r3, r7, #12
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	3308      	adds	r3, #8
 8004684:	ed93 7b00 	vldr	d7, [r3]
 8004688:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8004968 <IVK+0x2e40>
 800468c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004690:	eeb0 0b47 	vmov.f64	d0, d7
 8004694:	f012 ff2c 	bl	80174f0 <cos>
 8004698:	eeb0 7b40 	vmov.f64	d7, d0
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800469c:	ee29 6b07 	vmul.f64	d6, d9, d7
	               cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 80046a0:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80046a4:	ee26 7b07 	vmul.f64	d7, d6, d7
	                sin(q[1] + 1.6845) * f_J_inv_tmp_tmp) -
 80046a8:	ee38 8b47 	vsub.f64	d8, d8, d7
	          211366.80000000002 *
	              sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80046ac:	f107 030c 	add.w	r3, r7, #12
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3308      	adds	r3, #8
 80046b4:	ed93 6b00 	vldr	d6, [r3]
 80046b8:	f107 030c 	add.w	r3, r7, #12
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	3310      	adds	r3, #16
 80046c0:	ed93 7b00 	vldr	d7, [r3]
 80046c4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80046c8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80046cc:	f107 030c 	add.w	r3, r7, #12
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3318      	adds	r3, #24
 80046d4:	ed93 7b00 	vldr	d7, [r3]
 80046d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80046dc:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8004968 <IVK+0x2e40>
 80046e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80046e4:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 80049c0 <IVK+0x2e98>
 80046e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80046ec:	ed9f 6bae 	vldr	d6, [pc, #696]	; 80049a8 <IVK+0x2e80>
 80046f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80046f4:	ed9f 6b9e 	vldr	d6, [pc, #632]	; 8004970 <IVK+0x2e48>
 80046f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80046fc:	eeb0 0b47 	vmov.f64	d0, d7
 8004700:	f012 ff4a 	bl	8017598 <sin>
 8004704:	eeb0 7b40 	vmov.f64	d7, d0
	          211366.80000000002 *
 8004708:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8004980 <IVK+0x2e58>
 800470c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                   -0.73665) +
	                  1.52205) *
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8004710:	f107 030c 	add.w	r3, r7, #12
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3308      	adds	r3, #8
 8004718:	ed93 6b00 	vldr	d6, [r3]
 800471c:	f107 030c 	add.w	r3, r7, #12
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3310      	adds	r3, #16
 8004724:	ed93 7b00 	vldr	d7, [r3]
 8004728:	ee36 7b07 	vadd.f64	d7, d6, d7
 800472c:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 8004968 <IVK+0x2e40>
 8004730:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004734:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 80049c0 <IVK+0x2e98>
 8004738:	ee37 7b46 	vsub.f64	d7, d7, d6
 800473c:	eeb0 0b47 	vmov.f64	d0, d7
 8004740:	f012 fed6 	bl	80174f0 <cos>
 8004744:	eeb0 7b40 	vmov.f64	d7, d0
	                  1.52205) *
 8004748:	ee29 9b07 	vmul.f64	d9, d9, d7
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 800474c:	f107 030c 	add.w	r3, r7, #12
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	3308      	adds	r3, #8
 8004754:	ed93 7b00 	vldr	d7, [r3]
 8004758:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8004968 <IVK+0x2e40>
 800475c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004760:	eeb0 0b47 	vmov.f64	d0, d7
 8004764:	f012 ff18 	bl	8017598 <sin>
 8004768:	eeb0 7b40 	vmov.f64	d7, d0
 800476c:	ee29 6b07 	vmul.f64	d6, d9, d7
 8004770:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8004774:	ee26 7b07 	vmul.f64	d7, d6, d7
	               cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 8004778:	ee38 8b07 	vadd.f64	d8, d8, d7
	              f_J_inv_tmp_tmp) -
	         211366.80000000002 *
	             sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800477c:	f107 030c 	add.w	r3, r7, #12
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3308      	adds	r3, #8
 8004784:	ed93 6b00 	vldr	d6, [r3]
 8004788:	f107 030c 	add.w	r3, r7, #12
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3310      	adds	r3, #16
 8004790:	ed93 7b00 	vldr	d7, [r3]
 8004794:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004798:	ee36 6b07 	vadd.f64	d6, d6, d7
 800479c:	f107 030c 	add.w	r3, r7, #12
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3318      	adds	r3, #24
 80047a4:	ed93 7b00 	vldr	d7, [r3]
 80047a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80047ac:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8004968 <IVK+0x2e40>
 80047b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80047b4:	ed9f 6b82 	vldr	d6, [pc, #520]	; 80049c0 <IVK+0x2e98>
 80047b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80047bc:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80049a8 <IVK+0x2e80>
 80047c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80047c4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8004970 <IVK+0x2e48>
 80047c8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80047cc:	eeb0 0b47 	vmov.f64	d0, d7
 80047d0:	f012 fee2 	bl	8017598 <sin>
 80047d4:	eeb0 7b40 	vmov.f64	d7, d0
	         211366.80000000002 *
 80047d8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8004980 <IVK+0x2e58>
 80047dc:	ee27 9b06 	vmul.f64	d9, d7, d6
	                  -0.73665) +
	                 1.52205) *
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 80047e0:	f107 030c 	add.w	r3, r7, #12
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	3308      	adds	r3, #8
 80047e8:	ed93 6b00 	vldr	d6, [r3]
 80047ec:	f107 030c 	add.w	r3, r7, #12
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3310      	adds	r3, #16
 80047f4:	ed93 7b00 	vldr	d7, [r3]
 80047f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80047fc:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8004968 <IVK+0x2e40>
 8004800:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004804:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 80049c0 <IVK+0x2e98>
 8004808:	ee37 7b46 	vsub.f64	d7, d7, d6
 800480c:	eeb0 0b47 	vmov.f64	d0, d7
 8004810:	f012 fec2 	bl	8017598 <sin>
 8004814:	eeb0 7b40 	vmov.f64	d7, d0
	                 1.52205) *
 8004818:	ee29 9b07 	vmul.f64	d9, d9, d7
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 800481c:	f107 030c 	add.w	r3, r7, #12
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3308      	adds	r3, #8
 8004824:	ed93 7b00 	vldr	d7, [r3]
 8004828:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8004968 <IVK+0x2e40>
 800482c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004830:	eeb0 0b47 	vmov.f64	d0, d7
 8004834:	f012 fe5c 	bl	80174f0 <cos>
 8004838:	eeb0 7b40 	vmov.f64	d7, d0
 800483c:	ee29 6b07 	vmul.f64	d6, d9, d7
 8004840:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8004844:	ee26 7b07 	vmul.f64	d7, d6, d7
	              f_J_inv_tmp_tmp) -
 8004848:	ee38 7b47 	vsub.f64	d7, d8, d7
	      -(4.0 *
 800484c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8004850:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004854:	eeb1 5b47 	vneg.f64	d5, d7
	             f_J_inv_tmp_tmp)) /
 8004858:	ed97 6b7a 	vldr	d6, [r7, #488]	; 0x1e8
 800485c:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[8] =
 8004860:	f107 0310 	add.w	r3, r7, #16
 8004864:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	      d;
	  d9 = 9.0 * d11;
 8004868:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 800486c:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8004870:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004874:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
	  dv[13] = -(40.0 * f_J_inv_tmp_tmp *
 8004878:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800487c:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8004998 <IVK+0x2e70>
 8004880:	ee27 8b06 	vmul.f64	d8, d7, d6
	             (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8004884:	f107 030c 	add.w	r3, r7, #12
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3308      	adds	r3, #8
 800488c:	ed93 6b00 	vldr	d6, [r3]
 8004890:	f107 030c 	add.w	r3, r7, #12
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	3310      	adds	r3, #16
 8004898:	ed93 7b00 	vldr	d7, [r3]
 800489c:	ee36 7b07 	vadd.f64	d7, d6, d7
 80048a0:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8004968 <IVK+0x2e40>
 80048a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80048a8:	ed9f 6b45 	vldr	d6, [pc, #276]	; 80049c0 <IVK+0x2e98>
 80048ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80048b0:	eeb0 0b47 	vmov.f64	d0, d7
 80048b4:	f012 fe1c 	bl	80174f0 <cos>
 80048b8:	eeb0 7b40 	vmov.f64	d7, d0
 80048bc:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8004988 <IVK+0x2e60>
 80048c0:	ee27 6b06 	vmul.f64	d6, d7, d6
	              704.556 * b_J_inv_tmp_tmp)) /
 80048c4:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 80048c8:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8004990 <IVK+0x2e68>
 80048cc:	ee27 7b05 	vmul.f64	d7, d7, d5
	             (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) +
 80048d0:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[13] = -(40.0 * f_J_inv_tmp_tmp *
 80048d4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80048d8:	eeb1 5b47 	vneg.f64	d5, d7
	              704.556 * b_J_inv_tmp_tmp)) /
 80048dc:	ed97 6b50 	vldr	d6, [r7, #320]	; 0x140
 80048e0:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[13] = -(40.0 * f_J_inv_tmp_tmp *
 80048e4:	f107 0310 	add.w	r3, r7, #16
 80048e8:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	           d9;
	  dv[18] =
	      -(40.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 80048ec:	f107 030c 	add.w	r3, r7, #12
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3308      	adds	r3, #8
 80048f4:	ed93 6b00 	vldr	d6, [r3]
 80048f8:	f107 030c 	add.w	r3, r7, #12
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3310      	adds	r3, #16
 8004900:	ed93 7b00 	vldr	d7, [r3]
 8004904:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004908:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8004968 <IVK+0x2e40>
 800490c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004910:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 80049c0 <IVK+0x2e98>
 8004914:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004918:	eeb0 0b47 	vmov.f64	d0, d7
 800491c:	f012 fde8 	bl	80174f0 <cos>
 8004920:	eeb0 7b40 	vmov.f64	d7, d0
 8004924:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8004988 <IVK+0x2e60>
 8004928:	ee27 8b06 	vmul.f64	d8, d7, d6
 800492c:	f107 030c 	add.w	r3, r7, #12
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	ed93 7b00 	vldr	d7, [r3]
 8004936:	eeb0 0b47 	vmov.f64	d0, d7
 800493a:	f012 fe2d 	bl	8017598 <sin>
 800493e:	eeb0 7b40 	vmov.f64	d7, d0
 8004942:	ee28 8b07 	vmul.f64	d8, d8, d7
	                704.556 * cos(q[1] + 1.6845) * d_J_inv_tmp_tmp)) /
 8004946:	f107 030c 	add.w	r3, r7, #12
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	3308      	adds	r3, #8
 800494e:	ed93 7b00 	vldr	d7, [r3]
 8004952:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8004968 <IVK+0x2e40>
 8004956:	ee37 7b06 	vadd.f64	d7, d7, d6
 800495a:	eeb0 0b47 	vmov.f64	d0, d7
 800495e:	f012 fdc7 	bl	80174f0 <cos>
 8004962:	eeb0 7b40 	vmov.f64	d7, d0
 8004966:	e033      	b.n	80049d0 <IVK+0x2ea8>
 8004968:	45a1cac1 	.word	0x45a1cac1
 800496c:	3ffaf3b6 	.word	0x3ffaf3b6
 8004970:	19ce075f 	.word	0x19ce075f
 8004974:	3ff85a51 	.word	0x3ff85a51
 8004978:	eaa8eb47 	.word	0xeaa8eb47
 800497c:	414610aa 	.word	0x414610aa
 8004980:	66666667 	.word	0x66666667
 8004984:	4109cd36 	.word	0x4109cd36
 8004988:	00000000 	.word	0x00000000
 800498c:	404e0000 	.word	0x404e0000
 8004990:	b020c49c 	.word	0xb020c49c
 8004994:	40860472 	.word	0x40860472
 8004998:	00000000 	.word	0x00000000
 800499c:	40440000 	.word	0x40440000
 80049a0:	28f5c28f 	.word	0x28f5c28f
 80049a4:	410b0efc 	.word	0x410b0efc
 80049a8:	05532618 	.word	0x05532618
 80049ac:	3fe792a3 	.word	0x3fe792a3
 80049b0:	0664d3c0 	.word	0x0664d3c0
 80049b4:	4143dbcd 	.word	0x4143dbcd
 80049b8:	45a1cac1 	.word	0x45a1cac1
 80049bc:	3ffaf3b6 	.word	0x3ffaf3b6
 80049c0:	39581062 	.word	0x39581062
 80049c4:	3fecc8b4 	.word	0x3fecc8b4
 80049c8:	f5c28f5d 	.word	0xf5c28f5d
 80049cc:	410738b0 	.word	0x410738b0
 80049d0:	ed1f 6b11 	vldr	d6, [pc, #-68]	; 8004990 <IVK+0x2e68>
 80049d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80049d8:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80049dc:	ee26 7b07 	vmul.f64	d7, d6, d7
	      -(40.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 80049e0:	ee38 7b07 	vadd.f64	d7, d8, d7
 80049e4:	ed1f 6b14 	vldr	d6, [pc, #-80]	; 8004998 <IVK+0x2e70>
 80049e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80049ec:	eeb1 5b47 	vneg.f64	d5, d7
	                704.556 * cos(q[1] + 1.6845) * d_J_inv_tmp_tmp)) /
 80049f0:	ed97 6b50 	vldr	d6, [r7, #320]	; 0x140
 80049f4:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[18] =
 80049f8:	f107 0310 	add.w	r3, r7, #16
 80049fc:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
	      d9;
	  dv[23] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8004a00:	f107 030c 	add.w	r3, r7, #12
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	3308      	adds	r3, #8
 8004a08:	ed93 6b00 	vldr	d6, [r3]
 8004a0c:	f107 030c 	add.w	r3, r7, #12
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3310      	adds	r3, #16
 8004a14:	ed93 7b00 	vldr	d7, [r3]
 8004a18:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004a1c:	ed1f 6b1a 	vldr	d6, [pc, #-104]	; 80049b8 <IVK+0x2e90>
 8004a20:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004a24:	ed1f 6b1a 	vldr	d6, [pc, #-104]	; 80049c0 <IVK+0x2e98>
 8004a28:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004a2c:	eeb0 0b47 	vmov.f64	d0, d7
 8004a30:	f012 fdb2 	bl	8017598 <sin>
 8004a34:	eeb0 7b40 	vmov.f64	d7, d0
 8004a38:	ed1f 6b2d 	vldr	d6, [pc, #-180]	; 8004988 <IVK+0x2e60>
 8004a3c:	ee27 6b06 	vmul.f64	d6, d7, d6
	                     704.556 * e_J_inv_tmp_tmp)) /
 8004a40:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8004a44:	ed1f 5b2e 	vldr	d5, [pc, #-184]	; 8004990 <IVK+0x2e68>
 8004a48:	ee27 7b05 	vmul.f64	d7, d7, d5
	  dv[23] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8004a4c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004a50:	ed1f 6b2f 	vldr	d6, [pc, #-188]	; 8004998 <IVK+0x2e70>
 8004a54:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004a58:	eeb1 5b47 	vneg.f64	d5, d7
	                     704.556 * e_J_inv_tmp_tmp)) /
 8004a5c:	ed97 6b50 	vldr	d6, [r7, #320]	; 0x140
 8004a60:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[23] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8004a64:	f107 0310 	add.w	r3, r7, #16
 8004a68:	ed83 7b2e 	vstr	d7, [r3, #184]	; 0xb8
	           d9;
	  dv[4] =
	      4.0 *
	      (((((((((((((((221663.52 *
	                         sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8004a6c:	f107 030c 	add.w	r3, r7, #12
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3308      	adds	r3, #8
 8004a74:	ed93 6b00 	vldr	d6, [r3]
 8004a78:	f107 030c 	add.w	r3, r7, #12
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3310      	adds	r3, #16
 8004a80:	ed93 7b00 	vldr	d7, [r3]
 8004a84:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004a88:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004a8c:	ed1f 6b36 	vldr	d6, [pc, #-216]	; 80049b8 <IVK+0x2e90>
 8004a90:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004a94:	ed1f 6b36 	vldr	d6, [pc, #-216]	; 80049c0 <IVK+0x2e98>
 8004a98:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004a9c:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 80049a8 <IVK+0x2e80>
 8004aa0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004aa4:	eeb0 0b47 	vmov.f64	d0, d7
 8004aa8:	f012 fd76 	bl	8017598 <sin>
 8004aac:	eeb0 7b40 	vmov.f64	d7, d0
	      (((((((((((((((221663.52 *
 8004ab0:	ed1f 6b45 	vldr	d6, [pc, #-276]	; 80049a0 <IVK+0x2e78>
 8004ab4:	ee27 8b06 	vmul.f64	d8, d7, d6
	                             -0.73665) *
	                         cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) -
 8004ab8:	f107 030c 	add.w	r3, r7, #12
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3308      	adds	r3, #8
 8004ac0:	ed93 6b00 	vldr	d6, [r3]
 8004ac4:	f107 030c 	add.w	r3, r7, #12
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3310      	adds	r3, #16
 8004acc:	ed93 7b00 	vldr	d7, [r3]
 8004ad0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004ad4:	ed1f 6b48 	vldr	d6, [pc, #-288]	; 80049b8 <IVK+0x2e90>
 8004ad8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004adc:	ed1f 6b48 	vldr	d6, [pc, #-288]	; 80049c0 <IVK+0x2e98>
 8004ae0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004ae4:	eeb0 0b47 	vmov.f64	d0, d7
 8004ae8:	f012 fd02 	bl	80174f0 <cos>
 8004aec:	eeb0 7b40 	vmov.f64	d7, d0
	                             -0.73665) *
 8004af0:	ee28 8b07 	vmul.f64	d8, d8, d7
	                         cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) -
 8004af4:	f107 030c 	add.w	r3, r7, #12
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	ed93 7b00 	vldr	d7, [r3]
 8004afe:	eeb0 0b47 	vmov.f64	d0, d7
 8004b02:	f012 fcf5 	bl	80174f0 <cos>
 8004b06:	eeb0 7b40 	vmov.f64	d7, d0
 8004b0a:	ee28 8b07 	vmul.f64	d8, d8, d7
	                     221663.52 *
	                         cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8004b0e:	f107 030c 	add.w	r3, r7, #12
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3308      	adds	r3, #8
 8004b16:	ed93 6b00 	vldr	d6, [r3]
 8004b1a:	f107 030c 	add.w	r3, r7, #12
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3310      	adds	r3, #16
 8004b22:	ed93 7b00 	vldr	d7, [r3]
 8004b26:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004b2a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004b2e:	ed1f 6b5e 	vldr	d6, [pc, #-376]	; 80049b8 <IVK+0x2e90>
 8004b32:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004b36:	ed1f 6b5e 	vldr	d6, [pc, #-376]	; 80049c0 <IVK+0x2e98>
 8004b3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004b3e:	ed1f 6b66 	vldr	d6, [pc, #-408]	; 80049a8 <IVK+0x2e80>
 8004b42:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004b46:	eeb0 0b47 	vmov.f64	d0, d7
 8004b4a:	f012 fcd1 	bl	80174f0 <cos>
 8004b4e:	eeb0 7b40 	vmov.f64	d7, d0
	                     221663.52 *
 8004b52:	ed1f 6b6d 	vldr	d6, [pc, #-436]	; 80049a0 <IVK+0x2e78>
 8004b56:	ee27 9b06 	vmul.f64	d9, d7, d6
	                             -0.73665) *
	                         sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 8004b5a:	f107 030c 	add.w	r3, r7, #12
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3308      	adds	r3, #8
 8004b62:	ed93 6b00 	vldr	d6, [r3]
 8004b66:	f107 030c 	add.w	r3, r7, #12
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3310      	adds	r3, #16
 8004b6e:	ed93 7b00 	vldr	d7, [r3]
 8004b72:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004b76:	ed1f 6b70 	vldr	d6, [pc, #-448]	; 80049b8 <IVK+0x2e90>
 8004b7a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004b7e:	ed1f 6b70 	vldr	d6, [pc, #-448]	; 80049c0 <IVK+0x2e98>
 8004b82:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004b86:	eeb0 0b47 	vmov.f64	d0, d7
 8004b8a:	f012 fd05 	bl	8017598 <sin>
 8004b8e:	eeb0 7b40 	vmov.f64	d7, d0
	                             -0.73665) *
 8004b92:	ee29 9b07 	vmul.f64	d9, d9, d7
	                         sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 8004b96:	f107 030c 	add.w	r3, r7, #12
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	ed93 7b00 	vldr	d7, [r3]
 8004ba0:	eeb0 0b47 	vmov.f64	d0, d7
 8004ba4:	f012 fca4 	bl	80174f0 <cos>
 8004ba8:	eeb0 7b40 	vmov.f64	d7, d0
 8004bac:	ee29 7b07 	vmul.f64	d7, d9, d7
	                         cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) -
 8004bb0:	ee38 8b47 	vsub.f64	d8, d8, d7
	                    2.6029060499520004E+6 *
	                        cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8004bb4:	f107 030c 	add.w	r3, r7, #12
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3308      	adds	r3, #8
 8004bbc:	ed93 6b00 	vldr	d6, [r3]
 8004bc0:	f107 030c 	add.w	r3, r7, #12
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3310      	adds	r3, #16
 8004bc8:	ed93 7b00 	vldr	d7, [r3]
 8004bcc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004bd0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004bd4:	ed1f 6b88 	vldr	d6, [pc, #-544]	; 80049b8 <IVK+0x2e90>
 8004bd8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004bdc:	ed1f 6b88 	vldr	d6, [pc, #-544]	; 80049c0 <IVK+0x2e98>
 8004be0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004be4:	ed1f 6b90 	vldr	d6, [pc, #-576]	; 80049a8 <IVK+0x2e80>
 8004be8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004bec:	eeb0 0b47 	vmov.f64	d0, d7
 8004bf0:	f012 fc7e 	bl	80174f0 <cos>
 8004bf4:	eeb0 7b40 	vmov.f64	d7, d0
	                    2.6029060499520004E+6 *
 8004bf8:	ed1f 6b93 	vldr	d6, [pc, #-588]	; 80049b0 <IVK+0x2e88>
 8004bfc:	ee27 9b06 	vmul.f64	d9, d7, d6
	                            -0.73665) *
	                        sin(q[1] + 1.6845) * cos(q[0])) +
 8004c00:	f107 030c 	add.w	r3, r7, #12
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3308      	adds	r3, #8
 8004c08:	ed93 7b00 	vldr	d7, [r3]
 8004c0c:	ed1f 6b96 	vldr	d6, [pc, #-600]	; 80049b8 <IVK+0x2e90>
 8004c10:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004c14:	eeb0 0b47 	vmov.f64	d0, d7
 8004c18:	f012 fcbe 	bl	8017598 <sin>
 8004c1c:	eeb0 7b40 	vmov.f64	d7, d0
	                            -0.73665) *
 8004c20:	ee29 9b07 	vmul.f64	d9, d9, d7
	                        sin(q[1] + 1.6845) * cos(q[0])) +
 8004c24:	f107 030c 	add.w	r3, r7, #12
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	ed93 7b00 	vldr	d7, [r3]
 8004c2e:	eeb0 0b47 	vmov.f64	d0, d7
 8004c32:	f012 fc5d 	bl	80174f0 <cos>
 8004c36:	eeb0 7b40 	vmov.f64	d7, d0
 8004c3a:	ee29 7b07 	vmul.f64	d7, d9, d7
	                         sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 8004c3e:	ee38 8b47 	vsub.f64	d8, d8, d7
	                   2.6029060499520004E+6 *
	                       sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8004c42:	f107 030c 	add.w	r3, r7, #12
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3308      	adds	r3, #8
 8004c4a:	ed93 6b00 	vldr	d6, [r3]
 8004c4e:	f107 030c 	add.w	r3, r7, #12
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3310      	adds	r3, #16
 8004c56:	ed93 7b00 	vldr	d7, [r3]
 8004c5a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004c5e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004c62:	ed1f 6bab 	vldr	d6, [pc, #-684]	; 80049b8 <IVK+0x2e90>
 8004c66:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004c6a:	ed1f 6bab 	vldr	d6, [pc, #-684]	; 80049c0 <IVK+0x2e98>
 8004c6e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004c72:	ed1f 6bb3 	vldr	d6, [pc, #-716]	; 80049a8 <IVK+0x2e80>
 8004c76:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004c7a:	eeb0 0b47 	vmov.f64	d0, d7
 8004c7e:	f012 fc8b 	bl	8017598 <sin>
 8004c82:	eeb0 7b40 	vmov.f64	d7, d0
	                   2.6029060499520004E+6 *
 8004c86:	ed1f 6bb6 	vldr	d6, [pc, #-728]	; 80049b0 <IVK+0x2e88>
 8004c8a:	ee27 9b06 	vmul.f64	d9, d7, d6
	                           -0.73665) *
	                       cos(q[1] + 1.6845) * cos(q[0])) -
 8004c8e:	f107 030c 	add.w	r3, r7, #12
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3308      	adds	r3, #8
 8004c96:	ed93 7b00 	vldr	d7, [r3]
 8004c9a:	ed1f 6bb9 	vldr	d6, [pc, #-740]	; 80049b8 <IVK+0x2e90>
 8004c9e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004ca2:	eeb0 0b47 	vmov.f64	d0, d7
 8004ca6:	f012 fc23 	bl	80174f0 <cos>
 8004caa:	eeb0 7b40 	vmov.f64	d7, d0
	                           -0.73665) *
 8004cae:	ee29 9b07 	vmul.f64	d9, d9, d7
	                       cos(q[1] + 1.6845) * cos(q[0])) -
 8004cb2:	f107 030c 	add.w	r3, r7, #12
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	ed93 7b00 	vldr	d7, [r3]
 8004cbc:	eeb0 0b47 	vmov.f64	d0, d7
 8004cc0:	f012 fc16 	bl	80174f0 <cos>
 8004cc4:	eeb0 7b40 	vmov.f64	d7, d0
 8004cc8:	ee29 7b07 	vmul.f64	d7, d9, d7
	                        sin(q[1] + 1.6845) * cos(q[0])) +
 8004ccc:	ee38 8b07 	vadd.f64	d8, d8, d7
	                  190230.12000000002 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004cd0:	f107 030c 	add.w	r3, r7, #12
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	ed93 6b00 	vldr	d6, [r3]
 8004cdc:	f107 030c 	add.w	r3, r7, #12
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3310      	adds	r3, #16
 8004ce4:	ed93 7b00 	vldr	d7, [r3]
 8004ce8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004cec:	ed1f 6bce 	vldr	d6, [pc, #-824]	; 80049b8 <IVK+0x2e90>
 8004cf0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004cf4:	ed1f 6bce 	vldr	d6, [pc, #-824]	; 80049c0 <IVK+0x2e98>
 8004cf8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004cfc:	eeb0 0b47 	vmov.f64	d0, d7
 8004d00:	f012 fbf6 	bl	80174f0 <cos>
 8004d04:	eeb0 7b40 	vmov.f64	d7, d0
 8004d08:	ed1f 6bd1 	vldr	d6, [pc, #-836]	; 80049c8 <IVK+0x2ea0>
 8004d0c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      sin(q[1] + 1.6845) * cos(q[0])) +
 8004d10:	f107 030c 	add.w	r3, r7, #12
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3308      	adds	r3, #8
 8004d18:	ed93 7b00 	vldr	d7, [r3]
 8004d1c:	ed1f 6bda 	vldr	d6, [pc, #-872]	; 80049b8 <IVK+0x2e90>
 8004d20:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004d24:	eeb0 0b47 	vmov.f64	d0, d7
 8004d28:	f012 fc36 	bl	8017598 <sin>
 8004d2c:	eeb0 7b40 	vmov.f64	d7, d0
	                  190230.12000000002 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004d30:	ee29 9b07 	vmul.f64	d9, d9, d7
	                      sin(q[1] + 1.6845) * cos(q[0])) +
 8004d34:	f107 030c 	add.w	r3, r7, #12
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	ed93 7b00 	vldr	d7, [r3]
 8004d3e:	eeb0 0b47 	vmov.f64	d0, d7
 8004d42:	f012 fbd5 	bl	80174f0 <cos>
 8004d46:	eeb0 7b40 	vmov.f64	d7, d0
 8004d4a:	ee29 7b07 	vmul.f64	d7, d9, d7
	                       cos(q[1] + 1.6845) * cos(q[0])) -
 8004d4e:	ee38 8b47 	vsub.f64	d8, d8, d7
	                 190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004d52:	f107 030c 	add.w	r3, r7, #12
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3308      	adds	r3, #8
 8004d5a:	ed93 6b00 	vldr	d6, [r3]
 8004d5e:	f107 030c 	add.w	r3, r7, #12
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3310      	adds	r3, #16
 8004d66:	ed93 7b00 	vldr	d7, [r3]
 8004d6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004d6e:	ed1f 6bee 	vldr	d6, [pc, #-952]	; 80049b8 <IVK+0x2e90>
 8004d72:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004d76:	ed1f 6bee 	vldr	d6, [pc, #-952]	; 80049c0 <IVK+0x2e98>
 8004d7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004d7e:	eeb0 0b47 	vmov.f64	d0, d7
 8004d82:	f012 fc09 	bl	8017598 <sin>
 8004d86:	eeb0 7b40 	vmov.f64	d7, d0
 8004d8a:	ed1f 6bf1 	vldr	d6, [pc, #-964]	; 80049c8 <IVK+0x2ea0>
 8004d8e:	ee27 9b06 	vmul.f64	d9, d7, d6
	                     cos(q[1] + 1.6845) * cos(q[0])) +
 8004d92:	f107 030c 	add.w	r3, r7, #12
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3308      	adds	r3, #8
 8004d9a:	ed93 7b00 	vldr	d7, [r3]
 8004d9e:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8005150 <IVK+0x3628>
 8004da2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004da6:	eeb0 0b47 	vmov.f64	d0, d7
 8004daa:	f012 fba1 	bl	80174f0 <cos>
 8004dae:	eeb0 7b40 	vmov.f64	d7, d0
	                 190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004db2:	ee29 9b07 	vmul.f64	d9, d9, d7
	                     cos(q[1] + 1.6845) * cos(q[0])) +
 8004db6:	f107 030c 	add.w	r3, r7, #12
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	ed93 7b00 	vldr	d7, [r3]
 8004dc0:	eeb0 0b47 	vmov.f64	d0, d7
 8004dc4:	f012 fb94 	bl	80174f0 <cos>
 8004dc8:	eeb0 7b40 	vmov.f64	d7, d0
 8004dcc:	ee29 7b07 	vmul.f64	d7, d9, d7
	                      sin(q[1] + 1.6845) * cos(q[0])) +
 8004dd0:	ee38 6b07 	vadd.f64	d6, d8, d7
	                     cos(q[1] + 1.6845) * cos(q[0])) +
 8004dd4:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 8004dd8:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d16) +
 8004ddc:	ed97 7b40 	vldr	d7, [r7, #256]	; 0x100
 8004de0:	ee36 8b07 	vadd.f64	d8, d6, d7
	               d17) +
	              87600.0 *
	                  cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004de4:	f107 030c 	add.w	r3, r7, #12
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3308      	adds	r3, #8
 8004dec:	ed93 6b00 	vldr	d6, [r3]
 8004df0:	f107 030c 	add.w	r3, r7, #12
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3310      	adds	r3, #16
 8004df8:	ed93 7b00 	vldr	d7, [r3]
 8004dfc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004e00:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004e04:	f107 030c 	add.w	r3, r7, #12
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3318      	adds	r3, #24
 8004e0c:	ed93 7b00 	vldr	d7, [r3]
 8004e10:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004e14:	ed9f 6bce 	vldr	d6, [pc, #824]	; 8005150 <IVK+0x3628>
 8004e18:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e1c:	ed9f 6bdc 	vldr	d6, [pc, #880]	; 8005190 <IVK+0x3668>
 8004e20:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004e24:	ed9f 6bd6 	vldr	d6, [pc, #856]	; 8005180 <IVK+0x3658>
 8004e28:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004e2c:	ed9f 6bd2 	vldr	d6, [pc, #840]	; 8005178 <IVK+0x3650>
 8004e30:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e34:	eeb0 0b47 	vmov.f64	d0, d7
 8004e38:	f012 fb5a 	bl	80174f0 <cos>
 8004e3c:	eeb0 7b40 	vmov.f64	d7, d0
	              87600.0 *
 8004e40:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 8005158 <IVK+0x3630>
 8004e44:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004e48:	f107 030c 	add.w	r3, r7, #12
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3308      	adds	r3, #8
 8004e50:	ed93 6b00 	vldr	d6, [r3]
 8004e54:	f107 030c 	add.w	r3, r7, #12
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	3310      	adds	r3, #16
 8004e5c:	ed93 7b00 	vldr	d7, [r3]
 8004e60:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004e64:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004e68:	f107 030c 	add.w	r3, r7, #12
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3318      	adds	r3, #24
 8004e70:	ed93 7b00 	vldr	d7, [r3]
 8004e74:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004e78:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 8005150 <IVK+0x3628>
 8004e7c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e80:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8005190 <IVK+0x3668>
 8004e84:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004e88:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8005180 <IVK+0x3658>
 8004e8c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004e90:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8005178 <IVK+0x3650>
 8004e94:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e98:	eeb0 0b47 	vmov.f64	d0, d7
 8004e9c:	f012 fb7c 	bl	8017598 <sin>
 8004ea0:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 8004ea4:	ee29 9b07 	vmul.f64	d9, d9, d7
	                       -0.73665) +
	                      1.52205) *
	                  cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 8004ea8:	f107 030c 	add.w	r3, r7, #12
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3308      	adds	r3, #8
 8004eb0:	ed93 6b00 	vldr	d6, [r3]
 8004eb4:	f107 030c 	add.w	r3, r7, #12
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3310      	adds	r3, #16
 8004ebc:	ed93 7b00 	vldr	d7, [r3]
 8004ec0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004ec4:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8005150 <IVK+0x3628>
 8004ec8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004ecc:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8005190 <IVK+0x3668>
 8004ed0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004ed4:	eeb0 0b47 	vmov.f64	d0, d7
 8004ed8:	f012 fb0a 	bl	80174f0 <cos>
 8004edc:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 8004ee0:	ee29 9b07 	vmul.f64	d9, d9, d7
	                  cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 8004ee4:	f107 030c 	add.w	r3, r7, #12
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	ed93 7b00 	vldr	d7, [r3]
 8004eee:	eeb0 0b47 	vmov.f64	d0, d7
 8004ef2:	f012 fb51 	bl	8017598 <sin>
 8004ef6:	eeb0 7b40 	vmov.f64	d7, d0
 8004efa:	ee29 7b07 	vmul.f64	d7, d9, d7
	               d17) +
 8004efe:	ee38 8b07 	vadd.f64	d8, d8, d7
	             1.02865176E+6 *
	                 cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004f02:	f107 030c 	add.w	r3, r7, #12
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3308      	adds	r3, #8
 8004f0a:	ed93 6b00 	vldr	d6, [r3]
 8004f0e:	f107 030c 	add.w	r3, r7, #12
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	3310      	adds	r3, #16
 8004f16:	ed93 7b00 	vldr	d7, [r3]
 8004f1a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004f1e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004f22:	f107 030c 	add.w	r3, r7, #12
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3318      	adds	r3, #24
 8004f2a:	ed93 7b00 	vldr	d7, [r3]
 8004f2e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f32:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8005150 <IVK+0x3628>
 8004f36:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004f3a:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8005190 <IVK+0x3668>
 8004f3e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004f42:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8005180 <IVK+0x3658>
 8004f46:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004f4a:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8005178 <IVK+0x3650>
 8004f4e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004f52:	eeb0 0b47 	vmov.f64	d0, d7
 8004f56:	f012 facb 	bl	80174f0 <cos>
 8004f5a:	eeb0 7b40 	vmov.f64	d7, d0
	             1.02865176E+6 *
 8004f5e:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8005160 <IVK+0x3638>
 8004f62:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      -0.73665) +
	                     1.52205) *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004f66:	f107 030c 	add.w	r3, r7, #12
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3308      	adds	r3, #8
 8004f6e:	ed93 6b00 	vldr	d6, [r3]
 8004f72:	f107 030c 	add.w	r3, r7, #12
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3310      	adds	r3, #16
 8004f7a:	ed93 7b00 	vldr	d7, [r3]
 8004f7e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004f82:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004f86:	f107 030c 	add.w	r3, r7, #12
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3318      	adds	r3, #24
 8004f8e:	ed93 7b00 	vldr	d7, [r3]
 8004f92:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f96:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8005150 <IVK+0x3628>
 8004f9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004f9e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8005190 <IVK+0x3668>
 8004fa2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004fa6:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8005180 <IVK+0x3658>
 8004faa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004fae:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8005178 <IVK+0x3650>
 8004fb2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004fb6:	eeb0 0b47 	vmov.f64	d0, d7
 8004fba:	f012 faed 	bl	8017598 <sin>
 8004fbe:	eeb0 7b40 	vmov.f64	d7, d0
	                     1.52205) *
 8004fc2:	ee29 9b07 	vmul.f64	d9, d9, d7
	                      -0.73665) +
	                     1.52205) *
	                 cos(q[1] + 1.6845) * sin(q[0])) +
 8004fc6:	f107 030c 	add.w	r3, r7, #12
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3308      	adds	r3, #8
 8004fce:	ed93 7b00 	vldr	d7, [r3]
 8004fd2:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8005150 <IVK+0x3628>
 8004fd6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004fda:	eeb0 0b47 	vmov.f64	d0, d7
 8004fde:	f012 fa87 	bl	80174f0 <cos>
 8004fe2:	eeb0 7b40 	vmov.f64	d7, d0
	                     1.52205) *
 8004fe6:	ee29 9b07 	vmul.f64	d9, d9, d7
	                 cos(q[1] + 1.6845) * sin(q[0])) +
 8004fea:	f107 030c 	add.w	r3, r7, #12
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	ed93 7b00 	vldr	d7, [r3]
 8004ff4:	eeb0 0b47 	vmov.f64	d0, d7
 8004ff8:	f012 face 	bl	8017598 <sin>
 8004ffc:	eeb0 7b40 	vmov.f64	d7, d0
 8005000:	ee29 7b07 	vmul.f64	d7, d9, d7
	                  cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 8005004:	ee38 8b07 	vadd.f64	d8, d8, d7
	            246292.8 *
	                sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005008:	f107 030c 	add.w	r3, r7, #12
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3308      	adds	r3, #8
 8005010:	ed93 6b00 	vldr	d6, [r3]
 8005014:	f107 030c 	add.w	r3, r7, #12
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3310      	adds	r3, #16
 800501c:	ed93 7b00 	vldr	d7, [r3]
 8005020:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005024:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005028:	f107 030c 	add.w	r3, r7, #12
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3318      	adds	r3, #24
 8005030:	ed93 7b00 	vldr	d7, [r3]
 8005034:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005038:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8005150 <IVK+0x3628>
 800503c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005040:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8005190 <IVK+0x3668>
 8005044:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005048:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8005180 <IVK+0x3658>
 800504c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005050:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8005178 <IVK+0x3650>
 8005054:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005058:	eeb0 0b47 	vmov.f64	d0, d7
 800505c:	f012 fa9c 	bl	8017598 <sin>
 8005060:	eeb0 7b40 	vmov.f64	d7, d0
	            246292.8 *
 8005064:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8005168 <IVK+0x3640>
 8005068:	ee27 9b06 	vmul.f64	d9, d7, d6
	                     -0.73665) +
	                    1.52205) *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800506c:	f107 030c 	add.w	r3, r7, #12
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3308      	adds	r3, #8
 8005074:	ed93 6b00 	vldr	d6, [r3]
 8005078:	f107 030c 	add.w	r3, r7, #12
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	3310      	adds	r3, #16
 8005080:	ed93 7b00 	vldr	d7, [r3]
 8005084:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005088:	ee36 7b07 	vadd.f64	d7, d6, d7
 800508c:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8005150 <IVK+0x3628>
 8005090:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005094:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8005190 <IVK+0x3668>
 8005098:	ee37 7b46 	vsub.f64	d7, d7, d6
 800509c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8005180 <IVK+0x3658>
 80050a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80050a4:	eeb0 0b47 	vmov.f64	d0, d7
 80050a8:	f012 fa22 	bl	80174f0 <cos>
 80050ac:	eeb0 7b40 	vmov.f64	d7, d0
	                    1.52205) *
 80050b0:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) -
 80050b4:	f107 030c 	add.w	r3, r7, #12
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3308      	adds	r3, #8
 80050bc:	ed93 6b00 	vldr	d6, [r3]
 80050c0:	f107 030c 	add.w	r3, r7, #12
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3310      	adds	r3, #16
 80050c8:	ed93 7b00 	vldr	d7, [r3]
 80050cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80050d0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8005150 <IVK+0x3628>
 80050d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80050d8:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8005190 <IVK+0x3668>
 80050dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80050e0:	eeb0 0b47 	vmov.f64	d0, d7
 80050e4:	f012 fa58 	bl	8017598 <sin>
 80050e8:	eeb0 7b40 	vmov.f64	d7, d0
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80050ec:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) -
 80050f0:	f107 030c 	add.w	r3, r7, #12
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	ed93 7b00 	vldr	d7, [r3]
 80050fa:	eeb0 0b47 	vmov.f64	d0, d7
 80050fe:	f012 fa4b 	bl	8017598 <sin>
 8005102:	eeb0 7b40 	vmov.f64	d7, d0
 8005106:	ee29 7b07 	vmul.f64	d7, d9, d7
	                 cos(q[1] + 1.6845) * sin(q[0])) +
 800510a:	ee38 8b07 	vadd.f64	d8, d8, d7
	           246292.8 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800510e:	f107 030c 	add.w	r3, r7, #12
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3308      	adds	r3, #8
 8005116:	ed93 6b00 	vldr	d6, [r3]
 800511a:	f107 030c 	add.w	r3, r7, #12
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3310      	adds	r3, #16
 8005122:	ed93 7b00 	vldr	d7, [r3]
 8005126:	ee37 7b07 	vadd.f64	d7, d7, d7
 800512a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800512e:	f107 030c 	add.w	r3, r7, #12
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3318      	adds	r3, #24
 8005136:	ed93 7b00 	vldr	d7, [r3]
 800513a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800513e:	ed9f 6b04 	vldr	d6, [pc, #16]	; 8005150 <IVK+0x3628>
 8005142:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005146:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8005190 <IVK+0x3668>
 800514a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800514e:	e027      	b.n	80051a0 <IVK+0x3678>
 8005150:	45a1cac1 	.word	0x45a1cac1
 8005154:	3ffaf3b6 	.word	0x3ffaf3b6
 8005158:	00000000 	.word	0x00000000
 800515c:	40f56300 	.word	0x40f56300
 8005160:	851eb852 	.word	0x851eb852
 8005164:	412f6457 	.word	0x412f6457
 8005168:	66666666 	.word	0x66666666
 800516c:	410e10a6 	.word	0x410e10a6
 8005170:	eaa8eb47 	.word	0xeaa8eb47
 8005174:	414610aa 	.word	0x414610aa
 8005178:	19ce075f 	.word	0x19ce075f
 800517c:	3ff85a51 	.word	0x3ff85a51
 8005180:	05532618 	.word	0x05532618
 8005184:	3fe792a3 	.word	0x3fe792a3
 8005188:	66666667 	.word	0x66666667
 800518c:	4109cd36 	.word	0x4109cd36
 8005190:	39581062 	.word	0x39581062
 8005194:	3fecc8b4 	.word	0x3fecc8b4
 8005198:	45a1cac1 	.word	0x45a1cac1
 800519c:	3ffaf3b6 	.word	0x3ffaf3b6
 80051a0:	ed1f 6b09 	vldr	d6, [pc, #-36]	; 8005180 <IVK+0x3658>
 80051a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80051a8:	ed1f 6b0d 	vldr	d6, [pc, #-52]	; 8005178 <IVK+0x3650>
 80051ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80051b0:	eeb0 0b47 	vmov.f64	d0, d7
 80051b4:	f012 f9f0 	bl	8017598 <sin>
 80051b8:	eeb0 7b40 	vmov.f64	d7, d0
	           246292.8 *
 80051bc:	ed1f 6b16 	vldr	d6, [pc, #-88]	; 8005168 <IVK+0x3640>
 80051c0:	ee27 9b06 	vmul.f64	d9, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80051c4:	f107 030c 	add.w	r3, r7, #12
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3308      	adds	r3, #8
 80051cc:	ed93 6b00 	vldr	d6, [r3]
 80051d0:	f107 030c 	add.w	r3, r7, #12
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3310      	adds	r3, #16
 80051d8:	ed93 7b00 	vldr	d7, [r3]
 80051dc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80051e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051e4:	ed1f 6b14 	vldr	d6, [pc, #-80]	; 8005198 <IVK+0x3670>
 80051e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80051ec:	ed1f 6b18 	vldr	d6, [pc, #-96]	; 8005190 <IVK+0x3668>
 80051f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80051f4:	ed1f 6b1e 	vldr	d6, [pc, #-120]	; 8005180 <IVK+0x3658>
 80051f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80051fc:	eeb0 0b47 	vmov.f64	d0, d7
 8005200:	f012 f9ca 	bl	8017598 <sin>
 8005204:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 8005208:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 800520c:	f107 030c 	add.w	r3, r7, #12
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3308      	adds	r3, #8
 8005214:	ed93 6b00 	vldr	d6, [r3]
 8005218:	f107 030c 	add.w	r3, r7, #12
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	3310      	adds	r3, #16
 8005220:	ed93 7b00 	vldr	d7, [r3]
 8005224:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005228:	ed1f 6b25 	vldr	d6, [pc, #-148]	; 8005198 <IVK+0x3670>
 800522c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005230:	ed1f 6b29 	vldr	d6, [pc, #-164]	; 8005190 <IVK+0x3668>
 8005234:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005238:	eeb0 0b47 	vmov.f64	d0, d7
 800523c:	f012 f958 	bl	80174f0 <cos>
 8005240:	eeb0 7b40 	vmov.f64	d7, d0
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005244:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 8005248:	f107 030c 	add.w	r3, r7, #12
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	ed93 7b00 	vldr	d7, [r3]
 8005252:	eeb0 0b47 	vmov.f64	d0, d7
 8005256:	f012 f99f 	bl	8017598 <sin>
 800525a:	eeb0 7b40 	vmov.f64	d7, d0
 800525e:	ee29 7b07 	vmul.f64	d7, d9, d7
	                sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) -
 8005262:	ee38 8b47 	vsub.f64	d8, d8, d7
	          2.8921178332800004E+6 *
	              sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005266:	f107 030c 	add.w	r3, r7, #12
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3308      	adds	r3, #8
 800526e:	ed93 6b00 	vldr	d6, [r3]
 8005272:	f107 030c 	add.w	r3, r7, #12
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3310      	adds	r3, #16
 800527a:	ed93 7b00 	vldr	d7, [r3]
 800527e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005282:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005286:	f107 030c 	add.w	r3, r7, #12
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3318      	adds	r3, #24
 800528e:	ed93 7b00 	vldr	d7, [r3]
 8005292:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005296:	ed1f 6b40 	vldr	d6, [pc, #-256]	; 8005198 <IVK+0x3670>
 800529a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800529e:	ed1f 6b44 	vldr	d6, [pc, #-272]	; 8005190 <IVK+0x3668>
 80052a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80052a6:	ed1f 6b4a 	vldr	d6, [pc, #-296]	; 8005180 <IVK+0x3658>
 80052aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80052ae:	ed1f 6b4e 	vldr	d6, [pc, #-312]	; 8005178 <IVK+0x3650>
 80052b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80052b6:	eeb0 0b47 	vmov.f64	d0, d7
 80052ba:	f012 f96d 	bl	8017598 <sin>
 80052be:	eeb0 7b40 	vmov.f64	d7, d0
	          2.8921178332800004E+6 *
 80052c2:	ed1f 6b55 	vldr	d6, [pc, #-340]	; 8005170 <IVK+0x3648>
 80052c6:	ee27 9b06 	vmul.f64	d9, d7, d6
	                   -0.73665) +
	                  1.52205) *
	              cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80052ca:	f107 030c 	add.w	r3, r7, #12
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3308      	adds	r3, #8
 80052d2:	ed93 6b00 	vldr	d6, [r3]
 80052d6:	f107 030c 	add.w	r3, r7, #12
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3310      	adds	r3, #16
 80052de:	ed93 7b00 	vldr	d7, [r3]
 80052e2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80052e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80052ea:	ed1f 6b55 	vldr	d6, [pc, #-340]	; 8005198 <IVK+0x3670>
 80052ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 80052f2:	ed1f 6b59 	vldr	d6, [pc, #-356]	; 8005190 <IVK+0x3668>
 80052f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80052fa:	ed1f 6b5f 	vldr	d6, [pc, #-380]	; 8005180 <IVK+0x3658>
 80052fe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005302:	eeb0 0b47 	vmov.f64	d0, d7
 8005306:	f012 f8f3 	bl	80174f0 <cos>
 800530a:	eeb0 7b40 	vmov.f64	d7, d0
	                  1.52205) *
 800530e:	ee29 9b07 	vmul.f64	d9, d9, d7
	              sin(q[1] + 1.6845) * sin(q[0])) -
 8005312:	f107 030c 	add.w	r3, r7, #12
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3308      	adds	r3, #8
 800531a:	ed93 7b00 	vldr	d7, [r3]
 800531e:	ed1f 6b62 	vldr	d6, [pc, #-392]	; 8005198 <IVK+0x3670>
 8005322:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005326:	eeb0 0b47 	vmov.f64	d0, d7
 800532a:	f012 f935 	bl	8017598 <sin>
 800532e:	eeb0 7b40 	vmov.f64	d7, d0
	              cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005332:	ee29 9b07 	vmul.f64	d9, d9, d7
	              sin(q[1] + 1.6845) * sin(q[0])) -
 8005336:	f107 030c 	add.w	r3, r7, #12
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	ed93 7b00 	vldr	d7, [r3]
 8005340:	eeb0 0b47 	vmov.f64	d0, d7
 8005344:	f012 f928 	bl	8017598 <sin>
 8005348:	eeb0 7b40 	vmov.f64	d7, d0
 800534c:	ee29 7b07 	vmul.f64	d7, d9, d7
	               cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 8005350:	ee38 8b07 	vadd.f64	d8, d8, d7
	         2.8921178332800004E+6 *
	             sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005354:	f107 030c 	add.w	r3, r7, #12
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3308      	adds	r3, #8
 800535c:	ed93 6b00 	vldr	d6, [r3]
 8005360:	f107 030c 	add.w	r3, r7, #12
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3310      	adds	r3, #16
 8005368:	ed93 7b00 	vldr	d7, [r3]
 800536c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005370:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005374:	f107 030c 	add.w	r3, r7, #12
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3318      	adds	r3, #24
 800537c:	ed93 7b00 	vldr	d7, [r3]
 8005380:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005384:	ed1f 6b7c 	vldr	d6, [pc, #-496]	; 8005198 <IVK+0x3670>
 8005388:	ee37 7b06 	vadd.f64	d7, d7, d6
 800538c:	ed1f 6b80 	vldr	d6, [pc, #-512]	; 8005190 <IVK+0x3668>
 8005390:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005394:	ed1f 6b86 	vldr	d6, [pc, #-536]	; 8005180 <IVK+0x3658>
 8005398:	ee37 7b46 	vsub.f64	d7, d7, d6
 800539c:	ed1f 6b8a 	vldr	d6, [pc, #-552]	; 8005178 <IVK+0x3650>
 80053a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80053a4:	eeb0 0b47 	vmov.f64	d0, d7
 80053a8:	f012 f8f6 	bl	8017598 <sin>
 80053ac:	eeb0 7b40 	vmov.f64	d7, d0
	         2.8921178332800004E+6 *
 80053b0:	ed1f 6b91 	vldr	d6, [pc, #-580]	; 8005170 <IVK+0x3648>
 80053b4:	ee27 9b06 	vmul.f64	d9, d7, d6
	                  -0.73665) +
	                 1.52205) *
	             sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80053b8:	f107 030c 	add.w	r3, r7, #12
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3308      	adds	r3, #8
 80053c0:	ed93 6b00 	vldr	d6, [r3]
 80053c4:	f107 030c 	add.w	r3, r7, #12
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3310      	adds	r3, #16
 80053cc:	ed93 7b00 	vldr	d7, [r3]
 80053d0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80053d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80053d8:	ed1f 6b91 	vldr	d6, [pc, #-580]	; 8005198 <IVK+0x3670>
 80053dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80053e0:	ed1f 6b95 	vldr	d6, [pc, #-596]	; 8005190 <IVK+0x3668>
 80053e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80053e8:	ed1f 6b9b 	vldr	d6, [pc, #-620]	; 8005180 <IVK+0x3658>
 80053ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80053f0:	eeb0 0b47 	vmov.f64	d0, d7
 80053f4:	f012 f8d0 	bl	8017598 <sin>
 80053f8:	eeb0 7b40 	vmov.f64	d7, d0
	                 1.52205) *
 80053fc:	ee29 9b07 	vmul.f64	d9, d9, d7
	             cos(q[1] + 1.6845) * sin(q[0])) +
 8005400:	f107 030c 	add.w	r3, r7, #12
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3308      	adds	r3, #8
 8005408:	ed93 7b00 	vldr	d7, [r3]
 800540c:	ed1f 6b9e 	vldr	d6, [pc, #-632]	; 8005198 <IVK+0x3670>
 8005410:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005414:	eeb0 0b47 	vmov.f64	d0, d7
 8005418:	f012 f86a 	bl	80174f0 <cos>
 800541c:	eeb0 7b40 	vmov.f64	d7, d0
	             sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005420:	ee29 9b07 	vmul.f64	d9, d9, d7
	             cos(q[1] + 1.6845) * sin(q[0])) +
 8005424:	f107 030c 	add.w	r3, r7, #12
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	ed93 7b00 	vldr	d7, [r3]
 800542e:	eeb0 0b47 	vmov.f64	d0, d7
 8005432:	f012 f8b1 	bl	8017598 <sin>
 8005436:	eeb0 7b40 	vmov.f64	d7, d0
 800543a:	ee29 7b07 	vmul.f64	d7, d9, d7
	              sin(q[1] + 1.6845) * sin(q[0])) -
 800543e:	ee38 8b47 	vsub.f64	d8, d8, d7
	        211366.80000000002 *
	            sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005442:	f107 030c 	add.w	r3, r7, #12
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	3308      	adds	r3, #8
 800544a:	ed93 6b00 	vldr	d6, [r3]
 800544e:	f107 030c 	add.w	r3, r7, #12
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3310      	adds	r3, #16
 8005456:	ed93 7b00 	vldr	d7, [r3]
 800545a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800545e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005462:	f107 030c 	add.w	r3, r7, #12
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3318      	adds	r3, #24
 800546a:	ed93 7b00 	vldr	d7, [r3]
 800546e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005472:	ed1f 6bb7 	vldr	d6, [pc, #-732]	; 8005198 <IVK+0x3670>
 8005476:	ee37 7b06 	vadd.f64	d7, d7, d6
 800547a:	ed1f 6bbb 	vldr	d6, [pc, #-748]	; 8005190 <IVK+0x3668>
 800547e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005482:	ed1f 6bc1 	vldr	d6, [pc, #-772]	; 8005180 <IVK+0x3658>
 8005486:	ee37 7b46 	vsub.f64	d7, d7, d6
 800548a:	ed1f 6bc5 	vldr	d6, [pc, #-788]	; 8005178 <IVK+0x3650>
 800548e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005492:	eeb0 0b47 	vmov.f64	d0, d7
 8005496:	f012 f87f 	bl	8017598 <sin>
 800549a:	eeb0 7b40 	vmov.f64	d7, d0
	        211366.80000000002 *
 800549e:	ed1f 6bc6 	vldr	d6, [pc, #-792]	; 8005188 <IVK+0x3660>
 80054a2:	ee27 9b06 	vmul.f64	d9, d7, d6
	                 -0.73665) +
	                1.52205) *
	            cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 80054a6:	f107 030c 	add.w	r3, r7, #12
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3308      	adds	r3, #8
 80054ae:	ed93 6b00 	vldr	d6, [r3]
 80054b2:	f107 030c 	add.w	r3, r7, #12
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	3310      	adds	r3, #16
 80054ba:	ed93 7b00 	vldr	d7, [r3]
 80054be:	ee36 7b07 	vadd.f64	d7, d6, d7
 80054c2:	ed1f 6bcb 	vldr	d6, [pc, #-812]	; 8005198 <IVK+0x3670>
 80054c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80054ca:	ed1f 6bcf 	vldr	d6, [pc, #-828]	; 8005190 <IVK+0x3668>
 80054ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 80054d2:	eeb0 0b47 	vmov.f64	d0, d7
 80054d6:	f012 f80b 	bl	80174f0 <cos>
 80054da:	eeb0 7b40 	vmov.f64	d7, d0
	                1.52205) *
 80054de:	ee29 9b07 	vmul.f64	d9, d9, d7
	            cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 80054e2:	f107 030c 	add.w	r3, r7, #12
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3308      	adds	r3, #8
 80054ea:	ed93 7b00 	vldr	d7, [r3]
 80054ee:	ed1f 6bd6 	vldr	d6, [pc, #-856]	; 8005198 <IVK+0x3670>
 80054f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80054f6:	eeb0 0b47 	vmov.f64	d0, d7
 80054fa:	f012 f84d 	bl	8017598 <sin>
 80054fe:	eeb0 7b40 	vmov.f64	d7, d0
 8005502:	ee29 9b07 	vmul.f64	d9, d9, d7
	            sin(q[0])) -
 8005506:	f107 030c 	add.w	r3, r7, #12
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	ed93 7b00 	vldr	d7, [r3]
 8005510:	eeb0 0b47 	vmov.f64	d0, d7
 8005514:	f012 f840 	bl	8017598 <sin>
 8005518:	eeb0 7b40 	vmov.f64	d7, d0
	            cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 800551c:	ee29 7b07 	vmul.f64	d7, d9, d7
	             cos(q[1] + 1.6845) * sin(q[0])) +
 8005520:	ee38 8b07 	vadd.f64	d8, d8, d7
	       211366.80000000002 *
	           sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005524:	f107 030c 	add.w	r3, r7, #12
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3308      	adds	r3, #8
 800552c:	ed93 6b00 	vldr	d6, [r3]
 8005530:	f107 030c 	add.w	r3, r7, #12
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3310      	adds	r3, #16
 8005538:	ed93 7b00 	vldr	d7, [r3]
 800553c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005540:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005544:	f107 030c 	add.w	r3, r7, #12
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3318      	adds	r3, #24
 800554c:	ed93 7b00 	vldr	d7, [r3]
 8005550:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005554:	ed1f 6bf0 	vldr	d6, [pc, #-960]	; 8005198 <IVK+0x3670>
 8005558:	ee37 7b06 	vadd.f64	d7, d7, d6
 800555c:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8005920 <IVK+0x3df8>
 8005560:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005564:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8005928 <IVK+0x3e00>
 8005568:	ee37 7b46 	vsub.f64	d7, d7, d6
 800556c:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8005930 <IVK+0x3e08>
 8005570:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005574:	eeb0 0b47 	vmov.f64	d0, d7
 8005578:	f012 f80e 	bl	8017598 <sin>
 800557c:	eeb0 7b40 	vmov.f64	d7, d0
	       211366.80000000002 *
 8005580:	ed9f 6bed 	vldr	d6, [pc, #948]	; 8005938 <IVK+0x3e10>
 8005584:	ee27 9b06 	vmul.f64	d9, d7, d6
	                -0.73665) +
	               1.52205) *
	           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8005588:	f107 030c 	add.w	r3, r7, #12
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3308      	adds	r3, #8
 8005590:	ed93 6b00 	vldr	d6, [r3]
 8005594:	f107 030c 	add.w	r3, r7, #12
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3310      	adds	r3, #16
 800559c:	ed93 7b00 	vldr	d7, [r3]
 80055a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80055a4:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8005958 <IVK+0x3e30>
 80055a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80055ac:	ed9f 6bdc 	vldr	d6, [pc, #880]	; 8005920 <IVK+0x3df8>
 80055b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80055b4:	eeb0 0b47 	vmov.f64	d0, d7
 80055b8:	f011 ffee 	bl	8017598 <sin>
 80055bc:	eeb0 7b40 	vmov.f64	d7, d0
	               1.52205) *
 80055c0:	ee29 9b07 	vmul.f64	d9, d9, d7
	           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 80055c4:	f107 030c 	add.w	r3, r7, #12
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	3308      	adds	r3, #8
 80055cc:	ed93 7b00 	vldr	d7, [r3]
 80055d0:	ed9f 6be1 	vldr	d6, [pc, #900]	; 8005958 <IVK+0x3e30>
 80055d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80055d8:	eeb0 0b47 	vmov.f64	d0, d7
 80055dc:	f011 ff88 	bl	80174f0 <cos>
 80055e0:	eeb0 7b40 	vmov.f64	d7, d0
 80055e4:	ee29 9b07 	vmul.f64	d9, d9, d7
	           sin(q[0])) /
 80055e8:	f107 030c 	add.w	r3, r7, #12
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	ed93 7b00 	vldr	d7, [r3]
 80055f2:	eeb0 0b47 	vmov.f64	d0, d7
 80055f6:	f011 ffcf 	bl	8017598 <sin>
 80055fa:	eeb0 7b40 	vmov.f64	d7, d0
	           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 80055fe:	ee29 7b07 	vmul.f64	d7, d9, d7
	            sin(q[0])) -
 8005602:	ee38 7b47 	vsub.f64	d7, d8, d7
	      4.0 *
 8005606:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800560a:	ee27 5b06 	vmul.f64	d5, d7, d6
	           sin(q[0])) /
 800560e:	ed97 6b7a 	vldr	d6, [r7, #488]	; 0x1e8
 8005612:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[4] =
 8005616:	f107 0310 	add.w	r3, r7, #16
 800561a:	ed83 7b08 	vstr	d7, [r3, #32]
	      d;
	  dv[9] =
	      -(4.0 *
	        (((((((((((((((221663.52 *
	                           cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 800561e:	f107 030c 	add.w	r3, r7, #12
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3308      	adds	r3, #8
 8005626:	ed93 6b00 	vldr	d6, [r3]
 800562a:	f107 030c 	add.w	r3, r7, #12
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3310      	adds	r3, #16
 8005632:	ed93 7b00 	vldr	d7, [r3]
 8005636:	ee37 7b07 	vadd.f64	d7, d7, d7
 800563a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800563e:	ed9f 6bc6 	vldr	d6, [pc, #792]	; 8005958 <IVK+0x3e30>
 8005642:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005646:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8005920 <IVK+0x3df8>
 800564a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800564e:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8005928 <IVK+0x3e00>
 8005652:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005656:	eeb0 0b47 	vmov.f64	d0, d7
 800565a:	f011 ff49 	bl	80174f0 <cos>
 800565e:	eeb0 7b40 	vmov.f64	d7, d0
	        (((((((((((((((221663.52 *
 8005662:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8005940 <IVK+0x3e18>
 8005666:	ee27 8b06 	vmul.f64	d8, d7, d6
	                               -0.73665) *
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) -
 800566a:	f107 030c 	add.w	r3, r7, #12
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	3308      	adds	r3, #8
 8005672:	ed93 6b00 	vldr	d6, [r3]
 8005676:	f107 030c 	add.w	r3, r7, #12
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3310      	adds	r3, #16
 800567e:	ed93 7b00 	vldr	d7, [r3]
 8005682:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005686:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8005958 <IVK+0x3e30>
 800568a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800568e:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8005920 <IVK+0x3df8>
 8005692:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005696:	eeb0 0b47 	vmov.f64	d0, d7
 800569a:	f011 ff7d 	bl	8017598 <sin>
 800569e:	eeb0 7b40 	vmov.f64	d7, d0
	                               -0.73665) *
 80056a2:	ee28 8b07 	vmul.f64	d8, d8, d7
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) -
 80056a6:	f107 030c 	add.w	r3, r7, #12
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	ed93 7b00 	vldr	d7, [r3]
 80056b0:	eeb0 0b47 	vmov.f64	d0, d7
 80056b4:	f011 ff70 	bl	8017598 <sin>
 80056b8:	eeb0 7b40 	vmov.f64	d7, d0
 80056bc:	ee28 8b07 	vmul.f64	d8, d8, d7
	                       221663.52 *
	                           sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 80056c0:	f107 030c 	add.w	r3, r7, #12
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	3308      	adds	r3, #8
 80056c8:	ed93 6b00 	vldr	d6, [r3]
 80056cc:	f107 030c 	add.w	r3, r7, #12
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3310      	adds	r3, #16
 80056d4:	ed93 7b00 	vldr	d7, [r3]
 80056d8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80056dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80056e0:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8005958 <IVK+0x3e30>
 80056e4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80056e8:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8005920 <IVK+0x3df8>
 80056ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80056f0:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8005928 <IVK+0x3e00>
 80056f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80056f8:	eeb0 0b47 	vmov.f64	d0, d7
 80056fc:	f011 ff4c 	bl	8017598 <sin>
 8005700:	eeb0 7b40 	vmov.f64	d7, d0
	                       221663.52 *
 8005704:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 8005940 <IVK+0x3e18>
 8005708:	ee27 9b06 	vmul.f64	d9, d7, d6
	                               -0.73665) *
	                           cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800570c:	f107 030c 	add.w	r3, r7, #12
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3308      	adds	r3, #8
 8005714:	ed93 6b00 	vldr	d6, [r3]
 8005718:	f107 030c 	add.w	r3, r7, #12
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3310      	adds	r3, #16
 8005720:	ed93 7b00 	vldr	d7, [r3]
 8005724:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005728:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8005958 <IVK+0x3e30>
 800572c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005730:	ed9f 6b7b 	vldr	d6, [pc, #492]	; 8005920 <IVK+0x3df8>
 8005734:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005738:	eeb0 0b47 	vmov.f64	d0, d7
 800573c:	f011 fed8 	bl	80174f0 <cos>
 8005740:	eeb0 7b40 	vmov.f64	d7, d0
	                               -0.73665) *
 8005744:	ee29 9b07 	vmul.f64	d9, d9, d7
	                           sin(q[0])) +
 8005748:	f107 030c 	add.w	r3, r7, #12
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	ed93 7b00 	vldr	d7, [r3]
 8005752:	eeb0 0b47 	vmov.f64	d0, d7
 8005756:	f011 ff1f 	bl	8017598 <sin>
 800575a:	eeb0 7b40 	vmov.f64	d7, d0
	                           cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800575e:	ee29 7b07 	vmul.f64	d7, d9, d7
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) -
 8005762:	ee38 8b47 	vsub.f64	d8, d8, d7
	                      2.6029060499520004E+6 *
	                          cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8005766:	f107 030c 	add.w	r3, r7, #12
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	3308      	adds	r3, #8
 800576e:	ed93 6b00 	vldr	d6, [r3]
 8005772:	f107 030c 	add.w	r3, r7, #12
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3310      	adds	r3, #16
 800577a:	ed93 7b00 	vldr	d7, [r3]
 800577e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005782:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005786:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8005958 <IVK+0x3e30>
 800578a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800578e:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8005920 <IVK+0x3df8>
 8005792:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005796:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8005928 <IVK+0x3e00>
 800579a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800579e:	eeb0 0b47 	vmov.f64	d0, d7
 80057a2:	f011 fea5 	bl	80174f0 <cos>
 80057a6:	eeb0 7b40 	vmov.f64	d7, d0
	                      2.6029060499520004E+6 *
 80057aa:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8005948 <IVK+0x3e20>
 80057ae:	ee27 9b06 	vmul.f64	d9, d7, d6
	                              -0.73665) *
	                          sin(q[1] + 1.6845) * sin(q[0])) -
 80057b2:	f107 030c 	add.w	r3, r7, #12
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3308      	adds	r3, #8
 80057ba:	ed93 7b00 	vldr	d7, [r3]
 80057be:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8005958 <IVK+0x3e30>
 80057c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80057c6:	eeb0 0b47 	vmov.f64	d0, d7
 80057ca:	f011 fee5 	bl	8017598 <sin>
 80057ce:	eeb0 7b40 	vmov.f64	d7, d0
	                              -0.73665) *
 80057d2:	ee29 9b07 	vmul.f64	d9, d9, d7
	                          sin(q[1] + 1.6845) * sin(q[0])) -
 80057d6:	f107 030c 	add.w	r3, r7, #12
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	ed93 7b00 	vldr	d7, [r3]
 80057e0:	eeb0 0b47 	vmov.f64	d0, d7
 80057e4:	f011 fed8 	bl	8017598 <sin>
 80057e8:	eeb0 7b40 	vmov.f64	d7, d0
 80057ec:	ee29 7b07 	vmul.f64	d7, d9, d7
	                           sin(q[0])) +
 80057f0:	ee38 8b07 	vadd.f64	d8, d8, d7
	                     2.6029060499520004E+6 *
	                         sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 80057f4:	f107 030c 	add.w	r3, r7, #12
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3308      	adds	r3, #8
 80057fc:	ed93 6b00 	vldr	d6, [r3]
 8005800:	f107 030c 	add.w	r3, r7, #12
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3310      	adds	r3, #16
 8005808:	ed93 7b00 	vldr	d7, [r3]
 800580c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005810:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005814:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8005958 <IVK+0x3e30>
 8005818:	ee37 7b06 	vadd.f64	d7, d7, d6
 800581c:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8005920 <IVK+0x3df8>
 8005820:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005824:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8005928 <IVK+0x3e00>
 8005828:	ee37 7b46 	vsub.f64	d7, d7, d6
 800582c:	eeb0 0b47 	vmov.f64	d0, d7
 8005830:	f011 feb2 	bl	8017598 <sin>
 8005834:	eeb0 7b40 	vmov.f64	d7, d0
	                     2.6029060499520004E+6 *
 8005838:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8005948 <IVK+0x3e20>
 800583c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                             -0.73665) *
	                         cos(q[1] + 1.6845) * sin(q[0])) +
 8005840:	f107 030c 	add.w	r3, r7, #12
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	3308      	adds	r3, #8
 8005848:	ed93 7b00 	vldr	d7, [r3]
 800584c:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8005958 <IVK+0x3e30>
 8005850:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005854:	eeb0 0b47 	vmov.f64	d0, d7
 8005858:	f011 fe4a 	bl	80174f0 <cos>
 800585c:	eeb0 7b40 	vmov.f64	d7, d0
	                             -0.73665) *
 8005860:	ee29 9b07 	vmul.f64	d9, d9, d7
	                         cos(q[1] + 1.6845) * sin(q[0])) +
 8005864:	f107 030c 	add.w	r3, r7, #12
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	ed93 7b00 	vldr	d7, [r3]
 800586e:	eeb0 0b47 	vmov.f64	d0, d7
 8005872:	f011 fe91 	bl	8017598 <sin>
 8005876:	eeb0 7b40 	vmov.f64	d7, d0
 800587a:	ee29 7b07 	vmul.f64	d7, d9, d7
	                          sin(q[1] + 1.6845) * sin(q[0])) -
 800587e:	ee38 6b47 	vsub.f64	d6, d8, d7
	                         cos(q[1] + 1.6845) * sin(q[0])) +
 8005882:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005886:	ee36 8b07 	vadd.f64	d8, d6, d7
	                    d1) +
	                   190230.12000000002 *
	                       cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800588a:	f107 030c 	add.w	r3, r7, #12
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3308      	adds	r3, #8
 8005892:	ed93 6b00 	vldr	d6, [r3]
 8005896:	f107 030c 	add.w	r3, r7, #12
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3310      	adds	r3, #16
 800589e:	ed93 7b00 	vldr	d7, [r3]
 80058a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80058a6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8005958 <IVK+0x3e30>
 80058aa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80058ae:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8005920 <IVK+0x3df8>
 80058b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80058b6:	eeb0 0b47 	vmov.f64	d0, d7
 80058ba:	f011 fe19 	bl	80174f0 <cos>
 80058be:	eeb0 7b40 	vmov.f64	d7, d0
	                   190230.12000000002 *
 80058c2:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8005950 <IVK+0x3e28>
 80058c6:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       sin(q[1] + 1.6845) * sin(q[0])) -
 80058ca:	f107 030c 	add.w	r3, r7, #12
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3308      	adds	r3, #8
 80058d2:	ed93 7b00 	vldr	d7, [r3]
 80058d6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8005958 <IVK+0x3e30>
 80058da:	ee37 7b06 	vadd.f64	d7, d7, d6
 80058de:	eeb0 0b47 	vmov.f64	d0, d7
 80058e2:	f011 fe59 	bl	8017598 <sin>
 80058e6:	eeb0 7b40 	vmov.f64	d7, d0
	                       cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80058ea:	ee29 9b07 	vmul.f64	d9, d9, d7
	                       sin(q[1] + 1.6845) * sin(q[0])) -
 80058ee:	f107 030c 	add.w	r3, r7, #12
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	ed93 7b00 	vldr	d7, [r3]
 80058f8:	eeb0 0b47 	vmov.f64	d0, d7
 80058fc:	f011 fe4c 	bl	8017598 <sin>
 8005900:	eeb0 7b40 	vmov.f64	d7, d0
 8005904:	ee29 7b07 	vmul.f64	d7, d9, d7
	                    d1) +
 8005908:	ee38 8b07 	vadd.f64	d8, d8, d7
	                  190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800590c:	f107 030c 	add.w	r3, r7, #12
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3308      	adds	r3, #8
 8005914:	ed93 6b00 	vldr	d6, [r3]
 8005918:	e03e      	b.n	8005998 <IVK+0x3e70>
 800591a:	bf00      	nop
 800591c:	f3af 8000 	nop.w
 8005920:	39581062 	.word	0x39581062
 8005924:	3fecc8b4 	.word	0x3fecc8b4
 8005928:	05532618 	.word	0x05532618
 800592c:	3fe792a3 	.word	0x3fe792a3
 8005930:	19ce075f 	.word	0x19ce075f
 8005934:	3ff85a51 	.word	0x3ff85a51
 8005938:	66666667 	.word	0x66666667
 800593c:	4109cd36 	.word	0x4109cd36
 8005940:	28f5c28f 	.word	0x28f5c28f
 8005944:	410b0efc 	.word	0x410b0efc
 8005948:	0664d3c0 	.word	0x0664d3c0
 800594c:	4143dbcd 	.word	0x4143dbcd
 8005950:	f5c28f5d 	.word	0xf5c28f5d
 8005954:	410738b0 	.word	0x410738b0
 8005958:	45a1cac1 	.word	0x45a1cac1
 800595c:	3ffaf3b6 	.word	0x3ffaf3b6
 8005960:	00000000 	.word	0x00000000
 8005964:	40f56300 	.word	0x40f56300
 8005968:	851eb852 	.word	0x851eb852
 800596c:	412f6457 	.word	0x412f6457
 8005970:	19ce075f 	.word	0x19ce075f
 8005974:	3ff85a51 	.word	0x3ff85a51
 8005978:	66666666 	.word	0x66666666
 800597c:	410e10a6 	.word	0x410e10a6
 8005980:	05532618 	.word	0x05532618
 8005984:	3fe792a3 	.word	0x3fe792a3
 8005988:	45a1cac1 	.word	0x45a1cac1
 800598c:	3ffaf3b6 	.word	0x3ffaf3b6
 8005990:	39581062 	.word	0x39581062
 8005994:	3fecc8b4 	.word	0x3fecc8b4
 8005998:	f107 030c 	add.w	r3, r7, #12
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3310      	adds	r3, #16
 80059a0:	ed93 7b00 	vldr	d7, [r3]
 80059a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80059a8:	ed1f 6b15 	vldr	d6, [pc, #-84]	; 8005958 <IVK+0x3e30>
 80059ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80059b0:	ed1f 6b09 	vldr	d6, [pc, #-36]	; 8005990 <IVK+0x3e68>
 80059b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80059b8:	eeb0 0b47 	vmov.f64	d0, d7
 80059bc:	f011 fdec 	bl	8017598 <sin>
 80059c0:	eeb0 7b40 	vmov.f64	d7, d0
 80059c4:	ed1f 6b1e 	vldr	d6, [pc, #-120]	; 8005950 <IVK+0x3e28>
 80059c8:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      cos(q[1] + 1.6845) * sin(q[0])) +
 80059cc:	f107 030c 	add.w	r3, r7, #12
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3308      	adds	r3, #8
 80059d4:	ed93 7b00 	vldr	d7, [r3]
 80059d8:	ed1f 6b21 	vldr	d6, [pc, #-132]	; 8005958 <IVK+0x3e30>
 80059dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80059e0:	eeb0 0b47 	vmov.f64	d0, d7
 80059e4:	f011 fd84 	bl	80174f0 <cos>
 80059e8:	eeb0 7b40 	vmov.f64	d7, d0
	                  190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80059ec:	ee29 9b07 	vmul.f64	d9, d9, d7
	                      cos(q[1] + 1.6845) * sin(q[0])) +
 80059f0:	f107 030c 	add.w	r3, r7, #12
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	ed93 7b00 	vldr	d7, [r3]
 80059fa:	eeb0 0b47 	vmov.f64	d0, d7
 80059fe:	f011 fdcb 	bl	8017598 <sin>
 8005a02:	eeb0 7b40 	vmov.f64	d7, d0
 8005a06:	ee29 7b07 	vmul.f64	d7, d9, d7
	                       sin(q[1] + 1.6845) * sin(q[0])) -
 8005a0a:	ee38 6b47 	vsub.f64	d6, d8, d7
	                      cos(q[1] + 1.6845) * sin(q[0])) +
 8005a0e:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8005a12:	ee36 8b07 	vadd.f64	d8, d6, d7
	                 d2) +
	                87600.0 *
	                    cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005a16:	f107 030c 	add.w	r3, r7, #12
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	3308      	adds	r3, #8
 8005a1e:	ed93 6b00 	vldr	d6, [r3]
 8005a22:	f107 030c 	add.w	r3, r7, #12
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3310      	adds	r3, #16
 8005a2a:	ed93 7b00 	vldr	d7, [r3]
 8005a2e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005a32:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005a36:	f107 030c 	add.w	r3, r7, #12
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3318      	adds	r3, #24
 8005a3e:	ed93 7b00 	vldr	d7, [r3]
 8005a42:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a46:	ed1f 6b3c 	vldr	d6, [pc, #-240]	; 8005958 <IVK+0x3e30>
 8005a4a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005a4e:	ed1f 6b30 	vldr	d6, [pc, #-192]	; 8005990 <IVK+0x3e68>
 8005a52:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005a56:	ed1f 6b36 	vldr	d6, [pc, #-216]	; 8005980 <IVK+0x3e58>
 8005a5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005a5e:	ed1f 6b3c 	vldr	d6, [pc, #-240]	; 8005970 <IVK+0x3e48>
 8005a62:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005a66:	eeb0 0b47 	vmov.f64	d0, d7
 8005a6a:	f011 fd41 	bl	80174f0 <cos>
 8005a6e:	eeb0 7b40 	vmov.f64	d7, d0
	                87600.0 *
 8005a72:	ed1f 6b45 	vldr	d6, [pc, #-276]	; 8005960 <IVK+0x3e38>
 8005a76:	ee27 9b06 	vmul.f64	d9, d7, d6
	                         -0.73665) +
	                        1.52205) *
	                    sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005a7a:	f107 030c 	add.w	r3, r7, #12
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	3308      	adds	r3, #8
 8005a82:	ed93 6b00 	vldr	d6, [r3]
 8005a86:	f107 030c 	add.w	r3, r7, #12
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3310      	adds	r3, #16
 8005a8e:	ed93 7b00 	vldr	d7, [r3]
 8005a92:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005a96:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005a9a:	f107 030c 	add.w	r3, r7, #12
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3318      	adds	r3, #24
 8005aa2:	ed93 7b00 	vldr	d7, [r3]
 8005aa6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005aaa:	ed1f 6b49 	vldr	d6, [pc, #-292]	; 8005988 <IVK+0x3e60>
 8005aae:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005ab2:	ed1f 6b49 	vldr	d6, [pc, #-292]	; 8005990 <IVK+0x3e68>
 8005ab6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005aba:	ed1f 6b4f 	vldr	d6, [pc, #-316]	; 8005980 <IVK+0x3e58>
 8005abe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005ac2:	ed1f 6b55 	vldr	d6, [pc, #-340]	; 8005970 <IVK+0x3e48>
 8005ac6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005aca:	eeb0 0b47 	vmov.f64	d0, d7
 8005ace:	f011 fd63 	bl	8017598 <sin>
 8005ad2:	eeb0 7b40 	vmov.f64	d7, d0
	                        1.52205) *
 8005ad6:	ee29 9b07 	vmul.f64	d9, d9, d7
	                         -0.73665) +
	                        1.52205) *
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 8005ada:	f107 030c 	add.w	r3, r7, #12
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	ed93 6b00 	vldr	d6, [r3]
 8005ae6:	f107 030c 	add.w	r3, r7, #12
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3310      	adds	r3, #16
 8005aee:	ed93 7b00 	vldr	d7, [r3]
 8005af2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005af6:	ed1f 6b5c 	vldr	d6, [pc, #-368]	; 8005988 <IVK+0x3e60>
 8005afa:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005afe:	ed1f 6b5c 	vldr	d6, [pc, #-368]	; 8005990 <IVK+0x3e68>
 8005b02:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005b06:	eeb0 0b47 	vmov.f64	d0, d7
 8005b0a:	f011 fcf1 	bl	80174f0 <cos>
 8005b0e:	eeb0 7b40 	vmov.f64	d7, d0
	                        1.52205) *
 8005b12:	ee29 9b07 	vmul.f64	d9, d9, d7
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 8005b16:	f107 030c 	add.w	r3, r7, #12
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	ed93 7b00 	vldr	d7, [r3]
 8005b20:	eeb0 0b47 	vmov.f64	d0, d7
 8005b24:	f011 fce4 	bl	80174f0 <cos>
 8005b28:	eeb0 7b40 	vmov.f64	d7, d0
 8005b2c:	ee29 7b07 	vmul.f64	d7, d9, d7
	                 d2) +
 8005b30:	ee38 8b07 	vadd.f64	d8, d8, d7
	               1.02865176E+6 *
	                   cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005b34:	f107 030c 	add.w	r3, r7, #12
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	ed93 6b00 	vldr	d6, [r3]
 8005b40:	f107 030c 	add.w	r3, r7, #12
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	3310      	adds	r3, #16
 8005b48:	ed93 7b00 	vldr	d7, [r3]
 8005b4c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005b50:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005b54:	f107 030c 	add.w	r3, r7, #12
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3318      	adds	r3, #24
 8005b5c:	ed93 7b00 	vldr	d7, [r3]
 8005b60:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005b64:	ed1f 6b78 	vldr	d6, [pc, #-480]	; 8005988 <IVK+0x3e60>
 8005b68:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005b6c:	ed1f 6b78 	vldr	d6, [pc, #-480]	; 8005990 <IVK+0x3e68>
 8005b70:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005b74:	ed1f 6b7e 	vldr	d6, [pc, #-504]	; 8005980 <IVK+0x3e58>
 8005b78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005b7c:	ed1f 6b84 	vldr	d6, [pc, #-528]	; 8005970 <IVK+0x3e48>
 8005b80:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005b84:	eeb0 0b47 	vmov.f64	d0, d7
 8005b88:	f011 fcb2 	bl	80174f0 <cos>
 8005b8c:	eeb0 7b40 	vmov.f64	d7, d0
	               1.02865176E+6 *
 8005b90:	ed1f 6b8b 	vldr	d6, [pc, #-556]	; 8005968 <IVK+0x3e40>
 8005b94:	ee27 9b06 	vmul.f64	d9, d7, d6
	                        -0.73665) +
	                       1.52205) *
	                   sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005b98:	f107 030c 	add.w	r3, r7, #12
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3308      	adds	r3, #8
 8005ba0:	ed93 6b00 	vldr	d6, [r3]
 8005ba4:	f107 030c 	add.w	r3, r7, #12
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3310      	adds	r3, #16
 8005bac:	ed93 7b00 	vldr	d7, [r3]
 8005bb0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005bb4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005bb8:	f107 030c 	add.w	r3, r7, #12
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3318      	adds	r3, #24
 8005bc0:	ed93 7b00 	vldr	d7, [r3]
 8005bc4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005bc8:	ed1f 6b91 	vldr	d6, [pc, #-580]	; 8005988 <IVK+0x3e60>
 8005bcc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005bd0:	ed1f 6b91 	vldr	d6, [pc, #-580]	; 8005990 <IVK+0x3e68>
 8005bd4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005bd8:	ed1f 6b97 	vldr	d6, [pc, #-604]	; 8005980 <IVK+0x3e58>
 8005bdc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005be0:	ed1f 6b9d 	vldr	d6, [pc, #-628]	; 8005970 <IVK+0x3e48>
 8005be4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005be8:	eeb0 0b47 	vmov.f64	d0, d7
 8005bec:	f011 fcd4 	bl	8017598 <sin>
 8005bf0:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 8005bf4:	ee29 9b07 	vmul.f64	d9, d9, d7
	                        -0.73665) +
	                       1.52205) *
	                   cos(q[1] + 1.6845) * cos(q[0])) +
 8005bf8:	f107 030c 	add.w	r3, r7, #12
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3308      	adds	r3, #8
 8005c00:	ed93 7b00 	vldr	d7, [r3]
 8005c04:	ed1f 6ba0 	vldr	d6, [pc, #-640]	; 8005988 <IVK+0x3e60>
 8005c08:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005c0c:	eeb0 0b47 	vmov.f64	d0, d7
 8005c10:	f011 fc6e 	bl	80174f0 <cos>
 8005c14:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 8005c18:	ee29 9b07 	vmul.f64	d9, d9, d7
	                   cos(q[1] + 1.6845) * cos(q[0])) +
 8005c1c:	f107 030c 	add.w	r3, r7, #12
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	ed93 7b00 	vldr	d7, [r3]
 8005c26:	eeb0 0b47 	vmov.f64	d0, d7
 8005c2a:	f011 fc61 	bl	80174f0 <cos>
 8005c2e:	eeb0 7b40 	vmov.f64	d7, d0
 8005c32:	ee29 7b07 	vmul.f64	d7, d9, d7
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 8005c36:	ee38 8b07 	vadd.f64	d8, d8, d7
	              246292.8 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005c3a:	f107 030c 	add.w	r3, r7, #12
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3308      	adds	r3, #8
 8005c42:	ed93 6b00 	vldr	d6, [r3]
 8005c46:	f107 030c 	add.w	r3, r7, #12
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3310      	adds	r3, #16
 8005c4e:	ed93 7b00 	vldr	d7, [r3]
 8005c52:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005c56:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005c5a:	f107 030c 	add.w	r3, r7, #12
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3318      	adds	r3, #24
 8005c62:	ed93 7b00 	vldr	d7, [r3]
 8005c66:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005c6a:	ed1f 6bb9 	vldr	d6, [pc, #-740]	; 8005988 <IVK+0x3e60>
 8005c6e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005c72:	ed1f 6bb9 	vldr	d6, [pc, #-740]	; 8005990 <IVK+0x3e68>
 8005c76:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005c7a:	ed1f 6bbf 	vldr	d6, [pc, #-764]	; 8005980 <IVK+0x3e58>
 8005c7e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005c82:	ed1f 6bc5 	vldr	d6, [pc, #-788]	; 8005970 <IVK+0x3e48>
 8005c86:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005c8a:	eeb0 0b47 	vmov.f64	d0, d7
 8005c8e:	f011 fc83 	bl	8017598 <sin>
 8005c92:	eeb0 7b40 	vmov.f64	d7, d0
	              246292.8 *
 8005c96:	ed1f 6bc8 	vldr	d6, [pc, #-800]	; 8005978 <IVK+0x3e50>
 8005c9a:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005c9e:	f107 030c 	add.w	r3, r7, #12
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	ed93 6b00 	vldr	d6, [r3]
 8005caa:	f107 030c 	add.w	r3, r7, #12
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3310      	adds	r3, #16
 8005cb2:	ed93 7b00 	vldr	d7, [r3]
 8005cb6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005cba:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005cbe:	ed1f 6bce 	vldr	d6, [pc, #-824]	; 8005988 <IVK+0x3e60>
 8005cc2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005cc6:	ed1f 6bce 	vldr	d6, [pc, #-824]	; 8005990 <IVK+0x3e68>
 8005cca:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005cce:	ed1f 6bd4 	vldr	d6, [pc, #-848]	; 8005980 <IVK+0x3e58>
 8005cd2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005cd6:	eeb0 0b47 	vmov.f64	d0, d7
 8005cda:	f011 fc09 	bl	80174f0 <cos>
 8005cde:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 8005ce2:	ee29 9b07 	vmul.f64	d9, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 8005ce6:	f107 030c 	add.w	r3, r7, #12
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3308      	adds	r3, #8
 8005cee:	ed93 6b00 	vldr	d6, [r3]
 8005cf2:	f107 030c 	add.w	r3, r7, #12
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	3310      	adds	r3, #16
 8005cfa:	ed93 7b00 	vldr	d7, [r3]
 8005cfe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005d02:	ed1f 6bdf 	vldr	d6, [pc, #-892]	; 8005988 <IVK+0x3e60>
 8005d06:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d0a:	ed1f 6bdf 	vldr	d6, [pc, #-892]	; 8005990 <IVK+0x3e68>
 8005d0e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005d12:	eeb0 0b47 	vmov.f64	d0, d7
 8005d16:	f011 fc3f 	bl	8017598 <sin>
 8005d1a:	eeb0 7b40 	vmov.f64	d7, d0
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005d1e:	ee29 9b07 	vmul.f64	d9, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 8005d22:	f107 030c 	add.w	r3, r7, #12
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	ed93 7b00 	vldr	d7, [r3]
 8005d2c:	eeb0 0b47 	vmov.f64	d0, d7
 8005d30:	f011 fbde 	bl	80174f0 <cos>
 8005d34:	eeb0 7b40 	vmov.f64	d7, d0
 8005d38:	ee29 7b07 	vmul.f64	d7, d9, d7
	                   cos(q[1] + 1.6845) * cos(q[0])) +
 8005d3c:	ee38 8b07 	vadd.f64	d8, d8, d7
	             246292.8 *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005d40:	f107 030c 	add.w	r3, r7, #12
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3308      	adds	r3, #8
 8005d48:	ed93 6b00 	vldr	d6, [r3]
 8005d4c:	f107 030c 	add.w	r3, r7, #12
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	3310      	adds	r3, #16
 8005d54:	ed93 7b00 	vldr	d7, [r3]
 8005d58:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005d5c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005d60:	f107 030c 	add.w	r3, r7, #12
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3318      	adds	r3, #24
 8005d68:	ed93 7b00 	vldr	d7, [r3]
 8005d6c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005d70:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8006130 <IVK+0x4608>
 8005d74:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d78:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8006138 <IVK+0x4610>
 8005d7c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005d80:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8006140 <IVK+0x4618>
 8005d84:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005d88:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8006148 <IVK+0x4620>
 8005d8c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d90:	eeb0 0b47 	vmov.f64	d0, d7
 8005d94:	f011 fc00 	bl	8017598 <sin>
 8005d98:	eeb0 7b40 	vmov.f64	d7, d0
	             246292.8 *
 8005d9c:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8006150 <IVK+0x4628>
 8005da0:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      -0.73665) +
	                     1.52205) *
	                 sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005da4:	f107 030c 	add.w	r3, r7, #12
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	3308      	adds	r3, #8
 8005dac:	ed93 6b00 	vldr	d6, [r3]
 8005db0:	f107 030c 	add.w	r3, r7, #12
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	3310      	adds	r3, #16
 8005db8:	ed93 7b00 	vldr	d7, [r3]
 8005dbc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005dc0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005dc4:	ed9f 6bda 	vldr	d6, [pc, #872]	; 8006130 <IVK+0x4608>
 8005dc8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005dcc:	ed9f 6bda 	vldr	d6, [pc, #872]	; 8006138 <IVK+0x4610>
 8005dd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005dd4:	ed9f 6bda 	vldr	d6, [pc, #872]	; 8006140 <IVK+0x4618>
 8005dd8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005ddc:	eeb0 0b47 	vmov.f64	d0, d7
 8005de0:	f011 fbda 	bl	8017598 <sin>
 8005de4:	eeb0 7b40 	vmov.f64	d7, d0
	                     1.52205) *
 8005de8:	ee29 9b07 	vmul.f64	d9, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 8005dec:	f107 030c 	add.w	r3, r7, #12
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3308      	adds	r3, #8
 8005df4:	ed93 6b00 	vldr	d6, [r3]
 8005df8:	f107 030c 	add.w	r3, r7, #12
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3310      	adds	r3, #16
 8005e00:	ed93 7b00 	vldr	d7, [r3]
 8005e04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005e08:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8006130 <IVK+0x4608>
 8005e0c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005e10:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8006138 <IVK+0x4610>
 8005e14:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005e18:	eeb0 0b47 	vmov.f64	d0, d7
 8005e1c:	f011 fb68 	bl	80174f0 <cos>
 8005e20:	eeb0 7b40 	vmov.f64	d7, d0
	                 sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005e24:	ee29 9b07 	vmul.f64	d9, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 8005e28:	f107 030c 	add.w	r3, r7, #12
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	ed93 7b00 	vldr	d7, [r3]
 8005e32:	eeb0 0b47 	vmov.f64	d0, d7
 8005e36:	f011 fb5b 	bl	80174f0 <cos>
 8005e3a:	eeb0 7b40 	vmov.f64	d7, d0
 8005e3e:	ee29 7b07 	vmul.f64	d7, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 8005e42:	ee38 8b47 	vsub.f64	d8, d8, d7
	            2.8921178332800004E+6 *
	                sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005e46:	f107 030c 	add.w	r3, r7, #12
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	ed93 6b00 	vldr	d6, [r3]
 8005e52:	f107 030c 	add.w	r3, r7, #12
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3310      	adds	r3, #16
 8005e5a:	ed93 7b00 	vldr	d7, [r3]
 8005e5e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005e62:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005e66:	f107 030c 	add.w	r3, r7, #12
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	3318      	adds	r3, #24
 8005e6e:	ed93 7b00 	vldr	d7, [r3]
 8005e72:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005e76:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8006130 <IVK+0x4608>
 8005e7a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005e7e:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8006138 <IVK+0x4610>
 8005e82:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005e86:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8006140 <IVK+0x4618>
 8005e8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005e8e:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8006148 <IVK+0x4620>
 8005e92:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005e96:	eeb0 0b47 	vmov.f64	d0, d7
 8005e9a:	f011 fb7d 	bl	8017598 <sin>
 8005e9e:	eeb0 7b40 	vmov.f64	d7, d0
	            2.8921178332800004E+6 *
 8005ea2:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8006158 <IVK+0x4630>
 8005ea6:	ee27 9b06 	vmul.f64	d9, d7, d6
	                     -0.73665) +
	                    1.52205) *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005eaa:	f107 030c 	add.w	r3, r7, #12
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	ed93 6b00 	vldr	d6, [r3]
 8005eb6:	f107 030c 	add.w	r3, r7, #12
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3310      	adds	r3, #16
 8005ebe:	ed93 7b00 	vldr	d7, [r3]
 8005ec2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005ec6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005eca:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8006130 <IVK+0x4608>
 8005ece:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005ed2:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8006138 <IVK+0x4610>
 8005ed6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005eda:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8006140 <IVK+0x4618>
 8005ede:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005ee2:	eeb0 0b47 	vmov.f64	d0, d7
 8005ee6:	f011 fb03 	bl	80174f0 <cos>
 8005eea:	eeb0 7b40 	vmov.f64	d7, d0
	                    1.52205) *
 8005eee:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(q[1] + 1.6845) * cos(q[0])) -
 8005ef2:	f107 030c 	add.w	r3, r7, #12
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3308      	adds	r3, #8
 8005efa:	ed93 7b00 	vldr	d7, [r3]
 8005efe:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8006130 <IVK+0x4608>
 8005f02:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f06:	eeb0 0b47 	vmov.f64	d0, d7
 8005f0a:	f011 fb45 	bl	8017598 <sin>
 8005f0e:	eeb0 7b40 	vmov.f64	d7, d0
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005f12:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(q[1] + 1.6845) * cos(q[0])) -
 8005f16:	f107 030c 	add.w	r3, r7, #12
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	ed93 7b00 	vldr	d7, [r3]
 8005f20:	eeb0 0b47 	vmov.f64	d0, d7
 8005f24:	f011 fae4 	bl	80174f0 <cos>
 8005f28:	eeb0 7b40 	vmov.f64	d7, d0
 8005f2c:	ee29 7b07 	vmul.f64	d7, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 8005f30:	ee38 8b07 	vadd.f64	d8, d8, d7
	           2.8921178332800004E+6 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005f34:	f107 030c 	add.w	r3, r7, #12
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3308      	adds	r3, #8
 8005f3c:	ed93 6b00 	vldr	d6, [r3]
 8005f40:	f107 030c 	add.w	r3, r7, #12
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	3310      	adds	r3, #16
 8005f48:	ed93 7b00 	vldr	d7, [r3]
 8005f4c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005f50:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005f54:	f107 030c 	add.w	r3, r7, #12
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3318      	adds	r3, #24
 8005f5c:	ed93 7b00 	vldr	d7, [r3]
 8005f60:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005f64:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8006130 <IVK+0x4608>
 8005f68:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f6c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8006138 <IVK+0x4610>
 8005f70:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005f74:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8006140 <IVK+0x4618>
 8005f78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005f7c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8006148 <IVK+0x4620>
 8005f80:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f84:	eeb0 0b47 	vmov.f64	d0, d7
 8005f88:	f011 fb06 	bl	8017598 <sin>
 8005f8c:	eeb0 7b40 	vmov.f64	d7, d0
	           2.8921178332800004E+6 *
 8005f90:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8006158 <IVK+0x4630>
 8005f94:	ee27 9b06 	vmul.f64	d9, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005f98:	f107 030c 	add.w	r3, r7, #12
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	ed93 6b00 	vldr	d6, [r3]
 8005fa4:	f107 030c 	add.w	r3, r7, #12
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3310      	adds	r3, #16
 8005fac:	ed93 7b00 	vldr	d7, [r3]
 8005fb0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005fb4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005fb8:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8006130 <IVK+0x4608>
 8005fbc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005fc0:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8006138 <IVK+0x4610>
 8005fc4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005fc8:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8006140 <IVK+0x4618>
 8005fcc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005fd0:	eeb0 0b47 	vmov.f64	d0, d7
 8005fd4:	f011 fae0 	bl	8017598 <sin>
 8005fd8:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 8005fdc:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(q[1] + 1.6845) * cos(q[0])) +
 8005fe0:	f107 030c 	add.w	r3, r7, #12
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3308      	adds	r3, #8
 8005fe8:	ed93 7b00 	vldr	d7, [r3]
 8005fec:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8006130 <IVK+0x4608>
 8005ff0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005ff4:	eeb0 0b47 	vmov.f64	d0, d7
 8005ff8:	f011 fa7a 	bl	80174f0 <cos>
 8005ffc:	eeb0 7b40 	vmov.f64	d7, d0
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8006000:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(q[1] + 1.6845) * cos(q[0])) +
 8006004:	f107 030c 	add.w	r3, r7, #12
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	ed93 7b00 	vldr	d7, [r3]
 800600e:	eeb0 0b47 	vmov.f64	d0, d7
 8006012:	f011 fa6d 	bl	80174f0 <cos>
 8006016:	eeb0 7b40 	vmov.f64	d7, d0
 800601a:	ee29 7b07 	vmul.f64	d7, d9, d7
	                sin(q[1] + 1.6845) * cos(q[0])) -
 800601e:	ee38 8b47 	vsub.f64	d8, d8, d7
	          211366.80000000002 *
	              sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8006022:	f107 030c 	add.w	r3, r7, #12
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3308      	adds	r3, #8
 800602a:	ed93 6b00 	vldr	d6, [r3]
 800602e:	f107 030c 	add.w	r3, r7, #12
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3310      	adds	r3, #16
 8006036:	ed93 7b00 	vldr	d7, [r3]
 800603a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800603e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006042:	f107 030c 	add.w	r3, r7, #12
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3318      	adds	r3, #24
 800604a:	ed93 7b00 	vldr	d7, [r3]
 800604e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006052:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8006130 <IVK+0x4608>
 8006056:	ee37 7b06 	vadd.f64	d7, d7, d6
 800605a:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8006138 <IVK+0x4610>
 800605e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006062:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8006140 <IVK+0x4618>
 8006066:	ee37 7b46 	vsub.f64	d7, d7, d6
 800606a:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8006148 <IVK+0x4620>
 800606e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006072:	eeb0 0b47 	vmov.f64	d0, d7
 8006076:	f011 fa8f 	bl	8017598 <sin>
 800607a:	eeb0 7b40 	vmov.f64	d7, d0
	          211366.80000000002 *
 800607e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8006170 <IVK+0x4648>
 8006082:	ee27 9b06 	vmul.f64	d9, d7, d6
	                   -0.73665) +
	                  1.52205) *
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8006086:	f107 030c 	add.w	r3, r7, #12
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3308      	adds	r3, #8
 800608e:	ed93 6b00 	vldr	d6, [r3]
 8006092:	f107 030c 	add.w	r3, r7, #12
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	3310      	adds	r3, #16
 800609a:	ed93 7b00 	vldr	d7, [r3]
 800609e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80060a2:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8006130 <IVK+0x4608>
 80060a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80060aa:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8006138 <IVK+0x4610>
 80060ae:	ee37 7b46 	vsub.f64	d7, d7, d6
 80060b2:	eeb0 0b47 	vmov.f64	d0, d7
 80060b6:	f011 fa1b 	bl	80174f0 <cos>
 80060ba:	eeb0 7b40 	vmov.f64	d7, d0
	                  1.52205) *
 80060be:	ee29 9b07 	vmul.f64	d9, d9, d7
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 80060c2:	f107 030c 	add.w	r3, r7, #12
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3308      	adds	r3, #8
 80060ca:	ed93 7b00 	vldr	d7, [r3]
 80060ce:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8006130 <IVK+0x4608>
 80060d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80060d6:	eeb0 0b47 	vmov.f64	d0, d7
 80060da:	f011 fa5d 	bl	8017598 <sin>
 80060de:	eeb0 7b40 	vmov.f64	d7, d0
 80060e2:	ee29 9b07 	vmul.f64	d9, d9, d7
	              cos(q[0])) -
 80060e6:	f107 030c 	add.w	r3, r7, #12
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	ed93 7b00 	vldr	d7, [r3]
 80060f0:	eeb0 0b47 	vmov.f64	d0, d7
 80060f4:	f011 f9fc 	bl	80174f0 <cos>
 80060f8:	eeb0 7b40 	vmov.f64	d7, d0
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 80060fc:	ee29 7b07 	vmul.f64	d7, d9, d7
	               cos(q[1] + 1.6845) * cos(q[0])) +
 8006100:	ee38 8b07 	vadd.f64	d8, d8, d7
	         211366.80000000002 *
	             sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8006104:	f107 030c 	add.w	r3, r7, #12
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3308      	adds	r3, #8
 800610c:	ed93 6b00 	vldr	d6, [r3]
 8006110:	f107 030c 	add.w	r3, r7, #12
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3310      	adds	r3, #16
 8006118:	ed93 7b00 	vldr	d7, [r3]
 800611c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006120:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006124:	f107 030c 	add.w	r3, r7, #12
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	e039      	b.n	80061a0 <IVK+0x4678>
 800612c:	f3af 8000 	nop.w
 8006130:	45a1cac1 	.word	0x45a1cac1
 8006134:	3ffaf3b6 	.word	0x3ffaf3b6
 8006138:	39581062 	.word	0x39581062
 800613c:	3fecc8b4 	.word	0x3fecc8b4
 8006140:	05532618 	.word	0x05532618
 8006144:	3fe792a3 	.word	0x3fe792a3
 8006148:	19ce075f 	.word	0x19ce075f
 800614c:	3ff85a51 	.word	0x3ff85a51
 8006150:	66666666 	.word	0x66666666
 8006154:	410e10a6 	.word	0x410e10a6
 8006158:	eaa8eb47 	.word	0xeaa8eb47
 800615c:	414610aa 	.word	0x414610aa
 8006160:	05532618 	.word	0x05532618
 8006164:	3fe792a3 	.word	0x3fe792a3
 8006168:	19ce075f 	.word	0x19ce075f
 800616c:	3ff85a51 	.word	0x3ff85a51
 8006170:	66666667 	.word	0x66666667
 8006174:	4109cd36 	.word	0x4109cd36
 8006178:	39581062 	.word	0x39581062
 800617c:	3fecc8b4 	.word	0x3fecc8b4
 8006180:	00000000 	.word	0x00000000
 8006184:	404e0000 	.word	0x404e0000
 8006188:	45a1cac1 	.word	0x45a1cac1
 800618c:	3ffaf3b6 	.word	0x3ffaf3b6
 8006190:	b020c49c 	.word	0xb020c49c
 8006194:	40860472 	.word	0x40860472
 8006198:	00000000 	.word	0x00000000
 800619c:	40440000 	.word	0x40440000
 80061a0:	3318      	adds	r3, #24
 80061a2:	ed93 7b00 	vldr	d7, [r3]
 80061a6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80061aa:	ed1f 6b09 	vldr	d6, [pc, #-36]	; 8006188 <IVK+0x4660>
 80061ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80061b2:	ed1f 6b0f 	vldr	d6, [pc, #-60]	; 8006178 <IVK+0x4650>
 80061b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80061ba:	ed1f 6b17 	vldr	d6, [pc, #-92]	; 8006160 <IVK+0x4638>
 80061be:	ee37 7b46 	vsub.f64	d7, d7, d6
 80061c2:	ed1f 6b17 	vldr	d6, [pc, #-92]	; 8006168 <IVK+0x4640>
 80061c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80061ca:	eeb0 0b47 	vmov.f64	d0, d7
 80061ce:	f011 f9e3 	bl	8017598 <sin>
 80061d2:	eeb0 7b40 	vmov.f64	d7, d0
	         211366.80000000002 *
 80061d6:	ed1f 6b1a 	vldr	d6, [pc, #-104]	; 8006170 <IVK+0x4648>
 80061da:	ee27 9b06 	vmul.f64	d9, d7, d6
	                  -0.73665) +
	                 1.52205) *
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 80061de:	f107 030c 	add.w	r3, r7, #12
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	3308      	adds	r3, #8
 80061e6:	ed93 6b00 	vldr	d6, [r3]
 80061ea:	f107 030c 	add.w	r3, r7, #12
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3310      	adds	r3, #16
 80061f2:	ed93 7b00 	vldr	d7, [r3]
 80061f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80061fa:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 8006188 <IVK+0x4660>
 80061fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006202:	ed1f 6b23 	vldr	d6, [pc, #-140]	; 8006178 <IVK+0x4650>
 8006206:	ee37 7b46 	vsub.f64	d7, d7, d6
 800620a:	eeb0 0b47 	vmov.f64	d0, d7
 800620e:	f011 f9c3 	bl	8017598 <sin>
 8006212:	eeb0 7b40 	vmov.f64	d7, d0
	                 1.52205) *
 8006216:	ee29 9b07 	vmul.f64	d9, d9, d7
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 800621a:	f107 030c 	add.w	r3, r7, #12
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3308      	adds	r3, #8
 8006222:	ed93 7b00 	vldr	d7, [r3]
 8006226:	ed1f 6b28 	vldr	d6, [pc, #-160]	; 8006188 <IVK+0x4660>
 800622a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800622e:	eeb0 0b47 	vmov.f64	d0, d7
 8006232:	f011 f95d 	bl	80174f0 <cos>
 8006236:	eeb0 7b40 	vmov.f64	d7, d0
 800623a:	ee29 9b07 	vmul.f64	d9, d9, d7
	             cos(q[0]))) /
 800623e:	f107 030c 	add.w	r3, r7, #12
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	ed93 7b00 	vldr	d7, [r3]
 8006248:	eeb0 0b47 	vmov.f64	d0, d7
 800624c:	f011 f950 	bl	80174f0 <cos>
 8006250:	eeb0 7b40 	vmov.f64	d7, d0
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8006254:	ee29 7b07 	vmul.f64	d7, d9, d7
	              cos(q[0])) -
 8006258:	ee38 7b47 	vsub.f64	d7, d8, d7
	      -(4.0 *
 800625c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8006260:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006264:	eeb1 5b47 	vneg.f64	d5, d7
	             cos(q[0]))) /
 8006268:	ed97 6b7a 	vldr	d6, [r7, #488]	; 0x1e8
 800626c:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[9] =
 8006270:	f107 0310 	add.w	r3, r7, #16
 8006274:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	      d;
	  dv[14] = -(40.0 * cos(q[0]) *
 8006278:	f107 030c 	add.w	r3, r7, #12
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	ed93 7b00 	vldr	d7, [r3]
 8006282:	eeb0 0b47 	vmov.f64	d0, d7
 8006286:	f011 f933 	bl	80174f0 <cos>
 800628a:	eeb0 7b40 	vmov.f64	d7, d0
 800628e:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 8006198 <IVK+0x4670>
 8006292:	ee27 8b06 	vmul.f64	d8, d7, d6
	             (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8006296:	f107 030c 	add.w	r3, r7, #12
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3308      	adds	r3, #8
 800629e:	ed93 6b00 	vldr	d6, [r3]
 80062a2:	f107 030c 	add.w	r3, r7, #12
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	3310      	adds	r3, #16
 80062aa:	ed93 7b00 	vldr	d7, [r3]
 80062ae:	ee36 7b07 	vadd.f64	d7, d6, d7
 80062b2:	ed1f 6b4b 	vldr	d6, [pc, #-300]	; 8006188 <IVK+0x4660>
 80062b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80062ba:	ed1f 6b51 	vldr	d6, [pc, #-324]	; 8006178 <IVK+0x4650>
 80062be:	ee37 7b46 	vsub.f64	d7, d7, d6
 80062c2:	eeb0 0b47 	vmov.f64	d0, d7
 80062c6:	f011 f913 	bl	80174f0 <cos>
 80062ca:	eeb0 7b40 	vmov.f64	d7, d0
 80062ce:	ed1f 6b54 	vldr	d6, [pc, #-336]	; 8006180 <IVK+0x4658>
 80062d2:	ee27 9b06 	vmul.f64	d9, d7, d6
	              704.556 * cos(q[1] + 1.6845))) /
 80062d6:	f107 030c 	add.w	r3, r7, #12
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3308      	adds	r3, #8
 80062de:	ed93 7b00 	vldr	d7, [r3]
 80062e2:	ed1f 6b57 	vldr	d6, [pc, #-348]	; 8006188 <IVK+0x4660>
 80062e6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80062ea:	eeb0 0b47 	vmov.f64	d0, d7
 80062ee:	f011 f8ff 	bl	80174f0 <cos>
 80062f2:	eeb0 7b40 	vmov.f64	d7, d0
 80062f6:	ed1f 6b5a 	vldr	d6, [pc, #-360]	; 8006190 <IVK+0x4668>
 80062fa:	ee27 7b06 	vmul.f64	d7, d7, d6
	             (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) +
 80062fe:	ee39 7b07 	vadd.f64	d7, d9, d7
	  dv[14] = -(40.0 * cos(q[0]) *
 8006302:	ee28 7b07 	vmul.f64	d7, d8, d7
 8006306:	eeb1 5b47 	vneg.f64	d5, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 800630a:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800630e:	ee27 6b07 	vmul.f64	d6, d7, d7
 8006312:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8006316:	ee26 6b07 	vmul.f64	d6, d6, d7
	                             d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800631a:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800631e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006322:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8006326:	ee24 7b07 	vmul.f64	d7, d4, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 800632a:	ee36 6b47 	vsub.f64	d6, d6, d7
	                            d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 800632e:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8006332:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006336:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800633a:	ee24 7b07 	vmul.f64	d7, d4, d7
	                             d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800633e:	ee36 6b07 	vadd.f64	d6, d6, d7
	                           d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8006342:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8006346:	ee27 4b07 	vmul.f64	d4, d7, d7
 800634a:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 800634e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                            d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006352:	ee36 6b47 	vsub.f64	d6, d6, d7
	                          d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8006356:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800635a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800635e:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8006362:	ee24 7b07 	vmul.f64	d7, d4, d7
	                           d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8006366:	ee36 6b07 	vadd.f64	d6, d6, d7
	                         d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800636a:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800636e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006372:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8006376:	ee24 7b07 	vmul.f64	d7, d4, d7
	                          d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 800637a:	ee36 6b47 	vsub.f64	d6, d6, d7
	                        d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 800637e:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8006382:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006386:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 800638a:	ee24 7b07 	vmul.f64	d7, d4, d7
	                         d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800638e:	ee36 6b07 	vadd.f64	d6, d6, d7
	                       d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8006392:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8006396:	ee27 4b07 	vmul.f64	d4, d7, d7
 800639a:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 800639e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                        d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80063a2:	ee36 6b47 	vsub.f64	d6, d6, d7
	                      d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 80063a6:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80063aa:	ee27 4b07 	vmul.f64	d4, d7, d7
 80063ae:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 80063b2:	ee24 7b07 	vmul.f64	d7, d4, d7
	                       d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80063b6:	ee36 6b07 	vadd.f64	d6, d6, d7
	                     d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80063ba:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80063be:	ee27 4b07 	vmul.f64	d4, d7, d7
 80063c2:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 80063c6:	ee24 7b07 	vmul.f64	d7, d4, d7
	                      d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 80063ca:	ee36 6b47 	vsub.f64	d6, d6, d7
	                    d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80063ce:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80063d2:	ee27 4b07 	vmul.f64	d4, d7, d7
 80063d6:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 80063da:	ee24 7b07 	vmul.f64	d7, d4, d7
	                     d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80063de:	ee36 6b07 	vadd.f64	d6, d6, d7
	                   d8 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)));
 80063e2:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80063e6:	ee27 4b07 	vmul.f64	d4, d7, d7
 80063ea:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 80063ee:	ee24 7b07 	vmul.f64	d7, d4, d7
	                    d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80063f2:	ee36 7b47 	vsub.f64	d7, d6, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 80063f6:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 80063fa:	ee27 6b06 	vmul.f64	d6, d7, d6
	              704.556 * cos(q[1] + 1.6845))) /
 80063fe:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[14] = -(40.0 * cos(q[0]) *
 8006402:	f107 0310 	add.w	r3, r7, #16
 8006406:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
	  dv[19] =
	      -(40.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 800640a:	f107 030c 	add.w	r3, r7, #12
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3308      	adds	r3, #8
 8006412:	ed93 6b00 	vldr	d6, [r3]
 8006416:	f107 030c 	add.w	r3, r7, #12
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3310      	adds	r3, #16
 800641e:	ed93 7b00 	vldr	d7, [r3]
 8006422:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006426:	ed1f 6ba8 	vldr	d6, [pc, #-672]	; 8006188 <IVK+0x4660>
 800642a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800642e:	ed1f 6bae 	vldr	d6, [pc, #-696]	; 8006178 <IVK+0x4650>
 8006432:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006436:	eeb0 0b47 	vmov.f64	d0, d7
 800643a:	f011 f859 	bl	80174f0 <cos>
 800643e:	eeb0 7b40 	vmov.f64	d7, d0
 8006442:	ed1f 6bb1 	vldr	d6, [pc, #-708]	; 8006180 <IVK+0x4658>
 8006446:	ee27 8b06 	vmul.f64	d8, d7, d6
 800644a:	f107 030c 	add.w	r3, r7, #12
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	ed93 7b00 	vldr	d7, [r3]
 8006454:	eeb0 0b47 	vmov.f64	d0, d7
 8006458:	f011 f89e 	bl	8017598 <sin>
 800645c:	eeb0 7b40 	vmov.f64	d7, d0
 8006460:	ee28 8b07 	vmul.f64	d8, d8, d7
	                704.556 * cos(q[1] + 1.6845) * sin(q[0]))) /
 8006464:	f107 030c 	add.w	r3, r7, #12
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3308      	adds	r3, #8
 800646c:	ed93 7b00 	vldr	d7, [r3]
 8006470:	ed1f 6bbb 	vldr	d6, [pc, #-748]	; 8006188 <IVK+0x4660>
 8006474:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006478:	eeb0 0b47 	vmov.f64	d0, d7
 800647c:	f011 f838 	bl	80174f0 <cos>
 8006480:	eeb0 7b40 	vmov.f64	d7, d0
 8006484:	ed1f 6bbe 	vldr	d6, [pc, #-760]	; 8006190 <IVK+0x4668>
 8006488:	ee27 9b06 	vmul.f64	d9, d7, d6
 800648c:	f107 030c 	add.w	r3, r7, #12
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	ed93 7b00 	vldr	d7, [r3]
 8006496:	eeb0 0b47 	vmov.f64	d0, d7
 800649a:	f011 f87d 	bl	8017598 <sin>
 800649e:	eeb0 7b40 	vmov.f64	d7, d0
 80064a2:	ee29 7b07 	vmul.f64	d7, d9, d7
	      -(40.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 80064a6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80064aa:	ed1f 6bc5 	vldr	d6, [pc, #-788]	; 8006198 <IVK+0x4670>
 80064ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80064b2:	eeb1 5b47 	vneg.f64	d5, d7
	      (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 80064b6:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80064ba:	ee27 6b07 	vmul.f64	d6, d7, d7
 80064be:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80064c2:	ee26 6b07 	vmul.f64	d6, d6, d7
	                        d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80064c6:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80064ca:	ee27 4b07 	vmul.f64	d4, d7, d7
 80064ce:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 80064d2:	ee24 7b07 	vmul.f64	d7, d4, d7
	      (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 80064d6:	ee36 6b47 	vsub.f64	d6, d6, d7
	                       d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80064da:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80064de:	ee27 4b07 	vmul.f64	d4, d7, d7
 80064e2:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80064e6:	ee24 7b07 	vmul.f64	d7, d4, d7
	                        d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80064ea:	ee36 6b07 	vadd.f64	d6, d6, d7
	                      d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80064ee:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80064f2:	ee27 4b07 	vmul.f64	d4, d7, d7
 80064f6:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 80064fa:	ee24 7b07 	vmul.f64	d7, d4, d7
	                       d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80064fe:	ee36 6b47 	vsub.f64	d6, d6, d7
	                     d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8006502:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8006506:	ee27 4b07 	vmul.f64	d4, d7, d7
 800650a:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 800650e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                      d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8006512:	ee36 6b07 	vadd.f64	d6, d6, d7
	                    d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8006516:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800651a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800651e:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8006522:	ee24 7b07 	vmul.f64	d7, d4, d7
	                     d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8006526:	ee36 6b47 	vsub.f64	d6, d6, d7
	                   d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 800652a:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800652e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006532:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8006536:	ee24 7b07 	vmul.f64	d7, d4, d7
	                    d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800653a:	ee36 6b07 	vadd.f64	d6, d6, d7
	                  d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 800653e:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8006542:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006546:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 800654a:	ee24 7b07 	vmul.f64	d7, d4, d7
	                   d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 800654e:	ee36 6b47 	vsub.f64	d6, d6, d7
	                 d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8006552:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8006556:	ee27 4b07 	vmul.f64	d4, d7, d7
 800655a:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 800655e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                  d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8006562:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8006566:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800656a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800656e:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8006572:	ee24 7b07 	vmul.f64	d7, d4, d7
	                 d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8006576:	ee36 6b47 	vsub.f64	d6, d6, d7
	               d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 800657a:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800657e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006582:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8006586:	ee24 7b07 	vmul.f64	d7, d4, d7
	                d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800658a:	ee36 6b07 	vadd.f64	d6, d6, d7
	              d8 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)));
 800658e:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8006592:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006596:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 800659a:	ee24 7b07 	vmul.f64	d7, d4, d7
	               d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 800659e:	ee36 7b47 	vsub.f64	d7, d6, d7
	      (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 80065a2:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 80065a6:	ee27 6b06 	vmul.f64	d6, d7, d6
	                704.556 * cos(q[1] + 1.6845) * sin(q[0]))) /
 80065aa:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[19] =
 80065ae:	f107 0310 	add.w	r3, r7, #16
 80065b2:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
	  dv[24] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 80065b6:	f107 030c 	add.w	r3, r7, #12
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3308      	adds	r3, #8
 80065be:	ed93 6b00 	vldr	d6, [r3]
 80065c2:	f107 030c 	add.w	r3, r7, #12
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3310      	adds	r3, #16
 80065ca:	ed93 7b00 	vldr	d7, [r3]
 80065ce:	ee36 7b07 	vadd.f64	d7, d6, d7
 80065d2:	ed9f 6b83 	vldr	d6, [pc, #524]	; 80067e0 <IVK+0x4cb8>
 80065d6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80065da:	ed9f 6b83 	vldr	d6, [pc, #524]	; 80067e8 <IVK+0x4cc0>
 80065de:	ee37 7b46 	vsub.f64	d7, d7, d6
 80065e2:	eeb0 0b47 	vmov.f64	d0, d7
 80065e6:	f010 ffd7 	bl	8017598 <sin>
 80065ea:	eeb0 7b40 	vmov.f64	d7, d0
 80065ee:	ed9f 6b80 	vldr	d6, [pc, #512]	; 80067f0 <IVK+0x4cc8>
 80065f2:	ee27 8b06 	vmul.f64	d8, d7, d6
	                     704.556 * sin(q[1] + 1.6845))) /
 80065f6:	f107 030c 	add.w	r3, r7, #12
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3308      	adds	r3, #8
 80065fe:	ed93 7b00 	vldr	d7, [r3]
 8006602:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80067e0 <IVK+0x4cb8>
 8006606:	ee37 7b06 	vadd.f64	d7, d7, d6
 800660a:	eeb0 0b47 	vmov.f64	d0, d7
 800660e:	f010 ffc3 	bl	8017598 <sin>
 8006612:	eeb0 7b40 	vmov.f64	d7, d0
 8006616:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80067f8 <IVK+0x4cd0>
 800661a:	ee27 7b06 	vmul.f64	d7, d7, d6
	  dv[24] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 800661e:	ee38 7b07 	vadd.f64	d7, d8, d7
 8006622:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8006800 <IVK+0x4cd8>
 8006626:	ee27 7b06 	vmul.f64	d7, d7, d6
 800662a:	eeb1 5b47 	vneg.f64	d5, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 800662e:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8006632:	ee27 6b07 	vmul.f64	d6, d7, d7
 8006636:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800663a:	ee26 6b07 	vmul.f64	d6, d6, d7
	                             d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800663e:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8006642:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006646:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 800664a:	ee24 7b07 	vmul.f64	d7, d4, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 800664e:	ee36 6b47 	vsub.f64	d6, d6, d7
	                            d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006652:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8006656:	ee27 4b07 	vmul.f64	d4, d7, d7
 800665a:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800665e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                             d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8006662:	ee36 6b07 	vadd.f64	d6, d6, d7
	                           d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8006666:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800666a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800666e:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8006672:	ee24 7b07 	vmul.f64	d7, d4, d7
	                            d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006676:	ee36 6b47 	vsub.f64	d6, d6, d7
	                          d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 800667a:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800667e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006682:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8006686:	ee24 7b07 	vmul.f64	d7, d4, d7
	                           d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 800668a:	ee36 6b07 	vadd.f64	d6, d6, d7
	                         d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800668e:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8006692:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006696:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 800669a:	ee24 7b07 	vmul.f64	d7, d4, d7
	                          d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 800669e:	ee36 6b47 	vsub.f64	d6, d6, d7
	                        d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80066a2:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80066a6:	ee27 4b07 	vmul.f64	d4, d7, d7
 80066aa:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 80066ae:	ee24 7b07 	vmul.f64	d7, d4, d7
	                         d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80066b2:	ee36 6b07 	vadd.f64	d6, d6, d7
	                       d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80066b6:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80066ba:	ee27 4b07 	vmul.f64	d4, d7, d7
 80066be:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 80066c2:	ee24 7b07 	vmul.f64	d7, d4, d7
	                        d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80066c6:	ee36 6b47 	vsub.f64	d6, d6, d7
	                      d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 80066ca:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80066ce:	ee27 4b07 	vmul.f64	d4, d7, d7
 80066d2:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 80066d6:	ee24 7b07 	vmul.f64	d7, d4, d7
	                       d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80066da:	ee36 6b07 	vadd.f64	d6, d6, d7
	                     d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80066de:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80066e2:	ee27 4b07 	vmul.f64	d4, d7, d7
 80066e6:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 80066ea:	ee24 7b07 	vmul.f64	d7, d4, d7
	                      d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 80066ee:	ee36 6b47 	vsub.f64	d6, d6, d7
	                    d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80066f2:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80066f6:	ee27 4b07 	vmul.f64	d4, d7, d7
 80066fa:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 80066fe:	ee24 7b07 	vmul.f64	d7, d4, d7
	                     d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8006702:	ee36 6b07 	vadd.f64	d6, d6, d7
	                   d8 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)));
 8006706:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800670a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800670e:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8006712:	ee24 7b07 	vmul.f64	d7, d4, d7
	                    d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006716:	ee36 7b47 	vsub.f64	d7, d6, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 800671a:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 800671e:	ee27 6b06 	vmul.f64	d6, d7, d6
	                     704.556 * sin(q[1] + 1.6845))) /
 8006722:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[24] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8006726:	f107 0310 	add.w	r3, r7, #16
 800672a:	ed83 7b30 	vstr	d7, [r3, #192]	; 0xc0
	  for (i = 0; i < 5; i++) {
 800672e:	2300      	movs	r3, #0
 8006730:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8006734:	e040      	b.n	80067b8 <IVK+0x4c90>
	    d = 0.0;
 8006736:	f04f 0200 	mov.w	r2, #0
 800673a:	f04f 0300 	mov.w	r3, #0
 800673e:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
	    for (i1 = 0; i1 < 5; i1++) {
 8006742:	2300      	movs	r3, #0
 8006744:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006748:	e023      	b.n	8006792 <IVK+0x4c6a>
	      d += dv[i + 5 * i1] * x_dot[i1];
 800674a:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	441a      	add	r2, r3
 8006754:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006758:	4413      	add	r3, r2
 800675a:	f107 0210 	add.w	r2, r7, #16
 800675e:	00db      	lsls	r3, r3, #3
 8006760:	4413      	add	r3, r2
 8006762:	ed93 6b00 	vldr	d6, [r3]
 8006766:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800676a:	00db      	lsls	r3, r3, #3
 800676c:	f107 0208 	add.w	r2, r7, #8
 8006770:	6812      	ldr	r2, [r2, #0]
 8006772:	4413      	add	r3, r2
 8006774:	ed93 7b00 	vldr	d7, [r3]
 8006778:	ee26 7b07 	vmul.f64	d7, d6, d7
 800677c:	ed97 6b7a 	vldr	d6, [r7, #488]	; 0x1e8
 8006780:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006784:	ed87 7b7a 	vstr	d7, [r7, #488]	; 0x1e8
	    for (i1 = 0; i1 < 5; i1++) {
 8006788:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800678c:	3301      	adds	r3, #1
 800678e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006792:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8006796:	2b04      	cmp	r3, #4
 8006798:	ddd7      	ble.n	800674a <IVK+0x4c22>
	    }
	    m_dot_temp[i] = d;
 800679a:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800679e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	18d1      	adds	r1, r2, r3
 80067a6:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 80067aa:	e9c1 2300 	strd	r2, r3, [r1]
	  for (i = 0; i < 5; i++) {
 80067ae:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80067b2:	3301      	adds	r3, #1
 80067b4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80067b8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80067bc:	2b04      	cmp	r3, #4
 80067be:	ddba      	ble.n	8006736 <IVK+0x4c0e>
	  }
	memcpy(m_dot, m_dot_temp, 40);
 80067c0:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 80067c4:	1d3b      	adds	r3, r7, #4
 80067c6:	2228      	movs	r2, #40	; 0x28
 80067c8:	6818      	ldr	r0, [r3, #0]
 80067ca:	f00d ff4f 	bl	801466c <memcpy>
}
 80067ce:	bf00      	nop
 80067d0:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 80067d4:	46bd      	mov	sp, r7
 80067d6:	ecbd 8b04 	vpop	{d8-d9}
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	f3af 8000 	nop.w
 80067e0:	45a1cac1 	.word	0x45a1cac1
 80067e4:	3ffaf3b6 	.word	0x3ffaf3b6
 80067e8:	39581062 	.word	0x39581062
 80067ec:	3fecc8b4 	.word	0x3fecc8b4
 80067f0:	00000000 	.word	0x00000000
 80067f4:	404e0000 	.word	0x404e0000
 80067f8:	b020c49c 	.word	0xb020c49c
 80067fc:	40860472 	.word	0x40860472
 8006800:	00000000 	.word	0x00000000
 8006804:	40440000 	.word	0x40440000

08006808 <stepper_initialise>:
 */

#include <Library/Motor.h>

void stepper_initialise(Stepper_Motor *dev, TIM_HandleTypeDef *timHandle,
		uint32_t tim_channel, GPIO_TypeDef *dir_port, uint16_t dir_pin, uint8_t dir_mode) {
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
 8006814:	603b      	str	r3, [r7, #0]

	/* Set struct parameters */
	dev->timHandle = timHandle;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	601a      	str	r2, [r3, #0]
	dev->tim_channel = tim_channel;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	605a      	str	r2, [r3, #4]
	dev->dir_port = dir_port;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	609a      	str	r2, [r3, #8]
	dev->dir_pin = dir_pin;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8b3a      	ldrh	r2, [r7, #24]
 800682c:	819a      	strh	r2, [r3, #12]
	/*
	 * dir mode set direction of stepper
	 */
	dev->dir_mode = dir_mode;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	7f3a      	ldrb	r2, [r7, #28]
 8006832:	765a      	strb	r2, [r3, #25]
	HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6898      	ldr	r0, [r3, #8]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	899b      	ldrh	r3, [r3, #12]
 800683c:	2200      	movs	r2, #0
 800683e:	4619      	mov	r1, r3
 8006840:	f006 fcb0 	bl	800d1a4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(dev->timHandle, dev->tim_channel);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	4619      	mov	r1, r3
 800684e:	4610      	mov	r0, r2
 8006850:	f009 fecc 	bl	80105ec <HAL_TIM_PWM_Start>
	dev->freq = 1;
 8006854:	68f9      	ldr	r1, [r7, #12]
 8006856:	f04f 0200 	mov.w	r2, #0
 800685a:	4b09      	ldr	r3, [pc, #36]	; (8006880 <stepper_initialise+0x78>)
 800685c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	stepper_set_speed(dev, 0);
 8006860:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8006878 <stepper_initialise+0x70>
 8006864:	68f8      	ldr	r0, [r7, #12]
 8006866:	f000 f903 	bl	8006a70 <stepper_set_speed>
}
 800686a:	bf00      	nop
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	f3af 8000 	nop.w
	...
 8006880:	3ff00000 	.word	0x3ff00000

08006884 <servo_initialise>:

void servo_initialise(Servo_Motor *dev, TIM_HandleTypeDef *timHandle,uint32_t tim_channel) {
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
	/* Set struct parameters */
	dev->timHandle = timHandle;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	601a      	str	r2, [r3, #0]
	dev->tim_channel = tim_channel;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	605a      	str	r2, [r3, #4]
	HAL_TIM_PWM_Start(dev->timHandle, dev->tim_channel);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	4619      	mov	r1, r3
 80068a6:	4610      	mov	r0, r2
 80068a8:	f009 fea0 	bl	80105ec <HAL_TIM_PWM_Start>
	dev->degree = 1;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2201      	movs	r2, #1
 80068b0:	721a      	strb	r2, [r3, #8]
	servo_set_degree(dev, 0);
 80068b2:	2100      	movs	r1, #0
 80068b4:	68f8      	ldr	r0, [r7, #12]
 80068b6:	f000 f897 	bl	80069e8 <servo_set_degree>
}
 80068ba:	bf00      	nop
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	0000      	movs	r0, r0
 80068c4:	0000      	movs	r0, r0
	...

080068c8 <set_pwm>:

void set_pwm(TIM_HandleTypeDef *tim_pwm, uint32_t tim_channel, double freq,
		double duty_cycle) {
 80068c8:	b480      	push	{r7}
 80068ca:	b089      	sub	sp, #36	; 0x24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6178      	str	r0, [r7, #20]
 80068d0:	6139      	str	r1, [r7, #16]
 80068d2:	ed87 0b02 	vstr	d0, [r7, #8]
 80068d6:	ed87 1b00 	vstr	d1, [r7]

	 :param freq = frequency of pwm
	 :param duty_cycle is % duty cycle 0.0 - 1.0
	 :return: None
	 */
	if (freq > MAX_FREQUENCY){
 80068da:	ed97 7b02 	vldr	d7, [r7, #8]
 80068de:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80069d0 <set_pwm+0x108>
 80068e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80068e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ea:	dd05      	ble.n	80068f8 <set_pwm+0x30>
		freq = MAX_FREQUENCY;
 80068ec:	a338      	add	r3, pc, #224	; (adr r3, 80069d0 <set_pwm+0x108>)
 80068ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80068f6:	e00d      	b.n	8006914 <set_pwm+0x4c>
	}
	else if ((freq * -1) > MAX_FREQUENCY){
 80068f8:	ed97 7b02 	vldr	d7, [r7, #8]
 80068fc:	ed9f 6b36 	vldr	d6, [pc, #216]	; 80069d8 <set_pwm+0x110>
 8006900:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006908:	d504      	bpl.n	8006914 <set_pwm+0x4c>
		freq = MAX_FREQUENCY;
 800690a:	a331      	add	r3, pc, #196	; (adr r3, 80069d0 <set_pwm+0x108>)
 800690c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006910:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}
	uint16_t ARR_value = 50000 / freq; //500000 come from 275MHz/550
 8006914:	ed9f 5b32 	vldr	d5, [pc, #200]	; 80069e0 <set_pwm+0x118>
 8006918:	ed97 6b02 	vldr	d6, [r7, #8]
 800691c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006920:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006924:	ee17 3a90 	vmov	r3, s15
 8006928:	83bb      	strh	r3, [r7, #28]
	uint16_t CCRx_value = (ARR_value * duty_cycle);
 800692a:	8bbb      	ldrh	r3, [r7, #28]
 800692c:	ee07 3a90 	vmov	s15, r3
 8006930:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8006934:	ed97 7b00 	vldr	d7, [r7]
 8006938:	ee26 7b07 	vmul.f64	d7, d6, d7
 800693c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006940:	ee17 3a90 	vmov	r3, s15
 8006944:	83fb      	strh	r3, [r7, #30]
	if (duty_cycle == 1.0) {
 8006946:	ed97 7b00 	vldr	d7, [r7]
 800694a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800694e:	eeb4 7b46 	vcmp.f64	d7, d6
 8006952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006956:	d101      	bne.n	800695c <set_pwm+0x94>
		CCRx_value = 0;
 8006958:	2300      	movs	r3, #0
 800695a:	83fb      	strh	r3, [r7, #30]
	}
	__HAL_TIM_SET_AUTORELOAD(tim_pwm, ARR_value);
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	8bba      	ldrh	r2, [r7, #28]
 8006962:	62da      	str	r2, [r3, #44]	; 0x2c
 8006964:	8bba      	ldrh	r2, [r7, #28]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d104      	bne.n	800697a <set_pwm+0xb2>
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	8bfa      	ldrh	r2, [r7, #30]
 8006976:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006978:	e023      	b.n	80069c2 <set_pwm+0xfa>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	2b04      	cmp	r3, #4
 800697e:	d104      	bne.n	800698a <set_pwm+0xc2>
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	8bfb      	ldrh	r3, [r7, #30]
 8006986:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006988:	e01b      	b.n	80069c2 <set_pwm+0xfa>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	2b08      	cmp	r3, #8
 800698e:	d104      	bne.n	800699a <set_pwm+0xd2>
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	8bfb      	ldrh	r3, [r7, #30]
 8006996:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8006998:	e013      	b.n	80069c2 <set_pwm+0xfa>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	2b0c      	cmp	r3, #12
 800699e:	d104      	bne.n	80069aa <set_pwm+0xe2>
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	8bfb      	ldrh	r3, [r7, #30]
 80069a6:	6413      	str	r3, [r2, #64]	; 0x40
}
 80069a8:	e00b      	b.n	80069c2 <set_pwm+0xfa>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	2b10      	cmp	r3, #16
 80069ae:	d104      	bne.n	80069ba <set_pwm+0xf2>
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	8bfb      	ldrh	r3, [r7, #30]
 80069b6:	6593      	str	r3, [r2, #88]	; 0x58
}
 80069b8:	e003      	b.n	80069c2 <set_pwm+0xfa>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	8bfb      	ldrh	r3, [r7, #30]
 80069c0:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 80069c2:	bf00      	nop
 80069c4:	3724      	adds	r7, #36	; 0x24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
 80069ce:	bf00      	nop
 80069d0:	00000000 	.word	0x00000000
 80069d4:	40d86a00 	.word	0x40d86a00
 80069d8:	00000000 	.word	0x00000000
 80069dc:	c0d86a00 	.word	0xc0d86a00
 80069e0:	00000000 	.word	0x00000000
 80069e4:	40e86a00 	.word	0x40e86a00

080069e8 <servo_set_degree>:

void servo_set_degree(Servo_Motor *dev, uint8_t degree) {
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70fb      	strb	r3, [r7, #3]
	 servo_set_degree does set your servo to your given value.

	 :param degree is degree of servo motor (0-180)
	 :return: None
	 */
	if (degree != dev->degree) {
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	7a1b      	ldrb	r3, [r3, #8]
 80069f8:	78fa      	ldrb	r2, [r7, #3]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d026      	beq.n	8006a4c <servo_set_degree+0x64>
		if (degree > 180) {
 80069fe:	78fb      	ldrb	r3, [r7, #3]
 8006a00:	2bb4      	cmp	r3, #180	; 0xb4
 8006a02:	d901      	bls.n	8006a08 <servo_set_degree+0x20>
			degree = 180.0;
 8006a04:	23b4      	movs	r3, #180	; 0xb4
 8006a06:	70fb      	strb	r3, [r7, #3]
		} else if (degree < 0) {
			degree = 0.0;
		}
		double cyc = 0.05 + ((degree / 180.0) * 0.05);
 8006a08:	78fb      	ldrb	r3, [r7, #3]
 8006a0a:	ee07 3a90 	vmov	s15, r3
 8006a0e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8006a12:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8006a58 <servo_set_degree+0x70>
 8006a16:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006a1a:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8006a60 <servo_set_degree+0x78>
 8006a1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006a22:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8006a60 <servo_set_degree+0x78>
 8006a26:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006a2a:	ed87 7b02 	vstr	d7, [r7, #8]
		set_pwm(dev->timHandle, dev->tim_channel, 50, cyc);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	ed97 1b02 	vldr	d1, [r7, #8]
 8006a3a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8006a68 <servo_set_degree+0x80>
 8006a3e:	4619      	mov	r1, r3
 8006a40:	4610      	mov	r0, r2
 8006a42:	f7ff ff41 	bl	80068c8 <set_pwm>
		dev->degree = degree;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	78fa      	ldrb	r2, [r7, #3]
 8006a4a:	721a      	strb	r2, [r3, #8]
	}
}
 8006a4c:	bf00      	nop
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	f3af 8000 	nop.w
 8006a58:	00000000 	.word	0x00000000
 8006a5c:	40668000 	.word	0x40668000
 8006a60:	9999999a 	.word	0x9999999a
 8006a64:	3fa99999 	.word	0x3fa99999
 8006a68:	00000000 	.word	0x00000000
 8006a6c:	40490000 	.word	0x40490000

08006a70 <stepper_set_speed>:

void stepper_set_speed(Stepper_Motor *dev, double freq) {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	ed87 0b00 	vstr	d0, [r7]
	 stepper_set_speed does set your stepper to your given value.

	 :param freq can be -9999.9999 to 9999.9999. signed value use to set stepper direction.
	 :return: None
	 */
	if (freq != dev->freq) {
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	ed93 7b04 	vldr	d7, [r3, #16]
 8006a82:	ed97 6b00 	vldr	d6, [r7]
 8006a86:	eeb4 6b47 	vcmp.f64	d6, d7
 8006a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a8e:	d072      	beq.n	8006b76 <stepper_set_speed+0x106>
		if (freq > MIN_FREQUENCY) {
 8006a90:	ed97 7b00 	vldr	d7, [r7]
 8006a94:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006a98:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa0:	dd25      	ble.n	8006aee <stepper_set_speed+0x7e>
			if (dev->dir_mode == 0){
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	7e5b      	ldrb	r3, [r3, #25]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d108      	bne.n	8006abc <stepper_set_speed+0x4c>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6898      	ldr	r0, [r3, #8]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	899b      	ldrh	r3, [r3, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	f006 fb75 	bl	800d1a4 <HAL_GPIO_WritePin>
 8006aba:	e00b      	b.n	8006ad4 <stepper_set_speed+0x64>
			}
			else if (dev->dir_mode == 1){
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	7e5b      	ldrb	r3, [r3, #25]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d107      	bne.n	8006ad4 <stepper_set_speed+0x64>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 1);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6898      	ldr	r0, [r3, #8]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	899b      	ldrh	r3, [r3, #12]
 8006acc:	2201      	movs	r2, #1
 8006ace:	4619      	mov	r1, r3
 8006ad0:	f006 fb68 	bl	800d1a4 <HAL_GPIO_WritePin>
			}
			set_pwm(dev->timHandle, dev->tim_channel, freq, 0.50);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8006ae0:	ed97 0b00 	vldr	d0, [r7]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	4610      	mov	r0, r2
 8006ae8:	f7ff feee 	bl	80068c8 <set_pwm>
 8006aec:	e03e      	b.n	8006b6c <stepper_set_speed+0xfc>
		} else if (freq < (-1 * MIN_FREQUENCY)) {
 8006aee:	ed97 7b00 	vldr	d7, [r7]
 8006af2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8006af6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006afe:	d529      	bpl.n	8006b54 <stepper_set_speed+0xe4>
			if (dev->dir_mode == 0){
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	7e5b      	ldrb	r3, [r3, #25]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d108      	bne.n	8006b1a <stepper_set_speed+0xaa>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 1);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6898      	ldr	r0, [r3, #8]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	899b      	ldrh	r3, [r3, #12]
 8006b10:	2201      	movs	r2, #1
 8006b12:	4619      	mov	r1, r3
 8006b14:	f006 fb46 	bl	800d1a4 <HAL_GPIO_WritePin>
 8006b18:	e00b      	b.n	8006b32 <stepper_set_speed+0xc2>
			}
			else if (dev->dir_mode == 1){
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	7e5b      	ldrb	r3, [r3, #25]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d107      	bne.n	8006b32 <stepper_set_speed+0xc2>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6898      	ldr	r0, [r3, #8]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	899b      	ldrh	r3, [r3, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	f006 fb39 	bl	800d1a4 <HAL_GPIO_WritePin>
			}
			set_pwm(dev->timHandle, dev->tim_channel, (-1*freq), 0.50);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	ed97 7b00 	vldr	d7, [r7]
 8006b3e:	eeb1 7b47 	vneg.f64	d7, d7
 8006b42:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8006b46:	eeb0 0b47 	vmov.f64	d0, d7
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	4610      	mov	r0, r2
 8006b4e:	f7ff febb 	bl	80068c8 <set_pwm>
 8006b52:	e00b      	b.n	8006b6c <stepper_set_speed+0xfc>
		} else {
			set_pwm(dev->timHandle, dev->tim_channel, 100, 1.0);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	eeb7 1b00 	vmov.f64	d1, #112	; 0x3f800000  1.0
 8006b60:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8006b80 <stepper_set_speed+0x110>
 8006b64:	4619      	mov	r1, r3
 8006b66:	4610      	mov	r0, r2
 8006b68:	f7ff feae 	bl	80068c8 <set_pwm>
		}
		dev->freq = freq;
 8006b6c:	68f9      	ldr	r1, [r7, #12]
 8006b6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b72:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
}
 8006b76:	bf00      	nop
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	00000000 	.word	0x00000000
 8006b84:	40590000 	.word	0x40590000

08006b88 <PIDController_initialise>:
 *      Author: fame
 */
#include <Library/PID.h>

void PIDController_initialise(PIDController *pid, double Kp, double Ki,
		double Kd) {
 8006b88:	b480      	push	{r7}
 8006b8a:	b089      	sub	sp, #36	; 0x24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	61f8      	str	r0, [r7, #28]
 8006b90:	ed87 0b04 	vstr	d0, [r7, #16]
 8006b94:	ed87 1b02 	vstr	d1, [r7, #8]
 8006b98:	ed87 2b00 	vstr	d2, [r7]
	pid->Kp = Kp;
 8006b9c:	69f9      	ldr	r1, [r7, #28]
 8006b9e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006ba2:	e9c1 2300 	strd	r2, r3, [r1]
	pid->Ki = Ki;
 8006ba6:	69f9      	ldr	r1, [r7, #28]
 8006ba8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bac:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pid->Kd = Kd;
 8006bb0:	69f9      	ldr	r1, [r7, #28]
 8006bb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bb6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pid->out = 0;
 8006bba:	69f9      	ldr	r1, [r7, #28]
 8006bbc:	f04f 0200 	mov.w	r2, #0
 8006bc0:	f04f 0300 	mov.w	r3, #0
 8006bc4:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
}
 8006bc8:	bf00      	nop
 8006bca:	3724      	adds	r7, #36	; 0x24
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <PIDController_update>:
		pid->int_lim_frag = 1;
	}
}

double PIDController_update(PIDController *pid, double setpoint,
		double measurement) {
 8006bd4:	b480      	push	{r7}
 8006bd6:	b089      	sub	sp, #36	; 0x24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6178      	str	r0, [r7, #20]
 8006bdc:	ed87 0b02 	vstr	d0, [r7, #8]
 8006be0:	ed87 1b00 	vstr	d1, [r7]
	double error = setpoint - measurement;
 8006be4:	ed97 6b02 	vldr	d6, [r7, #8]
 8006be8:	ed97 7b00 	vldr	d7, [r7]
 8006bec:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006bf0:	ed87 7b06 	vstr	d7, [r7, #24]
	/*
	 * P term
	 */
	pid->proportional_term = pid->Kp * error;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	ed93 6b00 	vldr	d6, [r3]
 8006bfa:	ed97 7b06 	vldr	d7, [r7, #24]
 8006bfe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

	/*
	 * I term
	 */
	pid->integrator += error;
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8006c0e:	ed97 7b06 	vldr	d7, [r7, #24]
 8006c12:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	pid->integral_term = pid->Ki * pid->integrator;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	ed93 6b02 	vldr	d6, [r3, #8]
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8006c28:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	if (pid->int_lim_frag){
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8006c38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c40:	d026      	beq.n	8006c90 <PIDController_update+0xbc>
		if (pid->integral_term > pid->int_lim){
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8006c4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c56:	dd06      	ble.n	8006c66 <PIDController_update+0x92>
			pid->integral_term = pid->int_lim;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006c5e:	6979      	ldr	r1, [r7, #20]
 8006c60:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8006c64:	e014      	b.n	8006c90 <PIDController_update+0xbc>
		}
		else if (pid->integral_term < (-1*pid->int_lim)){
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8006c72:	eeb1 7b47 	vneg.f64	d7, d7
 8006c76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c7e:	d507      	bpl.n	8006c90 <PIDController_update+0xbc>
			pid->integral_term = (pid->int_lim * -1);
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8006c86:	eeb1 7b47 	vneg.f64	d7, d7
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
		}
	}
	/*
	 * D term
	 */
	pid->derivative_term = pid->Kd * (error - pid->prevError);
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	ed93 6b04 	vldr	d6, [r3, #16]
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8006c9c:	ed97 5b06 	vldr	d5, [r7, #24]
 8006ca0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006ca4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	pid->prevError = error;
 8006cae:	6979      	ldr	r1, [r7, #20]
 8006cb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cb4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	/*
	 * Calculate a final value
	 */
	pid->out = pid->proportional_term + pid->integral_term
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8006cc4:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ pid->derivative_term;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8006cce:	ee36 7b07 	vadd.f64	d7, d6, d7
	pid->out = pid->proportional_term + pid->integral_term
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
	if (pid->out_lim_frag){
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	ed93 7b08 	vldr	d7, [r3, #32]
 8006cde:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ce6:	d026      	beq.n	8006d36 <PIDController_update+0x162>
		if (pid->out > pid->out_lim){
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	ed93 7b06 	vldr	d7, [r3, #24]
 8006cf4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cfc:	dd06      	ble.n	8006d0c <PIDController_update+0x138>
			pid->out = pid->out_lim;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006d04:	6979      	ldr	r1, [r7, #20]
 8006d06:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006d0a:	e014      	b.n	8006d36 <PIDController_update+0x162>
		}
		else if (pid->out < (-1*pid->out_lim)){
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	ed93 7b06 	vldr	d7, [r3, #24]
 8006d18:	eeb1 7b47 	vneg.f64	d7, d7
 8006d1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d24:	d507      	bpl.n	8006d36 <PIDController_update+0x162>
			pid->out= (pid->out_lim * -1);
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	ed93 7b06 	vldr	d7, [r3, #24]
 8006d2c:	eeb1 7b47 	vneg.f64	d7, d7
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
		}
	}
	return pid->out;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006d3c:	ec43 2b17 	vmov	d7, r2, r3
}
 8006d40:	eeb0 0b47 	vmov.f64	d0, d7
 8006d44:	3724      	adds	r7, #36	; 0x24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <Cascade_PIDController_update>:

double Cascade_PIDController_update(PIDController *position_pid,
		PIDController *velocity_pid, KalmanFilter *kalman_filter,
		double desired_position, double desired_velocity) {
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b08e      	sub	sp, #56	; 0x38
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	61f8      	str	r0, [r7, #28]
 8006d56:	61b9      	str	r1, [r7, #24]
 8006d58:	617a      	str	r2, [r7, #20]
 8006d5a:	ed87 0b02 	vstr	d0, [r7, #8]
 8006d5e:	ed87 1b00 	vstr	d1, [r7]
	double velocity_command = PIDController_update(position_pid,
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	ed93 7b04 	vldr	d7, [r3, #16]
 8006d68:	eeb0 1b47 	vmov.f64	d1, d7
 8006d6c:	ed97 0b02 	vldr	d0, [r7, #8]
 8006d70:	69f8      	ldr	r0, [r7, #28]
 8006d72:	f7ff ff2f 	bl	8006bd4 <PIDController_update>
 8006d76:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
			desired_position, kalman_filter->x1);
	double velocity_error = desired_velocity + velocity_command
 8006d7a:	ed97 6b00 	vldr	d6, [r7]
 8006d7e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8006d82:	ee36 6b07 	vadd.f64	d6, d6, d7
			- kalman_filter->x2;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	ed93 7b06 	vldr	d7, [r3, #24]
	double velocity_error = desired_velocity + velocity_command
 8006d8c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006d90:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	double out = PIDController_update(velocity_pid, velocity_error,
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	ed93 7b06 	vldr	d7, [r3, #24]
 8006d9a:	eeb0 1b47 	vmov.f64	d1, d7
 8006d9e:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8006da2:	69b8      	ldr	r0, [r7, #24]
 8006da4:	f7ff ff16 	bl	8006bd4 <PIDController_update>
 8006da8:	ed87 0b08 	vstr	d0, [r7, #32]
			kalman_filter->x2);
	return out;
 8006dac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006db0:	ec43 2b17 	vmov	d7, r2, r3
}
 8006db4:	eeb0 0b47 	vmov.f64	d0, d7
 8006db8:	3738      	adds	r7, #56	; 0x38
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <QuinticTrajectory_initialise>:
 *      Author: fame
 */

#include <Library/Trajectory.h>

void QuinticTrajectory_initialise(QuinticTrajectory *Traj, double time_step) {
 8006dbe:	b480      	push	{r7}
 8006dc0:	b085      	sub	sp, #20
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	60f8      	str	r0, [r7, #12]
 8006dc6:	ed87 0b00 	vstr	d0, [r7]
	Traj->is_end = 1;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	701a      	strb	r2, [r3, #0]
	Traj->c0 = 0;
 8006dd0:	68f9      	ldr	r1, [r7, #12]
 8006dd2:	f04f 0200 	mov.w	r2, #0
 8006dd6:	f04f 0300 	mov.w	r3, #0
 8006dda:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Traj->c1 = 0;
 8006dde:	68f9      	ldr	r1, [r7, #12]
 8006de0:	f04f 0200 	mov.w	r2, #0
 8006de4:	f04f 0300 	mov.w	r3, #0
 8006de8:	e9c1 2308 	strd	r2, r3, [r1, #32]
	Traj->c2 = 0;
 8006dec:	68f9      	ldr	r1, [r7, #12]
 8006dee:	f04f 0200 	mov.w	r2, #0
 8006df2:	f04f 0300 	mov.w	r3, #0
 8006df6:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Traj->c3 = 0;
 8006dfa:	68f9      	ldr	r1, [r7, #12]
 8006dfc:	f04f 0200 	mov.w	r2, #0
 8006e00:	f04f 0300 	mov.w	r3, #0
 8006e04:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Traj->c4 = 0;
 8006e08:	68f9      	ldr	r1, [r7, #12]
 8006e0a:	f04f 0200 	mov.w	r2, #0
 8006e0e:	f04f 0300 	mov.w	r3, #0
 8006e12:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Traj->c5 = 0;
 8006e16:	68f9      	ldr	r1, [r7, #12]
 8006e18:	f04f 0200 	mov.w	r2, #0
 8006e1c:	f04f 0300 	mov.w	r3, #0
 8006e20:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	Traj->pos_out = 0;
 8006e24:	68f9      	ldr	r1, [r7, #12]
 8006e26:	f04f 0200 	mov.w	r2, #0
 8006e2a:	f04f 0300 	mov.w	r3, #0
 8006e2e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	Traj->vel_out = 0;
 8006e32:	68f9      	ldr	r1, [r7, #12]
 8006e34:	f04f 0200 	mov.w	r2, #0
 8006e38:	f04f 0300 	mov.w	r3, #0
 8006e3c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	Traj->current_time = 0;
 8006e40:	68f9      	ldr	r1, [r7, #12]
 8006e42:	f04f 0200 	mov.w	r2, #0
 8006e46:	f04f 0300 	mov.w	r3, #0
 8006e4a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	Traj->time_step = time_step;
 8006e4e:	68f9      	ldr	r1, [r7, #12]
 8006e50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e54:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Traj->time_max = 0;
 8006e58:	68f9      	ldr	r1, [r7, #12]
 8006e5a:	f04f 0200 	mov.w	r2, #0
 8006e5e:	f04f 0300 	mov.w	r3, #0
 8006e62:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8006e66:	bf00      	nop
 8006e68:	3714      	adds	r7, #20
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
	...

08006e74 <QuinticTrajectory_cal_and_set_coeff>:

void QuinticTrajectory_cal_and_set_coeff(QuinticTrajectory *Traj, double q0,
		double q1, double v0, double v1, double ac0, double ac1, double tf) {
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b0f6      	sub	sp, #472	; 0x1d8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006e7e:	6018      	str	r0, [r3, #0]
 8006e80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006e84:	ed83 0b00 	vstr	d0, [r3]
 8006e88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006e8c:	ed83 1b00 	vstr	d1, [r3]
 8006e90:	f107 0320 	add.w	r3, r7, #32
 8006e94:	ed83 2b00 	vstr	d2, [r3]
 8006e98:	f107 0318 	add.w	r3, r7, #24
 8006e9c:	ed83 3b00 	vstr	d3, [r3]
 8006ea0:	f107 0310 	add.w	r3, r7, #16
 8006ea4:	ed83 4b00 	vstr	d4, [r3]
 8006ea8:	f107 0308 	add.w	r3, r7, #8
 8006eac:	ed83 5b00 	vstr	d5, [r3]
 8006eb0:	463b      	mov	r3, r7
 8006eb2:	ed83 6b00 	vstr	d6, [r3]
	int jp1j;
	int k;
	int mmj_tmp;
	signed char ipiv[6];
	signed char i1;
	M[3] = 1.0;
 8006eb6:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006eba:	f04f 0200 	mov.w	r2, #0
 8006ebe:	4bb6      	ldr	r3, [pc, #728]	; (8007198 <QuinticTrajectory_cal_and_set_coeff+0x324>)
 8006ec0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	M[9] = tf;
 8006ec4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006ec8:	463b      	mov	r3, r7
 8006eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ece:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	smax = tf * tf;
 8006ed2:	463b      	mov	r3, r7
 8006ed4:	ed93 7b00 	vldr	d7, [r3]
 8006ed8:	ee27 7b07 	vmul.f64	d7, d7, d7
 8006edc:	ed87 7b74 	vstr	d7, [r7, #464]	; 0x1d0
	M[15] = smax;
 8006ee0:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006ee4:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8006ee8:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	s = pow(tf, 3.0);
 8006eec:	463b      	mov	r3, r7
 8006eee:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8006ef2:	ed93 0b00 	vldr	d0, [r3]
 8006ef6:	f010 f837 	bl	8016f68 <pow>
 8006efa:	ed87 0b6c 	vstr	d0, [r7, #432]	; 0x1b0
	M[21] = s;
 8006efe:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006f02:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8006f06:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
	M_tmp = pow(tf, 4.0);
 8006f0a:	463b      	mov	r3, r7
 8006f0c:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8006f10:	ed93 0b00 	vldr	d0, [r3]
 8006f14:	f010 f828 	bl	8016f68 <pow>
 8006f18:	ed87 0b6a 	vstr	d0, [r7, #424]	; 0x1a8
	M[27] = M_tmp;
 8006f1c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006f20:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8006f24:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
	M[33] = pow(tf, 5.0);
 8006f28:	463b      	mov	r3, r7
 8006f2a:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8006f2e:	ed93 0b00 	vldr	d0, [r3]
 8006f32:	f010 f819 	bl	8016f68 <pow>
 8006f36:	eeb0 7b40 	vmov.f64	d7, d0
 8006f3a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006f3e:	ed83 7b42 	vstr	d7, [r3, #264]	; 0x108
	M[4] = 0.0;
 8006f42:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006f46:	f04f 0200 	mov.w	r2, #0
 8006f4a:	f04f 0300 	mov.w	r3, #0
 8006f4e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	M[10] = 1.0;
 8006f52:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006f56:	f04f 0200 	mov.w	r2, #0
 8006f5a:	4b8f      	ldr	r3, [pc, #572]	; (8007198 <QuinticTrajectory_cal_and_set_coeff+0x324>)
 8006f5c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	M[16] = 2.0 * tf;
 8006f60:	463b      	mov	r3, r7
 8006f62:	ed93 7b00 	vldr	d7, [r3]
 8006f66:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006f6a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006f6e:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
	M[22] = 3.0 * smax;
 8006f72:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8006f76:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8006f7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006f7e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006f82:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
	M[28] = 4.0 * s;
 8006f86:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8006f8a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8006f8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006f92:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006f96:	ed83 7b38 	vstr	d7, [r3, #224]	; 0xe0
	M[34] = 5.0 * M_tmp;
 8006f9a:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8006f9e:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 8006fa2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006fa6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006faa:	ed83 7b44 	vstr	d7, [r3, #272]	; 0x110
	M[5] = 0.0;
 8006fae:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006fb2:	f04f 0200 	mov.w	r2, #0
 8006fb6:	f04f 0300 	mov.w	r3, #0
 8006fba:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	M[11] = 0.0;
 8006fbe:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006fc2:	f04f 0200 	mov.w	r2, #0
 8006fc6:	f04f 0300 	mov.w	r3, #0
 8006fca:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	M[17] = 2.0;
 8006fce:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006fd2:	f04f 0200 	mov.w	r2, #0
 8006fd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006fda:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	M[23] = 6.0 * tf;
 8006fde:	463b      	mov	r3, r7
 8006fe0:	ed93 7b00 	vldr	d7, [r3]
 8006fe4:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8006fe8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006fec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006ff0:	ed83 7b2e 	vstr	d7, [r3, #184]	; 0xb8
	M[29] = 12.0 * smax;
 8006ff4:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8006ff8:	eeb2 6b08 	vmov.f64	d6, #40	; 0x41400000  12.0
 8006ffc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007000:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007004:	ed83 7b3a 	vstr	d7, [r3, #232]	; 0xe8
	M[35] = 20.0 * s;
 8007008:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 800700c:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8007010:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007014:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007018:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
	/*  */
	a[0] = q0;
 800701c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8007020:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007028:	e9c1 2300 	strd	r2, r3, [r1]
	a[1] = v0;
 800702c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8007030:	f107 0320 	add.w	r3, r7, #32
 8007034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007038:	e9c1 2302 	strd	r2, r3, [r1, #8]
	a[2] = ac0;
 800703c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8007040:	f107 0310 	add.w	r3, r7, #16
 8007044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007048:	e9c1 2304 	strd	r2, r3, [r1, #16]
	a[3] = q1;
 800704c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8007050:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	e9c1 2306 	strd	r2, r3, [r1, #24]
	a[4] = v1;
 800705c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8007060:	f107 0318 	add.w	r3, r7, #24
 8007064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007068:	e9c1 2308 	strd	r2, r3, [r1, #32]
	a[5] = ac1;
 800706c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8007070:	f107 0308 	add.w	r3, r7, #8
 8007074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007078:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	for (i = 0; i < 6; i++) {
 800707c:	2300      	movs	r3, #0
 800707e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8007082:	e055      	b.n	8007130 <QuinticTrajectory_cal_and_set_coeff+0x2bc>
		M[6 * i] = iv[i];
 8007084:	4a45      	ldr	r2, [pc, #276]	; (800719c <QuinticTrajectory_cal_and_set_coeff+0x328>)
 8007086:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800708a:	4413      	add	r3, r2
 800708c:	f993 1000 	ldrsb.w	r1, [r3]
 8007090:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8007094:	4613      	mov	r3, r2
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	4413      	add	r3, r2
 800709a:	005b      	lsls	r3, r3, #1
 800709c:	ee07 1a90 	vmov	s15, r1
 80070a0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070a4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80070a8:	00db      	lsls	r3, r3, #3
 80070aa:	4413      	add	r3, r2
 80070ac:	ed83 7b00 	vstr	d7, [r3]
		M[6 * i + 1] = iv1[i];
 80070b0:	4a3b      	ldr	r2, [pc, #236]	; (80071a0 <QuinticTrajectory_cal_and_set_coeff+0x32c>)
 80070b2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80070b6:	4413      	add	r3, r2
 80070b8:	f993 1000 	ldrsb.w	r1, [r3]
 80070bc:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 80070c0:	4613      	mov	r3, r2
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	4413      	add	r3, r2
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	3301      	adds	r3, #1
 80070ca:	ee07 1a90 	vmov	s15, r1
 80070ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070d2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80070d6:	00db      	lsls	r3, r3, #3
 80070d8:	4413      	add	r3, r2
 80070da:	ed83 7b00 	vstr	d7, [r3]
		M[6 * i + 2] = iv2[i];
 80070de:	4a31      	ldr	r2, [pc, #196]	; (80071a4 <QuinticTrajectory_cal_and_set_coeff+0x330>)
 80070e0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80070e4:	4413      	add	r3, r2
 80070e6:	f993 1000 	ldrsb.w	r1, [r3]
 80070ea:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 80070ee:	4613      	mov	r3, r2
 80070f0:	005b      	lsls	r3, r3, #1
 80070f2:	4413      	add	r3, r2
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	3302      	adds	r3, #2
 80070f8:	ee07 1a90 	vmov	s15, r1
 80070fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007100:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007104:	00db      	lsls	r3, r3, #3
 8007106:	4413      	add	r3, r2
 8007108:	ed83 7b00 	vstr	d7, [r3]
		ipiv[i] = (signed char) (i + 1);
 800710c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007110:	b2db      	uxtb	r3, r3
 8007112:	3301      	adds	r3, #1
 8007114:	b2db      	uxtb	r3, r3
 8007116:	b259      	sxtb	r1, r3
 8007118:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800711c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007120:	4413      	add	r3, r2
 8007122:	460a      	mov	r2, r1
 8007124:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 6; i++) {
 8007126:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800712a:	3301      	adds	r3, #1
 800712c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8007130:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007134:	2b05      	cmp	r3, #5
 8007136:	dda5      	ble.n	8007084 <QuinticTrajectory_cal_and_set_coeff+0x210>
	}
	for (j = 0; j < 5; j++) {
 8007138:	2300      	movs	r3, #0
 800713a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800713e:	e1b8      	b.n	80074b2 <QuinticTrajectory_cal_and_set_coeff+0x63e>
		mmj_tmp = 4 - j;
 8007140:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007144:	f1c3 0304 	rsb	r3, r3, #4
 8007148:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
		b_tmp = j * 7;
 800714c:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8007150:	4613      	mov	r3, r2
 8007152:	00db      	lsls	r3, r3, #3
 8007154:	1a9b      	subs	r3, r3, r2
 8007156:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
		jp1j = b_tmp + 2;
 800715a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800715e:	3302      	adds	r3, #2
 8007160:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
		jA = 6 - j;
 8007164:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007168:	f1c3 0306 	rsb	r3, r3, #6
 800716c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
		b_a = 0;
 8007170:	2300      	movs	r3, #0
 8007172:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
		smax = fabs(M[b_tmp]);
 8007176:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800717a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	4413      	add	r3, r2
 8007182:	ed93 7b00 	vldr	d7, [r3]
 8007186:	eeb0 7bc7 	vabs.f64	d7, d7
 800718a:	ed87 7b74 	vstr	d7, [r7, #464]	; 0x1d0
		for (k = 2; k <= jA; k++) {
 800718e:	2302      	movs	r3, #2
 8007190:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8007194:	e02f      	b.n	80071f6 <QuinticTrajectory_cal_and_set_coeff+0x382>
 8007196:	bf00      	nop
 8007198:	3ff00000 	.word	0x3ff00000
 800719c:	08018538 	.word	0x08018538
 80071a0:	08018540 	.word	0x08018540
 80071a4:	08018548 	.word	0x08018548
			s = fabs(M[(b_tmp + k) - 1]);
 80071a8:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80071ac:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80071b0:	4413      	add	r3, r2
 80071b2:	3b01      	subs	r3, #1
 80071b4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80071b8:	00db      	lsls	r3, r3, #3
 80071ba:	4413      	add	r3, r2
 80071bc:	ed93 7b00 	vldr	d7, [r3]
 80071c0:	eeb0 7bc7 	vabs.f64	d7, d7
 80071c4:	ed87 7b6c 	vstr	d7, [r7, #432]	; 0x1b0
			if (s > smax) {
 80071c8:	ed97 6b6c 	vldr	d6, [r7, #432]	; 0x1b0
 80071cc:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 80071d0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80071d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d8:	dd08      	ble.n	80071ec <QuinticTrajectory_cal_and_set_coeff+0x378>
				b_a = k - 1;
 80071da:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80071de:	3b01      	subs	r3, #1
 80071e0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
				smax = s;
 80071e4:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 80071e8:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
		for (k = 2; k <= jA; k++) {
 80071ec:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80071f0:	3301      	adds	r3, #1
 80071f2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80071f6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80071fa:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80071fe:	429a      	cmp	r2, r3
 8007200:	ddd2      	ble.n	80071a8 <QuinticTrajectory_cal_and_set_coeff+0x334>
			}
		}
		if (M[b_tmp + b_a] != 0.0) {
 8007202:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8007206:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800720a:	4413      	add	r3, r2
 800720c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007210:	00db      	lsls	r3, r3, #3
 8007212:	4413      	add	r3, r2
 8007214:	ed93 7b00 	vldr	d7, [r3]
 8007218:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800721c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007220:	f000 8095 	beq.w	800734e <QuinticTrajectory_cal_and_set_coeff+0x4da>
			if (b_a != 0) {
 8007224:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007228:	2b00      	cmp	r3, #0
 800722a:	d05c      	beq.n	80072e6 <QuinticTrajectory_cal_and_set_coeff+0x472>
				jA = j + b_a;
 800722c:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8007230:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007234:	4413      	add	r3, r2
 8007236:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
				ipiv[j] = (signed char) (jA + 1);
 800723a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800723e:	b2db      	uxtb	r3, r3
 8007240:	3301      	adds	r3, #1
 8007242:	b2db      	uxtb	r3, r3
 8007244:	b259      	sxtb	r1, r3
 8007246:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800724a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800724e:	4413      	add	r3, r2
 8007250:	460a      	mov	r2, r1
 8007252:	701a      	strb	r2, [r3, #0]
				for (k = 0; k < 6; k++) {
 8007254:	2300      	movs	r3, #0
 8007256:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800725a:	e040      	b.n	80072de <QuinticTrajectory_cal_and_set_coeff+0x46a>
					b_a = j + k * 6;
 800725c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007260:	4613      	mov	r3, r2
 8007262:	005b      	lsls	r3, r3, #1
 8007264:	4413      	add	r3, r2
 8007266:	005b      	lsls	r3, r3, #1
 8007268:	461a      	mov	r2, r3
 800726a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800726e:	4413      	add	r3, r2
 8007270:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
					smax = M[b_a];
 8007274:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007278:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800727c:	00db      	lsls	r3, r3, #3
 800727e:	4413      	add	r3, r2
 8007280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007284:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
					b_M_tmp = jA + k * 6;
 8007288:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800728c:	4613      	mov	r3, r2
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	4413      	add	r3, r2
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	461a      	mov	r2, r3
 8007296:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800729a:	4413      	add	r3, r2
 800729c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
					M[b_a] = M[b_M_tmp];
 80072a0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80072a4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80072a8:	00db      	lsls	r3, r3, #3
 80072aa:	4413      	add	r3, r2
 80072ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b0:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80072b4:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 80072b8:	00c9      	lsls	r1, r1, #3
 80072ba:	4401      	add	r1, r0
 80072bc:	e9c1 2300 	strd	r2, r3, [r1]
					M[b_M_tmp] = smax;
 80072c0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80072c4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80072c8:	00db      	lsls	r3, r3, #3
 80072ca:	18d1      	adds	r1, r2, r3
 80072cc:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 80072d0:	e9c1 2300 	strd	r2, r3, [r1]
				for (k = 0; k < 6; k++) {
 80072d4:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80072d8:	3301      	adds	r3, #1
 80072da:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80072de:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80072e2:	2b05      	cmp	r3, #5
 80072e4:	ddba      	ble.n	800725c <QuinticTrajectory_cal_and_set_coeff+0x3e8>
				}
			}
			i = (b_tmp - j) + 6;
 80072e6:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80072ea:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	3306      	adds	r3, #6
 80072f2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
			for (b_a = jp1j; b_a <= i; b_a++) {
 80072f6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80072fa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80072fe:	e020      	b.n	8007342 <QuinticTrajectory_cal_and_set_coeff+0x4ce>
				M[b_a - 1] /= M[b_tmp];
 8007300:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007304:	3b01      	subs	r3, #1
 8007306:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800730a:	00db      	lsls	r3, r3, #3
 800730c:	4413      	add	r3, r2
 800730e:	ed93 5b00 	vldr	d5, [r3]
 8007312:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007316:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800731a:	00db      	lsls	r3, r3, #3
 800731c:	4413      	add	r3, r2
 800731e:	ed93 6b00 	vldr	d6, [r3]
 8007322:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007326:	3b01      	subs	r3, #1
 8007328:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800732c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007330:	00db      	lsls	r3, r3, #3
 8007332:	4413      	add	r3, r2
 8007334:	ed83 7b00 	vstr	d7, [r3]
			for (b_a = jp1j; b_a <= i; b_a++) {
 8007338:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800733c:	3301      	adds	r3, #1
 800733e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8007342:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8007346:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800734a:	429a      	cmp	r2, r3
 800734c:	ddd8      	ble.n	8007300 <QuinticTrajectory_cal_and_set_coeff+0x48c>
			}
		}
		jA = b_tmp;
 800734e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007352:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
		for (b_a = 0; b_a <= mmj_tmp; b_a++) {
 8007356:	2300      	movs	r3, #0
 8007358:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800735c:	e069      	b.n	8007432 <QuinticTrajectory_cal_and_set_coeff+0x5be>
			smax = M[(b_tmp + b_a * 6) + 6];
 800735e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8007362:	4613      	mov	r3, r2
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	4413      	add	r3, r2
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	461a      	mov	r2, r3
 800736c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007370:	4413      	add	r3, r2
 8007372:	3306      	adds	r3, #6
 8007374:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007378:	00db      	lsls	r3, r3, #3
 800737a:	4413      	add	r3, r2
 800737c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007380:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
			if (smax != 0.0) {
 8007384:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8007388:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800738c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007390:	d045      	beq.n	800741e <QuinticTrajectory_cal_and_set_coeff+0x5aa>
				i = jA + 8;
 8007392:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007396:	3308      	adds	r3, #8
 8007398:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
				b_M_tmp = (jA - j) + 12;
 800739c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80073a0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	330c      	adds	r3, #12
 80073a8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
				for (jp1j = i; jp1j <= b_M_tmp; jp1j++) {
 80073ac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80073b0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80073b4:	e02d      	b.n	8007412 <QuinticTrajectory_cal_and_set_coeff+0x59e>
					M[jp1j - 1] += M[((b_tmp + jp1j) - jA) - 7] * -smax;
 80073b6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80073ba:	3b01      	subs	r3, #1
 80073bc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80073c0:	00db      	lsls	r3, r3, #3
 80073c2:	4413      	add	r3, r2
 80073c4:	ed93 6b00 	vldr	d6, [r3]
 80073c8:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80073cc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80073d0:	441a      	add	r2, r3
 80073d2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	3b07      	subs	r3, #7
 80073da:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80073de:	00db      	lsls	r3, r3, #3
 80073e0:	4413      	add	r3, r2
 80073e2:	ed93 5b00 	vldr	d5, [r3]
 80073e6:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 80073ea:	eeb1 7b47 	vneg.f64	d7, d7
 80073ee:	ee25 7b07 	vmul.f64	d7, d5, d7
 80073f2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80073f6:	3b01      	subs	r3, #1
 80073f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80073fc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007400:	00db      	lsls	r3, r3, #3
 8007402:	4413      	add	r3, r2
 8007404:	ed83 7b00 	vstr	d7, [r3]
				for (jp1j = i; jp1j <= b_M_tmp; jp1j++) {
 8007408:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800740c:	3301      	adds	r3, #1
 800740e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007412:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8007416:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800741a:	429a      	cmp	r2, r3
 800741c:	ddcb      	ble.n	80073b6 <QuinticTrajectory_cal_and_set_coeff+0x542>
				}
			}
			jA += 6;
 800741e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007422:	3306      	adds	r3, #6
 8007424:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
		for (b_a = 0; b_a <= mmj_tmp; b_a++) {
 8007428:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800742c:	3301      	adds	r3, #1
 800742e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8007432:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8007436:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800743a:	429a      	cmp	r2, r3
 800743c:	dd8f      	ble.n	800735e <QuinticTrajectory_cal_and_set_coeff+0x4ea>
		}
		i1 = ipiv[j];
 800743e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007442:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007446:	4413      	add	r3, r2
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		if (i1 != j + 1) {
 800744e:	f997 219b 	ldrsb.w	r2, [r7, #411]	; 0x19b
 8007452:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007456:	3301      	adds	r3, #1
 8007458:	429a      	cmp	r2, r3
 800745a:	d025      	beq.n	80074a8 <QuinticTrajectory_cal_and_set_coeff+0x634>
			smax = a[j];
 800745c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007460:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007464:	00db      	lsls	r3, r3, #3
 8007466:	4413      	add	r3, r2
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
			a[j] = a[i1 - 1];
 8007470:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 8007474:	3b01      	subs	r3, #1
 8007476:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800747a:	00db      	lsls	r3, r3, #3
 800747c:	4413      	add	r3, r2
 800747e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007482:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8007486:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 800748a:	00c9      	lsls	r1, r1, #3
 800748c:	4401      	add	r1, r0
 800748e:	e9c1 2300 	strd	r2, r3, [r1]
			a[i1 - 1] = smax;
 8007492:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 8007496:	3b01      	subs	r3, #1
 8007498:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800749c:	00db      	lsls	r3, r3, #3
 800749e:	18d1      	adds	r1, r2, r3
 80074a0:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 80074a4:	e9c1 2300 	strd	r2, r3, [r1]
	for (j = 0; j < 5; j++) {
 80074a8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80074ac:	3301      	adds	r3, #1
 80074ae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80074b2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	f77f ae42 	ble.w	8007140 <QuinticTrajectory_cal_and_set_coeff+0x2cc>
		}
	}
	for (k = 0; k < 6; k++) {
 80074bc:	2300      	movs	r3, #0
 80074be:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80074c2:	e056      	b.n	8007572 <QuinticTrajectory_cal_and_set_coeff+0x6fe>
		jA = 6 * k;
 80074c4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80074c8:	4613      	mov	r3, r2
 80074ca:	005b      	lsls	r3, r3, #1
 80074cc:	4413      	add	r3, r2
 80074ce:	005b      	lsls	r3, r3, #1
 80074d0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
		if (a[k] != 0.0) {
 80074d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80074d8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80074dc:	00db      	lsls	r3, r3, #3
 80074de:	4413      	add	r3, r2
 80074e0:	ed93 7b00 	vldr	d7, [r3]
 80074e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80074e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ec:	d03c      	beq.n	8007568 <QuinticTrajectory_cal_and_set_coeff+0x6f4>
			i = k + 2;
 80074ee:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80074f2:	3302      	adds	r3, #2
 80074f4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
			for (b_a = i; b_a < 7; b_a++) {
 80074f8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80074fc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8007500:	e02e      	b.n	8007560 <QuinticTrajectory_cal_and_set_coeff+0x6ec>
				a[b_a - 1] -= a[k] * M[(b_a + jA) - 1];
 8007502:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007506:	3b01      	subs	r3, #1
 8007508:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800750c:	00db      	lsls	r3, r3, #3
 800750e:	4413      	add	r3, r2
 8007510:	ed93 6b00 	vldr	d6, [r3]
 8007514:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007518:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800751c:	00db      	lsls	r3, r3, #3
 800751e:	4413      	add	r3, r2
 8007520:	ed93 5b00 	vldr	d5, [r3]
 8007524:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8007528:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800752c:	4413      	add	r3, r2
 800752e:	3b01      	subs	r3, #1
 8007530:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007534:	00db      	lsls	r3, r3, #3
 8007536:	4413      	add	r3, r2
 8007538:	ed93 7b00 	vldr	d7, [r3]
 800753c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007540:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007544:	3b01      	subs	r3, #1
 8007546:	ee36 7b47 	vsub.f64	d7, d6, d7
 800754a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800754e:	00db      	lsls	r3, r3, #3
 8007550:	4413      	add	r3, r2
 8007552:	ed83 7b00 	vstr	d7, [r3]
			for (b_a = i; b_a < 7; b_a++) {
 8007556:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800755a:	3301      	adds	r3, #1
 800755c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8007560:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007564:	2b06      	cmp	r3, #6
 8007566:	ddcc      	ble.n	8007502 <QuinticTrajectory_cal_and_set_coeff+0x68e>
	for (k = 0; k < 6; k++) {
 8007568:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800756c:	3301      	adds	r3, #1
 800756e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8007572:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8007576:	2b05      	cmp	r3, #5
 8007578:	dda4      	ble.n	80074c4 <QuinticTrajectory_cal_and_set_coeff+0x650>
			}
		}
	}
	for (k = 5; k >= 0; k--) {
 800757a:	2305      	movs	r3, #5
 800757c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8007580:	e06e      	b.n	8007660 <QuinticTrajectory_cal_and_set_coeff+0x7ec>
		jA = 6 * k;
 8007582:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007586:	4613      	mov	r3, r2
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	4413      	add	r3, r2
 800758c:	005b      	lsls	r3, r3, #1
 800758e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
		smax = a[k];
 8007592:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007596:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	4413      	add	r3, r2
 800759e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a2:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
		if (smax != 0.0) {
 80075a6:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 80075aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80075ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b2:	d050      	beq.n	8007656 <QuinticTrajectory_cal_and_set_coeff+0x7e2>
			smax /= M[k + jA];
 80075b4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80075b8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80075bc:	4413      	add	r3, r2
 80075be:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80075c2:	00db      	lsls	r3, r3, #3
 80075c4:	4413      	add	r3, r2
 80075c6:	ed93 6b00 	vldr	d6, [r3]
 80075ca:	ed97 5b74 	vldr	d5, [r7, #464]	; 0x1d0
 80075ce:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80075d2:	ed87 7b74 	vstr	d7, [r7, #464]	; 0x1d0
			a[k] = smax;
 80075d6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80075da:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80075de:	00db      	lsls	r3, r3, #3
 80075e0:	18d1      	adds	r1, r2, r3
 80075e2:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 80075e6:	e9c1 2300 	strd	r2, r3, [r1]
			for (b_a = 0; b_a < k; b_a++) {
 80075ea:	2300      	movs	r3, #0
 80075ec:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80075f0:	e02b      	b.n	800764a <QuinticTrajectory_cal_and_set_coeff+0x7d6>
				a[b_a] -= a[k] * M[b_a + jA];
 80075f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80075f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80075fa:	00db      	lsls	r3, r3, #3
 80075fc:	4413      	add	r3, r2
 80075fe:	ed93 6b00 	vldr	d6, [r3]
 8007602:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007606:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	4413      	add	r3, r2
 800760e:	ed93 5b00 	vldr	d5, [r3]
 8007612:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8007616:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800761a:	4413      	add	r3, r2
 800761c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007620:	00db      	lsls	r3, r3, #3
 8007622:	4413      	add	r3, r2
 8007624:	ed93 7b00 	vldr	d7, [r3]
 8007628:	ee25 7b07 	vmul.f64	d7, d5, d7
 800762c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007630:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007634:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007638:	00db      	lsls	r3, r3, #3
 800763a:	4413      	add	r3, r2
 800763c:	ed83 7b00 	vstr	d7, [r3]
			for (b_a = 0; b_a < k; b_a++) {
 8007640:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007644:	3301      	adds	r3, #1
 8007646:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800764a:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800764e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8007652:	429a      	cmp	r2, r3
 8007654:	dbcd      	blt.n	80075f2 <QuinticTrajectory_cal_and_set_coeff+0x77e>
	for (k = 5; k >= 0; k--) {
 8007656:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800765a:	3b01      	subs	r3, #1
 800765c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8007660:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8007664:	2b00      	cmp	r3, #0
 8007666:	da8c      	bge.n	8007582 <QuinticTrajectory_cal_and_set_coeff+0x70e>
			}
		}
	}
	Traj->is_end = 0;
 8007668:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2200      	movs	r2, #0
 8007670:	701a      	strb	r2, [r3, #0]
	Traj->c0 = a[0];
 8007672:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800767e:	6809      	ldr	r1, [r1, #0]
 8007680:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Traj->c1 = a[1];
 8007684:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007688:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800768c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8007690:	6809      	ldr	r1, [r1, #0]
 8007692:	e9c1 2308 	strd	r2, r3, [r1, #32]
	Traj->c2 = a[2];
 8007696:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800769a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800769e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80076a2:	6809      	ldr	r1, [r1, #0]
 80076a4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Traj->c3 = a[3];
 80076a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80076ac:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80076b0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80076b4:	6809      	ldr	r1, [r1, #0]
 80076b6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Traj->c4 = a[4];
 80076ba:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80076be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076c2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80076c6:	6809      	ldr	r1, [r1, #0]
 80076c8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Traj->c5 = a[5];
 80076cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80076d0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80076d4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80076d8:	6809      	ldr	r1, [r1, #0]
 80076da:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	Traj->current_time = 0;
 80076de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80076e2:	6819      	ldr	r1, [r3, #0]
 80076e4:	f04f 0200 	mov.w	r2, #0
 80076e8:	f04f 0300 	mov.w	r3, #0
 80076ec:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	Traj->time_max = tf;
 80076f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80076f4:	6819      	ldr	r1, [r3, #0]
 80076f6:	463b      	mov	r3, r7
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8007700:	bf00      	nop
 8007702:	f507 77ec 	add.w	r7, r7, #472	; 0x1d8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop

0800770c <QuinticTrajectory_update>:
	Traj->c5 = c5;
	Traj->current_time = 0;
	Traj->time_max = time_max;
}

void QuinticTrajectory_update(QuinticTrajectory *Traj) {
 800770c:	b580      	push	{r7, lr}
 800770e:	ed2d 8b04 	vpush	{d8-d9}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
	if (!(Traj->is_end)) {
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	f040 80cb 	bne.w	80078b8 <QuinticTrajectory_update+0x1ac>
		if (Traj->current_time > Traj->time_max) {
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	ed93 7b04 	vldr	d7, [r3, #16]
 800772e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007736:	dd08      	ble.n	800774a <QuinticTrajectory_update+0x3e>
			Traj->current_time = Traj->time_max;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800773e:	6879      	ldr	r1, [r7, #4]
 8007740:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
			Traj->is_end = 1;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2201      	movs	r2, #1
 8007748:	701a      	strb	r2, [r3, #0]
		}
		Traj->pos_out = Traj->c0 + (Traj->c1 * Traj->current_time)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	ed93 6b06 	vldr	d6, [r3, #24]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	ed93 5b08 	vldr	d5, [r3, #32]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 800775c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007760:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ (Traj->c2 * pow(Traj->current_time, 2))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	ed93 9b0a 	vldr	d9, [r3, #40]	; 0x28
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8007770:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8007774:	eeb0 0b47 	vmov.f64	d0, d7
 8007778:	f00f fbf6 	bl	8016f68 <pow>
 800777c:	eeb0 7b40 	vmov.f64	d7, d0
 8007780:	ee29 7b07 	vmul.f64	d7, d9, d7
 8007784:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ (Traj->c3 * pow(Traj->current_time, 3))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	ed93 9b0c 	vldr	d9, [r3, #48]	; 0x30
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8007794:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8007798:	eeb0 0b47 	vmov.f64	d0, d7
 800779c:	f00f fbe4 	bl	8016f68 <pow>
 80077a0:	eeb0 7b40 	vmov.f64	d7, d0
 80077a4:	ee29 7b07 	vmul.f64	d7, d9, d7
 80077a8:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ (Traj->c4 * pow(Traj->current_time, 4))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	ed93 9b0e 	vldr	d9, [r3, #56]	; 0x38
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 80077b8:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 80077bc:	eeb0 0b47 	vmov.f64	d0, d7
 80077c0:	f00f fbd2 	bl	8016f68 <pow>
 80077c4:	eeb0 7b40 	vmov.f64	d7, d0
 80077c8:	ee29 7b07 	vmul.f64	d7, d9, d7
 80077cc:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ (Traj->c5 * pow(Traj->current_time, 5));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	ed93 9b10 	vldr	d9, [r3, #64]	; 0x40
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 80077dc:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 80077e0:	eeb0 0b47 	vmov.f64	d0, d7
 80077e4:	f00f fbc0 	bl	8016f68 <pow>
 80077e8:	eeb0 7b40 	vmov.f64	d7, d0
 80077ec:	ee29 7b07 	vmul.f64	d7, d9, d7
 80077f0:	ee38 7b07 	vadd.f64	d7, d8, d7
		Traj->pos_out = Traj->c0 + (Traj->c1 * Traj->current_time)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
		Traj->vel_out = Traj->c1 + (2 * Traj->c2 * Traj->current_time)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	ed93 6b08 	vldr	d6, [r3, #32]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8007806:	ee37 5b07 	vadd.f64	d5, d7, d7
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8007810:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007814:	ee36 8b07 	vadd.f64	d8, d6, d7
				+ (3 * Traj->c3 * pow(Traj->current_time, 2))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800781e:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8007822:	ee27 9b06 	vmul.f64	d9, d7, d6
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 800782c:	eeb0 1b00 	vmov.f64	d1, #0	; 0x40000000  2.0
 8007830:	eeb0 0b47 	vmov.f64	d0, d7
 8007834:	f00f fb98 	bl	8016f68 <pow>
 8007838:	eeb0 7b40 	vmov.f64	d7, d0
 800783c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8007840:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ (4 * Traj->c4 * pow(Traj->current_time, 3))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800784a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800784e:	ee27 9b06 	vmul.f64	d9, d7, d6
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8007858:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 800785c:	eeb0 0b47 	vmov.f64	d0, d7
 8007860:	f00f fb82 	bl	8016f68 <pow>
 8007864:	eeb0 7b40 	vmov.f64	d7, d0
 8007868:	ee29 7b07 	vmul.f64	d7, d9, d7
 800786c:	ee38 8b07 	vadd.f64	d8, d8, d7
				+ (5 * Traj->c5 * pow(Traj->current_time, 4));
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8007876:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 800787a:	ee27 9b06 	vmul.f64	d9, d7, d6
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8007884:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8007888:	eeb0 0b47 	vmov.f64	d0, d7
 800788c:	f00f fb6c 	bl	8016f68 <pow>
 8007890:	eeb0 7b40 	vmov.f64	d7, d0
 8007894:	ee29 7b07 	vmul.f64	d7, d9, d7
 8007898:	ee38 7b07 	vadd.f64	d7, d8, d7
		Traj->vel_out = Traj->c1 + (2 * Traj->c2 * Traj->current_time)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
		Traj->current_time += Traj->time_step;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	ed93 7b02 	vldr	d7, [r3, #8]
 80078ae:	ee36 7b07 	vadd.f64	d7, d6, d7
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	}
}
 80078b8:	bf00      	nop
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	ecbd 8b04 	vpop	{d8-d9}
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b08c      	sub	sp, #48	; 0x30
 80078c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80078ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078ce:	2200      	movs	r2, #0
 80078d0:	601a      	str	r2, [r3, #0]
 80078d2:	605a      	str	r2, [r3, #4]
 80078d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80078d6:	463b      	mov	r3, r7
 80078d8:	2224      	movs	r2, #36	; 0x24
 80078da:	2100      	movs	r1, #0
 80078dc:	4618      	mov	r0, r3
 80078de:	f00c fed3 	bl	8014688 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80078e2:	4b31      	ldr	r3, [pc, #196]	; (80079a8 <MX_ADC1_Init+0xe4>)
 80078e4:	4a31      	ldr	r2, [pc, #196]	; (80079ac <MX_ADC1_Init+0xe8>)
 80078e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80078e8:	4b2f      	ldr	r3, [pc, #188]	; (80079a8 <MX_ADC1_Init+0xe4>)
 80078ea:	2200      	movs	r2, #0
 80078ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80078ee:	4b2e      	ldr	r3, [pc, #184]	; (80079a8 <MX_ADC1_Init+0xe4>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80078f4:	4b2c      	ldr	r3, [pc, #176]	; (80079a8 <MX_ADC1_Init+0xe4>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80078fa:	4b2b      	ldr	r3, [pc, #172]	; (80079a8 <MX_ADC1_Init+0xe4>)
 80078fc:	2204      	movs	r2, #4
 80078fe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007900:	4b29      	ldr	r3, [pc, #164]	; (80079a8 <MX_ADC1_Init+0xe4>)
 8007902:	2200      	movs	r2, #0
 8007904:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007906:	4b28      	ldr	r3, [pc, #160]	; (80079a8 <MX_ADC1_Init+0xe4>)
 8007908:	2200      	movs	r2, #0
 800790a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800790c:	4b26      	ldr	r3, [pc, #152]	; (80079a8 <MX_ADC1_Init+0xe4>)
 800790e:	2201      	movs	r2, #1
 8007910:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007912:	4b25      	ldr	r3, [pc, #148]	; (80079a8 <MX_ADC1_Init+0xe4>)
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800791a:	4b23      	ldr	r3, [pc, #140]	; (80079a8 <MX_ADC1_Init+0xe4>)
 800791c:	2200      	movs	r2, #0
 800791e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007920:	4b21      	ldr	r3, [pc, #132]	; (80079a8 <MX_ADC1_Init+0xe4>)
 8007922:	2200      	movs	r2, #0
 8007924:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8007926:	4b20      	ldr	r3, [pc, #128]	; (80079a8 <MX_ADC1_Init+0xe4>)
 8007928:	2200      	movs	r2, #0
 800792a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800792c:	4b1e      	ldr	r3, [pc, #120]	; (80079a8 <MX_ADC1_Init+0xe4>)
 800792e:	2200      	movs	r2, #0
 8007930:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8007932:	4b1d      	ldr	r3, [pc, #116]	; (80079a8 <MX_ADC1_Init+0xe4>)
 8007934:	2200      	movs	r2, #0
 8007936:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8007938:	4b1b      	ldr	r3, [pc, #108]	; (80079a8 <MX_ADC1_Init+0xe4>)
 800793a:	2200      	movs	r2, #0
 800793c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007940:	4819      	ldr	r0, [pc, #100]	; (80079a8 <MX_ADC1_Init+0xe4>)
 8007942:	f003 f8ef 	bl	800ab24 <HAL_ADC_Init>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800794c:	f001 f905 	bl	8008b5a <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007950:	2300      	movs	r3, #0
 8007952:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007958:	4619      	mov	r1, r3
 800795a:	4813      	ldr	r0, [pc, #76]	; (80079a8 <MX_ADC1_Init+0xe4>)
 800795c:	f004 f928 	bl	800bbb0 <HAL_ADCEx_MultiModeConfigChannel>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	d001      	beq.n	800796a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8007966:	f001 f8f8 	bl	8008b5a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800796a:	4b11      	ldr	r3, [pc, #68]	; (80079b0 <MX_ADC1_Init+0xec>)
 800796c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800796e:	2306      	movs	r3, #6
 8007970:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007972:	2300      	movs	r3, #0
 8007974:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007976:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800797a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800797c:	2304      	movs	r3, #4
 800797e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8007980:	2300      	movs	r3, #0
 8007982:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8007984:	2300      	movs	r3, #0
 8007986:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800798a:	463b      	mov	r3, r7
 800798c:	4619      	mov	r1, r3
 800798e:	4806      	ldr	r0, [pc, #24]	; (80079a8 <MX_ADC1_Init+0xe4>)
 8007990:	f003 fad0 	bl	800af34 <HAL_ADC_ConfigChannel>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d001      	beq.n	800799e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800799a:	f001 f8de 	bl	8008b5a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800799e:	bf00      	nop
 80079a0:	3730      	adds	r7, #48	; 0x30
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	24000450 	.word	0x24000450
 80079ac:	40022000 	.word	0x40022000
 80079b0:	2a000400 	.word	0x2a000400

080079b4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b08a      	sub	sp, #40	; 0x28
 80079b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80079ba:	1d3b      	adds	r3, r7, #4
 80079bc:	2224      	movs	r2, #36	; 0x24
 80079be:	2100      	movs	r1, #0
 80079c0:	4618      	mov	r0, r3
 80079c2:	f00c fe61 	bl	8014688 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80079c6:	4b30      	ldr	r3, [pc, #192]	; (8007a88 <MX_ADC3_Init+0xd4>)
 80079c8:	4a30      	ldr	r2, [pc, #192]	; (8007a8c <MX_ADC3_Init+0xd8>)
 80079ca:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80079cc:	4b2e      	ldr	r3, [pc, #184]	; (8007a88 <MX_ADC3_Init+0xd4>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80079d2:	4b2d      	ldr	r3, [pc, #180]	; (8007a88 <MX_ADC3_Init+0xd4>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80079d8:	4b2b      	ldr	r3, [pc, #172]	; (8007a88 <MX_ADC3_Init+0xd4>)
 80079da:	2200      	movs	r2, #0
 80079dc:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80079de:	4b2a      	ldr	r3, [pc, #168]	; (8007a88 <MX_ADC3_Init+0xd4>)
 80079e0:	2204      	movs	r2, #4
 80079e2:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80079e4:	4b28      	ldr	r3, [pc, #160]	; (8007a88 <MX_ADC3_Init+0xd4>)
 80079e6:	2200      	movs	r2, #0
 80079e8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80079ea:	4b27      	ldr	r3, [pc, #156]	; (8007a88 <MX_ADC3_Init+0xd4>)
 80079ec:	2201      	movs	r2, #1
 80079ee:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80079f0:	4b25      	ldr	r3, [pc, #148]	; (8007a88 <MX_ADC3_Init+0xd4>)
 80079f2:	2201      	movs	r2, #1
 80079f4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80079f6:	4b24      	ldr	r3, [pc, #144]	; (8007a88 <MX_ADC3_Init+0xd4>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80079fe:	4b22      	ldr	r3, [pc, #136]	; (8007a88 <MX_ADC3_Init+0xd4>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007a04:	4b20      	ldr	r3, [pc, #128]	; (8007a88 <MX_ADC3_Init+0xd4>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8007a0a:	4b1f      	ldr	r3, [pc, #124]	; (8007a88 <MX_ADC3_Init+0xd4>)
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8007a12:	4b1d      	ldr	r3, [pc, #116]	; (8007a88 <MX_ADC3_Init+0xd4>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8007a18:	4b1b      	ldr	r3, [pc, #108]	; (8007a88 <MX_ADC3_Init+0xd4>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007a1e:	4b1a      	ldr	r3, [pc, #104]	; (8007a88 <MX_ADC3_Init+0xd4>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8007a24:	4b18      	ldr	r3, [pc, #96]	; (8007a88 <MX_ADC3_Init+0xd4>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8007a2a:	4b17      	ldr	r3, [pc, #92]	; (8007a88 <MX_ADC3_Init+0xd4>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8007a32:	4815      	ldr	r0, [pc, #84]	; (8007a88 <MX_ADC3_Init+0xd4>)
 8007a34:	f003 f876 	bl	800ab24 <HAL_ADC_Init>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d001      	beq.n	8007a42 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8007a3e:	f001 f88c 	bl	8008b5a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8007a42:	4b13      	ldr	r3, [pc, #76]	; (8007a90 <MX_ADC3_Init+0xdc>)
 8007a44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007a46:	2306      	movs	r3, #6
 8007a48:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_12CYCLES_5;
 8007a4a:	2302      	movs	r3, #2
 8007a4c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007a4e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007a52:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007a54:	2304      	movs	r3, #4
 8007a56:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8007a62:	2300      	movs	r3, #0
 8007a64:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8007a66:	2300      	movs	r3, #0
 8007a68:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8007a6c:	1d3b      	adds	r3, r7, #4
 8007a6e:	4619      	mov	r1, r3
 8007a70:	4805      	ldr	r0, [pc, #20]	; (8007a88 <MX_ADC3_Init+0xd4>)
 8007a72:	f003 fa5f 	bl	800af34 <HAL_ADC_ConfigChannel>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d001      	beq.n	8007a80 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8007a7c:	f001 f86d 	bl	8008b5a <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8007a80:	bf00      	nop
 8007a82:	3728      	adds	r7, #40	; 0x28
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	240004c0 	.word	0x240004c0
 8007a8c:	58026000 	.word	0x58026000
 8007a90:	c7520000 	.word	0xc7520000

08007a94 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b08a      	sub	sp, #40	; 0x28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a9c:	f107 0314 	add.w	r3, r7, #20
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	601a      	str	r2, [r3, #0]
 8007aa4:	605a      	str	r2, [r3, #4]
 8007aa6:	609a      	str	r2, [r3, #8]
 8007aa8:	60da      	str	r2, [r3, #12]
 8007aaa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a22      	ldr	r2, [pc, #136]	; (8007b3c <HAL_ADC_MspInit+0xa8>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d12a      	bne.n	8007b0c <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8007ab6:	4b22      	ldr	r3, [pc, #136]	; (8007b40 <HAL_ADC_MspInit+0xac>)
 8007ab8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007abc:	4a20      	ldr	r2, [pc, #128]	; (8007b40 <HAL_ADC_MspInit+0xac>)
 8007abe:	f043 0320 	orr.w	r3, r3, #32
 8007ac2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007ac6:	4b1e      	ldr	r3, [pc, #120]	; (8007b40 <HAL_ADC_MspInit+0xac>)
 8007ac8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007acc:	f003 0320 	and.w	r3, r3, #32
 8007ad0:	613b      	str	r3, [r7, #16]
 8007ad2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ad4:	4b1a      	ldr	r3, [pc, #104]	; (8007b40 <HAL_ADC_MspInit+0xac>)
 8007ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ada:	4a19      	ldr	r2, [pc, #100]	; (8007b40 <HAL_ADC_MspInit+0xac>)
 8007adc:	f043 0304 	orr.w	r3, r3, #4
 8007ae0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007ae4:	4b16      	ldr	r3, [pc, #88]	; (8007b40 <HAL_ADC_MspInit+0xac>)
 8007ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007aea:	f003 0304 	and.w	r3, r3, #4
 8007aee:	60fb      	str	r3, [r7, #12]
 8007af0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007af2:	2301      	movs	r3, #1
 8007af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007af6:	2303      	movs	r3, #3
 8007af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007afa:	2300      	movs	r3, #0
 8007afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007afe:	f107 0314 	add.w	r3, r7, #20
 8007b02:	4619      	mov	r1, r3
 8007b04:	480f      	ldr	r0, [pc, #60]	; (8007b44 <HAL_ADC_MspInit+0xb0>)
 8007b06:	f005 f9a5 	bl	800ce54 <HAL_GPIO_Init>
    __HAL_RCC_ADC3_CLK_ENABLE();
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8007b0a:	e013      	b.n	8007b34 <HAL_ADC_MspInit+0xa0>
  else if(adcHandle->Instance==ADC3)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a0d      	ldr	r2, [pc, #52]	; (8007b48 <HAL_ADC_MspInit+0xb4>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d10e      	bne.n	8007b34 <HAL_ADC_MspInit+0xa0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8007b16:	4b0a      	ldr	r3, [pc, #40]	; (8007b40 <HAL_ADC_MspInit+0xac>)
 8007b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b1c:	4a08      	ldr	r2, [pc, #32]	; (8007b40 <HAL_ADC_MspInit+0xac>)
 8007b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007b26:	4b06      	ldr	r3, [pc, #24]	; (8007b40 <HAL_ADC_MspInit+0xac>)
 8007b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b30:	60bb      	str	r3, [r7, #8]
 8007b32:	68bb      	ldr	r3, [r7, #8]
}
 8007b34:	bf00      	nop
 8007b36:	3728      	adds	r7, #40	; 0x28
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	40022000 	.word	0x40022000
 8007b40:	58024400 	.word	0x58024400
 8007b44:	58020800 	.word	0x58020800
 8007b48:	58026000 	.word	0x58026000

08007b4c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8007b50:	4b12      	ldr	r3, [pc, #72]	; (8007b9c <MX_CRC_Init+0x50>)
 8007b52:	4a13      	ldr	r2, [pc, #76]	; (8007ba0 <MX_CRC_Init+0x54>)
 8007b54:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8007b56:	4b11      	ldr	r3, [pc, #68]	; (8007b9c <MX_CRC_Init+0x50>)
 8007b58:	2201      	movs	r2, #1
 8007b5a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8007b5c:	4b0f      	ldr	r3, [pc, #60]	; (8007b9c <MX_CRC_Init+0x50>)
 8007b5e:	2201      	movs	r2, #1
 8007b60:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 8007b62:	4b0e      	ldr	r3, [pc, #56]	; (8007b9c <MX_CRC_Init+0x50>)
 8007b64:	221d      	movs	r2, #29
 8007b66:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8007b68:	4b0c      	ldr	r3, [pc, #48]	; (8007b9c <MX_CRC_Init+0x50>)
 8007b6a:	2210      	movs	r2, #16
 8007b6c:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 8007b6e:	4b0b      	ldr	r3, [pc, #44]	; (8007b9c <MX_CRC_Init+0x50>)
 8007b70:	22c4      	movs	r2, #196	; 0xc4
 8007b72:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8007b74:	4b09      	ldr	r3, [pc, #36]	; (8007b9c <MX_CRC_Init+0x50>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8007b7a:	4b08      	ldr	r3, [pc, #32]	; (8007b9c <MX_CRC_Init+0x50>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8007b80:	4b06      	ldr	r3, [pc, #24]	; (8007b9c <MX_CRC_Init+0x50>)
 8007b82:	2201      	movs	r2, #1
 8007b84:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8007b86:	4805      	ldr	r0, [pc, #20]	; (8007b9c <MX_CRC_Init+0x50>)
 8007b88:	f004 fa04 	bl	800bf94 <HAL_CRC_Init>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d001      	beq.n	8007b96 <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8007b92:	f000 ffe2 	bl	8008b5a <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8007b96:	bf00      	nop
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	bf00      	nop
 8007b9c:	24000530 	.word	0x24000530
 8007ba0:	58024c00 	.word	0x58024c00

08007ba4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a0b      	ldr	r2, [pc, #44]	; (8007be0 <HAL_CRC_MspInit+0x3c>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d10e      	bne.n	8007bd4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007bb6:	4b0b      	ldr	r3, [pc, #44]	; (8007be4 <HAL_CRC_MspInit+0x40>)
 8007bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bbc:	4a09      	ldr	r2, [pc, #36]	; (8007be4 <HAL_CRC_MspInit+0x40>)
 8007bbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007bc6:	4b07      	ldr	r3, [pc, #28]	; (8007be4 <HAL_CRC_MspInit+0x40>)
 8007bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bd0:	60fb      	str	r3, [r7, #12]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8007bd4:	bf00      	nop
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr
 8007be0:	58024c00 	.word	0x58024c00
 8007be4:	58024400 	.word	0x58024400

08007be8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b08c      	sub	sp, #48	; 0x30
 8007bec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bee:	f107 031c 	add.w	r3, r7, #28
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	601a      	str	r2, [r3, #0]
 8007bf6:	605a      	str	r2, [r3, #4]
 8007bf8:	609a      	str	r2, [r3, #8]
 8007bfa:	60da      	str	r2, [r3, #12]
 8007bfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007bfe:	4b65      	ldr	r3, [pc, #404]	; (8007d94 <MX_GPIO_Init+0x1ac>)
 8007c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c04:	4a63      	ldr	r2, [pc, #396]	; (8007d94 <MX_GPIO_Init+0x1ac>)
 8007c06:	f043 0310 	orr.w	r3, r3, #16
 8007c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007c0e:	4b61      	ldr	r3, [pc, #388]	; (8007d94 <MX_GPIO_Init+0x1ac>)
 8007c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c14:	f003 0310 	and.w	r3, r3, #16
 8007c18:	61bb      	str	r3, [r7, #24]
 8007c1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c1c:	4b5d      	ldr	r3, [pc, #372]	; (8007d94 <MX_GPIO_Init+0x1ac>)
 8007c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c22:	4a5c      	ldr	r2, [pc, #368]	; (8007d94 <MX_GPIO_Init+0x1ac>)
 8007c24:	f043 0304 	orr.w	r3, r3, #4
 8007c28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007c2c:	4b59      	ldr	r3, [pc, #356]	; (8007d94 <MX_GPIO_Init+0x1ac>)
 8007c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c32:	f003 0304 	and.w	r3, r3, #4
 8007c36:	617b      	str	r3, [r7, #20]
 8007c38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007c3a:	4b56      	ldr	r3, [pc, #344]	; (8007d94 <MX_GPIO_Init+0x1ac>)
 8007c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c40:	4a54      	ldr	r2, [pc, #336]	; (8007d94 <MX_GPIO_Init+0x1ac>)
 8007c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007c4a:	4b52      	ldr	r3, [pc, #328]	; (8007d94 <MX_GPIO_Init+0x1ac>)
 8007c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c54:	613b      	str	r3, [r7, #16]
 8007c56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c58:	4b4e      	ldr	r3, [pc, #312]	; (8007d94 <MX_GPIO_Init+0x1ac>)
 8007c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c5e:	4a4d      	ldr	r2, [pc, #308]	; (8007d94 <MX_GPIO_Init+0x1ac>)
 8007c60:	f043 0301 	orr.w	r3, r3, #1
 8007c64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007c68:	4b4a      	ldr	r3, [pc, #296]	; (8007d94 <MX_GPIO_Init+0x1ac>)
 8007c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	60fb      	str	r3, [r7, #12]
 8007c74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c76:	4b47      	ldr	r3, [pc, #284]	; (8007d94 <MX_GPIO_Init+0x1ac>)
 8007c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c7c:	4a45      	ldr	r2, [pc, #276]	; (8007d94 <MX_GPIO_Init+0x1ac>)
 8007c7e:	f043 0302 	orr.w	r3, r3, #2
 8007c82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007c86:	4b43      	ldr	r3, [pc, #268]	; (8007d94 <MX_GPIO_Init+0x1ac>)
 8007c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c8c:	f003 0302 	and.w	r3, r3, #2
 8007c90:	60bb      	str	r3, [r7, #8]
 8007c92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007c94:	4b3f      	ldr	r3, [pc, #252]	; (8007d94 <MX_GPIO_Init+0x1ac>)
 8007c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c9a:	4a3e      	ldr	r2, [pc, #248]	; (8007d94 <MX_GPIO_Init+0x1ac>)
 8007c9c:	f043 0308 	orr.w	r3, r3, #8
 8007ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007ca4:	4b3b      	ldr	r3, [pc, #236]	; (8007d94 <MX_GPIO_Init+0x1ac>)
 8007ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007caa:	f003 0308 	and.w	r3, r3, #8
 8007cae:	607b      	str	r3, [r7, #4]
 8007cb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	2118      	movs	r1, #24
 8007cb6:	4838      	ldr	r0, [pc, #224]	; (8007d98 <MX_GPIO_Init+0x1b0>)
 8007cb8:	f005 fa74 	bl	800d1a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR3_Pin|DIR4_Pin|DIR5_Pin|GPIO_PIN_8
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f44f 4163 	mov.w	r1, #58112	; 0xe300
 8007cc2:	4836      	ldr	r0, [pc, #216]	; (8007d9c <MX_GPIO_Init+0x1b4>)
 8007cc4:	f005 fa6e 	bl	800d1a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007cce:	4832      	ldr	r0, [pc, #200]	; (8007d98 <MX_GPIO_Init+0x1b0>)
 8007cd0:	f005 fa68 	bl	800d1a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f644 7111 	movw	r1, #20241	; 0x4f11
 8007cda:	4831      	ldr	r0, [pc, #196]	; (8007da0 <MX_GPIO_Init+0x1b8>)
 8007cdc:	f005 fa62 	bl	800d1a4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|SPI3_SS1_Pin|USART2_DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin, GPIO_PIN_RESET);
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8007ce6:	482f      	ldr	r0, [pc, #188]	; (8007da4 <MX_GPIO_Init+0x1bc>)
 8007ce8:	f005 fa5c 	bl	800d1a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8007cec:	2200      	movs	r2, #0
 8007cee:	21f0      	movs	r1, #240	; 0xf0
 8007cf0:	482d      	ldr	r0, [pc, #180]	; (8007da8 <MX_GPIO_Init+0x1c0>)
 8007cf2:	f005 fa57 	bl	800d1a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin|OE_Pin;
 8007cf6:	f44f 738c 	mov.w	r3, #280	; 0x118
 8007cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d00:	2300      	movs	r3, #0
 8007d02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d04:	2300      	movs	r3, #0
 8007d06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007d08:	f107 031c 	add.w	r3, r7, #28
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	4822      	ldr	r0, [pc, #136]	; (8007d98 <MX_GPIO_Init+0x1b0>)
 8007d10:	f005 f8a0 	bl	800ce54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC8
                           PC9 */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|GPIO_PIN_8
 8007d14:	f44f 4363 	mov.w	r3, #58112	; 0xe300
 8007d18:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d22:	2300      	movs	r3, #0
 8007d24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d26:	f107 031c 	add.w	r3, r7, #28
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	481b      	ldr	r0, [pc, #108]	; (8007d9c <MX_GPIO_Init+0x1b4>)
 8007d2e:	f005 f891 	bl	800ce54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD14 PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8007d32:	f644 7311 	movw	r3, #20241	; 0x4f11
 8007d36:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|SPI3_SS1_Pin|USART2_DE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d40:	2300      	movs	r3, #0
 8007d42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007d44:	f107 031c 	add.w	r3, r7, #28
 8007d48:	4619      	mov	r1, r3
 8007d4a:	4815      	ldr	r0, [pc, #84]	; (8007da0 <MX_GPIO_Init+0x1b8>)
 8007d4c:	f005 f882 	bl	800ce54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin;
 8007d50:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 8007d54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d56:	2301      	movs	r3, #1
 8007d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d62:	f107 031c 	add.w	r3, r7, #28
 8007d66:	4619      	mov	r1, r3
 8007d68:	480e      	ldr	r0, [pc, #56]	; (8007da4 <MX_GPIO_Init+0x1bc>)
 8007d6a:	f005 f873 	bl	800ce54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 8007d6e:	23f0      	movs	r3, #240	; 0xf0
 8007d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d72:	2301      	movs	r3, #1
 8007d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d76:	2300      	movs	r3, #0
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d7e:	f107 031c 	add.w	r3, r7, #28
 8007d82:	4619      	mov	r1, r3
 8007d84:	4808      	ldr	r0, [pc, #32]	; (8007da8 <MX_GPIO_Init+0x1c0>)
 8007d86:	f005 f865 	bl	800ce54 <HAL_GPIO_Init>

}
 8007d8a:	bf00      	nop
 8007d8c:	3730      	adds	r7, #48	; 0x30
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	58024400 	.word	0x58024400
 8007d98:	58021000 	.word	0x58021000
 8007d9c:	58020800 	.word	0x58020800
 8007da0:	58020c00 	.word	0x58020c00
 8007da4:	58020000 	.word	0x58020000
 8007da8:	58020400 	.word	0x58020400
 8007dac:	00000000 	.word	0x00000000

08007db0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007db0:	b5b0      	push	{r4, r5, r7, lr}
 8007db2:	b0ea      	sub	sp, #424	; 0x1a8
 8007db4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007db6:	f002 fbdd 	bl	800a574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007dba:	f000 fe27 	bl	8008a0c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8007dbe:	f000 fe9f 	bl	8008b00 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007dc2:	f7ff ff11 	bl	8007be8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8007dc6:	f7ff fd7d 	bl	80078c4 <MX_ADC1_Init>
  MX_ADC3_Init();
 8007dca:	f7ff fdf3 	bl	80079b4 <MX_ADC3_Init>
  MX_SPI3_Init();
 8007dce:	f000 fec9 	bl	8008b64 <MX_SPI3_Init>
  MX_TIM1_Init();
 8007dd2:	f001 f93d 	bl	8009050 <MX_TIM1_Init>
  MX_TIM2_Init();
 8007dd6:	f001 f9e9 	bl	80091ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8007dda:	f001 fa5f 	bl	800929c <MX_TIM3_Init>
  MX_TIM4_Init();
 8007dde:	f001 fad5 	bl	800938c <MX_TIM4_Init>
  MX_TIM12_Init();
 8007de2:	f001 fb4b 	bl	800947c <MX_TIM12_Init>
  MX_TIM13_Init();
 8007de6:	f001 fbad 	bl	8009544 <MX_TIM13_Init>
  MX_TIM14_Init();
 8007dea:	f001 fbcf 	bl	800958c <MX_TIM14_Init>
  MX_TIM15_Init();
 8007dee:	f001 fc1b 	bl	8009628 <MX_TIM15_Init>
  MX_TIM16_Init();
 8007df2:	f001 fcbd 	bl	8009770 <MX_TIM16_Init>
  MX_TIM17_Init();
 8007df6:	f001 fd35 	bl	8009864 <MX_TIM17_Init>
  MX_UART4_Init();
 8007dfa:	f002 f90f 	bl	800a01c <MX_UART4_Init>
  MX_UART5_Init();
 8007dfe:	f002 f959 	bl	800a0b4 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8007e02:	f002 f9a3 	bl	800a14c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8007e06:	f002 f9ed 	bl	800a1e4 <MX_USART3_UART_Init>
  MX_TIM23_Init();
 8007e0a:	f001 fda7 	bl	800995c <MX_TIM23_Init>
  MX_CRC_Init();
 8007e0e:	f7ff fe9d 	bl	8007b4c <MX_CRC_Init>
  MX_TIM24_Init();
 8007e12:	f001 fdf3 	bl	80099fc <MX_TIM24_Init>
  /* USER CODE BEGIN 2 */
	ARMsProtocol_FUNC_Init();
 8007e16:	f7f8 fd49 	bl	80008ac <ARMsProtocol_FUNC_Init>

	/*
	 * Servo Initialise
	 */
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, 1);
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007e20:	4899      	ldr	r0, [pc, #612]	; (8008088 <main+0x2d8>)
 8007e22:	f005 f9bf 	bl	800d1a4 <HAL_GPIO_WritePin>
	servo_initialise(&servo_motor, &htim17, TIM_CHANNEL_1);
 8007e26:	2200      	movs	r2, #0
 8007e28:	4998      	ldr	r1, [pc, #608]	; (800808c <main+0x2dc>)
 8007e2a:	4899      	ldr	r0, [pc, #612]	; (8008090 <main+0x2e0>)
 8007e2c:	f7fe fd2a 	bl	8006884 <servo_initialise>
	/*
	 * Encoder Initialise
	 */
	AMT21_initialise(&encoders[0], &huart2, 0x2C, USART2_DE_GPIO_Port,
 8007e30:	2310      	movs	r3, #16
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	4b97      	ldr	r3, [pc, #604]	; (8008094 <main+0x2e4>)
 8007e36:	222c      	movs	r2, #44	; 0x2c
 8007e38:	4997      	ldr	r1, [pc, #604]	; (8008098 <main+0x2e8>)
 8007e3a:	4898      	ldr	r0, [pc, #608]	; (800809c <main+0x2ec>)
 8007e3c:	f7f8 fc3c 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[1], &huart2, 0x70, USART2_DE_GPIO_Port,
 8007e40:	2310      	movs	r3, #16
 8007e42:	9300      	str	r3, [sp, #0]
 8007e44:	4b93      	ldr	r3, [pc, #588]	; (8008094 <main+0x2e4>)
 8007e46:	2270      	movs	r2, #112	; 0x70
 8007e48:	4993      	ldr	r1, [pc, #588]	; (8008098 <main+0x2e8>)
 8007e4a:	4895      	ldr	r0, [pc, #596]	; (80080a0 <main+0x2f0>)
 8007e4c:	f7f8 fc34 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[2], &huart2, 0x54, USART2_DE_GPIO_Port,
 8007e50:	2310      	movs	r3, #16
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	4b8f      	ldr	r3, [pc, #572]	; (8008094 <main+0x2e4>)
 8007e56:	2254      	movs	r2, #84	; 0x54
 8007e58:	498f      	ldr	r1, [pc, #572]	; (8008098 <main+0x2e8>)
 8007e5a:	4892      	ldr	r0, [pc, #584]	; (80080a4 <main+0x2f4>)
 8007e5c:	f7f8 fc2c 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[4], &huart2, 0xE8, USART2_DE_GPIO_Port,
 8007e60:	2310      	movs	r3, #16
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	4b8b      	ldr	r3, [pc, #556]	; (8008094 <main+0x2e4>)
 8007e66:	22e8      	movs	r2, #232	; 0xe8
 8007e68:	498b      	ldr	r1, [pc, #556]	; (8008098 <main+0x2e8>)
 8007e6a:	488f      	ldr	r0, [pc, #572]	; (80080a8 <main+0x2f8>)
 8007e6c:	f7f8 fc24 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[3], &huart2, 0xB4, USART2_DE_GPIO_Port,
 8007e70:	2310      	movs	r3, #16
 8007e72:	9300      	str	r3, [sp, #0]
 8007e74:	4b87      	ldr	r3, [pc, #540]	; (8008094 <main+0x2e4>)
 8007e76:	22b4      	movs	r2, #180	; 0xb4
 8007e78:	4987      	ldr	r1, [pc, #540]	; (8008098 <main+0x2e8>)
 8007e7a:	488c      	ldr	r0, [pc, #560]	; (80080ac <main+0x2fc>)
 8007e7c:	f7f8 fc1c 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	/*
	 * Stepper Initialise
	 */
	stepper_initialise(&steppers[0], &htim1, TIM_CHANNEL_1, DIR1_GPIO_Port,
 8007e80:	2301      	movs	r3, #1
 8007e82:	9301      	str	r3, [sp, #4]
 8007e84:	2308      	movs	r3, #8
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	4b7f      	ldr	r3, [pc, #508]	; (8008088 <main+0x2d8>)
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	4988      	ldr	r1, [pc, #544]	; (80080b0 <main+0x300>)
 8007e8e:	4889      	ldr	r0, [pc, #548]	; (80080b4 <main+0x304>)
 8007e90:	f7fe fcba 	bl	8006808 <stepper_initialise>
	DIR1_Pin, 1); //swap 0 -> 1
	stepper_initialise(&steppers[1], &htim2, TIM_CHANNEL_1, DIR2_GPIO_Port,
 8007e94:	2301      	movs	r3, #1
 8007e96:	9301      	str	r3, [sp, #4]
 8007e98:	2310      	movs	r3, #16
 8007e9a:	9300      	str	r3, [sp, #0]
 8007e9c:	4b7a      	ldr	r3, [pc, #488]	; (8008088 <main+0x2d8>)
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	4985      	ldr	r1, [pc, #532]	; (80080b8 <main+0x308>)
 8007ea2:	4886      	ldr	r0, [pc, #536]	; (80080bc <main+0x30c>)
 8007ea4:	f7fe fcb0 	bl	8006808 <stepper_initialise>
	DIR2_Pin, 1);
	stepper_initialise(&steppers[2], &htim3, TIM_CHANNEL_1, DIR3_GPIO_Port,
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	9301      	str	r3, [sp, #4]
 8007eac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	4b83      	ldr	r3, [pc, #524]	; (80080c0 <main+0x310>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	4983      	ldr	r1, [pc, #524]	; (80080c4 <main+0x314>)
 8007eb8:	4883      	ldr	r0, [pc, #524]	; (80080c8 <main+0x318>)
 8007eba:	f7fe fca5 	bl	8006808 <stepper_initialise>
	DIR3_Pin, 0); //swap 1 -> 0
	stepper_initialise(&steppers[4], &htim4, TIM_CHANNEL_1, DIR4_GPIO_Port,
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	9301      	str	r3, [sp, #4]
 8007ec2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	4b7d      	ldr	r3, [pc, #500]	; (80080c0 <main+0x310>)
 8007eca:	2200      	movs	r2, #0
 8007ecc:	497f      	ldr	r1, [pc, #508]	; (80080cc <main+0x31c>)
 8007ece:	4880      	ldr	r0, [pc, #512]	; (80080d0 <main+0x320>)
 8007ed0:	f7fe fc9a 	bl	8006808 <stepper_initialise>
	DIR4_Pin, 0);
	stepper_initialise(&steppers[3], &htim15, TIM_CHANNEL_1, DIR5_GPIO_Port,
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	9301      	str	r3, [sp, #4]
 8007ed8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007edc:	9300      	str	r3, [sp, #0]
 8007ede:	4b78      	ldr	r3, [pc, #480]	; (80080c0 <main+0x310>)
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	497c      	ldr	r1, [pc, #496]	; (80080d4 <main+0x324>)
 8007ee4:	487c      	ldr	r0, [pc, #496]	; (80080d8 <main+0x328>)
 8007ee6:	f7fe fc8f 	bl	8006808 <stepper_initialise>
	DIR5_Pin, 1);
	/*
	 * Kalman Filter Initialise
	 */
	KalmanFilter_initialise(&kalman_filter[0], 0, 0, 1, 0, 0, 1, KALMAN_R,
 8007eea:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 8007eee:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 8008068 <main+0x2b8>
 8007ef2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8007ef6:	ed9f 4b5e 	vldr	d4, [pc, #376]	; 8008070 <main+0x2c0>
 8007efa:	ed9f 3b5d 	vldr	d3, [pc, #372]	; 8008070 <main+0x2c0>
 8007efe:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007f02:	ed9f 1b5b 	vldr	d1, [pc, #364]	; 8008070 <main+0x2c0>
 8007f06:	ed9f 0b5a 	vldr	d0, [pc, #360]	; 8008070 <main+0x2c0>
 8007f0a:	4874      	ldr	r0, [pc, #464]	; (80080dc <main+0x32c>)
 8007f0c:	f7f9 fabc 	bl	8001488 <KalmanFilter_initialise>
	KALMAN_Q);
	KalmanFilter_initialise(&kalman_filter[1], 0, 0, 1, 0, 0, 1, KALMAN_R,
 8007f10:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 8007f14:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8008068 <main+0x2b8>
 8007f18:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8007f1c:	ed9f 4b54 	vldr	d4, [pc, #336]	; 8008070 <main+0x2c0>
 8007f20:	ed9f 3b53 	vldr	d3, [pc, #332]	; 8008070 <main+0x2c0>
 8007f24:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007f28:	ed9f 1b51 	vldr	d1, [pc, #324]	; 8008070 <main+0x2c0>
 8007f2c:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8008070 <main+0x2c0>
 8007f30:	486b      	ldr	r0, [pc, #428]	; (80080e0 <main+0x330>)
 8007f32:	f7f9 faa9 	bl	8001488 <KalmanFilter_initialise>
	KALMAN_Q);
	KalmanFilter_initialise(&kalman_filter[2], 0, 0, 1, 0, 0, 1, KALMAN_R,
 8007f36:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 8007f3a:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8008068 <main+0x2b8>
 8007f3e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8007f42:	ed9f 4b4b 	vldr	d4, [pc, #300]	; 8008070 <main+0x2c0>
 8007f46:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8008070 <main+0x2c0>
 8007f4a:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007f4e:	ed9f 1b48 	vldr	d1, [pc, #288]	; 8008070 <main+0x2c0>
 8007f52:	ed9f 0b47 	vldr	d0, [pc, #284]	; 8008070 <main+0x2c0>
 8007f56:	4863      	ldr	r0, [pc, #396]	; (80080e4 <main+0x334>)
 8007f58:	f7f9 fa96 	bl	8001488 <KalmanFilter_initialise>
	KALMAN_Q);
	KalmanFilter_initialise(&kalman_filter[3], 0, 0, 1, 0, 0, 1, KALMAN_R,
 8007f5c:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 8007f60:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8008068 <main+0x2b8>
 8007f64:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8007f68:	ed9f 4b41 	vldr	d4, [pc, #260]	; 8008070 <main+0x2c0>
 8007f6c:	ed9f 3b40 	vldr	d3, [pc, #256]	; 8008070 <main+0x2c0>
 8007f70:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007f74:	ed9f 1b3e 	vldr	d1, [pc, #248]	; 8008070 <main+0x2c0>
 8007f78:	ed9f 0b3d 	vldr	d0, [pc, #244]	; 8008070 <main+0x2c0>
 8007f7c:	485a      	ldr	r0, [pc, #360]	; (80080e8 <main+0x338>)
 8007f7e:	f7f9 fa83 	bl	8001488 <KalmanFilter_initialise>
	KALMAN_Q);
	KalmanFilter_initialise(&kalman_filter[4], 0, 0, 1, 0, 0, 1, KALMAN_R,
 8007f82:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 8007f86:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8008068 <main+0x2b8>
 8007f8a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8007f8e:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8008070 <main+0x2c0>
 8007f92:	ed9f 3b37 	vldr	d3, [pc, #220]	; 8008070 <main+0x2c0>
 8007f96:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007f9a:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8008070 <main+0x2c0>
 8007f9e:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8008070 <main+0x2c0>
 8007fa2:	4852      	ldr	r0, [pc, #328]	; (80080ec <main+0x33c>)
 8007fa4:	f7f9 fa70 	bl	8001488 <KalmanFilter_initialise>
//	PIDController_initialise(&position_pid_controller[3], 40, 0, 0);
//	PIDController_initialise(&position_pid_controller[4], 40, 0, 0);
	/*
	 * Cascade Control
	 */
	PIDController_initialise(&position_pid_controller[0], 100, 0, 2.5);
 8007fa8:	eeb0 2b04 	vmov.f64	d2, #4	; 0x40200000  2.5
 8007fac:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8008070 <main+0x2c0>
 8007fb0:	ed9f 0b31 	vldr	d0, [pc, #196]	; 8008078 <main+0x2c8>
 8007fb4:	484e      	ldr	r0, [pc, #312]	; (80080f0 <main+0x340>)
 8007fb6:	f7fe fde7 	bl	8006b88 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[1], 40, 0, 2.5);
 8007fba:	eeb0 2b04 	vmov.f64	d2, #4	; 0x40200000  2.5
 8007fbe:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8008070 <main+0x2c0>
 8007fc2:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8008080 <main+0x2d0>
 8007fc6:	484b      	ldr	r0, [pc, #300]	; (80080f4 <main+0x344>)
 8007fc8:	f7fe fdde 	bl	8006b88 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[2], 40, 0, 0);
 8007fcc:	ed9f 2b28 	vldr	d2, [pc, #160]	; 8008070 <main+0x2c0>
 8007fd0:	ed9f 1b27 	vldr	d1, [pc, #156]	; 8008070 <main+0x2c0>
 8007fd4:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8008080 <main+0x2d0>
 8007fd8:	4847      	ldr	r0, [pc, #284]	; (80080f8 <main+0x348>)
 8007fda:	f7fe fdd5 	bl	8006b88 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[3], 40, 0, 2.5);
 8007fde:	eeb0 2b04 	vmov.f64	d2, #4	; 0x40200000  2.5
 8007fe2:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8008070 <main+0x2c0>
 8007fe6:	ed9f 0b26 	vldr	d0, [pc, #152]	; 8008080 <main+0x2d0>
 8007fea:	4844      	ldr	r0, [pc, #272]	; (80080fc <main+0x34c>)
 8007fec:	f7fe fdcc 	bl	8006b88 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[4], 40, 0, 2.5);
 8007ff0:	eeb0 2b04 	vmov.f64	d2, #4	; 0x40200000  2.5
 8007ff4:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8008070 <main+0x2c0>
 8007ff8:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8008080 <main+0x2d0>
 8007ffc:	4840      	ldr	r0, [pc, #256]	; (8008100 <main+0x350>)
 8007ffe:	f7fe fdc3 	bl	8006b88 <PIDController_initialise>
//	PIDController_initialise(&velocity_pid_controller[3], 75, 0.005, 0);
//	PIDController_initialise(&velocity_pid_controller[4], 75, 0.005, 0);
	/*
	 * Cascade Control
	 */
	PIDController_initialise(&velocity_pid_controller[0], 20, 0, 0); //5
 8008002:	ed9f 2b1b 	vldr	d2, [pc, #108]	; 8008070 <main+0x2c0>
 8008006:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8008070 <main+0x2c0>
 800800a:	eeb3 0b04 	vmov.f64	d0, #52	; 0x41a00000  20.0
 800800e:	483d      	ldr	r0, [pc, #244]	; (8008104 <main+0x354>)
 8008010:	f7fe fdba 	bl	8006b88 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[1], 20, 0, 0); //1
 8008014:	ed9f 2b16 	vldr	d2, [pc, #88]	; 8008070 <main+0x2c0>
 8008018:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8008070 <main+0x2c0>
 800801c:	eeb3 0b04 	vmov.f64	d0, #52	; 0x41a00000  20.0
 8008020:	4839      	ldr	r0, [pc, #228]	; (8008108 <main+0x358>)
 8008022:	f7fe fdb1 	bl	8006b88 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[2], 10, 0, 0); //0.5
 8008026:	ed9f 2b12 	vldr	d2, [pc, #72]	; 8008070 <main+0x2c0>
 800802a:	ed9f 1b11 	vldr	d1, [pc, #68]	; 8008070 <main+0x2c0>
 800802e:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8008032:	4836      	ldr	r0, [pc, #216]	; (800810c <main+0x35c>)
 8008034:	f7fe fda8 	bl	8006b88 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[3], 20, 0, 0); //1
 8008038:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8008070 <main+0x2c0>
 800803c:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 8008070 <main+0x2c0>
 8008040:	eeb3 0b04 	vmov.f64	d0, #52	; 0x41a00000  20.0
 8008044:	4832      	ldr	r0, [pc, #200]	; (8008110 <main+0x360>)
 8008046:	f7fe fd9f 	bl	8006b88 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[4], 20, 0, 0); //1
 800804a:	ed9f 2b09 	vldr	d2, [pc, #36]	; 8008070 <main+0x2c0>
 800804e:	ed9f 1b08 	vldr	d1, [pc, #32]	; 8008070 <main+0x2c0>
 8008052:	eeb3 0b04 	vmov.f64	d0, #52	; 0x41a00000  20.0
 8008056:	482f      	ldr	r0, [pc, #188]	; (8008114 <main+0x364>)
 8008058:	f7fe fd96 	bl	8006b88 <PIDController_initialise>

	/*
	 * Quintic Trajectory Following Initialise
	 */
	for (int i = 0; i < 5; i++) {
 800805c:	2300      	movs	r3, #0
 800805e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8008062:	e06b      	b.n	800813c <main+0x38c>
 8008064:	f3af 8000 	nop.w
 8008068:	47ae147b 	.word	0x47ae147b
 800806c:	3f847ae1 	.word	0x3f847ae1
	...
 800807c:	40590000 	.word	0x40590000
 8008080:	00000000 	.word	0x00000000
 8008084:	40440000 	.word	0x40440000
 8008088:	58021000 	.word	0x58021000
 800808c:	24000f04 	.word	0x24000f04
 8008090:	240007d8 	.word	0x240007d8
 8008094:	58020c00 	.word	0x58020c00
 8008098:	24001360 	.word	0x24001360
 800809c:	240007e4 	.word	0x240007e4
 80080a0:	240007f8 	.word	0x240007f8
 80080a4:	2400080c 	.word	0x2400080c
 80080a8:	24000834 	.word	0x24000834
 80080ac:	24000820 	.word	0x24000820
 80080b0:	24000fe8 	.word	0x24000fe8
 80080b4:	24000738 	.word	0x24000738
 80080b8:	24001034 	.word	0x24001034
 80080bc:	24000758 	.word	0x24000758
 80080c0:	58020800 	.word	0x58020800
 80080c4:	24000f50 	.word	0x24000f50
 80080c8:	24000778 	.word	0x24000778
 80080cc:	24000e6c 	.word	0x24000e6c
 80080d0:	240007b8 	.word	0x240007b8
 80080d4:	24000eb8 	.word	0x24000eb8
 80080d8:	24000798 	.word	0x24000798
 80080dc:	24000a50 	.word	0x24000a50
 80080e0:	24000a90 	.word	0x24000a90
 80080e4:	24000ad0 	.word	0x24000ad0
 80080e8:	24000b10 	.word	0x24000b10
 80080ec:	24000b50 	.word	0x24000b50
 80080f0:	24000b90 	.word	0x24000b90
 80080f4:	24000bf8 	.word	0x24000bf8
 80080f8:	24000c60 	.word	0x24000c60
 80080fc:	24000cc8 	.word	0x24000cc8
 8008100:	24000d30 	.word	0x24000d30
 8008104:	24000848 	.word	0x24000848
 8008108:	240008b0 	.word	0x240008b0
 800810c:	24000918 	.word	0x24000918
 8008110:	24000980 	.word	0x24000980
 8008114:	240009e8 	.word	0x240009e8
		QuinticTrajectory_initialise(&quintic_trajectory[i], 0.01);
 8008118:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800811c:	4613      	mov	r3, r2
 800811e:	005b      	lsls	r3, r3, #1
 8008120:	4413      	add	r3, r2
 8008122:	015b      	lsls	r3, r3, #5
 8008124:	4a80      	ldr	r2, [pc, #512]	; (8008328 <main+0x578>)
 8008126:	4413      	add	r3, r2
 8008128:	ed9f 0b77 	vldr	d0, [pc, #476]	; 8008308 <main+0x558>
 800812c:	4618      	mov	r0, r3
 800812e:	f7fe fe46 	bl	8006dbe <QuinticTrajectory_initialise>
	for (int i = 0; i < 5; i++) {
 8008132:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8008136:	3301      	adds	r3, #1
 8008138:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800813c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8008140:	2b04      	cmp	r3, #4
 8008142:	dde9      	ble.n	8008118 <main+0x368>
	}
	int8_t j_num = 0;
 8008144:	2300      	movs	r3, #0
 8008146:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	uint32_t timestamp1 = 0;
 800814a:	2300      	movs	r3, #0
 800814c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	uint32_t timestamp2 = 0;
 8008150:	2300      	movs	r3, #0
 8008152:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	uint32_t timestamp3 = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	HAL_StatusTypeDef rep = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
	int32_t encoder_unwrap_value[5] = { 0 };
 8008162:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8008166:	2200      	movs	r2, #0
 8008168:	601a      	str	r2, [r3, #0]
 800816a:	605a      	str	r2, [r3, #4]
 800816c:	609a      	str	r2, [r3, #8]
 800816e:	60da      	str	r2, [r3, #12]
 8008170:	611a      	str	r2, [r3, #16]
	double q0[5] = {-2, 8, -10, 4, 4};
 8008172:	4b6e      	ldr	r3, [pc, #440]	; (800832c <main+0x57c>)
 8008174:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8008178:	461d      	mov	r5, r3
 800817a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800817c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800817e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008182:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008186:	e884 0003 	stmia.w	r4, {r0, r1}
	double q1[5] = {2, -16, 8, -2.5, -2.5};
 800818a:	4b69      	ldr	r3, [pc, #420]	; (8008330 <main+0x580>)
 800818c:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 8008190:	461d      	mov	r5, r3
 8008192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800819a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800819e:	e884 0003 	stmia.w	r4, {r0, r1}
	double v0[5] = {0};
 80081a2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80081a6:	2228      	movs	r2, #40	; 0x28
 80081a8:	2100      	movs	r1, #0
 80081aa:	4618      	mov	r0, r3
 80081ac:	f00c fa6c 	bl	8014688 <memset>
	double v1[5] = {0};
 80081b0:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80081b4:	2228      	movs	r2, #40	; 0x28
 80081b6:	2100      	movs	r1, #0
 80081b8:	4618      	mov	r0, r3
 80081ba:	f00c fa65 	bl	8014688 <memset>
	double ac0[5] = {0};
 80081be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80081c2:	4618      	mov	r0, r3
 80081c4:	2328      	movs	r3, #40	; 0x28
 80081c6:	461a      	mov	r2, r3
 80081c8:	2100      	movs	r1, #0
 80081ca:	f00c fa5d 	bl	8014688 <memset>
	double ac1[5] = {0};
 80081ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80081d2:	4618      	mov	r0, r3
 80081d4:	2328      	movs	r3, #40	; 0x28
 80081d6:	461a      	mov	r2, r3
 80081d8:	2100      	movs	r1, #0
 80081da:	f00c fa55 	bl	8014688 <memset>
	double tf = 6;
 80081de:	f04f 0200 	mov.w	r2, #0
 80081e2:	4b54      	ldr	r3, [pc, #336]	; (8008334 <main+0x584>)
 80081e4:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
	int8_t traj_buf = 0;
 80081e8:	2300      	movs	r3, #0
 80081ea:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if ((delta_khe[0] != 0)||
 80081ee:	4b52      	ldr	r3, [pc, #328]	; (8008338 <main+0x588>)
 80081f0:	ed93 7b00 	vldr	d7, [r3]
 80081f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80081f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081fc:	d120      	bne.n	8008240 <main+0x490>
				(delta_khe[1] != 0)||
 80081fe:	4b4e      	ldr	r3, [pc, #312]	; (8008338 <main+0x588>)
 8008200:	ed93 7b02 	vldr	d7, [r3, #8]
		if ((delta_khe[0] != 0)||
 8008204:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800820c:	d118      	bne.n	8008240 <main+0x490>
				(delta_khe[2] != 0)||
 800820e:	4b4a      	ldr	r3, [pc, #296]	; (8008338 <main+0x588>)
 8008210:	ed93 7b04 	vldr	d7, [r3, #16]
				(delta_khe[1] != 0)||
 8008214:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800821c:	d110      	bne.n	8008240 <main+0x490>
				(delta_khe[3] != 0)||
 800821e:	4b46      	ldr	r3, [pc, #280]	; (8008338 <main+0x588>)
 8008220:	ed93 7b06 	vldr	d7, [r3, #24]
				(delta_khe[2] != 0)||
 8008224:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800822c:	d108      	bne.n	8008240 <main+0x490>
				(delta_khe[4] != 0)){
 800822e:	4b42      	ldr	r3, [pc, #264]	; (8008338 <main+0x588>)
 8008230:	ed93 7b08 	vldr	d7, [r3, #32]
				(delta_khe[3] != 0)||
 8008234:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800823c:	f000 80ac 	beq.w	8008398 <main+0x5e8>
			/*
			 * Tai-Ban Cartesian Jog
			 */
			double joint_config[5] = {0};
 8008240:	f107 0308 	add.w	r3, r7, #8
 8008244:	4618      	mov	r0, r3
 8008246:	2328      	movs	r3, #40	; 0x28
 8008248:	461a      	mov	r2, r3
 800824a:	2100      	movs	r1, #0
 800824c:	f00c fa1c 	bl	8014688 <memset>
			double delta_q[5] = {0};
 8008250:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008254:	4618      	mov	r0, r3
 8008256:	2328      	movs	r3, #40	; 0x28
 8008258:	461a      	mov	r2, r3
 800825a:	2100      	movs	r1, #0
 800825c:	f00c fa14 	bl	8014688 <memset>
			joint_config[0] = desired_position[0] * (9.0/25.0);
 8008260:	4b36      	ldr	r3, [pc, #216]	; (800833c <main+0x58c>)
 8008262:	ed93 7b00 	vldr	d7, [r3]
 8008266:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8008310 <main+0x560>
 800826a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800826e:	f107 0308 	add.w	r3, r7, #8
 8008272:	ed83 7b00 	vstr	d7, [r3]
			joint_config[1] = desired_position[1] / 27.0;
 8008276:	4b31      	ldr	r3, [pc, #196]	; (800833c <main+0x58c>)
 8008278:	ed93 6b02 	vldr	d6, [r3, #8]
 800827c:	eeb3 5b0b 	vmov.f64	d5, #59	; 0x41d80000  27.0
 8008280:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008284:	f107 0308 	add.w	r3, r7, #8
 8008288:	ed83 7b02 	vstr	d7, [r3, #8]
			joint_config[2] = asin(desired_position[2]/22.5);
 800828c:	4b2b      	ldr	r3, [pc, #172]	; (800833c <main+0x58c>)
 800828e:	ed93 7b04 	vldr	d7, [r3, #16]
 8008292:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8008318 <main+0x568>
 8008296:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800829a:	eeb0 0b46 	vmov.f64	d0, d6
 800829e:	f00f f9c3 	bl	8017628 <asin>
 80082a2:	eeb0 7b40 	vmov.f64	d7, d0
 80082a6:	f107 0308 	add.w	r3, r7, #8
 80082aa:	ed83 7b04 	vstr	d7, [r3, #16]
			joint_config[3] = (desired_position[3] + desired_position[4]) * 0.1125;
 80082ae:	4b23      	ldr	r3, [pc, #140]	; (800833c <main+0x58c>)
 80082b0:	ed93 6b06 	vldr	d6, [r3, #24]
 80082b4:	4b21      	ldr	r3, [pc, #132]	; (800833c <main+0x58c>)
 80082b6:	ed93 7b08 	vldr	d7, [r3, #32]
 80082ba:	ee36 7b07 	vadd.f64	d7, d6, d7
 80082be:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8008320 <main+0x570>
 80082c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80082c6:	f107 0308 	add.w	r3, r7, #8
 80082ca:	ed83 7b06 	vstr	d7, [r3, #24]
			joint_config[4] = (desired_position[3] - desired_position[4])/8.0;
 80082ce:	4b1b      	ldr	r3, [pc, #108]	; (800833c <main+0x58c>)
 80082d0:	ed93 6b06 	vldr	d6, [r3, #24]
 80082d4:	4b19      	ldr	r3, [pc, #100]	; (800833c <main+0x58c>)
 80082d6:	ed93 7b08 	vldr	d7, [r3, #32]
 80082da:	ee36 6b47 	vsub.f64	d6, d6, d7
 80082de:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 80082e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80082e6:	f107 0308 	add.w	r3, r7, #8
 80082ea:	ed83 7b08 	vstr	d7, [r3, #32]
			IVK(joint_config, delta_khe, delta_q);
 80082ee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80082f2:	f107 0308 	add.w	r3, r7, #8
 80082f6:	4910      	ldr	r1, [pc, #64]	; (8008338 <main+0x588>)
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7f9 fc15 	bl	8001b28 <IVK>
			for (int i = 0; i < 5; i++) {
 80082fe:	2300      	movs	r3, #0
 8008300:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8008304:	e044      	b.n	8008390 <main+0x5e0>
 8008306:	bf00      	nop
 8008308:	47ae147b 	.word	0x47ae147b
 800830c:	3f847ae1 	.word	0x3f847ae1
 8008310:	70a3d70a 	.word	0x70a3d70a
 8008314:	3fd70a3d 	.word	0x3fd70a3d
 8008318:	00000000 	.word	0x00000000
 800831c:	40368000 	.word	0x40368000
 8008320:	cccccccd 	.word	0xcccccccd
 8008324:	3fbccccc 	.word	0x3fbccccc
 8008328:	24000558 	.word	0x24000558
 800832c:	080184e8 	.word	0x080184e8
 8008330:	08018510 	.word	0x08018510
 8008334:	40180000 	.word	0x40180000
 8008338:	24000320 	.word	0x24000320
 800833c:	24000258 	.word	0x24000258
				delta_khe[i] = 0;
 8008340:	4abc      	ldr	r2, [pc, #752]	; (8008634 <main+0x884>)
 8008342:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8008346:	00db      	lsls	r3, r3, #3
 8008348:	18d1      	adds	r1, r2, r3
 800834a:	f04f 0200 	mov.w	r2, #0
 800834e:	f04f 0300 	mov.w	r3, #0
 8008352:	e9c1 2300 	strd	r2, r3, [r1]
				desired_position[i] += delta_q[i];
 8008356:	4ab8      	ldr	r2, [pc, #736]	; (8008638 <main+0x888>)
 8008358:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800835c:	00db      	lsls	r3, r3, #3
 800835e:	4413      	add	r3, r2
 8008360:	ed93 6b00 	vldr	d6, [r3]
 8008364:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008368:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800836c:	00db      	lsls	r3, r3, #3
 800836e:	4413      	add	r3, r2
 8008370:	ed93 7b00 	vldr	d7, [r3]
 8008374:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008378:	4aaf      	ldr	r2, [pc, #700]	; (8008638 <main+0x888>)
 800837a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800837e:	00db      	lsls	r3, r3, #3
 8008380:	4413      	add	r3, r2
 8008382:	ed83 7b00 	vstr	d7, [r3]
			for (int i = 0; i < 5; i++) {
 8008386:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800838a:	3301      	adds	r3, #1
 800838c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8008390:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8008394:	2b04      	cmp	r3, #4
 8008396:	ddd3      	ble.n	8008340 <main+0x590>
			}
		}
		if (HAL_GetTick() - timestamp1 >= 100) {
 8008398:	f002 f972 	bl	800a680 <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80083a2:	1ad3      	subs	r3, r2, r3
 80083a4:	2b63      	cmp	r3, #99	; 0x63
 80083a6:	d919      	bls.n	80083dc <main+0x62c>
			/*
			 * UART
			 */
			timestamp1 = HAL_GetTick();
 80083a8:	f002 f96a 	bl	800a680 <HAL_GetTick>
 80083ac:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
			ARMsProtocol_FUNC_Interface();
 80083b0:	f7f8 faa6 	bl	8000900 <ARMsProtocol_FUNC_Interface>
			if (servo_flag){
 80083b4:	4ba1      	ldr	r3, [pc, #644]	; (800863c <main+0x88c>)
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00f      	beq.n	80083dc <main+0x62c>
				/*
				 * Set Servo Degree
				 */
				servo_set_degree(&servo_motor, servo_degree);
 80083bc:	4ba0      	ldr	r3, [pc, #640]	; (8008640 <main+0x890>)
 80083be:	ed93 7b00 	vldr	d7, [r3]
 80083c2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80083c6:	edc7 7a01 	vstr	s15, [r7, #4]
 80083ca:	793b      	ldrb	r3, [r7, #4]
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	4619      	mov	r1, r3
 80083d0:	489c      	ldr	r0, [pc, #624]	; (8008644 <main+0x894>)
 80083d2:	f7fe fb09 	bl	80069e8 <servo_set_degree>
				servo_flag = 0;
 80083d6:	4b99      	ldr	r3, [pc, #612]	; (800863c <main+0x88c>)
 80083d8:	2200      	movs	r2, #0
 80083da:	701a      	strb	r2, [r3, #0]
			}
		}
		if (HAL_GetTick() - timestamp2 >= 2) {
 80083dc:	f002 f950 	bl	800a680 <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	f240 80b1 	bls.w	8008550 <main+0x7a0>
			/*
			 * Read Encoders
			 */
			timestamp2 = HAL_GetTick();
 80083ee:	f002 f947 	bl	800a680 <HAL_GetTick>
 80083f2:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
			rep = HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
			encoder_unwrap_value[j_num] = 0;
 80083fc:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8008406:	4413      	add	r3, r2
 8008408:	2200      	movs	r2, #0
 800840a:	f843 2c54 	str.w	r2, [r3, #-84]
			while (1) {
				AMT21_read_value(&(encoders[j_num]));
 800840e:	f997 219b 	ldrsb.w	r2, [r7, #411]	; 0x19b
 8008412:	4613      	mov	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	4413      	add	r3, r2
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4a8b      	ldr	r2, [pc, #556]	; (8008648 <main+0x898>)
 800841c:	4413      	add	r3, r2
 800841e:	4618      	mov	r0, r3
 8008420:	f7f8 f973 	bl	800070a <AMT21_read_value>
				rep = AMT21_check_value(&(encoders[j_num]));
 8008424:	f997 219b 	ldrsb.w	r2, [r7, #411]	; 0x19b
 8008428:	4613      	mov	r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4413      	add	r3, r2
 800842e:	009b      	lsls	r3, r3, #2
 8008430:	4a85      	ldr	r2, [pc, #532]	; (8008648 <main+0x898>)
 8008432:	4413      	add	r3, r2
 8008434:	4618      	mov	r0, r3
 8008436:	f7f8 f9a7 	bl	8000788 <AMT21_check_value>
 800843a:	4603      	mov	r3, r0
 800843c:	f887 316b 	strb.w	r3, [r7, #363]	; 0x16b
				if (rep == HAL_OK) {
 8008440:	f897 316b 	ldrb.w	r3, [r7, #363]	; 0x16b
 8008444:	2b00      	cmp	r3, #0
 8008446:	d1e2      	bne.n	800840e <main+0x65e>
					encoder_unwrap_value[j_num] = AMT21_unwrap(
							(int32_t) encoders[j_num].position,
 8008448:	f997 219b 	ldrsb.w	r2, [r7, #411]	; 0x19b
 800844c:	497e      	ldr	r1, [pc, #504]	; (8008648 <main+0x898>)
 800844e:	4613      	mov	r3, r2
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	440b      	add	r3, r1
 8008458:	330e      	adds	r3, #14
 800845a:	881b      	ldrh	r3, [r3, #0]
					encoder_unwrap_value[j_num] = AMT21_unwrap(
 800845c:	4618      	mov	r0, r3
							(int32_t) encoders[j_num].prev_position);
 800845e:	f997 219b 	ldrsb.w	r2, [r7, #411]	; 0x19b
 8008462:	4979      	ldr	r1, [pc, #484]	; (8008648 <main+0x898>)
 8008464:	4613      	mov	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	4413      	add	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	440b      	add	r3, r1
 800846e:	3310      	adds	r3, #16
 8008470:	881b      	ldrh	r3, [r3, #0]
					encoder_unwrap_value[j_num] = AMT21_unwrap(
 8008472:	f997 419b 	ldrsb.w	r4, [r7, #411]	; 0x19b
 8008476:	4619      	mov	r1, r3
 8008478:	f7f8 f9e8 	bl	800084c <AMT21_unwrap>
 800847c:	4602      	mov	r2, r0
 800847e:	00a3      	lsls	r3, r4, #2
 8008480:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8008484:	440b      	add	r3, r1
 8008486:	f843 2c54 	str.w	r2, [r3, #-84]
					encoders[j_num].prev_position = encoders[j_num].position;
 800848a:	f997 119b 	ldrsb.w	r1, [r7, #411]	; 0x19b
 800848e:	f997 219b 	ldrsb.w	r2, [r7, #411]	; 0x19b
 8008492:	486d      	ldr	r0, [pc, #436]	; (8008648 <main+0x898>)
 8008494:	460b      	mov	r3, r1
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	440b      	add	r3, r1
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4403      	add	r3, r0
 800849e:	330e      	adds	r3, #14
 80084a0:	8818      	ldrh	r0, [r3, #0]
 80084a2:	4969      	ldr	r1, [pc, #420]	; (8008648 <main+0x898>)
 80084a4:	4613      	mov	r3, r2
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4413      	add	r3, r2
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	440b      	add	r3, r1
 80084ae:	3310      	adds	r3, #16
 80084b0:	4602      	mov	r2, r0
 80084b2:	801a      	strh	r2, [r3, #0]
					break;
 80084b4:	bf00      	nop
				}
			}
			if ((j_num == 0) | (j_num == 2) | (j_num == 3)) {
 80084b6:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	bf0c      	ite	eq
 80084be:	2301      	moveq	r3, #1
 80084c0:	2300      	movne	r3, #0
 80084c2:	b2da      	uxtb	r2, r3
 80084c4:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	bf0c      	ite	eq
 80084cc:	2301      	moveq	r3, #1
 80084ce:	2300      	movne	r3, #0
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	4313      	orrs	r3, r2
 80084d4:	b2db      	uxtb	r3, r3
 80084d6:	461a      	mov	r2, r3
 80084d8:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 80084dc:	2b03      	cmp	r3, #3
 80084de:	bf0c      	ite	eq
 80084e0:	2301      	moveq	r3, #1
 80084e2:	2300      	movne	r3, #0
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	4313      	orrs	r3, r2
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d010      	beq.n	800850e <main+0x75e>
				encoder_unwrap_value[j_num] = encoder_unwrap_value[j_num] * -1;
 80084ec:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80084f6:	4413      	add	r3, r2
 80084f8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80084fc:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 8008500:	4252      	negs	r2, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 8008508:	440b      	add	r3, r1
 800850a:	f843 2c54 	str.w	r2, [r3, #-84]
			}
			encoder_config[j_num] = encoder_config[j_num]
 800850e:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 8008512:	4a4e      	ldr	r2, [pc, #312]	; (800864c <main+0x89c>)
 8008514:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
					+ encoder_unwrap_value[j_num];
 8008518:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8008522:	4413      	add	r3, r2
 8008524:	f853 2c54 	ldr.w	r2, [r3, #-84]
			encoder_config[j_num] = encoder_config[j_num]
 8008528:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
					+ encoder_unwrap_value[j_num];
 800852c:	440a      	add	r2, r1
			encoder_config[j_num] = encoder_config[j_num]
 800852e:	4947      	ldr	r1, [pc, #284]	; (800864c <main+0x89c>)
 8008530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			j_num++;
 8008534:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 8008538:	b2db      	uxtb	r3, r3
 800853a:	3301      	adds	r3, #1
 800853c:	b2db      	uxtb	r3, r3
 800853e:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
			if (j_num == 5) {
 8008542:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 8008546:	2b05      	cmp	r3, #5
 8008548:	d102      	bne.n	8008550 <main+0x7a0>
				j_num = 0;
 800854a:	2300      	movs	r3, #0
 800854c:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
			}
		}
		if (HAL_GetTick() - timestamp3 >= 10) {
 8008550:	f002 f896 	bl	800a680 <HAL_GetTick>
 8008554:	4602      	mov	r2, r0
 8008556:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	2b09      	cmp	r3, #9
 800855e:	f67f ae46 	bls.w	80081ee <main+0x43e>
			/*
			 * Control Loop
			 */
			timestamp3 = HAL_GetTick();
 8008562:	f002 f88d 	bl	800a680 <HAL_GetTick>
 8008566:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
			if (quintic_trajectory[0].is_end) {
 800856a:	4b39      	ldr	r3, [pc, #228]	; (8008650 <main+0x8a0>)
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	f000 80bf 	beq.w	80086f2 <main+0x942>
				if (traj_buf == 0) {
 8008574:	f997 318b 	ldrsb.w	r3, [r7, #395]	; 0x18b
 8008578:	2b00      	cmp	r3, #0
 800857a:	d153      	bne.n	8008624 <main+0x874>
//							0, 0, 0.201481481481481, -0.040296296296296, 0.002149135802469, 7.5);
//					QuinticTrajectory_set_param(&(quintic_trajectory[3]), -2.75, 0,
//							0, 0.130370370370370, -0.026074074074074, 0.001390617283951, 7.5);
//					QuinticTrajectory_set_param(&(quintic_trajectory[4]), -2.75, 0,
//							0, 0.130370370370370, -0.026074074074074, 0.001390617283951, 7.5);
					for (int i =0; i <5 ;i ++){
 800857c:	2300      	movs	r3, #0
 800857e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8008582:	e047      	b.n	8008614 <main+0x864>
						QuinticTrajectory_cal_and_set_coeff(&(quintic_trajectory[i]), q0[i], q1[i], v0[i], v1[i], ac0[i], ac1[i], tf);
 8008584:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8008588:	4613      	mov	r3, r2
 800858a:	005b      	lsls	r3, r3, #1
 800858c:	4413      	add	r3, r2
 800858e:	015b      	lsls	r3, r3, #5
 8008590:	4a2f      	ldr	r2, [pc, #188]	; (8008650 <main+0x8a0>)
 8008592:	1899      	adds	r1, r3, r2
 8008594:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8008598:	00db      	lsls	r3, r3, #3
 800859a:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800859e:	4413      	add	r3, r2
 80085a0:	3b80      	subs	r3, #128	; 0x80
 80085a2:	ed93 7b00 	vldr	d7, [r3]
 80085a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80085aa:	00db      	lsls	r3, r3, #3
 80085ac:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80085b0:	4413      	add	r3, r2
 80085b2:	3ba8      	subs	r3, #168	; 0xa8
 80085b4:	ed93 1b00 	vldr	d1, [r3]
 80085b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80085bc:	00db      	lsls	r3, r3, #3
 80085be:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80085c2:	4413      	add	r3, r2
 80085c4:	3bd0      	subs	r3, #208	; 0xd0
 80085c6:	ed93 2b00 	vldr	d2, [r3]
 80085ca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80085ce:	00db      	lsls	r3, r3, #3
 80085d0:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80085d4:	4413      	add	r3, r2
 80085d6:	3bf8      	subs	r3, #248	; 0xf8
 80085d8:	ed93 3b00 	vldr	d3, [r3]
 80085dc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80085e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80085e4:	00db      	lsls	r3, r3, #3
 80085e6:	4413      	add	r3, r2
 80085e8:	ed93 4b00 	vldr	d4, [r3]
 80085ec:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80085f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80085f4:	00db      	lsls	r3, r3, #3
 80085f6:	4413      	add	r3, r2
 80085f8:	ed93 5b00 	vldr	d5, [r3]
 80085fc:	ed97 6b58 	vldr	d6, [r7, #352]	; 0x160
 8008600:	eeb0 0b47 	vmov.f64	d0, d7
 8008604:	4608      	mov	r0, r1
 8008606:	f7fe fc35 	bl	8006e74 <QuinticTrajectory_cal_and_set_coeff>
					for (int i =0; i <5 ;i ++){
 800860a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800860e:	3301      	adds	r3, #1
 8008610:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8008614:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8008618:	2b04      	cmp	r3, #4
 800861a:	ddb3      	ble.n	8008584 <main+0x7d4>
					}
					traj_buf = 1;
 800861c:	2301      	movs	r3, #1
 800861e:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
 8008622:	e066      	b.n	80086f2 <main+0x942>
				} else if (traj_buf == 1) {
 8008624:	f997 318b 	ldrsb.w	r3, [r7, #395]	; 0x18b
 8008628:	2b01      	cmp	r3, #1
 800862a:	d162      	bne.n	80086f2 <main+0x942>
//							0, -0.201481481481481, 0.040296296296296, -0.002149135802469, 7.5);
//					QuinticTrajectory_set_param(&(quintic_trajectory[3]), 2.75, 0,
//							0, -0.130370370370370, 0.026074074074074, -0.001390617283951, 7.5);
//					QuinticTrajectory_set_param(&(quintic_trajectory[4]), 2.75, 0,
//							0, -0.130370370370370, 0.026074074074074, -0.001390617283951, 7.5);
					for (int i =0; i <5 ;i ++){
 800862c:	2300      	movs	r3, #0
 800862e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8008632:	e057      	b.n	80086e4 <main+0x934>
 8008634:	24000320 	.word	0x24000320
 8008638:	24000258 	.word	0x24000258
 800863c:	24000280 	.word	0x24000280
 8008640:	24000288 	.word	0x24000288
 8008644:	240007d8 	.word	0x240007d8
 8008648:	240007e4 	.word	0x240007e4
 800864c:	24000290 	.word	0x24000290
 8008650:	24000558 	.word	0x24000558
						QuinticTrajectory_cal_and_set_coeff(&(quintic_trajectory[i]), q1[i], q0[i], v0[i], v1[i], ac0[i], ac1[i], tf);
 8008654:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8008658:	4613      	mov	r3, r2
 800865a:	005b      	lsls	r3, r3, #1
 800865c:	4413      	add	r3, r2
 800865e:	015b      	lsls	r3, r3, #5
 8008660:	4acf      	ldr	r2, [pc, #828]	; (80089a0 <main+0xbf0>)
 8008662:	1899      	adds	r1, r3, r2
 8008664:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8008668:	00db      	lsls	r3, r3, #3
 800866a:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800866e:	4413      	add	r3, r2
 8008670:	3ba8      	subs	r3, #168	; 0xa8
 8008672:	ed93 7b00 	vldr	d7, [r3]
 8008676:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800867a:	00db      	lsls	r3, r3, #3
 800867c:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8008680:	4413      	add	r3, r2
 8008682:	3b80      	subs	r3, #128	; 0x80
 8008684:	ed93 1b00 	vldr	d1, [r3]
 8008688:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800868c:	00db      	lsls	r3, r3, #3
 800868e:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8008692:	4413      	add	r3, r2
 8008694:	3bd0      	subs	r3, #208	; 0xd0
 8008696:	ed93 2b00 	vldr	d2, [r3]
 800869a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800869e:	00db      	lsls	r3, r3, #3
 80086a0:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80086a4:	4413      	add	r3, r2
 80086a6:	3bf8      	subs	r3, #248	; 0xf8
 80086a8:	ed93 3b00 	vldr	d3, [r3]
 80086ac:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80086b0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80086b4:	00db      	lsls	r3, r3, #3
 80086b6:	4413      	add	r3, r2
 80086b8:	ed93 4b00 	vldr	d4, [r3]
 80086bc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80086c0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80086c4:	00db      	lsls	r3, r3, #3
 80086c6:	4413      	add	r3, r2
 80086c8:	ed93 5b00 	vldr	d5, [r3]
 80086cc:	ed97 6b58 	vldr	d6, [r7, #352]	; 0x160
 80086d0:	eeb0 0b47 	vmov.f64	d0, d7
 80086d4:	4608      	mov	r0, r1
 80086d6:	f7fe fbcd 	bl	8006e74 <QuinticTrajectory_cal_and_set_coeff>
					for (int i =0; i <5 ;i ++){
 80086da:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80086de:	3301      	adds	r3, #1
 80086e0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80086e4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80086e8:	2b04      	cmp	r3, #4
 80086ea:	ddb3      	ble.n	8008654 <main+0x8a4>
					}
					traj_buf = 0;
 80086ec:	2300      	movs	r3, #0
 80086ee:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
				}
			}
			motor_config[0] = ((2 * M_PI * encoder_config[0]) / 16384.0)
 80086f2:	4bac      	ldr	r3, [pc, #688]	; (80089a4 <main+0xbf4>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	ee07 3a90 	vmov	s15, r3
 80086fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80086fe:	ed9f 6ba0 	vldr	d6, [pc, #640]	; 8008980 <main+0xbd0>
 8008702:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008706:	ed9f 5ba0 	vldr	d5, [pc, #640]	; 8008988 <main+0xbd8>
 800870a:	ee86 7b05 	vdiv.f64	d7, d6, d5
					* (25.0 / 9.0);
 800870e:	ed9f 6ba0 	vldr	d6, [pc, #640]	; 8008990 <main+0xbe0>
 8008712:	ee27 7b06 	vmul.f64	d7, d7, d6
			motor_config[0] = ((2 * M_PI * encoder_config[0]) / 16384.0)
 8008716:	4ba4      	ldr	r3, [pc, #656]	; (80089a8 <main+0xbf8>)
 8008718:	ed83 7b00 	vstr	d7, [r3]
			motor_config[1] = ((2 * M_PI * encoder_config[1]) / 16384.0) * 27.0;
 800871c:	4ba1      	ldr	r3, [pc, #644]	; (80089a4 <main+0xbf4>)
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	ee07 3a90 	vmov	s15, r3
 8008724:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008728:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8008980 <main+0xbd0>
 800872c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008730:	ed9f 5b95 	vldr	d5, [pc, #596]	; 8008988 <main+0xbd8>
 8008734:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008738:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 800873c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008740:	4b99      	ldr	r3, [pc, #612]	; (80089a8 <main+0xbf8>)
 8008742:	ed83 7b02 	vstr	d7, [r3, #8]
			motor_config[2] = 22.5
					* sin((2 * M_PI * encoder_config[2]) / 16384.0);
 8008746:	4b97      	ldr	r3, [pc, #604]	; (80089a4 <main+0xbf4>)
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	ee07 3a90 	vmov	s15, r3
 800874e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008752:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8008980 <main+0xbd0>
 8008756:	ee27 7b06 	vmul.f64	d7, d7, d6
 800875a:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 8008988 <main+0xbd8>
 800875e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8008762:	eeb0 0b46 	vmov.f64	d0, d6
 8008766:	f00e ff17 	bl	8017598 <sin>
 800876a:	eeb0 7b40 	vmov.f64	d7, d0
 800876e:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 8008998 <main+0xbe8>
 8008772:	ee27 7b06 	vmul.f64	d7, d7, d6
			motor_config[2] = 22.5
 8008776:	4b8c      	ldr	r3, [pc, #560]	; (80089a8 <main+0xbf8>)
 8008778:	ed83 7b04 	vstr	d7, [r3, #16]
			motor_config[3] = (2 * M_PI * encoder_config[3]) / 16384.0; //checked
 800877c:	4b89      	ldr	r3, [pc, #548]	; (80089a4 <main+0xbf4>)
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	ee07 3a90 	vmov	s15, r3
 8008784:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008788:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8008980 <main+0xbd0>
 800878c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008790:	ed9f 5b7d 	vldr	d5, [pc, #500]	; 8008988 <main+0xbd8>
 8008794:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008798:	4b83      	ldr	r3, [pc, #524]	; (80089a8 <main+0xbf8>)
 800879a:	ed83 7b06 	vstr	d7, [r3, #24]
			motor_config[4] = (2 * M_PI * encoder_config[4]) / 16384.0; //checked
 800879e:	4b81      	ldr	r3, [pc, #516]	; (80089a4 <main+0xbf4>)
 80087a0:	691b      	ldr	r3, [r3, #16]
 80087a2:	ee07 3a90 	vmov	s15, r3
 80087a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80087aa:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8008980 <main+0xbd0>
 80087ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80087b2:	ed9f 5b75 	vldr	d5, [pc, #468]	; 8008988 <main+0xbd8>
 80087b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80087ba:	4b7b      	ldr	r3, [pc, #492]	; (80089a8 <main+0xbf8>)
 80087bc:	ed83 7b08 	vstr	d7, [r3, #32]
			/*
			 * Trajectory Update
			 */
			for (int i = 0; i <5; i++){
 80087c0:	2300      	movs	r3, #0
 80087c2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80087c6:	e044      	b.n	8008852 <main+0xaa2>
				QuinticTrajectory_update(&(quintic_trajectory[i]));
 80087c8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80087cc:	4613      	mov	r3, r2
 80087ce:	005b      	lsls	r3, r3, #1
 80087d0:	4413      	add	r3, r2
 80087d2:	015b      	lsls	r3, r3, #5
 80087d4:	4a72      	ldr	r2, [pc, #456]	; (80089a0 <main+0xbf0>)
 80087d6:	4413      	add	r3, r2
 80087d8:	4618      	mov	r0, r3
 80087da:	f7fe ff97 	bl	800770c <QuinticTrajectory_update>
				desired_position[i] = quintic_trajectory[i].pos_out;
 80087de:	4970      	ldr	r1, [pc, #448]	; (80089a0 <main+0xbf0>)
 80087e0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80087e4:	4613      	mov	r3, r2
 80087e6:	005b      	lsls	r3, r3, #1
 80087e8:	4413      	add	r3, r2
 80087ea:	015b      	lsls	r3, r3, #5
 80087ec:	440b      	add	r3, r1
 80087ee:	3350      	adds	r3, #80	; 0x50
 80087f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f4:	486d      	ldr	r0, [pc, #436]	; (80089ac <main+0xbfc>)
 80087f6:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 80087fa:	00c9      	lsls	r1, r1, #3
 80087fc:	4401      	add	r1, r0
 80087fe:	e9c1 2300 	strd	r2, r3, [r1]
				desired_velocity[i] = quintic_trajectory[i].vel_out;
 8008802:	4967      	ldr	r1, [pc, #412]	; (80089a0 <main+0xbf0>)
 8008804:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8008808:	4613      	mov	r3, r2
 800880a:	005b      	lsls	r3, r3, #1
 800880c:	4413      	add	r3, r2
 800880e:	015b      	lsls	r3, r3, #5
 8008810:	440b      	add	r3, r1
 8008812:	3358      	adds	r3, #88	; 0x58
 8008814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008818:	4865      	ldr	r0, [pc, #404]	; (80089b0 <main+0xc00>)
 800881a:	f8d7 1178 	ldr.w	r1, [r7, #376]	; 0x178
 800881e:	00c9      	lsls	r1, r1, #3
 8008820:	4401      	add	r1, r0
 8008822:	e9c1 2300 	strd	r2, r3, [r1]
				KalmanFilter_Update(&(kalman_filter[i]), motor_config[i]);
 8008826:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800882a:	019b      	lsls	r3, r3, #6
 800882c:	4a61      	ldr	r2, [pc, #388]	; (80089b4 <main+0xc04>)
 800882e:	441a      	add	r2, r3
 8008830:	495d      	ldr	r1, [pc, #372]	; (80089a8 <main+0xbf8>)
 8008832:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8008836:	00db      	lsls	r3, r3, #3
 8008838:	440b      	add	r3, r1
 800883a:	ed93 7b00 	vldr	d7, [r3]
 800883e:	eeb0 0b47 	vmov.f64	d0, d7
 8008842:	4610      	mov	r0, r2
 8008844:	f7f8 fe64 	bl	8001510 <KalmanFilter_Update>
			for (int i = 0; i <5; i++){
 8008848:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800884c:	3301      	adds	r3, #1
 800884e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8008852:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8008856:	2b04      	cmp	r3, #4
 8008858:	ddb6      	ble.n	80087c8 <main+0xa18>
			}
			/*
			 * Joint Limit
			 */
			for (int i = 0; i < 5; i++) {
 800885a:	2300      	movs	r3, #0
 800885c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8008860:	e046      	b.n	80088f0 <main+0xb40>
				if (desired_position[i] >= max_desired_position[i]) {
 8008862:	4a52      	ldr	r2, [pc, #328]	; (80089ac <main+0xbfc>)
 8008864:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8008868:	00db      	lsls	r3, r3, #3
 800886a:	4413      	add	r3, r2
 800886c:	ed93 6b00 	vldr	d6, [r3]
 8008870:	4a51      	ldr	r2, [pc, #324]	; (80089b8 <main+0xc08>)
 8008872:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8008876:	00db      	lsls	r3, r3, #3
 8008878:	4413      	add	r3, r2
 800887a:	ed93 7b00 	vldr	d7, [r3]
 800887e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008886:	db0d      	blt.n	80088a4 <main+0xaf4>
					desired_position[i] = max_desired_position[i];
 8008888:	4a4b      	ldr	r2, [pc, #300]	; (80089b8 <main+0xc08>)
 800888a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800888e:	00db      	lsls	r3, r3, #3
 8008890:	4413      	add	r3, r2
 8008892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008896:	4845      	ldr	r0, [pc, #276]	; (80089ac <main+0xbfc>)
 8008898:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800889c:	00c9      	lsls	r1, r1, #3
 800889e:	4401      	add	r1, r0
 80088a0:	e9c1 2300 	strd	r2, r3, [r1]
				}
				if (desired_position[i] <= min_desired_position[i]) {
 80088a4:	4a41      	ldr	r2, [pc, #260]	; (80089ac <main+0xbfc>)
 80088a6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80088aa:	00db      	lsls	r3, r3, #3
 80088ac:	4413      	add	r3, r2
 80088ae:	ed93 6b00 	vldr	d6, [r3]
 80088b2:	4a42      	ldr	r2, [pc, #264]	; (80089bc <main+0xc0c>)
 80088b4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80088b8:	00db      	lsls	r3, r3, #3
 80088ba:	4413      	add	r3, r2
 80088bc:	ed93 7b00 	vldr	d7, [r3]
 80088c0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80088c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088c8:	d80d      	bhi.n	80088e6 <main+0xb36>
					desired_position[i] = min_desired_position[i];
 80088ca:	4a3c      	ldr	r2, [pc, #240]	; (80089bc <main+0xc0c>)
 80088cc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80088d0:	00db      	lsls	r3, r3, #3
 80088d2:	4413      	add	r3, r2
 80088d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d8:	4834      	ldr	r0, [pc, #208]	; (80089ac <main+0xbfc>)
 80088da:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80088de:	00c9      	lsls	r1, r1, #3
 80088e0:	4401      	add	r1, r0
 80088e2:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i = 0; i < 5; i++) {
 80088e6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80088ea:	3301      	adds	r3, #1
 80088ec:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80088f0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80088f4:	2b04      	cmp	r3, #4
 80088f6:	ddb4      	ble.n	8008862 <main+0xab2>
				}
			}
			/*
			 * Cascade Controller
			 */
			for (int i = 0; i < 5; i++) {
 80088f8:	2300      	movs	r3, #0
 80088fa:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80088fe:	e034      	b.n	800896a <main+0xbba>
				cascade_out[i] = Cascade_PIDController_update(&(position_pid_controller[i]),
 8008900:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8008904:	2268      	movs	r2, #104	; 0x68
 8008906:	fb02 f303 	mul.w	r3, r2, r3
 800890a:	4a2d      	ldr	r2, [pc, #180]	; (80089c0 <main+0xc10>)
 800890c:	1898      	adds	r0, r3, r2
 800890e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8008912:	2268      	movs	r2, #104	; 0x68
 8008914:	fb02 f303 	mul.w	r3, r2, r3
 8008918:	4a2a      	ldr	r2, [pc, #168]	; (80089c4 <main+0xc14>)
 800891a:	1899      	adds	r1, r3, r2
 800891c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8008920:	019b      	lsls	r3, r3, #6
 8008922:	4a24      	ldr	r2, [pc, #144]	; (80089b4 <main+0xc04>)
 8008924:	441a      	add	r2, r3
 8008926:	4c21      	ldr	r4, [pc, #132]	; (80089ac <main+0xbfc>)
 8008928:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800892c:	00db      	lsls	r3, r3, #3
 800892e:	4423      	add	r3, r4
 8008930:	ed93 7b00 	vldr	d7, [r3]
 8008934:	4c1e      	ldr	r4, [pc, #120]	; (80089b0 <main+0xc00>)
 8008936:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800893a:	00db      	lsls	r3, r3, #3
 800893c:	4423      	add	r3, r4
 800893e:	ed93 6b00 	vldr	d6, [r3]
 8008942:	eeb0 1b46 	vmov.f64	d1, d6
 8008946:	eeb0 0b47 	vmov.f64	d0, d7
 800894a:	f7fe fa00 	bl	8006d4e <Cascade_PIDController_update>
 800894e:	eeb0 7b40 	vmov.f64	d7, d0
 8008952:	4a1d      	ldr	r2, [pc, #116]	; (80089c8 <main+0xc18>)
 8008954:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8008958:	00db      	lsls	r3, r3, #3
 800895a:	4413      	add	r3, r2
 800895c:	ed83 7b00 	vstr	d7, [r3]
			for (int i = 0; i < 5; i++) {
 8008960:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8008964:	3301      	adds	r3, #1
 8008966:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800896a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800896e:	2b04      	cmp	r3, #4
 8008970:	ddc6      	ble.n	8008900 <main+0xb50>
						&(velocity_pid_controller[i]),
						&(kalman_filter[i]), desired_position[i],
						desired_velocity[i]);
			}
			for (int i = 0; i < 5; i++) {
 8008972:	2300      	movs	r3, #0
 8008974:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8008978:	e03e      	b.n	80089f8 <main+0xc48>
 800897a:	bf00      	nop
 800897c:	f3af 8000 	nop.w
 8008980:	54442d18 	.word	0x54442d18
 8008984:	401921fb 	.word	0x401921fb
 8008988:	00000000 	.word	0x00000000
 800898c:	40d00000 	.word	0x40d00000
 8008990:	8e38e38e 	.word	0x8e38e38e
 8008994:	400638e3 	.word	0x400638e3
 8008998:	00000000 	.word	0x00000000
 800899c:	40368000 	.word	0x40368000
 80089a0:	24000558 	.word	0x24000558
 80089a4:	24000290 	.word	0x24000290
 80089a8:	240002f8 	.word	0x240002f8
 80089ac:	24000258 	.word	0x24000258
 80089b0:	240002d0 	.word	0x240002d0
 80089b4:	24000a50 	.word	0x24000a50
 80089b8:	24000028 	.word	0x24000028
 80089bc:	24000000 	.word	0x24000000
 80089c0:	24000b90 	.word	0x24000b90
 80089c4:	24000848 	.word	0x24000848
 80089c8:	240002a8 	.word	0x240002a8
				stepper_set_speed(&steppers[i], cascade_out[i]);
 80089cc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80089d0:	015b      	lsls	r3, r3, #5
 80089d2:	4a0c      	ldr	r2, [pc, #48]	; (8008a04 <main+0xc54>)
 80089d4:	441a      	add	r2, r3
 80089d6:	490c      	ldr	r1, [pc, #48]	; (8008a08 <main+0xc58>)
 80089d8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80089dc:	00db      	lsls	r3, r3, #3
 80089de:	440b      	add	r3, r1
 80089e0:	ed93 7b00 	vldr	d7, [r3]
 80089e4:	eeb0 0b47 	vmov.f64	d0, d7
 80089e8:	4610      	mov	r0, r2
 80089ea:	f7fe f841 	bl	8006a70 <stepper_set_speed>
			for (int i = 0; i < 5; i++) {
 80089ee:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80089f2:	3301      	adds	r3, #1
 80089f4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80089f8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80089fc:	2b04      	cmp	r3, #4
 80089fe:	dde5      	ble.n	80089cc <main+0xc1c>
		if ((delta_khe[0] != 0)||
 8008a00:	f7ff bbf5 	b.w	80081ee <main+0x43e>
 8008a04:	24000738 	.word	0x24000738
 8008a08:	240002a8 	.word	0x240002a8

08008a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b09c      	sub	sp, #112	; 0x70
 8008a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a16:	224c      	movs	r2, #76	; 0x4c
 8008a18:	2100      	movs	r1, #0
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f00b fe34 	bl	8014688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008a20:	1d3b      	adds	r3, r7, #4
 8008a22:	2220      	movs	r2, #32
 8008a24:	2100      	movs	r1, #0
 8008a26:	4618      	mov	r0, r3
 8008a28:	f00b fe2e 	bl	8014688 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8008a2c:	2002      	movs	r0, #2
 8008a2e:	f004 fbd3 	bl	800d1d8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8008a32:	2300      	movs	r3, #0
 8008a34:	603b      	str	r3, [r7, #0]
 8008a36:	4b30      	ldr	r3, [pc, #192]	; (8008af8 <SystemClock_Config+0xec>)
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	4a2f      	ldr	r2, [pc, #188]	; (8008af8 <SystemClock_Config+0xec>)
 8008a3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008a40:	6193      	str	r3, [r2, #24]
 8008a42:	4b2d      	ldr	r3, [pc, #180]	; (8008af8 <SystemClock_Config+0xec>)
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008a4a:	603b      	str	r3, [r7, #0]
 8008a4c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8008a4e:	bf00      	nop
 8008a50:	4b29      	ldr	r3, [pc, #164]	; (8008af8 <SystemClock_Config+0xec>)
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a5c:	d1f8      	bne.n	8008a50 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8008a5e:	4b27      	ldr	r3, [pc, #156]	; (8008afc <SystemClock_Config+0xf0>)
 8008a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a62:	f023 0303 	bic.w	r3, r3, #3
 8008a66:	4a25      	ldr	r2, [pc, #148]	; (8008afc <SystemClock_Config+0xf0>)
 8008a68:	f043 0302 	orr.w	r3, r3, #2
 8008a6c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008a72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a76:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008a78:	2302      	movs	r3, #2
 8008a7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8008a80:	2302      	movs	r3, #2
 8008a82:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8008a84:	232c      	movs	r3, #44	; 0x2c
 8008a86:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8008a88:	2301      	movs	r3, #1
 8008a8a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8008a90:	2302      	movs	r3, #2
 8008a92:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8008a94:	230c      	movs	r3, #12
 8008a96:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f004 fbd1 	bl	800d24c <HAL_RCC_OscConfig>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8008ab0:	f000 f853 	bl	8008b5a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008ab4:	233f      	movs	r3, #63	; 0x3f
 8008ab6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8008abc:	2300      	movs	r3, #0
 8008abe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8008ac0:	2308      	movs	r3, #8
 8008ac2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8008ac4:	2340      	movs	r3, #64	; 0x40
 8008ac6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8008ac8:	2340      	movs	r3, #64	; 0x40
 8008aca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8008acc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ad0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8008ad2:	2340      	movs	r3, #64	; 0x40
 8008ad4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8008ad6:	1d3b      	adds	r3, r7, #4
 8008ad8:	2103      	movs	r1, #3
 8008ada:	4618      	mov	r0, r3
 8008adc:	f004 ff62 	bl	800d9a4 <HAL_RCC_ClockConfig>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d001      	beq.n	8008aea <SystemClock_Config+0xde>
  {
    Error_Handler();
 8008ae6:	f000 f838 	bl	8008b5a <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8008aea:	f005 f911 	bl	800dd10 <HAL_RCC_EnableCSS>
}
 8008aee:	bf00      	nop
 8008af0:	3770      	adds	r7, #112	; 0x70
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	58024800 	.word	0x58024800
 8008afc:	58024400 	.word	0x58024400

08008b00 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b0ae      	sub	sp, #184	; 0xb8
 8008b04:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008b06:	1d3b      	adds	r3, r7, #4
 8008b08:	22b4      	movs	r2, #180	; 0xb4
 8008b0a:	2100      	movs	r1, #0
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f00b fdbb 	bl	8014688 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8008b12:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008b16:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8008b18:	2302      	movs	r3, #2
 8008b1a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 8008b1c:	230f      	movs	r3, #15
 8008b1e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8008b20:	2302      	movs	r3, #2
 8008b22:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8008b24:	2302      	movs	r3, #2
 8008b26:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8008b28:	2302      	movs	r3, #2
 8008b2a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8008b2c:	23c0      	movs	r3, #192	; 0xc0
 8008b2e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8008b30:	2300      	movs	r3, #0
 8008b32:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 8008b34:	f640 3386 	movw	r3, #2950	; 0xb86
 8008b38:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008b40:	1d3b      	adds	r3, r7, #4
 8008b42:	4618      	mov	r0, r3
 8008b44:	f005 fae6 	bl	800e114 <HAL_RCCEx_PeriphCLKConfig>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d001      	beq.n	8008b52 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8008b4e:	f000 f804 	bl	8008b5a <Error_Handler>
  }
}
 8008b52:	bf00      	nop
 8008b54:	37b8      	adds	r7, #184	; 0xb8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008b5e:	b672      	cpsid	i
}
 8008b60:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8008b62:	e7fe      	b.n	8008b62 <Error_Handler+0x8>

08008b64 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8008b68:	4b27      	ldr	r3, [pc, #156]	; (8008c08 <MX_SPI3_Init+0xa4>)
 8008b6a:	4a28      	ldr	r2, [pc, #160]	; (8008c0c <MX_SPI3_Init+0xa8>)
 8008b6c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008b6e:	4b26      	ldr	r3, [pc, #152]	; (8008c08 <MX_SPI3_Init+0xa4>)
 8008b70:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8008b74:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008b76:	4b24      	ldr	r3, [pc, #144]	; (8008c08 <MX_SPI3_Init+0xa4>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8008b7c:	4b22      	ldr	r3, [pc, #136]	; (8008c08 <MX_SPI3_Init+0xa4>)
 8008b7e:	2203      	movs	r2, #3
 8008b80:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b82:	4b21      	ldr	r3, [pc, #132]	; (8008c08 <MX_SPI3_Init+0xa4>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008b88:	4b1f      	ldr	r3, [pc, #124]	; (8008c08 <MX_SPI3_Init+0xa4>)
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008b8e:	4b1e      	ldr	r3, [pc, #120]	; (8008c08 <MX_SPI3_Init+0xa4>)
 8008b90:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008b94:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b96:	4b1c      	ldr	r3, [pc, #112]	; (8008c08 <MX_SPI3_Init+0xa4>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008b9c:	4b1a      	ldr	r3, [pc, #104]	; (8008c08 <MX_SPI3_Init+0xa4>)
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008ba2:	4b19      	ldr	r3, [pc, #100]	; (8008c08 <MX_SPI3_Init+0xa4>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008ba8:	4b17      	ldr	r3, [pc, #92]	; (8008c08 <MX_SPI3_Init+0xa4>)
 8008baa:	2200      	movs	r2, #0
 8008bac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8008bae:	4b16      	ldr	r3, [pc, #88]	; (8008c08 <MX_SPI3_Init+0xa4>)
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008bb4:	4b14      	ldr	r3, [pc, #80]	; (8008c08 <MX_SPI3_Init+0xa4>)
 8008bb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008bba:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8008bbc:	4b12      	ldr	r3, [pc, #72]	; (8008c08 <MX_SPI3_Init+0xa4>)
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8008bc2:	4b11      	ldr	r3, [pc, #68]	; (8008c08 <MX_SPI3_Init+0xa4>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8008bc8:	4b0f      	ldr	r3, [pc, #60]	; (8008c08 <MX_SPI3_Init+0xa4>)
 8008bca:	2200      	movs	r2, #0
 8008bcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8008bce:	4b0e      	ldr	r3, [pc, #56]	; (8008c08 <MX_SPI3_Init+0xa4>)
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8008bd4:	4b0c      	ldr	r3, [pc, #48]	; (8008c08 <MX_SPI3_Init+0xa4>)
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8008bda:	4b0b      	ldr	r3, [pc, #44]	; (8008c08 <MX_SPI3_Init+0xa4>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8008be0:	4b09      	ldr	r3, [pc, #36]	; (8008c08 <MX_SPI3_Init+0xa4>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8008be6:	4b08      	ldr	r3, [pc, #32]	; (8008c08 <MX_SPI3_Init+0xa4>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8008bec:	4b06      	ldr	r3, [pc, #24]	; (8008c08 <MX_SPI3_Init+0xa4>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008bf2:	4805      	ldr	r0, [pc, #20]	; (8008c08 <MX_SPI3_Init+0xa4>)
 8008bf4:	f007 fb20 	bl	8010238 <HAL_SPI_Init>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d001      	beq.n	8008c02 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8008bfe:	f7ff ffac 	bl	8008b5a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8008c02:	bf00      	nop
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	24000d98 	.word	0x24000d98
 8008c0c:	40003c00 	.word	0x40003c00

08008c10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b0b6      	sub	sp, #216	; 0xd8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c18:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	601a      	str	r2, [r3, #0]
 8008c20:	605a      	str	r2, [r3, #4]
 8008c22:	609a      	str	r2, [r3, #8]
 8008c24:	60da      	str	r2, [r3, #12]
 8008c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008c28:	f107 0310 	add.w	r3, r7, #16
 8008c2c:	22b4      	movs	r2, #180	; 0xb4
 8008c2e:	2100      	movs	r1, #0
 8008c30:	4618      	mov	r0, r3
 8008c32:	f00b fd29 	bl	8014688 <memset>
  if(spiHandle->Instance==SPI3)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a25      	ldr	r2, [pc, #148]	; (8008cd0 <HAL_SPI_MspInit+0xc0>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d142      	bne.n	8008cc6 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8008c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c44:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8008c46:	2300      	movs	r3, #0
 8008c48:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008c4a:	f107 0310 	add.w	r3, r7, #16
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f005 fa60 	bl	800e114 <HAL_RCCEx_PeriphCLKConfig>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8008c5a:	f7ff ff7e 	bl	8008b5a <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008c5e:	4b1d      	ldr	r3, [pc, #116]	; (8008cd4 <HAL_SPI_MspInit+0xc4>)
 8008c60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008c64:	4a1b      	ldr	r2, [pc, #108]	; (8008cd4 <HAL_SPI_MspInit+0xc4>)
 8008c66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008c6e:	4b19      	ldr	r3, [pc, #100]	; (8008cd4 <HAL_SPI_MspInit+0xc4>)
 8008c70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c78:	60fb      	str	r3, [r7, #12]
 8008c7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008c7c:	4b15      	ldr	r3, [pc, #84]	; (8008cd4 <HAL_SPI_MspInit+0xc4>)
 8008c7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c82:	4a14      	ldr	r2, [pc, #80]	; (8008cd4 <HAL_SPI_MspInit+0xc4>)
 8008c84:	f043 0304 	orr.w	r3, r3, #4
 8008c88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008c8c:	4b11      	ldr	r3, [pc, #68]	; (8008cd4 <HAL_SPI_MspInit+0xc4>)
 8008c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c92:	f003 0304 	and.w	r3, r3, #4
 8008c96:	60bb      	str	r3, [r7, #8]
 8008c98:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8008c9a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008c9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ca2:	2302      	movs	r3, #2
 8008ca4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008cb4:	2306      	movs	r3, #6
 8008cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008cba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	4805      	ldr	r0, [pc, #20]	; (8008cd8 <HAL_SPI_MspInit+0xc8>)
 8008cc2:	f004 f8c7 	bl	800ce54 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8008cc6:	bf00      	nop
 8008cc8:	37d8      	adds	r7, #216	; 0xd8
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	40003c00 	.word	0x40003c00
 8008cd4:	58024400 	.word	0x58024400
 8008cd8:	58020800 	.word	0x58020800

08008cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b083      	sub	sp, #12
 8008ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ce2:	4b0a      	ldr	r3, [pc, #40]	; (8008d0c <HAL_MspInit+0x30>)
 8008ce4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008ce8:	4a08      	ldr	r2, [pc, #32]	; (8008d0c <HAL_MspInit+0x30>)
 8008cea:	f043 0302 	orr.w	r3, r3, #2
 8008cee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008cf2:	4b06      	ldr	r3, [pc, #24]	; (8008d0c <HAL_MspInit+0x30>)
 8008cf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008cf8:	f003 0302 	and.w	r3, r3, #2
 8008cfc:	607b      	str	r3, [r7, #4]
 8008cfe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008d00:	bf00      	nop
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	58024400 	.word	0x58024400

08008d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8008d14:	f005 f9e2 	bl	800e0dc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008d18:	e7fe      	b.n	8008d18 <NMI_Handler+0x8>

08008d1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008d1e:	e7fe      	b.n	8008d1e <HardFault_Handler+0x4>

08008d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008d20:	b480      	push	{r7}
 8008d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008d24:	e7fe      	b.n	8008d24 <MemManage_Handler+0x4>

08008d26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008d26:	b480      	push	{r7}
 8008d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008d2a:	e7fe      	b.n	8008d2a <BusFault_Handler+0x4>

08008d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008d30:	e7fe      	b.n	8008d30 <UsageFault_Handler+0x4>

08008d32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008d32:	b480      	push	{r7}
 8008d34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008d36:	bf00      	nop
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008d40:	b480      	push	{r7}
 8008d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008d44:	bf00      	nop
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr

08008d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008d4e:	b480      	push	{r7}
 8008d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008d52:	bf00      	nop
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008d60:	f001 fc7a 	bl	800a658 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008d64:	bf00      	nop
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008d6c:	4802      	ldr	r0, [pc, #8]	; (8008d78 <USART3_IRQHandler+0x10>)
 8008d6e:	f008 ff99 	bl	8011ca4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8008d72:	bf00      	nop
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	240011b0 	.word	0x240011b0

08008d7c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
	__HAL_UART_FLUSH_DRREGISTER(huart);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	699a      	ldr	r2, [r3, #24]
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f042 0208 	orr.w	r2, r2, #8
 8008d92:	619a      	str	r2, [r3, #24]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	699a      	ldr	r2, [r3, #24]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f042 0210 	orr.w	r2, r2, #16
 8008da2:	619a      	str	r2, [r3, #24]
	ARMsProtocol_FUNC_Rx_Callback(huart);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f7f7 fe8b 	bl	8000ac0 <ARMsProtocol_FUNC_Rx_Callback>
}
 8008daa:	bf00      	nop
 8008dac:	3708      	adds	r7, #8
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
	...

08008db4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
	//__HAL_UART_FLUSH_DRREGISTER(huart);
	ARMsProtocol_Data.Tx_flag = 0;
 8008dbc:	4b04      	ldr	r3, [pc, #16]	; (8008dd0 <HAL_UART_TxCpltCallback+0x1c>)
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
}
 8008dc4:	bf00      	nop
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	24000360 	.word	0x24000360

08008dd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	af00      	add	r7, sp, #0
	return 1;
 8008dd8:	2301      	movs	r3, #1
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <_kill>:

int _kill(int pid, int sig)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008dee:	f00b fc13 	bl	8014618 <__errno>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2216      	movs	r2, #22
 8008df6:	601a      	str	r2, [r3, #0]
	return -1;
 8008df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <_exit>:

void _exit (int status)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f7ff ffe7 	bl	8008de4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008e16:	e7fe      	b.n	8008e16 <_exit+0x12>

08008e18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b086      	sub	sp, #24
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e24:	2300      	movs	r3, #0
 8008e26:	617b      	str	r3, [r7, #20]
 8008e28:	e00a      	b.n	8008e40 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008e2a:	f3af 8000 	nop.w
 8008e2e:	4601      	mov	r1, r0
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	1c5a      	adds	r2, r3, #1
 8008e34:	60ba      	str	r2, [r7, #8]
 8008e36:	b2ca      	uxtb	r2, r1
 8008e38:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	617b      	str	r3, [r7, #20]
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	dbf0      	blt.n	8008e2a <_read+0x12>
	}

return len;
 8008e48:	687b      	ldr	r3, [r7, #4]
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3718      	adds	r7, #24
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b086      	sub	sp, #24
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	60f8      	str	r0, [r7, #12]
 8008e5a:	60b9      	str	r1, [r7, #8]
 8008e5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e5e:	2300      	movs	r3, #0
 8008e60:	617b      	str	r3, [r7, #20]
 8008e62:	e009      	b.n	8008e78 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	1c5a      	adds	r2, r3, #1
 8008e68:	60ba      	str	r2, [r7, #8]
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	3301      	adds	r3, #1
 8008e76:	617b      	str	r3, [r7, #20]
 8008e78:	697a      	ldr	r2, [r7, #20]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	dbf1      	blt.n	8008e64 <_write+0x12>
	}
	return len;
 8008e80:	687b      	ldr	r3, [r7, #4]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3718      	adds	r7, #24
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <_close>:

int _close(int file)
{
 8008e8a:	b480      	push	{r7}
 8008e8c:	b083      	sub	sp, #12
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
	return -1;
 8008e92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	370c      	adds	r7, #12
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	b083      	sub	sp, #12
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008eb2:	605a      	str	r2, [r3, #4]
	return 0;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr

08008ec2 <_isatty>:

int _isatty(int file)
{
 8008ec2:	b480      	push	{r7}
 8008ec4:	b083      	sub	sp, #12
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
	return 1;
 8008eca:	2301      	movs	r3, #1
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
	return 0;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3714      	adds	r7, #20
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
	...

08008ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008efc:	4a14      	ldr	r2, [pc, #80]	; (8008f50 <_sbrk+0x5c>)
 8008efe:	4b15      	ldr	r3, [pc, #84]	; (8008f54 <_sbrk+0x60>)
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008f08:	4b13      	ldr	r3, [pc, #76]	; (8008f58 <_sbrk+0x64>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d102      	bne.n	8008f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008f10:	4b11      	ldr	r3, [pc, #68]	; (8008f58 <_sbrk+0x64>)
 8008f12:	4a12      	ldr	r2, [pc, #72]	; (8008f5c <_sbrk+0x68>)
 8008f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008f16:	4b10      	ldr	r3, [pc, #64]	; (8008f58 <_sbrk+0x64>)
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d207      	bcs.n	8008f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008f24:	f00b fb78 	bl	8014618 <__errno>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	220c      	movs	r2, #12
 8008f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008f32:	e009      	b.n	8008f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008f34:	4b08      	ldr	r3, [pc, #32]	; (8008f58 <_sbrk+0x64>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008f3a:	4b07      	ldr	r3, [pc, #28]	; (8008f58 <_sbrk+0x64>)
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4413      	add	r3, r2
 8008f42:	4a05      	ldr	r2, [pc, #20]	; (8008f58 <_sbrk+0x64>)
 8008f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008f46:	68fb      	ldr	r3, [r7, #12]
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3718      	adds	r7, #24
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	24050000 	.word	0x24050000
 8008f54:	00000400 	.word	0x00000400
 8008f58:	24000348 	.word	0x24000348
 8008f5c:	24001408 	.word	0x24001408

08008f60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008f60:	b480      	push	{r7}
 8008f62:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008f64:	4b32      	ldr	r3, [pc, #200]	; (8009030 <SystemInit+0xd0>)
 8008f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f6a:	4a31      	ldr	r2, [pc, #196]	; (8009030 <SystemInit+0xd0>)
 8008f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008f74:	4b2f      	ldr	r3, [pc, #188]	; (8009034 <SystemInit+0xd4>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 030f 	and.w	r3, r3, #15
 8008f7c:	2b06      	cmp	r3, #6
 8008f7e:	d807      	bhi.n	8008f90 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008f80:	4b2c      	ldr	r3, [pc, #176]	; (8009034 <SystemInit+0xd4>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f023 030f 	bic.w	r3, r3, #15
 8008f88:	4a2a      	ldr	r2, [pc, #168]	; (8009034 <SystemInit+0xd4>)
 8008f8a:	f043 0307 	orr.w	r3, r3, #7
 8008f8e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008f90:	4b29      	ldr	r3, [pc, #164]	; (8009038 <SystemInit+0xd8>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a28      	ldr	r2, [pc, #160]	; (8009038 <SystemInit+0xd8>)
 8008f96:	f043 0301 	orr.w	r3, r3, #1
 8008f9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008f9c:	4b26      	ldr	r3, [pc, #152]	; (8009038 <SystemInit+0xd8>)
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008fa2:	4b25      	ldr	r3, [pc, #148]	; (8009038 <SystemInit+0xd8>)
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	4924      	ldr	r1, [pc, #144]	; (8009038 <SystemInit+0xd8>)
 8008fa8:	4b24      	ldr	r3, [pc, #144]	; (800903c <SystemInit+0xdc>)
 8008faa:	4013      	ands	r3, r2
 8008fac:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008fae:	4b21      	ldr	r3, [pc, #132]	; (8009034 <SystemInit+0xd4>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 0308 	and.w	r3, r3, #8
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d007      	beq.n	8008fca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008fba:	4b1e      	ldr	r3, [pc, #120]	; (8009034 <SystemInit+0xd4>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f023 030f 	bic.w	r3, r3, #15
 8008fc2:	4a1c      	ldr	r2, [pc, #112]	; (8009034 <SystemInit+0xd4>)
 8008fc4:	f043 0307 	orr.w	r3, r3, #7
 8008fc8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008fca:	4b1b      	ldr	r3, [pc, #108]	; (8009038 <SystemInit+0xd8>)
 8008fcc:	2200      	movs	r2, #0
 8008fce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008fd0:	4b19      	ldr	r3, [pc, #100]	; (8009038 <SystemInit+0xd8>)
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008fd6:	4b18      	ldr	r3, [pc, #96]	; (8009038 <SystemInit+0xd8>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008fdc:	4b16      	ldr	r3, [pc, #88]	; (8009038 <SystemInit+0xd8>)
 8008fde:	4a18      	ldr	r2, [pc, #96]	; (8009040 <SystemInit+0xe0>)
 8008fe0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008fe2:	4b15      	ldr	r3, [pc, #84]	; (8009038 <SystemInit+0xd8>)
 8008fe4:	4a17      	ldr	r2, [pc, #92]	; (8009044 <SystemInit+0xe4>)
 8008fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008fe8:	4b13      	ldr	r3, [pc, #76]	; (8009038 <SystemInit+0xd8>)
 8008fea:	4a17      	ldr	r2, [pc, #92]	; (8009048 <SystemInit+0xe8>)
 8008fec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008fee:	4b12      	ldr	r3, [pc, #72]	; (8009038 <SystemInit+0xd8>)
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008ff4:	4b10      	ldr	r3, [pc, #64]	; (8009038 <SystemInit+0xd8>)
 8008ff6:	4a14      	ldr	r2, [pc, #80]	; (8009048 <SystemInit+0xe8>)
 8008ff8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008ffa:	4b0f      	ldr	r3, [pc, #60]	; (8009038 <SystemInit+0xd8>)
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8009000:	4b0d      	ldr	r3, [pc, #52]	; (8009038 <SystemInit+0xd8>)
 8009002:	4a11      	ldr	r2, [pc, #68]	; (8009048 <SystemInit+0xe8>)
 8009004:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8009006:	4b0c      	ldr	r3, [pc, #48]	; (8009038 <SystemInit+0xd8>)
 8009008:	2200      	movs	r2, #0
 800900a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800900c:	4b0a      	ldr	r3, [pc, #40]	; (8009038 <SystemInit+0xd8>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a09      	ldr	r2, [pc, #36]	; (8009038 <SystemInit+0xd8>)
 8009012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009016:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8009018:	4b07      	ldr	r3, [pc, #28]	; (8009038 <SystemInit+0xd8>)
 800901a:	2200      	movs	r2, #0
 800901c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800901e:	4b0b      	ldr	r3, [pc, #44]	; (800904c <SystemInit+0xec>)
 8009020:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8009024:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8009026:	bf00      	nop
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr
 8009030:	e000ed00 	.word	0xe000ed00
 8009034:	52002000 	.word	0x52002000
 8009038:	58024400 	.word	0x58024400
 800903c:	eaf6ed7f 	.word	0xeaf6ed7f
 8009040:	02020200 	.word	0x02020200
 8009044:	01ff0000 	.word	0x01ff0000
 8009048:	01010280 	.word	0x01010280
 800904c:	52004000 	.word	0x52004000

08009050 <MX_TIM1_Init>:
TIM_HandleTypeDef htim23;
TIM_HandleTypeDef htim24;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b09c      	sub	sp, #112	; 0x70
 8009054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009056:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800905a:	2200      	movs	r2, #0
 800905c:	601a      	str	r2, [r3, #0]
 800905e:	605a      	str	r2, [r3, #4]
 8009060:	609a      	str	r2, [r3, #8]
 8009062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009064:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009068:	2200      	movs	r2, #0
 800906a:	601a      	str	r2, [r3, #0]
 800906c:	605a      	str	r2, [r3, #4]
 800906e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009070:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009074:	2200      	movs	r2, #0
 8009076:	601a      	str	r2, [r3, #0]
 8009078:	605a      	str	r2, [r3, #4]
 800907a:	609a      	str	r2, [r3, #8]
 800907c:	60da      	str	r2, [r3, #12]
 800907e:	611a      	str	r2, [r3, #16]
 8009080:	615a      	str	r2, [r3, #20]
 8009082:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009084:	1d3b      	adds	r3, r7, #4
 8009086:	2234      	movs	r2, #52	; 0x34
 8009088:	2100      	movs	r1, #0
 800908a:	4618      	mov	r0, r3
 800908c:	f00b fafc 	bl	8014688 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009090:	4b44      	ldr	r3, [pc, #272]	; (80091a4 <MX_TIM1_Init+0x154>)
 8009092:	4a45      	ldr	r2, [pc, #276]	; (80091a8 <MX_TIM1_Init+0x158>)
 8009094:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5500-1;
 8009096:	4b43      	ldr	r3, [pc, #268]	; (80091a4 <MX_TIM1_Init+0x154>)
 8009098:	f241 527b 	movw	r2, #5499	; 0x157b
 800909c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800909e:	4b41      	ldr	r3, [pc, #260]	; (80091a4 <MX_TIM1_Init+0x154>)
 80090a0:	2200      	movs	r2, #0
 80090a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80090a4:	4b3f      	ldr	r3, [pc, #252]	; (80091a4 <MX_TIM1_Init+0x154>)
 80090a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80090aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80090ac:	4b3d      	ldr	r3, [pc, #244]	; (80091a4 <MX_TIM1_Init+0x154>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80090b2:	4b3c      	ldr	r3, [pc, #240]	; (80091a4 <MX_TIM1_Init+0x154>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80090b8:	4b3a      	ldr	r3, [pc, #232]	; (80091a4 <MX_TIM1_Init+0x154>)
 80090ba:	2280      	movs	r2, #128	; 0x80
 80090bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80090be:	4839      	ldr	r0, [pc, #228]	; (80091a4 <MX_TIM1_Init+0x154>)
 80090c0:	f007 f9db 	bl	801047a <HAL_TIM_Base_Init>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80090ca:	f7ff fd46 	bl	8008b5a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80090ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090d2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80090d4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80090d8:	4619      	mov	r1, r3
 80090da:	4832      	ldr	r0, [pc, #200]	; (80091a4 <MX_TIM1_Init+0x154>)
 80090dc:	f007 fcb6 	bl	8010a4c <HAL_TIM_ConfigClockSource>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80090e6:	f7ff fd38 	bl	8008b5a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80090ea:	482e      	ldr	r0, [pc, #184]	; (80091a4 <MX_TIM1_Init+0x154>)
 80090ec:	f007 fa1c 	bl	8010528 <HAL_TIM_PWM_Init>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d001      	beq.n	80090fa <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80090f6:	f7ff fd30 	bl	8008b5a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80090fa:	2300      	movs	r3, #0
 80090fc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80090fe:	2300      	movs	r3, #0
 8009100:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009102:	2300      	movs	r3, #0
 8009104:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009106:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800910a:	4619      	mov	r1, r3
 800910c:	4825      	ldr	r0, [pc, #148]	; (80091a4 <MX_TIM1_Init+0x154>)
 800910e:	f008 f9d5 	bl	80114bc <HAL_TIMEx_MasterConfigSynchronization>
 8009112:	4603      	mov	r3, r0
 8009114:	2b00      	cmp	r3, #0
 8009116:	d001      	beq.n	800911c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8009118:	f7ff fd1f 	bl	8008b5a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800911c:	2360      	movs	r3, #96	; 0x60
 800911e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8009120:	2300      	movs	r3, #0
 8009122:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009124:	2300      	movs	r3, #0
 8009126:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009128:	2300      	movs	r3, #0
 800912a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800912c:	2300      	movs	r3, #0
 800912e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009130:	2300      	movs	r3, #0
 8009132:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009134:	2300      	movs	r3, #0
 8009136:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009138:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800913c:	2200      	movs	r2, #0
 800913e:	4619      	mov	r1, r3
 8009140:	4818      	ldr	r0, [pc, #96]	; (80091a4 <MX_TIM1_Init+0x154>)
 8009142:	f007 fb6f 	bl	8010824 <HAL_TIM_PWM_ConfigChannel>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d001      	beq.n	8009150 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 800914c:	f7ff fd05 	bl	8008b5a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009150:	2300      	movs	r3, #0
 8009152:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009154:	2300      	movs	r3, #0
 8009156:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009158:	2300      	movs	r3, #0
 800915a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800915c:	2300      	movs	r3, #0
 800915e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009160:	2300      	movs	r3, #0
 8009162:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009164:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009168:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800916a:	2300      	movs	r3, #0
 800916c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800916e:	2300      	movs	r3, #0
 8009170:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009172:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009176:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009178:	2300      	movs	r3, #0
 800917a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800917c:	2300      	movs	r3, #0
 800917e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009180:	1d3b      	adds	r3, r7, #4
 8009182:	4619      	mov	r1, r3
 8009184:	4807      	ldr	r0, [pc, #28]	; (80091a4 <MX_TIM1_Init+0x154>)
 8009186:	f008 fa35 	bl	80115f4 <HAL_TIMEx_ConfigBreakDeadTime>
 800918a:	4603      	mov	r3, r0
 800918c:	2b00      	cmp	r3, #0
 800918e:	d001      	beq.n	8009194 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8009190:	f7ff fce3 	bl	8008b5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8009194:	4803      	ldr	r0, [pc, #12]	; (80091a4 <MX_TIM1_Init+0x154>)
 8009196:	f000 fdc3 	bl	8009d20 <HAL_TIM_MspPostInit>

}
 800919a:	bf00      	nop
 800919c:	3770      	adds	r7, #112	; 0x70
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	24000fe8 	.word	0x24000fe8
 80091a8:	40010000 	.word	0x40010000

080091ac <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b08e      	sub	sp, #56	; 0x38
 80091b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80091b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80091b6:	2200      	movs	r2, #0
 80091b8:	601a      	str	r2, [r3, #0]
 80091ba:	605a      	str	r2, [r3, #4]
 80091bc:	609a      	str	r2, [r3, #8]
 80091be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80091c0:	f107 031c 	add.w	r3, r7, #28
 80091c4:	2200      	movs	r2, #0
 80091c6:	601a      	str	r2, [r3, #0]
 80091c8:	605a      	str	r2, [r3, #4]
 80091ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80091cc:	463b      	mov	r3, r7
 80091ce:	2200      	movs	r2, #0
 80091d0:	601a      	str	r2, [r3, #0]
 80091d2:	605a      	str	r2, [r3, #4]
 80091d4:	609a      	str	r2, [r3, #8]
 80091d6:	60da      	str	r2, [r3, #12]
 80091d8:	611a      	str	r2, [r3, #16]
 80091da:	615a      	str	r2, [r3, #20]
 80091dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80091de:	4b2e      	ldr	r3, [pc, #184]	; (8009298 <MX_TIM2_Init+0xec>)
 80091e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80091e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5500- 1;
 80091e6:	4b2c      	ldr	r3, [pc, #176]	; (8009298 <MX_TIM2_Init+0xec>)
 80091e8:	f241 527b 	movw	r2, #5499	; 0x157b
 80091ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80091ee:	4b2a      	ldr	r3, [pc, #168]	; (8009298 <MX_TIM2_Init+0xec>)
 80091f0:	2200      	movs	r2, #0
 80091f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80091f4:	4b28      	ldr	r3, [pc, #160]	; (8009298 <MX_TIM2_Init+0xec>)
 80091f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80091fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80091fc:	4b26      	ldr	r3, [pc, #152]	; (8009298 <MX_TIM2_Init+0xec>)
 80091fe:	2200      	movs	r2, #0
 8009200:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009202:	4b25      	ldr	r3, [pc, #148]	; (8009298 <MX_TIM2_Init+0xec>)
 8009204:	2280      	movs	r2, #128	; 0x80
 8009206:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009208:	4823      	ldr	r0, [pc, #140]	; (8009298 <MX_TIM2_Init+0xec>)
 800920a:	f007 f936 	bl	801047a <HAL_TIM_Base_Init>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d001      	beq.n	8009218 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8009214:	f7ff fca1 	bl	8008b5a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800921c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800921e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009222:	4619      	mov	r1, r3
 8009224:	481c      	ldr	r0, [pc, #112]	; (8009298 <MX_TIM2_Init+0xec>)
 8009226:	f007 fc11 	bl	8010a4c <HAL_TIM_ConfigClockSource>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8009230:	f7ff fc93 	bl	8008b5a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009234:	4818      	ldr	r0, [pc, #96]	; (8009298 <MX_TIM2_Init+0xec>)
 8009236:	f007 f977 	bl	8010528 <HAL_TIM_PWM_Init>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d001      	beq.n	8009244 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8009240:	f7ff fc8b 	bl	8008b5a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009244:	2300      	movs	r3, #0
 8009246:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009248:	2300      	movs	r3, #0
 800924a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800924c:	f107 031c 	add.w	r3, r7, #28
 8009250:	4619      	mov	r1, r3
 8009252:	4811      	ldr	r0, [pc, #68]	; (8009298 <MX_TIM2_Init+0xec>)
 8009254:	f008 f932 	bl	80114bc <HAL_TIMEx_MasterConfigSynchronization>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800925e:	f7ff fc7c 	bl	8008b5a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009262:	2360      	movs	r3, #96	; 0x60
 8009264:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009266:	2300      	movs	r3, #0
 8009268:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800926a:	2300      	movs	r3, #0
 800926c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800926e:	2300      	movs	r3, #0
 8009270:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009272:	463b      	mov	r3, r7
 8009274:	2200      	movs	r2, #0
 8009276:	4619      	mov	r1, r3
 8009278:	4807      	ldr	r0, [pc, #28]	; (8009298 <MX_TIM2_Init+0xec>)
 800927a:	f007 fad3 	bl	8010824 <HAL_TIM_PWM_ConfigChannel>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d001      	beq.n	8009288 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8009284:	f7ff fc69 	bl	8008b5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8009288:	4803      	ldr	r0, [pc, #12]	; (8009298 <MX_TIM2_Init+0xec>)
 800928a:	f000 fd49 	bl	8009d20 <HAL_TIM_MspPostInit>

}
 800928e:	bf00      	nop
 8009290:	3738      	adds	r7, #56	; 0x38
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	24001034 	.word	0x24001034

0800929c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b08e      	sub	sp, #56	; 0x38
 80092a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80092a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80092a6:	2200      	movs	r2, #0
 80092a8:	601a      	str	r2, [r3, #0]
 80092aa:	605a      	str	r2, [r3, #4]
 80092ac:	609a      	str	r2, [r3, #8]
 80092ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80092b0:	f107 031c 	add.w	r3, r7, #28
 80092b4:	2200      	movs	r2, #0
 80092b6:	601a      	str	r2, [r3, #0]
 80092b8:	605a      	str	r2, [r3, #4]
 80092ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80092bc:	463b      	mov	r3, r7
 80092be:	2200      	movs	r2, #0
 80092c0:	601a      	str	r2, [r3, #0]
 80092c2:	605a      	str	r2, [r3, #4]
 80092c4:	609a      	str	r2, [r3, #8]
 80092c6:	60da      	str	r2, [r3, #12]
 80092c8:	611a      	str	r2, [r3, #16]
 80092ca:	615a      	str	r2, [r3, #20]
 80092cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80092ce:	4b2d      	ldr	r3, [pc, #180]	; (8009384 <MX_TIM3_Init+0xe8>)
 80092d0:	4a2d      	ldr	r2, [pc, #180]	; (8009388 <MX_TIM3_Init+0xec>)
 80092d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5500 - 1;
 80092d4:	4b2b      	ldr	r3, [pc, #172]	; (8009384 <MX_TIM3_Init+0xe8>)
 80092d6:	f241 527b 	movw	r2, #5499	; 0x157b
 80092da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80092dc:	4b29      	ldr	r3, [pc, #164]	; (8009384 <MX_TIM3_Init+0xe8>)
 80092de:	2200      	movs	r2, #0
 80092e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80092e2:	4b28      	ldr	r3, [pc, #160]	; (8009384 <MX_TIM3_Init+0xe8>)
 80092e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80092e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80092ea:	4b26      	ldr	r3, [pc, #152]	; (8009384 <MX_TIM3_Init+0xe8>)
 80092ec:	2200      	movs	r2, #0
 80092ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80092f0:	4b24      	ldr	r3, [pc, #144]	; (8009384 <MX_TIM3_Init+0xe8>)
 80092f2:	2280      	movs	r2, #128	; 0x80
 80092f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80092f6:	4823      	ldr	r0, [pc, #140]	; (8009384 <MX_TIM3_Init+0xe8>)
 80092f8:	f007 f8bf 	bl	801047a <HAL_TIM_Base_Init>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8009302:	f7ff fc2a 	bl	8008b5a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800930a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800930c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009310:	4619      	mov	r1, r3
 8009312:	481c      	ldr	r0, [pc, #112]	; (8009384 <MX_TIM3_Init+0xe8>)
 8009314:	f007 fb9a 	bl	8010a4c <HAL_TIM_ConfigClockSource>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d001      	beq.n	8009322 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800931e:	f7ff fc1c 	bl	8008b5a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009322:	4818      	ldr	r0, [pc, #96]	; (8009384 <MX_TIM3_Init+0xe8>)
 8009324:	f007 f900 	bl	8010528 <HAL_TIM_PWM_Init>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d001      	beq.n	8009332 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800932e:	f7ff fc14 	bl	8008b5a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009332:	2300      	movs	r3, #0
 8009334:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009336:	2300      	movs	r3, #0
 8009338:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800933a:	f107 031c 	add.w	r3, r7, #28
 800933e:	4619      	mov	r1, r3
 8009340:	4810      	ldr	r0, [pc, #64]	; (8009384 <MX_TIM3_Init+0xe8>)
 8009342:	f008 f8bb 	bl	80114bc <HAL_TIMEx_MasterConfigSynchronization>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d001      	beq.n	8009350 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800934c:	f7ff fc05 	bl	8008b5a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009350:	2360      	movs	r3, #96	; 0x60
 8009352:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009354:	2300      	movs	r3, #0
 8009356:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009358:	2300      	movs	r3, #0
 800935a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800935c:	2300      	movs	r3, #0
 800935e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009360:	463b      	mov	r3, r7
 8009362:	2200      	movs	r2, #0
 8009364:	4619      	mov	r1, r3
 8009366:	4807      	ldr	r0, [pc, #28]	; (8009384 <MX_TIM3_Init+0xe8>)
 8009368:	f007 fa5c 	bl	8010824 <HAL_TIM_PWM_ConfigChannel>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d001      	beq.n	8009376 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8009372:	f7ff fbf2 	bl	8008b5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8009376:	4803      	ldr	r0, [pc, #12]	; (8009384 <MX_TIM3_Init+0xe8>)
 8009378:	f000 fcd2 	bl	8009d20 <HAL_TIM_MspPostInit>

}
 800937c:	bf00      	nop
 800937e:	3738      	adds	r7, #56	; 0x38
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	24000f50 	.word	0x24000f50
 8009388:	40000400 	.word	0x40000400

0800938c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b08e      	sub	sp, #56	; 0x38
 8009390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009392:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009396:	2200      	movs	r2, #0
 8009398:	601a      	str	r2, [r3, #0]
 800939a:	605a      	str	r2, [r3, #4]
 800939c:	609a      	str	r2, [r3, #8]
 800939e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80093a0:	f107 031c 	add.w	r3, r7, #28
 80093a4:	2200      	movs	r2, #0
 80093a6:	601a      	str	r2, [r3, #0]
 80093a8:	605a      	str	r2, [r3, #4]
 80093aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80093ac:	463b      	mov	r3, r7
 80093ae:	2200      	movs	r2, #0
 80093b0:	601a      	str	r2, [r3, #0]
 80093b2:	605a      	str	r2, [r3, #4]
 80093b4:	609a      	str	r2, [r3, #8]
 80093b6:	60da      	str	r2, [r3, #12]
 80093b8:	611a      	str	r2, [r3, #16]
 80093ba:	615a      	str	r2, [r3, #20]
 80093bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80093be:	4b2d      	ldr	r3, [pc, #180]	; (8009474 <MX_TIM4_Init+0xe8>)
 80093c0:	4a2d      	ldr	r2, [pc, #180]	; (8009478 <MX_TIM4_Init+0xec>)
 80093c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5500-1;
 80093c4:	4b2b      	ldr	r3, [pc, #172]	; (8009474 <MX_TIM4_Init+0xe8>)
 80093c6:	f241 527b 	movw	r2, #5499	; 0x157b
 80093ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80093cc:	4b29      	ldr	r3, [pc, #164]	; (8009474 <MX_TIM4_Init+0xe8>)
 80093ce:	2200      	movs	r2, #0
 80093d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 80093d2:	4b28      	ldr	r3, [pc, #160]	; (8009474 <MX_TIM4_Init+0xe8>)
 80093d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80093d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80093da:	4b26      	ldr	r3, [pc, #152]	; (8009474 <MX_TIM4_Init+0xe8>)
 80093dc:	2200      	movs	r2, #0
 80093de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80093e0:	4b24      	ldr	r3, [pc, #144]	; (8009474 <MX_TIM4_Init+0xe8>)
 80093e2:	2280      	movs	r2, #128	; 0x80
 80093e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80093e6:	4823      	ldr	r0, [pc, #140]	; (8009474 <MX_TIM4_Init+0xe8>)
 80093e8:	f007 f847 	bl	801047a <HAL_TIM_Base_Init>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 80093f2:	f7ff fbb2 	bl	8008b5a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80093f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80093fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009400:	4619      	mov	r1, r3
 8009402:	481c      	ldr	r0, [pc, #112]	; (8009474 <MX_TIM4_Init+0xe8>)
 8009404:	f007 fb22 	bl	8010a4c <HAL_TIM_ConfigClockSource>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d001      	beq.n	8009412 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 800940e:	f7ff fba4 	bl	8008b5a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8009412:	4818      	ldr	r0, [pc, #96]	; (8009474 <MX_TIM4_Init+0xe8>)
 8009414:	f007 f888 	bl	8010528 <HAL_TIM_PWM_Init>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d001      	beq.n	8009422 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800941e:	f7ff fb9c 	bl	8008b5a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009422:	2300      	movs	r3, #0
 8009424:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009426:	2300      	movs	r3, #0
 8009428:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800942a:	f107 031c 	add.w	r3, r7, #28
 800942e:	4619      	mov	r1, r3
 8009430:	4810      	ldr	r0, [pc, #64]	; (8009474 <MX_TIM4_Init+0xe8>)
 8009432:	f008 f843 	bl	80114bc <HAL_TIMEx_MasterConfigSynchronization>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d001      	beq.n	8009440 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800943c:	f7ff fb8d 	bl	8008b5a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009440:	2360      	movs	r3, #96	; 0x60
 8009442:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009444:	2300      	movs	r3, #0
 8009446:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009448:	2300      	movs	r3, #0
 800944a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800944c:	2300      	movs	r3, #0
 800944e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009450:	463b      	mov	r3, r7
 8009452:	2200      	movs	r2, #0
 8009454:	4619      	mov	r1, r3
 8009456:	4807      	ldr	r0, [pc, #28]	; (8009474 <MX_TIM4_Init+0xe8>)
 8009458:	f007 f9e4 	bl	8010824 <HAL_TIM_PWM_ConfigChannel>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d001      	beq.n	8009466 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8009462:	f7ff fb7a 	bl	8008b5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8009466:	4803      	ldr	r0, [pc, #12]	; (8009474 <MX_TIM4_Init+0xe8>)
 8009468:	f000 fc5a 	bl	8009d20 <HAL_TIM_MspPostInit>

}
 800946c:	bf00      	nop
 800946e:	3738      	adds	r7, #56	; 0x38
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	24000e6c 	.word	0x24000e6c
 8009478:	40000800 	.word	0x40000800

0800947c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b08c      	sub	sp, #48	; 0x30
 8009480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009482:	f107 0320 	add.w	r3, r7, #32
 8009486:	2200      	movs	r2, #0
 8009488:	601a      	str	r2, [r3, #0]
 800948a:	605a      	str	r2, [r3, #4]
 800948c:	609a      	str	r2, [r3, #8]
 800948e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009490:	1d3b      	adds	r3, r7, #4
 8009492:	2200      	movs	r2, #0
 8009494:	601a      	str	r2, [r3, #0]
 8009496:	605a      	str	r2, [r3, #4]
 8009498:	609a      	str	r2, [r3, #8]
 800949a:	60da      	str	r2, [r3, #12]
 800949c:	611a      	str	r2, [r3, #16]
 800949e:	615a      	str	r2, [r3, #20]
 80094a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80094a2:	4b26      	ldr	r3, [pc, #152]	; (800953c <MX_TIM12_Init+0xc0>)
 80094a4:	4a26      	ldr	r2, [pc, #152]	; (8009540 <MX_TIM12_Init+0xc4>)
 80094a6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 550 - 1;
 80094a8:	4b24      	ldr	r3, [pc, #144]	; (800953c <MX_TIM12_Init+0xc0>)
 80094aa:	f240 2225 	movw	r2, #549	; 0x225
 80094ae:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094b0:	4b22      	ldr	r3, [pc, #136]	; (800953c <MX_TIM12_Init+0xc0>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1 - 1;
 80094b6:	4b21      	ldr	r3, [pc, #132]	; (800953c <MX_TIM12_Init+0xc0>)
 80094b8:	2200      	movs	r2, #0
 80094ba:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80094bc:	4b1f      	ldr	r3, [pc, #124]	; (800953c <MX_TIM12_Init+0xc0>)
 80094be:	2200      	movs	r2, #0
 80094c0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80094c2:	4b1e      	ldr	r3, [pc, #120]	; (800953c <MX_TIM12_Init+0xc0>)
 80094c4:	2280      	movs	r2, #128	; 0x80
 80094c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80094c8:	481c      	ldr	r0, [pc, #112]	; (800953c <MX_TIM12_Init+0xc0>)
 80094ca:	f006 ffd6 	bl	801047a <HAL_TIM_Base_Init>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d001      	beq.n	80094d8 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 80094d4:	f7ff fb41 	bl	8008b5a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80094d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80094de:	f107 0320 	add.w	r3, r7, #32
 80094e2:	4619      	mov	r1, r3
 80094e4:	4815      	ldr	r0, [pc, #84]	; (800953c <MX_TIM12_Init+0xc0>)
 80094e6:	f007 fab1 	bl	8010a4c <HAL_TIM_ConfigClockSource>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d001      	beq.n	80094f4 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80094f0:	f7ff fb33 	bl	8008b5a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80094f4:	4811      	ldr	r0, [pc, #68]	; (800953c <MX_TIM12_Init+0xc0>)
 80094f6:	f007 f817 	bl	8010528 <HAL_TIM_PWM_Init>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d001      	beq.n	8009504 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8009500:	f7ff fb2b 	bl	8008b5a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009504:	2360      	movs	r3, #96	; 0x60
 8009506:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500 - 1;
 8009508:	f240 13f3 	movw	r3, #499	; 0x1f3
 800950c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800950e:	2300      	movs	r3, #0
 8009510:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009512:	2300      	movs	r3, #0
 8009514:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009516:	1d3b      	adds	r3, r7, #4
 8009518:	2200      	movs	r2, #0
 800951a:	4619      	mov	r1, r3
 800951c:	4807      	ldr	r0, [pc, #28]	; (800953c <MX_TIM12_Init+0xc0>)
 800951e:	f007 f981 	bl	8010824 <HAL_TIM_PWM_ConfigChannel>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8009528:	f7ff fb17 	bl	8008b5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800952c:	4803      	ldr	r0, [pc, #12]	; (800953c <MX_TIM12_Init+0xc0>)
 800952e:	f000 fbf7 	bl	8009d20 <HAL_TIM_MspPostInit>

}
 8009532:	bf00      	nop
 8009534:	3730      	adds	r7, #48	; 0x30
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	24001118 	.word	0x24001118
 8009540:	40001800 	.word	0x40001800

08009544 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8009548:	4b0e      	ldr	r3, [pc, #56]	; (8009584 <MX_TIM13_Init+0x40>)
 800954a:	4a0f      	ldr	r2, [pc, #60]	; (8009588 <MX_TIM13_Init+0x44>)
 800954c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550 - 1;
 800954e:	4b0d      	ldr	r3, [pc, #52]	; (8009584 <MX_TIM13_Init+0x40>)
 8009550:	f240 2225 	movw	r2, #549	; 0x225
 8009554:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009556:	4b0b      	ldr	r3, [pc, #44]	; (8009584 <MX_TIM13_Init+0x40>)
 8009558:	2200      	movs	r2, #0
 800955a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1-1;
 800955c:	4b09      	ldr	r3, [pc, #36]	; (8009584 <MX_TIM13_Init+0x40>)
 800955e:	2200      	movs	r2, #0
 8009560:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009562:	4b08      	ldr	r3, [pc, #32]	; (8009584 <MX_TIM13_Init+0x40>)
 8009564:	2200      	movs	r2, #0
 8009566:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009568:	4b06      	ldr	r3, [pc, #24]	; (8009584 <MX_TIM13_Init+0x40>)
 800956a:	2280      	movs	r2, #128	; 0x80
 800956c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800956e:	4805      	ldr	r0, [pc, #20]	; (8009584 <MX_TIM13_Init+0x40>)
 8009570:	f006 ff83 	bl	801047a <HAL_TIM_Base_Init>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d001      	beq.n	800957e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800957a:	f7ff faee 	bl	8008b5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800957e:	bf00      	nop
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	24000f9c 	.word	0x24000f9c
 8009588:	40001c00 	.word	0x40001c00

0800958c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b088      	sub	sp, #32
 8009590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8009592:	1d3b      	adds	r3, r7, #4
 8009594:	2200      	movs	r2, #0
 8009596:	601a      	str	r2, [r3, #0]
 8009598:	605a      	str	r2, [r3, #4]
 800959a:	609a      	str	r2, [r3, #8]
 800959c:	60da      	str	r2, [r3, #12]
 800959e:	611a      	str	r2, [r3, #16]
 80095a0:	615a      	str	r2, [r3, #20]
 80095a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80095a4:	4b1e      	ldr	r3, [pc, #120]	; (8009620 <MX_TIM14_Init+0x94>)
 80095a6:	4a1f      	ldr	r2, [pc, #124]	; (8009624 <MX_TIM14_Init+0x98>)
 80095a8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 80095aa:	4b1d      	ldr	r3, [pc, #116]	; (8009620 <MX_TIM14_Init+0x94>)
 80095ac:	f240 2225 	movw	r2, #549	; 0x225
 80095b0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80095b2:	4b1b      	ldr	r3, [pc, #108]	; (8009620 <MX_TIM14_Init+0x94>)
 80095b4:	2200      	movs	r2, #0
 80095b6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1-1;
 80095b8:	4b19      	ldr	r3, [pc, #100]	; (8009620 <MX_TIM14_Init+0x94>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80095be:	4b18      	ldr	r3, [pc, #96]	; (8009620 <MX_TIM14_Init+0x94>)
 80095c0:	2200      	movs	r2, #0
 80095c2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80095c4:	4b16      	ldr	r3, [pc, #88]	; (8009620 <MX_TIM14_Init+0x94>)
 80095c6:	2280      	movs	r2, #128	; 0x80
 80095c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80095ca:	4815      	ldr	r0, [pc, #84]	; (8009620 <MX_TIM14_Init+0x94>)
 80095cc:	f006 ff55 	bl	801047a <HAL_TIM_Base_Init>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d001      	beq.n	80095da <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80095d6:	f7ff fac0 	bl	8008b5a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80095da:	4811      	ldr	r0, [pc, #68]	; (8009620 <MX_TIM14_Init+0x94>)
 80095dc:	f006 ffa4 	bl	8010528 <HAL_TIM_PWM_Init>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80095e6:	f7ff fab8 	bl	8008b5a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80095ea:	2360      	movs	r3, #96	; 0x60
 80095ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 80095ee:	f240 13f3 	movw	r3, #499	; 0x1f3
 80095f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80095f4:	2300      	movs	r3, #0
 80095f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80095f8:	2300      	movs	r3, #0
 80095fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80095fc:	1d3b      	adds	r3, r7, #4
 80095fe:	2200      	movs	r2, #0
 8009600:	4619      	mov	r1, r3
 8009602:	4807      	ldr	r0, [pc, #28]	; (8009620 <MX_TIM14_Init+0x94>)
 8009604:	f007 f90e 	bl	8010824 <HAL_TIM_PWM_ConfigChannel>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 800960e:	f7ff faa4 	bl	8008b5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8009612:	4803      	ldr	r0, [pc, #12]	; (8009620 <MX_TIM14_Init+0x94>)
 8009614:	f000 fb84 	bl	8009d20 <HAL_TIM_MspPostInit>

}
 8009618:	bf00      	nop
 800961a:	3720      	adds	r7, #32
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	240010cc 	.word	0x240010cc
 8009624:	40002000 	.word	0x40002000

08009628 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b09c      	sub	sp, #112	; 0x70
 800962c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800962e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009632:	2200      	movs	r2, #0
 8009634:	601a      	str	r2, [r3, #0]
 8009636:	605a      	str	r2, [r3, #4]
 8009638:	609a      	str	r2, [r3, #8]
 800963a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800963c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009640:	2200      	movs	r2, #0
 8009642:	601a      	str	r2, [r3, #0]
 8009644:	605a      	str	r2, [r3, #4]
 8009646:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009648:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800964c:	2200      	movs	r2, #0
 800964e:	601a      	str	r2, [r3, #0]
 8009650:	605a      	str	r2, [r3, #4]
 8009652:	609a      	str	r2, [r3, #8]
 8009654:	60da      	str	r2, [r3, #12]
 8009656:	611a      	str	r2, [r3, #16]
 8009658:	615a      	str	r2, [r3, #20]
 800965a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800965c:	1d3b      	adds	r3, r7, #4
 800965e:	2234      	movs	r2, #52	; 0x34
 8009660:	2100      	movs	r1, #0
 8009662:	4618      	mov	r0, r3
 8009664:	f00b f810 	bl	8014688 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8009668:	4b3f      	ldr	r3, [pc, #252]	; (8009768 <MX_TIM15_Init+0x140>)
 800966a:	4a40      	ldr	r2, [pc, #256]	; (800976c <MX_TIM15_Init+0x144>)
 800966c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 550 - 1;
 800966e:	4b3e      	ldr	r3, [pc, #248]	; (8009768 <MX_TIM15_Init+0x140>)
 8009670:	f240 2225 	movw	r2, #549	; 0x225
 8009674:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009676:	4b3c      	ldr	r3, [pc, #240]	; (8009768 <MX_TIM15_Init+0x140>)
 8009678:	2200      	movs	r2, #0
 800967a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10000;
 800967c:	4b3a      	ldr	r3, [pc, #232]	; (8009768 <MX_TIM15_Init+0x140>)
 800967e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009682:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009684:	4b38      	ldr	r3, [pc, #224]	; (8009768 <MX_TIM15_Init+0x140>)
 8009686:	2200      	movs	r2, #0
 8009688:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800968a:	4b37      	ldr	r3, [pc, #220]	; (8009768 <MX_TIM15_Init+0x140>)
 800968c:	2200      	movs	r2, #0
 800968e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009690:	4b35      	ldr	r3, [pc, #212]	; (8009768 <MX_TIM15_Init+0x140>)
 8009692:	2280      	movs	r2, #128	; 0x80
 8009694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8009696:	4834      	ldr	r0, [pc, #208]	; (8009768 <MX_TIM15_Init+0x140>)
 8009698:	f006 feef 	bl	801047a <HAL_TIM_Base_Init>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d001      	beq.n	80096a6 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80096a2:	f7ff fa5a 	bl	8008b5a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80096a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096aa:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80096ac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80096b0:	4619      	mov	r1, r3
 80096b2:	482d      	ldr	r0, [pc, #180]	; (8009768 <MX_TIM15_Init+0x140>)
 80096b4:	f007 f9ca 	bl	8010a4c <HAL_TIM_ConfigClockSource>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 80096be:	f7ff fa4c 	bl	8008b5a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80096c2:	4829      	ldr	r0, [pc, #164]	; (8009768 <MX_TIM15_Init+0x140>)
 80096c4:	f006 ff30 	bl	8010528 <HAL_TIM_PWM_Init>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 80096ce:	f7ff fa44 	bl	8008b5a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80096d2:	2300      	movs	r3, #0
 80096d4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80096d6:	2300      	movs	r3, #0
 80096d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80096da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80096de:	4619      	mov	r1, r3
 80096e0:	4821      	ldr	r0, [pc, #132]	; (8009768 <MX_TIM15_Init+0x140>)
 80096e2:	f007 feeb 	bl	80114bc <HAL_TIMEx_MasterConfigSynchronization>
 80096e6:	4603      	mov	r3, r0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d001      	beq.n	80096f0 <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 80096ec:	f7ff fa35 	bl	8008b5a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80096f0:	2360      	movs	r3, #96	; 0x60
 80096f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80096f4:	2300      	movs	r3, #0
 80096f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80096f8:	2300      	movs	r3, #0
 80096fa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80096fc:	2300      	movs	r3, #0
 80096fe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009700:	2300      	movs	r3, #0
 8009702:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009704:	2300      	movs	r3, #0
 8009706:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009708:	2300      	movs	r3, #0
 800970a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800970c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009710:	2200      	movs	r2, #0
 8009712:	4619      	mov	r1, r3
 8009714:	4814      	ldr	r0, [pc, #80]	; (8009768 <MX_TIM15_Init+0x140>)
 8009716:	f007 f885 	bl	8010824 <HAL_TIM_PWM_ConfigChannel>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d001      	beq.n	8009724 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8009720:	f7ff fa1b 	bl	8008b5a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009724:	2300      	movs	r3, #0
 8009726:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009728:	2300      	movs	r3, #0
 800972a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800972c:	2300      	movs	r3, #0
 800972e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009730:	2300      	movs	r3, #0
 8009732:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009734:	2300      	movs	r3, #0
 8009736:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800973c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800973e:	2300      	movs	r3, #0
 8009740:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009742:	2300      	movs	r3, #0
 8009744:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8009746:	1d3b      	adds	r3, r7, #4
 8009748:	4619      	mov	r1, r3
 800974a:	4807      	ldr	r0, [pc, #28]	; (8009768 <MX_TIM15_Init+0x140>)
 800974c:	f007 ff52 	bl	80115f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d001      	beq.n	800975a <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8009756:	f7ff fa00 	bl	8008b5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800975a:	4803      	ldr	r0, [pc, #12]	; (8009768 <MX_TIM15_Init+0x140>)
 800975c:	f000 fae0 	bl	8009d20 <HAL_TIM_MspPostInit>

}
 8009760:	bf00      	nop
 8009762:	3770      	adds	r7, #112	; 0x70
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	24000eb8 	.word	0x24000eb8
 800976c:	40014000 	.word	0x40014000

08009770 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b094      	sub	sp, #80	; 0x50
 8009774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8009776:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800977a:	2200      	movs	r2, #0
 800977c:	601a      	str	r2, [r3, #0]
 800977e:	605a      	str	r2, [r3, #4]
 8009780:	609a      	str	r2, [r3, #8]
 8009782:	60da      	str	r2, [r3, #12]
 8009784:	611a      	str	r2, [r3, #16]
 8009786:	615a      	str	r2, [r3, #20]
 8009788:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800978a:	463b      	mov	r3, r7
 800978c:	2234      	movs	r2, #52	; 0x34
 800978e:	2100      	movs	r1, #0
 8009790:	4618      	mov	r0, r3
 8009792:	f00a ff79 	bl	8014688 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8009796:	4b31      	ldr	r3, [pc, #196]	; (800985c <MX_TIM16_Init+0xec>)
 8009798:	4a31      	ldr	r2, [pc, #196]	; (8009860 <MX_TIM16_Init+0xf0>)
 800979a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 800979c:	4b2f      	ldr	r3, [pc, #188]	; (800985c <MX_TIM16_Init+0xec>)
 800979e:	f240 2225 	movw	r2, #549	; 0x225
 80097a2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80097a4:	4b2d      	ldr	r3, [pc, #180]	; (800985c <MX_TIM16_Init+0xec>)
 80097a6:	2200      	movs	r2, #0
 80097a8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1-1;
 80097aa:	4b2c      	ldr	r3, [pc, #176]	; (800985c <MX_TIM16_Init+0xec>)
 80097ac:	2200      	movs	r2, #0
 80097ae:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80097b0:	4b2a      	ldr	r3, [pc, #168]	; (800985c <MX_TIM16_Init+0xec>)
 80097b2:	2200      	movs	r2, #0
 80097b4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80097b6:	4b29      	ldr	r3, [pc, #164]	; (800985c <MX_TIM16_Init+0xec>)
 80097b8:	2200      	movs	r2, #0
 80097ba:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80097bc:	4b27      	ldr	r3, [pc, #156]	; (800985c <MX_TIM16_Init+0xec>)
 80097be:	2280      	movs	r2, #128	; 0x80
 80097c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80097c2:	4826      	ldr	r0, [pc, #152]	; (800985c <MX_TIM16_Init+0xec>)
 80097c4:	f006 fe59 	bl	801047a <HAL_TIM_Base_Init>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80097ce:	f7ff f9c4 	bl	8008b5a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80097d2:	4822      	ldr	r0, [pc, #136]	; (800985c <MX_TIM16_Init+0xec>)
 80097d4:	f006 fea8 	bl	8010528 <HAL_TIM_PWM_Init>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80097de:	f7ff f9bc 	bl	8008b5a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80097e2:	2360      	movs	r3, #96	; 0x60
 80097e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 80097e6:	f240 13f3 	movw	r3, #499	; 0x1f3
 80097ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80097ec:	2300      	movs	r3, #0
 80097ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80097f0:	2300      	movs	r3, #0
 80097f2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80097f4:	2300      	movs	r3, #0
 80097f6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80097f8:	2300      	movs	r3, #0
 80097fa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80097fc:	2300      	movs	r3, #0
 80097fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009800:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009804:	2200      	movs	r2, #0
 8009806:	4619      	mov	r1, r3
 8009808:	4814      	ldr	r0, [pc, #80]	; (800985c <MX_TIM16_Init+0xec>)
 800980a:	f007 f80b 	bl	8010824 <HAL_TIM_PWM_ConfigChannel>
 800980e:	4603      	mov	r3, r0
 8009810:	2b00      	cmp	r3, #0
 8009812:	d001      	beq.n	8009818 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8009814:	f7ff f9a1 	bl	8008b5a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009818:	2300      	movs	r3, #0
 800981a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800981c:	2300      	movs	r3, #0
 800981e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009820:	2300      	movs	r3, #0
 8009822:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009824:	2300      	movs	r3, #0
 8009826:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009828:	2300      	movs	r3, #0
 800982a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800982c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009830:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009832:	2300      	movs	r3, #0
 8009834:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009836:	2300      	movs	r3, #0
 8009838:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800983a:	463b      	mov	r3, r7
 800983c:	4619      	mov	r1, r3
 800983e:	4807      	ldr	r0, [pc, #28]	; (800985c <MX_TIM16_Init+0xec>)
 8009840:	f007 fed8 	bl	80115f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d001      	beq.n	800984e <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 800984a:	f7ff f986 	bl	8008b5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800984e:	4803      	ldr	r0, [pc, #12]	; (800985c <MX_TIM16_Init+0xec>)
 8009850:	f000 fa66 	bl	8009d20 <HAL_TIM_MspPostInit>

}
 8009854:	bf00      	nop
 8009856:	3750      	adds	r7, #80	; 0x50
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}
 800985c:	24001164 	.word	0x24001164
 8009860:	40014400 	.word	0x40014400

08009864 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b094      	sub	sp, #80	; 0x50
 8009868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800986a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800986e:	2200      	movs	r2, #0
 8009870:	601a      	str	r2, [r3, #0]
 8009872:	605a      	str	r2, [r3, #4]
 8009874:	609a      	str	r2, [r3, #8]
 8009876:	60da      	str	r2, [r3, #12]
 8009878:	611a      	str	r2, [r3, #16]
 800987a:	615a      	str	r2, [r3, #20]
 800987c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800987e:	463b      	mov	r3, r7
 8009880:	2234      	movs	r2, #52	; 0x34
 8009882:	2100      	movs	r1, #0
 8009884:	4618      	mov	r0, r3
 8009886:	f00a feff 	bl	8014688 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800988a:	4b32      	ldr	r3, [pc, #200]	; (8009954 <MX_TIM17_Init+0xf0>)
 800988c:	4a32      	ldr	r2, [pc, #200]	; (8009958 <MX_TIM17_Init+0xf4>)
 800988e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 5500-1;
 8009890:	4b30      	ldr	r3, [pc, #192]	; (8009954 <MX_TIM17_Init+0xf0>)
 8009892:	f241 527b 	movw	r2, #5499	; 0x157b
 8009896:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009898:	4b2e      	ldr	r3, [pc, #184]	; (8009954 <MX_TIM17_Init+0xf0>)
 800989a:	2200      	movs	r2, #0
 800989c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 800989e:	4b2d      	ldr	r3, [pc, #180]	; (8009954 <MX_TIM17_Init+0xf0>)
 80098a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80098a4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80098a6:	4b2b      	ldr	r3, [pc, #172]	; (8009954 <MX_TIM17_Init+0xf0>)
 80098a8:	2200      	movs	r2, #0
 80098aa:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80098ac:	4b29      	ldr	r3, [pc, #164]	; (8009954 <MX_TIM17_Init+0xf0>)
 80098ae:	2200      	movs	r2, #0
 80098b0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80098b2:	4b28      	ldr	r3, [pc, #160]	; (8009954 <MX_TIM17_Init+0xf0>)
 80098b4:	2280      	movs	r2, #128	; 0x80
 80098b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80098b8:	4826      	ldr	r0, [pc, #152]	; (8009954 <MX_TIM17_Init+0xf0>)
 80098ba:	f006 fdde 	bl	801047a <HAL_TIM_Base_Init>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d001      	beq.n	80098c8 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 80098c4:	f7ff f949 	bl	8008b5a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80098c8:	4822      	ldr	r0, [pc, #136]	; (8009954 <MX_TIM17_Init+0xf0>)
 80098ca:	f006 fe2d 	bl	8010528 <HAL_TIM_PWM_Init>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d001      	beq.n	80098d8 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 80098d4:	f7ff f941 	bl	8008b5a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80098d8:	2360      	movs	r3, #96	; 0x60
 80098da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 80098dc:	f240 13f3 	movw	r3, #499	; 0x1f3
 80098e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80098e2:	2300      	movs	r3, #0
 80098e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80098e6:	2300      	movs	r3, #0
 80098e8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80098ea:	2300      	movs	r3, #0
 80098ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80098ee:	2300      	movs	r3, #0
 80098f0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80098f2:	2300      	movs	r3, #0
 80098f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80098f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80098fa:	2200      	movs	r2, #0
 80098fc:	4619      	mov	r1, r3
 80098fe:	4815      	ldr	r0, [pc, #84]	; (8009954 <MX_TIM17_Init+0xf0>)
 8009900:	f006 ff90 	bl	8010824 <HAL_TIM_PWM_ConfigChannel>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 800990a:	f7ff f926 	bl	8008b5a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800990e:	2300      	movs	r3, #0
 8009910:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009912:	2300      	movs	r3, #0
 8009914:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009916:	2300      	movs	r3, #0
 8009918:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800991a:	2300      	movs	r3, #0
 800991c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800991e:	2300      	movs	r3, #0
 8009920:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009926:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009928:	2300      	movs	r3, #0
 800992a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800992c:	2300      	movs	r3, #0
 800992e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8009930:	463b      	mov	r3, r7
 8009932:	4619      	mov	r1, r3
 8009934:	4807      	ldr	r0, [pc, #28]	; (8009954 <MX_TIM17_Init+0xf0>)
 8009936:	f007 fe5d 	bl	80115f4 <HAL_TIMEx_ConfigBreakDeadTime>
 800993a:	4603      	mov	r3, r0
 800993c:	2b00      	cmp	r3, #0
 800993e:	d001      	beq.n	8009944 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 8009940:	f7ff f90b 	bl	8008b5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8009944:	4803      	ldr	r0, [pc, #12]	; (8009954 <MX_TIM17_Init+0xf0>)
 8009946:	f000 f9eb 	bl	8009d20 <HAL_TIM_MspPostInit>

}
 800994a:	bf00      	nop
 800994c:	3750      	adds	r7, #80	; 0x50
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	24000f04 	.word	0x24000f04
 8009958:	40014800 	.word	0x40014800

0800995c <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b088      	sub	sp, #32
 8009960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009962:	f107 0310 	add.w	r3, r7, #16
 8009966:	2200      	movs	r2, #0
 8009968:	601a      	str	r2, [r3, #0]
 800996a:	605a      	str	r2, [r3, #4]
 800996c:	609a      	str	r2, [r3, #8]
 800996e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009970:	1d3b      	adds	r3, r7, #4
 8009972:	2200      	movs	r2, #0
 8009974:	601a      	str	r2, [r3, #0]
 8009976:	605a      	str	r2, [r3, #4]
 8009978:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800997a:	4b1e      	ldr	r3, [pc, #120]	; (80099f4 <MX_TIM23_Init+0x98>)
 800997c:	4a1e      	ldr	r2, [pc, #120]	; (80099f8 <MX_TIM23_Init+0x9c>)
 800997e:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8009980:	4b1c      	ldr	r3, [pc, #112]	; (80099f4 <MX_TIM23_Init+0x98>)
 8009982:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009986:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009988:	4b1a      	ldr	r3, [pc, #104]	; (80099f4 <MX_TIM23_Init+0x98>)
 800998a:	2200      	movs	r2, #0
 800998c:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 800998e:	4b19      	ldr	r3, [pc, #100]	; (80099f4 <MX_TIM23_Init+0x98>)
 8009990:	f04f 32ff 	mov.w	r2, #4294967295
 8009994:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009996:	4b17      	ldr	r3, [pc, #92]	; (80099f4 <MX_TIM23_Init+0x98>)
 8009998:	2200      	movs	r2, #0
 800999a:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800999c:	4b15      	ldr	r3, [pc, #84]	; (80099f4 <MX_TIM23_Init+0x98>)
 800999e:	2200      	movs	r2, #0
 80099a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 80099a2:	4814      	ldr	r0, [pc, #80]	; (80099f4 <MX_TIM23_Init+0x98>)
 80099a4:	f006 fd69 	bl	801047a <HAL_TIM_Base_Init>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d001      	beq.n	80099b2 <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 80099ae:	f7ff f8d4 	bl	8008b5a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80099b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 80099b8:	f107 0310 	add.w	r3, r7, #16
 80099bc:	4619      	mov	r1, r3
 80099be:	480d      	ldr	r0, [pc, #52]	; (80099f4 <MX_TIM23_Init+0x98>)
 80099c0:	f007 f844 	bl	8010a4c <HAL_TIM_ConfigClockSource>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d001      	beq.n	80099ce <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 80099ca:	f7ff f8c6 	bl	8008b5a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80099ce:	2300      	movs	r3, #0
 80099d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80099d2:	2300      	movs	r3, #0
 80099d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80099d6:	1d3b      	adds	r3, r7, #4
 80099d8:	4619      	mov	r1, r3
 80099da:	4806      	ldr	r0, [pc, #24]	; (80099f4 <MX_TIM23_Init+0x98>)
 80099dc:	f007 fd6e 	bl	80114bc <HAL_TIMEx_MasterConfigSynchronization>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d001      	beq.n	80099ea <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 80099e6:	f7ff f8b8 	bl	8008b5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80099ea:	bf00      	nop
 80099ec:	3720      	adds	r7, #32
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
 80099f2:	bf00      	nop
 80099f4:	24001080 	.word	0x24001080
 80099f8:	4000e000 	.word	0x4000e000

080099fc <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b088      	sub	sp, #32
 8009a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009a02:	f107 0310 	add.w	r3, r7, #16
 8009a06:	2200      	movs	r2, #0
 8009a08:	601a      	str	r2, [r3, #0]
 8009a0a:	605a      	str	r2, [r3, #4]
 8009a0c:	609a      	str	r2, [r3, #8]
 8009a0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a10:	1d3b      	adds	r3, r7, #4
 8009a12:	2200      	movs	r2, #0
 8009a14:	601a      	str	r2, [r3, #0]
 8009a16:	605a      	str	r2, [r3, #4]
 8009a18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8009a1a:	4b1d      	ldr	r3, [pc, #116]	; (8009a90 <MX_TIM24_Init+0x94>)
 8009a1c:	4a1d      	ldr	r2, [pc, #116]	; (8009a94 <MX_TIM24_Init+0x98>)
 8009a1e:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8009a20:	4b1b      	ldr	r3, [pc, #108]	; (8009a90 <MX_TIM24_Init+0x94>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a26:	4b1a      	ldr	r3, [pc, #104]	; (8009a90 <MX_TIM24_Init+0x94>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8009a2c:	4b18      	ldr	r3, [pc, #96]	; (8009a90 <MX_TIM24_Init+0x94>)
 8009a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a32:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009a34:	4b16      	ldr	r3, [pc, #88]	; (8009a90 <MX_TIM24_Init+0x94>)
 8009a36:	2200      	movs	r2, #0
 8009a38:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009a3a:	4b15      	ldr	r3, [pc, #84]	; (8009a90 <MX_TIM24_Init+0x94>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8009a40:	4813      	ldr	r0, [pc, #76]	; (8009a90 <MX_TIM24_Init+0x94>)
 8009a42:	f006 fd1a 	bl	801047a <HAL_TIM_Base_Init>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d001      	beq.n	8009a50 <MX_TIM24_Init+0x54>
  {
    Error_Handler();
 8009a4c:	f7ff f885 	bl	8008b5a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8009a56:	f107 0310 	add.w	r3, r7, #16
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	480c      	ldr	r0, [pc, #48]	; (8009a90 <MX_TIM24_Init+0x94>)
 8009a5e:	f006 fff5 	bl	8010a4c <HAL_TIM_ConfigClockSource>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d001      	beq.n	8009a6c <MX_TIM24_Init+0x70>
  {
    Error_Handler();
 8009a68:	f7ff f877 	bl	8008b5a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009a70:	2300      	movs	r3, #0
 8009a72:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8009a74:	1d3b      	adds	r3, r7, #4
 8009a76:	4619      	mov	r1, r3
 8009a78:	4805      	ldr	r0, [pc, #20]	; (8009a90 <MX_TIM24_Init+0x94>)
 8009a7a:	f007 fd1f 	bl	80114bc <HAL_TIMEx_MasterConfigSynchronization>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <MX_TIM24_Init+0x8c>
  {
    Error_Handler();
 8009a84:	f7ff f869 	bl	8008b5a <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8009a88:	bf00      	nop
 8009a8a:	3720      	adds	r7, #32
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	24000e20 	.word	0x24000e20
 8009a94:	4000e400 	.word	0x4000e400

08009a98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b094      	sub	sp, #80	; 0x50
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009aa0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	601a      	str	r2, [r3, #0]
 8009aa8:	605a      	str	r2, [r3, #4]
 8009aaa:	609a      	str	r2, [r3, #8]
 8009aac:	60da      	str	r2, [r3, #12]
 8009aae:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a8d      	ldr	r2, [pc, #564]	; (8009cec <HAL_TIM_Base_MspInit+0x254>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d10f      	bne.n	8009ada <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009aba:	4b8d      	ldr	r3, [pc, #564]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009ac0:	4a8b      	ldr	r2, [pc, #556]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009ac2:	f043 0301 	orr.w	r3, r3, #1
 8009ac6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009aca:	4b89      	ldr	r3, [pc, #548]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009acc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009ad0:	f003 0301 	and.w	r3, r3, #1
 8009ad4:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_TIM24_CLK_ENABLE();
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 8009ad8:	e104      	b.n	8009ce4 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM2)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ae2:	d10f      	bne.n	8009b04 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009ae4:	4b82      	ldr	r3, [pc, #520]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009ae6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009aea:	4a81      	ldr	r2, [pc, #516]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009aec:	f043 0301 	orr.w	r3, r3, #1
 8009af0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009af4:	4b7e      	ldr	r3, [pc, #504]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009af6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009afa:	f003 0301 	and.w	r3, r3, #1
 8009afe:	637b      	str	r3, [r7, #52]	; 0x34
 8009b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009b02:	e0ef      	b.n	8009ce4 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM3)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a7a      	ldr	r2, [pc, #488]	; (8009cf4 <HAL_TIM_Base_MspInit+0x25c>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d10f      	bne.n	8009b2e <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009b0e:	4b78      	ldr	r3, [pc, #480]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009b10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009b14:	4a76      	ldr	r2, [pc, #472]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009b16:	f043 0302 	orr.w	r3, r3, #2
 8009b1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009b1e:	4b74      	ldr	r3, [pc, #464]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009b20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009b24:	f003 0302 	and.w	r3, r3, #2
 8009b28:	633b      	str	r3, [r7, #48]	; 0x30
 8009b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8009b2c:	e0da      	b.n	8009ce4 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM4)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a71      	ldr	r2, [pc, #452]	; (8009cf8 <HAL_TIM_Base_MspInit+0x260>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d10f      	bne.n	8009b58 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009b38:	4b6d      	ldr	r3, [pc, #436]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009b3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009b3e:	4a6c      	ldr	r2, [pc, #432]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009b40:	f043 0304 	orr.w	r3, r3, #4
 8009b44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009b48:	4b69      	ldr	r3, [pc, #420]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009b4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009b4e:	f003 0304 	and.w	r3, r3, #4
 8009b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009b56:	e0c5      	b.n	8009ce4 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM12)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a67      	ldr	r2, [pc, #412]	; (8009cfc <HAL_TIM_Base_MspInit+0x264>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d10f      	bne.n	8009b82 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8009b62:	4b63      	ldr	r3, [pc, #396]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009b64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009b68:	4a61      	ldr	r2, [pc, #388]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009b6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009b72:	4b5f      	ldr	r3, [pc, #380]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009b74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8009b80:	e0b0      	b.n	8009ce4 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM13)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a5e      	ldr	r2, [pc, #376]	; (8009d00 <HAL_TIM_Base_MspInit+0x268>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d10f      	bne.n	8009bac <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8009b8c:	4b58      	ldr	r3, [pc, #352]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009b8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009b92:	4a57      	ldr	r2, [pc, #348]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b98:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009b9c:	4b54      	ldr	r3, [pc, #336]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009b9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009baa:	e09b      	b.n	8009ce4 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM14)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a54      	ldr	r2, [pc, #336]	; (8009d04 <HAL_TIM_Base_MspInit+0x26c>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d10f      	bne.n	8009bd6 <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8009bb6:	4b4e      	ldr	r3, [pc, #312]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009bb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009bbc:	4a4c      	ldr	r2, [pc, #304]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009bbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bc2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009bc6:	4b4a      	ldr	r3, [pc, #296]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009bc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bd0:	623b      	str	r3, [r7, #32]
 8009bd2:	6a3b      	ldr	r3, [r7, #32]
}
 8009bd4:	e086      	b.n	8009ce4 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM15)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a4b      	ldr	r2, [pc, #300]	; (8009d08 <HAL_TIM_Base_MspInit+0x270>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d12e      	bne.n	8009c3e <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8009be0:	4b43      	ldr	r3, [pc, #268]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009be2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009be6:	4a42      	ldr	r2, [pc, #264]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009bf0:	4b3f      	ldr	r3, [pc, #252]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009bf2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bfa:	61fb      	str	r3, [r7, #28]
 8009bfc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009bfe:	4b3c      	ldr	r3, [pc, #240]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c04:	4a3a      	ldr	r2, [pc, #232]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009c06:	f043 0301 	orr.w	r3, r3, #1
 8009c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009c0e:	4b38      	ldr	r3, [pc, #224]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c14:	f003 0301 	and.w	r3, r3, #1
 8009c18:	61bb      	str	r3, [r7, #24]
 8009c1a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009c1c:	2308      	movs	r3, #8
 8009c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c20:	2302      	movs	r3, #2
 8009c22:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c24:	2300      	movs	r3, #0
 8009c26:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8009c2c:	2304      	movs	r3, #4
 8009c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009c34:	4619      	mov	r1, r3
 8009c36:	4835      	ldr	r0, [pc, #212]	; (8009d0c <HAL_TIM_Base_MspInit+0x274>)
 8009c38:	f003 f90c 	bl	800ce54 <HAL_GPIO_Init>
}
 8009c3c:	e052      	b.n	8009ce4 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM16)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a33      	ldr	r2, [pc, #204]	; (8009d10 <HAL_TIM_Base_MspInit+0x278>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d10f      	bne.n	8009c68 <HAL_TIM_Base_MspInit+0x1d0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8009c48:	4b29      	ldr	r3, [pc, #164]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009c4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c4e:	4a28      	ldr	r2, [pc, #160]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c54:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009c58:	4b25      	ldr	r3, [pc, #148]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009c5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c62:	617b      	str	r3, [r7, #20]
 8009c64:	697b      	ldr	r3, [r7, #20]
}
 8009c66:	e03d      	b.n	8009ce4 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM17)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a29      	ldr	r2, [pc, #164]	; (8009d14 <HAL_TIM_Base_MspInit+0x27c>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d10f      	bne.n	8009c92 <HAL_TIM_Base_MspInit+0x1fa>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8009c72:	4b1f      	ldr	r3, [pc, #124]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c78:	4a1d      	ldr	r2, [pc, #116]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009c7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009c82:	4b1b      	ldr	r3, [pc, #108]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009c84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009c88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c8c:	613b      	str	r3, [r7, #16]
 8009c8e:	693b      	ldr	r3, [r7, #16]
}
 8009c90:	e028      	b.n	8009ce4 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM23)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a20      	ldr	r2, [pc, #128]	; (8009d18 <HAL_TIM_Base_MspInit+0x280>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d10f      	bne.n	8009cbc <HAL_TIM_Base_MspInit+0x224>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8009c9c:	4b14      	ldr	r3, [pc, #80]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009c9e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009ca2:	4a13      	ldr	r2, [pc, #76]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009ca4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ca8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8009cac:	4b10      	ldr	r3, [pc, #64]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009cae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009cb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009cb6:	60fb      	str	r3, [r7, #12]
 8009cb8:	68fb      	ldr	r3, [r7, #12]
}
 8009cba:	e013      	b.n	8009ce4 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM24)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a16      	ldr	r2, [pc, #88]	; (8009d1c <HAL_TIM_Base_MspInit+0x284>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d10e      	bne.n	8009ce4 <HAL_TIM_Base_MspInit+0x24c>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8009cc6:	4b0a      	ldr	r3, [pc, #40]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009cc8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009ccc:	4a08      	ldr	r2, [pc, #32]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009cce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009cd2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8009cd6:	4b06      	ldr	r3, [pc, #24]	; (8009cf0 <HAL_TIM_Base_MspInit+0x258>)
 8009cd8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ce0:	60bb      	str	r3, [r7, #8]
 8009ce2:	68bb      	ldr	r3, [r7, #8]
}
 8009ce4:	bf00      	nop
 8009ce6:	3750      	adds	r7, #80	; 0x50
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	40010000 	.word	0x40010000
 8009cf0:	58024400 	.word	0x58024400
 8009cf4:	40000400 	.word	0x40000400
 8009cf8:	40000800 	.word	0x40000800
 8009cfc:	40001800 	.word	0x40001800
 8009d00:	40001c00 	.word	0x40001c00
 8009d04:	40002000 	.word	0x40002000
 8009d08:	40014000 	.word	0x40014000
 8009d0c:	58020000 	.word	0x58020000
 8009d10:	40014400 	.word	0x40014400
 8009d14:	40014800 	.word	0x40014800
 8009d18:	4000e000 	.word	0x4000e000
 8009d1c:	4000e400 	.word	0x4000e400

08009d20 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b090      	sub	sp, #64	; 0x40
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	601a      	str	r2, [r3, #0]
 8009d30:	605a      	str	r2, [r3, #4]
 8009d32:	609a      	str	r2, [r3, #8]
 8009d34:	60da      	str	r2, [r3, #12]
 8009d36:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4aa9      	ldr	r2, [pc, #676]	; (8009fe4 <HAL_TIM_MspPostInit+0x2c4>)
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d120      	bne.n	8009d84 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009d42:	4ba9      	ldr	r3, [pc, #676]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d48:	4aa7      	ldr	r2, [pc, #668]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009d4a:	f043 0310 	orr.w	r3, r3, #16
 8009d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009d52:	4ba5      	ldr	r3, [pc, #660]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d58:	f003 0310 	and.w	r3, r3, #16
 8009d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d66:	2302      	movs	r3, #2
 8009d68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009d72:	2301      	movs	r3, #1
 8009d74:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009d76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	489b      	ldr	r0, [pc, #620]	; (8009fec <HAL_TIM_MspPostInit+0x2cc>)
 8009d7e:	f003 f869 	bl	800ce54 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8009d82:	e12a      	b.n	8009fda <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM2)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d8c:	d11f      	bne.n	8009dce <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009d8e:	4b96      	ldr	r3, [pc, #600]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d94:	4a94      	ldr	r2, [pc, #592]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009d96:	f043 0301 	orr.w	r3, r3, #1
 8009d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009d9e:	4b92      	ldr	r3, [pc, #584]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009da4:	f003 0301 	and.w	r3, r3, #1
 8009da8:	627b      	str	r3, [r7, #36]	; 0x24
 8009daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8009dac:	2301      	movs	r3, #1
 8009dae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009db0:	2302      	movs	r3, #2
 8009db2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009db4:	2300      	movs	r3, #0
 8009db6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009db8:	2300      	movs	r3, #0
 8009dba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009dc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	488a      	ldr	r0, [pc, #552]	; (8009ff0 <HAL_TIM_MspPostInit+0x2d0>)
 8009dc8:	f003 f844 	bl	800ce54 <HAL_GPIO_Init>
}
 8009dcc:	e105      	b.n	8009fda <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM3)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4a88      	ldr	r2, [pc, #544]	; (8009ff4 <HAL_TIM_MspPostInit+0x2d4>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d11f      	bne.n	8009e18 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009dd8:	4b83      	ldr	r3, [pc, #524]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009dde:	4a82      	ldr	r2, [pc, #520]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009de0:	f043 0304 	orr.w	r3, r3, #4
 8009de4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009de8:	4b7f      	ldr	r3, [pc, #508]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009dee:	f003 0304 	and.w	r3, r3, #4
 8009df2:	623b      	str	r3, [r7, #32]
 8009df4:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009df6:	2340      	movs	r3, #64	; 0x40
 8009df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009dfa:	2302      	movs	r3, #2
 8009dfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e02:	2300      	movs	r3, #0
 8009e04:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009e06:	2302      	movs	r3, #2
 8009e08:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009e0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009e0e:	4619      	mov	r1, r3
 8009e10:	4879      	ldr	r0, [pc, #484]	; (8009ff8 <HAL_TIM_MspPostInit+0x2d8>)
 8009e12:	f003 f81f 	bl	800ce54 <HAL_GPIO_Init>
}
 8009e16:	e0e0      	b.n	8009fda <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM4)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a77      	ldr	r2, [pc, #476]	; (8009ffc <HAL_TIM_MspPostInit+0x2dc>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d120      	bne.n	8009e64 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009e22:	4b71      	ldr	r3, [pc, #452]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e28:	4a6f      	ldr	r2, [pc, #444]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009e2a:	f043 0308 	orr.w	r3, r3, #8
 8009e2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009e32:	4b6d      	ldr	r3, [pc, #436]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e38:	f003 0308 	and.w	r3, r3, #8
 8009e3c:	61fb      	str	r3, [r7, #28]
 8009e3e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8009e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e44:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e46:	2302      	movs	r3, #2
 8009e48:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8009e52:	2302      	movs	r3, #2
 8009e54:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009e56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	4868      	ldr	r0, [pc, #416]	; (800a000 <HAL_TIM_MspPostInit+0x2e0>)
 8009e5e:	f002 fff9 	bl	800ce54 <HAL_GPIO_Init>
}
 8009e62:	e0ba      	b.n	8009fda <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM12)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a66      	ldr	r2, [pc, #408]	; (800a004 <HAL_TIM_MspPostInit+0x2e4>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d120      	bne.n	8009eb0 <HAL_TIM_MspPostInit+0x190>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009e6e:	4b5e      	ldr	r3, [pc, #376]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e74:	4a5c      	ldr	r2, [pc, #368]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009e76:	f043 0302 	orr.w	r3, r3, #2
 8009e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009e7e:	4b5a      	ldr	r3, [pc, #360]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e84:	f003 0302 	and.w	r3, r3, #2
 8009e88:	61bb      	str	r3, [r7, #24]
 8009e8a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8009e8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e92:	2302      	movs	r3, #2
 8009e94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e96:	2300      	movs	r3, #0
 8009e98:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8009e9e:	2302      	movs	r3, #2
 8009ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ea2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	4857      	ldr	r0, [pc, #348]	; (800a008 <HAL_TIM_MspPostInit+0x2e8>)
 8009eaa:	f002 ffd3 	bl	800ce54 <HAL_GPIO_Init>
}
 8009eae:	e094      	b.n	8009fda <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM14)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a55      	ldr	r2, [pc, #340]	; (800a00c <HAL_TIM_MspPostInit+0x2ec>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d11f      	bne.n	8009efa <HAL_TIM_MspPostInit+0x1da>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009eba:	4b4b      	ldr	r3, [pc, #300]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ec0:	4a49      	ldr	r2, [pc, #292]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009ec2:	f043 0301 	orr.w	r3, r3, #1
 8009ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009eca:	4b47      	ldr	r3, [pc, #284]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ed0:	f003 0301 	and.w	r3, r3, #1
 8009ed4:	617b      	str	r3, [r7, #20]
 8009ed6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8009ed8:	2380      	movs	r3, #128	; 0x80
 8009eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009edc:	2302      	movs	r3, #2
 8009ede:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8009ee8:	2309      	movs	r3, #9
 8009eea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009eec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	483f      	ldr	r0, [pc, #252]	; (8009ff0 <HAL_TIM_MspPostInit+0x2d0>)
 8009ef4:	f002 ffae 	bl	800ce54 <HAL_GPIO_Init>
}
 8009ef8:	e06f      	b.n	8009fda <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM15)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a44      	ldr	r2, [pc, #272]	; (800a010 <HAL_TIM_MspPostInit+0x2f0>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d11f      	bne.n	8009f44 <HAL_TIM_MspPostInit+0x224>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009f04:	4b38      	ldr	r3, [pc, #224]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009f06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f0a:	4a37      	ldr	r2, [pc, #220]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009f0c:	f043 0310 	orr.w	r3, r3, #16
 8009f10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009f14:	4b34      	ldr	r3, [pc, #208]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f1a:	f003 0310 	and.w	r3, r3, #16
 8009f1e:	613b      	str	r3, [r7, #16]
 8009f20:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8009f22:	2320      	movs	r3, #32
 8009f24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f26:	2302      	movs	r3, #2
 8009f28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8009f32:	2304      	movs	r3, #4
 8009f34:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009f36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	482b      	ldr	r0, [pc, #172]	; (8009fec <HAL_TIM_MspPostInit+0x2cc>)
 8009f3e:	f002 ff89 	bl	800ce54 <HAL_GPIO_Init>
}
 8009f42:	e04a      	b.n	8009fda <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM16)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a32      	ldr	r2, [pc, #200]	; (800a014 <HAL_TIM_MspPostInit+0x2f4>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d120      	bne.n	8009f90 <HAL_TIM_MspPostInit+0x270>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f4e:	4b26      	ldr	r3, [pc, #152]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f54:	4a24      	ldr	r2, [pc, #144]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009f56:	f043 0302 	orr.w	r3, r3, #2
 8009f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009f5e:	4b22      	ldr	r3, [pc, #136]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f64:	f003 0302 	and.w	r3, r3, #2
 8009f68:	60fb      	str	r3, [r7, #12]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8009f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f72:	2302      	movs	r3, #2
 8009f74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f76:	2300      	movs	r3, #0
 8009f78:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009f82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009f86:	4619      	mov	r1, r3
 8009f88:	481f      	ldr	r0, [pc, #124]	; (800a008 <HAL_TIM_MspPostInit+0x2e8>)
 8009f8a:	f002 ff63 	bl	800ce54 <HAL_GPIO_Init>
}
 8009f8e:	e024      	b.n	8009fda <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM17)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a20      	ldr	r2, [pc, #128]	; (800a018 <HAL_TIM_MspPostInit+0x2f8>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d11f      	bne.n	8009fda <HAL_TIM_MspPostInit+0x2ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f9a:	4b13      	ldr	r3, [pc, #76]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009fa0:	4a11      	ldr	r2, [pc, #68]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009fa2:	f043 0302 	orr.w	r3, r3, #2
 8009fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009faa:	4b0f      	ldr	r3, [pc, #60]	; (8009fe8 <HAL_TIM_MspPostInit+0x2c8>)
 8009fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009fb0:	f003 0302 	and.w	r3, r3, #2
 8009fb4:	60bb      	str	r3, [r7, #8]
 8009fb6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fbe:	2302      	movs	r3, #2
 8009fc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009fce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	480c      	ldr	r0, [pc, #48]	; (800a008 <HAL_TIM_MspPostInit+0x2e8>)
 8009fd6:	f002 ff3d 	bl	800ce54 <HAL_GPIO_Init>
}
 8009fda:	bf00      	nop
 8009fdc:	3740      	adds	r7, #64	; 0x40
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	40010000 	.word	0x40010000
 8009fe8:	58024400 	.word	0x58024400
 8009fec:	58021000 	.word	0x58021000
 8009ff0:	58020000 	.word	0x58020000
 8009ff4:	40000400 	.word	0x40000400
 8009ff8:	58020800 	.word	0x58020800
 8009ffc:	40000800 	.word	0x40000800
 800a000:	58020c00 	.word	0x58020c00
 800a004:	40001800 	.word	0x40001800
 800a008:	58020400 	.word	0x58020400
 800a00c:	40002000 	.word	0x40002000
 800a010:	40014000 	.word	0x40014000
 800a014:	40014400 	.word	0x40014400
 800a018:	40014800 	.word	0x40014800

0800a01c <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800a020:	4b22      	ldr	r3, [pc, #136]	; (800a0ac <MX_UART4_Init+0x90>)
 800a022:	4a23      	ldr	r2, [pc, #140]	; (800a0b0 <MX_UART4_Init+0x94>)
 800a024:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800a026:	4b21      	ldr	r3, [pc, #132]	; (800a0ac <MX_UART4_Init+0x90>)
 800a028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a02c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800a02e:	4b1f      	ldr	r3, [pc, #124]	; (800a0ac <MX_UART4_Init+0x90>)
 800a030:	2200      	movs	r2, #0
 800a032:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800a034:	4b1d      	ldr	r3, [pc, #116]	; (800a0ac <MX_UART4_Init+0x90>)
 800a036:	2200      	movs	r2, #0
 800a038:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800a03a:	4b1c      	ldr	r3, [pc, #112]	; (800a0ac <MX_UART4_Init+0x90>)
 800a03c:	2200      	movs	r2, #0
 800a03e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800a040:	4b1a      	ldr	r3, [pc, #104]	; (800a0ac <MX_UART4_Init+0x90>)
 800a042:	220c      	movs	r2, #12
 800a044:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a046:	4b19      	ldr	r3, [pc, #100]	; (800a0ac <MX_UART4_Init+0x90>)
 800a048:	2200      	movs	r2, #0
 800a04a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800a04c:	4b17      	ldr	r3, [pc, #92]	; (800a0ac <MX_UART4_Init+0x90>)
 800a04e:	2200      	movs	r2, #0
 800a050:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a052:	4b16      	ldr	r3, [pc, #88]	; (800a0ac <MX_UART4_Init+0x90>)
 800a054:	2200      	movs	r2, #0
 800a056:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a058:	4b14      	ldr	r3, [pc, #80]	; (800a0ac <MX_UART4_Init+0x90>)
 800a05a:	2200      	movs	r2, #0
 800a05c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a05e:	4b13      	ldr	r3, [pc, #76]	; (800a0ac <MX_UART4_Init+0x90>)
 800a060:	2200      	movs	r2, #0
 800a062:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800a064:	4811      	ldr	r0, [pc, #68]	; (800a0ac <MX_UART4_Init+0x90>)
 800a066:	f007 fb65 	bl	8011734 <HAL_UART_Init>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d001      	beq.n	800a074 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800a070:	f7fe fd73 	bl	8008b5a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a074:	2100      	movs	r1, #0
 800a076:	480d      	ldr	r0, [pc, #52]	; (800a0ac <MX_UART4_Init+0x90>)
 800a078:	f00a fa03 	bl	8014482 <HAL_UARTEx_SetTxFifoThreshold>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d001      	beq.n	800a086 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800a082:	f7fe fd6a 	bl	8008b5a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a086:	2100      	movs	r1, #0
 800a088:	4808      	ldr	r0, [pc, #32]	; (800a0ac <MX_UART4_Init+0x90>)
 800a08a:	f00a fa38 	bl	80144fe <HAL_UARTEx_SetRxFifoThreshold>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	d001      	beq.n	800a098 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800a094:	f7fe fd61 	bl	8008b5a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800a098:	4804      	ldr	r0, [pc, #16]	; (800a0ac <MX_UART4_Init+0x90>)
 800a09a:	f00a f9b9 	bl	8014410 <HAL_UARTEx_DisableFifoMode>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d001      	beq.n	800a0a8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800a0a4:	f7fe fd59 	bl	8008b5a <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800a0a8:	bf00      	nop
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	240012d0 	.word	0x240012d0
 800a0b0:	40004c00 	.word	0x40004c00

0800a0b4 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800a0b8:	4b22      	ldr	r3, [pc, #136]	; (800a144 <MX_UART5_Init+0x90>)
 800a0ba:	4a23      	ldr	r2, [pc, #140]	; (800a148 <MX_UART5_Init+0x94>)
 800a0bc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800a0be:	4b21      	ldr	r3, [pc, #132]	; (800a144 <MX_UART5_Init+0x90>)
 800a0c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a0c4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800a0c6:	4b1f      	ldr	r3, [pc, #124]	; (800a144 <MX_UART5_Init+0x90>)
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800a0cc:	4b1d      	ldr	r3, [pc, #116]	; (800a144 <MX_UART5_Init+0x90>)
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800a0d2:	4b1c      	ldr	r3, [pc, #112]	; (800a144 <MX_UART5_Init+0x90>)
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800a0d8:	4b1a      	ldr	r3, [pc, #104]	; (800a144 <MX_UART5_Init+0x90>)
 800a0da:	220c      	movs	r2, #12
 800a0dc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a0de:	4b19      	ldr	r3, [pc, #100]	; (800a144 <MX_UART5_Init+0x90>)
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800a0e4:	4b17      	ldr	r3, [pc, #92]	; (800a144 <MX_UART5_Init+0x90>)
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a0ea:	4b16      	ldr	r3, [pc, #88]	; (800a144 <MX_UART5_Init+0x90>)
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a0f0:	4b14      	ldr	r3, [pc, #80]	; (800a144 <MX_UART5_Init+0x90>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a0f6:	4b13      	ldr	r3, [pc, #76]	; (800a144 <MX_UART5_Init+0x90>)
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800a0fc:	4811      	ldr	r0, [pc, #68]	; (800a144 <MX_UART5_Init+0x90>)
 800a0fe:	f007 fb19 	bl	8011734 <HAL_UART_Init>
 800a102:	4603      	mov	r3, r0
 800a104:	2b00      	cmp	r3, #0
 800a106:	d001      	beq.n	800a10c <MX_UART5_Init+0x58>
  {
    Error_Handler();
 800a108:	f7fe fd27 	bl	8008b5a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a10c:	2100      	movs	r1, #0
 800a10e:	480d      	ldr	r0, [pc, #52]	; (800a144 <MX_UART5_Init+0x90>)
 800a110:	f00a f9b7 	bl	8014482 <HAL_UARTEx_SetTxFifoThreshold>
 800a114:	4603      	mov	r3, r0
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 800a11a:	f7fe fd1e 	bl	8008b5a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a11e:	2100      	movs	r1, #0
 800a120:	4808      	ldr	r0, [pc, #32]	; (800a144 <MX_UART5_Init+0x90>)
 800a122:	f00a f9ec 	bl	80144fe <HAL_UARTEx_SetRxFifoThreshold>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d001      	beq.n	800a130 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 800a12c:	f7fe fd15 	bl	8008b5a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800a130:	4804      	ldr	r0, [pc, #16]	; (800a144 <MX_UART5_Init+0x90>)
 800a132:	f00a f96d 	bl	8014410 <HAL_UARTEx_DisableFifoMode>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d001      	beq.n	800a140 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 800a13c:	f7fe fd0d 	bl	8008b5a <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800a140:	bf00      	nop
 800a142:	bd80      	pop	{r7, pc}
 800a144:	24001240 	.word	0x24001240
 800a148:	40005000 	.word	0x40005000

0800a14c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a150:	4b22      	ldr	r3, [pc, #136]	; (800a1dc <MX_USART2_UART_Init+0x90>)
 800a152:	4a23      	ldr	r2, [pc, #140]	; (800a1e0 <MX_USART2_UART_Init+0x94>)
 800a154:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a156:	4b21      	ldr	r3, [pc, #132]	; (800a1dc <MX_USART2_UART_Init+0x90>)
 800a158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a15c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a15e:	4b1f      	ldr	r3, [pc, #124]	; (800a1dc <MX_USART2_UART_Init+0x90>)
 800a160:	2200      	movs	r2, #0
 800a162:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a164:	4b1d      	ldr	r3, [pc, #116]	; (800a1dc <MX_USART2_UART_Init+0x90>)
 800a166:	2200      	movs	r2, #0
 800a168:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a16a:	4b1c      	ldr	r3, [pc, #112]	; (800a1dc <MX_USART2_UART_Init+0x90>)
 800a16c:	2200      	movs	r2, #0
 800a16e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a170:	4b1a      	ldr	r3, [pc, #104]	; (800a1dc <MX_USART2_UART_Init+0x90>)
 800a172:	220c      	movs	r2, #12
 800a174:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a176:	4b19      	ldr	r3, [pc, #100]	; (800a1dc <MX_USART2_UART_Init+0x90>)
 800a178:	2200      	movs	r2, #0
 800a17a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a17c:	4b17      	ldr	r3, [pc, #92]	; (800a1dc <MX_USART2_UART_Init+0x90>)
 800a17e:	2200      	movs	r2, #0
 800a180:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a182:	4b16      	ldr	r3, [pc, #88]	; (800a1dc <MX_USART2_UART_Init+0x90>)
 800a184:	2200      	movs	r2, #0
 800a186:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a188:	4b14      	ldr	r3, [pc, #80]	; (800a1dc <MX_USART2_UART_Init+0x90>)
 800a18a:	2200      	movs	r2, #0
 800a18c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a18e:	4b13      	ldr	r3, [pc, #76]	; (800a1dc <MX_USART2_UART_Init+0x90>)
 800a190:	2200      	movs	r2, #0
 800a192:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a194:	4811      	ldr	r0, [pc, #68]	; (800a1dc <MX_USART2_UART_Init+0x90>)
 800a196:	f007 facd 	bl	8011734 <HAL_UART_Init>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d001      	beq.n	800a1a4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800a1a0:	f7fe fcdb 	bl	8008b5a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	480d      	ldr	r0, [pc, #52]	; (800a1dc <MX_USART2_UART_Init+0x90>)
 800a1a8:	f00a f96b 	bl	8014482 <HAL_UARTEx_SetTxFifoThreshold>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d001      	beq.n	800a1b6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800a1b2:	f7fe fcd2 	bl	8008b5a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	4808      	ldr	r0, [pc, #32]	; (800a1dc <MX_USART2_UART_Init+0x90>)
 800a1ba:	f00a f9a0 	bl	80144fe <HAL_UARTEx_SetRxFifoThreshold>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d001      	beq.n	800a1c8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800a1c4:	f7fe fcc9 	bl	8008b5a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800a1c8:	4804      	ldr	r0, [pc, #16]	; (800a1dc <MX_USART2_UART_Init+0x90>)
 800a1ca:	f00a f921 	bl	8014410 <HAL_UARTEx_DisableFifoMode>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d001      	beq.n	800a1d8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800a1d4:	f7fe fcc1 	bl	8008b5a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a1d8:	bf00      	nop
 800a1da:	bd80      	pop	{r7, pc}
 800a1dc:	24001360 	.word	0x24001360
 800a1e0:	40004400 	.word	0x40004400

0800a1e4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800a1e8:	4b22      	ldr	r3, [pc, #136]	; (800a274 <MX_USART3_UART_Init+0x90>)
 800a1ea:	4a23      	ldr	r2, [pc, #140]	; (800a278 <MX_USART3_UART_Init+0x94>)
 800a1ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 800a1ee:	4b21      	ldr	r3, [pc, #132]	; (800a274 <MX_USART3_UART_Init+0x90>)
 800a1f0:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800a1f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a1f6:	4b1f      	ldr	r3, [pc, #124]	; (800a274 <MX_USART3_UART_Init+0x90>)
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a1fc:	4b1d      	ldr	r3, [pc, #116]	; (800a274 <MX_USART3_UART_Init+0x90>)
 800a1fe:	2200      	movs	r2, #0
 800a200:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a202:	4b1c      	ldr	r3, [pc, #112]	; (800a274 <MX_USART3_UART_Init+0x90>)
 800a204:	2200      	movs	r2, #0
 800a206:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a208:	4b1a      	ldr	r3, [pc, #104]	; (800a274 <MX_USART3_UART_Init+0x90>)
 800a20a:	220c      	movs	r2, #12
 800a20c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a20e:	4b19      	ldr	r3, [pc, #100]	; (800a274 <MX_USART3_UART_Init+0x90>)
 800a210:	2200      	movs	r2, #0
 800a212:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a214:	4b17      	ldr	r3, [pc, #92]	; (800a274 <MX_USART3_UART_Init+0x90>)
 800a216:	2200      	movs	r2, #0
 800a218:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a21a:	4b16      	ldr	r3, [pc, #88]	; (800a274 <MX_USART3_UART_Init+0x90>)
 800a21c:	2200      	movs	r2, #0
 800a21e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a220:	4b14      	ldr	r3, [pc, #80]	; (800a274 <MX_USART3_UART_Init+0x90>)
 800a222:	2200      	movs	r2, #0
 800a224:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a226:	4b13      	ldr	r3, [pc, #76]	; (800a274 <MX_USART3_UART_Init+0x90>)
 800a228:	2200      	movs	r2, #0
 800a22a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a22c:	4811      	ldr	r0, [pc, #68]	; (800a274 <MX_USART3_UART_Init+0x90>)
 800a22e:	f007 fa81 	bl	8011734 <HAL_UART_Init>
 800a232:	4603      	mov	r3, r0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d001      	beq.n	800a23c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800a238:	f7fe fc8f 	bl	8008b5a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a23c:	2100      	movs	r1, #0
 800a23e:	480d      	ldr	r0, [pc, #52]	; (800a274 <MX_USART3_UART_Init+0x90>)
 800a240:	f00a f91f 	bl	8014482 <HAL_UARTEx_SetTxFifoThreshold>
 800a244:	4603      	mov	r3, r0
 800a246:	2b00      	cmp	r3, #0
 800a248:	d001      	beq.n	800a24e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800a24a:	f7fe fc86 	bl	8008b5a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a24e:	2100      	movs	r1, #0
 800a250:	4808      	ldr	r0, [pc, #32]	; (800a274 <MX_USART3_UART_Init+0x90>)
 800a252:	f00a f954 	bl	80144fe <HAL_UARTEx_SetRxFifoThreshold>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d001      	beq.n	800a260 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800a25c:	f7fe fc7d 	bl	8008b5a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800a260:	4804      	ldr	r0, [pc, #16]	; (800a274 <MX_USART3_UART_Init+0x90>)
 800a262:	f00a f8d5 	bl	8014410 <HAL_UARTEx_DisableFifoMode>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d001      	beq.n	800a270 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800a26c:	f7fe fc75 	bl	8008b5a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800a270:	bf00      	nop
 800a272:	bd80      	pop	{r7, pc}
 800a274:	240011b0 	.word	0x240011b0
 800a278:	40004800 	.word	0x40004800

0800a27c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b0bc      	sub	sp, #240	; 0xf0
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a284:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800a288:	2200      	movs	r2, #0
 800a28a:	601a      	str	r2, [r3, #0]
 800a28c:	605a      	str	r2, [r3, #4]
 800a28e:	609a      	str	r2, [r3, #8]
 800a290:	60da      	str	r2, [r3, #12]
 800a292:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a294:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a298:	22b4      	movs	r2, #180	; 0xb4
 800a29a:	2100      	movs	r1, #0
 800a29c:	4618      	mov	r0, r3
 800a29e:	f00a f9f3 	bl	8014688 <memset>
  if(uartHandle->Instance==UART4)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a96      	ldr	r2, [pc, #600]	; (800a500 <HAL_UART_MspInit+0x284>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d143      	bne.n	800a334 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a2b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f003 ff2a 	bl	800e114 <HAL_RCCEx_PeriphCLKConfig>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d001      	beq.n	800a2ca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800a2c6:	f7fe fc48 	bl	8008b5a <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800a2ca:	4b8e      	ldr	r3, [pc, #568]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a2cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a2d0:	4a8c      	ldr	r2, [pc, #560]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a2d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a2da:	4b8a      	ldr	r3, [pc, #552]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a2dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a2e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a2e4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2e8:	4b86      	ldr	r3, [pc, #536]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a2ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2ee:	4a85      	ldr	r2, [pc, #532]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a2f0:	f043 0301 	orr.w	r3, r3, #1
 800a2f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a2f8:	4b82      	ldr	r3, [pc, #520]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a2fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2fe:	f003 0301 	and.w	r3, r3, #1
 800a302:	623b      	str	r3, [r7, #32]
 800a304:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a306:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a30a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a30e:	2302      	movs	r3, #2
 800a310:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a314:	2300      	movs	r3, #0
 800a316:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a31a:	2300      	movs	r3, #0
 800a31c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 800a320:	2306      	movs	r3, #6
 800a322:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a326:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800a32a:	4619      	mov	r1, r3
 800a32c:	4876      	ldr	r0, [pc, #472]	; (800a508 <HAL_UART_MspInit+0x28c>)
 800a32e:	f002 fd91 	bl	800ce54 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800a332:	e0e0      	b.n	800a4f6 <HAL_UART_MspInit+0x27a>
  else if(uartHandle->Instance==UART5)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a74      	ldr	r2, [pc, #464]	; (800a50c <HAL_UART_MspInit+0x290>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d143      	bne.n	800a3c6 <HAL_UART_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800a33e:	2302      	movs	r3, #2
 800a340:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800a342:	2300      	movs	r3, #0
 800a344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a348:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a34c:	4618      	mov	r0, r3
 800a34e:	f003 fee1 	bl	800e114 <HAL_RCCEx_PeriphCLKConfig>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d001      	beq.n	800a35c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 800a358:	f7fe fbff 	bl	8008b5a <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800a35c:	4b69      	ldr	r3, [pc, #420]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a35e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a362:	4a68      	ldr	r2, [pc, #416]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a368:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a36c:	4b65      	ldr	r3, [pc, #404]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a36e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a376:	61fb      	str	r3, [r7, #28]
 800a378:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a37a:	4b62      	ldr	r3, [pc, #392]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a37c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a380:	4a60      	ldr	r2, [pc, #384]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a382:	f043 0302 	orr.w	r3, r3, #2
 800a386:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a38a:	4b5e      	ldr	r3, [pc, #376]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a38c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a390:	f003 0302 	and.w	r3, r3, #2
 800a394:	61bb      	str	r3, [r7, #24]
 800a396:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800a398:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800a39c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800a3b2:	230e      	movs	r3, #14
 800a3b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a3b8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4854      	ldr	r0, [pc, #336]	; (800a510 <HAL_UART_MspInit+0x294>)
 800a3c0:	f002 fd48 	bl	800ce54 <HAL_GPIO_Init>
}
 800a3c4:	e097      	b.n	800a4f6 <HAL_UART_MspInit+0x27a>
  else if(uartHandle->Instance==USART2)
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a52      	ldr	r2, [pc, #328]	; (800a514 <HAL_UART_MspInit+0x298>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d142      	bne.n	800a456 <HAL_UART_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800a3d0:	2302      	movs	r3, #2
 800a3d2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a3da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f003 fe98 	bl	800e114 <HAL_RCCEx_PeriphCLKConfig>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d001      	beq.n	800a3ee <HAL_UART_MspInit+0x172>
      Error_Handler();
 800a3ea:	f7fe fbb6 	bl	8008b5a <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a3ee:	4b45      	ldr	r3, [pc, #276]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a3f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a3f4:	4a43      	ldr	r2, [pc, #268]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a3f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a3fe:	4b41      	ldr	r3, [pc, #260]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a400:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a408:	617b      	str	r3, [r7, #20]
 800a40a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a40c:	4b3d      	ldr	r3, [pc, #244]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a40e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a412:	4a3c      	ldr	r2, [pc, #240]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a414:	f043 0308 	orr.w	r3, r3, #8
 800a418:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a41c:	4b39      	ldr	r3, [pc, #228]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a41e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a422:	f003 0308 	and.w	r3, r3, #8
 800a426:	613b      	str	r3, [r7, #16]
 800a428:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800a42a:	2360      	movs	r3, #96	; 0x60
 800a42c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a430:	2302      	movs	r3, #2
 800a432:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a436:	2300      	movs	r3, #0
 800a438:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a43c:	2300      	movs	r3, #0
 800a43e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a442:	2307      	movs	r3, #7
 800a444:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a448:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800a44c:	4619      	mov	r1, r3
 800a44e:	4832      	ldr	r0, [pc, #200]	; (800a518 <HAL_UART_MspInit+0x29c>)
 800a450:	f002 fd00 	bl	800ce54 <HAL_GPIO_Init>
}
 800a454:	e04f      	b.n	800a4f6 <HAL_UART_MspInit+0x27a>
  else if(uartHandle->Instance==USART3)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a30      	ldr	r2, [pc, #192]	; (800a51c <HAL_UART_MspInit+0x2a0>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d14a      	bne.n	800a4f6 <HAL_UART_MspInit+0x27a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800a460:	2302      	movs	r3, #2
 800a462:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800a464:	2300      	movs	r3, #0
 800a466:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a46a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a46e:	4618      	mov	r0, r3
 800a470:	f003 fe50 	bl	800e114 <HAL_RCCEx_PeriphCLKConfig>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d001      	beq.n	800a47e <HAL_UART_MspInit+0x202>
      Error_Handler();
 800a47a:	f7fe fb6e 	bl	8008b5a <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a47e:	4b21      	ldr	r3, [pc, #132]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a480:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a484:	4a1f      	ldr	r2, [pc, #124]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a486:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a48a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a48e:	4b1d      	ldr	r3, [pc, #116]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a498:	60fb      	str	r3, [r7, #12]
 800a49a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a49c:	4b19      	ldr	r3, [pc, #100]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a49e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4a2:	4a18      	ldr	r2, [pc, #96]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a4a4:	f043 0302 	orr.w	r3, r3, #2
 800a4a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a4ac:	4b15      	ldr	r3, [pc, #84]	; (800a504 <HAL_UART_MspInit+0x288>)
 800a4ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4b2:	f003 0302 	and.w	r3, r3, #2
 800a4b6:	60bb      	str	r3, [r7, #8]
 800a4b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a4ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a4be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4c2:	2302      	movs	r3, #2
 800a4c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a4d4:	2307      	movs	r3, #7
 800a4d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a4da:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800a4de:	4619      	mov	r1, r3
 800a4e0:	480b      	ldr	r0, [pc, #44]	; (800a510 <HAL_UART_MspInit+0x294>)
 800a4e2:	f002 fcb7 	bl	800ce54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	2027      	movs	r0, #39	; 0x27
 800a4ec:	f001 fd1d 	bl	800bf2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800a4f0:	2027      	movs	r0, #39	; 0x27
 800a4f2:	f001 fd34 	bl	800bf5e <HAL_NVIC_EnableIRQ>
}
 800a4f6:	bf00      	nop
 800a4f8:	37f0      	adds	r7, #240	; 0xf0
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	40004c00 	.word	0x40004c00
 800a504:	58024400 	.word	0x58024400
 800a508:	58020000 	.word	0x58020000
 800a50c:	40005000 	.word	0x40005000
 800a510:	58020400 	.word	0x58020400
 800a514:	40004400 	.word	0x40004400
 800a518:	58020c00 	.word	0x58020c00
 800a51c:	40004800 	.word	0x40004800

0800a520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800a520:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a558 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800a524:	f7fe fd1c 	bl	8008f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a528:	480c      	ldr	r0, [pc, #48]	; (800a55c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a52a:	490d      	ldr	r1, [pc, #52]	; (800a560 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a52c:	4a0d      	ldr	r2, [pc, #52]	; (800a564 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a52e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a530:	e002      	b.n	800a538 <LoopCopyDataInit>

0800a532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a536:	3304      	adds	r3, #4

0800a538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a53a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a53c:	d3f9      	bcc.n	800a532 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a53e:	4a0a      	ldr	r2, [pc, #40]	; (800a568 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a540:	4c0a      	ldr	r4, [pc, #40]	; (800a56c <LoopFillZerobss+0x22>)
  movs r3, #0
 800a542:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a544:	e001      	b.n	800a54a <LoopFillZerobss>

0800a546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a548:	3204      	adds	r2, #4

0800a54a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a54a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a54c:	d3fb      	bcc.n	800a546 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a54e:	f00a f869 	bl	8014624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a552:	f7fd fc2d 	bl	8007db0 <main>
  bx  lr
 800a556:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a558:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800a55c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800a560:	24000234 	.word	0x24000234
  ldr r2, =_sidata
 800a564:	0801a410 	.word	0x0801a410
  ldr r2, =_sbss
 800a568:	24000238 	.word	0x24000238
  ldr r4, =_ebss
 800a56c:	24001404 	.word	0x24001404

0800a570 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a570:	e7fe      	b.n	800a570 <ADC3_IRQHandler>
	...

0800a574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a57a:	2003      	movs	r0, #3
 800a57c:	f001 fcca 	bl	800bf14 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a580:	f003 fbd6 	bl	800dd30 <HAL_RCC_GetSysClockFreq>
 800a584:	4602      	mov	r2, r0
 800a586:	4b15      	ldr	r3, [pc, #84]	; (800a5dc <HAL_Init+0x68>)
 800a588:	699b      	ldr	r3, [r3, #24]
 800a58a:	0a1b      	lsrs	r3, r3, #8
 800a58c:	f003 030f 	and.w	r3, r3, #15
 800a590:	4913      	ldr	r1, [pc, #76]	; (800a5e0 <HAL_Init+0x6c>)
 800a592:	5ccb      	ldrb	r3, [r1, r3]
 800a594:	f003 031f 	and.w	r3, r3, #31
 800a598:	fa22 f303 	lsr.w	r3, r2, r3
 800a59c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a59e:	4b0f      	ldr	r3, [pc, #60]	; (800a5dc <HAL_Init+0x68>)
 800a5a0:	699b      	ldr	r3, [r3, #24]
 800a5a2:	f003 030f 	and.w	r3, r3, #15
 800a5a6:	4a0e      	ldr	r2, [pc, #56]	; (800a5e0 <HAL_Init+0x6c>)
 800a5a8:	5cd3      	ldrb	r3, [r2, r3]
 800a5aa:	f003 031f 	and.w	r3, r3, #31
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5b4:	4a0b      	ldr	r2, [pc, #44]	; (800a5e4 <HAL_Init+0x70>)
 800a5b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a5b8:	4a0b      	ldr	r2, [pc, #44]	; (800a5e8 <HAL_Init+0x74>)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a5be:	2000      	movs	r0, #0
 800a5c0:	f000 f814 	bl	800a5ec <HAL_InitTick>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d001      	beq.n	800a5ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e002      	b.n	800a5d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800a5ce:	f7fe fb85 	bl	8008cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3708      	adds	r7, #8
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	58024400 	.word	0x58024400
 800a5e0:	08018550 	.word	0x08018550
 800a5e4:	24000054 	.word	0x24000054
 800a5e8:	24000050 	.word	0x24000050

0800a5ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800a5f4:	4b15      	ldr	r3, [pc, #84]	; (800a64c <HAL_InitTick+0x60>)
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d101      	bne.n	800a600 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	e021      	b.n	800a644 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800a600:	4b13      	ldr	r3, [pc, #76]	; (800a650 <HAL_InitTick+0x64>)
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	4b11      	ldr	r3, [pc, #68]	; (800a64c <HAL_InitTick+0x60>)
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	4619      	mov	r1, r3
 800a60a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a60e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a612:	fbb2 f3f3 	udiv	r3, r2, r3
 800a616:	4618      	mov	r0, r3
 800a618:	f001 fcaf 	bl	800bf7a <HAL_SYSTICK_Config>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d001      	beq.n	800a626 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	e00e      	b.n	800a644 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b0f      	cmp	r3, #15
 800a62a:	d80a      	bhi.n	800a642 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a62c:	2200      	movs	r2, #0
 800a62e:	6879      	ldr	r1, [r7, #4]
 800a630:	f04f 30ff 	mov.w	r0, #4294967295
 800a634:	f001 fc79 	bl	800bf2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a638:	4a06      	ldr	r2, [pc, #24]	; (800a654 <HAL_InitTick+0x68>)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	e000      	b.n	800a644 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800a642:	2301      	movs	r3, #1
}
 800a644:	4618      	mov	r0, r3
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	2400005c 	.word	0x2400005c
 800a650:	24000050 	.word	0x24000050
 800a654:	24000058 	.word	0x24000058

0800a658 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a658:	b480      	push	{r7}
 800a65a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800a65c:	4b06      	ldr	r3, [pc, #24]	; (800a678 <HAL_IncTick+0x20>)
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	461a      	mov	r2, r3
 800a662:	4b06      	ldr	r3, [pc, #24]	; (800a67c <HAL_IncTick+0x24>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4413      	add	r3, r2
 800a668:	4a04      	ldr	r2, [pc, #16]	; (800a67c <HAL_IncTick+0x24>)
 800a66a:	6013      	str	r3, [r2, #0]
}
 800a66c:	bf00      	nop
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop
 800a678:	2400005c 	.word	0x2400005c
 800a67c:	240013f0 	.word	0x240013f0

0800a680 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a680:	b480      	push	{r7}
 800a682:	af00      	add	r7, sp, #0
  return uwTick;
 800a684:	4b03      	ldr	r3, [pc, #12]	; (800a694 <HAL_GetTick+0x14>)
 800a686:	681b      	ldr	r3, [r3, #0]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr
 800a692:	bf00      	nop
 800a694:	240013f0 	.word	0x240013f0

0800a698 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800a698:	b480      	push	{r7}
 800a69a:	b083      	sub	sp, #12
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
 800a6a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	431a      	orrs	r2, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	609a      	str	r2, [r3, #8]
}
 800a6b2:	bf00      	nop
 800a6b4:	370c      	adds	r7, #12
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr

0800a6be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800a6be:	b480      	push	{r7}
 800a6c0:	b083      	sub	sp, #12
 800a6c2:	af00      	add	r7, sp, #0
 800a6c4:	6078      	str	r0, [r7, #4]
 800a6c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	431a      	orrs	r2, r3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	609a      	str	r2, [r3, #8]
}
 800a6d8:	bf00      	nop
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800a700:	b480      	push	{r7}
 800a702:	b087      	sub	sp, #28
 800a704:	af00      	add	r7, sp, #0
 800a706:	60f8      	str	r0, [r7, #12]
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
 800a70c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	3360      	adds	r3, #96	; 0x60
 800a712:	461a      	mov	r2, r3
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	009b      	lsls	r3, r3, #2
 800a718:	4413      	add	r3, r2
 800a71a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	4a10      	ldr	r2, [pc, #64]	; (800a760 <LL_ADC_SetOffset+0x60>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d10b      	bne.n	800a73c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	4313      	orrs	r3, r2
 800a732:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800a73a:	e00b      	b.n	800a754 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	430b      	orrs	r3, r1
 800a74e:	431a      	orrs	r2, r3
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	601a      	str	r2, [r3, #0]
}
 800a754:	bf00      	nop
 800a756:	371c      	adds	r7, #28
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr
 800a760:	58026000 	.word	0x58026000

0800a764 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800a764:	b480      	push	{r7}
 800a766:	b085      	sub	sp, #20
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	3360      	adds	r3, #96	; 0x60
 800a772:	461a      	mov	r2, r3
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	4413      	add	r3, r2
 800a77a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800a784:	4618      	mov	r0, r3
 800a786:	3714      	adds	r7, #20
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800a790:	b480      	push	{r7}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	691b      	ldr	r3, [r3, #16]
 800a7a0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	f003 031f 	and.w	r3, r3, #31
 800a7aa:	6879      	ldr	r1, [r7, #4]
 800a7ac:	fa01 f303 	lsl.w	r3, r1, r3
 800a7b0:	431a      	orrs	r2, r3
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	611a      	str	r2, [r3, #16]
}
 800a7b6:	bf00      	nop
 800a7b8:	3714      	adds	r7, #20
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
	...

0800a7c4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b087      	sub	sp, #28
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	60f8      	str	r0, [r7, #12]
 800a7cc:	60b9      	str	r1, [r7, #8]
 800a7ce:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	4a0c      	ldr	r2, [pc, #48]	; (800a804 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d00e      	beq.n	800a7f6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	3360      	adds	r3, #96	; 0x60
 800a7dc:	461a      	mov	r2, r3
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	4413      	add	r3, r2
 800a7e4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	431a      	orrs	r2, r3
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	601a      	str	r2, [r3, #0]
  }
}
 800a7f6:	bf00      	nop
 800a7f8:	371c      	adds	r7, #28
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a800:	4770      	bx	lr
 800a802:	bf00      	nop
 800a804:	58026000 	.word	0x58026000

0800a808 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800a808:	b480      	push	{r7}
 800a80a:	b087      	sub	sp, #28
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	60b9      	str	r1, [r7, #8]
 800a812:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	4a0c      	ldr	r2, [pc, #48]	; (800a848 <LL_ADC_SetOffsetSaturation+0x40>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d10e      	bne.n	800a83a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	3360      	adds	r3, #96	; 0x60
 800a820:	461a      	mov	r2, r3
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	4413      	add	r3, r2
 800a828:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	431a      	orrs	r2, r3
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800a83a:	bf00      	nop
 800a83c:	371c      	adds	r7, #28
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop
 800a848:	58026000 	.word	0x58026000

0800a84c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b087      	sub	sp, #28
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	4a0c      	ldr	r2, [pc, #48]	; (800a88c <LL_ADC_SetOffsetSign+0x40>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d10e      	bne.n	800a87e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	3360      	adds	r3, #96	; 0x60
 800a864:	461a      	mov	r2, r3
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	4413      	add	r3, r2
 800a86c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	431a      	orrs	r2, r3
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800a87e:	bf00      	nop
 800a880:	371c      	adds	r7, #28
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop
 800a88c:	58026000 	.word	0x58026000

0800a890 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800a890:	b480      	push	{r7}
 800a892:	b087      	sub	sp, #28
 800a894:	af00      	add	r7, sp, #0
 800a896:	60f8      	str	r0, [r7, #12]
 800a898:	60b9      	str	r1, [r7, #8]
 800a89a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	3360      	adds	r3, #96	; 0x60
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	009b      	lsls	r3, r3, #2
 800a8a6:	4413      	add	r3, r2
 800a8a8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	4a0c      	ldr	r2, [pc, #48]	; (800a8e0 <LL_ADC_SetOffsetState+0x50>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d108      	bne.n	800a8c4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	431a      	orrs	r2, r3
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800a8c2:	e007      	b.n	800a8d4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	431a      	orrs	r2, r3
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	601a      	str	r2, [r3, #0]
}
 800a8d4:	bf00      	nop
 800a8d6:	371c      	adds	r7, #28
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr
 800a8e0:	58026000 	.word	0x58026000

0800a8e4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b087      	sub	sp, #28
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	3330      	adds	r3, #48	; 0x30
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	0a1b      	lsrs	r3, r3, #8
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	f003 030c 	and.w	r3, r3, #12
 800a900:	4413      	add	r3, r2
 800a902:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	681a      	ldr	r2, [r3, #0]
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	f003 031f 	and.w	r3, r3, #31
 800a90e:	211f      	movs	r1, #31
 800a910:	fa01 f303 	lsl.w	r3, r1, r3
 800a914:	43db      	mvns	r3, r3
 800a916:	401a      	ands	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	0e9b      	lsrs	r3, r3, #26
 800a91c:	f003 011f 	and.w	r1, r3, #31
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	f003 031f 	and.w	r3, r3, #31
 800a926:	fa01 f303 	lsl.w	r3, r1, r3
 800a92a:	431a      	orrs	r2, r3
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800a930:	bf00      	nop
 800a932:	371c      	adds	r7, #28
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b087      	sub	sp, #28
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	3314      	adds	r3, #20
 800a94c:	461a      	mov	r2, r3
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	0e5b      	lsrs	r3, r3, #25
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	f003 0304 	and.w	r3, r3, #4
 800a958:	4413      	add	r3, r2
 800a95a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a95c:	697b      	ldr	r3, [r7, #20]
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	0d1b      	lsrs	r3, r3, #20
 800a964:	f003 031f 	and.w	r3, r3, #31
 800a968:	2107      	movs	r1, #7
 800a96a:	fa01 f303 	lsl.w	r3, r1, r3
 800a96e:	43db      	mvns	r3, r3
 800a970:	401a      	ands	r2, r3
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	0d1b      	lsrs	r3, r3, #20
 800a976:	f003 031f 	and.w	r3, r3, #31
 800a97a:	6879      	ldr	r1, [r7, #4]
 800a97c:	fa01 f303 	lsl.w	r3, r1, r3
 800a980:	431a      	orrs	r2, r3
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800a986:	bf00      	nop
 800a988:	371c      	adds	r7, #28
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
	...

0800a994 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	4a1a      	ldr	r2, [pc, #104]	; (800aa0c <LL_ADC_SetChannelSingleDiff+0x78>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d115      	bne.n	800a9d4 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9b4:	43db      	mvns	r3, r3
 800a9b6:	401a      	ands	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f003 0318 	and.w	r3, r3, #24
 800a9be:	4914      	ldr	r1, [pc, #80]	; (800aa10 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800a9c0:	40d9      	lsrs	r1, r3
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	400b      	ands	r3, r1
 800a9c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9ca:	431a      	orrs	r2, r3
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800a9d2:	e014      	b.n	800a9fe <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9e0:	43db      	mvns	r3, r3
 800a9e2:	401a      	ands	r2, r3
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f003 0318 	and.w	r3, r3, #24
 800a9ea:	4909      	ldr	r1, [pc, #36]	; (800aa10 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800a9ec:	40d9      	lsrs	r1, r3
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	400b      	ands	r3, r1
 800a9f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9f6:	431a      	orrs	r2, r3
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800a9fe:	bf00      	nop
 800aa00:	3714      	adds	r7, #20
 800aa02:	46bd      	mov	sp, r7
 800aa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	58026000 	.word	0x58026000
 800aa10:	000fffff 	.word	0x000fffff

0800aa14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	689a      	ldr	r2, [r3, #8]
 800aa20:	4b04      	ldr	r3, [pc, #16]	; (800aa34 <LL_ADC_DisableDeepPowerDown+0x20>)
 800aa22:	4013      	ands	r3, r2
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	6093      	str	r3, [r2, #8]
}
 800aa28:	bf00      	nop
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr
 800aa34:	5fffffc0 	.word	0x5fffffc0

0800aa38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa4c:	d101      	bne.n	800aa52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e000      	b.n	800aa54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800aa52:	2300      	movs	r3, #0
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	370c      	adds	r7, #12
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	689a      	ldr	r2, [r3, #8]
 800aa6c:	4b05      	ldr	r3, [pc, #20]	; (800aa84 <LL_ADC_EnableInternalRegulator+0x24>)
 800aa6e:	4013      	ands	r3, r2
 800aa70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800aa78:	bf00      	nop
 800aa7a:	370c      	adds	r7, #12
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr
 800aa84:	6fffffc0 	.word	0x6fffffc0

0800aa88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa9c:	d101      	bne.n	800aaa2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e000      	b.n	800aaa4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800aaa2:	2300      	movs	r3, #0
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	370c      	adds	r7, #12
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	f003 0301 	and.w	r3, r3, #1
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	d101      	bne.n	800aac8 <LL_ADC_IsEnabled+0x18>
 800aac4:	2301      	movs	r3, #1
 800aac6:	e000      	b.n	800aaca <LL_ADC_IsEnabled+0x1a>
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	370c      	adds	r7, #12
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr

0800aad6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800aad6:	b480      	push	{r7}
 800aad8:	b083      	sub	sp, #12
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	f003 0304 	and.w	r3, r3, #4
 800aae6:	2b04      	cmp	r3, #4
 800aae8:	d101      	bne.n	800aaee <LL_ADC_REG_IsConversionOngoing+0x18>
 800aaea:	2301      	movs	r3, #1
 800aaec:	e000      	b.n	800aaf0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800aaee:	2300      	movs	r3, #0
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	370c      	adds	r7, #12
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	f003 0308 	and.w	r3, r3, #8
 800ab0c:	2b08      	cmp	r3, #8
 800ab0e:	d101      	bne.n	800ab14 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800ab10:	2301      	movs	r3, #1
 800ab12:	e000      	b.n	800ab16 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800ab14:	2300      	movs	r3, #0
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	370c      	adds	r7, #12
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr
	...

0800ab24 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800ab24:	b590      	push	{r4, r7, lr}
 800ab26:	b089      	sub	sp, #36	; 0x24
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800ab30:	2300      	movs	r3, #0
 800ab32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d101      	bne.n	800ab3e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e1ee      	b.n	800af1c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d109      	bne.n	800ab60 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f7fc ffa1 	bl	8007a94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2200      	movs	r2, #0
 800ab56:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7ff ff67 	bl	800aa38 <LL_ADC_IsDeepPowerDownEnabled>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d004      	beq.n	800ab7a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7ff ff4d 	bl	800aa14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7ff ff82 	bl	800aa88 <LL_ADC_IsInternalRegulatorEnabled>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d114      	bne.n	800abb4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f7ff ff66 	bl	800aa60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ab94:	4b8e      	ldr	r3, [pc, #568]	; (800add0 <HAL_ADC_Init+0x2ac>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	099b      	lsrs	r3, r3, #6
 800ab9a:	4a8e      	ldr	r2, [pc, #568]	; (800add4 <HAL_ADC_Init+0x2b0>)
 800ab9c:	fba2 2303 	umull	r2, r3, r2, r3
 800aba0:	099b      	lsrs	r3, r3, #6
 800aba2:	3301      	adds	r3, #1
 800aba4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800aba6:	e002      	b.n	800abae <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	3b01      	subs	r3, #1
 800abac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d1f9      	bne.n	800aba8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4618      	mov	r0, r3
 800abba:	f7ff ff65 	bl	800aa88 <LL_ADC_IsInternalRegulatorEnabled>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d10d      	bne.n	800abe0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abc8:	f043 0210 	orr.w	r2, r3, #16
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abd4:	f043 0201 	orr.w	r2, r3, #1
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 800abdc:	2301      	movs	r3, #1
 800abde:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7ff ff76 	bl	800aad6 <LL_ADC_REG_IsConversionOngoing>
 800abea:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abf0:	f003 0310 	and.w	r3, r3, #16
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f040 8188 	bne.w	800af0a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	f040 8184 	bne.w	800af0a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac06:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800ac0a:	f043 0202 	orr.w	r2, r3, #2
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4618      	mov	r0, r3
 800ac18:	f7ff ff4a 	bl	800aab0 <LL_ADC_IsEnabled>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d136      	bne.n	800ac90 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a6c      	ldr	r2, [pc, #432]	; (800add8 <HAL_ADC_Init+0x2b4>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d004      	beq.n	800ac36 <HAL_ADC_Init+0x112>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a6a      	ldr	r2, [pc, #424]	; (800addc <HAL_ADC_Init+0x2b8>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d10e      	bne.n	800ac54 <HAL_ADC_Init+0x130>
 800ac36:	4868      	ldr	r0, [pc, #416]	; (800add8 <HAL_ADC_Init+0x2b4>)
 800ac38:	f7ff ff3a 	bl	800aab0 <LL_ADC_IsEnabled>
 800ac3c:	4604      	mov	r4, r0
 800ac3e:	4867      	ldr	r0, [pc, #412]	; (800addc <HAL_ADC_Init+0x2b8>)
 800ac40:	f7ff ff36 	bl	800aab0 <LL_ADC_IsEnabled>
 800ac44:	4603      	mov	r3, r0
 800ac46:	4323      	orrs	r3, r4
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	bf0c      	ite	eq
 800ac4c:	2301      	moveq	r3, #1
 800ac4e:	2300      	movne	r3, #0
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	e008      	b.n	800ac66 <HAL_ADC_Init+0x142>
 800ac54:	4862      	ldr	r0, [pc, #392]	; (800ade0 <HAL_ADC_Init+0x2bc>)
 800ac56:	f7ff ff2b 	bl	800aab0 <LL_ADC_IsEnabled>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	bf0c      	ite	eq
 800ac60:	2301      	moveq	r3, #1
 800ac62:	2300      	movne	r3, #0
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d012      	beq.n	800ac90 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4a5a      	ldr	r2, [pc, #360]	; (800add8 <HAL_ADC_Init+0x2b4>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d004      	beq.n	800ac7e <HAL_ADC_Init+0x15a>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4a58      	ldr	r2, [pc, #352]	; (800addc <HAL_ADC_Init+0x2b8>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d101      	bne.n	800ac82 <HAL_ADC_Init+0x15e>
 800ac7e:	4a59      	ldr	r2, [pc, #356]	; (800ade4 <HAL_ADC_Init+0x2c0>)
 800ac80:	e000      	b.n	800ac84 <HAL_ADC_Init+0x160>
 800ac82:	4a59      	ldr	r2, [pc, #356]	; (800ade8 <HAL_ADC_Init+0x2c4>)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	4619      	mov	r1, r3
 800ac8a:	4610      	mov	r0, r2
 800ac8c:	f7ff fd04 	bl	800a698 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4a52      	ldr	r2, [pc, #328]	; (800ade0 <HAL_ADC_Init+0x2bc>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d129      	bne.n	800acee <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	7e5b      	ldrb	r3, [r3, #25]
 800ac9e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800aca4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800acaa:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	689b      	ldr	r3, [r3, #8]
 800acb0:	2b08      	cmp	r3, #8
 800acb2:	d013      	beq.n	800acdc <HAL_ADC_Init+0x1b8>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	2b0c      	cmp	r3, #12
 800acba:	d00d      	beq.n	800acd8 <HAL_ADC_Init+0x1b4>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	2b1c      	cmp	r3, #28
 800acc2:	d007      	beq.n	800acd4 <HAL_ADC_Init+0x1b0>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	689b      	ldr	r3, [r3, #8]
 800acc8:	2b18      	cmp	r3, #24
 800acca:	d101      	bne.n	800acd0 <HAL_ADC_Init+0x1ac>
 800accc:	2318      	movs	r3, #24
 800acce:	e006      	b.n	800acde <HAL_ADC_Init+0x1ba>
 800acd0:	2300      	movs	r3, #0
 800acd2:	e004      	b.n	800acde <HAL_ADC_Init+0x1ba>
 800acd4:	2310      	movs	r3, #16
 800acd6:	e002      	b.n	800acde <HAL_ADC_Init+0x1ba>
 800acd8:	2308      	movs	r3, #8
 800acda:	e000      	b.n	800acde <HAL_ADC_Init+0x1ba>
 800acdc:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800acde:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ace6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800ace8:	4313      	orrs	r3, r2
 800acea:	61bb      	str	r3, [r7, #24]
 800acec:	e00e      	b.n	800ad0c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	7e5b      	ldrb	r3, [r3, #25]
 800acf2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800acf8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800acfe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad06:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d106      	bne.n	800ad24 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	045b      	lsls	r3, r3, #17
 800ad1e:	69ba      	ldr	r2, [r7, #24]
 800ad20:	4313      	orrs	r3, r2
 800ad22:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d009      	beq.n	800ad40 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad30:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad38:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800ad3a:	69ba      	ldr	r2, [r7, #24]
 800ad3c:	4313      	orrs	r3, r2
 800ad3e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a26      	ldr	r2, [pc, #152]	; (800ade0 <HAL_ADC_Init+0x2bc>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d115      	bne.n	800ad76 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	68da      	ldr	r2, [r3, #12]
 800ad50:	4b26      	ldr	r3, [pc, #152]	; (800adec <HAL_ADC_Init+0x2c8>)
 800ad52:	4013      	ands	r3, r2
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	6812      	ldr	r2, [r2, #0]
 800ad58:	69b9      	ldr	r1, [r7, #24]
 800ad5a:	430b      	orrs	r3, r1
 800ad5c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	691b      	ldr	r3, [r3, #16]
 800ad64:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	430a      	orrs	r2, r1
 800ad72:	611a      	str	r2, [r3, #16]
 800ad74:	e009      	b.n	800ad8a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	68da      	ldr	r2, [r3, #12]
 800ad7c:	4b1c      	ldr	r3, [pc, #112]	; (800adf0 <HAL_ADC_Init+0x2cc>)
 800ad7e:	4013      	ands	r3, r2
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	6812      	ldr	r2, [r2, #0]
 800ad84:	69b9      	ldr	r1, [r7, #24]
 800ad86:	430b      	orrs	r3, r1
 800ad88:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7ff fea1 	bl	800aad6 <LL_ADC_REG_IsConversionOngoing>
 800ad94:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7ff feae 	bl	800aafc <LL_ADC_INJ_IsConversionOngoing>
 800ada0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	f040 808e 	bne.w	800aec6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2b00      	cmp	r3, #0
 800adae:	f040 808a 	bne.w	800aec6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a0a      	ldr	r2, [pc, #40]	; (800ade0 <HAL_ADC_Init+0x2bc>)
 800adb8:	4293      	cmp	r3, r2
 800adba:	d11b      	bne.n	800adf4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	7e1b      	ldrb	r3, [r3, #24]
 800adc0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800adc8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800adca:	4313      	orrs	r3, r2
 800adcc:	61bb      	str	r3, [r7, #24]
 800adce:	e018      	b.n	800ae02 <HAL_ADC_Init+0x2de>
 800add0:	24000050 	.word	0x24000050
 800add4:	053e2d63 	.word	0x053e2d63
 800add8:	40022000 	.word	0x40022000
 800addc:	40022100 	.word	0x40022100
 800ade0:	58026000 	.word	0x58026000
 800ade4:	40022300 	.word	0x40022300
 800ade8:	58026300 	.word	0x58026300
 800adec:	fff04007 	.word	0xfff04007
 800adf0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	7e1b      	ldrb	r3, [r3, #24]
 800adf8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800adfe:	4313      	orrs	r3, r2
 800ae00:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	68da      	ldr	r2, [r3, #12]
 800ae08:	4b46      	ldr	r3, [pc, #280]	; (800af24 <HAL_ADC_Init+0x400>)
 800ae0a:	4013      	ands	r3, r2
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	6812      	ldr	r2, [r2, #0]
 800ae10:	69b9      	ldr	r1, [r7, #24]
 800ae12:	430b      	orrs	r3, r1
 800ae14:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae1c:	2b01      	cmp	r3, #1
 800ae1e:	d137      	bne.n	800ae90 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae24:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	4a3f      	ldr	r2, [pc, #252]	; (800af28 <HAL_ADC_Init+0x404>)
 800ae2c:	4293      	cmp	r3, r2
 800ae2e:	d116      	bne.n	800ae5e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	691a      	ldr	r2, [r3, #16]
 800ae36:	4b3d      	ldr	r3, [pc, #244]	; (800af2c <HAL_ADC_Init+0x408>)
 800ae38:	4013      	ands	r3, r2
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ae42:	4311      	orrs	r1, r2
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ae48:	4311      	orrs	r1, r2
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ae4e:	430a      	orrs	r2, r1
 800ae50:	431a      	orrs	r2, r3
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f042 0201 	orr.w	r2, r2, #1
 800ae5a:	611a      	str	r2, [r3, #16]
 800ae5c:	e020      	b.n	800aea0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	691a      	ldr	r2, [r3, #16]
 800ae64:	4b32      	ldr	r3, [pc, #200]	; (800af30 <HAL_ADC_Init+0x40c>)
 800ae66:	4013      	ands	r3, r2
 800ae68:	687a      	ldr	r2, [r7, #4]
 800ae6a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ae6c:	3a01      	subs	r2, #1
 800ae6e:	0411      	lsls	r1, r2, #16
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ae74:	4311      	orrs	r1, r2
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ae7a:	4311      	orrs	r1, r2
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ae80:	430a      	orrs	r2, r1
 800ae82:	431a      	orrs	r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f042 0201 	orr.w	r2, r2, #1
 800ae8c:	611a      	str	r2, [r3, #16]
 800ae8e:	e007      	b.n	800aea0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	691a      	ldr	r2, [r3, #16]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f022 0201 	bic.w	r2, r2, #1
 800ae9e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	691b      	ldr	r3, [r3, #16]
 800aea6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	430a      	orrs	r2, r1
 800aeb4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a1b      	ldr	r2, [pc, #108]	; (800af28 <HAL_ADC_Init+0x404>)
 800aebc:	4293      	cmp	r3, r2
 800aebe:	d002      	beq.n	800aec6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 fd63 	bl	800b98c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	691b      	ldr	r3, [r3, #16]
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d10c      	bne.n	800aee8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aed4:	f023 010f 	bic.w	r1, r3, #15
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	69db      	ldr	r3, [r3, #28]
 800aedc:	1e5a      	subs	r2, r3, #1
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	430a      	orrs	r2, r1
 800aee4:	631a      	str	r2, [r3, #48]	; 0x30
 800aee6:	e007      	b.n	800aef8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f022 020f 	bic.w	r2, r2, #15
 800aef6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aefc:	f023 0303 	bic.w	r3, r3, #3
 800af00:	f043 0201 	orr.w	r2, r3, #1
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	661a      	str	r2, [r3, #96]	; 0x60
 800af08:	e007      	b.n	800af1a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af0e:	f043 0210 	orr.w	r2, r3, #16
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800af16:	2301      	movs	r3, #1
 800af18:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800af1a:	7ffb      	ldrb	r3, [r7, #31]
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3724      	adds	r7, #36	; 0x24
 800af20:	46bd      	mov	sp, r7
 800af22:	bd90      	pop	{r4, r7, pc}
 800af24:	ffffbffc 	.word	0xffffbffc
 800af28:	58026000 	.word	0x58026000
 800af2c:	fc00f81f 	.word	0xfc00f81f
 800af30:	fc00f81e 	.word	0xfc00f81e

0800af34 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800af34:	b590      	push	{r4, r7, lr}
 800af36:	b0b9      	sub	sp, #228	; 0xe4
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800af3e:	2300      	movs	r3, #0
 800af40:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800af44:	2300      	movs	r3, #0
 800af46:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af4e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	4ab3      	ldr	r2, [pc, #716]	; (800b224 <HAL_ADC_ConfigChannel+0x2f0>)
 800af56:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d102      	bne.n	800af68 <HAL_ADC_ConfigChannel+0x34>
 800af62:	2302      	movs	r3, #2
 800af64:	f000 bcfa 	b.w	800b95c <HAL_ADC_ConfigChannel+0xa28>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4618      	mov	r0, r3
 800af76:	f7ff fdae 	bl	800aad6 <LL_ADC_REG_IsConversionOngoing>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	f040 84de 	bne.w	800b93e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4aa8      	ldr	r2, [pc, #672]	; (800b228 <HAL_ADC_ConfigChannel+0x2f4>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d033      	beq.n	800aff4 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af94:	2b00      	cmp	r3, #0
 800af96:	d108      	bne.n	800afaa <HAL_ADC_ConfigChannel+0x76>
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	0e9b      	lsrs	r3, r3, #26
 800af9e:	f003 031f 	and.w	r3, r3, #31
 800afa2:	2201      	movs	r2, #1
 800afa4:	fa02 f303 	lsl.w	r3, r2, r3
 800afa8:	e01d      	b.n	800afe6 <HAL_ADC_ConfigChannel+0xb2>
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800afb6:	fa93 f3a3 	rbit	r3, r3
 800afba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800afbe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800afc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800afc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d101      	bne.n	800afd2 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800afce:	2320      	movs	r3, #32
 800afd0:	e004      	b.n	800afdc <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800afd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800afd6:	fab3 f383 	clz	r3, r3
 800afda:	b2db      	uxtb	r3, r3
 800afdc:	f003 031f 	and.w	r3, r3, #31
 800afe0:	2201      	movs	r2, #1
 800afe2:	fa02 f303 	lsl.w	r3, r2, r3
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	6812      	ldr	r2, [r2, #0]
 800afea:	69d1      	ldr	r1, [r2, #28]
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	6812      	ldr	r2, [r2, #0]
 800aff0:	430b      	orrs	r3, r1
 800aff2:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6818      	ldr	r0, [r3, #0]
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	6859      	ldr	r1, [r3, #4]
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	461a      	mov	r2, r3
 800b002:	f7ff fc6f 	bl	800a8e4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7ff fd63 	bl	800aad6 <LL_ADC_REG_IsConversionOngoing>
 800b010:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	4618      	mov	r0, r3
 800b01a:	f7ff fd6f 	bl	800aafc <LL_ADC_INJ_IsConversionOngoing>
 800b01e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b022:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b026:	2b00      	cmp	r3, #0
 800b028:	f040 8270 	bne.w	800b50c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b02c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b030:	2b00      	cmp	r3, #0
 800b032:	f040 826b 	bne.w	800b50c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6818      	ldr	r0, [r3, #0]
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	6819      	ldr	r1, [r3, #0]
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	461a      	mov	r2, r3
 800b044:	f7ff fc7a 	bl	800a93c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a76      	ldr	r2, [pc, #472]	; (800b228 <HAL_ADC_ConfigChannel+0x2f4>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d10d      	bne.n	800b06e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	695a      	ldr	r2, [r3, #20]
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	08db      	lsrs	r3, r3, #3
 800b05e:	f003 0303 	and.w	r3, r3, #3
 800b062:	005b      	lsls	r3, r3, #1
 800b064:	fa02 f303 	lsl.w	r3, r2, r3
 800b068:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b06c:	e032      	b.n	800b0d4 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800b06e:	4b6f      	ldr	r3, [pc, #444]	; (800b22c <HAL_ADC_ConfigChannel+0x2f8>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b076:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b07a:	d10b      	bne.n	800b094 <HAL_ADC_ConfigChannel+0x160>
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	695a      	ldr	r2, [r3, #20]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	68db      	ldr	r3, [r3, #12]
 800b086:	089b      	lsrs	r3, r3, #2
 800b088:	f003 0307 	and.w	r3, r3, #7
 800b08c:	005b      	lsls	r3, r3, #1
 800b08e:	fa02 f303 	lsl.w	r3, r2, r3
 800b092:	e01d      	b.n	800b0d0 <HAL_ADC_ConfigChannel+0x19c>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	f003 0310 	and.w	r3, r3, #16
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d10b      	bne.n	800b0ba <HAL_ADC_ConfigChannel+0x186>
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	695a      	ldr	r2, [r3, #20]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	68db      	ldr	r3, [r3, #12]
 800b0ac:	089b      	lsrs	r3, r3, #2
 800b0ae:	f003 0307 	and.w	r3, r3, #7
 800b0b2:	005b      	lsls	r3, r3, #1
 800b0b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b0b8:	e00a      	b.n	800b0d0 <HAL_ADC_ConfigChannel+0x19c>
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	695a      	ldr	r2, [r3, #20]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	68db      	ldr	r3, [r3, #12]
 800b0c4:	089b      	lsrs	r3, r3, #2
 800b0c6:	f003 0304 	and.w	r3, r3, #4
 800b0ca:	005b      	lsls	r3, r3, #1
 800b0cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b0d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	2b04      	cmp	r3, #4
 800b0da:	d048      	beq.n	800b16e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6818      	ldr	r0, [r3, #0]
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	6919      	ldr	r1, [r3, #16]
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0ec:	f7ff fb08 	bl	800a700 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a4c      	ldr	r2, [pc, #304]	; (800b228 <HAL_ADC_ConfigChannel+0x2f4>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d119      	bne.n	800b12e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6818      	ldr	r0, [r3, #0]
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	6919      	ldr	r1, [r3, #16]
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	69db      	ldr	r3, [r3, #28]
 800b106:	461a      	mov	r2, r3
 800b108:	f7ff fba0 	bl	800a84c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6818      	ldr	r0, [r3, #0]
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	6919      	ldr	r1, [r3, #16]
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b11a:	2b01      	cmp	r3, #1
 800b11c:	d102      	bne.n	800b124 <HAL_ADC_ConfigChannel+0x1f0>
 800b11e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b122:	e000      	b.n	800b126 <HAL_ADC_ConfigChannel+0x1f2>
 800b124:	2300      	movs	r3, #0
 800b126:	461a      	mov	r2, r3
 800b128:	f7ff fb6e 	bl	800a808 <LL_ADC_SetOffsetSaturation>
 800b12c:	e1ee      	b.n	800b50c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6818      	ldr	r0, [r3, #0]
 800b132:	683b      	ldr	r3, [r7, #0]
 800b134:	6919      	ldr	r1, [r3, #16]
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d102      	bne.n	800b146 <HAL_ADC_ConfigChannel+0x212>
 800b140:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b144:	e000      	b.n	800b148 <HAL_ADC_ConfigChannel+0x214>
 800b146:	2300      	movs	r3, #0
 800b148:	461a      	mov	r2, r3
 800b14a:	f7ff fb3b 	bl	800a7c4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	6818      	ldr	r0, [r3, #0]
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	6919      	ldr	r1, [r3, #16]
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	7e1b      	ldrb	r3, [r3, #24]
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d102      	bne.n	800b164 <HAL_ADC_ConfigChannel+0x230>
 800b15e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b162:	e000      	b.n	800b166 <HAL_ADC_ConfigChannel+0x232>
 800b164:	2300      	movs	r3, #0
 800b166:	461a      	mov	r2, r3
 800b168:	f7ff fb12 	bl	800a790 <LL_ADC_SetDataRightShift>
 800b16c:	e1ce      	b.n	800b50c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a2d      	ldr	r2, [pc, #180]	; (800b228 <HAL_ADC_ConfigChannel+0x2f4>)
 800b174:	4293      	cmp	r3, r2
 800b176:	f040 8181 	bne.w	800b47c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2100      	movs	r1, #0
 800b180:	4618      	mov	r0, r3
 800b182:	f7ff faef 	bl	800a764 <LL_ADC_GetOffsetChannel>
 800b186:	4603      	mov	r3, r0
 800b188:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d10a      	bne.n	800b1a6 <HAL_ADC_ConfigChannel+0x272>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	2100      	movs	r1, #0
 800b196:	4618      	mov	r0, r3
 800b198:	f7ff fae4 	bl	800a764 <LL_ADC_GetOffsetChannel>
 800b19c:	4603      	mov	r3, r0
 800b19e:	0e9b      	lsrs	r3, r3, #26
 800b1a0:	f003 021f 	and.w	r2, r3, #31
 800b1a4:	e01e      	b.n	800b1e4 <HAL_ADC_ConfigChannel+0x2b0>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2100      	movs	r1, #0
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7ff fad9 	bl	800a764 <LL_ADC_GetOffsetChannel>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b1b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b1bc:	fa93 f3a3 	rbit	r3, r3
 800b1c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 800b1c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b1c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800b1cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d101      	bne.n	800b1d8 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 800b1d4:	2320      	movs	r3, #32
 800b1d6:	e004      	b.n	800b1e2 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 800b1d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b1dc:	fab3 f383 	clz	r3, r3
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d105      	bne.n	800b1fc <HAL_ADC_ConfigChannel+0x2c8>
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	0e9b      	lsrs	r3, r3, #26
 800b1f6:	f003 031f 	and.w	r3, r3, #31
 800b1fa:	e01e      	b.n	800b23a <HAL_ADC_ConfigChannel+0x306>
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b204:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b208:	fa93 f3a3 	rbit	r3, r3
 800b20c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800b210:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b214:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800b218:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d107      	bne.n	800b230 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 800b220:	2320      	movs	r3, #32
 800b222:	e00a      	b.n	800b23a <HAL_ADC_ConfigChannel+0x306>
 800b224:	47ff0000 	.word	0x47ff0000
 800b228:	58026000 	.word	0x58026000
 800b22c:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 800b230:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b234:	fab3 f383 	clz	r3, r3
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d106      	bne.n	800b24c <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	2200      	movs	r2, #0
 800b244:	2100      	movs	r1, #0
 800b246:	4618      	mov	r0, r3
 800b248:	f7ff fb22 	bl	800a890 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2101      	movs	r1, #1
 800b252:	4618      	mov	r0, r3
 800b254:	f7ff fa86 	bl	800a764 <LL_ADC_GetOffsetChannel>
 800b258:	4603      	mov	r3, r0
 800b25a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d10a      	bne.n	800b278 <HAL_ADC_ConfigChannel+0x344>
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	2101      	movs	r1, #1
 800b268:	4618      	mov	r0, r3
 800b26a:	f7ff fa7b 	bl	800a764 <LL_ADC_GetOffsetChannel>
 800b26e:	4603      	mov	r3, r0
 800b270:	0e9b      	lsrs	r3, r3, #26
 800b272:	f003 021f 	and.w	r2, r3, #31
 800b276:	e01e      	b.n	800b2b6 <HAL_ADC_ConfigChannel+0x382>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	2101      	movs	r1, #1
 800b27e:	4618      	mov	r0, r3
 800b280:	f7ff fa70 	bl	800a764 <LL_ADC_GetOffsetChannel>
 800b284:	4603      	mov	r3, r0
 800b286:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b28a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b28e:	fa93 f3a3 	rbit	r3, r3
 800b292:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800b296:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b29a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800b29e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d101      	bne.n	800b2aa <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800b2a6:	2320      	movs	r3, #32
 800b2a8:	e004      	b.n	800b2b4 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800b2aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b2ae:	fab3 f383 	clz	r3, r3
 800b2b2:	b2db      	uxtb	r3, r3
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d105      	bne.n	800b2ce <HAL_ADC_ConfigChannel+0x39a>
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	0e9b      	lsrs	r3, r3, #26
 800b2c8:	f003 031f 	and.w	r3, r3, #31
 800b2cc:	e018      	b.n	800b300 <HAL_ADC_ConfigChannel+0x3cc>
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b2d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b2da:	fa93 f3a3 	rbit	r3, r3
 800b2de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800b2e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b2e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800b2ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d101      	bne.n	800b2f6 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800b2f2:	2320      	movs	r3, #32
 800b2f4:	e004      	b.n	800b300 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800b2f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b2fa:	fab3 f383 	clz	r3, r3
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	429a      	cmp	r2, r3
 800b302:	d106      	bne.n	800b312 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2200      	movs	r2, #0
 800b30a:	2101      	movs	r1, #1
 800b30c:	4618      	mov	r0, r3
 800b30e:	f7ff fabf 	bl	800a890 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	2102      	movs	r1, #2
 800b318:	4618      	mov	r0, r3
 800b31a:	f7ff fa23 	bl	800a764 <LL_ADC_GetOffsetChannel>
 800b31e:	4603      	mov	r3, r0
 800b320:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b324:	2b00      	cmp	r3, #0
 800b326:	d10a      	bne.n	800b33e <HAL_ADC_ConfigChannel+0x40a>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2102      	movs	r1, #2
 800b32e:	4618      	mov	r0, r3
 800b330:	f7ff fa18 	bl	800a764 <LL_ADC_GetOffsetChannel>
 800b334:	4603      	mov	r3, r0
 800b336:	0e9b      	lsrs	r3, r3, #26
 800b338:	f003 021f 	and.w	r2, r3, #31
 800b33c:	e01e      	b.n	800b37c <HAL_ADC_ConfigChannel+0x448>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	2102      	movs	r1, #2
 800b344:	4618      	mov	r0, r3
 800b346:	f7ff fa0d 	bl	800a764 <LL_ADC_GetOffsetChannel>
 800b34a:	4603      	mov	r3, r0
 800b34c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b350:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b354:	fa93 f3a3 	rbit	r3, r3
 800b358:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800b35c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b360:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800b364:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d101      	bne.n	800b370 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800b36c:	2320      	movs	r3, #32
 800b36e:	e004      	b.n	800b37a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800b370:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b374:	fab3 f383 	clz	r3, r3
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	461a      	mov	r2, r3
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b384:	2b00      	cmp	r3, #0
 800b386:	d105      	bne.n	800b394 <HAL_ADC_ConfigChannel+0x460>
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	0e9b      	lsrs	r3, r3, #26
 800b38e:	f003 031f 	and.w	r3, r3, #31
 800b392:	e014      	b.n	800b3be <HAL_ADC_ConfigChannel+0x48a>
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b39a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b39c:	fa93 f3a3 	rbit	r3, r3
 800b3a0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800b3a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b3a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800b3a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d101      	bne.n	800b3b4 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 800b3b0:	2320      	movs	r3, #32
 800b3b2:	e004      	b.n	800b3be <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 800b3b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b3b8:	fab3 f383 	clz	r3, r3
 800b3bc:	b2db      	uxtb	r3, r3
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d106      	bne.n	800b3d0 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	2102      	movs	r1, #2
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7ff fa60 	bl	800a890 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	2103      	movs	r1, #3
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7ff f9c4 	bl	800a764 <LL_ADC_GetOffsetChannel>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d10a      	bne.n	800b3fc <HAL_ADC_ConfigChannel+0x4c8>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2103      	movs	r1, #3
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7ff f9b9 	bl	800a764 <LL_ADC_GetOffsetChannel>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	0e9b      	lsrs	r3, r3, #26
 800b3f6:	f003 021f 	and.w	r2, r3, #31
 800b3fa:	e017      	b.n	800b42c <HAL_ADC_ConfigChannel+0x4f8>
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2103      	movs	r1, #3
 800b402:	4618      	mov	r0, r3
 800b404:	f7ff f9ae 	bl	800a764 <LL_ADC_GetOffsetChannel>
 800b408:	4603      	mov	r3, r0
 800b40a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b40c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b40e:	fa93 f3a3 	rbit	r3, r3
 800b412:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800b414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b416:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800b418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d101      	bne.n	800b422 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800b41e:	2320      	movs	r3, #32
 800b420:	e003      	b.n	800b42a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800b422:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b424:	fab3 f383 	clz	r3, r3
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	461a      	mov	r2, r3
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b434:	2b00      	cmp	r3, #0
 800b436:	d105      	bne.n	800b444 <HAL_ADC_ConfigChannel+0x510>
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	0e9b      	lsrs	r3, r3, #26
 800b43e:	f003 031f 	and.w	r3, r3, #31
 800b442:	e011      	b.n	800b468 <HAL_ADC_ConfigChannel+0x534>
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b44a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b44c:	fa93 f3a3 	rbit	r3, r3
 800b450:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800b452:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b454:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800b456:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d101      	bne.n	800b460 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 800b45c:	2320      	movs	r3, #32
 800b45e:	e003      	b.n	800b468 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 800b460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b462:	fab3 f383 	clz	r3, r3
 800b466:	b2db      	uxtb	r3, r3
 800b468:	429a      	cmp	r2, r3
 800b46a:	d14f      	bne.n	800b50c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2200      	movs	r2, #0
 800b472:	2103      	movs	r1, #3
 800b474:	4618      	mov	r0, r3
 800b476:	f7ff fa0b 	bl	800a890 <LL_ADC_SetOffsetState>
 800b47a:	e047      	b.n	800b50c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b482:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	069b      	lsls	r3, r3, #26
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d107      	bne.n	800b4a0 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800b49e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	069b      	lsls	r3, r3, #26
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d107      	bne.n	800b4c4 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800b4c2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b4ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	069b      	lsls	r3, r3, #26
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d107      	bne.n	800b4e8 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800b4e6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b4ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	069b      	lsls	r3, r3, #26
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d107      	bne.n	800b50c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800b50a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4618      	mov	r0, r3
 800b512:	f7ff facd 	bl	800aab0 <LL_ADC_IsEnabled>
 800b516:	4603      	mov	r3, r0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	f040 8219 	bne.w	800b950 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6818      	ldr	r0, [r3, #0]
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	6819      	ldr	r1, [r3, #0]
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	68db      	ldr	r3, [r3, #12]
 800b52a:	461a      	mov	r2, r3
 800b52c:	f7ff fa32 	bl	800a994 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	4aa1      	ldr	r2, [pc, #644]	; (800b7bc <HAL_ADC_ConfigChannel+0x888>)
 800b536:	4293      	cmp	r3, r2
 800b538:	f040 812e 	bne.w	800b798 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d10b      	bne.n	800b564 <HAL_ADC_ConfigChannel+0x630>
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	0e9b      	lsrs	r3, r3, #26
 800b552:	3301      	adds	r3, #1
 800b554:	f003 031f 	and.w	r3, r3, #31
 800b558:	2b09      	cmp	r3, #9
 800b55a:	bf94      	ite	ls
 800b55c:	2301      	movls	r3, #1
 800b55e:	2300      	movhi	r3, #0
 800b560:	b2db      	uxtb	r3, r3
 800b562:	e019      	b.n	800b598 <HAL_ADC_ConfigChannel+0x664>
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b56a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b56c:	fa93 f3a3 	rbit	r3, r3
 800b570:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800b572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b574:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800b576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d101      	bne.n	800b580 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800b57c:	2320      	movs	r3, #32
 800b57e:	e003      	b.n	800b588 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 800b580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b582:	fab3 f383 	clz	r3, r3
 800b586:	b2db      	uxtb	r3, r3
 800b588:	3301      	adds	r3, #1
 800b58a:	f003 031f 	and.w	r3, r3, #31
 800b58e:	2b09      	cmp	r3, #9
 800b590:	bf94      	ite	ls
 800b592:	2301      	movls	r3, #1
 800b594:	2300      	movhi	r3, #0
 800b596:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d079      	beq.n	800b690 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d107      	bne.n	800b5b8 <HAL_ADC_ConfigChannel+0x684>
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	0e9b      	lsrs	r3, r3, #26
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	069b      	lsls	r3, r3, #26
 800b5b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b5b6:	e015      	b.n	800b5e4 <HAL_ADC_ConfigChannel+0x6b0>
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b5be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5c0:	fa93 f3a3 	rbit	r3, r3
 800b5c4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800b5c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5c8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800b5ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d101      	bne.n	800b5d4 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 800b5d0:	2320      	movs	r3, #32
 800b5d2:	e003      	b.n	800b5dc <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 800b5d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5d6:	fab3 f383 	clz	r3, r3
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	3301      	adds	r3, #1
 800b5de:	069b      	lsls	r3, r3, #26
 800b5e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d109      	bne.n	800b604 <HAL_ADC_ConfigChannel+0x6d0>
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	0e9b      	lsrs	r3, r3, #26
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	f003 031f 	and.w	r3, r3, #31
 800b5fc:	2101      	movs	r1, #1
 800b5fe:	fa01 f303 	lsl.w	r3, r1, r3
 800b602:	e017      	b.n	800b634 <HAL_ADC_ConfigChannel+0x700>
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b60a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b60c:	fa93 f3a3 	rbit	r3, r3
 800b610:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800b612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b614:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800b616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d101      	bne.n	800b620 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 800b61c:	2320      	movs	r3, #32
 800b61e:	e003      	b.n	800b628 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 800b620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b622:	fab3 f383 	clz	r3, r3
 800b626:	b2db      	uxtb	r3, r3
 800b628:	3301      	adds	r3, #1
 800b62a:	f003 031f 	and.w	r3, r3, #31
 800b62e:	2101      	movs	r1, #1
 800b630:	fa01 f303 	lsl.w	r3, r1, r3
 800b634:	ea42 0103 	orr.w	r1, r2, r3
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b640:	2b00      	cmp	r3, #0
 800b642:	d10a      	bne.n	800b65a <HAL_ADC_ConfigChannel+0x726>
 800b644:	683b      	ldr	r3, [r7, #0]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	0e9b      	lsrs	r3, r3, #26
 800b64a:	3301      	adds	r3, #1
 800b64c:	f003 021f 	and.w	r2, r3, #31
 800b650:	4613      	mov	r3, r2
 800b652:	005b      	lsls	r3, r3, #1
 800b654:	4413      	add	r3, r2
 800b656:	051b      	lsls	r3, r3, #20
 800b658:	e018      	b.n	800b68c <HAL_ADC_ConfigChannel+0x758>
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b662:	fa93 f3a3 	rbit	r3, r3
 800b666:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800b668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800b66c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d101      	bne.n	800b676 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800b672:	2320      	movs	r3, #32
 800b674:	e003      	b.n	800b67e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800b676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b678:	fab3 f383 	clz	r3, r3
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	3301      	adds	r3, #1
 800b680:	f003 021f 	and.w	r2, r3, #31
 800b684:	4613      	mov	r3, r2
 800b686:	005b      	lsls	r3, r3, #1
 800b688:	4413      	add	r3, r2
 800b68a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b68c:	430b      	orrs	r3, r1
 800b68e:	e07e      	b.n	800b78e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d107      	bne.n	800b6ac <HAL_ADC_ConfigChannel+0x778>
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	0e9b      	lsrs	r3, r3, #26
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	069b      	lsls	r3, r3, #26
 800b6a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b6aa:	e015      	b.n	800b6d8 <HAL_ADC_ConfigChannel+0x7a4>
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6b4:	fa93 f3a3 	rbit	r3, r3
 800b6b8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800b6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800b6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d101      	bne.n	800b6c8 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 800b6c4:	2320      	movs	r3, #32
 800b6c6:	e003      	b.n	800b6d0 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 800b6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ca:	fab3 f383 	clz	r3, r3
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	069b      	lsls	r3, r3, #26
 800b6d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d109      	bne.n	800b6f8 <HAL_ADC_ConfigChannel+0x7c4>
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	0e9b      	lsrs	r3, r3, #26
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	f003 031f 	and.w	r3, r3, #31
 800b6f0:	2101      	movs	r1, #1
 800b6f2:	fa01 f303 	lsl.w	r3, r1, r3
 800b6f6:	e017      	b.n	800b728 <HAL_ADC_ConfigChannel+0x7f4>
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6fe:	69fb      	ldr	r3, [r7, #28]
 800b700:	fa93 f3a3 	rbit	r3, r3
 800b704:	61bb      	str	r3, [r7, #24]
  return result;
 800b706:	69bb      	ldr	r3, [r7, #24]
 800b708:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800b70a:	6a3b      	ldr	r3, [r7, #32]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d101      	bne.n	800b714 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 800b710:	2320      	movs	r3, #32
 800b712:	e003      	b.n	800b71c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 800b714:	6a3b      	ldr	r3, [r7, #32]
 800b716:	fab3 f383 	clz	r3, r3
 800b71a:	b2db      	uxtb	r3, r3
 800b71c:	3301      	adds	r3, #1
 800b71e:	f003 031f 	and.w	r3, r3, #31
 800b722:	2101      	movs	r1, #1
 800b724:	fa01 f303 	lsl.w	r3, r1, r3
 800b728:	ea42 0103 	orr.w	r1, r2, r3
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b734:	2b00      	cmp	r3, #0
 800b736:	d10d      	bne.n	800b754 <HAL_ADC_ConfigChannel+0x820>
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	0e9b      	lsrs	r3, r3, #26
 800b73e:	3301      	adds	r3, #1
 800b740:	f003 021f 	and.w	r2, r3, #31
 800b744:	4613      	mov	r3, r2
 800b746:	005b      	lsls	r3, r3, #1
 800b748:	4413      	add	r3, r2
 800b74a:	3b1e      	subs	r3, #30
 800b74c:	051b      	lsls	r3, r3, #20
 800b74e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b752:	e01b      	b.n	800b78c <HAL_ADC_ConfigChannel+0x858>
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	fa93 f3a3 	rbit	r3, r3
 800b760:	60fb      	str	r3, [r7, #12]
  return result;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d101      	bne.n	800b770 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 800b76c:	2320      	movs	r3, #32
 800b76e:	e003      	b.n	800b778 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	fab3 f383 	clz	r3, r3
 800b776:	b2db      	uxtb	r3, r3
 800b778:	3301      	adds	r3, #1
 800b77a:	f003 021f 	and.w	r2, r3, #31
 800b77e:	4613      	mov	r3, r2
 800b780:	005b      	lsls	r3, r3, #1
 800b782:	4413      	add	r3, r2
 800b784:	3b1e      	subs	r3, #30
 800b786:	051b      	lsls	r3, r3, #20
 800b788:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b78c:	430b      	orrs	r3, r1
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	6892      	ldr	r2, [r2, #8]
 800b792:	4619      	mov	r1, r3
 800b794:	f7ff f8d2 	bl	800a93c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	f280 80d7 	bge.w	800b950 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a06      	ldr	r2, [pc, #24]	; (800b7c0 <HAL_ADC_ConfigChannel+0x88c>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d004      	beq.n	800b7b6 <HAL_ADC_ConfigChannel+0x882>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a04      	ldr	r2, [pc, #16]	; (800b7c4 <HAL_ADC_ConfigChannel+0x890>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d10a      	bne.n	800b7cc <HAL_ADC_ConfigChannel+0x898>
 800b7b6:	4b04      	ldr	r3, [pc, #16]	; (800b7c8 <HAL_ADC_ConfigChannel+0x894>)
 800b7b8:	e009      	b.n	800b7ce <HAL_ADC_ConfigChannel+0x89a>
 800b7ba:	bf00      	nop
 800b7bc:	47ff0000 	.word	0x47ff0000
 800b7c0:	40022000 	.word	0x40022000
 800b7c4:	40022100 	.word	0x40022100
 800b7c8:	40022300 	.word	0x40022300
 800b7cc:	4b65      	ldr	r3, [pc, #404]	; (800b964 <HAL_ADC_ConfigChannel+0xa30>)
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7fe ff88 	bl	800a6e4 <LL_ADC_GetCommonPathInternalCh>
 800b7d4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a62      	ldr	r2, [pc, #392]	; (800b968 <HAL_ADC_ConfigChannel+0xa34>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d004      	beq.n	800b7ec <HAL_ADC_ConfigChannel+0x8b8>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a61      	ldr	r2, [pc, #388]	; (800b96c <HAL_ADC_ConfigChannel+0xa38>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d10e      	bne.n	800b80a <HAL_ADC_ConfigChannel+0x8d6>
 800b7ec:	485e      	ldr	r0, [pc, #376]	; (800b968 <HAL_ADC_ConfigChannel+0xa34>)
 800b7ee:	f7ff f95f 	bl	800aab0 <LL_ADC_IsEnabled>
 800b7f2:	4604      	mov	r4, r0
 800b7f4:	485d      	ldr	r0, [pc, #372]	; (800b96c <HAL_ADC_ConfigChannel+0xa38>)
 800b7f6:	f7ff f95b 	bl	800aab0 <LL_ADC_IsEnabled>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	4323      	orrs	r3, r4
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	bf0c      	ite	eq
 800b802:	2301      	moveq	r3, #1
 800b804:	2300      	movne	r3, #0
 800b806:	b2db      	uxtb	r3, r3
 800b808:	e008      	b.n	800b81c <HAL_ADC_ConfigChannel+0x8e8>
 800b80a:	4859      	ldr	r0, [pc, #356]	; (800b970 <HAL_ADC_ConfigChannel+0xa3c>)
 800b80c:	f7ff f950 	bl	800aab0 <LL_ADC_IsEnabled>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	bf0c      	ite	eq
 800b816:	2301      	moveq	r3, #1
 800b818:	2300      	movne	r3, #0
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	f000 8084 	beq.w	800b92a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	4a53      	ldr	r2, [pc, #332]	; (800b974 <HAL_ADC_ConfigChannel+0xa40>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d132      	bne.n	800b892 <HAL_ADC_ConfigChannel+0x95e>
 800b82c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b830:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b834:	2b00      	cmp	r3, #0
 800b836:	d12c      	bne.n	800b892 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a4c      	ldr	r2, [pc, #304]	; (800b970 <HAL_ADC_ConfigChannel+0xa3c>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	f040 8086 	bne.w	800b950 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4a47      	ldr	r2, [pc, #284]	; (800b968 <HAL_ADC_ConfigChannel+0xa34>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d004      	beq.n	800b858 <HAL_ADC_ConfigChannel+0x924>
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a46      	ldr	r2, [pc, #280]	; (800b96c <HAL_ADC_ConfigChannel+0xa38>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d101      	bne.n	800b85c <HAL_ADC_ConfigChannel+0x928>
 800b858:	4a47      	ldr	r2, [pc, #284]	; (800b978 <HAL_ADC_ConfigChannel+0xa44>)
 800b85a:	e000      	b.n	800b85e <HAL_ADC_ConfigChannel+0x92a>
 800b85c:	4a41      	ldr	r2, [pc, #260]	; (800b964 <HAL_ADC_ConfigChannel+0xa30>)
 800b85e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b862:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b866:	4619      	mov	r1, r3
 800b868:	4610      	mov	r0, r2
 800b86a:	f7fe ff28 	bl	800a6be <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b86e:	4b43      	ldr	r3, [pc, #268]	; (800b97c <HAL_ADC_ConfigChannel+0xa48>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	099b      	lsrs	r3, r3, #6
 800b874:	4a42      	ldr	r2, [pc, #264]	; (800b980 <HAL_ADC_ConfigChannel+0xa4c>)
 800b876:	fba2 2303 	umull	r2, r3, r2, r3
 800b87a:	099b      	lsrs	r3, r3, #6
 800b87c:	3301      	adds	r3, #1
 800b87e:	005b      	lsls	r3, r3, #1
 800b880:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800b882:	e002      	b.n	800b88a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	3b01      	subs	r3, #1
 800b888:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d1f9      	bne.n	800b884 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b890:	e05e      	b.n	800b950 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a3b      	ldr	r2, [pc, #236]	; (800b984 <HAL_ADC_ConfigChannel+0xa50>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d120      	bne.n	800b8de <HAL_ADC_ConfigChannel+0x9aa>
 800b89c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b8a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d11a      	bne.n	800b8de <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	4a30      	ldr	r2, [pc, #192]	; (800b970 <HAL_ADC_ConfigChannel+0xa3c>)
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d14e      	bne.n	800b950 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4a2c      	ldr	r2, [pc, #176]	; (800b968 <HAL_ADC_ConfigChannel+0xa34>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d004      	beq.n	800b8c6 <HAL_ADC_ConfigChannel+0x992>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4a2a      	ldr	r2, [pc, #168]	; (800b96c <HAL_ADC_ConfigChannel+0xa38>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d101      	bne.n	800b8ca <HAL_ADC_ConfigChannel+0x996>
 800b8c6:	4a2c      	ldr	r2, [pc, #176]	; (800b978 <HAL_ADC_ConfigChannel+0xa44>)
 800b8c8:	e000      	b.n	800b8cc <HAL_ADC_ConfigChannel+0x998>
 800b8ca:	4a26      	ldr	r2, [pc, #152]	; (800b964 <HAL_ADC_ConfigChannel+0xa30>)
 800b8cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b8d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	4610      	mov	r0, r2
 800b8d8:	f7fe fef1 	bl	800a6be <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b8dc:	e038      	b.n	800b950 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a29      	ldr	r2, [pc, #164]	; (800b988 <HAL_ADC_ConfigChannel+0xa54>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d133      	bne.n	800b950 <HAL_ADC_ConfigChannel+0xa1c>
 800b8e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b8ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d12d      	bne.n	800b950 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a1d      	ldr	r2, [pc, #116]	; (800b970 <HAL_ADC_ConfigChannel+0xa3c>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d128      	bne.n	800b950 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a19      	ldr	r2, [pc, #100]	; (800b968 <HAL_ADC_ConfigChannel+0xa34>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d004      	beq.n	800b912 <HAL_ADC_ConfigChannel+0x9de>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a17      	ldr	r2, [pc, #92]	; (800b96c <HAL_ADC_ConfigChannel+0xa38>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d101      	bne.n	800b916 <HAL_ADC_ConfigChannel+0x9e2>
 800b912:	4a19      	ldr	r2, [pc, #100]	; (800b978 <HAL_ADC_ConfigChannel+0xa44>)
 800b914:	e000      	b.n	800b918 <HAL_ADC_ConfigChannel+0x9e4>
 800b916:	4a13      	ldr	r2, [pc, #76]	; (800b964 <HAL_ADC_ConfigChannel+0xa30>)
 800b918:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b91c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b920:	4619      	mov	r1, r3
 800b922:	4610      	mov	r0, r2
 800b924:	f7fe fecb 	bl	800a6be <LL_ADC_SetCommonPathInternalCh>
 800b928:	e012      	b.n	800b950 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b92e:	f043 0220 	orr.w	r2, r3, #32
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800b936:	2301      	movs	r3, #1
 800b938:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 800b93c:	e008      	b.n	800b950 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b942:	f043 0220 	orr.w	r2, r3, #32
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800b94a:	2301      	movs	r3, #1
 800b94c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2200      	movs	r2, #0
 800b954:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800b958:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	37e4      	adds	r7, #228	; 0xe4
 800b960:	46bd      	mov	sp, r7
 800b962:	bd90      	pop	{r4, r7, pc}
 800b964:	58026300 	.word	0x58026300
 800b968:	40022000 	.word	0x40022000
 800b96c:	40022100 	.word	0x40022100
 800b970:	58026000 	.word	0x58026000
 800b974:	c7520000 	.word	0xc7520000
 800b978:	40022300 	.word	0x40022300
 800b97c:	24000050 	.word	0x24000050
 800b980:	053e2d63 	.word	0x053e2d63
 800b984:	c3210000 	.word	0xc3210000
 800b988:	cb840000 	.word	0xcb840000

0800b98c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a6b      	ldr	r2, [pc, #428]	; (800bb48 <ADC_ConfigureBoostMode+0x1bc>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d004      	beq.n	800b9a8 <ADC_ConfigureBoostMode+0x1c>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4a6a      	ldr	r2, [pc, #424]	; (800bb4c <ADC_ConfigureBoostMode+0x1c0>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d109      	bne.n	800b9bc <ADC_ConfigureBoostMode+0x30>
 800b9a8:	4b69      	ldr	r3, [pc, #420]	; (800bb50 <ADC_ConfigureBoostMode+0x1c4>)
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	bf14      	ite	ne
 800b9b4:	2301      	movne	r3, #1
 800b9b6:	2300      	moveq	r3, #0
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	e008      	b.n	800b9ce <ADC_ConfigureBoostMode+0x42>
 800b9bc:	4b65      	ldr	r3, [pc, #404]	; (800bb54 <ADC_ConfigureBoostMode+0x1c8>)
 800b9be:	689b      	ldr	r3, [r3, #8]
 800b9c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	bf14      	ite	ne
 800b9c8:	2301      	movne	r3, #1
 800b9ca:	2300      	moveq	r3, #0
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d01c      	beq.n	800ba0c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800b9d2:	f002 fb27 	bl	800e024 <HAL_RCC_GetHCLKFreq>
 800b9d6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	685b      	ldr	r3, [r3, #4]
 800b9dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b9e0:	d010      	beq.n	800ba04 <ADC_ConfigureBoostMode+0x78>
 800b9e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b9e6:	d871      	bhi.n	800bacc <ADC_ConfigureBoostMode+0x140>
 800b9e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9ec:	d002      	beq.n	800b9f4 <ADC_ConfigureBoostMode+0x68>
 800b9ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9f2:	d16b      	bne.n	800bacc <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	0c1b      	lsrs	r3, r3, #16
 800b9fa:	68fa      	ldr	r2, [r7, #12]
 800b9fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba00:	60fb      	str	r3, [r7, #12]
        break;
 800ba02:	e066      	b.n	800bad2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	089b      	lsrs	r3, r3, #2
 800ba08:	60fb      	str	r3, [r7, #12]
        break;
 800ba0a:	e062      	b.n	800bad2 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800ba0c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800ba10:	f003 fa7a 	bl	800ef08 <HAL_RCCEx_GetPeriphCLKFreq>
 800ba14:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800ba1e:	d051      	beq.n	800bac4 <ADC_ConfigureBoostMode+0x138>
 800ba20:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800ba24:	d854      	bhi.n	800bad0 <ADC_ConfigureBoostMode+0x144>
 800ba26:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800ba2a:	d047      	beq.n	800babc <ADC_ConfigureBoostMode+0x130>
 800ba2c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800ba30:	d84e      	bhi.n	800bad0 <ADC_ConfigureBoostMode+0x144>
 800ba32:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800ba36:	d03d      	beq.n	800bab4 <ADC_ConfigureBoostMode+0x128>
 800ba38:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800ba3c:	d848      	bhi.n	800bad0 <ADC_ConfigureBoostMode+0x144>
 800ba3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba42:	d033      	beq.n	800baac <ADC_ConfigureBoostMode+0x120>
 800ba44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba48:	d842      	bhi.n	800bad0 <ADC_ConfigureBoostMode+0x144>
 800ba4a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800ba4e:	d029      	beq.n	800baa4 <ADC_ConfigureBoostMode+0x118>
 800ba50:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800ba54:	d83c      	bhi.n	800bad0 <ADC_ConfigureBoostMode+0x144>
 800ba56:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800ba5a:	d01a      	beq.n	800ba92 <ADC_ConfigureBoostMode+0x106>
 800ba5c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800ba60:	d836      	bhi.n	800bad0 <ADC_ConfigureBoostMode+0x144>
 800ba62:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800ba66:	d014      	beq.n	800ba92 <ADC_ConfigureBoostMode+0x106>
 800ba68:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800ba6c:	d830      	bhi.n	800bad0 <ADC_ConfigureBoostMode+0x144>
 800ba6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba72:	d00e      	beq.n	800ba92 <ADC_ConfigureBoostMode+0x106>
 800ba74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba78:	d82a      	bhi.n	800bad0 <ADC_ConfigureBoostMode+0x144>
 800ba7a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ba7e:	d008      	beq.n	800ba92 <ADC_ConfigureBoostMode+0x106>
 800ba80:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800ba84:	d824      	bhi.n	800bad0 <ADC_ConfigureBoostMode+0x144>
 800ba86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ba8a:	d002      	beq.n	800ba92 <ADC_ConfigureBoostMode+0x106>
 800ba8c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ba90:	d11e      	bne.n	800bad0 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	685b      	ldr	r3, [r3, #4]
 800ba96:	0c9b      	lsrs	r3, r3, #18
 800ba98:	005b      	lsls	r3, r3, #1
 800ba9a:	68fa      	ldr	r2, [r7, #12]
 800ba9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800baa0:	60fb      	str	r3, [r7, #12]
        break;
 800baa2:	e016      	b.n	800bad2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	091b      	lsrs	r3, r3, #4
 800baa8:	60fb      	str	r3, [r7, #12]
        break;
 800baaa:	e012      	b.n	800bad2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	095b      	lsrs	r3, r3, #5
 800bab0:	60fb      	str	r3, [r7, #12]
        break;
 800bab2:	e00e      	b.n	800bad2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	099b      	lsrs	r3, r3, #6
 800bab8:	60fb      	str	r3, [r7, #12]
        break;
 800baba:	e00a      	b.n	800bad2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	09db      	lsrs	r3, r3, #7
 800bac0:	60fb      	str	r3, [r7, #12]
        break;
 800bac2:	e006      	b.n	800bad2 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	0a1b      	lsrs	r3, r3, #8
 800bac8:	60fb      	str	r3, [r7, #12]
        break;
 800baca:	e002      	b.n	800bad2 <ADC_ConfigureBoostMode+0x146>
        break;
 800bacc:	bf00      	nop
 800bace:	e000      	b.n	800bad2 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 800bad0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	085b      	lsrs	r3, r3, #1
 800bad6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	4a1f      	ldr	r2, [pc, #124]	; (800bb58 <ADC_ConfigureBoostMode+0x1cc>)
 800badc:	4293      	cmp	r3, r2
 800bade:	d808      	bhi.n	800baf2 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	689a      	ldr	r2, [r3, #8]
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800baee:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800baf0:	e025      	b.n	800bb3e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	4a19      	ldr	r2, [pc, #100]	; (800bb5c <ADC_ConfigureBoostMode+0x1d0>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d80a      	bhi.n	800bb10 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	689b      	ldr	r3, [r3, #8]
 800bb00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb0c:	609a      	str	r2, [r3, #8]
}
 800bb0e:	e016      	b.n	800bb3e <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	4a13      	ldr	r2, [pc, #76]	; (800bb60 <ADC_ConfigureBoostMode+0x1d4>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d80a      	bhi.n	800bb2e <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	689b      	ldr	r3, [r3, #8]
 800bb1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb2a:	609a      	str	r2, [r3, #8]
}
 800bb2c:	e007      	b.n	800bb3e <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	689a      	ldr	r2, [r3, #8]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800bb3c:	609a      	str	r2, [r3, #8]
}
 800bb3e:	bf00      	nop
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	40022000 	.word	0x40022000
 800bb4c:	40022100 	.word	0x40022100
 800bb50:	40022300 	.word	0x40022300
 800bb54:	58026300 	.word	0x58026300
 800bb58:	005f5e10 	.word	0x005f5e10
 800bb5c:	00bebc20 	.word	0x00bebc20
 800bb60:	017d7840 	.word	0x017d7840

0800bb64 <LL_ADC_IsEnabled>:
{
 800bb64:	b480      	push	{r7}
 800bb66:	b083      	sub	sp, #12
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	f003 0301 	and.w	r3, r3, #1
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d101      	bne.n	800bb7c <LL_ADC_IsEnabled+0x18>
 800bb78:	2301      	movs	r3, #1
 800bb7a:	e000      	b.n	800bb7e <LL_ADC_IsEnabled+0x1a>
 800bb7c:	2300      	movs	r3, #0
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	370c      	adds	r7, #12
 800bb82:	46bd      	mov	sp, r7
 800bb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb88:	4770      	bx	lr

0800bb8a <LL_ADC_REG_IsConversionOngoing>:
{
 800bb8a:	b480      	push	{r7}
 800bb8c:	b083      	sub	sp, #12
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	689b      	ldr	r3, [r3, #8]
 800bb96:	f003 0304 	and.w	r3, r3, #4
 800bb9a:	2b04      	cmp	r3, #4
 800bb9c:	d101      	bne.n	800bba2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800bb9e:	2301      	movs	r3, #1
 800bba0:	e000      	b.n	800bba4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800bba2:	2300      	movs	r3, #0
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	370c      	adds	r7, #12
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbae:	4770      	bx	lr

0800bbb0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800bbb0:	b590      	push	{r4, r7, lr}
 800bbb2:	b0a3      	sub	sp, #140	; 0x8c
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d101      	bne.n	800bbce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800bbca:	2302      	movs	r3, #2
 800bbcc:	e0c1      	b.n	800bd52 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800bbda:	2300      	movs	r3, #0
 800bbdc:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	4a5e      	ldr	r2, [pc, #376]	; (800bd5c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d102      	bne.n	800bbee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800bbe8:	4b5d      	ldr	r3, [pc, #372]	; (800bd60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800bbea:	60fb      	str	r3, [r7, #12]
 800bbec:	e001      	b.n	800bbf2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800bbee:	2300      	movs	r3, #0
 800bbf0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d10b      	bne.n	800bc10 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbfc:	f043 0220 	orr.w	r2, r3, #32
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e0a0      	b.n	800bd52 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7ff ffb9 	bl	800bb8a <LL_ADC_REG_IsConversionOngoing>
 800bc18:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7ff ffb2 	bl	800bb8a <LL_ADC_REG_IsConversionOngoing>
 800bc26:	4603      	mov	r3, r0
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f040 8081 	bne.w	800bd30 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800bc2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d17c      	bne.n	800bd30 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a48      	ldr	r2, [pc, #288]	; (800bd5c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d004      	beq.n	800bc4a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a46      	ldr	r2, [pc, #280]	; (800bd60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d101      	bne.n	800bc4e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800bc4a:	4b46      	ldr	r3, [pc, #280]	; (800bd64 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800bc4c:	e000      	b.n	800bc50 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800bc4e:	4b46      	ldr	r3, [pc, #280]	; (800bd68 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800bc50:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d039      	beq.n	800bcce <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800bc5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc5c:	689b      	ldr	r3, [r3, #8]
 800bc5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	431a      	orrs	r2, r3
 800bc68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bc6a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	4a3a      	ldr	r2, [pc, #232]	; (800bd5c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d004      	beq.n	800bc80 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a39      	ldr	r2, [pc, #228]	; (800bd60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d10e      	bne.n	800bc9e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800bc80:	4836      	ldr	r0, [pc, #216]	; (800bd5c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800bc82:	f7ff ff6f 	bl	800bb64 <LL_ADC_IsEnabled>
 800bc86:	4604      	mov	r4, r0
 800bc88:	4835      	ldr	r0, [pc, #212]	; (800bd60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800bc8a:	f7ff ff6b 	bl	800bb64 <LL_ADC_IsEnabled>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	4323      	orrs	r3, r4
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	bf0c      	ite	eq
 800bc96:	2301      	moveq	r3, #1
 800bc98:	2300      	movne	r3, #0
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	e008      	b.n	800bcb0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800bc9e:	4833      	ldr	r0, [pc, #204]	; (800bd6c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800bca0:	f7ff ff60 	bl	800bb64 <LL_ADC_IsEnabled>
 800bca4:	4603      	mov	r3, r0
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	bf0c      	ite	eq
 800bcaa:	2301      	moveq	r3, #1
 800bcac:	2300      	movne	r3, #0
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d047      	beq.n	800bd44 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800bcb4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bcb6:	689a      	ldr	r2, [r3, #8]
 800bcb8:	4b2d      	ldr	r3, [pc, #180]	; (800bd70 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800bcba:	4013      	ands	r3, r2
 800bcbc:	683a      	ldr	r2, [r7, #0]
 800bcbe:	6811      	ldr	r1, [r2, #0]
 800bcc0:	683a      	ldr	r2, [r7, #0]
 800bcc2:	6892      	ldr	r2, [r2, #8]
 800bcc4:	430a      	orrs	r2, r1
 800bcc6:	431a      	orrs	r2, r3
 800bcc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bcca:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800bccc:	e03a      	b.n	800bd44 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800bcce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bcd0:	689b      	ldr	r3, [r3, #8]
 800bcd2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bcd6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bcd8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a1f      	ldr	r2, [pc, #124]	; (800bd5c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d004      	beq.n	800bcee <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4a1d      	ldr	r2, [pc, #116]	; (800bd60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d10e      	bne.n	800bd0c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800bcee:	481b      	ldr	r0, [pc, #108]	; (800bd5c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800bcf0:	f7ff ff38 	bl	800bb64 <LL_ADC_IsEnabled>
 800bcf4:	4604      	mov	r4, r0
 800bcf6:	481a      	ldr	r0, [pc, #104]	; (800bd60 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800bcf8:	f7ff ff34 	bl	800bb64 <LL_ADC_IsEnabled>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	4323      	orrs	r3, r4
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	bf0c      	ite	eq
 800bd04:	2301      	moveq	r3, #1
 800bd06:	2300      	movne	r3, #0
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	e008      	b.n	800bd1e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800bd0c:	4817      	ldr	r0, [pc, #92]	; (800bd6c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800bd0e:	f7ff ff29 	bl	800bb64 <LL_ADC_IsEnabled>
 800bd12:	4603      	mov	r3, r0
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	bf0c      	ite	eq
 800bd18:	2301      	moveq	r3, #1
 800bd1a:	2300      	movne	r3, #0
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d010      	beq.n	800bd44 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800bd22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bd24:	689a      	ldr	r2, [r3, #8]
 800bd26:	4b12      	ldr	r3, [pc, #72]	; (800bd70 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800bd28:	4013      	ands	r3, r2
 800bd2a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bd2c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800bd2e:	e009      	b.n	800bd44 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd34:	f043 0220 	orr.w	r2, r3, #32
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800bd42:	e000      	b.n	800bd46 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800bd44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800bd4e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	378c      	adds	r7, #140	; 0x8c
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd90      	pop	{r4, r7, pc}
 800bd5a:	bf00      	nop
 800bd5c:	40022000 	.word	0x40022000
 800bd60:	40022100 	.word	0x40022100
 800bd64:	40022300 	.word	0x40022300
 800bd68:	58026300 	.word	0x58026300
 800bd6c:	58026000 	.word	0x58026000
 800bd70:	fffff0e0 	.word	0xfffff0e0

0800bd74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b085      	sub	sp, #20
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f003 0307 	and.w	r3, r3, #7
 800bd82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bd84:	4b0b      	ldr	r3, [pc, #44]	; (800bdb4 <__NVIC_SetPriorityGrouping+0x40>)
 800bd86:	68db      	ldr	r3, [r3, #12]
 800bd88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bd8a:	68ba      	ldr	r2, [r7, #8]
 800bd8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bd90:	4013      	ands	r3, r2
 800bd92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800bd9c:	4b06      	ldr	r3, [pc, #24]	; (800bdb8 <__NVIC_SetPriorityGrouping+0x44>)
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bda2:	4a04      	ldr	r2, [pc, #16]	; (800bdb4 <__NVIC_SetPriorityGrouping+0x40>)
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	60d3      	str	r3, [r2, #12]
}
 800bda8:	bf00      	nop
 800bdaa:	3714      	adds	r7, #20
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr
 800bdb4:	e000ed00 	.word	0xe000ed00
 800bdb8:	05fa0000 	.word	0x05fa0000

0800bdbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bdc0:	4b04      	ldr	r3, [pc, #16]	; (800bdd4 <__NVIC_GetPriorityGrouping+0x18>)
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	0a1b      	lsrs	r3, r3, #8
 800bdc6:	f003 0307 	and.w	r3, r3, #7
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr
 800bdd4:	e000ed00 	.word	0xe000ed00

0800bdd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	4603      	mov	r3, r0
 800bde0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bde2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	db0b      	blt.n	800be02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bdea:	88fb      	ldrh	r3, [r7, #6]
 800bdec:	f003 021f 	and.w	r2, r3, #31
 800bdf0:	4907      	ldr	r1, [pc, #28]	; (800be10 <__NVIC_EnableIRQ+0x38>)
 800bdf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bdf6:	095b      	lsrs	r3, r3, #5
 800bdf8:	2001      	movs	r0, #1
 800bdfa:	fa00 f202 	lsl.w	r2, r0, r2
 800bdfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800be02:	bf00      	nop
 800be04:	370c      	adds	r7, #12
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr
 800be0e:	bf00      	nop
 800be10:	e000e100 	.word	0xe000e100

0800be14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800be14:	b480      	push	{r7}
 800be16:	b083      	sub	sp, #12
 800be18:	af00      	add	r7, sp, #0
 800be1a:	4603      	mov	r3, r0
 800be1c:	6039      	str	r1, [r7, #0]
 800be1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800be20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800be24:	2b00      	cmp	r3, #0
 800be26:	db0a      	blt.n	800be3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	b2da      	uxtb	r2, r3
 800be2c:	490c      	ldr	r1, [pc, #48]	; (800be60 <__NVIC_SetPriority+0x4c>)
 800be2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800be32:	0112      	lsls	r2, r2, #4
 800be34:	b2d2      	uxtb	r2, r2
 800be36:	440b      	add	r3, r1
 800be38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800be3c:	e00a      	b.n	800be54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	b2da      	uxtb	r2, r3
 800be42:	4908      	ldr	r1, [pc, #32]	; (800be64 <__NVIC_SetPriority+0x50>)
 800be44:	88fb      	ldrh	r3, [r7, #6]
 800be46:	f003 030f 	and.w	r3, r3, #15
 800be4a:	3b04      	subs	r3, #4
 800be4c:	0112      	lsls	r2, r2, #4
 800be4e:	b2d2      	uxtb	r2, r2
 800be50:	440b      	add	r3, r1
 800be52:	761a      	strb	r2, [r3, #24]
}
 800be54:	bf00      	nop
 800be56:	370c      	adds	r7, #12
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr
 800be60:	e000e100 	.word	0xe000e100
 800be64:	e000ed00 	.word	0xe000ed00

0800be68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800be68:	b480      	push	{r7}
 800be6a:	b089      	sub	sp, #36	; 0x24
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	f003 0307 	and.w	r3, r3, #7
 800be7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800be7c:	69fb      	ldr	r3, [r7, #28]
 800be7e:	f1c3 0307 	rsb	r3, r3, #7
 800be82:	2b04      	cmp	r3, #4
 800be84:	bf28      	it	cs
 800be86:	2304      	movcs	r3, #4
 800be88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800be8a:	69fb      	ldr	r3, [r7, #28]
 800be8c:	3304      	adds	r3, #4
 800be8e:	2b06      	cmp	r3, #6
 800be90:	d902      	bls.n	800be98 <NVIC_EncodePriority+0x30>
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	3b03      	subs	r3, #3
 800be96:	e000      	b.n	800be9a <NVIC_EncodePriority+0x32>
 800be98:	2300      	movs	r3, #0
 800be9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800be9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bea0:	69bb      	ldr	r3, [r7, #24]
 800bea2:	fa02 f303 	lsl.w	r3, r2, r3
 800bea6:	43da      	mvns	r2, r3
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	401a      	ands	r2, r3
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800beb0:	f04f 31ff 	mov.w	r1, #4294967295
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	fa01 f303 	lsl.w	r3, r1, r3
 800beba:	43d9      	mvns	r1, r3
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bec0:	4313      	orrs	r3, r2
         );
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3724      	adds	r7, #36	; 0x24
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr
	...

0800bed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	3b01      	subs	r3, #1
 800bedc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bee0:	d301      	bcc.n	800bee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800bee2:	2301      	movs	r3, #1
 800bee4:	e00f      	b.n	800bf06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bee6:	4a0a      	ldr	r2, [pc, #40]	; (800bf10 <SysTick_Config+0x40>)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	3b01      	subs	r3, #1
 800beec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800beee:	210f      	movs	r1, #15
 800bef0:	f04f 30ff 	mov.w	r0, #4294967295
 800bef4:	f7ff ff8e 	bl	800be14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bef8:	4b05      	ldr	r3, [pc, #20]	; (800bf10 <SysTick_Config+0x40>)
 800befa:	2200      	movs	r2, #0
 800befc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800befe:	4b04      	ldr	r3, [pc, #16]	; (800bf10 <SysTick_Config+0x40>)
 800bf00:	2207      	movs	r2, #7
 800bf02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800bf04:	2300      	movs	r3, #0
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	3708      	adds	r7, #8
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	e000e010 	.word	0xe000e010

0800bf14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f7ff ff29 	bl	800bd74 <__NVIC_SetPriorityGrouping>
}
 800bf22:	bf00      	nop
 800bf24:	3708      	adds	r7, #8
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}

0800bf2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bf2a:	b580      	push	{r7, lr}
 800bf2c:	b086      	sub	sp, #24
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	4603      	mov	r3, r0
 800bf32:	60b9      	str	r1, [r7, #8]
 800bf34:	607a      	str	r2, [r7, #4]
 800bf36:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800bf38:	f7ff ff40 	bl	800bdbc <__NVIC_GetPriorityGrouping>
 800bf3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	68b9      	ldr	r1, [r7, #8]
 800bf42:	6978      	ldr	r0, [r7, #20]
 800bf44:	f7ff ff90 	bl	800be68 <NVIC_EncodePriority>
 800bf48:	4602      	mov	r2, r0
 800bf4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bf4e:	4611      	mov	r1, r2
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7ff ff5f 	bl	800be14 <__NVIC_SetPriority>
}
 800bf56:	bf00      	nop
 800bf58:	3718      	adds	r7, #24
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}

0800bf5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bf5e:	b580      	push	{r7, lr}
 800bf60:	b082      	sub	sp, #8
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	4603      	mov	r3, r0
 800bf66:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bf68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7ff ff33 	bl	800bdd8 <__NVIC_EnableIRQ>
}
 800bf72:	bf00      	nop
 800bf74:	3708      	adds	r7, #8
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b082      	sub	sp, #8
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f7ff ffa4 	bl	800bed0 <SysTick_Config>
 800bf88:	4603      	mov	r3, r0
}
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	3708      	adds	r7, #8
 800bf8e:	46bd      	mov	sp, r7
 800bf90:	bd80      	pop	{r7, pc}
	...

0800bf94 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d101      	bne.n	800bfa6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e054      	b.n	800c050 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	7f5b      	ldrb	r3, [r3, #29]
 800bfaa:	b2db      	uxtb	r3, r3
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d105      	bne.n	800bfbc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f7fb fdf4 	bl	8007ba4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2202      	movs	r2, #2
 800bfc0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	791b      	ldrb	r3, [r3, #4]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d10c      	bne.n	800bfe4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	4a22      	ldr	r2, [pc, #136]	; (800c058 <HAL_CRC_Init+0xc4>)
 800bfd0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	689a      	ldr	r2, [r3, #8]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f022 0218 	bic.w	r2, r2, #24
 800bfe0:	609a      	str	r2, [r3, #8]
 800bfe2:	e00c      	b.n	800bffe <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6899      	ldr	r1, [r3, #8]
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	68db      	ldr	r3, [r3, #12]
 800bfec:	461a      	mov	r2, r3
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 f948 	bl	800c284 <HAL_CRCEx_Polynomial_Set>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d001      	beq.n	800bffe <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800bffa:	2301      	movs	r3, #1
 800bffc:	e028      	b.n	800c050 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	795b      	ldrb	r3, [r3, #5]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d105      	bne.n	800c012 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f04f 32ff 	mov.w	r2, #4294967295
 800c00e:	611a      	str	r2, [r3, #16]
 800c010:	e004      	b.n	800c01c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	6912      	ldr	r2, [r2, #16]
 800c01a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	689b      	ldr	r3, [r3, #8]
 800c022:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	695a      	ldr	r2, [r3, #20]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	430a      	orrs	r2, r1
 800c030:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	689b      	ldr	r3, [r3, #8]
 800c038:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	699a      	ldr	r2, [r3, #24]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	430a      	orrs	r2, r1
 800c046:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2201      	movs	r2, #1
 800c04c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800c04e:	2300      	movs	r3, #0
}
 800c050:	4618      	mov	r0, r3
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}
 800c058:	04c11db7 	.word	0x04c11db7

0800c05c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b086      	sub	sp, #24
 800c060:	af00      	add	r7, sp, #0
 800c062:	60f8      	str	r0, [r7, #12]
 800c064:	60b9      	str	r1, [r7, #8]
 800c066:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800c068:	2300      	movs	r3, #0
 800c06a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2202      	movs	r2, #2
 800c070:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	689a      	ldr	r2, [r3, #8]
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f042 0201 	orr.w	r2, r2, #1
 800c080:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	6a1b      	ldr	r3, [r3, #32]
 800c086:	2b03      	cmp	r3, #3
 800c088:	d006      	beq.n	800c098 <HAL_CRC_Calculate+0x3c>
 800c08a:	2b03      	cmp	r3, #3
 800c08c:	d829      	bhi.n	800c0e2 <HAL_CRC_Calculate+0x86>
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d019      	beq.n	800c0c6 <HAL_CRC_Calculate+0x6a>
 800c092:	2b02      	cmp	r3, #2
 800c094:	d01e      	beq.n	800c0d4 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800c096:	e024      	b.n	800c0e2 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800c098:	2300      	movs	r3, #0
 800c09a:	617b      	str	r3, [r7, #20]
 800c09c:	e00a      	b.n	800c0b4 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	68ba      	ldr	r2, [r7, #8]
 800c0a4:	441a      	add	r2, r3
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	6812      	ldr	r2, [r2, #0]
 800c0ac:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800c0ae:	697b      	ldr	r3, [r7, #20]
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	617b      	str	r3, [r7, #20]
 800c0b4:	697a      	ldr	r2, [r7, #20]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	429a      	cmp	r2, r3
 800c0ba:	d3f0      	bcc.n	800c09e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	613b      	str	r3, [r7, #16]
      break;
 800c0c4:	e00e      	b.n	800c0e4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800c0c6:	687a      	ldr	r2, [r7, #4]
 800c0c8:	68b9      	ldr	r1, [r7, #8]
 800c0ca:	68f8      	ldr	r0, [r7, #12]
 800c0cc:	f000 f812 	bl	800c0f4 <CRC_Handle_8>
 800c0d0:	6138      	str	r0, [r7, #16]
      break;
 800c0d2:	e007      	b.n	800c0e4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	68b9      	ldr	r1, [r7, #8]
 800c0d8:	68f8      	ldr	r0, [r7, #12]
 800c0da:	f000 f899 	bl	800c210 <CRC_Handle_16>
 800c0de:	6138      	str	r0, [r7, #16]
      break;
 800c0e0:	e000      	b.n	800c0e4 <HAL_CRC_Calculate+0x88>
      break;
 800c0e2:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800c0ea:	693b      	ldr	r3, [r7, #16]
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3718      	adds	r7, #24
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b089      	sub	sp, #36	; 0x24
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	60b9      	str	r1, [r7, #8]
 800c0fe:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800c100:	2300      	movs	r3, #0
 800c102:	61fb      	str	r3, [r7, #28]
 800c104:	e023      	b.n	800c14e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c106:	69fb      	ldr	r3, [r7, #28]
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	68ba      	ldr	r2, [r7, #8]
 800c10c:	4413      	add	r3, r2
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800c112:	69fb      	ldr	r3, [r7, #28]
 800c114:	009b      	lsls	r3, r3, #2
 800c116:	3301      	adds	r3, #1
 800c118:	68b9      	ldr	r1, [r7, #8]
 800c11a:	440b      	add	r3, r1
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c120:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800c122:	69fb      	ldr	r3, [r7, #28]
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	3302      	adds	r3, #2
 800c128:	68b9      	ldr	r1, [r7, #8]
 800c12a:	440b      	add	r3, r1
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800c130:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800c132:	69fb      	ldr	r3, [r7, #28]
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	3303      	adds	r3, #3
 800c138:	68b9      	ldr	r1, [r7, #8]
 800c13a:	440b      	add	r3, r1
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800c144:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800c146:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	3301      	adds	r3, #1
 800c14c:	61fb      	str	r3, [r7, #28]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	089b      	lsrs	r3, r3, #2
 800c152:	69fa      	ldr	r2, [r7, #28]
 800c154:	429a      	cmp	r2, r3
 800c156:	d3d6      	bcc.n	800c106 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f003 0303 	and.w	r3, r3, #3
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d04d      	beq.n	800c1fe <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f003 0303 	and.w	r3, r3, #3
 800c168:	2b01      	cmp	r3, #1
 800c16a:	d107      	bne.n	800c17c <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800c16c:	69fb      	ldr	r3, [r7, #28]
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	68ba      	ldr	r2, [r7, #8]
 800c172:	4413      	add	r3, r2
 800c174:	68fa      	ldr	r2, [r7, #12]
 800c176:	6812      	ldr	r2, [r2, #0]
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f003 0303 	and.w	r3, r3, #3
 800c182:	2b02      	cmp	r3, #2
 800c184:	d116      	bne.n	800c1b4 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800c186:	69fb      	ldr	r3, [r7, #28]
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	68ba      	ldr	r2, [r7, #8]
 800c18c:	4413      	add	r3, r2
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	021b      	lsls	r3, r3, #8
 800c192:	b21a      	sxth	r2, r3
 800c194:	69fb      	ldr	r3, [r7, #28]
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	3301      	adds	r3, #1
 800c19a:	68b9      	ldr	r1, [r7, #8]
 800c19c:	440b      	add	r3, r1
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	b21b      	sxth	r3, r3
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	b21b      	sxth	r3, r3
 800c1a6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	8b7a      	ldrh	r2, [r7, #26]
 800c1b2:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f003 0303 	and.w	r3, r3, #3
 800c1ba:	2b03      	cmp	r3, #3
 800c1bc:	d11f      	bne.n	800c1fe <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800c1be:	69fb      	ldr	r3, [r7, #28]
 800c1c0:	009b      	lsls	r3, r3, #2
 800c1c2:	68ba      	ldr	r2, [r7, #8]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	021b      	lsls	r3, r3, #8
 800c1ca:	b21a      	sxth	r2, r3
 800c1cc:	69fb      	ldr	r3, [r7, #28]
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	3301      	adds	r3, #1
 800c1d2:	68b9      	ldr	r1, [r7, #8]
 800c1d4:	440b      	add	r3, r1
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	b21b      	sxth	r3, r3
 800c1da:	4313      	orrs	r3, r2
 800c1dc:	b21b      	sxth	r3, r3
 800c1de:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	8b7a      	ldrh	r2, [r7, #26]
 800c1ea:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800c1ec:	69fb      	ldr	r3, [r7, #28]
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	3302      	adds	r3, #2
 800c1f2:	68ba      	ldr	r2, [r7, #8]
 800c1f4:	4413      	add	r3, r2
 800c1f6:	68fa      	ldr	r2, [r7, #12]
 800c1f8:	6812      	ldr	r2, [r2, #0]
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	681b      	ldr	r3, [r3, #0]
}
 800c204:	4618      	mov	r0, r3
 800c206:	3724      	adds	r7, #36	; 0x24
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr

0800c210 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800c210:	b480      	push	{r7}
 800c212:	b087      	sub	sp, #28
 800c214:	af00      	add	r7, sp, #0
 800c216:	60f8      	str	r0, [r7, #12]
 800c218:	60b9      	str	r1, [r7, #8]
 800c21a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800c21c:	2300      	movs	r3, #0
 800c21e:	617b      	str	r3, [r7, #20]
 800c220:	e013      	b.n	800c24a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	68ba      	ldr	r2, [r7, #8]
 800c228:	4413      	add	r3, r2
 800c22a:	881b      	ldrh	r3, [r3, #0]
 800c22c:	041a      	lsls	r2, r3, #16
 800c22e:	697b      	ldr	r3, [r7, #20]
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	3302      	adds	r3, #2
 800c234:	68b9      	ldr	r1, [r7, #8]
 800c236:	440b      	add	r3, r1
 800c238:	881b      	ldrh	r3, [r3, #0]
 800c23a:	4619      	mov	r1, r3
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	430a      	orrs	r2, r1
 800c242:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	3301      	adds	r3, #1
 800c248:	617b      	str	r3, [r7, #20]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	085b      	lsrs	r3, r3, #1
 800c24e:	697a      	ldr	r2, [r7, #20]
 800c250:	429a      	cmp	r2, r3
 800c252:	d3e6      	bcc.n	800c222 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f003 0301 	and.w	r3, r3, #1
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d009      	beq.n	800c272 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	68ba      	ldr	r2, [r7, #8]
 800c26a:	4413      	add	r3, r2
 800c26c:	881a      	ldrh	r2, [r3, #0]
 800c26e:	693b      	ldr	r3, [r7, #16]
 800c270:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	681b      	ldr	r3, [r3, #0]
}
 800c278:	4618      	mov	r0, r3
 800c27a:	371c      	adds	r7, #28
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr

0800c284 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800c284:	b480      	push	{r7}
 800c286:	b087      	sub	sp, #28
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c290:	2300      	movs	r3, #0
 800c292:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800c294:	231f      	movs	r3, #31
 800c296:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800c298:	bf00      	nop
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	1e5a      	subs	r2, r3, #1
 800c29e:	613a      	str	r2, [r7, #16]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d009      	beq.n	800c2b8 <HAL_CRCEx_Polynomial_Set+0x34>
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	f003 031f 	and.w	r3, r3, #31
 800c2aa:	68ba      	ldr	r2, [r7, #8]
 800c2ac:	fa22 f303 	lsr.w	r3, r2, r3
 800c2b0:	f003 0301 	and.w	r3, r3, #1
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d0f0      	beq.n	800c29a <HAL_CRCEx_Polynomial_Set+0x16>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2b18      	cmp	r3, #24
 800c2bc:	d846      	bhi.n	800c34c <HAL_CRCEx_Polynomial_Set+0xc8>
 800c2be:	a201      	add	r2, pc, #4	; (adr r2, 800c2c4 <HAL_CRCEx_Polynomial_Set+0x40>)
 800c2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2c4:	0800c353 	.word	0x0800c353
 800c2c8:	0800c34d 	.word	0x0800c34d
 800c2cc:	0800c34d 	.word	0x0800c34d
 800c2d0:	0800c34d 	.word	0x0800c34d
 800c2d4:	0800c34d 	.word	0x0800c34d
 800c2d8:	0800c34d 	.word	0x0800c34d
 800c2dc:	0800c34d 	.word	0x0800c34d
 800c2e0:	0800c34d 	.word	0x0800c34d
 800c2e4:	0800c341 	.word	0x0800c341
 800c2e8:	0800c34d 	.word	0x0800c34d
 800c2ec:	0800c34d 	.word	0x0800c34d
 800c2f0:	0800c34d 	.word	0x0800c34d
 800c2f4:	0800c34d 	.word	0x0800c34d
 800c2f8:	0800c34d 	.word	0x0800c34d
 800c2fc:	0800c34d 	.word	0x0800c34d
 800c300:	0800c34d 	.word	0x0800c34d
 800c304:	0800c335 	.word	0x0800c335
 800c308:	0800c34d 	.word	0x0800c34d
 800c30c:	0800c34d 	.word	0x0800c34d
 800c310:	0800c34d 	.word	0x0800c34d
 800c314:	0800c34d 	.word	0x0800c34d
 800c318:	0800c34d 	.word	0x0800c34d
 800c31c:	0800c34d 	.word	0x0800c34d
 800c320:	0800c34d 	.word	0x0800c34d
 800c324:	0800c329 	.word	0x0800c329
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	2b06      	cmp	r3, #6
 800c32c:	d913      	bls.n	800c356 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800c32e:	2301      	movs	r3, #1
 800c330:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c332:	e010      	b.n	800c356 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	2b07      	cmp	r3, #7
 800c338:	d90f      	bls.n	800c35a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800c33a:	2301      	movs	r3, #1
 800c33c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c33e:	e00c      	b.n	800c35a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	2b0f      	cmp	r3, #15
 800c344:	d90b      	bls.n	800c35e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800c346:	2301      	movs	r3, #1
 800c348:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c34a:	e008      	b.n	800c35e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800c34c:	2301      	movs	r3, #1
 800c34e:	75fb      	strb	r3, [r7, #23]
      break;
 800c350:	e006      	b.n	800c360 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c352:	bf00      	nop
 800c354:	e004      	b.n	800c360 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c356:	bf00      	nop
 800c358:	e002      	b.n	800c360 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c35a:	bf00      	nop
 800c35c:	e000      	b.n	800c360 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c35e:	bf00      	nop
  }
  if (status == HAL_OK)
 800c360:	7dfb      	ldrb	r3, [r7, #23]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d10d      	bne.n	800c382 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	68ba      	ldr	r2, [r7, #8]
 800c36c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	689b      	ldr	r3, [r3, #8]
 800c374:	f023 0118 	bic.w	r1, r3, #24
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	430a      	orrs	r2, r1
 800c380:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800c382:	7dfb      	ldrb	r3, [r7, #23]
}
 800c384:	4618      	mov	r0, r3
 800c386:	371c      	adds	r7, #28
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b086      	sub	sp, #24
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800c398:	f7fe f972 	bl	800a680 <HAL_GetTick>
 800c39c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d101      	bne.n	800c3a8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	e2dc      	b.n	800c962 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c3ae:	b2db      	uxtb	r3, r3
 800c3b0:	2b02      	cmp	r3, #2
 800c3b2:	d008      	beq.n	800c3c6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2280      	movs	r2, #128	; 0x80
 800c3b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800c3c2:	2301      	movs	r3, #1
 800c3c4:	e2cd      	b.n	800c962 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4a76      	ldr	r2, [pc, #472]	; (800c5a4 <HAL_DMA_Abort+0x214>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d04a      	beq.n	800c466 <HAL_DMA_Abort+0xd6>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a74      	ldr	r2, [pc, #464]	; (800c5a8 <HAL_DMA_Abort+0x218>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d045      	beq.n	800c466 <HAL_DMA_Abort+0xd6>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a73      	ldr	r2, [pc, #460]	; (800c5ac <HAL_DMA_Abort+0x21c>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d040      	beq.n	800c466 <HAL_DMA_Abort+0xd6>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a71      	ldr	r2, [pc, #452]	; (800c5b0 <HAL_DMA_Abort+0x220>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d03b      	beq.n	800c466 <HAL_DMA_Abort+0xd6>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a70      	ldr	r2, [pc, #448]	; (800c5b4 <HAL_DMA_Abort+0x224>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d036      	beq.n	800c466 <HAL_DMA_Abort+0xd6>
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a6e      	ldr	r2, [pc, #440]	; (800c5b8 <HAL_DMA_Abort+0x228>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d031      	beq.n	800c466 <HAL_DMA_Abort+0xd6>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a6d      	ldr	r2, [pc, #436]	; (800c5bc <HAL_DMA_Abort+0x22c>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d02c      	beq.n	800c466 <HAL_DMA_Abort+0xd6>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a6b      	ldr	r2, [pc, #428]	; (800c5c0 <HAL_DMA_Abort+0x230>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d027      	beq.n	800c466 <HAL_DMA_Abort+0xd6>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4a6a      	ldr	r2, [pc, #424]	; (800c5c4 <HAL_DMA_Abort+0x234>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d022      	beq.n	800c466 <HAL_DMA_Abort+0xd6>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a68      	ldr	r2, [pc, #416]	; (800c5c8 <HAL_DMA_Abort+0x238>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d01d      	beq.n	800c466 <HAL_DMA_Abort+0xd6>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4a67      	ldr	r2, [pc, #412]	; (800c5cc <HAL_DMA_Abort+0x23c>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d018      	beq.n	800c466 <HAL_DMA_Abort+0xd6>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a65      	ldr	r2, [pc, #404]	; (800c5d0 <HAL_DMA_Abort+0x240>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d013      	beq.n	800c466 <HAL_DMA_Abort+0xd6>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4a64      	ldr	r2, [pc, #400]	; (800c5d4 <HAL_DMA_Abort+0x244>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d00e      	beq.n	800c466 <HAL_DMA_Abort+0xd6>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a62      	ldr	r2, [pc, #392]	; (800c5d8 <HAL_DMA_Abort+0x248>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d009      	beq.n	800c466 <HAL_DMA_Abort+0xd6>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a61      	ldr	r2, [pc, #388]	; (800c5dc <HAL_DMA_Abort+0x24c>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d004      	beq.n	800c466 <HAL_DMA_Abort+0xd6>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a5f      	ldr	r2, [pc, #380]	; (800c5e0 <HAL_DMA_Abort+0x250>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d101      	bne.n	800c46a <HAL_DMA_Abort+0xda>
 800c466:	2301      	movs	r3, #1
 800c468:	e000      	b.n	800c46c <HAL_DMA_Abort+0xdc>
 800c46a:	2300      	movs	r3, #0
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d013      	beq.n	800c498 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f022 021e 	bic.w	r2, r2, #30
 800c47e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	695a      	ldr	r2, [r3, #20]
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c48e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	617b      	str	r3, [r7, #20]
 800c496:	e00a      	b.n	800c4ae <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	681a      	ldr	r2, [r3, #0]
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f022 020e 	bic.w	r2, r2, #14
 800c4a6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a3c      	ldr	r2, [pc, #240]	; (800c5a4 <HAL_DMA_Abort+0x214>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d072      	beq.n	800c59e <HAL_DMA_Abort+0x20e>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a3a      	ldr	r2, [pc, #232]	; (800c5a8 <HAL_DMA_Abort+0x218>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d06d      	beq.n	800c59e <HAL_DMA_Abort+0x20e>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a39      	ldr	r2, [pc, #228]	; (800c5ac <HAL_DMA_Abort+0x21c>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d068      	beq.n	800c59e <HAL_DMA_Abort+0x20e>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a37      	ldr	r2, [pc, #220]	; (800c5b0 <HAL_DMA_Abort+0x220>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d063      	beq.n	800c59e <HAL_DMA_Abort+0x20e>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a36      	ldr	r2, [pc, #216]	; (800c5b4 <HAL_DMA_Abort+0x224>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d05e      	beq.n	800c59e <HAL_DMA_Abort+0x20e>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4a34      	ldr	r2, [pc, #208]	; (800c5b8 <HAL_DMA_Abort+0x228>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d059      	beq.n	800c59e <HAL_DMA_Abort+0x20e>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4a33      	ldr	r2, [pc, #204]	; (800c5bc <HAL_DMA_Abort+0x22c>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d054      	beq.n	800c59e <HAL_DMA_Abort+0x20e>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a31      	ldr	r2, [pc, #196]	; (800c5c0 <HAL_DMA_Abort+0x230>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d04f      	beq.n	800c59e <HAL_DMA_Abort+0x20e>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	4a30      	ldr	r2, [pc, #192]	; (800c5c4 <HAL_DMA_Abort+0x234>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d04a      	beq.n	800c59e <HAL_DMA_Abort+0x20e>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	4a2e      	ldr	r2, [pc, #184]	; (800c5c8 <HAL_DMA_Abort+0x238>)
 800c50e:	4293      	cmp	r3, r2
 800c510:	d045      	beq.n	800c59e <HAL_DMA_Abort+0x20e>
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	4a2d      	ldr	r2, [pc, #180]	; (800c5cc <HAL_DMA_Abort+0x23c>)
 800c518:	4293      	cmp	r3, r2
 800c51a:	d040      	beq.n	800c59e <HAL_DMA_Abort+0x20e>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	4a2b      	ldr	r2, [pc, #172]	; (800c5d0 <HAL_DMA_Abort+0x240>)
 800c522:	4293      	cmp	r3, r2
 800c524:	d03b      	beq.n	800c59e <HAL_DMA_Abort+0x20e>
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	4a2a      	ldr	r2, [pc, #168]	; (800c5d4 <HAL_DMA_Abort+0x244>)
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d036      	beq.n	800c59e <HAL_DMA_Abort+0x20e>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4a28      	ldr	r2, [pc, #160]	; (800c5d8 <HAL_DMA_Abort+0x248>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d031      	beq.n	800c59e <HAL_DMA_Abort+0x20e>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	4a27      	ldr	r2, [pc, #156]	; (800c5dc <HAL_DMA_Abort+0x24c>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d02c      	beq.n	800c59e <HAL_DMA_Abort+0x20e>
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4a25      	ldr	r2, [pc, #148]	; (800c5e0 <HAL_DMA_Abort+0x250>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d027      	beq.n	800c59e <HAL_DMA_Abort+0x20e>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	4a24      	ldr	r2, [pc, #144]	; (800c5e4 <HAL_DMA_Abort+0x254>)
 800c554:	4293      	cmp	r3, r2
 800c556:	d022      	beq.n	800c59e <HAL_DMA_Abort+0x20e>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a22      	ldr	r2, [pc, #136]	; (800c5e8 <HAL_DMA_Abort+0x258>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d01d      	beq.n	800c59e <HAL_DMA_Abort+0x20e>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4a21      	ldr	r2, [pc, #132]	; (800c5ec <HAL_DMA_Abort+0x25c>)
 800c568:	4293      	cmp	r3, r2
 800c56a:	d018      	beq.n	800c59e <HAL_DMA_Abort+0x20e>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4a1f      	ldr	r2, [pc, #124]	; (800c5f0 <HAL_DMA_Abort+0x260>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d013      	beq.n	800c59e <HAL_DMA_Abort+0x20e>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4a1e      	ldr	r2, [pc, #120]	; (800c5f4 <HAL_DMA_Abort+0x264>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d00e      	beq.n	800c59e <HAL_DMA_Abort+0x20e>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	4a1c      	ldr	r2, [pc, #112]	; (800c5f8 <HAL_DMA_Abort+0x268>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d009      	beq.n	800c59e <HAL_DMA_Abort+0x20e>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	4a1b      	ldr	r2, [pc, #108]	; (800c5fc <HAL_DMA_Abort+0x26c>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d004      	beq.n	800c59e <HAL_DMA_Abort+0x20e>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4a19      	ldr	r2, [pc, #100]	; (800c600 <HAL_DMA_Abort+0x270>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d132      	bne.n	800c604 <HAL_DMA_Abort+0x274>
 800c59e:	2301      	movs	r3, #1
 800c5a0:	e031      	b.n	800c606 <HAL_DMA_Abort+0x276>
 800c5a2:	bf00      	nop
 800c5a4:	40020010 	.word	0x40020010
 800c5a8:	40020028 	.word	0x40020028
 800c5ac:	40020040 	.word	0x40020040
 800c5b0:	40020058 	.word	0x40020058
 800c5b4:	40020070 	.word	0x40020070
 800c5b8:	40020088 	.word	0x40020088
 800c5bc:	400200a0 	.word	0x400200a0
 800c5c0:	400200b8 	.word	0x400200b8
 800c5c4:	40020410 	.word	0x40020410
 800c5c8:	40020428 	.word	0x40020428
 800c5cc:	40020440 	.word	0x40020440
 800c5d0:	40020458 	.word	0x40020458
 800c5d4:	40020470 	.word	0x40020470
 800c5d8:	40020488 	.word	0x40020488
 800c5dc:	400204a0 	.word	0x400204a0
 800c5e0:	400204b8 	.word	0x400204b8
 800c5e4:	58025408 	.word	0x58025408
 800c5e8:	5802541c 	.word	0x5802541c
 800c5ec:	58025430 	.word	0x58025430
 800c5f0:	58025444 	.word	0x58025444
 800c5f4:	58025458 	.word	0x58025458
 800c5f8:	5802546c 	.word	0x5802546c
 800c5fc:	58025480 	.word	0x58025480
 800c600:	58025494 	.word	0x58025494
 800c604:	2300      	movs	r3, #0
 800c606:	2b00      	cmp	r3, #0
 800c608:	d007      	beq.n	800c61a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c60e:	681a      	ldr	r2, [r3, #0]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c614:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c618:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4a6d      	ldr	r2, [pc, #436]	; (800c7d4 <HAL_DMA_Abort+0x444>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d04a      	beq.n	800c6ba <HAL_DMA_Abort+0x32a>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	4a6b      	ldr	r2, [pc, #428]	; (800c7d8 <HAL_DMA_Abort+0x448>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d045      	beq.n	800c6ba <HAL_DMA_Abort+0x32a>
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	4a6a      	ldr	r2, [pc, #424]	; (800c7dc <HAL_DMA_Abort+0x44c>)
 800c634:	4293      	cmp	r3, r2
 800c636:	d040      	beq.n	800c6ba <HAL_DMA_Abort+0x32a>
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	4a68      	ldr	r2, [pc, #416]	; (800c7e0 <HAL_DMA_Abort+0x450>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d03b      	beq.n	800c6ba <HAL_DMA_Abort+0x32a>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	4a67      	ldr	r2, [pc, #412]	; (800c7e4 <HAL_DMA_Abort+0x454>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d036      	beq.n	800c6ba <HAL_DMA_Abort+0x32a>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	4a65      	ldr	r2, [pc, #404]	; (800c7e8 <HAL_DMA_Abort+0x458>)
 800c652:	4293      	cmp	r3, r2
 800c654:	d031      	beq.n	800c6ba <HAL_DMA_Abort+0x32a>
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4a64      	ldr	r2, [pc, #400]	; (800c7ec <HAL_DMA_Abort+0x45c>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d02c      	beq.n	800c6ba <HAL_DMA_Abort+0x32a>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	4a62      	ldr	r2, [pc, #392]	; (800c7f0 <HAL_DMA_Abort+0x460>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d027      	beq.n	800c6ba <HAL_DMA_Abort+0x32a>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	4a61      	ldr	r2, [pc, #388]	; (800c7f4 <HAL_DMA_Abort+0x464>)
 800c670:	4293      	cmp	r3, r2
 800c672:	d022      	beq.n	800c6ba <HAL_DMA_Abort+0x32a>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a5f      	ldr	r2, [pc, #380]	; (800c7f8 <HAL_DMA_Abort+0x468>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d01d      	beq.n	800c6ba <HAL_DMA_Abort+0x32a>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4a5e      	ldr	r2, [pc, #376]	; (800c7fc <HAL_DMA_Abort+0x46c>)
 800c684:	4293      	cmp	r3, r2
 800c686:	d018      	beq.n	800c6ba <HAL_DMA_Abort+0x32a>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4a5c      	ldr	r2, [pc, #368]	; (800c800 <HAL_DMA_Abort+0x470>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d013      	beq.n	800c6ba <HAL_DMA_Abort+0x32a>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a5b      	ldr	r2, [pc, #364]	; (800c804 <HAL_DMA_Abort+0x474>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d00e      	beq.n	800c6ba <HAL_DMA_Abort+0x32a>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a59      	ldr	r2, [pc, #356]	; (800c808 <HAL_DMA_Abort+0x478>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d009      	beq.n	800c6ba <HAL_DMA_Abort+0x32a>
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4a58      	ldr	r2, [pc, #352]	; (800c80c <HAL_DMA_Abort+0x47c>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d004      	beq.n	800c6ba <HAL_DMA_Abort+0x32a>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4a56      	ldr	r2, [pc, #344]	; (800c810 <HAL_DMA_Abort+0x480>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d108      	bne.n	800c6cc <HAL_DMA_Abort+0x33c>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	681a      	ldr	r2, [r3, #0]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f022 0201 	bic.w	r2, r2, #1
 800c6c8:	601a      	str	r2, [r3, #0]
 800c6ca:	e007      	b.n	800c6dc <HAL_DMA_Abort+0x34c>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	681a      	ldr	r2, [r3, #0]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f022 0201 	bic.w	r2, r2, #1
 800c6da:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c6dc:	e013      	b.n	800c706 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c6de:	f7fd ffcf 	bl	800a680 <HAL_GetTick>
 800c6e2:	4602      	mov	r2, r0
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	1ad3      	subs	r3, r2, r3
 800c6e8:	2b05      	cmp	r3, #5
 800c6ea:	d90c      	bls.n	800c706 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2220      	movs	r2, #32
 800c6f0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2203      	movs	r2, #3
 800c6f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800c702:	2301      	movs	r3, #1
 800c704:	e12d      	b.n	800c962 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c706:	697b      	ldr	r3, [r7, #20]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f003 0301 	and.w	r3, r3, #1
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d1e5      	bne.n	800c6de <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4a2f      	ldr	r2, [pc, #188]	; (800c7d4 <HAL_DMA_Abort+0x444>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d04a      	beq.n	800c7b2 <HAL_DMA_Abort+0x422>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a2d      	ldr	r2, [pc, #180]	; (800c7d8 <HAL_DMA_Abort+0x448>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d045      	beq.n	800c7b2 <HAL_DMA_Abort+0x422>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4a2c      	ldr	r2, [pc, #176]	; (800c7dc <HAL_DMA_Abort+0x44c>)
 800c72c:	4293      	cmp	r3, r2
 800c72e:	d040      	beq.n	800c7b2 <HAL_DMA_Abort+0x422>
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4a2a      	ldr	r2, [pc, #168]	; (800c7e0 <HAL_DMA_Abort+0x450>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d03b      	beq.n	800c7b2 <HAL_DMA_Abort+0x422>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	4a29      	ldr	r2, [pc, #164]	; (800c7e4 <HAL_DMA_Abort+0x454>)
 800c740:	4293      	cmp	r3, r2
 800c742:	d036      	beq.n	800c7b2 <HAL_DMA_Abort+0x422>
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a27      	ldr	r2, [pc, #156]	; (800c7e8 <HAL_DMA_Abort+0x458>)
 800c74a:	4293      	cmp	r3, r2
 800c74c:	d031      	beq.n	800c7b2 <HAL_DMA_Abort+0x422>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4a26      	ldr	r2, [pc, #152]	; (800c7ec <HAL_DMA_Abort+0x45c>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d02c      	beq.n	800c7b2 <HAL_DMA_Abort+0x422>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a24      	ldr	r2, [pc, #144]	; (800c7f0 <HAL_DMA_Abort+0x460>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d027      	beq.n	800c7b2 <HAL_DMA_Abort+0x422>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	4a23      	ldr	r2, [pc, #140]	; (800c7f4 <HAL_DMA_Abort+0x464>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d022      	beq.n	800c7b2 <HAL_DMA_Abort+0x422>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a21      	ldr	r2, [pc, #132]	; (800c7f8 <HAL_DMA_Abort+0x468>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d01d      	beq.n	800c7b2 <HAL_DMA_Abort+0x422>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a20      	ldr	r2, [pc, #128]	; (800c7fc <HAL_DMA_Abort+0x46c>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d018      	beq.n	800c7b2 <HAL_DMA_Abort+0x422>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4a1e      	ldr	r2, [pc, #120]	; (800c800 <HAL_DMA_Abort+0x470>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d013      	beq.n	800c7b2 <HAL_DMA_Abort+0x422>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a1d      	ldr	r2, [pc, #116]	; (800c804 <HAL_DMA_Abort+0x474>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d00e      	beq.n	800c7b2 <HAL_DMA_Abort+0x422>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a1b      	ldr	r2, [pc, #108]	; (800c808 <HAL_DMA_Abort+0x478>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d009      	beq.n	800c7b2 <HAL_DMA_Abort+0x422>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4a1a      	ldr	r2, [pc, #104]	; (800c80c <HAL_DMA_Abort+0x47c>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d004      	beq.n	800c7b2 <HAL_DMA_Abort+0x422>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a18      	ldr	r2, [pc, #96]	; (800c810 <HAL_DMA_Abort+0x480>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d101      	bne.n	800c7b6 <HAL_DMA_Abort+0x426>
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	e000      	b.n	800c7b8 <HAL_DMA_Abort+0x428>
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d02b      	beq.n	800c814 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7c0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7c6:	f003 031f 	and.w	r3, r3, #31
 800c7ca:	223f      	movs	r2, #63	; 0x3f
 800c7cc:	409a      	lsls	r2, r3
 800c7ce:	68bb      	ldr	r3, [r7, #8]
 800c7d0:	609a      	str	r2, [r3, #8]
 800c7d2:	e02a      	b.n	800c82a <HAL_DMA_Abort+0x49a>
 800c7d4:	40020010 	.word	0x40020010
 800c7d8:	40020028 	.word	0x40020028
 800c7dc:	40020040 	.word	0x40020040
 800c7e0:	40020058 	.word	0x40020058
 800c7e4:	40020070 	.word	0x40020070
 800c7e8:	40020088 	.word	0x40020088
 800c7ec:	400200a0 	.word	0x400200a0
 800c7f0:	400200b8 	.word	0x400200b8
 800c7f4:	40020410 	.word	0x40020410
 800c7f8:	40020428 	.word	0x40020428
 800c7fc:	40020440 	.word	0x40020440
 800c800:	40020458 	.word	0x40020458
 800c804:	40020470 	.word	0x40020470
 800c808:	40020488 	.word	0x40020488
 800c80c:	400204a0 	.word	0x400204a0
 800c810:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c818:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c81e:	f003 031f 	and.w	r3, r3, #31
 800c822:	2201      	movs	r2, #1
 800c824:	409a      	lsls	r2, r3
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4a4f      	ldr	r2, [pc, #316]	; (800c96c <HAL_DMA_Abort+0x5dc>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d072      	beq.n	800c91a <HAL_DMA_Abort+0x58a>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4a4d      	ldr	r2, [pc, #308]	; (800c970 <HAL_DMA_Abort+0x5e0>)
 800c83a:	4293      	cmp	r3, r2
 800c83c:	d06d      	beq.n	800c91a <HAL_DMA_Abort+0x58a>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	4a4c      	ldr	r2, [pc, #304]	; (800c974 <HAL_DMA_Abort+0x5e4>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d068      	beq.n	800c91a <HAL_DMA_Abort+0x58a>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a4a      	ldr	r2, [pc, #296]	; (800c978 <HAL_DMA_Abort+0x5e8>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	d063      	beq.n	800c91a <HAL_DMA_Abort+0x58a>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	4a49      	ldr	r2, [pc, #292]	; (800c97c <HAL_DMA_Abort+0x5ec>)
 800c858:	4293      	cmp	r3, r2
 800c85a:	d05e      	beq.n	800c91a <HAL_DMA_Abort+0x58a>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4a47      	ldr	r2, [pc, #284]	; (800c980 <HAL_DMA_Abort+0x5f0>)
 800c862:	4293      	cmp	r3, r2
 800c864:	d059      	beq.n	800c91a <HAL_DMA_Abort+0x58a>
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	4a46      	ldr	r2, [pc, #280]	; (800c984 <HAL_DMA_Abort+0x5f4>)
 800c86c:	4293      	cmp	r3, r2
 800c86e:	d054      	beq.n	800c91a <HAL_DMA_Abort+0x58a>
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4a44      	ldr	r2, [pc, #272]	; (800c988 <HAL_DMA_Abort+0x5f8>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d04f      	beq.n	800c91a <HAL_DMA_Abort+0x58a>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	4a43      	ldr	r2, [pc, #268]	; (800c98c <HAL_DMA_Abort+0x5fc>)
 800c880:	4293      	cmp	r3, r2
 800c882:	d04a      	beq.n	800c91a <HAL_DMA_Abort+0x58a>
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4a41      	ldr	r2, [pc, #260]	; (800c990 <HAL_DMA_Abort+0x600>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d045      	beq.n	800c91a <HAL_DMA_Abort+0x58a>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4a40      	ldr	r2, [pc, #256]	; (800c994 <HAL_DMA_Abort+0x604>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d040      	beq.n	800c91a <HAL_DMA_Abort+0x58a>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4a3e      	ldr	r2, [pc, #248]	; (800c998 <HAL_DMA_Abort+0x608>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d03b      	beq.n	800c91a <HAL_DMA_Abort+0x58a>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4a3d      	ldr	r2, [pc, #244]	; (800c99c <HAL_DMA_Abort+0x60c>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d036      	beq.n	800c91a <HAL_DMA_Abort+0x58a>
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a3b      	ldr	r2, [pc, #236]	; (800c9a0 <HAL_DMA_Abort+0x610>)
 800c8b2:	4293      	cmp	r3, r2
 800c8b4:	d031      	beq.n	800c91a <HAL_DMA_Abort+0x58a>
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	4a3a      	ldr	r2, [pc, #232]	; (800c9a4 <HAL_DMA_Abort+0x614>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d02c      	beq.n	800c91a <HAL_DMA_Abort+0x58a>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4a38      	ldr	r2, [pc, #224]	; (800c9a8 <HAL_DMA_Abort+0x618>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d027      	beq.n	800c91a <HAL_DMA_Abort+0x58a>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	4a37      	ldr	r2, [pc, #220]	; (800c9ac <HAL_DMA_Abort+0x61c>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d022      	beq.n	800c91a <HAL_DMA_Abort+0x58a>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a35      	ldr	r2, [pc, #212]	; (800c9b0 <HAL_DMA_Abort+0x620>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d01d      	beq.n	800c91a <HAL_DMA_Abort+0x58a>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4a34      	ldr	r2, [pc, #208]	; (800c9b4 <HAL_DMA_Abort+0x624>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d018      	beq.n	800c91a <HAL_DMA_Abort+0x58a>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4a32      	ldr	r2, [pc, #200]	; (800c9b8 <HAL_DMA_Abort+0x628>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d013      	beq.n	800c91a <HAL_DMA_Abort+0x58a>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a31      	ldr	r2, [pc, #196]	; (800c9bc <HAL_DMA_Abort+0x62c>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d00e      	beq.n	800c91a <HAL_DMA_Abort+0x58a>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a2f      	ldr	r2, [pc, #188]	; (800c9c0 <HAL_DMA_Abort+0x630>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d009      	beq.n	800c91a <HAL_DMA_Abort+0x58a>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4a2e      	ldr	r2, [pc, #184]	; (800c9c4 <HAL_DMA_Abort+0x634>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d004      	beq.n	800c91a <HAL_DMA_Abort+0x58a>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4a2c      	ldr	r2, [pc, #176]	; (800c9c8 <HAL_DMA_Abort+0x638>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d101      	bne.n	800c91e <HAL_DMA_Abort+0x58e>
 800c91a:	2301      	movs	r3, #1
 800c91c:	e000      	b.n	800c920 <HAL_DMA_Abort+0x590>
 800c91e:	2300      	movs	r3, #0
 800c920:	2b00      	cmp	r3, #0
 800c922:	d015      	beq.n	800c950 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c928:	687a      	ldr	r2, [r7, #4]
 800c92a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c92c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c932:	2b00      	cmp	r3, #0
 800c934:	d00c      	beq.n	800c950 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c940:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c944:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c94a:	687a      	ldr	r2, [r7, #4]
 800c94c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c94e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2201      	movs	r2, #1
 800c954:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2200      	movs	r2, #0
 800c95c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800c960:	2300      	movs	r3, #0
}
 800c962:	4618      	mov	r0, r3
 800c964:	3718      	adds	r7, #24
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	bf00      	nop
 800c96c:	40020010 	.word	0x40020010
 800c970:	40020028 	.word	0x40020028
 800c974:	40020040 	.word	0x40020040
 800c978:	40020058 	.word	0x40020058
 800c97c:	40020070 	.word	0x40020070
 800c980:	40020088 	.word	0x40020088
 800c984:	400200a0 	.word	0x400200a0
 800c988:	400200b8 	.word	0x400200b8
 800c98c:	40020410 	.word	0x40020410
 800c990:	40020428 	.word	0x40020428
 800c994:	40020440 	.word	0x40020440
 800c998:	40020458 	.word	0x40020458
 800c99c:	40020470 	.word	0x40020470
 800c9a0:	40020488 	.word	0x40020488
 800c9a4:	400204a0 	.word	0x400204a0
 800c9a8:	400204b8 	.word	0x400204b8
 800c9ac:	58025408 	.word	0x58025408
 800c9b0:	5802541c 	.word	0x5802541c
 800c9b4:	58025430 	.word	0x58025430
 800c9b8:	58025444 	.word	0x58025444
 800c9bc:	58025458 	.word	0x58025458
 800c9c0:	5802546c 	.word	0x5802546c
 800c9c4:	58025480 	.word	0x58025480
 800c9c8:	58025494 	.word	0x58025494

0800c9cc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b084      	sub	sp, #16
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d101      	bne.n	800c9de <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800c9da:	2301      	movs	r3, #1
 800c9dc:	e205      	b.n	800cdea <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	2b02      	cmp	r3, #2
 800c9e8:	d004      	beq.n	800c9f4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2280      	movs	r2, #128	; 0x80
 800c9ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	e1fa      	b.n	800cdea <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a8c      	ldr	r2, [pc, #560]	; (800cc2c <HAL_DMA_Abort_IT+0x260>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d04a      	beq.n	800ca94 <HAL_DMA_Abort_IT+0xc8>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4a8b      	ldr	r2, [pc, #556]	; (800cc30 <HAL_DMA_Abort_IT+0x264>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d045      	beq.n	800ca94 <HAL_DMA_Abort_IT+0xc8>
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	4a89      	ldr	r2, [pc, #548]	; (800cc34 <HAL_DMA_Abort_IT+0x268>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d040      	beq.n	800ca94 <HAL_DMA_Abort_IT+0xc8>
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4a88      	ldr	r2, [pc, #544]	; (800cc38 <HAL_DMA_Abort_IT+0x26c>)
 800ca18:	4293      	cmp	r3, r2
 800ca1a:	d03b      	beq.n	800ca94 <HAL_DMA_Abort_IT+0xc8>
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a86      	ldr	r2, [pc, #536]	; (800cc3c <HAL_DMA_Abort_IT+0x270>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d036      	beq.n	800ca94 <HAL_DMA_Abort_IT+0xc8>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4a85      	ldr	r2, [pc, #532]	; (800cc40 <HAL_DMA_Abort_IT+0x274>)
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	d031      	beq.n	800ca94 <HAL_DMA_Abort_IT+0xc8>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a83      	ldr	r2, [pc, #524]	; (800cc44 <HAL_DMA_Abort_IT+0x278>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d02c      	beq.n	800ca94 <HAL_DMA_Abort_IT+0xc8>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	4a82      	ldr	r2, [pc, #520]	; (800cc48 <HAL_DMA_Abort_IT+0x27c>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d027      	beq.n	800ca94 <HAL_DMA_Abort_IT+0xc8>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4a80      	ldr	r2, [pc, #512]	; (800cc4c <HAL_DMA_Abort_IT+0x280>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d022      	beq.n	800ca94 <HAL_DMA_Abort_IT+0xc8>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4a7f      	ldr	r2, [pc, #508]	; (800cc50 <HAL_DMA_Abort_IT+0x284>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d01d      	beq.n	800ca94 <HAL_DMA_Abort_IT+0xc8>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a7d      	ldr	r2, [pc, #500]	; (800cc54 <HAL_DMA_Abort_IT+0x288>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d018      	beq.n	800ca94 <HAL_DMA_Abort_IT+0xc8>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4a7c      	ldr	r2, [pc, #496]	; (800cc58 <HAL_DMA_Abort_IT+0x28c>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d013      	beq.n	800ca94 <HAL_DMA_Abort_IT+0xc8>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a7a      	ldr	r2, [pc, #488]	; (800cc5c <HAL_DMA_Abort_IT+0x290>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d00e      	beq.n	800ca94 <HAL_DMA_Abort_IT+0xc8>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4a79      	ldr	r2, [pc, #484]	; (800cc60 <HAL_DMA_Abort_IT+0x294>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d009      	beq.n	800ca94 <HAL_DMA_Abort_IT+0xc8>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4a77      	ldr	r2, [pc, #476]	; (800cc64 <HAL_DMA_Abort_IT+0x298>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d004      	beq.n	800ca94 <HAL_DMA_Abort_IT+0xc8>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4a76      	ldr	r2, [pc, #472]	; (800cc68 <HAL_DMA_Abort_IT+0x29c>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d101      	bne.n	800ca98 <HAL_DMA_Abort_IT+0xcc>
 800ca94:	2301      	movs	r3, #1
 800ca96:	e000      	b.n	800ca9a <HAL_DMA_Abort_IT+0xce>
 800ca98:	2300      	movs	r3, #0
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d065      	beq.n	800cb6a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2204      	movs	r2, #4
 800caa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	4a60      	ldr	r2, [pc, #384]	; (800cc2c <HAL_DMA_Abort_IT+0x260>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d04a      	beq.n	800cb46 <HAL_DMA_Abort_IT+0x17a>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4a5e      	ldr	r2, [pc, #376]	; (800cc30 <HAL_DMA_Abort_IT+0x264>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d045      	beq.n	800cb46 <HAL_DMA_Abort_IT+0x17a>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	4a5d      	ldr	r2, [pc, #372]	; (800cc34 <HAL_DMA_Abort_IT+0x268>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d040      	beq.n	800cb46 <HAL_DMA_Abort_IT+0x17a>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4a5b      	ldr	r2, [pc, #364]	; (800cc38 <HAL_DMA_Abort_IT+0x26c>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d03b      	beq.n	800cb46 <HAL_DMA_Abort_IT+0x17a>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	4a5a      	ldr	r2, [pc, #360]	; (800cc3c <HAL_DMA_Abort_IT+0x270>)
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d036      	beq.n	800cb46 <HAL_DMA_Abort_IT+0x17a>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4a58      	ldr	r2, [pc, #352]	; (800cc40 <HAL_DMA_Abort_IT+0x274>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d031      	beq.n	800cb46 <HAL_DMA_Abort_IT+0x17a>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	4a57      	ldr	r2, [pc, #348]	; (800cc44 <HAL_DMA_Abort_IT+0x278>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d02c      	beq.n	800cb46 <HAL_DMA_Abort_IT+0x17a>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4a55      	ldr	r2, [pc, #340]	; (800cc48 <HAL_DMA_Abort_IT+0x27c>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d027      	beq.n	800cb46 <HAL_DMA_Abort_IT+0x17a>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4a54      	ldr	r2, [pc, #336]	; (800cc4c <HAL_DMA_Abort_IT+0x280>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d022      	beq.n	800cb46 <HAL_DMA_Abort_IT+0x17a>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4a52      	ldr	r2, [pc, #328]	; (800cc50 <HAL_DMA_Abort_IT+0x284>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d01d      	beq.n	800cb46 <HAL_DMA_Abort_IT+0x17a>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4a51      	ldr	r2, [pc, #324]	; (800cc54 <HAL_DMA_Abort_IT+0x288>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d018      	beq.n	800cb46 <HAL_DMA_Abort_IT+0x17a>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4a4f      	ldr	r2, [pc, #316]	; (800cc58 <HAL_DMA_Abort_IT+0x28c>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d013      	beq.n	800cb46 <HAL_DMA_Abort_IT+0x17a>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	4a4e      	ldr	r2, [pc, #312]	; (800cc5c <HAL_DMA_Abort_IT+0x290>)
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d00e      	beq.n	800cb46 <HAL_DMA_Abort_IT+0x17a>
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	4a4c      	ldr	r2, [pc, #304]	; (800cc60 <HAL_DMA_Abort_IT+0x294>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d009      	beq.n	800cb46 <HAL_DMA_Abort_IT+0x17a>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4a4b      	ldr	r2, [pc, #300]	; (800cc64 <HAL_DMA_Abort_IT+0x298>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d004      	beq.n	800cb46 <HAL_DMA_Abort_IT+0x17a>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4a49      	ldr	r2, [pc, #292]	; (800cc68 <HAL_DMA_Abort_IT+0x29c>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d108      	bne.n	800cb58 <HAL_DMA_Abort_IT+0x18c>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f022 0201 	bic.w	r2, r2, #1
 800cb54:	601a      	str	r2, [r3, #0]
 800cb56:	e147      	b.n	800cde8 <HAL_DMA_Abort_IT+0x41c>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f022 0201 	bic.w	r2, r2, #1
 800cb66:	601a      	str	r2, [r3, #0]
 800cb68:	e13e      	b.n	800cde8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	681a      	ldr	r2, [r3, #0]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f022 020e 	bic.w	r2, r2, #14
 800cb78:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	4a2b      	ldr	r2, [pc, #172]	; (800cc2c <HAL_DMA_Abort_IT+0x260>)
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d04a      	beq.n	800cc1a <HAL_DMA_Abort_IT+0x24e>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	4a29      	ldr	r2, [pc, #164]	; (800cc30 <HAL_DMA_Abort_IT+0x264>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d045      	beq.n	800cc1a <HAL_DMA_Abort_IT+0x24e>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	4a28      	ldr	r2, [pc, #160]	; (800cc34 <HAL_DMA_Abort_IT+0x268>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d040      	beq.n	800cc1a <HAL_DMA_Abort_IT+0x24e>
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a26      	ldr	r2, [pc, #152]	; (800cc38 <HAL_DMA_Abort_IT+0x26c>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d03b      	beq.n	800cc1a <HAL_DMA_Abort_IT+0x24e>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4a25      	ldr	r2, [pc, #148]	; (800cc3c <HAL_DMA_Abort_IT+0x270>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d036      	beq.n	800cc1a <HAL_DMA_Abort_IT+0x24e>
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4a23      	ldr	r2, [pc, #140]	; (800cc40 <HAL_DMA_Abort_IT+0x274>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d031      	beq.n	800cc1a <HAL_DMA_Abort_IT+0x24e>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	4a22      	ldr	r2, [pc, #136]	; (800cc44 <HAL_DMA_Abort_IT+0x278>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d02c      	beq.n	800cc1a <HAL_DMA_Abort_IT+0x24e>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a20      	ldr	r2, [pc, #128]	; (800cc48 <HAL_DMA_Abort_IT+0x27c>)
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d027      	beq.n	800cc1a <HAL_DMA_Abort_IT+0x24e>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	4a1f      	ldr	r2, [pc, #124]	; (800cc4c <HAL_DMA_Abort_IT+0x280>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d022      	beq.n	800cc1a <HAL_DMA_Abort_IT+0x24e>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a1d      	ldr	r2, [pc, #116]	; (800cc50 <HAL_DMA_Abort_IT+0x284>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d01d      	beq.n	800cc1a <HAL_DMA_Abort_IT+0x24e>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4a1c      	ldr	r2, [pc, #112]	; (800cc54 <HAL_DMA_Abort_IT+0x288>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d018      	beq.n	800cc1a <HAL_DMA_Abort_IT+0x24e>
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	4a1a      	ldr	r2, [pc, #104]	; (800cc58 <HAL_DMA_Abort_IT+0x28c>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d013      	beq.n	800cc1a <HAL_DMA_Abort_IT+0x24e>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	4a19      	ldr	r2, [pc, #100]	; (800cc5c <HAL_DMA_Abort_IT+0x290>)
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d00e      	beq.n	800cc1a <HAL_DMA_Abort_IT+0x24e>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a17      	ldr	r2, [pc, #92]	; (800cc60 <HAL_DMA_Abort_IT+0x294>)
 800cc02:	4293      	cmp	r3, r2
 800cc04:	d009      	beq.n	800cc1a <HAL_DMA_Abort_IT+0x24e>
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a16      	ldr	r2, [pc, #88]	; (800cc64 <HAL_DMA_Abort_IT+0x298>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d004      	beq.n	800cc1a <HAL_DMA_Abort_IT+0x24e>
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a14      	ldr	r2, [pc, #80]	; (800cc68 <HAL_DMA_Abort_IT+0x29c>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d128      	bne.n	800cc6c <HAL_DMA_Abort_IT+0x2a0>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f022 0201 	bic.w	r2, r2, #1
 800cc28:	601a      	str	r2, [r3, #0]
 800cc2a:	e027      	b.n	800cc7c <HAL_DMA_Abort_IT+0x2b0>
 800cc2c:	40020010 	.word	0x40020010
 800cc30:	40020028 	.word	0x40020028
 800cc34:	40020040 	.word	0x40020040
 800cc38:	40020058 	.word	0x40020058
 800cc3c:	40020070 	.word	0x40020070
 800cc40:	40020088 	.word	0x40020088
 800cc44:	400200a0 	.word	0x400200a0
 800cc48:	400200b8 	.word	0x400200b8
 800cc4c:	40020410 	.word	0x40020410
 800cc50:	40020428 	.word	0x40020428
 800cc54:	40020440 	.word	0x40020440
 800cc58:	40020458 	.word	0x40020458
 800cc5c:	40020470 	.word	0x40020470
 800cc60:	40020488 	.word	0x40020488
 800cc64:	400204a0 	.word	0x400204a0
 800cc68:	400204b8 	.word	0x400204b8
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	681a      	ldr	r2, [r3, #0]
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f022 0201 	bic.w	r2, r2, #1
 800cc7a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a5c      	ldr	r2, [pc, #368]	; (800cdf4 <HAL_DMA_Abort_IT+0x428>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d072      	beq.n	800cd6c <HAL_DMA_Abort_IT+0x3a0>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4a5b      	ldr	r2, [pc, #364]	; (800cdf8 <HAL_DMA_Abort_IT+0x42c>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d06d      	beq.n	800cd6c <HAL_DMA_Abort_IT+0x3a0>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4a59      	ldr	r2, [pc, #356]	; (800cdfc <HAL_DMA_Abort_IT+0x430>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d068      	beq.n	800cd6c <HAL_DMA_Abort_IT+0x3a0>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	4a58      	ldr	r2, [pc, #352]	; (800ce00 <HAL_DMA_Abort_IT+0x434>)
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d063      	beq.n	800cd6c <HAL_DMA_Abort_IT+0x3a0>
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	681b      	ldr	r3, [r3, #0]
 800cca8:	4a56      	ldr	r2, [pc, #344]	; (800ce04 <HAL_DMA_Abort_IT+0x438>)
 800ccaa:	4293      	cmp	r3, r2
 800ccac:	d05e      	beq.n	800cd6c <HAL_DMA_Abort_IT+0x3a0>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	4a55      	ldr	r2, [pc, #340]	; (800ce08 <HAL_DMA_Abort_IT+0x43c>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d059      	beq.n	800cd6c <HAL_DMA_Abort_IT+0x3a0>
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4a53      	ldr	r2, [pc, #332]	; (800ce0c <HAL_DMA_Abort_IT+0x440>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d054      	beq.n	800cd6c <HAL_DMA_Abort_IT+0x3a0>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4a52      	ldr	r2, [pc, #328]	; (800ce10 <HAL_DMA_Abort_IT+0x444>)
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d04f      	beq.n	800cd6c <HAL_DMA_Abort_IT+0x3a0>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	4a50      	ldr	r2, [pc, #320]	; (800ce14 <HAL_DMA_Abort_IT+0x448>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d04a      	beq.n	800cd6c <HAL_DMA_Abort_IT+0x3a0>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4a4f      	ldr	r2, [pc, #316]	; (800ce18 <HAL_DMA_Abort_IT+0x44c>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d045      	beq.n	800cd6c <HAL_DMA_Abort_IT+0x3a0>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4a4d      	ldr	r2, [pc, #308]	; (800ce1c <HAL_DMA_Abort_IT+0x450>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d040      	beq.n	800cd6c <HAL_DMA_Abort_IT+0x3a0>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	4a4c      	ldr	r2, [pc, #304]	; (800ce20 <HAL_DMA_Abort_IT+0x454>)
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d03b      	beq.n	800cd6c <HAL_DMA_Abort_IT+0x3a0>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	4a4a      	ldr	r2, [pc, #296]	; (800ce24 <HAL_DMA_Abort_IT+0x458>)
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d036      	beq.n	800cd6c <HAL_DMA_Abort_IT+0x3a0>
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	4a49      	ldr	r2, [pc, #292]	; (800ce28 <HAL_DMA_Abort_IT+0x45c>)
 800cd04:	4293      	cmp	r3, r2
 800cd06:	d031      	beq.n	800cd6c <HAL_DMA_Abort_IT+0x3a0>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a47      	ldr	r2, [pc, #284]	; (800ce2c <HAL_DMA_Abort_IT+0x460>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d02c      	beq.n	800cd6c <HAL_DMA_Abort_IT+0x3a0>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4a46      	ldr	r2, [pc, #280]	; (800ce30 <HAL_DMA_Abort_IT+0x464>)
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d027      	beq.n	800cd6c <HAL_DMA_Abort_IT+0x3a0>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4a44      	ldr	r2, [pc, #272]	; (800ce34 <HAL_DMA_Abort_IT+0x468>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d022      	beq.n	800cd6c <HAL_DMA_Abort_IT+0x3a0>
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4a43      	ldr	r2, [pc, #268]	; (800ce38 <HAL_DMA_Abort_IT+0x46c>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d01d      	beq.n	800cd6c <HAL_DMA_Abort_IT+0x3a0>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	4a41      	ldr	r2, [pc, #260]	; (800ce3c <HAL_DMA_Abort_IT+0x470>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d018      	beq.n	800cd6c <HAL_DMA_Abort_IT+0x3a0>
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	4a40      	ldr	r2, [pc, #256]	; (800ce40 <HAL_DMA_Abort_IT+0x474>)
 800cd40:	4293      	cmp	r3, r2
 800cd42:	d013      	beq.n	800cd6c <HAL_DMA_Abort_IT+0x3a0>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4a3e      	ldr	r2, [pc, #248]	; (800ce44 <HAL_DMA_Abort_IT+0x478>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d00e      	beq.n	800cd6c <HAL_DMA_Abort_IT+0x3a0>
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	4a3d      	ldr	r2, [pc, #244]	; (800ce48 <HAL_DMA_Abort_IT+0x47c>)
 800cd54:	4293      	cmp	r3, r2
 800cd56:	d009      	beq.n	800cd6c <HAL_DMA_Abort_IT+0x3a0>
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a3b      	ldr	r2, [pc, #236]	; (800ce4c <HAL_DMA_Abort_IT+0x480>)
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	d004      	beq.n	800cd6c <HAL_DMA_Abort_IT+0x3a0>
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	4a3a      	ldr	r2, [pc, #232]	; (800ce50 <HAL_DMA_Abort_IT+0x484>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d101      	bne.n	800cd70 <HAL_DMA_Abort_IT+0x3a4>
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	e000      	b.n	800cd72 <HAL_DMA_Abort_IT+0x3a6>
 800cd70:	2300      	movs	r3, #0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d028      	beq.n	800cdc8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cd84:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd8a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cd90:	f003 031f 	and.w	r3, r3, #31
 800cd94:	2201      	movs	r2, #1
 800cd96:	409a      	lsls	r2, r3
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800cda4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00c      	beq.n	800cdc8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cdbc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdc2:	687a      	ldr	r2, [r7, #4]
 800cdc4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800cdc6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2201      	movs	r2, #1
 800cdcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d003      	beq.n	800cde8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800cde8:	2300      	movs	r3, #0
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3710      	adds	r7, #16
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}
 800cdf2:	bf00      	nop
 800cdf4:	40020010 	.word	0x40020010
 800cdf8:	40020028 	.word	0x40020028
 800cdfc:	40020040 	.word	0x40020040
 800ce00:	40020058 	.word	0x40020058
 800ce04:	40020070 	.word	0x40020070
 800ce08:	40020088 	.word	0x40020088
 800ce0c:	400200a0 	.word	0x400200a0
 800ce10:	400200b8 	.word	0x400200b8
 800ce14:	40020410 	.word	0x40020410
 800ce18:	40020428 	.word	0x40020428
 800ce1c:	40020440 	.word	0x40020440
 800ce20:	40020458 	.word	0x40020458
 800ce24:	40020470 	.word	0x40020470
 800ce28:	40020488 	.word	0x40020488
 800ce2c:	400204a0 	.word	0x400204a0
 800ce30:	400204b8 	.word	0x400204b8
 800ce34:	58025408 	.word	0x58025408
 800ce38:	5802541c 	.word	0x5802541c
 800ce3c:	58025430 	.word	0x58025430
 800ce40:	58025444 	.word	0x58025444
 800ce44:	58025458 	.word	0x58025458
 800ce48:	5802546c 	.word	0x5802546c
 800ce4c:	58025480 	.word	0x58025480
 800ce50:	58025494 	.word	0x58025494

0800ce54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b089      	sub	sp, #36	; 0x24
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ce5e:	2300      	movs	r3, #0
 800ce60:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800ce62:	4b86      	ldr	r3, [pc, #536]	; (800d07c <HAL_GPIO_Init+0x228>)
 800ce64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ce66:	e18c      	b.n	800d182 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	681a      	ldr	r2, [r3, #0]
 800ce6c:	2101      	movs	r1, #1
 800ce6e:	69fb      	ldr	r3, [r7, #28]
 800ce70:	fa01 f303 	lsl.w	r3, r1, r3
 800ce74:	4013      	ands	r3, r2
 800ce76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	f000 817e 	beq.w	800d17c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	685b      	ldr	r3, [r3, #4]
 800ce84:	f003 0303 	and.w	r3, r3, #3
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d005      	beq.n	800ce98 <HAL_GPIO_Init+0x44>
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	f003 0303 	and.w	r3, r3, #3
 800ce94:	2b02      	cmp	r3, #2
 800ce96:	d130      	bne.n	800cefa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	689b      	ldr	r3, [r3, #8]
 800ce9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ce9e:	69fb      	ldr	r3, [r7, #28]
 800cea0:	005b      	lsls	r3, r3, #1
 800cea2:	2203      	movs	r2, #3
 800cea4:	fa02 f303 	lsl.w	r3, r2, r3
 800cea8:	43db      	mvns	r3, r3
 800ceaa:	69ba      	ldr	r2, [r7, #24]
 800ceac:	4013      	ands	r3, r2
 800ceae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	68da      	ldr	r2, [r3, #12]
 800ceb4:	69fb      	ldr	r3, [r7, #28]
 800ceb6:	005b      	lsls	r3, r3, #1
 800ceb8:	fa02 f303 	lsl.w	r3, r2, r3
 800cebc:	69ba      	ldr	r2, [r7, #24]
 800cebe:	4313      	orrs	r3, r2
 800cec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	69ba      	ldr	r2, [r7, #24]
 800cec6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800cece:	2201      	movs	r2, #1
 800ced0:	69fb      	ldr	r3, [r7, #28]
 800ced2:	fa02 f303 	lsl.w	r3, r2, r3
 800ced6:	43db      	mvns	r3, r3
 800ced8:	69ba      	ldr	r2, [r7, #24]
 800ceda:	4013      	ands	r3, r2
 800cedc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	685b      	ldr	r3, [r3, #4]
 800cee2:	091b      	lsrs	r3, r3, #4
 800cee4:	f003 0201 	and.w	r2, r3, #1
 800cee8:	69fb      	ldr	r3, [r7, #28]
 800ceea:	fa02 f303 	lsl.w	r3, r2, r3
 800ceee:	69ba      	ldr	r2, [r7, #24]
 800cef0:	4313      	orrs	r3, r2
 800cef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	69ba      	ldr	r2, [r7, #24]
 800cef8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	685b      	ldr	r3, [r3, #4]
 800cefe:	f003 0303 	and.w	r3, r3, #3
 800cf02:	2b03      	cmp	r3, #3
 800cf04:	d017      	beq.n	800cf36 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	68db      	ldr	r3, [r3, #12]
 800cf0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800cf0c:	69fb      	ldr	r3, [r7, #28]
 800cf0e:	005b      	lsls	r3, r3, #1
 800cf10:	2203      	movs	r2, #3
 800cf12:	fa02 f303 	lsl.w	r3, r2, r3
 800cf16:	43db      	mvns	r3, r3
 800cf18:	69ba      	ldr	r2, [r7, #24]
 800cf1a:	4013      	ands	r3, r2
 800cf1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	689a      	ldr	r2, [r3, #8]
 800cf22:	69fb      	ldr	r3, [r7, #28]
 800cf24:	005b      	lsls	r3, r3, #1
 800cf26:	fa02 f303 	lsl.w	r3, r2, r3
 800cf2a:	69ba      	ldr	r2, [r7, #24]
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	69ba      	ldr	r2, [r7, #24]
 800cf34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	f003 0303 	and.w	r3, r3, #3
 800cf3e:	2b02      	cmp	r3, #2
 800cf40:	d123      	bne.n	800cf8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cf42:	69fb      	ldr	r3, [r7, #28]
 800cf44:	08da      	lsrs	r2, r3, #3
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	3208      	adds	r2, #8
 800cf4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800cf50:	69fb      	ldr	r3, [r7, #28]
 800cf52:	f003 0307 	and.w	r3, r3, #7
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	220f      	movs	r2, #15
 800cf5a:	fa02 f303 	lsl.w	r3, r2, r3
 800cf5e:	43db      	mvns	r3, r3
 800cf60:	69ba      	ldr	r2, [r7, #24]
 800cf62:	4013      	ands	r3, r2
 800cf64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	691a      	ldr	r2, [r3, #16]
 800cf6a:	69fb      	ldr	r3, [r7, #28]
 800cf6c:	f003 0307 	and.w	r3, r3, #7
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	fa02 f303 	lsl.w	r3, r2, r3
 800cf76:	69ba      	ldr	r2, [r7, #24]
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800cf7c:	69fb      	ldr	r3, [r7, #28]
 800cf7e:	08da      	lsrs	r2, r3, #3
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	3208      	adds	r2, #8
 800cf84:	69b9      	ldr	r1, [r7, #24]
 800cf86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800cf90:	69fb      	ldr	r3, [r7, #28]
 800cf92:	005b      	lsls	r3, r3, #1
 800cf94:	2203      	movs	r2, #3
 800cf96:	fa02 f303 	lsl.w	r3, r2, r3
 800cf9a:	43db      	mvns	r3, r3
 800cf9c:	69ba      	ldr	r2, [r7, #24]
 800cf9e:	4013      	ands	r3, r2
 800cfa0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	f003 0203 	and.w	r2, r3, #3
 800cfaa:	69fb      	ldr	r3, [r7, #28]
 800cfac:	005b      	lsls	r3, r3, #1
 800cfae:	fa02 f303 	lsl.w	r3, r2, r3
 800cfb2:	69ba      	ldr	r2, [r7, #24]
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	69ba      	ldr	r2, [r7, #24]
 800cfbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	685b      	ldr	r3, [r3, #4]
 800cfc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	f000 80d8 	beq.w	800d17c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cfcc:	4b2c      	ldr	r3, [pc, #176]	; (800d080 <HAL_GPIO_Init+0x22c>)
 800cfce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cfd2:	4a2b      	ldr	r2, [pc, #172]	; (800d080 <HAL_GPIO_Init+0x22c>)
 800cfd4:	f043 0302 	orr.w	r3, r3, #2
 800cfd8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800cfdc:	4b28      	ldr	r3, [pc, #160]	; (800d080 <HAL_GPIO_Init+0x22c>)
 800cfde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cfe2:	f003 0302 	and.w	r3, r3, #2
 800cfe6:	60fb      	str	r3, [r7, #12]
 800cfe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cfea:	4a26      	ldr	r2, [pc, #152]	; (800d084 <HAL_GPIO_Init+0x230>)
 800cfec:	69fb      	ldr	r3, [r7, #28]
 800cfee:	089b      	lsrs	r3, r3, #2
 800cff0:	3302      	adds	r3, #2
 800cff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800cff8:	69fb      	ldr	r3, [r7, #28]
 800cffa:	f003 0303 	and.w	r3, r3, #3
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	220f      	movs	r2, #15
 800d002:	fa02 f303 	lsl.w	r3, r2, r3
 800d006:	43db      	mvns	r3, r3
 800d008:	69ba      	ldr	r2, [r7, #24]
 800d00a:	4013      	ands	r3, r2
 800d00c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	4a1d      	ldr	r2, [pc, #116]	; (800d088 <HAL_GPIO_Init+0x234>)
 800d012:	4293      	cmp	r3, r2
 800d014:	d04a      	beq.n	800d0ac <HAL_GPIO_Init+0x258>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	4a1c      	ldr	r2, [pc, #112]	; (800d08c <HAL_GPIO_Init+0x238>)
 800d01a:	4293      	cmp	r3, r2
 800d01c:	d02b      	beq.n	800d076 <HAL_GPIO_Init+0x222>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	4a1b      	ldr	r2, [pc, #108]	; (800d090 <HAL_GPIO_Init+0x23c>)
 800d022:	4293      	cmp	r3, r2
 800d024:	d025      	beq.n	800d072 <HAL_GPIO_Init+0x21e>
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	4a1a      	ldr	r2, [pc, #104]	; (800d094 <HAL_GPIO_Init+0x240>)
 800d02a:	4293      	cmp	r3, r2
 800d02c:	d01f      	beq.n	800d06e <HAL_GPIO_Init+0x21a>
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	4a19      	ldr	r2, [pc, #100]	; (800d098 <HAL_GPIO_Init+0x244>)
 800d032:	4293      	cmp	r3, r2
 800d034:	d019      	beq.n	800d06a <HAL_GPIO_Init+0x216>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	4a18      	ldr	r2, [pc, #96]	; (800d09c <HAL_GPIO_Init+0x248>)
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d013      	beq.n	800d066 <HAL_GPIO_Init+0x212>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	4a17      	ldr	r2, [pc, #92]	; (800d0a0 <HAL_GPIO_Init+0x24c>)
 800d042:	4293      	cmp	r3, r2
 800d044:	d00d      	beq.n	800d062 <HAL_GPIO_Init+0x20e>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	4a16      	ldr	r2, [pc, #88]	; (800d0a4 <HAL_GPIO_Init+0x250>)
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d007      	beq.n	800d05e <HAL_GPIO_Init+0x20a>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	4a15      	ldr	r2, [pc, #84]	; (800d0a8 <HAL_GPIO_Init+0x254>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d101      	bne.n	800d05a <HAL_GPIO_Init+0x206>
 800d056:	2309      	movs	r3, #9
 800d058:	e029      	b.n	800d0ae <HAL_GPIO_Init+0x25a>
 800d05a:	230a      	movs	r3, #10
 800d05c:	e027      	b.n	800d0ae <HAL_GPIO_Init+0x25a>
 800d05e:	2307      	movs	r3, #7
 800d060:	e025      	b.n	800d0ae <HAL_GPIO_Init+0x25a>
 800d062:	2306      	movs	r3, #6
 800d064:	e023      	b.n	800d0ae <HAL_GPIO_Init+0x25a>
 800d066:	2305      	movs	r3, #5
 800d068:	e021      	b.n	800d0ae <HAL_GPIO_Init+0x25a>
 800d06a:	2304      	movs	r3, #4
 800d06c:	e01f      	b.n	800d0ae <HAL_GPIO_Init+0x25a>
 800d06e:	2303      	movs	r3, #3
 800d070:	e01d      	b.n	800d0ae <HAL_GPIO_Init+0x25a>
 800d072:	2302      	movs	r3, #2
 800d074:	e01b      	b.n	800d0ae <HAL_GPIO_Init+0x25a>
 800d076:	2301      	movs	r3, #1
 800d078:	e019      	b.n	800d0ae <HAL_GPIO_Init+0x25a>
 800d07a:	bf00      	nop
 800d07c:	58000080 	.word	0x58000080
 800d080:	58024400 	.word	0x58024400
 800d084:	58000400 	.word	0x58000400
 800d088:	58020000 	.word	0x58020000
 800d08c:	58020400 	.word	0x58020400
 800d090:	58020800 	.word	0x58020800
 800d094:	58020c00 	.word	0x58020c00
 800d098:	58021000 	.word	0x58021000
 800d09c:	58021400 	.word	0x58021400
 800d0a0:	58021800 	.word	0x58021800
 800d0a4:	58021c00 	.word	0x58021c00
 800d0a8:	58022400 	.word	0x58022400
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	69fa      	ldr	r2, [r7, #28]
 800d0b0:	f002 0203 	and.w	r2, r2, #3
 800d0b4:	0092      	lsls	r2, r2, #2
 800d0b6:	4093      	lsls	r3, r2
 800d0b8:	69ba      	ldr	r2, [r7, #24]
 800d0ba:	4313      	orrs	r3, r2
 800d0bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d0be:	4938      	ldr	r1, [pc, #224]	; (800d1a0 <HAL_GPIO_Init+0x34c>)
 800d0c0:	69fb      	ldr	r3, [r7, #28]
 800d0c2:	089b      	lsrs	r3, r3, #2
 800d0c4:	3302      	adds	r3, #2
 800d0c6:	69ba      	ldr	r2, [r7, #24]
 800d0c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d0cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d0d4:	693b      	ldr	r3, [r7, #16]
 800d0d6:	43db      	mvns	r3, r3
 800d0d8:	69ba      	ldr	r2, [r7, #24]
 800d0da:	4013      	ands	r3, r2
 800d0dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d003      	beq.n	800d0f2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800d0ea:	69ba      	ldr	r2, [r7, #24]
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800d0f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800d0fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	43db      	mvns	r3, r3
 800d106:	69ba      	ldr	r2, [r7, #24]
 800d108:	4013      	ands	r3, r2
 800d10a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d114:	2b00      	cmp	r3, #0
 800d116:	d003      	beq.n	800d120 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800d118:	69ba      	ldr	r2, [r7, #24]
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	4313      	orrs	r3, r2
 800d11e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800d120:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d124:	69bb      	ldr	r3, [r7, #24]
 800d126:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	43db      	mvns	r3, r3
 800d132:	69ba      	ldr	r2, [r7, #24]
 800d134:	4013      	ands	r3, r2
 800d136:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d140:	2b00      	cmp	r3, #0
 800d142:	d003      	beq.n	800d14c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800d144:	69ba      	ldr	r2, [r7, #24]
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	4313      	orrs	r3, r2
 800d14a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	69ba      	ldr	r2, [r7, #24]
 800d150:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	43db      	mvns	r3, r3
 800d15c:	69ba      	ldr	r2, [r7, #24]
 800d15e:	4013      	ands	r3, r2
 800d160:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d003      	beq.n	800d176 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800d16e:	69ba      	ldr	r2, [r7, #24]
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	4313      	orrs	r3, r2
 800d174:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	69ba      	ldr	r2, [r7, #24]
 800d17a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	3301      	adds	r3, #1
 800d180:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	69fb      	ldr	r3, [r7, #28]
 800d188:	fa22 f303 	lsr.w	r3, r2, r3
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	f47f ae6b 	bne.w	800ce68 <HAL_GPIO_Init+0x14>
  }
}
 800d192:	bf00      	nop
 800d194:	bf00      	nop
 800d196:	3724      	adds	r7, #36	; 0x24
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr
 800d1a0:	58000400 	.word	0x58000400

0800d1a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b083      	sub	sp, #12
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	460b      	mov	r3, r1
 800d1ae:	807b      	strh	r3, [r7, #2]
 800d1b0:	4613      	mov	r3, r2
 800d1b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d1b4:	787b      	ldrb	r3, [r7, #1]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d003      	beq.n	800d1c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d1ba:	887a      	ldrh	r2, [r7, #2]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800d1c0:	e003      	b.n	800d1ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800d1c2:	887b      	ldrh	r3, [r7, #2]
 800d1c4:	041a      	lsls	r2, r3, #16
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	619a      	str	r2, [r3, #24]
}
 800d1ca:	bf00      	nop
 800d1cc:	370c      	adds	r7, #12
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr
	...

0800d1d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800d1e0:	4b19      	ldr	r3, [pc, #100]	; (800d248 <HAL_PWREx_ConfigSupply+0x70>)
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	f003 0304 	and.w	r3, r3, #4
 800d1e8:	2b04      	cmp	r3, #4
 800d1ea:	d00a      	beq.n	800d202 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800d1ec:	4b16      	ldr	r3, [pc, #88]	; (800d248 <HAL_PWREx_ConfigSupply+0x70>)
 800d1ee:	68db      	ldr	r3, [r3, #12]
 800d1f0:	f003 0307 	and.w	r3, r3, #7
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d001      	beq.n	800d1fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	e01f      	b.n	800d23e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800d1fe:	2300      	movs	r3, #0
 800d200:	e01d      	b.n	800d23e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800d202:	4b11      	ldr	r3, [pc, #68]	; (800d248 <HAL_PWREx_ConfigSupply+0x70>)
 800d204:	68db      	ldr	r3, [r3, #12]
 800d206:	f023 0207 	bic.w	r2, r3, #7
 800d20a:	490f      	ldr	r1, [pc, #60]	; (800d248 <HAL_PWREx_ConfigSupply+0x70>)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	4313      	orrs	r3, r2
 800d210:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800d212:	f7fd fa35 	bl	800a680 <HAL_GetTick>
 800d216:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d218:	e009      	b.n	800d22e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800d21a:	f7fd fa31 	bl	800a680 <HAL_GetTick>
 800d21e:	4602      	mov	r2, r0
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	1ad3      	subs	r3, r2, r3
 800d224:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d228:	d901      	bls.n	800d22e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800d22a:	2301      	movs	r3, #1
 800d22c:	e007      	b.n	800d23e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800d22e:	4b06      	ldr	r3, [pc, #24]	; (800d248 <HAL_PWREx_ConfigSupply+0x70>)
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d23a:	d1ee      	bne.n	800d21a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800d23c:	2300      	movs	r3, #0
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3710      	adds	r7, #16
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop
 800d248:	58024800 	.word	0x58024800

0800d24c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b08c      	sub	sp, #48	; 0x30
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d101      	bne.n	800d25e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d25a:	2301      	movs	r3, #1
 800d25c:	e397      	b.n	800d98e <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f003 0301 	and.w	r3, r3, #1
 800d266:	2b00      	cmp	r3, #0
 800d268:	f000 8087 	beq.w	800d37a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d26c:	4b9e      	ldr	r3, [pc, #632]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d26e:	691b      	ldr	r3, [r3, #16]
 800d270:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d274:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d276:	4b9c      	ldr	r3, [pc, #624]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d27a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27e:	2b10      	cmp	r3, #16
 800d280:	d007      	beq.n	800d292 <HAL_RCC_OscConfig+0x46>
 800d282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d284:	2b18      	cmp	r3, #24
 800d286:	d110      	bne.n	800d2aa <HAL_RCC_OscConfig+0x5e>
 800d288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28a:	f003 0303 	and.w	r3, r3, #3
 800d28e:	2b02      	cmp	r3, #2
 800d290:	d10b      	bne.n	800d2aa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d292:	4b95      	ldr	r3, [pc, #596]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d06c      	beq.n	800d378 <HAL_RCC_OscConfig+0x12c>
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	685b      	ldr	r3, [r3, #4]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d168      	bne.n	800d378 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	e371      	b.n	800d98e <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2b2:	d106      	bne.n	800d2c2 <HAL_RCC_OscConfig+0x76>
 800d2b4:	4b8c      	ldr	r3, [pc, #560]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4a8b      	ldr	r2, [pc, #556]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d2ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d2be:	6013      	str	r3, [r2, #0]
 800d2c0:	e02e      	b.n	800d320 <HAL_RCC_OscConfig+0xd4>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d10c      	bne.n	800d2e4 <HAL_RCC_OscConfig+0x98>
 800d2ca:	4b87      	ldr	r3, [pc, #540]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4a86      	ldr	r2, [pc, #536]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d2d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d2d4:	6013      	str	r3, [r2, #0]
 800d2d6:	4b84      	ldr	r3, [pc, #528]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	4a83      	ldr	r2, [pc, #524]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d2dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d2e0:	6013      	str	r3, [r2, #0]
 800d2e2:	e01d      	b.n	800d320 <HAL_RCC_OscConfig+0xd4>
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	685b      	ldr	r3, [r3, #4]
 800d2e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d2ec:	d10c      	bne.n	800d308 <HAL_RCC_OscConfig+0xbc>
 800d2ee:	4b7e      	ldr	r3, [pc, #504]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	4a7d      	ldr	r2, [pc, #500]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d2f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d2f8:	6013      	str	r3, [r2, #0]
 800d2fa:	4b7b      	ldr	r3, [pc, #492]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	4a7a      	ldr	r2, [pc, #488]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d304:	6013      	str	r3, [r2, #0]
 800d306:	e00b      	b.n	800d320 <HAL_RCC_OscConfig+0xd4>
 800d308:	4b77      	ldr	r3, [pc, #476]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	4a76      	ldr	r2, [pc, #472]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d30e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d312:	6013      	str	r3, [r2, #0]
 800d314:	4b74      	ldr	r3, [pc, #464]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	4a73      	ldr	r2, [pc, #460]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d31a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d31e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d013      	beq.n	800d350 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d328:	f7fd f9aa 	bl	800a680 <HAL_GetTick>
 800d32c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d32e:	e008      	b.n	800d342 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d330:	f7fd f9a6 	bl	800a680 <HAL_GetTick>
 800d334:	4602      	mov	r2, r0
 800d336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d338:	1ad3      	subs	r3, r2, r3
 800d33a:	2b64      	cmp	r3, #100	; 0x64
 800d33c:	d901      	bls.n	800d342 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800d33e:	2303      	movs	r3, #3
 800d340:	e325      	b.n	800d98e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d342:	4b69      	ldr	r3, [pc, #420]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d0f0      	beq.n	800d330 <HAL_RCC_OscConfig+0xe4>
 800d34e:	e014      	b.n	800d37a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d350:	f7fd f996 	bl	800a680 <HAL_GetTick>
 800d354:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d356:	e008      	b.n	800d36a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d358:	f7fd f992 	bl	800a680 <HAL_GetTick>
 800d35c:	4602      	mov	r2, r0
 800d35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d360:	1ad3      	subs	r3, r2, r3
 800d362:	2b64      	cmp	r3, #100	; 0x64
 800d364:	d901      	bls.n	800d36a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800d366:	2303      	movs	r3, #3
 800d368:	e311      	b.n	800d98e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d36a:	4b5f      	ldr	r3, [pc, #380]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d372:	2b00      	cmp	r3, #0
 800d374:	d1f0      	bne.n	800d358 <HAL_RCC_OscConfig+0x10c>
 800d376:	e000      	b.n	800d37a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f003 0302 	and.w	r3, r3, #2
 800d382:	2b00      	cmp	r3, #0
 800d384:	f000 808a 	beq.w	800d49c <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d388:	4b57      	ldr	r3, [pc, #348]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d38a:	691b      	ldr	r3, [r3, #16]
 800d38c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d390:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d392:	4b55      	ldr	r3, [pc, #340]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d396:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d398:	6a3b      	ldr	r3, [r7, #32]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d007      	beq.n	800d3ae <HAL_RCC_OscConfig+0x162>
 800d39e:	6a3b      	ldr	r3, [r7, #32]
 800d3a0:	2b18      	cmp	r3, #24
 800d3a2:	d137      	bne.n	800d414 <HAL_RCC_OscConfig+0x1c8>
 800d3a4:	69fb      	ldr	r3, [r7, #28]
 800d3a6:	f003 0303 	and.w	r3, r3, #3
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d132      	bne.n	800d414 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d3ae:	4b4e      	ldr	r3, [pc, #312]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f003 0304 	and.w	r3, r3, #4
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d005      	beq.n	800d3c6 <HAL_RCC_OscConfig+0x17a>
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	68db      	ldr	r3, [r3, #12]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d101      	bne.n	800d3c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d3c2:	2301      	movs	r3, #1
 800d3c4:	e2e3      	b.n	800d98e <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d3c6:	4b48      	ldr	r3, [pc, #288]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f023 0219 	bic.w	r2, r3, #25
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	68db      	ldr	r3, [r3, #12]
 800d3d2:	4945      	ldr	r1, [pc, #276]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d3d8:	f7fd f952 	bl	800a680 <HAL_GetTick>
 800d3dc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d3de:	e008      	b.n	800d3f2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d3e0:	f7fd f94e 	bl	800a680 <HAL_GetTick>
 800d3e4:	4602      	mov	r2, r0
 800d3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3e8:	1ad3      	subs	r3, r2, r3
 800d3ea:	2b02      	cmp	r3, #2
 800d3ec:	d901      	bls.n	800d3f2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800d3ee:	2303      	movs	r3, #3
 800d3f0:	e2cd      	b.n	800d98e <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d3f2:	4b3d      	ldr	r3, [pc, #244]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f003 0304 	and.w	r3, r3, #4
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d0f0      	beq.n	800d3e0 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d3fe:	4b3a      	ldr	r3, [pc, #232]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	691b      	ldr	r3, [r3, #16]
 800d40a:	061b      	lsls	r3, r3, #24
 800d40c:	4936      	ldr	r1, [pc, #216]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d40e:	4313      	orrs	r3, r2
 800d410:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d412:	e043      	b.n	800d49c <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	68db      	ldr	r3, [r3, #12]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d026      	beq.n	800d46a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d41c:	4b32      	ldr	r3, [pc, #200]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f023 0219 	bic.w	r2, r3, #25
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	68db      	ldr	r3, [r3, #12]
 800d428:	492f      	ldr	r1, [pc, #188]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d42a:	4313      	orrs	r3, r2
 800d42c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d42e:	f7fd f927 	bl	800a680 <HAL_GetTick>
 800d432:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d434:	e008      	b.n	800d448 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d436:	f7fd f923 	bl	800a680 <HAL_GetTick>
 800d43a:	4602      	mov	r2, r0
 800d43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43e:	1ad3      	subs	r3, r2, r3
 800d440:	2b02      	cmp	r3, #2
 800d442:	d901      	bls.n	800d448 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800d444:	2303      	movs	r3, #3
 800d446:	e2a2      	b.n	800d98e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d448:	4b27      	ldr	r3, [pc, #156]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f003 0304 	and.w	r3, r3, #4
 800d450:	2b00      	cmp	r3, #0
 800d452:	d0f0      	beq.n	800d436 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d454:	4b24      	ldr	r3, [pc, #144]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	691b      	ldr	r3, [r3, #16]
 800d460:	061b      	lsls	r3, r3, #24
 800d462:	4921      	ldr	r1, [pc, #132]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d464:	4313      	orrs	r3, r2
 800d466:	604b      	str	r3, [r1, #4]
 800d468:	e018      	b.n	800d49c <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d46a:	4b1f      	ldr	r3, [pc, #124]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4a1e      	ldr	r2, [pc, #120]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d470:	f023 0301 	bic.w	r3, r3, #1
 800d474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d476:	f7fd f903 	bl	800a680 <HAL_GetTick>
 800d47a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d47c:	e008      	b.n	800d490 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d47e:	f7fd f8ff 	bl	800a680 <HAL_GetTick>
 800d482:	4602      	mov	r2, r0
 800d484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d486:	1ad3      	subs	r3, r2, r3
 800d488:	2b02      	cmp	r3, #2
 800d48a:	d901      	bls.n	800d490 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 800d48c:	2303      	movs	r3, #3
 800d48e:	e27e      	b.n	800d98e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d490:	4b15      	ldr	r3, [pc, #84]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f003 0304 	and.w	r3, r3, #4
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d1f0      	bne.n	800d47e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f003 0310 	and.w	r3, r3, #16
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d06d      	beq.n	800d584 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d4a8:	4b0f      	ldr	r3, [pc, #60]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d4aa:	691b      	ldr	r3, [r3, #16]
 800d4ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d4b0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d4b2:	4b0d      	ldr	r3, [pc, #52]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4b6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d4b8:	69bb      	ldr	r3, [r7, #24]
 800d4ba:	2b08      	cmp	r3, #8
 800d4bc:	d007      	beq.n	800d4ce <HAL_RCC_OscConfig+0x282>
 800d4be:	69bb      	ldr	r3, [r7, #24]
 800d4c0:	2b18      	cmp	r3, #24
 800d4c2:	d11e      	bne.n	800d502 <HAL_RCC_OscConfig+0x2b6>
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	f003 0303 	and.w	r3, r3, #3
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d119      	bne.n	800d502 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d4ce:	4b06      	ldr	r3, [pc, #24]	; (800d4e8 <HAL_RCC_OscConfig+0x29c>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d008      	beq.n	800d4ec <HAL_RCC_OscConfig+0x2a0>
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	69db      	ldr	r3, [r3, #28]
 800d4de:	2b80      	cmp	r3, #128	; 0x80
 800d4e0:	d004      	beq.n	800d4ec <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	e253      	b.n	800d98e <HAL_RCC_OscConfig+0x742>
 800d4e6:	bf00      	nop
 800d4e8:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d4ec:	4ba3      	ldr	r3, [pc, #652]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d4ee:	68db      	ldr	r3, [r3, #12]
 800d4f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	6a1b      	ldr	r3, [r3, #32]
 800d4f8:	061b      	lsls	r3, r3, #24
 800d4fa:	49a0      	ldr	r1, [pc, #640]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d4fc:	4313      	orrs	r3, r2
 800d4fe:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d500:	e040      	b.n	800d584 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	69db      	ldr	r3, [r3, #28]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d023      	beq.n	800d552 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d50a:	4b9c      	ldr	r3, [pc, #624]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	4a9b      	ldr	r2, [pc, #620]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d516:	f7fd f8b3 	bl	800a680 <HAL_GetTick>
 800d51a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d51c:	e008      	b.n	800d530 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800d51e:	f7fd f8af 	bl	800a680 <HAL_GetTick>
 800d522:	4602      	mov	r2, r0
 800d524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d526:	1ad3      	subs	r3, r2, r3
 800d528:	2b02      	cmp	r3, #2
 800d52a:	d901      	bls.n	800d530 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 800d52c:	2303      	movs	r3, #3
 800d52e:	e22e      	b.n	800d98e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d530:	4b92      	ldr	r3, [pc, #584]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d0f0      	beq.n	800d51e <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d53c:	4b8f      	ldr	r3, [pc, #572]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d53e:	68db      	ldr	r3, [r3, #12]
 800d540:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6a1b      	ldr	r3, [r3, #32]
 800d548:	061b      	lsls	r3, r3, #24
 800d54a:	498c      	ldr	r1, [pc, #560]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d54c:	4313      	orrs	r3, r2
 800d54e:	60cb      	str	r3, [r1, #12]
 800d550:	e018      	b.n	800d584 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d552:	4b8a      	ldr	r3, [pc, #552]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	4a89      	ldr	r2, [pc, #548]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d558:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d55c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d55e:	f7fd f88f 	bl	800a680 <HAL_GetTick>
 800d562:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d564:	e008      	b.n	800d578 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800d566:	f7fd f88b 	bl	800a680 <HAL_GetTick>
 800d56a:	4602      	mov	r2, r0
 800d56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56e:	1ad3      	subs	r3, r2, r3
 800d570:	2b02      	cmp	r3, #2
 800d572:	d901      	bls.n	800d578 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800d574:	2303      	movs	r3, #3
 800d576:	e20a      	b.n	800d98e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d578:	4b80      	ldr	r3, [pc, #512]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d580:	2b00      	cmp	r3, #0
 800d582:	d1f0      	bne.n	800d566 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	f003 0308 	and.w	r3, r3, #8
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d036      	beq.n	800d5fe <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	695b      	ldr	r3, [r3, #20]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d019      	beq.n	800d5cc <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d598:	4b78      	ldr	r3, [pc, #480]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d59a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d59c:	4a77      	ldr	r2, [pc, #476]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d59e:	f043 0301 	orr.w	r3, r3, #1
 800d5a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d5a4:	f7fd f86c 	bl	800a680 <HAL_GetTick>
 800d5a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d5aa:	e008      	b.n	800d5be <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d5ac:	f7fd f868 	bl	800a680 <HAL_GetTick>
 800d5b0:	4602      	mov	r2, r0
 800d5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b4:	1ad3      	subs	r3, r2, r3
 800d5b6:	2b02      	cmp	r3, #2
 800d5b8:	d901      	bls.n	800d5be <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800d5ba:	2303      	movs	r3, #3
 800d5bc:	e1e7      	b.n	800d98e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d5be:	4b6f      	ldr	r3, [pc, #444]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d5c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5c2:	f003 0302 	and.w	r3, r3, #2
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d0f0      	beq.n	800d5ac <HAL_RCC_OscConfig+0x360>
 800d5ca:	e018      	b.n	800d5fe <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d5cc:	4b6b      	ldr	r3, [pc, #428]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d5ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5d0:	4a6a      	ldr	r2, [pc, #424]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d5d2:	f023 0301 	bic.w	r3, r3, #1
 800d5d6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d5d8:	f7fd f852 	bl	800a680 <HAL_GetTick>
 800d5dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d5de:	e008      	b.n	800d5f2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d5e0:	f7fd f84e 	bl	800a680 <HAL_GetTick>
 800d5e4:	4602      	mov	r2, r0
 800d5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e8:	1ad3      	subs	r3, r2, r3
 800d5ea:	2b02      	cmp	r3, #2
 800d5ec:	d901      	bls.n	800d5f2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800d5ee:	2303      	movs	r3, #3
 800d5f0:	e1cd      	b.n	800d98e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d5f2:	4b62      	ldr	r3, [pc, #392]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d5f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5f6:	f003 0302 	and.w	r3, r3, #2
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d1f0      	bne.n	800d5e0 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	f003 0320 	and.w	r3, r3, #32
 800d606:	2b00      	cmp	r3, #0
 800d608:	d036      	beq.n	800d678 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	699b      	ldr	r3, [r3, #24]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d019      	beq.n	800d646 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d612:	4b5a      	ldr	r3, [pc, #360]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4a59      	ldr	r2, [pc, #356]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d618:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d61c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d61e:	f7fd f82f 	bl	800a680 <HAL_GetTick>
 800d622:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d624:	e008      	b.n	800d638 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800d626:	f7fd f82b 	bl	800a680 <HAL_GetTick>
 800d62a:	4602      	mov	r2, r0
 800d62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62e:	1ad3      	subs	r3, r2, r3
 800d630:	2b02      	cmp	r3, #2
 800d632:	d901      	bls.n	800d638 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800d634:	2303      	movs	r3, #3
 800d636:	e1aa      	b.n	800d98e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d638:	4b50      	ldr	r3, [pc, #320]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d640:	2b00      	cmp	r3, #0
 800d642:	d0f0      	beq.n	800d626 <HAL_RCC_OscConfig+0x3da>
 800d644:	e018      	b.n	800d678 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d646:	4b4d      	ldr	r3, [pc, #308]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4a4c      	ldr	r2, [pc, #304]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d64c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d650:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d652:	f7fd f815 	bl	800a680 <HAL_GetTick>
 800d656:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d658:	e008      	b.n	800d66c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800d65a:	f7fd f811 	bl	800a680 <HAL_GetTick>
 800d65e:	4602      	mov	r2, r0
 800d660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d662:	1ad3      	subs	r3, r2, r3
 800d664:	2b02      	cmp	r3, #2
 800d666:	d901      	bls.n	800d66c <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 800d668:	2303      	movs	r3, #3
 800d66a:	e190      	b.n	800d98e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d66c:	4b43      	ldr	r3, [pc, #268]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d674:	2b00      	cmp	r3, #0
 800d676:	d1f0      	bne.n	800d65a <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f003 0304 	and.w	r3, r3, #4
 800d680:	2b00      	cmp	r3, #0
 800d682:	f000 8085 	beq.w	800d790 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d686:	4b3e      	ldr	r3, [pc, #248]	; (800d780 <HAL_RCC_OscConfig+0x534>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4a3d      	ldr	r2, [pc, #244]	; (800d780 <HAL_RCC_OscConfig+0x534>)
 800d68c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d690:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d692:	f7fc fff5 	bl	800a680 <HAL_GetTick>
 800d696:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d698:	e008      	b.n	800d6ac <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800d69a:	f7fc fff1 	bl	800a680 <HAL_GetTick>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a2:	1ad3      	subs	r3, r2, r3
 800d6a4:	2b64      	cmp	r3, #100	; 0x64
 800d6a6:	d901      	bls.n	800d6ac <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 800d6a8:	2303      	movs	r3, #3
 800d6aa:	e170      	b.n	800d98e <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d6ac:	4b34      	ldr	r3, [pc, #208]	; (800d780 <HAL_RCC_OscConfig+0x534>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d0f0      	beq.n	800d69a <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	689b      	ldr	r3, [r3, #8]
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d106      	bne.n	800d6ce <HAL_RCC_OscConfig+0x482>
 800d6c0:	4b2e      	ldr	r3, [pc, #184]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d6c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6c4:	4a2d      	ldr	r2, [pc, #180]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d6c6:	f043 0301 	orr.w	r3, r3, #1
 800d6ca:	6713      	str	r3, [r2, #112]	; 0x70
 800d6cc:	e02d      	b.n	800d72a <HAL_RCC_OscConfig+0x4de>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	689b      	ldr	r3, [r3, #8]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d10c      	bne.n	800d6f0 <HAL_RCC_OscConfig+0x4a4>
 800d6d6:	4b29      	ldr	r3, [pc, #164]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d6d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6da:	4a28      	ldr	r2, [pc, #160]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d6dc:	f023 0301 	bic.w	r3, r3, #1
 800d6e0:	6713      	str	r3, [r2, #112]	; 0x70
 800d6e2:	4b26      	ldr	r3, [pc, #152]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d6e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6e6:	4a25      	ldr	r2, [pc, #148]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d6e8:	f023 0304 	bic.w	r3, r3, #4
 800d6ec:	6713      	str	r3, [r2, #112]	; 0x70
 800d6ee:	e01c      	b.n	800d72a <HAL_RCC_OscConfig+0x4de>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	689b      	ldr	r3, [r3, #8]
 800d6f4:	2b05      	cmp	r3, #5
 800d6f6:	d10c      	bne.n	800d712 <HAL_RCC_OscConfig+0x4c6>
 800d6f8:	4b20      	ldr	r3, [pc, #128]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d6fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6fc:	4a1f      	ldr	r2, [pc, #124]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d6fe:	f043 0304 	orr.w	r3, r3, #4
 800d702:	6713      	str	r3, [r2, #112]	; 0x70
 800d704:	4b1d      	ldr	r3, [pc, #116]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d708:	4a1c      	ldr	r2, [pc, #112]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d70a:	f043 0301 	orr.w	r3, r3, #1
 800d70e:	6713      	str	r3, [r2, #112]	; 0x70
 800d710:	e00b      	b.n	800d72a <HAL_RCC_OscConfig+0x4de>
 800d712:	4b1a      	ldr	r3, [pc, #104]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d716:	4a19      	ldr	r2, [pc, #100]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d718:	f023 0301 	bic.w	r3, r3, #1
 800d71c:	6713      	str	r3, [r2, #112]	; 0x70
 800d71e:	4b17      	ldr	r3, [pc, #92]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d722:	4a16      	ldr	r2, [pc, #88]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d724:	f023 0304 	bic.w	r3, r3, #4
 800d728:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	689b      	ldr	r3, [r3, #8]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d015      	beq.n	800d75e <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d732:	f7fc ffa5 	bl	800a680 <HAL_GetTick>
 800d736:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d738:	e00a      	b.n	800d750 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d73a:	f7fc ffa1 	bl	800a680 <HAL_GetTick>
 800d73e:	4602      	mov	r2, r0
 800d740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d742:	1ad3      	subs	r3, r2, r3
 800d744:	f241 3288 	movw	r2, #5000	; 0x1388
 800d748:	4293      	cmp	r3, r2
 800d74a:	d901      	bls.n	800d750 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800d74c:	2303      	movs	r3, #3
 800d74e:	e11e      	b.n	800d98e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d750:	4b0a      	ldr	r3, [pc, #40]	; (800d77c <HAL_RCC_OscConfig+0x530>)
 800d752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d754:	f003 0302 	and.w	r3, r3, #2
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d0ee      	beq.n	800d73a <HAL_RCC_OscConfig+0x4ee>
 800d75c:	e018      	b.n	800d790 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d75e:	f7fc ff8f 	bl	800a680 <HAL_GetTick>
 800d762:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d764:	e00e      	b.n	800d784 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d766:	f7fc ff8b 	bl	800a680 <HAL_GetTick>
 800d76a:	4602      	mov	r2, r0
 800d76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d76e:	1ad3      	subs	r3, r2, r3
 800d770:	f241 3288 	movw	r2, #5000	; 0x1388
 800d774:	4293      	cmp	r3, r2
 800d776:	d905      	bls.n	800d784 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800d778:	2303      	movs	r3, #3
 800d77a:	e108      	b.n	800d98e <HAL_RCC_OscConfig+0x742>
 800d77c:	58024400 	.word	0x58024400
 800d780:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d784:	4b84      	ldr	r3, [pc, #528]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d788:	f003 0302 	and.w	r3, r3, #2
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d1ea      	bne.n	800d766 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d794:	2b00      	cmp	r3, #0
 800d796:	f000 80f9 	beq.w	800d98c <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d79a:	4b7f      	ldr	r3, [pc, #508]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d79c:	691b      	ldr	r3, [r3, #16]
 800d79e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d7a2:	2b18      	cmp	r3, #24
 800d7a4:	f000 80b4 	beq.w	800d910 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ac:	2b02      	cmp	r3, #2
 800d7ae:	f040 8095 	bne.w	800d8dc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d7b2:	4b79      	ldr	r3, [pc, #484]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	4a78      	ldr	r2, [pc, #480]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d7b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d7bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d7be:	f7fc ff5f 	bl	800a680 <HAL_GetTick>
 800d7c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d7c4:	e008      	b.n	800d7d8 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d7c6:	f7fc ff5b 	bl	800a680 <HAL_GetTick>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ce:	1ad3      	subs	r3, r2, r3
 800d7d0:	2b02      	cmp	r3, #2
 800d7d2:	d901      	bls.n	800d7d8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800d7d4:	2303      	movs	r3, #3
 800d7d6:	e0da      	b.n	800d98e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d7d8:	4b6f      	ldr	r3, [pc, #444]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d1f0      	bne.n	800d7c6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d7e4:	4b6c      	ldr	r3, [pc, #432]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d7e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d7e8:	4b6c      	ldr	r3, [pc, #432]	; (800d99c <HAL_RCC_OscConfig+0x750>)
 800d7ea:	4013      	ands	r3, r2
 800d7ec:	687a      	ldr	r2, [r7, #4]
 800d7ee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d7f0:	687a      	ldr	r2, [r7, #4]
 800d7f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d7f4:	0112      	lsls	r2, r2, #4
 800d7f6:	430a      	orrs	r2, r1
 800d7f8:	4967      	ldr	r1, [pc, #412]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d7fa:	4313      	orrs	r3, r2
 800d7fc:	628b      	str	r3, [r1, #40]	; 0x28
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d802:	3b01      	subs	r3, #1
 800d804:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d80c:	3b01      	subs	r3, #1
 800d80e:	025b      	lsls	r3, r3, #9
 800d810:	b29b      	uxth	r3, r3
 800d812:	431a      	orrs	r2, r3
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d818:	3b01      	subs	r3, #1
 800d81a:	041b      	lsls	r3, r3, #16
 800d81c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d820:	431a      	orrs	r2, r3
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d826:	3b01      	subs	r3, #1
 800d828:	061b      	lsls	r3, r3, #24
 800d82a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d82e:	495a      	ldr	r1, [pc, #360]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d830:	4313      	orrs	r3, r2
 800d832:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800d834:	4b58      	ldr	r3, [pc, #352]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d838:	4a57      	ldr	r2, [pc, #348]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d83a:	f023 0301 	bic.w	r3, r3, #1
 800d83e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d840:	4b55      	ldr	r3, [pc, #340]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d842:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d844:	4b56      	ldr	r3, [pc, #344]	; (800d9a0 <HAL_RCC_OscConfig+0x754>)
 800d846:	4013      	ands	r3, r2
 800d848:	687a      	ldr	r2, [r7, #4]
 800d84a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d84c:	00d2      	lsls	r2, r2, #3
 800d84e:	4952      	ldr	r1, [pc, #328]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d850:	4313      	orrs	r3, r2
 800d852:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d854:	4b50      	ldr	r3, [pc, #320]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d858:	f023 020c 	bic.w	r2, r3, #12
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d860:	494d      	ldr	r1, [pc, #308]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d862:	4313      	orrs	r3, r2
 800d864:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d866:	4b4c      	ldr	r3, [pc, #304]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d86a:	f023 0202 	bic.w	r2, r3, #2
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d872:	4949      	ldr	r1, [pc, #292]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d874:	4313      	orrs	r3, r2
 800d876:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d878:	4b47      	ldr	r3, [pc, #284]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87c:	4a46      	ldr	r2, [pc, #280]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d87e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d882:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d884:	4b44      	ldr	r3, [pc, #272]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d888:	4a43      	ldr	r2, [pc, #268]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d88a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d88e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d890:	4b41      	ldr	r3, [pc, #260]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d894:	4a40      	ldr	r2, [pc, #256]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d896:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d89a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800d89c:	4b3e      	ldr	r3, [pc, #248]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a0:	4a3d      	ldr	r2, [pc, #244]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d8a2:	f043 0301 	orr.w	r3, r3, #1
 800d8a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d8a8:	4b3b      	ldr	r3, [pc, #236]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4a3a      	ldr	r2, [pc, #232]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d8ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d8b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8b4:	f7fc fee4 	bl	800a680 <HAL_GetTick>
 800d8b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d8ba:	e008      	b.n	800d8ce <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d8bc:	f7fc fee0 	bl	800a680 <HAL_GetTick>
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c4:	1ad3      	subs	r3, r2, r3
 800d8c6:	2b02      	cmp	r3, #2
 800d8c8:	d901      	bls.n	800d8ce <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800d8ca:	2303      	movs	r3, #3
 800d8cc:	e05f      	b.n	800d98e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d8ce:	4b32      	ldr	r3, [pc, #200]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d0f0      	beq.n	800d8bc <HAL_RCC_OscConfig+0x670>
 800d8da:	e057      	b.n	800d98c <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d8dc:	4b2e      	ldr	r3, [pc, #184]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	4a2d      	ldr	r2, [pc, #180]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d8e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d8e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d8e8:	f7fc feca 	bl	800a680 <HAL_GetTick>
 800d8ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d8ee:	e008      	b.n	800d902 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d8f0:	f7fc fec6 	bl	800a680 <HAL_GetTick>
 800d8f4:	4602      	mov	r2, r0
 800d8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8f8:	1ad3      	subs	r3, r2, r3
 800d8fa:	2b02      	cmp	r3, #2
 800d8fc:	d901      	bls.n	800d902 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800d8fe:	2303      	movs	r3, #3
 800d900:	e045      	b.n	800d98e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d902:	4b25      	ldr	r3, [pc, #148]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d1f0      	bne.n	800d8f0 <HAL_RCC_OscConfig+0x6a4>
 800d90e:	e03d      	b.n	800d98c <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d910:	4b21      	ldr	r3, [pc, #132]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d914:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d916:	4b20      	ldr	r3, [pc, #128]	; (800d998 <HAL_RCC_OscConfig+0x74c>)
 800d918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d91a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d920:	2b01      	cmp	r3, #1
 800d922:	d031      	beq.n	800d988 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	f003 0203 	and.w	r2, r3, #3
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d92e:	429a      	cmp	r2, r3
 800d930:	d12a      	bne.n	800d988 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	091b      	lsrs	r3, r3, #4
 800d936:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d93e:	429a      	cmp	r2, r3
 800d940:	d122      	bne.n	800d988 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d94c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d94e:	429a      	cmp	r2, r3
 800d950:	d11a      	bne.n	800d988 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	0a5b      	lsrs	r3, r3, #9
 800d956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d95e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d960:	429a      	cmp	r2, r3
 800d962:	d111      	bne.n	800d988 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	0c1b      	lsrs	r3, r3, #16
 800d968:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d970:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d972:	429a      	cmp	r2, r3
 800d974:	d108      	bne.n	800d988 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	0e1b      	lsrs	r3, r3, #24
 800d97a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d982:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d984:	429a      	cmp	r2, r3
 800d986:	d001      	beq.n	800d98c <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 800d988:	2301      	movs	r3, #1
 800d98a:	e000      	b.n	800d98e <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 800d98c:	2300      	movs	r3, #0
}
 800d98e:	4618      	mov	r0, r3
 800d990:	3730      	adds	r7, #48	; 0x30
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	58024400 	.word	0x58024400
 800d99c:	fffffc0c 	.word	0xfffffc0c
 800d9a0:	ffff0007 	.word	0xffff0007

0800d9a4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b086      	sub	sp, #24
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d101      	bne.n	800d9b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d9b4:	2301      	movs	r3, #1
 800d9b6:	e19c      	b.n	800dcf2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d9b8:	4b8a      	ldr	r3, [pc, #552]	; (800dbe4 <HAL_RCC_ClockConfig+0x240>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	f003 030f 	and.w	r3, r3, #15
 800d9c0:	683a      	ldr	r2, [r7, #0]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d910      	bls.n	800d9e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d9c6:	4b87      	ldr	r3, [pc, #540]	; (800dbe4 <HAL_RCC_ClockConfig+0x240>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f023 020f 	bic.w	r2, r3, #15
 800d9ce:	4985      	ldr	r1, [pc, #532]	; (800dbe4 <HAL_RCC_ClockConfig+0x240>)
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d9d6:	4b83      	ldr	r3, [pc, #524]	; (800dbe4 <HAL_RCC_ClockConfig+0x240>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f003 030f 	and.w	r3, r3, #15
 800d9de:	683a      	ldr	r2, [r7, #0]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d001      	beq.n	800d9e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	e184      	b.n	800dcf2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	f003 0304 	and.w	r3, r3, #4
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d010      	beq.n	800da16 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	691a      	ldr	r2, [r3, #16]
 800d9f8:	4b7b      	ldr	r3, [pc, #492]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800d9fa:	699b      	ldr	r3, [r3, #24]
 800d9fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800da00:	429a      	cmp	r2, r3
 800da02:	d908      	bls.n	800da16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800da04:	4b78      	ldr	r3, [pc, #480]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800da06:	699b      	ldr	r3, [r3, #24]
 800da08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	691b      	ldr	r3, [r3, #16]
 800da10:	4975      	ldr	r1, [pc, #468]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800da12:	4313      	orrs	r3, r2
 800da14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f003 0308 	and.w	r3, r3, #8
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d010      	beq.n	800da44 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	695a      	ldr	r2, [r3, #20]
 800da26:	4b70      	ldr	r3, [pc, #448]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800da28:	69db      	ldr	r3, [r3, #28]
 800da2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800da2e:	429a      	cmp	r2, r3
 800da30:	d908      	bls.n	800da44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800da32:	4b6d      	ldr	r3, [pc, #436]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800da34:	69db      	ldr	r3, [r3, #28]
 800da36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	695b      	ldr	r3, [r3, #20]
 800da3e:	496a      	ldr	r1, [pc, #424]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800da40:	4313      	orrs	r3, r2
 800da42:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	f003 0310 	and.w	r3, r3, #16
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d010      	beq.n	800da72 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	699a      	ldr	r2, [r3, #24]
 800da54:	4b64      	ldr	r3, [pc, #400]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800da56:	69db      	ldr	r3, [r3, #28]
 800da58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d908      	bls.n	800da72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800da60:	4b61      	ldr	r3, [pc, #388]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800da62:	69db      	ldr	r3, [r3, #28]
 800da64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	699b      	ldr	r3, [r3, #24]
 800da6c:	495e      	ldr	r1, [pc, #376]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800da6e:	4313      	orrs	r3, r2
 800da70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	f003 0320 	and.w	r3, r3, #32
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d010      	beq.n	800daa0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	69da      	ldr	r2, [r3, #28]
 800da82:	4b59      	ldr	r3, [pc, #356]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800da84:	6a1b      	ldr	r3, [r3, #32]
 800da86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d908      	bls.n	800daa0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800da8e:	4b56      	ldr	r3, [pc, #344]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800da90:	6a1b      	ldr	r3, [r3, #32]
 800da92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	69db      	ldr	r3, [r3, #28]
 800da9a:	4953      	ldr	r1, [pc, #332]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800da9c:	4313      	orrs	r3, r2
 800da9e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f003 0302 	and.w	r3, r3, #2
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d010      	beq.n	800dace <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	68da      	ldr	r2, [r3, #12]
 800dab0:	4b4d      	ldr	r3, [pc, #308]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800dab2:	699b      	ldr	r3, [r3, #24]
 800dab4:	f003 030f 	and.w	r3, r3, #15
 800dab8:	429a      	cmp	r2, r3
 800daba:	d908      	bls.n	800dace <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dabc:	4b4a      	ldr	r3, [pc, #296]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800dabe:	699b      	ldr	r3, [r3, #24]
 800dac0:	f023 020f 	bic.w	r2, r3, #15
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	68db      	ldr	r3, [r3, #12]
 800dac8:	4947      	ldr	r1, [pc, #284]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800daca:	4313      	orrs	r3, r2
 800dacc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	f003 0301 	and.w	r3, r3, #1
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d055      	beq.n	800db86 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800dada:	4b43      	ldr	r3, [pc, #268]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800dadc:	699b      	ldr	r3, [r3, #24]
 800dade:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	689b      	ldr	r3, [r3, #8]
 800dae6:	4940      	ldr	r1, [pc, #256]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800dae8:	4313      	orrs	r3, r2
 800daea:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	2b02      	cmp	r3, #2
 800daf2:	d107      	bne.n	800db04 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800daf4:	4b3c      	ldr	r3, [pc, #240]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d121      	bne.n	800db44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800db00:	2301      	movs	r3, #1
 800db02:	e0f6      	b.n	800dcf2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	685b      	ldr	r3, [r3, #4]
 800db08:	2b03      	cmp	r3, #3
 800db0a:	d107      	bne.n	800db1c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800db0c:	4b36      	ldr	r3, [pc, #216]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db14:	2b00      	cmp	r3, #0
 800db16:	d115      	bne.n	800db44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800db18:	2301      	movs	r3, #1
 800db1a:	e0ea      	b.n	800dcf2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	2b01      	cmp	r3, #1
 800db22:	d107      	bne.n	800db34 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800db24:	4b30      	ldr	r3, [pc, #192]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d109      	bne.n	800db44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800db30:	2301      	movs	r3, #1
 800db32:	e0de      	b.n	800dcf2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800db34:	4b2c      	ldr	r3, [pc, #176]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	f003 0304 	and.w	r3, r3, #4
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d101      	bne.n	800db44 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800db40:	2301      	movs	r3, #1
 800db42:	e0d6      	b.n	800dcf2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800db44:	4b28      	ldr	r3, [pc, #160]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800db46:	691b      	ldr	r3, [r3, #16]
 800db48:	f023 0207 	bic.w	r2, r3, #7
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	4925      	ldr	r1, [pc, #148]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800db52:	4313      	orrs	r3, r2
 800db54:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800db56:	f7fc fd93 	bl	800a680 <HAL_GetTick>
 800db5a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800db5c:	e00a      	b.n	800db74 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800db5e:	f7fc fd8f 	bl	800a680 <HAL_GetTick>
 800db62:	4602      	mov	r2, r0
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	1ad3      	subs	r3, r2, r3
 800db68:	f241 3288 	movw	r2, #5000	; 0x1388
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d901      	bls.n	800db74 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800db70:	2303      	movs	r3, #3
 800db72:	e0be      	b.n	800dcf2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800db74:	4b1c      	ldr	r3, [pc, #112]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800db76:	691b      	ldr	r3, [r3, #16]
 800db78:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	00db      	lsls	r3, r3, #3
 800db82:	429a      	cmp	r2, r3
 800db84:	d1eb      	bne.n	800db5e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f003 0302 	and.w	r3, r3, #2
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d010      	beq.n	800dbb4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	68da      	ldr	r2, [r3, #12]
 800db96:	4b14      	ldr	r3, [pc, #80]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800db98:	699b      	ldr	r3, [r3, #24]
 800db9a:	f003 030f 	and.w	r3, r3, #15
 800db9e:	429a      	cmp	r2, r3
 800dba0:	d208      	bcs.n	800dbb4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dba2:	4b11      	ldr	r3, [pc, #68]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800dba4:	699b      	ldr	r3, [r3, #24]
 800dba6:	f023 020f 	bic.w	r2, r3, #15
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	68db      	ldr	r3, [r3, #12]
 800dbae:	490e      	ldr	r1, [pc, #56]	; (800dbe8 <HAL_RCC_ClockConfig+0x244>)
 800dbb0:	4313      	orrs	r3, r2
 800dbb2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800dbb4:	4b0b      	ldr	r3, [pc, #44]	; (800dbe4 <HAL_RCC_ClockConfig+0x240>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f003 030f 	and.w	r3, r3, #15
 800dbbc:	683a      	ldr	r2, [r7, #0]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d214      	bcs.n	800dbec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dbc2:	4b08      	ldr	r3, [pc, #32]	; (800dbe4 <HAL_RCC_ClockConfig+0x240>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f023 020f 	bic.w	r2, r3, #15
 800dbca:	4906      	ldr	r1, [pc, #24]	; (800dbe4 <HAL_RCC_ClockConfig+0x240>)
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	4313      	orrs	r3, r2
 800dbd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800dbd2:	4b04      	ldr	r3, [pc, #16]	; (800dbe4 <HAL_RCC_ClockConfig+0x240>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f003 030f 	and.w	r3, r3, #15
 800dbda:	683a      	ldr	r2, [r7, #0]
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d005      	beq.n	800dbec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	e086      	b.n	800dcf2 <HAL_RCC_ClockConfig+0x34e>
 800dbe4:	52002000 	.word	0x52002000
 800dbe8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f003 0304 	and.w	r3, r3, #4
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d010      	beq.n	800dc1a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	691a      	ldr	r2, [r3, #16]
 800dbfc:	4b3f      	ldr	r3, [pc, #252]	; (800dcfc <HAL_RCC_ClockConfig+0x358>)
 800dbfe:	699b      	ldr	r3, [r3, #24]
 800dc00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d208      	bcs.n	800dc1a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800dc08:	4b3c      	ldr	r3, [pc, #240]	; (800dcfc <HAL_RCC_ClockConfig+0x358>)
 800dc0a:	699b      	ldr	r3, [r3, #24]
 800dc0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	691b      	ldr	r3, [r3, #16]
 800dc14:	4939      	ldr	r1, [pc, #228]	; (800dcfc <HAL_RCC_ClockConfig+0x358>)
 800dc16:	4313      	orrs	r3, r2
 800dc18:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f003 0308 	and.w	r3, r3, #8
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d010      	beq.n	800dc48 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	695a      	ldr	r2, [r3, #20]
 800dc2a:	4b34      	ldr	r3, [pc, #208]	; (800dcfc <HAL_RCC_ClockConfig+0x358>)
 800dc2c:	69db      	ldr	r3, [r3, #28]
 800dc2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dc32:	429a      	cmp	r2, r3
 800dc34:	d208      	bcs.n	800dc48 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800dc36:	4b31      	ldr	r3, [pc, #196]	; (800dcfc <HAL_RCC_ClockConfig+0x358>)
 800dc38:	69db      	ldr	r3, [r3, #28]
 800dc3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	695b      	ldr	r3, [r3, #20]
 800dc42:	492e      	ldr	r1, [pc, #184]	; (800dcfc <HAL_RCC_ClockConfig+0x358>)
 800dc44:	4313      	orrs	r3, r2
 800dc46:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	f003 0310 	and.w	r3, r3, #16
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d010      	beq.n	800dc76 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	699a      	ldr	r2, [r3, #24]
 800dc58:	4b28      	ldr	r3, [pc, #160]	; (800dcfc <HAL_RCC_ClockConfig+0x358>)
 800dc5a:	69db      	ldr	r3, [r3, #28]
 800dc5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d208      	bcs.n	800dc76 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800dc64:	4b25      	ldr	r3, [pc, #148]	; (800dcfc <HAL_RCC_ClockConfig+0x358>)
 800dc66:	69db      	ldr	r3, [r3, #28]
 800dc68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	699b      	ldr	r3, [r3, #24]
 800dc70:	4922      	ldr	r1, [pc, #136]	; (800dcfc <HAL_RCC_ClockConfig+0x358>)
 800dc72:	4313      	orrs	r3, r2
 800dc74:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	f003 0320 	and.w	r3, r3, #32
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d010      	beq.n	800dca4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	69da      	ldr	r2, [r3, #28]
 800dc86:	4b1d      	ldr	r3, [pc, #116]	; (800dcfc <HAL_RCC_ClockConfig+0x358>)
 800dc88:	6a1b      	ldr	r3, [r3, #32]
 800dc8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d208      	bcs.n	800dca4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800dc92:	4b1a      	ldr	r3, [pc, #104]	; (800dcfc <HAL_RCC_ClockConfig+0x358>)
 800dc94:	6a1b      	ldr	r3, [r3, #32]
 800dc96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	69db      	ldr	r3, [r3, #28]
 800dc9e:	4917      	ldr	r1, [pc, #92]	; (800dcfc <HAL_RCC_ClockConfig+0x358>)
 800dca0:	4313      	orrs	r3, r2
 800dca2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800dca4:	f000 f844 	bl	800dd30 <HAL_RCC_GetSysClockFreq>
 800dca8:	4602      	mov	r2, r0
 800dcaa:	4b14      	ldr	r3, [pc, #80]	; (800dcfc <HAL_RCC_ClockConfig+0x358>)
 800dcac:	699b      	ldr	r3, [r3, #24]
 800dcae:	0a1b      	lsrs	r3, r3, #8
 800dcb0:	f003 030f 	and.w	r3, r3, #15
 800dcb4:	4912      	ldr	r1, [pc, #72]	; (800dd00 <HAL_RCC_ClockConfig+0x35c>)
 800dcb6:	5ccb      	ldrb	r3, [r1, r3]
 800dcb8:	f003 031f 	and.w	r3, r3, #31
 800dcbc:	fa22 f303 	lsr.w	r3, r2, r3
 800dcc0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dcc2:	4b0e      	ldr	r3, [pc, #56]	; (800dcfc <HAL_RCC_ClockConfig+0x358>)
 800dcc4:	699b      	ldr	r3, [r3, #24]
 800dcc6:	f003 030f 	and.w	r3, r3, #15
 800dcca:	4a0d      	ldr	r2, [pc, #52]	; (800dd00 <HAL_RCC_ClockConfig+0x35c>)
 800dccc:	5cd3      	ldrb	r3, [r2, r3]
 800dcce:	f003 031f 	and.w	r3, r3, #31
 800dcd2:	693a      	ldr	r2, [r7, #16]
 800dcd4:	fa22 f303 	lsr.w	r3, r2, r3
 800dcd8:	4a0a      	ldr	r2, [pc, #40]	; (800dd04 <HAL_RCC_ClockConfig+0x360>)
 800dcda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800dcdc:	4a0a      	ldr	r2, [pc, #40]	; (800dd08 <HAL_RCC_ClockConfig+0x364>)
 800dcde:	693b      	ldr	r3, [r7, #16]
 800dce0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800dce2:	4b0a      	ldr	r3, [pc, #40]	; (800dd0c <HAL_RCC_ClockConfig+0x368>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7fc fc80 	bl	800a5ec <HAL_InitTick>
 800dcec:	4603      	mov	r3, r0
 800dcee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800dcf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	3718      	adds	r7, #24
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	58024400 	.word	0x58024400
 800dd00:	08018550 	.word	0x08018550
 800dd04:	24000054 	.word	0x24000054
 800dd08:	24000050 	.word	0x24000050
 800dd0c:	24000058 	.word	0x24000058

0800dd10 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800dd10:	b480      	push	{r7}
 800dd12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800dd14:	4b05      	ldr	r3, [pc, #20]	; (800dd2c <HAL_RCC_EnableCSS+0x1c>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	4a04      	ldr	r2, [pc, #16]	; (800dd2c <HAL_RCC_EnableCSS+0x1c>)
 800dd1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dd1e:	6013      	str	r3, [r2, #0]
}
 800dd20:	bf00      	nop
 800dd22:	46bd      	mov	sp, r7
 800dd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd28:	4770      	bx	lr
 800dd2a:	bf00      	nop
 800dd2c:	58024400 	.word	0x58024400

0800dd30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dd30:	b480      	push	{r7}
 800dd32:	b089      	sub	sp, #36	; 0x24
 800dd34:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dd36:	4bb3      	ldr	r3, [pc, #716]	; (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd38:	691b      	ldr	r3, [r3, #16]
 800dd3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dd3e:	2b18      	cmp	r3, #24
 800dd40:	f200 8155 	bhi.w	800dfee <HAL_RCC_GetSysClockFreq+0x2be>
 800dd44:	a201      	add	r2, pc, #4	; (adr r2, 800dd4c <HAL_RCC_GetSysClockFreq+0x1c>)
 800dd46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd4a:	bf00      	nop
 800dd4c:	0800ddb1 	.word	0x0800ddb1
 800dd50:	0800dfef 	.word	0x0800dfef
 800dd54:	0800dfef 	.word	0x0800dfef
 800dd58:	0800dfef 	.word	0x0800dfef
 800dd5c:	0800dfef 	.word	0x0800dfef
 800dd60:	0800dfef 	.word	0x0800dfef
 800dd64:	0800dfef 	.word	0x0800dfef
 800dd68:	0800dfef 	.word	0x0800dfef
 800dd6c:	0800ddd7 	.word	0x0800ddd7
 800dd70:	0800dfef 	.word	0x0800dfef
 800dd74:	0800dfef 	.word	0x0800dfef
 800dd78:	0800dfef 	.word	0x0800dfef
 800dd7c:	0800dfef 	.word	0x0800dfef
 800dd80:	0800dfef 	.word	0x0800dfef
 800dd84:	0800dfef 	.word	0x0800dfef
 800dd88:	0800dfef 	.word	0x0800dfef
 800dd8c:	0800dddd 	.word	0x0800dddd
 800dd90:	0800dfef 	.word	0x0800dfef
 800dd94:	0800dfef 	.word	0x0800dfef
 800dd98:	0800dfef 	.word	0x0800dfef
 800dd9c:	0800dfef 	.word	0x0800dfef
 800dda0:	0800dfef 	.word	0x0800dfef
 800dda4:	0800dfef 	.word	0x0800dfef
 800dda8:	0800dfef 	.word	0x0800dfef
 800ddac:	0800dde3 	.word	0x0800dde3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ddb0:	4b94      	ldr	r3, [pc, #592]	; (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f003 0320 	and.w	r3, r3, #32
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d009      	beq.n	800ddd0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ddbc:	4b91      	ldr	r3, [pc, #580]	; (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	08db      	lsrs	r3, r3, #3
 800ddc2:	f003 0303 	and.w	r3, r3, #3
 800ddc6:	4a90      	ldr	r2, [pc, #576]	; (800e008 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ddc8:	fa22 f303 	lsr.w	r3, r2, r3
 800ddcc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800ddce:	e111      	b.n	800dff4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ddd0:	4b8d      	ldr	r3, [pc, #564]	; (800e008 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ddd2:	61bb      	str	r3, [r7, #24]
    break;
 800ddd4:	e10e      	b.n	800dff4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800ddd6:	4b8d      	ldr	r3, [pc, #564]	; (800e00c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ddd8:	61bb      	str	r3, [r7, #24]
    break;
 800ddda:	e10b      	b.n	800dff4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800dddc:	4b8c      	ldr	r3, [pc, #560]	; (800e010 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ddde:	61bb      	str	r3, [r7, #24]
    break;
 800dde0:	e108      	b.n	800dff4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dde2:	4b88      	ldr	r3, [pc, #544]	; (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dde4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dde6:	f003 0303 	and.w	r3, r3, #3
 800ddea:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800ddec:	4b85      	ldr	r3, [pc, #532]	; (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddf0:	091b      	lsrs	r3, r3, #4
 800ddf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ddf6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ddf8:	4b82      	ldr	r3, [pc, #520]	; (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ddfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddfc:	f003 0301 	and.w	r3, r3, #1
 800de00:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800de02:	4b80      	ldr	r3, [pc, #512]	; (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de06:	08db      	lsrs	r3, r3, #3
 800de08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de0c:	68fa      	ldr	r2, [r7, #12]
 800de0e:	fb02 f303 	mul.w	r3, r2, r3
 800de12:	ee07 3a90 	vmov	s15, r3
 800de16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de1a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	2b00      	cmp	r3, #0
 800de22:	f000 80e1 	beq.w	800dfe8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	2b02      	cmp	r3, #2
 800de2a:	f000 8083 	beq.w	800df34 <HAL_RCC_GetSysClockFreq+0x204>
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	2b02      	cmp	r3, #2
 800de32:	f200 80a1 	bhi.w	800df78 <HAL_RCC_GetSysClockFreq+0x248>
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d003      	beq.n	800de44 <HAL_RCC_GetSysClockFreq+0x114>
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	2b01      	cmp	r3, #1
 800de40:	d056      	beq.n	800def0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800de42:	e099      	b.n	800df78 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de44:	4b6f      	ldr	r3, [pc, #444]	; (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f003 0320 	and.w	r3, r3, #32
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d02d      	beq.n	800deac <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800de50:	4b6c      	ldr	r3, [pc, #432]	; (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	08db      	lsrs	r3, r3, #3
 800de56:	f003 0303 	and.w	r3, r3, #3
 800de5a:	4a6b      	ldr	r2, [pc, #428]	; (800e008 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800de5c:	fa22 f303 	lsr.w	r3, r2, r3
 800de60:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	ee07 3a90 	vmov	s15, r3
 800de68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	ee07 3a90 	vmov	s15, r3
 800de72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de7a:	4b62      	ldr	r3, [pc, #392]	; (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800de7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de82:	ee07 3a90 	vmov	s15, r3
 800de86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de8a:	ed97 6a02 	vldr	s12, [r7, #8]
 800de8e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800e014 <HAL_RCC_GetSysClockFreq+0x2e4>
 800de92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800de9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dea6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800deaa:	e087      	b.n	800dfbc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	ee07 3a90 	vmov	s15, r3
 800deb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800deb6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800e018 <HAL_RCC_GetSysClockFreq+0x2e8>
 800deba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800debe:	4b51      	ldr	r3, [pc, #324]	; (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dec6:	ee07 3a90 	vmov	s15, r3
 800deca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dece:	ed97 6a02 	vldr	s12, [r7, #8]
 800ded2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800e014 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ded6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800deda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800deea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800deee:	e065      	b.n	800dfbc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800def0:	693b      	ldr	r3, [r7, #16]
 800def2:	ee07 3a90 	vmov	s15, r3
 800def6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800defa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800e01c <HAL_RCC_GetSysClockFreq+0x2ec>
 800defe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df02:	4b40      	ldr	r3, [pc, #256]	; (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df0a:	ee07 3a90 	vmov	s15, r3
 800df0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df12:	ed97 6a02 	vldr	s12, [r7, #8]
 800df16:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800e014 <HAL_RCC_GetSysClockFreq+0x2e4>
 800df1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df32:	e043      	b.n	800dfbc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	ee07 3a90 	vmov	s15, r3
 800df3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df3e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800e020 <HAL_RCC_GetSysClockFreq+0x2f0>
 800df42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df46:	4b2f      	ldr	r3, [pc, #188]	; (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df4e:	ee07 3a90 	vmov	s15, r3
 800df52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df56:	ed97 6a02 	vldr	s12, [r7, #8]
 800df5a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800e014 <HAL_RCC_GetSysClockFreq+0x2e4>
 800df5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800df62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800df6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800df6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df76:	e021      	b.n	800dfbc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	ee07 3a90 	vmov	s15, r3
 800df7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df82:	eddf 6a26 	vldr	s13, [pc, #152]	; 800e01c <HAL_RCC_GetSysClockFreq+0x2ec>
 800df86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800df8a:	4b1e      	ldr	r3, [pc, #120]	; (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800df8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df92:	ee07 3a90 	vmov	s15, r3
 800df96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800df9a:	ed97 6a02 	vldr	s12, [r7, #8]
 800df9e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800e014 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dfa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dfa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dfaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dfae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dfb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dfba:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800dfbc:	4b11      	ldr	r3, [pc, #68]	; (800e004 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dfbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfc0:	0a5b      	lsrs	r3, r3, #9
 800dfc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	ee07 3a90 	vmov	s15, r3
 800dfd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dfd4:	edd7 6a07 	vldr	s13, [r7, #28]
 800dfd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dfdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dfe0:	ee17 3a90 	vmov	r3, s15
 800dfe4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800dfe6:	e005      	b.n	800dff4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800dfe8:	2300      	movs	r3, #0
 800dfea:	61bb      	str	r3, [r7, #24]
    break;
 800dfec:	e002      	b.n	800dff4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800dfee:	4b07      	ldr	r3, [pc, #28]	; (800e00c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800dff0:	61bb      	str	r3, [r7, #24]
    break;
 800dff2:	bf00      	nop
  }

  return sysclockfreq;
 800dff4:	69bb      	ldr	r3, [r7, #24]
}
 800dff6:	4618      	mov	r0, r3
 800dff8:	3724      	adds	r7, #36	; 0x24
 800dffa:	46bd      	mov	sp, r7
 800dffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e000:	4770      	bx	lr
 800e002:	bf00      	nop
 800e004:	58024400 	.word	0x58024400
 800e008:	03d09000 	.word	0x03d09000
 800e00c:	003d0900 	.word	0x003d0900
 800e010:	017d7840 	.word	0x017d7840
 800e014:	46000000 	.word	0x46000000
 800e018:	4c742400 	.word	0x4c742400
 800e01c:	4a742400 	.word	0x4a742400
 800e020:	4bbebc20 	.word	0x4bbebc20

0800e024 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b082      	sub	sp, #8
 800e028:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800e02a:	f7ff fe81 	bl	800dd30 <HAL_RCC_GetSysClockFreq>
 800e02e:	4602      	mov	r2, r0
 800e030:	4b10      	ldr	r3, [pc, #64]	; (800e074 <HAL_RCC_GetHCLKFreq+0x50>)
 800e032:	699b      	ldr	r3, [r3, #24]
 800e034:	0a1b      	lsrs	r3, r3, #8
 800e036:	f003 030f 	and.w	r3, r3, #15
 800e03a:	490f      	ldr	r1, [pc, #60]	; (800e078 <HAL_RCC_GetHCLKFreq+0x54>)
 800e03c:	5ccb      	ldrb	r3, [r1, r3]
 800e03e:	f003 031f 	and.w	r3, r3, #31
 800e042:	fa22 f303 	lsr.w	r3, r2, r3
 800e046:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800e048:	4b0a      	ldr	r3, [pc, #40]	; (800e074 <HAL_RCC_GetHCLKFreq+0x50>)
 800e04a:	699b      	ldr	r3, [r3, #24]
 800e04c:	f003 030f 	and.w	r3, r3, #15
 800e050:	4a09      	ldr	r2, [pc, #36]	; (800e078 <HAL_RCC_GetHCLKFreq+0x54>)
 800e052:	5cd3      	ldrb	r3, [r2, r3]
 800e054:	f003 031f 	and.w	r3, r3, #31
 800e058:	687a      	ldr	r2, [r7, #4]
 800e05a:	fa22 f303 	lsr.w	r3, r2, r3
 800e05e:	4a07      	ldr	r2, [pc, #28]	; (800e07c <HAL_RCC_GetHCLKFreq+0x58>)
 800e060:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800e062:	4a07      	ldr	r2, [pc, #28]	; (800e080 <HAL_RCC_GetHCLKFreq+0x5c>)
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800e068:	4b04      	ldr	r3, [pc, #16]	; (800e07c <HAL_RCC_GetHCLKFreq+0x58>)
 800e06a:	681b      	ldr	r3, [r3, #0]
}
 800e06c:	4618      	mov	r0, r3
 800e06e:	3708      	adds	r7, #8
 800e070:	46bd      	mov	sp, r7
 800e072:	bd80      	pop	{r7, pc}
 800e074:	58024400 	.word	0x58024400
 800e078:	08018550 	.word	0x08018550
 800e07c:	24000054 	.word	0x24000054
 800e080:	24000050 	.word	0x24000050

0800e084 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800e088:	f7ff ffcc 	bl	800e024 <HAL_RCC_GetHCLKFreq>
 800e08c:	4602      	mov	r2, r0
 800e08e:	4b06      	ldr	r3, [pc, #24]	; (800e0a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e090:	69db      	ldr	r3, [r3, #28]
 800e092:	091b      	lsrs	r3, r3, #4
 800e094:	f003 0307 	and.w	r3, r3, #7
 800e098:	4904      	ldr	r1, [pc, #16]	; (800e0ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800e09a:	5ccb      	ldrb	r3, [r1, r3]
 800e09c:	f003 031f 	and.w	r3, r3, #31
 800e0a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	bd80      	pop	{r7, pc}
 800e0a8:	58024400 	.word	0x58024400
 800e0ac:	08018550 	.word	0x08018550

0800e0b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800e0b4:	f7ff ffb6 	bl	800e024 <HAL_RCC_GetHCLKFreq>
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	4b06      	ldr	r3, [pc, #24]	; (800e0d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e0bc:	69db      	ldr	r3, [r3, #28]
 800e0be:	0a1b      	lsrs	r3, r3, #8
 800e0c0:	f003 0307 	and.w	r3, r3, #7
 800e0c4:	4904      	ldr	r1, [pc, #16]	; (800e0d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e0c6:	5ccb      	ldrb	r3, [r1, r3]
 800e0c8:	f003 031f 	and.w	r3, r3, #31
 800e0cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	bd80      	pop	{r7, pc}
 800e0d4:	58024400 	.word	0x58024400
 800e0d8:	08018550 	.word	0x08018550

0800e0dc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800e0e0:	4b07      	ldr	r3, [pc, #28]	; (800e100 <HAL_RCC_NMI_IRQHandler+0x24>)
 800e0e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e0e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e0ec:	d105      	bne.n	800e0fa <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800e0ee:	f000 f809 	bl	800e104 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800e0f2:	4b03      	ldr	r3, [pc, #12]	; (800e100 <HAL_RCC_NMI_IRQHandler+0x24>)
 800e0f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e0f8:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800e0fa:	bf00      	nop
 800e0fc:	bd80      	pop	{r7, pc}
 800e0fe:	bf00      	nop
 800e100:	58024400 	.word	0x58024400

0800e104 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 800e104:	b480      	push	{r7}
 800e106:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 800e108:	bf00      	nop
 800e10a:	46bd      	mov	sp, r7
 800e10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e110:	4770      	bx	lr
	...

0800e114 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b086      	sub	sp, #24
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e11c:	2300      	movs	r3, #0
 800e11e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e120:	2300      	movs	r3, #0
 800e122:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d03f      	beq.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e134:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e138:	d02a      	beq.n	800e190 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800e13a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e13e:	d824      	bhi.n	800e18a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800e140:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e144:	d018      	beq.n	800e178 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e146:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e14a:	d81e      	bhi.n	800e18a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d003      	beq.n	800e158 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800e150:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e154:	d007      	beq.n	800e166 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800e156:	e018      	b.n	800e18a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e158:	4bab      	ldr	r3, [pc, #684]	; (800e408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e15c:	4aaa      	ldr	r2, [pc, #680]	; (800e408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e15e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e162:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800e164:	e015      	b.n	800e192 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	3304      	adds	r3, #4
 800e16a:	2102      	movs	r1, #2
 800e16c:	4618      	mov	r0, r3
 800e16e:	f001 feff 	bl	800ff70 <RCCEx_PLL2_Config>
 800e172:	4603      	mov	r3, r0
 800e174:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800e176:	e00c      	b.n	800e192 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	3324      	adds	r3, #36	; 0x24
 800e17c:	2102      	movs	r1, #2
 800e17e:	4618      	mov	r0, r3
 800e180:	f001 ffa8 	bl	80100d4 <RCCEx_PLL3_Config>
 800e184:	4603      	mov	r3, r0
 800e186:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800e188:	e003      	b.n	800e192 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e18a:	2301      	movs	r3, #1
 800e18c:	75fb      	strb	r3, [r7, #23]
      break;
 800e18e:	e000      	b.n	800e192 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800e190:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e192:	7dfb      	ldrb	r3, [r7, #23]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d109      	bne.n	800e1ac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800e198:	4b9b      	ldr	r3, [pc, #620]	; (800e408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e19a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e19c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1a4:	4998      	ldr	r1, [pc, #608]	; (800e408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e1a6:	4313      	orrs	r3, r2
 800e1a8:	650b      	str	r3, [r1, #80]	; 0x50
 800e1aa:	e001      	b.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1ac:	7dfb      	ldrb	r3, [r7, #23]
 800e1ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d03d      	beq.n	800e238 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1c0:	2b04      	cmp	r3, #4
 800e1c2:	d826      	bhi.n	800e212 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800e1c4:	a201      	add	r2, pc, #4	; (adr r2, 800e1cc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800e1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ca:	bf00      	nop
 800e1cc:	0800e1e1 	.word	0x0800e1e1
 800e1d0:	0800e1ef 	.word	0x0800e1ef
 800e1d4:	0800e201 	.word	0x0800e201
 800e1d8:	0800e219 	.word	0x0800e219
 800e1dc:	0800e219 	.word	0x0800e219
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1e0:	4b89      	ldr	r3, [pc, #548]	; (800e408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e4:	4a88      	ldr	r2, [pc, #544]	; (800e408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e1e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e1ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e1ec:	e015      	b.n	800e21a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	3304      	adds	r3, #4
 800e1f2:	2100      	movs	r1, #0
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	f001 febb 	bl	800ff70 <RCCEx_PLL2_Config>
 800e1fa:	4603      	mov	r3, r0
 800e1fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e1fe:	e00c      	b.n	800e21a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	3324      	adds	r3, #36	; 0x24
 800e204:	2100      	movs	r1, #0
 800e206:	4618      	mov	r0, r3
 800e208:	f001 ff64 	bl	80100d4 <RCCEx_PLL3_Config>
 800e20c:	4603      	mov	r3, r0
 800e20e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e210:	e003      	b.n	800e21a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e212:	2301      	movs	r3, #1
 800e214:	75fb      	strb	r3, [r7, #23]
      break;
 800e216:	e000      	b.n	800e21a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800e218:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e21a:	7dfb      	ldrb	r3, [r7, #23]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d109      	bne.n	800e234 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e220:	4b79      	ldr	r3, [pc, #484]	; (800e408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e224:	f023 0207 	bic.w	r2, r3, #7
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e22c:	4976      	ldr	r1, [pc, #472]	; (800e408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e22e:	4313      	orrs	r3, r2
 800e230:	650b      	str	r3, [r1, #80]	; 0x50
 800e232:	e001      	b.n	800e238 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e234:	7dfb      	ldrb	r3, [r7, #23]
 800e236:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e240:	2b00      	cmp	r3, #0
 800e242:	d051      	beq.n	800e2e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e24a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800e24e:	d036      	beq.n	800e2be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800e250:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800e254:	d830      	bhi.n	800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e256:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e25a:	d032      	beq.n	800e2c2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800e25c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e260:	d82a      	bhi.n	800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e262:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e266:	d02e      	beq.n	800e2c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800e268:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e26c:	d824      	bhi.n	800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e26e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e272:	d018      	beq.n	800e2a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800e274:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e278:	d81e      	bhi.n	800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d003      	beq.n	800e286 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800e27e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e282:	d007      	beq.n	800e294 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800e284:	e018      	b.n	800e2b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e286:	4b60      	ldr	r3, [pc, #384]	; (800e408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e28a:	4a5f      	ldr	r2, [pc, #380]	; (800e408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e28c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e290:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e292:	e019      	b.n	800e2c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	3304      	adds	r3, #4
 800e298:	2100      	movs	r1, #0
 800e29a:	4618      	mov	r0, r3
 800e29c:	f001 fe68 	bl	800ff70 <RCCEx_PLL2_Config>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800e2a4:	e010      	b.n	800e2c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	3324      	adds	r3, #36	; 0x24
 800e2aa:	2100      	movs	r1, #0
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	f001 ff11 	bl	80100d4 <RCCEx_PLL3_Config>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e2b6:	e007      	b.n	800e2c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	75fb      	strb	r3, [r7, #23]
      break;
 800e2bc:	e004      	b.n	800e2c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800e2be:	bf00      	nop
 800e2c0:	e002      	b.n	800e2c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800e2c2:	bf00      	nop
 800e2c4:	e000      	b.n	800e2c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800e2c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e2c8:	7dfb      	ldrb	r3, [r7, #23]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d10a      	bne.n	800e2e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e2ce:	4b4e      	ldr	r3, [pc, #312]	; (800e408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e2d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e2d2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e2dc:	494a      	ldr	r1, [pc, #296]	; (800e408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	658b      	str	r3, [r1, #88]	; 0x58
 800e2e2:	e001      	b.n	800e2e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e2e4:	7dfb      	ldrb	r3, [r7, #23]
 800e2e6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d051      	beq.n	800e398 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e2fa:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800e2fe:	d036      	beq.n	800e36e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800e300:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800e304:	d830      	bhi.n	800e368 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e306:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e30a:	d032      	beq.n	800e372 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800e30c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e310:	d82a      	bhi.n	800e368 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e312:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e316:	d02e      	beq.n	800e376 <HAL_RCCEx_PeriphCLKConfig+0x262>
 800e318:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e31c:	d824      	bhi.n	800e368 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e31e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e322:	d018      	beq.n	800e356 <HAL_RCCEx_PeriphCLKConfig+0x242>
 800e324:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e328:	d81e      	bhi.n	800e368 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d003      	beq.n	800e336 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800e32e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e332:	d007      	beq.n	800e344 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800e334:	e018      	b.n	800e368 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e336:	4b34      	ldr	r3, [pc, #208]	; (800e408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e33a:	4a33      	ldr	r2, [pc, #204]	; (800e408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e33c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e340:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e342:	e019      	b.n	800e378 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	3304      	adds	r3, #4
 800e348:	2100      	movs	r1, #0
 800e34a:	4618      	mov	r0, r3
 800e34c:	f001 fe10 	bl	800ff70 <RCCEx_PLL2_Config>
 800e350:	4603      	mov	r3, r0
 800e352:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800e354:	e010      	b.n	800e378 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	3324      	adds	r3, #36	; 0x24
 800e35a:	2100      	movs	r1, #0
 800e35c:	4618      	mov	r0, r3
 800e35e:	f001 feb9 	bl	80100d4 <RCCEx_PLL3_Config>
 800e362:	4603      	mov	r3, r0
 800e364:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e366:	e007      	b.n	800e378 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800e368:	2301      	movs	r3, #1
 800e36a:	75fb      	strb	r3, [r7, #23]
      break;
 800e36c:	e004      	b.n	800e378 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800e36e:	bf00      	nop
 800e370:	e002      	b.n	800e378 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800e372:	bf00      	nop
 800e374:	e000      	b.n	800e378 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800e376:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e378:	7dfb      	ldrb	r3, [r7, #23]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d10a      	bne.n	800e394 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e37e:	4b22      	ldr	r3, [pc, #136]	; (800e408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e382:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e38c:	491e      	ldr	r1, [pc, #120]	; (800e408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e38e:	4313      	orrs	r3, r2
 800e390:	658b      	str	r3, [r1, #88]	; 0x58
 800e392:	e001      	b.n	800e398 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e394:	7dfb      	ldrb	r3, [r7, #23]
 800e396:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d035      	beq.n	800e410 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3a8:	2b30      	cmp	r3, #48	; 0x30
 800e3aa:	d01c      	beq.n	800e3e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e3ac:	2b30      	cmp	r3, #48	; 0x30
 800e3ae:	d817      	bhi.n	800e3e0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800e3b0:	2b20      	cmp	r3, #32
 800e3b2:	d00c      	beq.n	800e3ce <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800e3b4:	2b20      	cmp	r3, #32
 800e3b6:	d813      	bhi.n	800e3e0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d016      	beq.n	800e3ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800e3bc:	2b10      	cmp	r3, #16
 800e3be:	d10f      	bne.n	800e3e0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e3c0:	4b11      	ldr	r3, [pc, #68]	; (800e408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c4:	4a10      	ldr	r2, [pc, #64]	; (800e408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e3c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e3ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800e3cc:	e00e      	b.n	800e3ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	3304      	adds	r3, #4
 800e3d2:	2102      	movs	r1, #2
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f001 fdcb 	bl	800ff70 <RCCEx_PLL2_Config>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800e3de:	e005      	b.n	800e3ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	75fb      	strb	r3, [r7, #23]
      break;
 800e3e4:	e002      	b.n	800e3ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800e3e6:	bf00      	nop
 800e3e8:	e000      	b.n	800e3ec <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800e3ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e3ec:	7dfb      	ldrb	r3, [r7, #23]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d10c      	bne.n	800e40c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800e3f2:	4b05      	ldr	r3, [pc, #20]	; (800e408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e3f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e3f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3fe:	4902      	ldr	r1, [pc, #8]	; (800e408 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e400:	4313      	orrs	r3, r2
 800e402:	64cb      	str	r3, [r1, #76]	; 0x4c
 800e404:	e004      	b.n	800e410 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800e406:	bf00      	nop
 800e408:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e40c:	7dfb      	ldrb	r3, [r7, #23]
 800e40e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d047      	beq.n	800e4ac <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e420:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e424:	d030      	beq.n	800e488 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800e426:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e42a:	d82a      	bhi.n	800e482 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800e42c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e430:	d02c      	beq.n	800e48c <HAL_RCCEx_PeriphCLKConfig+0x378>
 800e432:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e436:	d824      	bhi.n	800e482 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800e438:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e43c:	d018      	beq.n	800e470 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800e43e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e442:	d81e      	bhi.n	800e482 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800e444:	2b00      	cmp	r3, #0
 800e446:	d003      	beq.n	800e450 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800e448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e44c:	d007      	beq.n	800e45e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800e44e:	e018      	b.n	800e482 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e450:	4bac      	ldr	r3, [pc, #688]	; (800e704 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e454:	4aab      	ldr	r2, [pc, #684]	; (800e704 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e45a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800e45c:	e017      	b.n	800e48e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	3304      	adds	r3, #4
 800e462:	2100      	movs	r1, #0
 800e464:	4618      	mov	r0, r3
 800e466:	f001 fd83 	bl	800ff70 <RCCEx_PLL2_Config>
 800e46a:	4603      	mov	r3, r0
 800e46c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800e46e:	e00e      	b.n	800e48e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	3324      	adds	r3, #36	; 0x24
 800e474:	2100      	movs	r1, #0
 800e476:	4618      	mov	r0, r3
 800e478:	f001 fe2c 	bl	80100d4 <RCCEx_PLL3_Config>
 800e47c:	4603      	mov	r3, r0
 800e47e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800e480:	e005      	b.n	800e48e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e482:	2301      	movs	r3, #1
 800e484:	75fb      	strb	r3, [r7, #23]
      break;
 800e486:	e002      	b.n	800e48e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800e488:	bf00      	nop
 800e48a:	e000      	b.n	800e48e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800e48c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e48e:	7dfb      	ldrb	r3, [r7, #23]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d109      	bne.n	800e4a8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e494:	4b9b      	ldr	r3, [pc, #620]	; (800e704 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e498:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4a0:	4998      	ldr	r1, [pc, #608]	; (800e704 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e4a2:	4313      	orrs	r3, r2
 800e4a4:	650b      	str	r3, [r1, #80]	; 0x50
 800e4a6:	e001      	b.n	800e4ac <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4a8:	7dfb      	ldrb	r3, [r7, #23]
 800e4aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d049      	beq.n	800e54c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e4c0:	d02e      	beq.n	800e520 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800e4c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e4c6:	d828      	bhi.n	800e51a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e4c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e4cc:	d02a      	beq.n	800e524 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800e4ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e4d2:	d822      	bhi.n	800e51a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e4d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e4d8:	d026      	beq.n	800e528 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800e4da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e4de:	d81c      	bhi.n	800e51a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e4e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e4e4:	d010      	beq.n	800e508 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800e4e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e4ea:	d816      	bhi.n	800e51a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d01d      	beq.n	800e52c <HAL_RCCEx_PeriphCLKConfig+0x418>
 800e4f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4f4:	d111      	bne.n	800e51a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	3304      	adds	r3, #4
 800e4fa:	2101      	movs	r1, #1
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f001 fd37 	bl	800ff70 <RCCEx_PLL2_Config>
 800e502:	4603      	mov	r3, r0
 800e504:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800e506:	e012      	b.n	800e52e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	3324      	adds	r3, #36	; 0x24
 800e50c:	2101      	movs	r1, #1
 800e50e:	4618      	mov	r0, r3
 800e510:	f001 fde0 	bl	80100d4 <RCCEx_PLL3_Config>
 800e514:	4603      	mov	r3, r0
 800e516:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800e518:	e009      	b.n	800e52e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e51a:	2301      	movs	r3, #1
 800e51c:	75fb      	strb	r3, [r7, #23]
      break;
 800e51e:	e006      	b.n	800e52e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e520:	bf00      	nop
 800e522:	e004      	b.n	800e52e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e524:	bf00      	nop
 800e526:	e002      	b.n	800e52e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e528:	bf00      	nop
 800e52a:	e000      	b.n	800e52e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e52c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e52e:	7dfb      	ldrb	r3, [r7, #23]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d109      	bne.n	800e548 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e534:	4b73      	ldr	r3, [pc, #460]	; (800e704 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e538:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e540:	4970      	ldr	r1, [pc, #448]	; (800e704 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e542:	4313      	orrs	r3, r2
 800e544:	650b      	str	r3, [r1, #80]	; 0x50
 800e546:	e001      	b.n	800e54c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e548:	7dfb      	ldrb	r3, [r7, #23]
 800e54a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e554:	2b00      	cmp	r3, #0
 800e556:	d04b      	beq.n	800e5f0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e55e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e562:	d02e      	beq.n	800e5c2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800e564:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e568:	d828      	bhi.n	800e5bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e56a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e56e:	d02a      	beq.n	800e5c6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800e570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e574:	d822      	bhi.n	800e5bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e576:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e57a:	d026      	beq.n	800e5ca <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800e57c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e580:	d81c      	bhi.n	800e5bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e586:	d010      	beq.n	800e5aa <HAL_RCCEx_PeriphCLKConfig+0x496>
 800e588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e58c:	d816      	bhi.n	800e5bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d01d      	beq.n	800e5ce <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800e592:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e596:	d111      	bne.n	800e5bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	3304      	adds	r3, #4
 800e59c:	2101      	movs	r1, #1
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f001 fce6 	bl	800ff70 <RCCEx_PLL2_Config>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800e5a8:	e012      	b.n	800e5d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	3324      	adds	r3, #36	; 0x24
 800e5ae:	2101      	movs	r1, #1
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f001 fd8f 	bl	80100d4 <RCCEx_PLL3_Config>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800e5ba:	e009      	b.n	800e5d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800e5bc:	2301      	movs	r3, #1
 800e5be:	75fb      	strb	r3, [r7, #23]
      break;
 800e5c0:	e006      	b.n	800e5d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e5c2:	bf00      	nop
 800e5c4:	e004      	b.n	800e5d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e5c6:	bf00      	nop
 800e5c8:	e002      	b.n	800e5d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e5ca:	bf00      	nop
 800e5cc:	e000      	b.n	800e5d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e5ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e5d0:	7dfb      	ldrb	r3, [r7, #23]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d10a      	bne.n	800e5ec <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e5d6:	4b4b      	ldr	r3, [pc, #300]	; (800e704 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e5d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e5e4:	4947      	ldr	r1, [pc, #284]	; (800e704 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e5e6:	4313      	orrs	r3, r2
 800e5e8:	658b      	str	r3, [r1, #88]	; 0x58
 800e5ea:	e001      	b.n	800e5f0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5ec:	7dfb      	ldrb	r3, [r7, #23]
 800e5ee:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d02f      	beq.n	800e65c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e604:	d00e      	beq.n	800e624 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800e606:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e60a:	d814      	bhi.n	800e636 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d015      	beq.n	800e63c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800e610:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e614:	d10f      	bne.n	800e636 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e616:	4b3b      	ldr	r3, [pc, #236]	; (800e704 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e61a:	4a3a      	ldr	r2, [pc, #232]	; (800e704 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e61c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e620:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800e622:	e00c      	b.n	800e63e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	3304      	adds	r3, #4
 800e628:	2101      	movs	r1, #1
 800e62a:	4618      	mov	r0, r3
 800e62c:	f001 fca0 	bl	800ff70 <RCCEx_PLL2_Config>
 800e630:	4603      	mov	r3, r0
 800e632:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800e634:	e003      	b.n	800e63e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e636:	2301      	movs	r3, #1
 800e638:	75fb      	strb	r3, [r7, #23]
      break;
 800e63a:	e000      	b.n	800e63e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800e63c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e63e:	7dfb      	ldrb	r3, [r7, #23]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d109      	bne.n	800e658 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e644:	4b2f      	ldr	r3, [pc, #188]	; (800e704 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e648:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e650:	492c      	ldr	r1, [pc, #176]	; (800e704 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e652:	4313      	orrs	r3, r2
 800e654:	650b      	str	r3, [r1, #80]	; 0x50
 800e656:	e001      	b.n	800e65c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e658:	7dfb      	ldrb	r3, [r7, #23]
 800e65a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e664:	2b00      	cmp	r3, #0
 800e666:	d032      	beq.n	800e6ce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e66c:	2b03      	cmp	r3, #3
 800e66e:	d81b      	bhi.n	800e6a8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800e670:	a201      	add	r2, pc, #4	; (adr r2, 800e678 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800e672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e676:	bf00      	nop
 800e678:	0800e6af 	.word	0x0800e6af
 800e67c:	0800e689 	.word	0x0800e689
 800e680:	0800e697 	.word	0x0800e697
 800e684:	0800e6af 	.word	0x0800e6af
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e688:	4b1e      	ldr	r3, [pc, #120]	; (800e704 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e68c:	4a1d      	ldr	r2, [pc, #116]	; (800e704 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e68e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e692:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800e694:	e00c      	b.n	800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	3304      	adds	r3, #4
 800e69a:	2102      	movs	r1, #2
 800e69c:	4618      	mov	r0, r3
 800e69e:	f001 fc67 	bl	800ff70 <RCCEx_PLL2_Config>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800e6a6:	e003      	b.n	800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	75fb      	strb	r3, [r7, #23]
      break;
 800e6ac:	e000      	b.n	800e6b0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800e6ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e6b0:	7dfb      	ldrb	r3, [r7, #23]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d109      	bne.n	800e6ca <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e6b6:	4b13      	ldr	r3, [pc, #76]	; (800e704 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e6b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6ba:	f023 0203 	bic.w	r2, r3, #3
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6c2:	4910      	ldr	r1, [pc, #64]	; (800e704 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e6c4:	4313      	orrs	r3, r2
 800e6c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800e6c8:	e001      	b.n	800e6ce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6ca:	7dfb      	ldrb	r3, [r7, #23]
 800e6cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	f000 808a 	beq.w	800e7f0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e6dc:	4b0a      	ldr	r3, [pc, #40]	; (800e708 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4a09      	ldr	r2, [pc, #36]	; (800e708 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800e6e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e6e8:	f7fb ffca 	bl	800a680 <HAL_GetTick>
 800e6ec:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e6ee:	e00d      	b.n	800e70c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e6f0:	f7fb ffc6 	bl	800a680 <HAL_GetTick>
 800e6f4:	4602      	mov	r2, r0
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	1ad3      	subs	r3, r2, r3
 800e6fa:	2b64      	cmp	r3, #100	; 0x64
 800e6fc:	d906      	bls.n	800e70c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800e6fe:	2303      	movs	r3, #3
 800e700:	75fb      	strb	r3, [r7, #23]
        break;
 800e702:	e009      	b.n	800e718 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800e704:	58024400 	.word	0x58024400
 800e708:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e70c:	4bb9      	ldr	r3, [pc, #740]	; (800e9f4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e714:	2b00      	cmp	r3, #0
 800e716:	d0eb      	beq.n	800e6f0 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800e718:	7dfb      	ldrb	r3, [r7, #23]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d166      	bne.n	800e7ec <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e71e:	4bb6      	ldr	r3, [pc, #728]	; (800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e720:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e728:	4053      	eors	r3, r2
 800e72a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d013      	beq.n	800e75a <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e732:	4bb1      	ldr	r3, [pc, #708]	; (800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e73a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e73c:	4bae      	ldr	r3, [pc, #696]	; (800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e73e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e740:	4aad      	ldr	r2, [pc, #692]	; (800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e746:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e748:	4bab      	ldr	r3, [pc, #684]	; (800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e74a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e74c:	4aaa      	ldr	r2, [pc, #680]	; (800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e74e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e752:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e754:	4aa8      	ldr	r2, [pc, #672]	; (800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e760:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e764:	d115      	bne.n	800e792 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e766:	f7fb ff8b 	bl	800a680 <HAL_GetTick>
 800e76a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e76c:	e00b      	b.n	800e786 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e76e:	f7fb ff87 	bl	800a680 <HAL_GetTick>
 800e772:	4602      	mov	r2, r0
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	1ad3      	subs	r3, r2, r3
 800e778:	f241 3288 	movw	r2, #5000	; 0x1388
 800e77c:	4293      	cmp	r3, r2
 800e77e:	d902      	bls.n	800e786 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800e780:	2303      	movs	r3, #3
 800e782:	75fb      	strb	r3, [r7, #23]
            break;
 800e784:	e005      	b.n	800e792 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e786:	4b9c      	ldr	r3, [pc, #624]	; (800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e78a:	f003 0302 	and.w	r3, r3, #2
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d0ed      	beq.n	800e76e <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800e792:	7dfb      	ldrb	r3, [r7, #23]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d126      	bne.n	800e7e6 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e79e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e7a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e7a6:	d10d      	bne.n	800e7c4 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800e7a8:	4b93      	ldr	r3, [pc, #588]	; (800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e7aa:	691b      	ldr	r3, [r3, #16]
 800e7ac:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e7b6:	0919      	lsrs	r1, r3, #4
 800e7b8:	4b90      	ldr	r3, [pc, #576]	; (800e9fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800e7ba:	400b      	ands	r3, r1
 800e7bc:	498e      	ldr	r1, [pc, #568]	; (800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e7be:	4313      	orrs	r3, r2
 800e7c0:	610b      	str	r3, [r1, #16]
 800e7c2:	e005      	b.n	800e7d0 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800e7c4:	4b8c      	ldr	r3, [pc, #560]	; (800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e7c6:	691b      	ldr	r3, [r3, #16]
 800e7c8:	4a8b      	ldr	r2, [pc, #556]	; (800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e7ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e7ce:	6113      	str	r3, [r2, #16]
 800e7d0:	4b89      	ldr	r3, [pc, #548]	; (800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e7d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e7da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e7de:	4986      	ldr	r1, [pc, #536]	; (800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e7e0:	4313      	orrs	r3, r2
 800e7e2:	670b      	str	r3, [r1, #112]	; 0x70
 800e7e4:	e004      	b.n	800e7f0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e7e6:	7dfb      	ldrb	r3, [r7, #23]
 800e7e8:	75bb      	strb	r3, [r7, #22]
 800e7ea:	e001      	b.n	800e7f0 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7ec:	7dfb      	ldrb	r3, [r7, #23]
 800e7ee:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	f003 0301 	and.w	r3, r3, #1
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d07e      	beq.n	800e8fa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e800:	2b28      	cmp	r3, #40	; 0x28
 800e802:	d867      	bhi.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800e804:	a201      	add	r2, pc, #4	; (adr r2, 800e80c <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800e806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e80a:	bf00      	nop
 800e80c:	0800e8db 	.word	0x0800e8db
 800e810:	0800e8d5 	.word	0x0800e8d5
 800e814:	0800e8d5 	.word	0x0800e8d5
 800e818:	0800e8d5 	.word	0x0800e8d5
 800e81c:	0800e8d5 	.word	0x0800e8d5
 800e820:	0800e8d5 	.word	0x0800e8d5
 800e824:	0800e8d5 	.word	0x0800e8d5
 800e828:	0800e8d5 	.word	0x0800e8d5
 800e82c:	0800e8b1 	.word	0x0800e8b1
 800e830:	0800e8d5 	.word	0x0800e8d5
 800e834:	0800e8d5 	.word	0x0800e8d5
 800e838:	0800e8d5 	.word	0x0800e8d5
 800e83c:	0800e8d5 	.word	0x0800e8d5
 800e840:	0800e8d5 	.word	0x0800e8d5
 800e844:	0800e8d5 	.word	0x0800e8d5
 800e848:	0800e8d5 	.word	0x0800e8d5
 800e84c:	0800e8c3 	.word	0x0800e8c3
 800e850:	0800e8d5 	.word	0x0800e8d5
 800e854:	0800e8d5 	.word	0x0800e8d5
 800e858:	0800e8d5 	.word	0x0800e8d5
 800e85c:	0800e8d5 	.word	0x0800e8d5
 800e860:	0800e8d5 	.word	0x0800e8d5
 800e864:	0800e8d5 	.word	0x0800e8d5
 800e868:	0800e8d5 	.word	0x0800e8d5
 800e86c:	0800e8db 	.word	0x0800e8db
 800e870:	0800e8d5 	.word	0x0800e8d5
 800e874:	0800e8d5 	.word	0x0800e8d5
 800e878:	0800e8d5 	.word	0x0800e8d5
 800e87c:	0800e8d5 	.word	0x0800e8d5
 800e880:	0800e8d5 	.word	0x0800e8d5
 800e884:	0800e8d5 	.word	0x0800e8d5
 800e888:	0800e8d5 	.word	0x0800e8d5
 800e88c:	0800e8db 	.word	0x0800e8db
 800e890:	0800e8d5 	.word	0x0800e8d5
 800e894:	0800e8d5 	.word	0x0800e8d5
 800e898:	0800e8d5 	.word	0x0800e8d5
 800e89c:	0800e8d5 	.word	0x0800e8d5
 800e8a0:	0800e8d5 	.word	0x0800e8d5
 800e8a4:	0800e8d5 	.word	0x0800e8d5
 800e8a8:	0800e8d5 	.word	0x0800e8d5
 800e8ac:	0800e8db 	.word	0x0800e8db
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	3304      	adds	r3, #4
 800e8b4:	2101      	movs	r1, #1
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f001 fb5a 	bl	800ff70 <RCCEx_PLL2_Config>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800e8c0:	e00c      	b.n	800e8dc <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	3324      	adds	r3, #36	; 0x24
 800e8c6:	2101      	movs	r1, #1
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f001 fc03 	bl	80100d4 <RCCEx_PLL3_Config>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800e8d2:	e003      	b.n	800e8dc <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	75fb      	strb	r3, [r7, #23]
      break;
 800e8d8:	e000      	b.n	800e8dc <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800e8da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e8dc:	7dfb      	ldrb	r3, [r7, #23]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d109      	bne.n	800e8f6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e8e2:	4b45      	ldr	r3, [pc, #276]	; (800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e8e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8e6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8ee:	4942      	ldr	r1, [pc, #264]	; (800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e8f0:	4313      	orrs	r3, r2
 800e8f2:	654b      	str	r3, [r1, #84]	; 0x54
 800e8f4:	e001      	b.n	800e8fa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e8f6:	7dfb      	ldrb	r3, [r7, #23]
 800e8f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f003 0302 	and.w	r3, r3, #2
 800e902:	2b00      	cmp	r3, #0
 800e904:	d037      	beq.n	800e976 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e90a:	2b05      	cmp	r3, #5
 800e90c:	d820      	bhi.n	800e950 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800e90e:	a201      	add	r2, pc, #4	; (adr r2, 800e914 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800e910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e914:	0800e957 	.word	0x0800e957
 800e918:	0800e92d 	.word	0x0800e92d
 800e91c:	0800e93f 	.word	0x0800e93f
 800e920:	0800e957 	.word	0x0800e957
 800e924:	0800e957 	.word	0x0800e957
 800e928:	0800e957 	.word	0x0800e957
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	3304      	adds	r3, #4
 800e930:	2101      	movs	r1, #1
 800e932:	4618      	mov	r0, r3
 800e934:	f001 fb1c 	bl	800ff70 <RCCEx_PLL2_Config>
 800e938:	4603      	mov	r3, r0
 800e93a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800e93c:	e00c      	b.n	800e958 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	3324      	adds	r3, #36	; 0x24
 800e942:	2101      	movs	r1, #1
 800e944:	4618      	mov	r0, r3
 800e946:	f001 fbc5 	bl	80100d4 <RCCEx_PLL3_Config>
 800e94a:	4603      	mov	r3, r0
 800e94c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800e94e:	e003      	b.n	800e958 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e950:	2301      	movs	r3, #1
 800e952:	75fb      	strb	r3, [r7, #23]
      break;
 800e954:	e000      	b.n	800e958 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800e956:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e958:	7dfb      	ldrb	r3, [r7, #23]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d109      	bne.n	800e972 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e95e:	4b26      	ldr	r3, [pc, #152]	; (800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e962:	f023 0207 	bic.w	r2, r3, #7
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e96a:	4923      	ldr	r1, [pc, #140]	; (800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e96c:	4313      	orrs	r3, r2
 800e96e:	654b      	str	r3, [r1, #84]	; 0x54
 800e970:	e001      	b.n	800e976 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e972:	7dfb      	ldrb	r3, [r7, #23]
 800e974:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f003 0304 	and.w	r3, r3, #4
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d040      	beq.n	800ea04 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e988:	2b05      	cmp	r3, #5
 800e98a:	d821      	bhi.n	800e9d0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800e98c:	a201      	add	r2, pc, #4	; (adr r2, 800e994 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800e98e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e992:	bf00      	nop
 800e994:	0800e9d7 	.word	0x0800e9d7
 800e998:	0800e9ad 	.word	0x0800e9ad
 800e99c:	0800e9bf 	.word	0x0800e9bf
 800e9a0:	0800e9d7 	.word	0x0800e9d7
 800e9a4:	0800e9d7 	.word	0x0800e9d7
 800e9a8:	0800e9d7 	.word	0x0800e9d7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	3304      	adds	r3, #4
 800e9b0:	2101      	movs	r1, #1
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	f001 fadc 	bl	800ff70 <RCCEx_PLL2_Config>
 800e9b8:	4603      	mov	r3, r0
 800e9ba:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800e9bc:	e00c      	b.n	800e9d8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	3324      	adds	r3, #36	; 0x24
 800e9c2:	2101      	movs	r1, #1
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f001 fb85 	bl	80100d4 <RCCEx_PLL3_Config>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800e9ce:	e003      	b.n	800e9d8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	75fb      	strb	r3, [r7, #23]
      break;
 800e9d4:	e000      	b.n	800e9d8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800e9d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e9d8:	7dfb      	ldrb	r3, [r7, #23]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d110      	bne.n	800ea00 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e9de:	4b06      	ldr	r3, [pc, #24]	; (800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e9e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e9e2:	f023 0207 	bic.w	r2, r3, #7
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e9ec:	4902      	ldr	r1, [pc, #8]	; (800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e9ee:	4313      	orrs	r3, r2
 800e9f0:	658b      	str	r3, [r1, #88]	; 0x58
 800e9f2:	e007      	b.n	800ea04 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800e9f4:	58024800 	.word	0x58024800
 800e9f8:	58024400 	.word	0x58024400
 800e9fc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea00:	7dfb      	ldrb	r3, [r7, #23]
 800ea02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	f003 0320 	and.w	r3, r3, #32
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d04b      	beq.n	800eaa8 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ea1a:	d02e      	beq.n	800ea7a <HAL_RCCEx_PeriphCLKConfig+0x966>
 800ea1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ea20:	d828      	bhi.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800ea22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea26:	d02a      	beq.n	800ea7e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800ea28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea2c:	d822      	bhi.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800ea2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ea32:	d026      	beq.n	800ea82 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800ea34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ea38:	d81c      	bhi.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800ea3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea3e:	d010      	beq.n	800ea62 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800ea40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ea44:	d816      	bhi.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d01d      	beq.n	800ea86 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800ea4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ea4e:	d111      	bne.n	800ea74 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	3304      	adds	r3, #4
 800ea54:	2100      	movs	r1, #0
 800ea56:	4618      	mov	r0, r3
 800ea58:	f001 fa8a 	bl	800ff70 <RCCEx_PLL2_Config>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800ea60:	e012      	b.n	800ea88 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	3324      	adds	r3, #36	; 0x24
 800ea66:	2102      	movs	r1, #2
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f001 fb33 	bl	80100d4 <RCCEx_PLL3_Config>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800ea72:	e009      	b.n	800ea88 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ea74:	2301      	movs	r3, #1
 800ea76:	75fb      	strb	r3, [r7, #23]
      break;
 800ea78:	e006      	b.n	800ea88 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800ea7a:	bf00      	nop
 800ea7c:	e004      	b.n	800ea88 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800ea7e:	bf00      	nop
 800ea80:	e002      	b.n	800ea88 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800ea82:	bf00      	nop
 800ea84:	e000      	b.n	800ea88 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800ea86:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ea88:	7dfb      	ldrb	r3, [r7, #23]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d10a      	bne.n	800eaa4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ea8e:	4bb2      	ldr	r3, [pc, #712]	; (800ed58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ea90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea92:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea9c:	49ae      	ldr	r1, [pc, #696]	; (800ed58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ea9e:	4313      	orrs	r3, r2
 800eaa0:	654b      	str	r3, [r1, #84]	; 0x54
 800eaa2:	e001      	b.n	800eaa8 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eaa4:	7dfb      	ldrb	r3, [r7, #23]
 800eaa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d04b      	beq.n	800eb4c <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800eaba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800eabe:	d02e      	beq.n	800eb1e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800eac0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800eac4:	d828      	bhi.n	800eb18 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800eac6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eaca:	d02a      	beq.n	800eb22 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800eacc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ead0:	d822      	bhi.n	800eb18 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800ead2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ead6:	d026      	beq.n	800eb26 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800ead8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800eadc:	d81c      	bhi.n	800eb18 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800eade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eae2:	d010      	beq.n	800eb06 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800eae4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eae8:	d816      	bhi.n	800eb18 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d01d      	beq.n	800eb2a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800eaee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eaf2:	d111      	bne.n	800eb18 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	3304      	adds	r3, #4
 800eaf8:	2100      	movs	r1, #0
 800eafa:	4618      	mov	r0, r3
 800eafc:	f001 fa38 	bl	800ff70 <RCCEx_PLL2_Config>
 800eb00:	4603      	mov	r3, r0
 800eb02:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800eb04:	e012      	b.n	800eb2c <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	3324      	adds	r3, #36	; 0x24
 800eb0a:	2102      	movs	r1, #2
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	f001 fae1 	bl	80100d4 <RCCEx_PLL3_Config>
 800eb12:	4603      	mov	r3, r0
 800eb14:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800eb16:	e009      	b.n	800eb2c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800eb18:	2301      	movs	r3, #1
 800eb1a:	75fb      	strb	r3, [r7, #23]
      break;
 800eb1c:	e006      	b.n	800eb2c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800eb1e:	bf00      	nop
 800eb20:	e004      	b.n	800eb2c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800eb22:	bf00      	nop
 800eb24:	e002      	b.n	800eb2c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800eb26:	bf00      	nop
 800eb28:	e000      	b.n	800eb2c <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800eb2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800eb2c:	7dfb      	ldrb	r3, [r7, #23]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d10a      	bne.n	800eb48 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800eb32:	4b89      	ldr	r3, [pc, #548]	; (800ed58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800eb34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb36:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800eb40:	4985      	ldr	r1, [pc, #532]	; (800ed58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800eb42:	4313      	orrs	r3, r2
 800eb44:	658b      	str	r3, [r1, #88]	; 0x58
 800eb46:	e001      	b.n	800eb4c <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb48:	7dfb      	ldrb	r3, [r7, #23]
 800eb4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d04b      	beq.n	800ebf0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800eb5e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800eb62:	d02e      	beq.n	800ebc2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800eb64:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800eb68:	d828      	bhi.n	800ebbc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800eb6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb6e:	d02a      	beq.n	800ebc6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800eb70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eb74:	d822      	bhi.n	800ebbc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800eb76:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800eb7a:	d026      	beq.n	800ebca <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800eb7c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800eb80:	d81c      	bhi.n	800ebbc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800eb82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eb86:	d010      	beq.n	800ebaa <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800eb88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eb8c:	d816      	bhi.n	800ebbc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d01d      	beq.n	800ebce <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800eb92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eb96:	d111      	bne.n	800ebbc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	3304      	adds	r3, #4
 800eb9c:	2100      	movs	r1, #0
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f001 f9e6 	bl	800ff70 <RCCEx_PLL2_Config>
 800eba4:	4603      	mov	r3, r0
 800eba6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800eba8:	e012      	b.n	800ebd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	3324      	adds	r3, #36	; 0x24
 800ebae:	2102      	movs	r1, #2
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f001 fa8f 	bl	80100d4 <RCCEx_PLL3_Config>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ebba:	e009      	b.n	800ebd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	75fb      	strb	r3, [r7, #23]
      break;
 800ebc0:	e006      	b.n	800ebd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800ebc2:	bf00      	nop
 800ebc4:	e004      	b.n	800ebd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800ebc6:	bf00      	nop
 800ebc8:	e002      	b.n	800ebd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800ebca:	bf00      	nop
 800ebcc:	e000      	b.n	800ebd0 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800ebce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ebd0:	7dfb      	ldrb	r3, [r7, #23]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d10a      	bne.n	800ebec <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ebd6:	4b60      	ldr	r3, [pc, #384]	; (800ed58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ebd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ebe4:	495c      	ldr	r1, [pc, #368]	; (800ed58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ebe6:	4313      	orrs	r3, r2
 800ebe8:	658b      	str	r3, [r1, #88]	; 0x58
 800ebea:	e001      	b.n	800ebf0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ebec:	7dfb      	ldrb	r3, [r7, #23]
 800ebee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	f003 0308 	and.w	r3, r3, #8
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d018      	beq.n	800ec2e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec04:	d10a      	bne.n	800ec1c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	3324      	adds	r3, #36	; 0x24
 800ec0a:	2102      	movs	r1, #2
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f001 fa61 	bl	80100d4 <RCCEx_PLL3_Config>
 800ec12:	4603      	mov	r3, r0
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d001      	beq.n	800ec1c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800ec18:	2301      	movs	r3, #1
 800ec1a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ec1c:	4b4e      	ldr	r3, [pc, #312]	; (800ed58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ec1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec28:	494b      	ldr	r1, [pc, #300]	; (800ed58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ec2a:	4313      	orrs	r3, r2
 800ec2c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f003 0310 	and.w	r3, r3, #16
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d01a      	beq.n	800ec70 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec44:	d10a      	bne.n	800ec5c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	3324      	adds	r3, #36	; 0x24
 800ec4a:	2102      	movs	r1, #2
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f001 fa41 	bl	80100d4 <RCCEx_PLL3_Config>
 800ec52:	4603      	mov	r3, r0
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d001      	beq.n	800ec5c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800ec58:	2301      	movs	r3, #1
 800ec5a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ec5c:	4b3e      	ldr	r3, [pc, #248]	; (800ed58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ec5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec6a:	493b      	ldr	r1, [pc, #236]	; (800ed58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ec6c:	4313      	orrs	r3, r2
 800ec6e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d034      	beq.n	800ece6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ec82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ec86:	d01d      	beq.n	800ecc4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800ec88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ec8c:	d817      	bhi.n	800ecbe <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d003      	beq.n	800ec9a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800ec92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec96:	d009      	beq.n	800ecac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ec98:	e011      	b.n	800ecbe <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	3304      	adds	r3, #4
 800ec9e:	2100      	movs	r1, #0
 800eca0:	4618      	mov	r0, r3
 800eca2:	f001 f965 	bl	800ff70 <RCCEx_PLL2_Config>
 800eca6:	4603      	mov	r3, r0
 800eca8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ecaa:	e00c      	b.n	800ecc6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	3324      	adds	r3, #36	; 0x24
 800ecb0:	2102      	movs	r1, #2
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f001 fa0e 	bl	80100d4 <RCCEx_PLL3_Config>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ecbc:	e003      	b.n	800ecc6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	75fb      	strb	r3, [r7, #23]
      break;
 800ecc2:	e000      	b.n	800ecc6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800ecc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ecc6:	7dfb      	ldrb	r3, [r7, #23]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d10a      	bne.n	800ece2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800eccc:	4b22      	ldr	r3, [pc, #136]	; (800ed58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ecce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ecda:	491f      	ldr	r1, [pc, #124]	; (800ed58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ecdc:	4313      	orrs	r3, r2
 800ecde:	658b      	str	r3, [r1, #88]	; 0x58
 800ece0:	e001      	b.n	800ece6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ece2:	7dfb      	ldrb	r3, [r7, #23]
 800ece4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d036      	beq.n	800ed60 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ecf8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ecfc:	d01c      	beq.n	800ed38 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800ecfe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ed02:	d816      	bhi.n	800ed32 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ed04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ed08:	d003      	beq.n	800ed12 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800ed0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ed0e:	d007      	beq.n	800ed20 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800ed10:	e00f      	b.n	800ed32 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed12:	4b11      	ldr	r3, [pc, #68]	; (800ed58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ed14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed16:	4a10      	ldr	r2, [pc, #64]	; (800ed58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ed18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ed1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800ed1e:	e00c      	b.n	800ed3a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	3324      	adds	r3, #36	; 0x24
 800ed24:	2101      	movs	r1, #1
 800ed26:	4618      	mov	r0, r3
 800ed28:	f001 f9d4 	bl	80100d4 <RCCEx_PLL3_Config>
 800ed2c:	4603      	mov	r3, r0
 800ed2e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800ed30:	e003      	b.n	800ed3a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ed32:	2301      	movs	r3, #1
 800ed34:	75fb      	strb	r3, [r7, #23]
      break;
 800ed36:	e000      	b.n	800ed3a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800ed38:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ed3a:	7dfb      	ldrb	r3, [r7, #23]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d10d      	bne.n	800ed5c <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ed40:	4b05      	ldr	r3, [pc, #20]	; (800ed58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ed42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ed4e:	4902      	ldr	r1, [pc, #8]	; (800ed58 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ed50:	4313      	orrs	r3, r2
 800ed52:	654b      	str	r3, [r1, #84]	; 0x54
 800ed54:	e004      	b.n	800ed60 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800ed56:	bf00      	nop
 800ed58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ed5c:	7dfb      	ldrb	r3, [r7, #23]
 800ed5e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d029      	beq.n	800edc0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d003      	beq.n	800ed7c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800ed74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed78:	d007      	beq.n	800ed8a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800ed7a:	e00f      	b.n	800ed9c <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ed7c:	4b61      	ldr	r3, [pc, #388]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ed7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed80:	4a60      	ldr	r2, [pc, #384]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ed82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ed86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ed88:	e00b      	b.n	800eda2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	3304      	adds	r3, #4
 800ed8e:	2102      	movs	r1, #2
 800ed90:	4618      	mov	r0, r3
 800ed92:	f001 f8ed 	bl	800ff70 <RCCEx_PLL2_Config>
 800ed96:	4603      	mov	r3, r0
 800ed98:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ed9a:	e002      	b.n	800eda2 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800ed9c:	2301      	movs	r3, #1
 800ed9e:	75fb      	strb	r3, [r7, #23]
      break;
 800eda0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800eda2:	7dfb      	ldrb	r3, [r7, #23]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d109      	bne.n	800edbc <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800eda8:	4b56      	ldr	r3, [pc, #344]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800edaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edb4:	4953      	ldr	r1, [pc, #332]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800edb6:	4313      	orrs	r3, r2
 800edb8:	64cb      	str	r3, [r1, #76]	; 0x4c
 800edba:	e001      	b.n	800edc0 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800edbc:	7dfb      	ldrb	r3, [r7, #23]
 800edbe:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d00a      	beq.n	800ede2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	3324      	adds	r3, #36	; 0x24
 800edd0:	2102      	movs	r1, #2
 800edd2:	4618      	mov	r0, r3
 800edd4:	f001 f97e 	bl	80100d4 <RCCEx_PLL3_Config>
 800edd8:	4603      	mov	r3, r0
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d001      	beq.n	800ede2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800edde:	2301      	movs	r3, #1
 800ede0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800edea:	2b00      	cmp	r3, #0
 800edec:	d030      	beq.n	800ee50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800edf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800edf6:	d017      	beq.n	800ee28 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800edf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800edfc:	d811      	bhi.n	800ee22 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800edfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee02:	d013      	beq.n	800ee2c <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800ee04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee08:	d80b      	bhi.n	800ee22 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d010      	beq.n	800ee30 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800ee0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee12:	d106      	bne.n	800ee22 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ee14:	4b3b      	ldr	r3, [pc, #236]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ee16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee18:	4a3a      	ldr	r2, [pc, #232]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ee1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ee1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800ee20:	e007      	b.n	800ee32 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ee22:	2301      	movs	r3, #1
 800ee24:	75fb      	strb	r3, [r7, #23]
      break;
 800ee26:	e004      	b.n	800ee32 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800ee28:	bf00      	nop
 800ee2a:	e002      	b.n	800ee32 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800ee2c:	bf00      	nop
 800ee2e:	e000      	b.n	800ee32 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800ee30:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ee32:	7dfb      	ldrb	r3, [r7, #23]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d109      	bne.n	800ee4c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ee38:	4b32      	ldr	r3, [pc, #200]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ee3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ee44:	492f      	ldr	r1, [pc, #188]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ee46:	4313      	orrs	r3, r2
 800ee48:	654b      	str	r3, [r1, #84]	; 0x54
 800ee4a:	e001      	b.n	800ee50 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ee4c:	7dfb      	ldrb	r3, [r7, #23]
 800ee4e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d008      	beq.n	800ee6e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ee5c:	4b29      	ldr	r3, [pc, #164]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ee5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee68:	4926      	ldr	r1, [pc, #152]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ee6a:	4313      	orrs	r3, r2
 800ee6c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d008      	beq.n	800ee8c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ee7a:	4b22      	ldr	r3, [pc, #136]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ee7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee7e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee86:	491f      	ldr	r1, [pc, #124]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ee88:	4313      	orrs	r3, r2
 800ee8a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d00d      	beq.n	800eeb4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ee98:	4b1a      	ldr	r3, [pc, #104]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ee9a:	691b      	ldr	r3, [r3, #16]
 800ee9c:	4a19      	ldr	r2, [pc, #100]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ee9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800eea2:	6113      	str	r3, [r2, #16]
 800eea4:	4b17      	ldr	r3, [pc, #92]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800eea6:	691a      	ldr	r2, [r3, #16]
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800eeae:	4915      	ldr	r1, [pc, #84]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800eeb0:	4313      	orrs	r3, r2
 800eeb2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	da08      	bge.n	800eece <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800eebc:	4b11      	ldr	r3, [pc, #68]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800eebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eec0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eec8:	490e      	ldr	r1, [pc, #56]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800eeca:	4313      	orrs	r3, r2
 800eecc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d009      	beq.n	800eeee <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800eeda:	4b0a      	ldr	r3, [pc, #40]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800eedc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eede:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eee8:	4906      	ldr	r1, [pc, #24]	; (800ef04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800eeea:	4313      	orrs	r3, r2
 800eeec:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800eeee:	7dbb      	ldrb	r3, [r7, #22]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d101      	bne.n	800eef8 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800eef4:	2300      	movs	r3, #0
 800eef6:	e000      	b.n	800eefa <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800eef8:	2301      	movs	r3, #1
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	3718      	adds	r7, #24
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}
 800ef02:	bf00      	nop
 800ef04:	58024400 	.word	0x58024400

0800ef08 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b090      	sub	sp, #64	; 0x40
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef16:	f040 8089 	bne.w	800f02c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800ef1a:	4b95      	ldr	r3, [pc, #596]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ef1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef1e:	f003 0307 	and.w	r3, r3, #7
 800ef22:	633b      	str	r3, [r7, #48]	; 0x30
 800ef24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef26:	2b04      	cmp	r3, #4
 800ef28:	d87d      	bhi.n	800f026 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800ef2a:	a201      	add	r2, pc, #4	; (adr r2, 800ef30 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800ef2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef30:	0800ef45 	.word	0x0800ef45
 800ef34:	0800ef69 	.word	0x0800ef69
 800ef38:	0800ef8d 	.word	0x0800ef8d
 800ef3c:	0800f021 	.word	0x0800f021
 800ef40:	0800efb1 	.word	0x0800efb1

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ef44:	4b8a      	ldr	r3, [pc, #552]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ef50:	d107      	bne.n	800ef62 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ef52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ef56:	4618      	mov	r0, r3
 800ef58:	f000 feb8 	bl	800fccc <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800ef5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef5e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ef60:	e3ed      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ef62:	2300      	movs	r3, #0
 800ef64:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ef66:	e3ea      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ef68:	4b81      	ldr	r3, [pc, #516]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ef70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ef74:	d107      	bne.n	800ef86 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ef76:	f107 0318 	add.w	r3, r7, #24
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f000 fbfe 	bl	800f77c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ef80:	69bb      	ldr	r3, [r7, #24]
 800ef82:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ef84:	e3db      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ef86:	2300      	movs	r3, #0
 800ef88:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ef8a:	e3d8      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ef8c:	4b78      	ldr	r3, [pc, #480]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ef94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ef98:	d107      	bne.n	800efaa <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ef9a:	f107 030c 	add.w	r3, r7, #12
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f000 fd40 	bl	800fa24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800efa8:	e3c9      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800efaa:	2300      	movs	r3, #0
 800efac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800efae:	e3c6      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800efb0:	4b6f      	ldr	r3, [pc, #444]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800efb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800efb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800efb8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800efba:	4b6d      	ldr	r3, [pc, #436]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f003 0304 	and.w	r3, r3, #4
 800efc2:	2b04      	cmp	r3, #4
 800efc4:	d10c      	bne.n	800efe0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800efc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d109      	bne.n	800efe0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800efcc:	4b68      	ldr	r3, [pc, #416]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	08db      	lsrs	r3, r3, #3
 800efd2:	f003 0303 	and.w	r3, r3, #3
 800efd6:	4a67      	ldr	r2, [pc, #412]	; (800f174 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800efd8:	fa22 f303 	lsr.w	r3, r2, r3
 800efdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800efde:	e01e      	b.n	800f01e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800efe0:	4b63      	ldr	r3, [pc, #396]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800efec:	d106      	bne.n	800effc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800efee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eff0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eff4:	d102      	bne.n	800effc <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800eff6:	4b60      	ldr	r3, [pc, #384]	; (800f178 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800effa:	e010      	b.n	800f01e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800effc:	4b5c      	ldr	r3, [pc, #368]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f004:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f008:	d106      	bne.n	800f018 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800f00a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f00c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f010:	d102      	bne.n	800f018 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f012:	4b5a      	ldr	r3, [pc, #360]	; (800f17c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800f014:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f016:	e002      	b.n	800f01e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f018:	2300      	movs	r3, #0
 800f01a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f01c:	e38f      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800f01e:	e38e      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800f020:	4b57      	ldr	r3, [pc, #348]	; (800f180 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800f022:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f024:	e38b      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800f026:	2300      	movs	r3, #0
 800f028:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f02a:	e388      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f032:	f040 80a7 	bne.w	800f184 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800f036:	4b4e      	ldr	r3, [pc, #312]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f03a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800f03e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800f040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f042:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f046:	d054      	beq.n	800f0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800f048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f04a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f04e:	f200 808b 	bhi.w	800f168 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800f052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f054:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f058:	f000 8083 	beq.w	800f162 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800f05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f05e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f062:	f200 8081 	bhi.w	800f168 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800f066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f06c:	d02f      	beq.n	800f0ce <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800f06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f074:	d878      	bhi.n	800f168 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800f076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d004      	beq.n	800f086 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800f07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f07e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f082:	d012      	beq.n	800f0aa <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800f084:	e070      	b.n	800f168 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f086:	4b3a      	ldr	r3, [pc, #232]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f08e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f092:	d107      	bne.n	800f0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f098:	4618      	mov	r0, r3
 800f09a:	f000 fe17 	bl	800fccc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f0a2:	e34c      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f0a8:	e349      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f0aa:	4b31      	ldr	r3, [pc, #196]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f0b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f0b6:	d107      	bne.n	800f0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0b8:	f107 0318 	add.w	r3, r7, #24
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f000 fb5d 	bl	800f77c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f0c2:	69bb      	ldr	r3, [r7, #24]
 800f0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f0c6:	e33a      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f0cc:	e337      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f0ce:	4b28      	ldr	r3, [pc, #160]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f0d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f0da:	d107      	bne.n	800f0ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f0dc:	f107 030c 	add.w	r3, r7, #12
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f000 fc9f 	bl	800fa24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f0ea:	e328      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f0f0:	e325      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f0f2:	4b1f      	ldr	r3, [pc, #124]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f0f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f0f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f0fa:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f0fc:	4b1c      	ldr	r3, [pc, #112]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	f003 0304 	and.w	r3, r3, #4
 800f104:	2b04      	cmp	r3, #4
 800f106:	d10c      	bne.n	800f122 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800f108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d109      	bne.n	800f122 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f10e:	4b18      	ldr	r3, [pc, #96]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	08db      	lsrs	r3, r3, #3
 800f114:	f003 0303 	and.w	r3, r3, #3
 800f118:	4a16      	ldr	r2, [pc, #88]	; (800f174 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800f11a:	fa22 f303 	lsr.w	r3, r2, r3
 800f11e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f120:	e01e      	b.n	800f160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f122:	4b13      	ldr	r3, [pc, #76]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f12a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f12e:	d106      	bne.n	800f13e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800f130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f136:	d102      	bne.n	800f13e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f138:	4b0f      	ldr	r3, [pc, #60]	; (800f178 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800f13a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f13c:	e010      	b.n	800f160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f13e:	4b0c      	ldr	r3, [pc, #48]	; (800f170 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f146:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f14a:	d106      	bne.n	800f15a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800f14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f14e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f152:	d102      	bne.n	800f15a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f154:	4b09      	ldr	r3, [pc, #36]	; (800f17c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800f156:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f158:	e002      	b.n	800f160 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f15a:	2300      	movs	r3, #0
 800f15c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f15e:	e2ee      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800f160:	e2ed      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800f162:	4b07      	ldr	r3, [pc, #28]	; (800f180 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800f164:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f166:	e2ea      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800f168:	2300      	movs	r3, #0
 800f16a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f16c:	e2e7      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800f16e:	bf00      	nop
 800f170:	58024400 	.word	0x58024400
 800f174:	03d09000 	.word	0x03d09000
 800f178:	003d0900 	.word	0x003d0900
 800f17c:	017d7840 	.word	0x017d7840
 800f180:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f18a:	f040 809c 	bne.w	800f2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800f18e:	4b9e      	ldr	r3, [pc, #632]	; (800f408 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f192:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800f196:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800f198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f19a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f19e:	d054      	beq.n	800f24a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800f1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f1a6:	f200 808b 	bhi.w	800f2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800f1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f1b0:	f000 8083 	beq.w	800f2ba <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800f1b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f1ba:	f200 8081 	bhi.w	800f2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800f1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f1c4:	d02f      	beq.n	800f226 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800f1c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f1cc:	d878      	bhi.n	800f2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800f1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d004      	beq.n	800f1de <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800f1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f1da:	d012      	beq.n	800f202 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800f1dc:	e070      	b.n	800f2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f1de:	4b8a      	ldr	r3, [pc, #552]	; (800f408 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f1e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f1ea:	d107      	bne.n	800f1fc <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f1ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f000 fd6b 	bl	800fccc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f1fa:	e2a0      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f200:	e29d      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f202:	4b81      	ldr	r3, [pc, #516]	; (800f408 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f20a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f20e:	d107      	bne.n	800f220 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f210:	f107 0318 	add.w	r3, r7, #24
 800f214:	4618      	mov	r0, r3
 800f216:	f000 fab1 	bl	800f77c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f21a:	69bb      	ldr	r3, [r7, #24]
 800f21c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800f21e:	e28e      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800f220:	2300      	movs	r3, #0
 800f222:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f224:	e28b      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f226:	4b78      	ldr	r3, [pc, #480]	; (800f408 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f22e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f232:	d107      	bne.n	800f244 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f234:	f107 030c 	add.w	r3, r7, #12
 800f238:	4618      	mov	r0, r3
 800f23a:	f000 fbf3 	bl	800fa24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f242:	e27c      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800f244:	2300      	movs	r3, #0
 800f246:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f248:	e279      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f24a:	4b6f      	ldr	r3, [pc, #444]	; (800f408 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f24c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f24e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f252:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f254:	4b6c      	ldr	r3, [pc, #432]	; (800f408 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	f003 0304 	and.w	r3, r3, #4
 800f25c:	2b04      	cmp	r3, #4
 800f25e:	d10c      	bne.n	800f27a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800f260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f262:	2b00      	cmp	r3, #0
 800f264:	d109      	bne.n	800f27a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f266:	4b68      	ldr	r3, [pc, #416]	; (800f408 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	08db      	lsrs	r3, r3, #3
 800f26c:	f003 0303 	and.w	r3, r3, #3
 800f270:	4a66      	ldr	r2, [pc, #408]	; (800f40c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800f272:	fa22 f303 	lsr.w	r3, r2, r3
 800f276:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f278:	e01e      	b.n	800f2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f27a:	4b63      	ldr	r3, [pc, #396]	; (800f408 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f286:	d106      	bne.n	800f296 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800f288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f28a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f28e:	d102      	bne.n	800f296 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f290:	4b5f      	ldr	r3, [pc, #380]	; (800f410 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800f292:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f294:	e010      	b.n	800f2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f296:	4b5c      	ldr	r3, [pc, #368]	; (800f408 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f29e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f2a2:	d106      	bne.n	800f2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800f2a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f2aa:	d102      	bne.n	800f2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f2ac:	4b59      	ldr	r3, [pc, #356]	; (800f414 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800f2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2b0:	e002      	b.n	800f2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f2b6:	e242      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800f2b8:	e241      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800f2ba:	4b57      	ldr	r3, [pc, #348]	; (800f418 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800f2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f2be:	e23e      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f2c4:	e23b      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2cc:	f040 80a6 	bne.w	800f41c <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800f2d0:	4b4d      	ldr	r3, [pc, #308]	; (800f408 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f2d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2d4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f2d8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f2e0:	d054      	beq.n	800f38c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800f2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f2e8:	f200 808b 	bhi.w	800f402 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800f2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f2f2:	f000 8083 	beq.w	800f3fc <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800f2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f2fc:	f200 8081 	bhi.w	800f402 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800f300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f306:	d02f      	beq.n	800f368 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800f308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f30a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f30e:	d878      	bhi.n	800f402 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800f310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f312:	2b00      	cmp	r3, #0
 800f314:	d004      	beq.n	800f320 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800f316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f31c:	d012      	beq.n	800f344 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800f31e:	e070      	b.n	800f402 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f320:	4b39      	ldr	r3, [pc, #228]	; (800f408 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f328:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f32c:	d107      	bne.n	800f33e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f32e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f332:	4618      	mov	r0, r3
 800f334:	f000 fcca 	bl	800fccc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f33a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f33c:	e1ff      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800f33e:	2300      	movs	r3, #0
 800f340:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f342:	e1fc      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f344:	4b30      	ldr	r3, [pc, #192]	; (800f408 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f34c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f350:	d107      	bne.n	800f362 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f352:	f107 0318 	add.w	r3, r7, #24
 800f356:	4618      	mov	r0, r3
 800f358:	f000 fa10 	bl	800f77c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f35c:	69bb      	ldr	r3, [r7, #24]
 800f35e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f360:	e1ed      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800f362:	2300      	movs	r3, #0
 800f364:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f366:	e1ea      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f368:	4b27      	ldr	r3, [pc, #156]	; (800f408 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f374:	d107      	bne.n	800f386 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f376:	f107 030c 	add.w	r3, r7, #12
 800f37a:	4618      	mov	r0, r3
 800f37c:	f000 fb52 	bl	800fa24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f384:	e1db      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800f386:	2300      	movs	r3, #0
 800f388:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f38a:	e1d8      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f38c:	4b1e      	ldr	r3, [pc, #120]	; (800f408 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f38e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f390:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f394:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f396:	4b1c      	ldr	r3, [pc, #112]	; (800f408 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	f003 0304 	and.w	r3, r3, #4
 800f39e:	2b04      	cmp	r3, #4
 800f3a0:	d10c      	bne.n	800f3bc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800f3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d109      	bne.n	800f3bc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f3a8:	4b17      	ldr	r3, [pc, #92]	; (800f408 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	08db      	lsrs	r3, r3, #3
 800f3ae:	f003 0303 	and.w	r3, r3, #3
 800f3b2:	4a16      	ldr	r2, [pc, #88]	; (800f40c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800f3b4:	fa22 f303 	lsr.w	r3, r2, r3
 800f3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3ba:	e01e      	b.n	800f3fa <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f3bc:	4b12      	ldr	r3, [pc, #72]	; (800f408 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3c8:	d106      	bne.n	800f3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800f3ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f3d0:	d102      	bne.n	800f3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f3d2:	4b0f      	ldr	r3, [pc, #60]	; (800f410 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800f3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3d6:	e010      	b.n	800f3fa <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f3d8:	4b0b      	ldr	r3, [pc, #44]	; (800f408 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f3e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f3e4:	d106      	bne.n	800f3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800f3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f3ec:	d102      	bne.n	800f3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f3ee:	4b09      	ldr	r3, [pc, #36]	; (800f414 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800f3f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f3f2:	e002      	b.n	800f3fa <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f3f8:	e1a1      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800f3fa:	e1a0      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800f3fc:	4b06      	ldr	r3, [pc, #24]	; (800f418 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800f3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f400:	e19d      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800f402:	2300      	movs	r3, #0
 800f404:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f406:	e19a      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800f408:	58024400 	.word	0x58024400
 800f40c:	03d09000 	.word	0x03d09000
 800f410:	003d0900 	.word	0x003d0900
 800f414:	017d7840 	.word	0x017d7840
 800f418:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f422:	d173      	bne.n	800f50c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800f424:	4b9a      	ldr	r3, [pc, #616]	; (800f690 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f428:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f42c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f430:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f434:	d02f      	beq.n	800f496 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800f436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f438:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f43c:	d863      	bhi.n	800f506 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800f43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f440:	2b00      	cmp	r3, #0
 800f442:	d004      	beq.n	800f44e <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800f444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f44a:	d012      	beq.n	800f472 <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800f44c:	e05b      	b.n	800f506 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f44e:	4b90      	ldr	r3, [pc, #576]	; (800f690 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f456:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f45a:	d107      	bne.n	800f46c <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f45c:	f107 0318 	add.w	r3, r7, #24
 800f460:	4618      	mov	r0, r3
 800f462:	f000 f98b 	bl	800f77c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f466:	69bb      	ldr	r3, [r7, #24]
 800f468:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f46a:	e168      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800f46c:	2300      	movs	r3, #0
 800f46e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f470:	e165      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f472:	4b87      	ldr	r3, [pc, #540]	; (800f690 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f47a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f47e:	d107      	bne.n	800f490 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f480:	f107 030c 	add.w	r3, r7, #12
 800f484:	4618      	mov	r0, r3
 800f486:	f000 facd 	bl	800fa24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800f48a:	697b      	ldr	r3, [r7, #20]
 800f48c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f48e:	e156      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800f490:	2300      	movs	r3, #0
 800f492:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f494:	e153      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f496:	4b7e      	ldr	r3, [pc, #504]	; (800f690 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f49a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f49e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f4a0:	4b7b      	ldr	r3, [pc, #492]	; (800f690 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	f003 0304 	and.w	r3, r3, #4
 800f4a8:	2b04      	cmp	r3, #4
 800f4aa:	d10c      	bne.n	800f4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 800f4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d109      	bne.n	800f4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f4b2:	4b77      	ldr	r3, [pc, #476]	; (800f690 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	08db      	lsrs	r3, r3, #3
 800f4b8:	f003 0303 	and.w	r3, r3, #3
 800f4bc:	4a75      	ldr	r2, [pc, #468]	; (800f694 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f4be:	fa22 f303 	lsr.w	r3, r2, r3
 800f4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f4c4:	e01e      	b.n	800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f4c6:	4b72      	ldr	r3, [pc, #456]	; (800f690 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f4ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f4d2:	d106      	bne.n	800f4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800f4d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f4da:	d102      	bne.n	800f4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f4dc:	4b6e      	ldr	r3, [pc, #440]	; (800f698 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800f4de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f4e0:	e010      	b.n	800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f4e2:	4b6b      	ldr	r3, [pc, #428]	; (800f690 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f4ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f4ee:	d106      	bne.n	800f4fe <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800f4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f4f6:	d102      	bne.n	800f4fe <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f4f8:	4b68      	ldr	r3, [pc, #416]	; (800f69c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800f4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f4fc:	e002      	b.n	800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f4fe:	2300      	movs	r3, #0
 800f500:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f502:	e11c      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800f504:	e11b      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800f506:	2300      	movs	r3, #0
 800f508:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f50a:	e118      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f512:	d133      	bne.n	800f57c <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800f514:	4b5e      	ldr	r3, [pc, #376]	; (800f690 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f516:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f51c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f520:	2b00      	cmp	r3, #0
 800f522:	d004      	beq.n	800f52e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800f524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f52a:	d012      	beq.n	800f552 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800f52c:	e023      	b.n	800f576 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f52e:	4b58      	ldr	r3, [pc, #352]	; (800f690 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f536:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f53a:	d107      	bne.n	800f54c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f53c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f540:	4618      	mov	r0, r3
 800f542:	f000 fbc3 	bl	800fccc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f548:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f54a:	e0f8      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f54c:	2300      	movs	r3, #0
 800f54e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f550:	e0f5      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f552:	4b4f      	ldr	r3, [pc, #316]	; (800f690 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f55a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f55e:	d107      	bne.n	800f570 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f560:	f107 0318 	add.w	r3, r7, #24
 800f564:	4618      	mov	r0, r3
 800f566:	f000 f909 	bl	800f77c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f56a:	6a3b      	ldr	r3, [r7, #32]
 800f56c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f56e:	e0e6      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f570:	2300      	movs	r3, #0
 800f572:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f574:	e0e3      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800f576:	2300      	movs	r3, #0
 800f578:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f57a:	e0e0      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f582:	f040 808d 	bne.w	800f6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800f586:	4b42      	ldr	r3, [pc, #264]	; (800f690 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f58a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800f58e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f592:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f596:	d06b      	beq.n	800f670 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800f598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f59a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f59e:	d874      	bhi.n	800f68a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800f5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5a6:	d056      	beq.n	800f656 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800f5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f5ae:	d86c      	bhi.n	800f68a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800f5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f5b6:	d03b      	beq.n	800f630 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800f5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f5be:	d864      	bhi.n	800f68a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800f5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f5c6:	d021      	beq.n	800f60c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800f5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f5ce:	d85c      	bhi.n	800f68a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800f5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d004      	beq.n	800f5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800f5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f5dc:	d004      	beq.n	800f5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800f5de:	e054      	b.n	800f68a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800f5e0:	f000 f8b6 	bl	800f750 <HAL_RCCEx_GetD3PCLK1Freq>
 800f5e4:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800f5e6:	e0aa      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f5e8:	4b29      	ldr	r3, [pc, #164]	; (800f690 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f5f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f5f4:	d107      	bne.n	800f606 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5f6:	f107 0318 	add.w	r3, r7, #24
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f000 f8be 	bl	800f77c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f600:	69fb      	ldr	r3, [r7, #28]
 800f602:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f604:	e09b      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f606:	2300      	movs	r3, #0
 800f608:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f60a:	e098      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f60c:	4b20      	ldr	r3, [pc, #128]	; (800f690 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f614:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f618:	d107      	bne.n	800f62a <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f61a:	f107 030c 	add.w	r3, r7, #12
 800f61e:	4618      	mov	r0, r3
 800f620:	f000 fa00 	bl	800fa24 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f628:	e089      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f62a:	2300      	movs	r3, #0
 800f62c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f62e:	e086      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f630:	4b17      	ldr	r3, [pc, #92]	; (800f690 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	f003 0304 	and.w	r3, r3, #4
 800f638:	2b04      	cmp	r3, #4
 800f63a:	d109      	bne.n	800f650 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f63c:	4b14      	ldr	r3, [pc, #80]	; (800f690 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	08db      	lsrs	r3, r3, #3
 800f642:	f003 0303 	and.w	r3, r3, #3
 800f646:	4a13      	ldr	r2, [pc, #76]	; (800f694 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f648:	fa22 f303 	lsr.w	r3, r2, r3
 800f64c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f64e:	e076      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f650:	2300      	movs	r3, #0
 800f652:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f654:	e073      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f656:	4b0e      	ldr	r3, [pc, #56]	; (800f690 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f65e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f662:	d102      	bne.n	800f66a <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 800f664:	4b0c      	ldr	r3, [pc, #48]	; (800f698 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800f666:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f668:	e069      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800f66a:	2300      	movs	r3, #0
 800f66c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f66e:	e066      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f670:	4b07      	ldr	r3, [pc, #28]	; (800f690 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f678:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f67c:	d102      	bne.n	800f684 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800f67e:	4b07      	ldr	r3, [pc, #28]	; (800f69c <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800f680:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f682:	e05c      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f684:	2300      	movs	r3, #0
 800f686:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f688:	e059      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800f68a:	2300      	movs	r3, #0
 800f68c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f68e:	e056      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800f690:	58024400 	.word	0x58024400
 800f694:	03d09000 	.word	0x03d09000
 800f698:	003d0900 	.word	0x003d0900
 800f69c:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f6a6:	d148      	bne.n	800f73a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800f6a8:	4b27      	ldr	r3, [pc, #156]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f6aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f6ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f6b0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f6b8:	d02a      	beq.n	800f710 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800f6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f6c0:	d838      	bhi.n	800f734 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800f6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d004      	beq.n	800f6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800f6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f6ce:	d00d      	beq.n	800f6ec <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800f6d0:	e030      	b.n	800f734 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f6d2:	4b1d      	ldr	r3, [pc, #116]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f6da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f6de:	d102      	bne.n	800f6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800f6e0:	4b1a      	ldr	r3, [pc, #104]	; (800f74c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800f6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f6e4:	e02b      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f6ea:	e028      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f6ec:	4b16      	ldr	r3, [pc, #88]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f6f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f6f8:	d107      	bne.n	800f70a <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f6fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6fe:	4618      	mov	r0, r3
 800f700:	f000 fae4 	bl	800fccc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f706:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f708:	e019      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f70a:	2300      	movs	r3, #0
 800f70c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f70e:	e016      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f710:	4b0d      	ldr	r3, [pc, #52]	; (800f748 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f718:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f71c:	d107      	bne.n	800f72e <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f71e:	f107 0318 	add.w	r3, r7, #24
 800f722:	4618      	mov	r0, r3
 800f724:	f000 f82a 	bl	800f77c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f728:	69fb      	ldr	r3, [r7, #28]
 800f72a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f72c:	e007      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f72e:	2300      	movs	r3, #0
 800f730:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f732:	e004      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800f734:	2300      	movs	r3, #0
 800f736:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f738:	e001      	b.n	800f73e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800f73a:	2300      	movs	r3, #0
 800f73c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800f73e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f740:	4618      	mov	r0, r3
 800f742:	3740      	adds	r7, #64	; 0x40
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}
 800f748:	58024400 	.word	0x58024400
 800f74c:	017d7840 	.word	0x017d7840

0800f750 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800f754:	f7fe fc66 	bl	800e024 <HAL_RCC_GetHCLKFreq>
 800f758:	4602      	mov	r2, r0
 800f75a:	4b06      	ldr	r3, [pc, #24]	; (800f774 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f75c:	6a1b      	ldr	r3, [r3, #32]
 800f75e:	091b      	lsrs	r3, r3, #4
 800f760:	f003 0307 	and.w	r3, r3, #7
 800f764:	4904      	ldr	r1, [pc, #16]	; (800f778 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f766:	5ccb      	ldrb	r3, [r1, r3]
 800f768:	f003 031f 	and.w	r3, r3, #31
 800f76c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800f770:	4618      	mov	r0, r3
 800f772:	bd80      	pop	{r7, pc}
 800f774:	58024400 	.word	0x58024400
 800f778:	08018550 	.word	0x08018550

0800f77c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800f77c:	b480      	push	{r7}
 800f77e:	b089      	sub	sp, #36	; 0x24
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f784:	4ba1      	ldr	r3, [pc, #644]	; (800fa0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f788:	f003 0303 	and.w	r3, r3, #3
 800f78c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800f78e:	4b9f      	ldr	r3, [pc, #636]	; (800fa0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f792:	0b1b      	lsrs	r3, r3, #12
 800f794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f798:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f79a:	4b9c      	ldr	r3, [pc, #624]	; (800fa0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f79c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f79e:	091b      	lsrs	r3, r3, #4
 800f7a0:	f003 0301 	and.w	r3, r3, #1
 800f7a4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800f7a6:	4b99      	ldr	r3, [pc, #612]	; (800fa0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7aa:	08db      	lsrs	r3, r3, #3
 800f7ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f7b0:	693a      	ldr	r2, [r7, #16]
 800f7b2:	fb02 f303 	mul.w	r3, r2, r3
 800f7b6:	ee07 3a90 	vmov	s15, r3
 800f7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	f000 8111 	beq.w	800f9ec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f7ca:	69bb      	ldr	r3, [r7, #24]
 800f7cc:	2b02      	cmp	r3, #2
 800f7ce:	f000 8083 	beq.w	800f8d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f7d2:	69bb      	ldr	r3, [r7, #24]
 800f7d4:	2b02      	cmp	r3, #2
 800f7d6:	f200 80a1 	bhi.w	800f91c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f7da:	69bb      	ldr	r3, [r7, #24]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d003      	beq.n	800f7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f7e0:	69bb      	ldr	r3, [r7, #24]
 800f7e2:	2b01      	cmp	r3, #1
 800f7e4:	d056      	beq.n	800f894 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f7e6:	e099      	b.n	800f91c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f7e8:	4b88      	ldr	r3, [pc, #544]	; (800fa0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	f003 0320 	and.w	r3, r3, #32
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d02d      	beq.n	800f850 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f7f4:	4b85      	ldr	r3, [pc, #532]	; (800fa0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	08db      	lsrs	r3, r3, #3
 800f7fa:	f003 0303 	and.w	r3, r3, #3
 800f7fe:	4a84      	ldr	r2, [pc, #528]	; (800fa10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f800:	fa22 f303 	lsr.w	r3, r2, r3
 800f804:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	ee07 3a90 	vmov	s15, r3
 800f80c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f810:	697b      	ldr	r3, [r7, #20]
 800f812:	ee07 3a90 	vmov	s15, r3
 800f816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f81a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f81e:	4b7b      	ldr	r3, [pc, #492]	; (800fa0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f826:	ee07 3a90 	vmov	s15, r3
 800f82a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f82e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f832:	eddf 5a78 	vldr	s11, [pc, #480]	; 800fa14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f83a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f83e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f84a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800f84e:	e087      	b.n	800f960 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	ee07 3a90 	vmov	s15, r3
 800f856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f85a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800fa18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f85e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f862:	4b6a      	ldr	r3, [pc, #424]	; (800fa0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f86a:	ee07 3a90 	vmov	s15, r3
 800f86e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f872:	ed97 6a03 	vldr	s12, [r7, #12]
 800f876:	eddf 5a67 	vldr	s11, [pc, #412]	; 800fa14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f87a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f87e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f88a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f88e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f892:	e065      	b.n	800f960 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	ee07 3a90 	vmov	s15, r3
 800f89a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f89e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800fa1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f8a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f8a6:	4b59      	ldr	r3, [pc, #356]	; (800fa0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8ae:	ee07 3a90 	vmov	s15, r3
 800f8b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f8b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800f8ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 800fa14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f8be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f8c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f8c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f8ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f8ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f8d6:	e043      	b.n	800f960 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	ee07 3a90 	vmov	s15, r3
 800f8de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800fa20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f8e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f8ea:	4b48      	ldr	r3, [pc, #288]	; (800fa0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8f2:	ee07 3a90 	vmov	s15, r3
 800f8f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f8fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800f8fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800fa14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f90a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f90e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f912:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f916:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f91a:	e021      	b.n	800f960 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	ee07 3a90 	vmov	s15, r3
 800f922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f926:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800fa1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f92a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f92e:	4b37      	ldr	r3, [pc, #220]	; (800fa0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f936:	ee07 3a90 	vmov	s15, r3
 800f93a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f93e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f942:	eddf 5a34 	vldr	s11, [pc, #208]	; 800fa14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f94a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f94e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f95a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f95e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800f960:	4b2a      	ldr	r3, [pc, #168]	; (800fa0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f964:	0a5b      	lsrs	r3, r3, #9
 800f966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f96a:	ee07 3a90 	vmov	s15, r3
 800f96e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f972:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f976:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f97a:	edd7 6a07 	vldr	s13, [r7, #28]
 800f97e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f986:	ee17 2a90 	vmov	r2, s15
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800f98e:	4b1f      	ldr	r3, [pc, #124]	; (800fa0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f992:	0c1b      	lsrs	r3, r3, #16
 800f994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f998:	ee07 3a90 	vmov	s15, r3
 800f99c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f9a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f9a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800f9ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f9b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f9b4:	ee17 2a90 	vmov	r2, s15
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800f9bc:	4b13      	ldr	r3, [pc, #76]	; (800fa0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9c0:	0e1b      	lsrs	r3, r3, #24
 800f9c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9c6:	ee07 3a90 	vmov	s15, r3
 800f9ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f9d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f9d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800f9da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f9de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f9e2:	ee17 2a90 	vmov	r2, s15
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f9ea:	e008      	b.n	800f9fe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	2200      	movs	r2, #0
 800f9f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	2200      	movs	r2, #0
 800f9fc:	609a      	str	r2, [r3, #8]
}
 800f9fe:	bf00      	nop
 800fa00:	3724      	adds	r7, #36	; 0x24
 800fa02:	46bd      	mov	sp, r7
 800fa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa08:	4770      	bx	lr
 800fa0a:	bf00      	nop
 800fa0c:	58024400 	.word	0x58024400
 800fa10:	03d09000 	.word	0x03d09000
 800fa14:	46000000 	.word	0x46000000
 800fa18:	4c742400 	.word	0x4c742400
 800fa1c:	4a742400 	.word	0x4a742400
 800fa20:	4bbebc20 	.word	0x4bbebc20

0800fa24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b089      	sub	sp, #36	; 0x24
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fa2c:	4ba1      	ldr	r3, [pc, #644]	; (800fcb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa30:	f003 0303 	and.w	r3, r3, #3
 800fa34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800fa36:	4b9f      	ldr	r3, [pc, #636]	; (800fcb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa3a:	0d1b      	lsrs	r3, r3, #20
 800fa3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800fa42:	4b9c      	ldr	r3, [pc, #624]	; (800fcb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa46:	0a1b      	lsrs	r3, r3, #8
 800fa48:	f003 0301 	and.w	r3, r3, #1
 800fa4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800fa4e:	4b99      	ldr	r3, [pc, #612]	; (800fcb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa52:	08db      	lsrs	r3, r3, #3
 800fa54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fa58:	693a      	ldr	r2, [r7, #16]
 800fa5a:	fb02 f303 	mul.w	r3, r2, r3
 800fa5e:	ee07 3a90 	vmov	s15, r3
 800fa62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800fa6a:	697b      	ldr	r3, [r7, #20]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	f000 8111 	beq.w	800fc94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800fa72:	69bb      	ldr	r3, [r7, #24]
 800fa74:	2b02      	cmp	r3, #2
 800fa76:	f000 8083 	beq.w	800fb80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800fa7a:	69bb      	ldr	r3, [r7, #24]
 800fa7c:	2b02      	cmp	r3, #2
 800fa7e:	f200 80a1 	bhi.w	800fbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800fa82:	69bb      	ldr	r3, [r7, #24]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d003      	beq.n	800fa90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800fa88:	69bb      	ldr	r3, [r7, #24]
 800fa8a:	2b01      	cmp	r3, #1
 800fa8c:	d056      	beq.n	800fb3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800fa8e:	e099      	b.n	800fbc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fa90:	4b88      	ldr	r3, [pc, #544]	; (800fcb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	f003 0320 	and.w	r3, r3, #32
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d02d      	beq.n	800faf8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fa9c:	4b85      	ldr	r3, [pc, #532]	; (800fcb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	08db      	lsrs	r3, r3, #3
 800faa2:	f003 0303 	and.w	r3, r3, #3
 800faa6:	4a84      	ldr	r2, [pc, #528]	; (800fcb8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800faa8:	fa22 f303 	lsr.w	r3, r2, r3
 800faac:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	ee07 3a90 	vmov	s15, r3
 800fab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	ee07 3a90 	vmov	s15, r3
 800fabe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fac6:	4b7b      	ldr	r3, [pc, #492]	; (800fcb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800faca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800face:	ee07 3a90 	vmov	s15, r3
 800fad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fad6:	ed97 6a03 	vldr	s12, [r7, #12]
 800fada:	eddf 5a78 	vldr	s11, [pc, #480]	; 800fcbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800faea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800faee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800faf2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800faf6:	e087      	b.n	800fc08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	ee07 3a90 	vmov	s15, r3
 800fafe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800fcc0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800fb06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb0a:	4b6a      	ldr	r3, [pc, #424]	; (800fcb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb12:	ee07 3a90 	vmov	s15, r3
 800fb16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800fcbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fb22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fb2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fb3a:	e065      	b.n	800fc08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800fb3c:	697b      	ldr	r3, [r7, #20]
 800fb3e:	ee07 3a90 	vmov	s15, r3
 800fb42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800fcc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fb4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb4e:	4b59      	ldr	r3, [pc, #356]	; (800fcb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb56:	ee07 3a90 	vmov	s15, r3
 800fb5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb62:	eddf 5a56 	vldr	s11, [pc, #344]	; 800fcbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fb66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fb72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fb7e:	e043      	b.n	800fc08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	ee07 3a90 	vmov	s15, r3
 800fb86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800fcc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800fb8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb92:	4b48      	ldr	r3, [pc, #288]	; (800fcb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fb94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb9a:	ee07 3a90 	vmov	s15, r3
 800fb9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fba2:	ed97 6a03 	vldr	s12, [r7, #12]
 800fba6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800fcbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fbaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fbae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fbb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fbb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fbc2:	e021      	b.n	800fc08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	ee07 3a90 	vmov	s15, r3
 800fbca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800fcc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800fbd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fbd6:	4b37      	ldr	r3, [pc, #220]	; (800fcb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fbd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbde:	ee07 3a90 	vmov	s15, r3
 800fbe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fbe6:	ed97 6a03 	vldr	s12, [r7, #12]
 800fbea:	eddf 5a34 	vldr	s11, [pc, #208]	; 800fcbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800fbee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fbf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fbf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fbfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fc06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800fc08:	4b2a      	ldr	r3, [pc, #168]	; (800fcb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fc0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc0c:	0a5b      	lsrs	r3, r3, #9
 800fc0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc12:	ee07 3a90 	vmov	s15, r3
 800fc16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fc1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fc22:	edd7 6a07 	vldr	s13, [r7, #28]
 800fc26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc2e:	ee17 2a90 	vmov	r2, s15
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800fc36:	4b1f      	ldr	r3, [pc, #124]	; (800fcb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fc38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc3a:	0c1b      	lsrs	r3, r3, #16
 800fc3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc40:	ee07 3a90 	vmov	s15, r3
 800fc44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fc4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fc50:	edd7 6a07 	vldr	s13, [r7, #28]
 800fc54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc5c:	ee17 2a90 	vmov	r2, s15
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800fc64:	4b13      	ldr	r3, [pc, #76]	; (800fcb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fc66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc68:	0e1b      	lsrs	r3, r3, #24
 800fc6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc6e:	ee07 3a90 	vmov	s15, r3
 800fc72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fc7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fc7e:	edd7 6a07 	vldr	s13, [r7, #28]
 800fc82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc8a:	ee17 2a90 	vmov	r2, s15
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800fc92:	e008      	b.n	800fca6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2200      	movs	r2, #0
 800fc98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2200      	movs	r2, #0
 800fca4:	609a      	str	r2, [r3, #8]
}
 800fca6:	bf00      	nop
 800fca8:	3724      	adds	r7, #36	; 0x24
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb0:	4770      	bx	lr
 800fcb2:	bf00      	nop
 800fcb4:	58024400 	.word	0x58024400
 800fcb8:	03d09000 	.word	0x03d09000
 800fcbc:	46000000 	.word	0x46000000
 800fcc0:	4c742400 	.word	0x4c742400
 800fcc4:	4a742400 	.word	0x4a742400
 800fcc8:	4bbebc20 	.word	0x4bbebc20

0800fccc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800fccc:	b480      	push	{r7}
 800fcce:	b089      	sub	sp, #36	; 0x24
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fcd4:	4ba0      	ldr	r3, [pc, #640]	; (800ff58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fcd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcd8:	f003 0303 	and.w	r3, r3, #3
 800fcdc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800fcde:	4b9e      	ldr	r3, [pc, #632]	; (800ff58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fce2:	091b      	lsrs	r3, r3, #4
 800fce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fce8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800fcea:	4b9b      	ldr	r3, [pc, #620]	; (800ff58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fcec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcee:	f003 0301 	and.w	r3, r3, #1
 800fcf2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800fcf4:	4b98      	ldr	r3, [pc, #608]	; (800ff58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fcf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcf8:	08db      	lsrs	r3, r3, #3
 800fcfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fcfe:	693a      	ldr	r2, [r7, #16]
 800fd00:	fb02 f303 	mul.w	r3, r2, r3
 800fd04:	ee07 3a90 	vmov	s15, r3
 800fd08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd0c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800fd10:	697b      	ldr	r3, [r7, #20]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	f000 8111 	beq.w	800ff3a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800fd18:	69bb      	ldr	r3, [r7, #24]
 800fd1a:	2b02      	cmp	r3, #2
 800fd1c:	f000 8083 	beq.w	800fe26 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800fd20:	69bb      	ldr	r3, [r7, #24]
 800fd22:	2b02      	cmp	r3, #2
 800fd24:	f200 80a1 	bhi.w	800fe6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800fd28:	69bb      	ldr	r3, [r7, #24]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d003      	beq.n	800fd36 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800fd2e:	69bb      	ldr	r3, [r7, #24]
 800fd30:	2b01      	cmp	r3, #1
 800fd32:	d056      	beq.n	800fde2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800fd34:	e099      	b.n	800fe6a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd36:	4b88      	ldr	r3, [pc, #544]	; (800ff58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	f003 0320 	and.w	r3, r3, #32
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d02d      	beq.n	800fd9e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fd42:	4b85      	ldr	r3, [pc, #532]	; (800ff58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	08db      	lsrs	r3, r3, #3
 800fd48:	f003 0303 	and.w	r3, r3, #3
 800fd4c:	4a83      	ldr	r2, [pc, #524]	; (800ff5c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800fd4e:	fa22 f303 	lsr.w	r3, r2, r3
 800fd52:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	ee07 3a90 	vmov	s15, r3
 800fd5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	ee07 3a90 	vmov	s15, r3
 800fd64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fd68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fd6c:	4b7a      	ldr	r3, [pc, #488]	; (800ff58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fd6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd74:	ee07 3a90 	vmov	s15, r3
 800fd78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fd7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800fd80:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ff60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fd84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fd88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fd8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fd90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fd94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd98:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800fd9c:	e087      	b.n	800feae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	ee07 3a90 	vmov	s15, r3
 800fda4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fda8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ff64 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fdac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fdb0:	4b69      	ldr	r3, [pc, #420]	; (800ff58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fdb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdb8:	ee07 3a90 	vmov	s15, r3
 800fdbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fdc0:	ed97 6a03 	vldr	s12, [r7, #12]
 800fdc4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ff60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fdc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fdcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fdd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fdd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fdd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fddc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fde0:	e065      	b.n	800feae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fde2:	697b      	ldr	r3, [r7, #20]
 800fde4:	ee07 3a90 	vmov	s15, r3
 800fde8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdec:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ff68 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800fdf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fdf4:	4b58      	ldr	r3, [pc, #352]	; (800ff58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fdf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdfc:	ee07 3a90 	vmov	s15, r3
 800fe00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe04:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe08:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ff60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fe0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fe24:	e043      	b.n	800feae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	ee07 3a90 	vmov	s15, r3
 800fe2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe30:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ff6c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800fe34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe38:	4b47      	ldr	r3, [pc, #284]	; (800ff58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fe3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe40:	ee07 3a90 	vmov	s15, r3
 800fe44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe48:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe4c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ff60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fe50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fe68:	e021      	b.n	800feae <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	ee07 3a90 	vmov	s15, r3
 800fe70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe74:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ff64 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fe78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe7c:	4b36      	ldr	r3, [pc, #216]	; (800ff58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fe7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe84:	ee07 3a90 	vmov	s15, r3
 800fe88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe8c:	ed97 6a03 	vldr	s12, [r7, #12]
 800fe90:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ff60 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fe94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fea0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fea4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fea8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800feac:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800feae:	4b2a      	ldr	r3, [pc, #168]	; (800ff58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800feb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feb2:	0a5b      	lsrs	r3, r3, #9
 800feb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800feb8:	ee07 3a90 	vmov	s15, r3
 800febc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fec0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fec4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fec8:	edd7 6a07 	vldr	s13, [r7, #28]
 800fecc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fed4:	ee17 2a90 	vmov	r2, s15
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800fedc:	4b1e      	ldr	r3, [pc, #120]	; (800ff58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fee0:	0c1b      	lsrs	r3, r3, #16
 800fee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fee6:	ee07 3a90 	vmov	s15, r3
 800feea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800feee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fef2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fef6:	edd7 6a07 	vldr	s13, [r7, #28]
 800fefa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fefe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff02:	ee17 2a90 	vmov	r2, s15
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800ff0a:	4b13      	ldr	r3, [pc, #76]	; (800ff58 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ff0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff0e:	0e1b      	lsrs	r3, r3, #24
 800ff10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff14:	ee07 3a90 	vmov	s15, r3
 800ff18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ff20:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ff24:	edd7 6a07 	vldr	s13, [r7, #28]
 800ff28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ff2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff30:	ee17 2a90 	vmov	r2, s15
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ff38:	e008      	b.n	800ff4c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2200      	movs	r2, #0
 800ff44:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	609a      	str	r2, [r3, #8]
}
 800ff4c:	bf00      	nop
 800ff4e:	3724      	adds	r7, #36	; 0x24
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr
 800ff58:	58024400 	.word	0x58024400
 800ff5c:	03d09000 	.word	0x03d09000
 800ff60:	46000000 	.word	0x46000000
 800ff64:	4c742400 	.word	0x4c742400
 800ff68:	4a742400 	.word	0x4a742400
 800ff6c:	4bbebc20 	.word	0x4bbebc20

0800ff70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	b084      	sub	sp, #16
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
 800ff78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ff7e:	4b53      	ldr	r3, [pc, #332]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 800ff80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff82:	f003 0303 	and.w	r3, r3, #3
 800ff86:	2b03      	cmp	r3, #3
 800ff88:	d101      	bne.n	800ff8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	e099      	b.n	80100c2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ff8e:	4b4f      	ldr	r3, [pc, #316]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	4a4e      	ldr	r2, [pc, #312]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 800ff94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ff98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ff9a:	f7fa fb71 	bl	800a680 <HAL_GetTick>
 800ff9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ffa0:	e008      	b.n	800ffb4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ffa2:	f7fa fb6d 	bl	800a680 <HAL_GetTick>
 800ffa6:	4602      	mov	r2, r0
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	1ad3      	subs	r3, r2, r3
 800ffac:	2b02      	cmp	r3, #2
 800ffae:	d901      	bls.n	800ffb4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ffb0:	2303      	movs	r3, #3
 800ffb2:	e086      	b.n	80100c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ffb4:	4b45      	ldr	r3, [pc, #276]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d1f0      	bne.n	800ffa2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ffc0:	4b42      	ldr	r3, [pc, #264]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 800ffc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffc4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	031b      	lsls	r3, r3, #12
 800ffce:	493f      	ldr	r1, [pc, #252]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 800ffd0:	4313      	orrs	r3, r2
 800ffd2:	628b      	str	r3, [r1, #40]	; 0x28
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	685b      	ldr	r3, [r3, #4]
 800ffd8:	3b01      	subs	r3, #1
 800ffda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	689b      	ldr	r3, [r3, #8]
 800ffe2:	3b01      	subs	r3, #1
 800ffe4:	025b      	lsls	r3, r3, #9
 800ffe6:	b29b      	uxth	r3, r3
 800ffe8:	431a      	orrs	r2, r3
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	68db      	ldr	r3, [r3, #12]
 800ffee:	3b01      	subs	r3, #1
 800fff0:	041b      	lsls	r3, r3, #16
 800fff2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800fff6:	431a      	orrs	r2, r3
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	691b      	ldr	r3, [r3, #16]
 800fffc:	3b01      	subs	r3, #1
 800fffe:	061b      	lsls	r3, r3, #24
 8010000:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010004:	4931      	ldr	r1, [pc, #196]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 8010006:	4313      	orrs	r3, r2
 8010008:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801000a:	4b30      	ldr	r3, [pc, #192]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 801000c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801000e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	695b      	ldr	r3, [r3, #20]
 8010016:	492d      	ldr	r1, [pc, #180]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 8010018:	4313      	orrs	r3, r2
 801001a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801001c:	4b2b      	ldr	r3, [pc, #172]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 801001e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010020:	f023 0220 	bic.w	r2, r3, #32
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	699b      	ldr	r3, [r3, #24]
 8010028:	4928      	ldr	r1, [pc, #160]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 801002a:	4313      	orrs	r3, r2
 801002c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801002e:	4b27      	ldr	r3, [pc, #156]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 8010030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010032:	4a26      	ldr	r2, [pc, #152]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 8010034:	f023 0310 	bic.w	r3, r3, #16
 8010038:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801003a:	4b24      	ldr	r3, [pc, #144]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 801003c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801003e:	4b24      	ldr	r3, [pc, #144]	; (80100d0 <RCCEx_PLL2_Config+0x160>)
 8010040:	4013      	ands	r3, r2
 8010042:	687a      	ldr	r2, [r7, #4]
 8010044:	69d2      	ldr	r2, [r2, #28]
 8010046:	00d2      	lsls	r2, r2, #3
 8010048:	4920      	ldr	r1, [pc, #128]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 801004a:	4313      	orrs	r3, r2
 801004c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801004e:	4b1f      	ldr	r3, [pc, #124]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 8010050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010052:	4a1e      	ldr	r2, [pc, #120]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 8010054:	f043 0310 	orr.w	r3, r3, #16
 8010058:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801005a:	683b      	ldr	r3, [r7, #0]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d106      	bne.n	801006e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8010060:	4b1a      	ldr	r3, [pc, #104]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 8010062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010064:	4a19      	ldr	r2, [pc, #100]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 8010066:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801006a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801006c:	e00f      	b.n	801008e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	2b01      	cmp	r3, #1
 8010072:	d106      	bne.n	8010082 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8010074:	4b15      	ldr	r3, [pc, #84]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 8010076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010078:	4a14      	ldr	r2, [pc, #80]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 801007a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801007e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8010080:	e005      	b.n	801008e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8010082:	4b12      	ldr	r3, [pc, #72]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 8010084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010086:	4a11      	ldr	r2, [pc, #68]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 8010088:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801008c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801008e:	4b0f      	ldr	r3, [pc, #60]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	4a0e      	ldr	r2, [pc, #56]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 8010094:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010098:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801009a:	f7fa faf1 	bl	800a680 <HAL_GetTick>
 801009e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80100a0:	e008      	b.n	80100b4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80100a2:	f7fa faed 	bl	800a680 <HAL_GetTick>
 80100a6:	4602      	mov	r2, r0
 80100a8:	68bb      	ldr	r3, [r7, #8]
 80100aa:	1ad3      	subs	r3, r2, r3
 80100ac:	2b02      	cmp	r3, #2
 80100ae:	d901      	bls.n	80100b4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80100b0:	2303      	movs	r3, #3
 80100b2:	e006      	b.n	80100c2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80100b4:	4b05      	ldr	r3, [pc, #20]	; (80100cc <RCCEx_PLL2_Config+0x15c>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d0f0      	beq.n	80100a2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80100c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	3710      	adds	r7, #16
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}
 80100ca:	bf00      	nop
 80100cc:	58024400 	.word	0x58024400
 80100d0:	ffff0007 	.word	0xffff0007

080100d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b084      	sub	sp, #16
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80100de:	2300      	movs	r3, #0
 80100e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80100e2:	4b53      	ldr	r3, [pc, #332]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 80100e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100e6:	f003 0303 	and.w	r3, r3, #3
 80100ea:	2b03      	cmp	r3, #3
 80100ec:	d101      	bne.n	80100f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80100ee:	2301      	movs	r3, #1
 80100f0:	e099      	b.n	8010226 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80100f2:	4b4f      	ldr	r3, [pc, #316]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	4a4e      	ldr	r2, [pc, #312]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 80100f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80100fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80100fe:	f7fa fabf 	bl	800a680 <HAL_GetTick>
 8010102:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010104:	e008      	b.n	8010118 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8010106:	f7fa fabb 	bl	800a680 <HAL_GetTick>
 801010a:	4602      	mov	r2, r0
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	1ad3      	subs	r3, r2, r3
 8010110:	2b02      	cmp	r3, #2
 8010112:	d901      	bls.n	8010118 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8010114:	2303      	movs	r3, #3
 8010116:	e086      	b.n	8010226 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8010118:	4b45      	ldr	r3, [pc, #276]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010120:	2b00      	cmp	r3, #0
 8010122:	d1f0      	bne.n	8010106 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8010124:	4b42      	ldr	r3, [pc, #264]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 8010126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010128:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	051b      	lsls	r3, r3, #20
 8010132:	493f      	ldr	r1, [pc, #252]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 8010134:	4313      	orrs	r3, r2
 8010136:	628b      	str	r3, [r1, #40]	; 0x28
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	685b      	ldr	r3, [r3, #4]
 801013c:	3b01      	subs	r3, #1
 801013e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	689b      	ldr	r3, [r3, #8]
 8010146:	3b01      	subs	r3, #1
 8010148:	025b      	lsls	r3, r3, #9
 801014a:	b29b      	uxth	r3, r3
 801014c:	431a      	orrs	r2, r3
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	68db      	ldr	r3, [r3, #12]
 8010152:	3b01      	subs	r3, #1
 8010154:	041b      	lsls	r3, r3, #16
 8010156:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801015a:	431a      	orrs	r2, r3
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	691b      	ldr	r3, [r3, #16]
 8010160:	3b01      	subs	r3, #1
 8010162:	061b      	lsls	r3, r3, #24
 8010164:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010168:	4931      	ldr	r1, [pc, #196]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 801016a:	4313      	orrs	r3, r2
 801016c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801016e:	4b30      	ldr	r3, [pc, #192]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 8010170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010172:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	695b      	ldr	r3, [r3, #20]
 801017a:	492d      	ldr	r1, [pc, #180]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 801017c:	4313      	orrs	r3, r2
 801017e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8010180:	4b2b      	ldr	r3, [pc, #172]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 8010182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010184:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	699b      	ldr	r3, [r3, #24]
 801018c:	4928      	ldr	r1, [pc, #160]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 801018e:	4313      	orrs	r3, r2
 8010190:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8010192:	4b27      	ldr	r3, [pc, #156]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 8010194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010196:	4a26      	ldr	r2, [pc, #152]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 8010198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801019c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801019e:	4b24      	ldr	r3, [pc, #144]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 80101a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80101a2:	4b24      	ldr	r3, [pc, #144]	; (8010234 <RCCEx_PLL3_Config+0x160>)
 80101a4:	4013      	ands	r3, r2
 80101a6:	687a      	ldr	r2, [r7, #4]
 80101a8:	69d2      	ldr	r2, [r2, #28]
 80101aa:	00d2      	lsls	r2, r2, #3
 80101ac:	4920      	ldr	r1, [pc, #128]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 80101ae:	4313      	orrs	r3, r2
 80101b0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80101b2:	4b1f      	ldr	r3, [pc, #124]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 80101b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101b6:	4a1e      	ldr	r2, [pc, #120]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 80101b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80101bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d106      	bne.n	80101d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80101c4:	4b1a      	ldr	r3, [pc, #104]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 80101c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101c8:	4a19      	ldr	r2, [pc, #100]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 80101ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80101ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80101d0:	e00f      	b.n	80101f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	2b01      	cmp	r3, #1
 80101d6:	d106      	bne.n	80101e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80101d8:	4b15      	ldr	r3, [pc, #84]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 80101da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101dc:	4a14      	ldr	r2, [pc, #80]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 80101de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80101e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80101e4:	e005      	b.n	80101f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80101e6:	4b12      	ldr	r3, [pc, #72]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 80101e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101ea:	4a11      	ldr	r2, [pc, #68]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 80101ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80101f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80101f2:	4b0f      	ldr	r3, [pc, #60]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	4a0e      	ldr	r2, [pc, #56]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 80101f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80101fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80101fe:	f7fa fa3f 	bl	800a680 <HAL_GetTick>
 8010202:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010204:	e008      	b.n	8010218 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8010206:	f7fa fa3b 	bl	800a680 <HAL_GetTick>
 801020a:	4602      	mov	r2, r0
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	1ad3      	subs	r3, r2, r3
 8010210:	2b02      	cmp	r3, #2
 8010212:	d901      	bls.n	8010218 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8010214:	2303      	movs	r3, #3
 8010216:	e006      	b.n	8010226 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8010218:	4b05      	ldr	r3, [pc, #20]	; (8010230 <RCCEx_PLL3_Config+0x15c>)
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010220:	2b00      	cmp	r3, #0
 8010222:	d0f0      	beq.n	8010206 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8010224:	7bfb      	ldrb	r3, [r7, #15]
}
 8010226:	4618      	mov	r0, r3
 8010228:	3710      	adds	r7, #16
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	58024400 	.word	0x58024400
 8010234:	ffff0007 	.word	0xffff0007

08010238 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b084      	sub	sp, #16
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d101      	bne.n	801024a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010246:	2301      	movs	r3, #1
 8010248:	e0f1      	b.n	801042e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	2200      	movs	r2, #0
 801024e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	4a78      	ldr	r2, [pc, #480]	; (8010438 <HAL_SPI_Init+0x200>)
 8010256:	4293      	cmp	r3, r2
 8010258:	d00f      	beq.n	801027a <HAL_SPI_Init+0x42>
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	4a77      	ldr	r2, [pc, #476]	; (801043c <HAL_SPI_Init+0x204>)
 8010260:	4293      	cmp	r3, r2
 8010262:	d00a      	beq.n	801027a <HAL_SPI_Init+0x42>
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	4a75      	ldr	r2, [pc, #468]	; (8010440 <HAL_SPI_Init+0x208>)
 801026a:	4293      	cmp	r3, r2
 801026c:	d005      	beq.n	801027a <HAL_SPI_Init+0x42>
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	68db      	ldr	r3, [r3, #12]
 8010272:	2b0f      	cmp	r3, #15
 8010274:	d901      	bls.n	801027a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8010276:	2301      	movs	r3, #1
 8010278:	e0d9      	b.n	801042e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f000 f8e2 	bl	8010444 <SPI_GetPacketSize>
 8010280:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	4a6c      	ldr	r2, [pc, #432]	; (8010438 <HAL_SPI_Init+0x200>)
 8010288:	4293      	cmp	r3, r2
 801028a:	d00c      	beq.n	80102a6 <HAL_SPI_Init+0x6e>
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	4a6a      	ldr	r2, [pc, #424]	; (801043c <HAL_SPI_Init+0x204>)
 8010292:	4293      	cmp	r3, r2
 8010294:	d007      	beq.n	80102a6 <HAL_SPI_Init+0x6e>
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	4a69      	ldr	r2, [pc, #420]	; (8010440 <HAL_SPI_Init+0x208>)
 801029c:	4293      	cmp	r3, r2
 801029e:	d002      	beq.n	80102a6 <HAL_SPI_Init+0x6e>
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	2b08      	cmp	r3, #8
 80102a4:	d811      	bhi.n	80102ca <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80102aa:	4a63      	ldr	r2, [pc, #396]	; (8010438 <HAL_SPI_Init+0x200>)
 80102ac:	4293      	cmp	r3, r2
 80102ae:	d009      	beq.n	80102c4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	4a61      	ldr	r2, [pc, #388]	; (801043c <HAL_SPI_Init+0x204>)
 80102b6:	4293      	cmp	r3, r2
 80102b8:	d004      	beq.n	80102c4 <HAL_SPI_Init+0x8c>
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	4a60      	ldr	r2, [pc, #384]	; (8010440 <HAL_SPI_Init+0x208>)
 80102c0:	4293      	cmp	r3, r2
 80102c2:	d104      	bne.n	80102ce <HAL_SPI_Init+0x96>
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	2b10      	cmp	r3, #16
 80102c8:	d901      	bls.n	80102ce <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80102ca:	2301      	movs	r3, #1
 80102cc:	e0af      	b.n	801042e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80102d4:	b2db      	uxtb	r3, r3
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d106      	bne.n	80102e8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2200      	movs	r2, #0
 80102de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80102e2:	6878      	ldr	r0, [r7, #4]
 80102e4:	f7f8 fc94 	bl	8008c10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2202      	movs	r2, #2
 80102ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	681a      	ldr	r2, [r3, #0]
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	f022 0201 	bic.w	r2, r2, #1
 80102fe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	689b      	ldr	r3, [r3, #8]
 8010306:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 801030a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	699b      	ldr	r3, [r3, #24]
 8010310:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010314:	d119      	bne.n	801034a <HAL_SPI_Init+0x112>
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	685b      	ldr	r3, [r3, #4]
 801031a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801031e:	d103      	bne.n	8010328 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8010324:	2b00      	cmp	r3, #0
 8010326:	d008      	beq.n	801033a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801032c:	2b00      	cmp	r3, #0
 801032e:	d10c      	bne.n	801034a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8010334:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010338:	d107      	bne.n	801034a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	681a      	ldr	r2, [r3, #0]
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010348:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	69da      	ldr	r2, [r3, #28]
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010352:	431a      	orrs	r2, r3
 8010354:	68bb      	ldr	r3, [r7, #8]
 8010356:	431a      	orrs	r2, r3
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801035c:	ea42 0103 	orr.w	r1, r2, r3
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	68da      	ldr	r2, [r3, #12]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	430a      	orrs	r2, r1
 801036a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010374:	431a      	orrs	r2, r3
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801037a:	431a      	orrs	r2, r3
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	699b      	ldr	r3, [r3, #24]
 8010380:	431a      	orrs	r2, r3
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	691b      	ldr	r3, [r3, #16]
 8010386:	431a      	orrs	r2, r3
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	695b      	ldr	r3, [r3, #20]
 801038c:	431a      	orrs	r2, r3
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	6a1b      	ldr	r3, [r3, #32]
 8010392:	431a      	orrs	r2, r3
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	685b      	ldr	r3, [r3, #4]
 8010398:	431a      	orrs	r2, r3
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801039e:	431a      	orrs	r2, r3
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	689b      	ldr	r3, [r3, #8]
 80103a4:	431a      	orrs	r2, r3
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103aa:	ea42 0103 	orr.w	r1, r2, r3
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	430a      	orrs	r2, r1
 80103b8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	685b      	ldr	r3, [r3, #4]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d113      	bne.n	80103ea <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	689b      	ldr	r3, [r3, #8]
 80103c8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80103d4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	689b      	ldr	r3, [r3, #8]
 80103dc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80103e8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	f022 0201 	bic.w	r2, r2, #1
 80103f8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	685b      	ldr	r3, [r3, #4]
 80103fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010402:	2b00      	cmp	r3, #0
 8010404:	d00a      	beq.n	801041c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	68db      	ldr	r3, [r3, #12]
 801040c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	430a      	orrs	r2, r1
 801041a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	2200      	movs	r2, #0
 8010420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2201      	movs	r2, #1
 8010428:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 801042c:	2300      	movs	r3, #0
}
 801042e:	4618      	mov	r0, r3
 8010430:	3710      	adds	r7, #16
 8010432:	46bd      	mov	sp, r7
 8010434:	bd80      	pop	{r7, pc}
 8010436:	bf00      	nop
 8010438:	40013000 	.word	0x40013000
 801043c:	40003800 	.word	0x40003800
 8010440:	40003c00 	.word	0x40003c00

08010444 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8010444:	b480      	push	{r7}
 8010446:	b085      	sub	sp, #20
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010450:	095b      	lsrs	r3, r3, #5
 8010452:	3301      	adds	r3, #1
 8010454:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	68db      	ldr	r3, [r3, #12]
 801045a:	3301      	adds	r3, #1
 801045c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	3307      	adds	r3, #7
 8010462:	08db      	lsrs	r3, r3, #3
 8010464:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010466:	68bb      	ldr	r3, [r7, #8]
 8010468:	68fa      	ldr	r2, [r7, #12]
 801046a:	fb02 f303 	mul.w	r3, r2, r3
}
 801046e:	4618      	mov	r0, r3
 8010470:	3714      	adds	r7, #20
 8010472:	46bd      	mov	sp, r7
 8010474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010478:	4770      	bx	lr

0801047a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801047a:	b580      	push	{r7, lr}
 801047c:	b082      	sub	sp, #8
 801047e:	af00      	add	r7, sp, #0
 8010480:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	2b00      	cmp	r3, #0
 8010486:	d101      	bne.n	801048c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010488:	2301      	movs	r3, #1
 801048a:	e049      	b.n	8010520 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010492:	b2db      	uxtb	r3, r3
 8010494:	2b00      	cmp	r3, #0
 8010496:	d106      	bne.n	80104a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2200      	movs	r2, #0
 801049c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	f7f9 faf9 	bl	8009a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2202      	movs	r2, #2
 80104aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681a      	ldr	r2, [r3, #0]
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	3304      	adds	r3, #4
 80104b6:	4619      	mov	r1, r3
 80104b8:	4610      	mov	r0, r2
 80104ba:	f000 fbbf 	bl	8010c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2201      	movs	r2, #1
 80104c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2201      	movs	r2, #1
 80104ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2201      	movs	r2, #1
 80104d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	2201      	movs	r2, #1
 80104da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2201      	movs	r2, #1
 80104e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	2201      	movs	r2, #1
 80104ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2201      	movs	r2, #1
 80104f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	2201      	movs	r2, #1
 80104fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	2201      	movs	r2, #1
 8010502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2201      	movs	r2, #1
 801050a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2201      	movs	r2, #1
 8010512:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2201      	movs	r2, #1
 801051a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801051e:	2300      	movs	r3, #0
}
 8010520:	4618      	mov	r0, r3
 8010522:	3708      	adds	r7, #8
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}

08010528 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b082      	sub	sp, #8
 801052c:	af00      	add	r7, sp, #0
 801052e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d101      	bne.n	801053a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010536:	2301      	movs	r3, #1
 8010538:	e049      	b.n	80105ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010540:	b2db      	uxtb	r3, r3
 8010542:	2b00      	cmp	r3, #0
 8010544:	d106      	bne.n	8010554 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	2200      	movs	r2, #0
 801054a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801054e:	6878      	ldr	r0, [r7, #4]
 8010550:	f000 f841 	bl	80105d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2202      	movs	r2, #2
 8010558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681a      	ldr	r2, [r3, #0]
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	3304      	adds	r3, #4
 8010564:	4619      	mov	r1, r3
 8010566:	4610      	mov	r0, r2
 8010568:	f000 fb68 	bl	8010c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2201      	movs	r2, #1
 8010570:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2201      	movs	r2, #1
 8010578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2201      	movs	r2, #1
 8010580:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2201      	movs	r2, #1
 8010588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2201      	movs	r2, #1
 8010590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2201      	movs	r2, #1
 8010598:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2201      	movs	r2, #1
 80105a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	2201      	movs	r2, #1
 80105a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2201      	movs	r2, #1
 80105b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2201      	movs	r2, #1
 80105b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2201      	movs	r2, #1
 80105c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2201      	movs	r2, #1
 80105c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80105cc:	2300      	movs	r3, #0
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	3708      	adds	r7, #8
 80105d2:	46bd      	mov	sp, r7
 80105d4:	bd80      	pop	{r7, pc}

080105d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80105d6:	b480      	push	{r7}
 80105d8:	b083      	sub	sp, #12
 80105da:	af00      	add	r7, sp, #0
 80105dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80105de:	bf00      	nop
 80105e0:	370c      	adds	r7, #12
 80105e2:	46bd      	mov	sp, r7
 80105e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e8:	4770      	bx	lr
	...

080105ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b084      	sub	sp, #16
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80105f6:	683b      	ldr	r3, [r7, #0]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d109      	bne.n	8010610 <HAL_TIM_PWM_Start+0x24>
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010602:	b2db      	uxtb	r3, r3
 8010604:	2b01      	cmp	r3, #1
 8010606:	bf14      	ite	ne
 8010608:	2301      	movne	r3, #1
 801060a:	2300      	moveq	r3, #0
 801060c:	b2db      	uxtb	r3, r3
 801060e:	e03c      	b.n	801068a <HAL_TIM_PWM_Start+0x9e>
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	2b04      	cmp	r3, #4
 8010614:	d109      	bne.n	801062a <HAL_TIM_PWM_Start+0x3e>
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801061c:	b2db      	uxtb	r3, r3
 801061e:	2b01      	cmp	r3, #1
 8010620:	bf14      	ite	ne
 8010622:	2301      	movne	r3, #1
 8010624:	2300      	moveq	r3, #0
 8010626:	b2db      	uxtb	r3, r3
 8010628:	e02f      	b.n	801068a <HAL_TIM_PWM_Start+0x9e>
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	2b08      	cmp	r3, #8
 801062e:	d109      	bne.n	8010644 <HAL_TIM_PWM_Start+0x58>
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010636:	b2db      	uxtb	r3, r3
 8010638:	2b01      	cmp	r3, #1
 801063a:	bf14      	ite	ne
 801063c:	2301      	movne	r3, #1
 801063e:	2300      	moveq	r3, #0
 8010640:	b2db      	uxtb	r3, r3
 8010642:	e022      	b.n	801068a <HAL_TIM_PWM_Start+0x9e>
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	2b0c      	cmp	r3, #12
 8010648:	d109      	bne.n	801065e <HAL_TIM_PWM_Start+0x72>
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010650:	b2db      	uxtb	r3, r3
 8010652:	2b01      	cmp	r3, #1
 8010654:	bf14      	ite	ne
 8010656:	2301      	movne	r3, #1
 8010658:	2300      	moveq	r3, #0
 801065a:	b2db      	uxtb	r3, r3
 801065c:	e015      	b.n	801068a <HAL_TIM_PWM_Start+0x9e>
 801065e:	683b      	ldr	r3, [r7, #0]
 8010660:	2b10      	cmp	r3, #16
 8010662:	d109      	bne.n	8010678 <HAL_TIM_PWM_Start+0x8c>
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801066a:	b2db      	uxtb	r3, r3
 801066c:	2b01      	cmp	r3, #1
 801066e:	bf14      	ite	ne
 8010670:	2301      	movne	r3, #1
 8010672:	2300      	moveq	r3, #0
 8010674:	b2db      	uxtb	r3, r3
 8010676:	e008      	b.n	801068a <HAL_TIM_PWM_Start+0x9e>
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801067e:	b2db      	uxtb	r3, r3
 8010680:	2b01      	cmp	r3, #1
 8010682:	bf14      	ite	ne
 8010684:	2301      	movne	r3, #1
 8010686:	2300      	moveq	r3, #0
 8010688:	b2db      	uxtb	r3, r3
 801068a:	2b00      	cmp	r3, #0
 801068c:	d001      	beq.n	8010692 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801068e:	2301      	movs	r3, #1
 8010690:	e0ab      	b.n	80107ea <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d104      	bne.n	80106a2 <HAL_TIM_PWM_Start+0xb6>
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	2202      	movs	r2, #2
 801069c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80106a0:	e023      	b.n	80106ea <HAL_TIM_PWM_Start+0xfe>
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	2b04      	cmp	r3, #4
 80106a6:	d104      	bne.n	80106b2 <HAL_TIM_PWM_Start+0xc6>
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2202      	movs	r2, #2
 80106ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80106b0:	e01b      	b.n	80106ea <HAL_TIM_PWM_Start+0xfe>
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	2b08      	cmp	r3, #8
 80106b6:	d104      	bne.n	80106c2 <HAL_TIM_PWM_Start+0xd6>
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2202      	movs	r2, #2
 80106bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80106c0:	e013      	b.n	80106ea <HAL_TIM_PWM_Start+0xfe>
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	2b0c      	cmp	r3, #12
 80106c6:	d104      	bne.n	80106d2 <HAL_TIM_PWM_Start+0xe6>
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	2202      	movs	r2, #2
 80106cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80106d0:	e00b      	b.n	80106ea <HAL_TIM_PWM_Start+0xfe>
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	2b10      	cmp	r3, #16
 80106d6:	d104      	bne.n	80106e2 <HAL_TIM_PWM_Start+0xf6>
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2202      	movs	r2, #2
 80106dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80106e0:	e003      	b.n	80106ea <HAL_TIM_PWM_Start+0xfe>
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2202      	movs	r2, #2
 80106e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	2201      	movs	r2, #1
 80106f0:	6839      	ldr	r1, [r7, #0]
 80106f2:	4618      	mov	r0, r3
 80106f4:	f000 febc 	bl	8011470 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	4a3d      	ldr	r2, [pc, #244]	; (80107f4 <HAL_TIM_PWM_Start+0x208>)
 80106fe:	4293      	cmp	r3, r2
 8010700:	d013      	beq.n	801072a <HAL_TIM_PWM_Start+0x13e>
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	4a3c      	ldr	r2, [pc, #240]	; (80107f8 <HAL_TIM_PWM_Start+0x20c>)
 8010708:	4293      	cmp	r3, r2
 801070a:	d00e      	beq.n	801072a <HAL_TIM_PWM_Start+0x13e>
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	4a3a      	ldr	r2, [pc, #232]	; (80107fc <HAL_TIM_PWM_Start+0x210>)
 8010712:	4293      	cmp	r3, r2
 8010714:	d009      	beq.n	801072a <HAL_TIM_PWM_Start+0x13e>
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	4a39      	ldr	r2, [pc, #228]	; (8010800 <HAL_TIM_PWM_Start+0x214>)
 801071c:	4293      	cmp	r3, r2
 801071e:	d004      	beq.n	801072a <HAL_TIM_PWM_Start+0x13e>
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	4a37      	ldr	r2, [pc, #220]	; (8010804 <HAL_TIM_PWM_Start+0x218>)
 8010726:	4293      	cmp	r3, r2
 8010728:	d101      	bne.n	801072e <HAL_TIM_PWM_Start+0x142>
 801072a:	2301      	movs	r3, #1
 801072c:	e000      	b.n	8010730 <HAL_TIM_PWM_Start+0x144>
 801072e:	2300      	movs	r3, #0
 8010730:	2b00      	cmp	r3, #0
 8010732:	d007      	beq.n	8010744 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010742:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	4a2a      	ldr	r2, [pc, #168]	; (80107f4 <HAL_TIM_PWM_Start+0x208>)
 801074a:	4293      	cmp	r3, r2
 801074c:	d02c      	beq.n	80107a8 <HAL_TIM_PWM_Start+0x1bc>
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010756:	d027      	beq.n	80107a8 <HAL_TIM_PWM_Start+0x1bc>
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	4a2a      	ldr	r2, [pc, #168]	; (8010808 <HAL_TIM_PWM_Start+0x21c>)
 801075e:	4293      	cmp	r3, r2
 8010760:	d022      	beq.n	80107a8 <HAL_TIM_PWM_Start+0x1bc>
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	4a29      	ldr	r2, [pc, #164]	; (801080c <HAL_TIM_PWM_Start+0x220>)
 8010768:	4293      	cmp	r3, r2
 801076a:	d01d      	beq.n	80107a8 <HAL_TIM_PWM_Start+0x1bc>
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	4a27      	ldr	r2, [pc, #156]	; (8010810 <HAL_TIM_PWM_Start+0x224>)
 8010772:	4293      	cmp	r3, r2
 8010774:	d018      	beq.n	80107a8 <HAL_TIM_PWM_Start+0x1bc>
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	4a1f      	ldr	r2, [pc, #124]	; (80107f8 <HAL_TIM_PWM_Start+0x20c>)
 801077c:	4293      	cmp	r3, r2
 801077e:	d013      	beq.n	80107a8 <HAL_TIM_PWM_Start+0x1bc>
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	4a23      	ldr	r2, [pc, #140]	; (8010814 <HAL_TIM_PWM_Start+0x228>)
 8010786:	4293      	cmp	r3, r2
 8010788:	d00e      	beq.n	80107a8 <HAL_TIM_PWM_Start+0x1bc>
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	4a1b      	ldr	r2, [pc, #108]	; (80107fc <HAL_TIM_PWM_Start+0x210>)
 8010790:	4293      	cmp	r3, r2
 8010792:	d009      	beq.n	80107a8 <HAL_TIM_PWM_Start+0x1bc>
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	4a1f      	ldr	r2, [pc, #124]	; (8010818 <HAL_TIM_PWM_Start+0x22c>)
 801079a:	4293      	cmp	r3, r2
 801079c:	d004      	beq.n	80107a8 <HAL_TIM_PWM_Start+0x1bc>
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	4a1e      	ldr	r2, [pc, #120]	; (801081c <HAL_TIM_PWM_Start+0x230>)
 80107a4:	4293      	cmp	r3, r2
 80107a6:	d115      	bne.n	80107d4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	689a      	ldr	r2, [r3, #8]
 80107ae:	4b1c      	ldr	r3, [pc, #112]	; (8010820 <HAL_TIM_PWM_Start+0x234>)
 80107b0:	4013      	ands	r3, r2
 80107b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	2b06      	cmp	r3, #6
 80107b8:	d015      	beq.n	80107e6 <HAL_TIM_PWM_Start+0x1fa>
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107c0:	d011      	beq.n	80107e6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	681a      	ldr	r2, [r3, #0]
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	f042 0201 	orr.w	r2, r2, #1
 80107d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80107d2:	e008      	b.n	80107e6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	681a      	ldr	r2, [r3, #0]
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	f042 0201 	orr.w	r2, r2, #1
 80107e2:	601a      	str	r2, [r3, #0]
 80107e4:	e000      	b.n	80107e8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80107e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80107e8:	2300      	movs	r3, #0
}
 80107ea:	4618      	mov	r0, r3
 80107ec:	3710      	adds	r7, #16
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}
 80107f2:	bf00      	nop
 80107f4:	40010000 	.word	0x40010000
 80107f8:	40010400 	.word	0x40010400
 80107fc:	40014000 	.word	0x40014000
 8010800:	40014400 	.word	0x40014400
 8010804:	40014800 	.word	0x40014800
 8010808:	40000400 	.word	0x40000400
 801080c:	40000800 	.word	0x40000800
 8010810:	40000c00 	.word	0x40000c00
 8010814:	40001800 	.word	0x40001800
 8010818:	4000e000 	.word	0x4000e000
 801081c:	4000e400 	.word	0x4000e400
 8010820:	00010007 	.word	0x00010007

08010824 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010824:	b580      	push	{r7, lr}
 8010826:	b086      	sub	sp, #24
 8010828:	af00      	add	r7, sp, #0
 801082a:	60f8      	str	r0, [r7, #12]
 801082c:	60b9      	str	r1, [r7, #8]
 801082e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010830:	2300      	movs	r3, #0
 8010832:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801083a:	2b01      	cmp	r3, #1
 801083c:	d101      	bne.n	8010842 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801083e:	2302      	movs	r3, #2
 8010840:	e0ff      	b.n	8010a42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	2201      	movs	r2, #1
 8010846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2b14      	cmp	r3, #20
 801084e:	f200 80f0 	bhi.w	8010a32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010852:	a201      	add	r2, pc, #4	; (adr r2, 8010858 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010858:	080108ad 	.word	0x080108ad
 801085c:	08010a33 	.word	0x08010a33
 8010860:	08010a33 	.word	0x08010a33
 8010864:	08010a33 	.word	0x08010a33
 8010868:	080108ed 	.word	0x080108ed
 801086c:	08010a33 	.word	0x08010a33
 8010870:	08010a33 	.word	0x08010a33
 8010874:	08010a33 	.word	0x08010a33
 8010878:	0801092f 	.word	0x0801092f
 801087c:	08010a33 	.word	0x08010a33
 8010880:	08010a33 	.word	0x08010a33
 8010884:	08010a33 	.word	0x08010a33
 8010888:	0801096f 	.word	0x0801096f
 801088c:	08010a33 	.word	0x08010a33
 8010890:	08010a33 	.word	0x08010a33
 8010894:	08010a33 	.word	0x08010a33
 8010898:	080109b1 	.word	0x080109b1
 801089c:	08010a33 	.word	0x08010a33
 80108a0:	08010a33 	.word	0x08010a33
 80108a4:	08010a33 	.word	0x08010a33
 80108a8:	080109f1 	.word	0x080109f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	68b9      	ldr	r1, [r7, #8]
 80108b2:	4618      	mov	r0, r3
 80108b4:	f000 fa68 	bl	8010d88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	699a      	ldr	r2, [r3, #24]
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	f042 0208 	orr.w	r2, r2, #8
 80108c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	699a      	ldr	r2, [r3, #24]
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	f022 0204 	bic.w	r2, r2, #4
 80108d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	6999      	ldr	r1, [r3, #24]
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	691a      	ldr	r2, [r3, #16]
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	430a      	orrs	r2, r1
 80108e8:	619a      	str	r2, [r3, #24]
      break;
 80108ea:	e0a5      	b.n	8010a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	68b9      	ldr	r1, [r7, #8]
 80108f2:	4618      	mov	r0, r3
 80108f4:	f000 fad8 	bl	8010ea8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	699a      	ldr	r2, [r3, #24]
 80108fe:	68fb      	ldr	r3, [r7, #12]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	699a      	ldr	r2, [r3, #24]
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	6999      	ldr	r1, [r3, #24]
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	691b      	ldr	r3, [r3, #16]
 8010922:	021a      	lsls	r2, r3, #8
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	430a      	orrs	r2, r1
 801092a:	619a      	str	r2, [r3, #24]
      break;
 801092c:	e084      	b.n	8010a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	68b9      	ldr	r1, [r7, #8]
 8010934:	4618      	mov	r0, r3
 8010936:	f000 fb41 	bl	8010fbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	69da      	ldr	r2, [r3, #28]
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	f042 0208 	orr.w	r2, r2, #8
 8010948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	69da      	ldr	r2, [r3, #28]
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	f022 0204 	bic.w	r2, r2, #4
 8010958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	69d9      	ldr	r1, [r3, #28]
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	691a      	ldr	r2, [r3, #16]
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	430a      	orrs	r2, r1
 801096a:	61da      	str	r2, [r3, #28]
      break;
 801096c:	e064      	b.n	8010a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	68b9      	ldr	r1, [r7, #8]
 8010974:	4618      	mov	r0, r3
 8010976:	f000 fba9 	bl	80110cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	69da      	ldr	r2, [r3, #28]
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	69da      	ldr	r2, [r3, #28]
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	69d9      	ldr	r1, [r3, #28]
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	691b      	ldr	r3, [r3, #16]
 80109a4:	021a      	lsls	r2, r3, #8
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	430a      	orrs	r2, r1
 80109ac:	61da      	str	r2, [r3, #28]
      break;
 80109ae:	e043      	b.n	8010a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	68b9      	ldr	r1, [r7, #8]
 80109b6:	4618      	mov	r0, r3
 80109b8:	f000 fbf2 	bl	80111a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	f042 0208 	orr.w	r2, r2, #8
 80109ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	f022 0204 	bic.w	r2, r2, #4
 80109da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	691a      	ldr	r2, [r3, #16]
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	430a      	orrs	r2, r1
 80109ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80109ee:	e023      	b.n	8010a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	68b9      	ldr	r1, [r7, #8]
 80109f6:	4618      	mov	r0, r3
 80109f8:	f000 fc36 	bl	8011268 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010a0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010a1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010a22:	68bb      	ldr	r3, [r7, #8]
 8010a24:	691b      	ldr	r3, [r3, #16]
 8010a26:	021a      	lsls	r2, r3, #8
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	430a      	orrs	r2, r1
 8010a2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010a30:	e002      	b.n	8010a38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010a32:	2301      	movs	r3, #1
 8010a34:	75fb      	strb	r3, [r7, #23]
      break;
 8010a36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a42:	4618      	mov	r0, r3
 8010a44:	3718      	adds	r7, #24
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}
 8010a4a:	bf00      	nop

08010a4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b084      	sub	sp, #16
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010a56:	2300      	movs	r3, #0
 8010a58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010a60:	2b01      	cmp	r3, #1
 8010a62:	d101      	bne.n	8010a68 <HAL_TIM_ConfigClockSource+0x1c>
 8010a64:	2302      	movs	r3, #2
 8010a66:	e0dc      	b.n	8010c22 <HAL_TIM_ConfigClockSource+0x1d6>
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2201      	movs	r2, #1
 8010a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	2202      	movs	r2, #2
 8010a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	689b      	ldr	r3, [r3, #8]
 8010a7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010a80:	68ba      	ldr	r2, [r7, #8]
 8010a82:	4b6a      	ldr	r3, [pc, #424]	; (8010c2c <HAL_TIM_ConfigClockSource+0x1e0>)
 8010a84:	4013      	ands	r3, r2
 8010a86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010a8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	68ba      	ldr	r2, [r7, #8]
 8010a96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010a98:	683b      	ldr	r3, [r7, #0]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	4a64      	ldr	r2, [pc, #400]	; (8010c30 <HAL_TIM_ConfigClockSource+0x1e4>)
 8010a9e:	4293      	cmp	r3, r2
 8010aa0:	f000 80a9 	beq.w	8010bf6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010aa4:	4a62      	ldr	r2, [pc, #392]	; (8010c30 <HAL_TIM_ConfigClockSource+0x1e4>)
 8010aa6:	4293      	cmp	r3, r2
 8010aa8:	f200 80ae 	bhi.w	8010c08 <HAL_TIM_ConfigClockSource+0x1bc>
 8010aac:	4a61      	ldr	r2, [pc, #388]	; (8010c34 <HAL_TIM_ConfigClockSource+0x1e8>)
 8010aae:	4293      	cmp	r3, r2
 8010ab0:	f000 80a1 	beq.w	8010bf6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010ab4:	4a5f      	ldr	r2, [pc, #380]	; (8010c34 <HAL_TIM_ConfigClockSource+0x1e8>)
 8010ab6:	4293      	cmp	r3, r2
 8010ab8:	f200 80a6 	bhi.w	8010c08 <HAL_TIM_ConfigClockSource+0x1bc>
 8010abc:	4a5e      	ldr	r2, [pc, #376]	; (8010c38 <HAL_TIM_ConfigClockSource+0x1ec>)
 8010abe:	4293      	cmp	r3, r2
 8010ac0:	f000 8099 	beq.w	8010bf6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010ac4:	4a5c      	ldr	r2, [pc, #368]	; (8010c38 <HAL_TIM_ConfigClockSource+0x1ec>)
 8010ac6:	4293      	cmp	r3, r2
 8010ac8:	f200 809e 	bhi.w	8010c08 <HAL_TIM_ConfigClockSource+0x1bc>
 8010acc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010ad0:	f000 8091 	beq.w	8010bf6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010ad4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010ad8:	f200 8096 	bhi.w	8010c08 <HAL_TIM_ConfigClockSource+0x1bc>
 8010adc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010ae0:	f000 8089 	beq.w	8010bf6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010ae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010ae8:	f200 808e 	bhi.w	8010c08 <HAL_TIM_ConfigClockSource+0x1bc>
 8010aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010af0:	d03e      	beq.n	8010b70 <HAL_TIM_ConfigClockSource+0x124>
 8010af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010af6:	f200 8087 	bhi.w	8010c08 <HAL_TIM_ConfigClockSource+0x1bc>
 8010afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010afe:	f000 8086 	beq.w	8010c0e <HAL_TIM_ConfigClockSource+0x1c2>
 8010b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010b06:	d87f      	bhi.n	8010c08 <HAL_TIM_ConfigClockSource+0x1bc>
 8010b08:	2b70      	cmp	r3, #112	; 0x70
 8010b0a:	d01a      	beq.n	8010b42 <HAL_TIM_ConfigClockSource+0xf6>
 8010b0c:	2b70      	cmp	r3, #112	; 0x70
 8010b0e:	d87b      	bhi.n	8010c08 <HAL_TIM_ConfigClockSource+0x1bc>
 8010b10:	2b60      	cmp	r3, #96	; 0x60
 8010b12:	d050      	beq.n	8010bb6 <HAL_TIM_ConfigClockSource+0x16a>
 8010b14:	2b60      	cmp	r3, #96	; 0x60
 8010b16:	d877      	bhi.n	8010c08 <HAL_TIM_ConfigClockSource+0x1bc>
 8010b18:	2b50      	cmp	r3, #80	; 0x50
 8010b1a:	d03c      	beq.n	8010b96 <HAL_TIM_ConfigClockSource+0x14a>
 8010b1c:	2b50      	cmp	r3, #80	; 0x50
 8010b1e:	d873      	bhi.n	8010c08 <HAL_TIM_ConfigClockSource+0x1bc>
 8010b20:	2b40      	cmp	r3, #64	; 0x40
 8010b22:	d058      	beq.n	8010bd6 <HAL_TIM_ConfigClockSource+0x18a>
 8010b24:	2b40      	cmp	r3, #64	; 0x40
 8010b26:	d86f      	bhi.n	8010c08 <HAL_TIM_ConfigClockSource+0x1bc>
 8010b28:	2b30      	cmp	r3, #48	; 0x30
 8010b2a:	d064      	beq.n	8010bf6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010b2c:	2b30      	cmp	r3, #48	; 0x30
 8010b2e:	d86b      	bhi.n	8010c08 <HAL_TIM_ConfigClockSource+0x1bc>
 8010b30:	2b20      	cmp	r3, #32
 8010b32:	d060      	beq.n	8010bf6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010b34:	2b20      	cmp	r3, #32
 8010b36:	d867      	bhi.n	8010c08 <HAL_TIM_ConfigClockSource+0x1bc>
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d05c      	beq.n	8010bf6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010b3c:	2b10      	cmp	r3, #16
 8010b3e:	d05a      	beq.n	8010bf6 <HAL_TIM_ConfigClockSource+0x1aa>
 8010b40:	e062      	b.n	8010c08 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	6818      	ldr	r0, [r3, #0]
 8010b46:	683b      	ldr	r3, [r7, #0]
 8010b48:	6899      	ldr	r1, [r3, #8]
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	685a      	ldr	r2, [r3, #4]
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	68db      	ldr	r3, [r3, #12]
 8010b52:	f000 fc6d 	bl	8011430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	689b      	ldr	r3, [r3, #8]
 8010b5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010b5e:	68bb      	ldr	r3, [r7, #8]
 8010b60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010b64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	68ba      	ldr	r2, [r7, #8]
 8010b6c:	609a      	str	r2, [r3, #8]
      break;
 8010b6e:	e04f      	b.n	8010c10 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6818      	ldr	r0, [r3, #0]
 8010b74:	683b      	ldr	r3, [r7, #0]
 8010b76:	6899      	ldr	r1, [r3, #8]
 8010b78:	683b      	ldr	r3, [r7, #0]
 8010b7a:	685a      	ldr	r2, [r3, #4]
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	68db      	ldr	r3, [r3, #12]
 8010b80:	f000 fc56 	bl	8011430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	689a      	ldr	r2, [r3, #8]
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010b92:	609a      	str	r2, [r3, #8]
      break;
 8010b94:	e03c      	b.n	8010c10 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	6818      	ldr	r0, [r3, #0]
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	6859      	ldr	r1, [r3, #4]
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	68db      	ldr	r3, [r3, #12]
 8010ba2:	461a      	mov	r2, r3
 8010ba4:	f000 fbc6 	bl	8011334 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	2150      	movs	r1, #80	; 0x50
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f000 fc20 	bl	80113f4 <TIM_ITRx_SetConfig>
      break;
 8010bb4:	e02c      	b.n	8010c10 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	6818      	ldr	r0, [r3, #0]
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	6859      	ldr	r1, [r3, #4]
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	68db      	ldr	r3, [r3, #12]
 8010bc2:	461a      	mov	r2, r3
 8010bc4:	f000 fbe5 	bl	8011392 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	2160      	movs	r1, #96	; 0x60
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f000 fc10 	bl	80113f4 <TIM_ITRx_SetConfig>
      break;
 8010bd4:	e01c      	b.n	8010c10 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	6818      	ldr	r0, [r3, #0]
 8010bda:	683b      	ldr	r3, [r7, #0]
 8010bdc:	6859      	ldr	r1, [r3, #4]
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	68db      	ldr	r3, [r3, #12]
 8010be2:	461a      	mov	r2, r3
 8010be4:	f000 fba6 	bl	8011334 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	2140      	movs	r1, #64	; 0x40
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f000 fc00 	bl	80113f4 <TIM_ITRx_SetConfig>
      break;
 8010bf4:	e00c      	b.n	8010c10 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681a      	ldr	r2, [r3, #0]
 8010bfa:	683b      	ldr	r3, [r7, #0]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	4619      	mov	r1, r3
 8010c00:	4610      	mov	r0, r2
 8010c02:	f000 fbf7 	bl	80113f4 <TIM_ITRx_SetConfig>
      break;
 8010c06:	e003      	b.n	8010c10 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8010c08:	2301      	movs	r3, #1
 8010c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8010c0c:	e000      	b.n	8010c10 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8010c0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2201      	movs	r2, #1
 8010c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c22:	4618      	mov	r0, r3
 8010c24:	3710      	adds	r7, #16
 8010c26:	46bd      	mov	sp, r7
 8010c28:	bd80      	pop	{r7, pc}
 8010c2a:	bf00      	nop
 8010c2c:	ffceff88 	.word	0xffceff88
 8010c30:	00100040 	.word	0x00100040
 8010c34:	00100030 	.word	0x00100030
 8010c38:	00100020 	.word	0x00100020

08010c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010c3c:	b480      	push	{r7}
 8010c3e:	b085      	sub	sp, #20
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
 8010c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	4a44      	ldr	r2, [pc, #272]	; (8010d60 <TIM_Base_SetConfig+0x124>)
 8010c50:	4293      	cmp	r3, r2
 8010c52:	d013      	beq.n	8010c7c <TIM_Base_SetConfig+0x40>
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010c5a:	d00f      	beq.n	8010c7c <TIM_Base_SetConfig+0x40>
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	4a41      	ldr	r2, [pc, #260]	; (8010d64 <TIM_Base_SetConfig+0x128>)
 8010c60:	4293      	cmp	r3, r2
 8010c62:	d00b      	beq.n	8010c7c <TIM_Base_SetConfig+0x40>
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	4a40      	ldr	r2, [pc, #256]	; (8010d68 <TIM_Base_SetConfig+0x12c>)
 8010c68:	4293      	cmp	r3, r2
 8010c6a:	d007      	beq.n	8010c7c <TIM_Base_SetConfig+0x40>
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	4a3f      	ldr	r2, [pc, #252]	; (8010d6c <TIM_Base_SetConfig+0x130>)
 8010c70:	4293      	cmp	r3, r2
 8010c72:	d003      	beq.n	8010c7c <TIM_Base_SetConfig+0x40>
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	4a3e      	ldr	r2, [pc, #248]	; (8010d70 <TIM_Base_SetConfig+0x134>)
 8010c78:	4293      	cmp	r3, r2
 8010c7a:	d108      	bne.n	8010c8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010c82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	68fa      	ldr	r2, [r7, #12]
 8010c8a:	4313      	orrs	r3, r2
 8010c8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	4a33      	ldr	r2, [pc, #204]	; (8010d60 <TIM_Base_SetConfig+0x124>)
 8010c92:	4293      	cmp	r3, r2
 8010c94:	d027      	beq.n	8010ce6 <TIM_Base_SetConfig+0xaa>
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010c9c:	d023      	beq.n	8010ce6 <TIM_Base_SetConfig+0xaa>
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	4a30      	ldr	r2, [pc, #192]	; (8010d64 <TIM_Base_SetConfig+0x128>)
 8010ca2:	4293      	cmp	r3, r2
 8010ca4:	d01f      	beq.n	8010ce6 <TIM_Base_SetConfig+0xaa>
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	4a2f      	ldr	r2, [pc, #188]	; (8010d68 <TIM_Base_SetConfig+0x12c>)
 8010caa:	4293      	cmp	r3, r2
 8010cac:	d01b      	beq.n	8010ce6 <TIM_Base_SetConfig+0xaa>
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	4a2e      	ldr	r2, [pc, #184]	; (8010d6c <TIM_Base_SetConfig+0x130>)
 8010cb2:	4293      	cmp	r3, r2
 8010cb4:	d017      	beq.n	8010ce6 <TIM_Base_SetConfig+0xaa>
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	4a2d      	ldr	r2, [pc, #180]	; (8010d70 <TIM_Base_SetConfig+0x134>)
 8010cba:	4293      	cmp	r3, r2
 8010cbc:	d013      	beq.n	8010ce6 <TIM_Base_SetConfig+0xaa>
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	4a2c      	ldr	r2, [pc, #176]	; (8010d74 <TIM_Base_SetConfig+0x138>)
 8010cc2:	4293      	cmp	r3, r2
 8010cc4:	d00f      	beq.n	8010ce6 <TIM_Base_SetConfig+0xaa>
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	4a2b      	ldr	r2, [pc, #172]	; (8010d78 <TIM_Base_SetConfig+0x13c>)
 8010cca:	4293      	cmp	r3, r2
 8010ccc:	d00b      	beq.n	8010ce6 <TIM_Base_SetConfig+0xaa>
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	4a2a      	ldr	r2, [pc, #168]	; (8010d7c <TIM_Base_SetConfig+0x140>)
 8010cd2:	4293      	cmp	r3, r2
 8010cd4:	d007      	beq.n	8010ce6 <TIM_Base_SetConfig+0xaa>
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	4a29      	ldr	r2, [pc, #164]	; (8010d80 <TIM_Base_SetConfig+0x144>)
 8010cda:	4293      	cmp	r3, r2
 8010cdc:	d003      	beq.n	8010ce6 <TIM_Base_SetConfig+0xaa>
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	4a28      	ldr	r2, [pc, #160]	; (8010d84 <TIM_Base_SetConfig+0x148>)
 8010ce2:	4293      	cmp	r3, r2
 8010ce4:	d108      	bne.n	8010cf8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	68db      	ldr	r3, [r3, #12]
 8010cf2:	68fa      	ldr	r2, [r7, #12]
 8010cf4:	4313      	orrs	r3, r2
 8010cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	695b      	ldr	r3, [r3, #20]
 8010d02:	4313      	orrs	r3, r2
 8010d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	68fa      	ldr	r2, [r7, #12]
 8010d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	689a      	ldr	r2, [r3, #8]
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010d14:	683b      	ldr	r3, [r7, #0]
 8010d16:	681a      	ldr	r2, [r3, #0]
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	4a10      	ldr	r2, [pc, #64]	; (8010d60 <TIM_Base_SetConfig+0x124>)
 8010d20:	4293      	cmp	r3, r2
 8010d22:	d00f      	beq.n	8010d44 <TIM_Base_SetConfig+0x108>
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	4a12      	ldr	r2, [pc, #72]	; (8010d70 <TIM_Base_SetConfig+0x134>)
 8010d28:	4293      	cmp	r3, r2
 8010d2a:	d00b      	beq.n	8010d44 <TIM_Base_SetConfig+0x108>
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	4a11      	ldr	r2, [pc, #68]	; (8010d74 <TIM_Base_SetConfig+0x138>)
 8010d30:	4293      	cmp	r3, r2
 8010d32:	d007      	beq.n	8010d44 <TIM_Base_SetConfig+0x108>
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	4a10      	ldr	r2, [pc, #64]	; (8010d78 <TIM_Base_SetConfig+0x13c>)
 8010d38:	4293      	cmp	r3, r2
 8010d3a:	d003      	beq.n	8010d44 <TIM_Base_SetConfig+0x108>
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	4a0f      	ldr	r2, [pc, #60]	; (8010d7c <TIM_Base_SetConfig+0x140>)
 8010d40:	4293      	cmp	r3, r2
 8010d42:	d103      	bne.n	8010d4c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	691a      	ldr	r2, [r3, #16]
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2201      	movs	r2, #1
 8010d50:	615a      	str	r2, [r3, #20]
}
 8010d52:	bf00      	nop
 8010d54:	3714      	adds	r7, #20
 8010d56:	46bd      	mov	sp, r7
 8010d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5c:	4770      	bx	lr
 8010d5e:	bf00      	nop
 8010d60:	40010000 	.word	0x40010000
 8010d64:	40000400 	.word	0x40000400
 8010d68:	40000800 	.word	0x40000800
 8010d6c:	40000c00 	.word	0x40000c00
 8010d70:	40010400 	.word	0x40010400
 8010d74:	40014000 	.word	0x40014000
 8010d78:	40014400 	.word	0x40014400
 8010d7c:	40014800 	.word	0x40014800
 8010d80:	4000e000 	.word	0x4000e000
 8010d84:	4000e400 	.word	0x4000e400

08010d88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010d88:	b480      	push	{r7}
 8010d8a:	b087      	sub	sp, #28
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
 8010d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	6a1b      	ldr	r3, [r3, #32]
 8010d96:	f023 0201 	bic.w	r2, r3, #1
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	6a1b      	ldr	r3, [r3, #32]
 8010da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	685b      	ldr	r3, [r3, #4]
 8010da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	699b      	ldr	r3, [r3, #24]
 8010dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010db0:	68fa      	ldr	r2, [r7, #12]
 8010db2:	4b37      	ldr	r3, [pc, #220]	; (8010e90 <TIM_OC1_SetConfig+0x108>)
 8010db4:	4013      	ands	r3, r2
 8010db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	f023 0303 	bic.w	r3, r3, #3
 8010dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010dc0:	683b      	ldr	r3, [r7, #0]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	68fa      	ldr	r2, [r7, #12]
 8010dc6:	4313      	orrs	r3, r2
 8010dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010dca:	697b      	ldr	r3, [r7, #20]
 8010dcc:	f023 0302 	bic.w	r3, r3, #2
 8010dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010dd2:	683b      	ldr	r3, [r7, #0]
 8010dd4:	689b      	ldr	r3, [r3, #8]
 8010dd6:	697a      	ldr	r2, [r7, #20]
 8010dd8:	4313      	orrs	r3, r2
 8010dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	4a2d      	ldr	r2, [pc, #180]	; (8010e94 <TIM_OC1_SetConfig+0x10c>)
 8010de0:	4293      	cmp	r3, r2
 8010de2:	d00f      	beq.n	8010e04 <TIM_OC1_SetConfig+0x7c>
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	4a2c      	ldr	r2, [pc, #176]	; (8010e98 <TIM_OC1_SetConfig+0x110>)
 8010de8:	4293      	cmp	r3, r2
 8010dea:	d00b      	beq.n	8010e04 <TIM_OC1_SetConfig+0x7c>
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	4a2b      	ldr	r2, [pc, #172]	; (8010e9c <TIM_OC1_SetConfig+0x114>)
 8010df0:	4293      	cmp	r3, r2
 8010df2:	d007      	beq.n	8010e04 <TIM_OC1_SetConfig+0x7c>
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	4a2a      	ldr	r2, [pc, #168]	; (8010ea0 <TIM_OC1_SetConfig+0x118>)
 8010df8:	4293      	cmp	r3, r2
 8010dfa:	d003      	beq.n	8010e04 <TIM_OC1_SetConfig+0x7c>
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	4a29      	ldr	r2, [pc, #164]	; (8010ea4 <TIM_OC1_SetConfig+0x11c>)
 8010e00:	4293      	cmp	r3, r2
 8010e02:	d10c      	bne.n	8010e1e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010e04:	697b      	ldr	r3, [r7, #20]
 8010e06:	f023 0308 	bic.w	r3, r3, #8
 8010e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	68db      	ldr	r3, [r3, #12]
 8010e10:	697a      	ldr	r2, [r7, #20]
 8010e12:	4313      	orrs	r3, r2
 8010e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010e16:	697b      	ldr	r3, [r7, #20]
 8010e18:	f023 0304 	bic.w	r3, r3, #4
 8010e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	4a1c      	ldr	r2, [pc, #112]	; (8010e94 <TIM_OC1_SetConfig+0x10c>)
 8010e22:	4293      	cmp	r3, r2
 8010e24:	d00f      	beq.n	8010e46 <TIM_OC1_SetConfig+0xbe>
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	4a1b      	ldr	r2, [pc, #108]	; (8010e98 <TIM_OC1_SetConfig+0x110>)
 8010e2a:	4293      	cmp	r3, r2
 8010e2c:	d00b      	beq.n	8010e46 <TIM_OC1_SetConfig+0xbe>
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	4a1a      	ldr	r2, [pc, #104]	; (8010e9c <TIM_OC1_SetConfig+0x114>)
 8010e32:	4293      	cmp	r3, r2
 8010e34:	d007      	beq.n	8010e46 <TIM_OC1_SetConfig+0xbe>
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	4a19      	ldr	r2, [pc, #100]	; (8010ea0 <TIM_OC1_SetConfig+0x118>)
 8010e3a:	4293      	cmp	r3, r2
 8010e3c:	d003      	beq.n	8010e46 <TIM_OC1_SetConfig+0xbe>
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	4a18      	ldr	r2, [pc, #96]	; (8010ea4 <TIM_OC1_SetConfig+0x11c>)
 8010e42:	4293      	cmp	r3, r2
 8010e44:	d111      	bne.n	8010e6a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010e46:	693b      	ldr	r3, [r7, #16]
 8010e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010e4e:	693b      	ldr	r3, [r7, #16]
 8010e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010e56:	683b      	ldr	r3, [r7, #0]
 8010e58:	695b      	ldr	r3, [r3, #20]
 8010e5a:	693a      	ldr	r2, [r7, #16]
 8010e5c:	4313      	orrs	r3, r2
 8010e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	699b      	ldr	r3, [r3, #24]
 8010e64:	693a      	ldr	r2, [r7, #16]
 8010e66:	4313      	orrs	r3, r2
 8010e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	693a      	ldr	r2, [r7, #16]
 8010e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	68fa      	ldr	r2, [r7, #12]
 8010e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010e76:	683b      	ldr	r3, [r7, #0]
 8010e78:	685a      	ldr	r2, [r3, #4]
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	697a      	ldr	r2, [r7, #20]
 8010e82:	621a      	str	r2, [r3, #32]
}
 8010e84:	bf00      	nop
 8010e86:	371c      	adds	r7, #28
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8e:	4770      	bx	lr
 8010e90:	fffeff8f 	.word	0xfffeff8f
 8010e94:	40010000 	.word	0x40010000
 8010e98:	40010400 	.word	0x40010400
 8010e9c:	40014000 	.word	0x40014000
 8010ea0:	40014400 	.word	0x40014400
 8010ea4:	40014800 	.word	0x40014800

08010ea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010ea8:	b480      	push	{r7}
 8010eaa:	b087      	sub	sp, #28
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
 8010eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6a1b      	ldr	r3, [r3, #32]
 8010eb6:	f023 0210 	bic.w	r2, r3, #16
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	6a1b      	ldr	r3, [r3, #32]
 8010ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	685b      	ldr	r3, [r3, #4]
 8010ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	699b      	ldr	r3, [r3, #24]
 8010ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010ed0:	68fa      	ldr	r2, [r7, #12]
 8010ed2:	4b34      	ldr	r3, [pc, #208]	; (8010fa4 <TIM_OC2_SetConfig+0xfc>)
 8010ed4:	4013      	ands	r3, r2
 8010ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	021b      	lsls	r3, r3, #8
 8010ee6:	68fa      	ldr	r2, [r7, #12]
 8010ee8:	4313      	orrs	r3, r2
 8010eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010eec:	697b      	ldr	r3, [r7, #20]
 8010eee:	f023 0320 	bic.w	r3, r3, #32
 8010ef2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	689b      	ldr	r3, [r3, #8]
 8010ef8:	011b      	lsls	r3, r3, #4
 8010efa:	697a      	ldr	r2, [r7, #20]
 8010efc:	4313      	orrs	r3, r2
 8010efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	4a29      	ldr	r2, [pc, #164]	; (8010fa8 <TIM_OC2_SetConfig+0x100>)
 8010f04:	4293      	cmp	r3, r2
 8010f06:	d003      	beq.n	8010f10 <TIM_OC2_SetConfig+0x68>
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	4a28      	ldr	r2, [pc, #160]	; (8010fac <TIM_OC2_SetConfig+0x104>)
 8010f0c:	4293      	cmp	r3, r2
 8010f0e:	d10d      	bne.n	8010f2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010f10:	697b      	ldr	r3, [r7, #20]
 8010f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010f18:	683b      	ldr	r3, [r7, #0]
 8010f1a:	68db      	ldr	r3, [r3, #12]
 8010f1c:	011b      	lsls	r3, r3, #4
 8010f1e:	697a      	ldr	r2, [r7, #20]
 8010f20:	4313      	orrs	r3, r2
 8010f22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010f24:	697b      	ldr	r3, [r7, #20]
 8010f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	4a1e      	ldr	r2, [pc, #120]	; (8010fa8 <TIM_OC2_SetConfig+0x100>)
 8010f30:	4293      	cmp	r3, r2
 8010f32:	d00f      	beq.n	8010f54 <TIM_OC2_SetConfig+0xac>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	4a1d      	ldr	r2, [pc, #116]	; (8010fac <TIM_OC2_SetConfig+0x104>)
 8010f38:	4293      	cmp	r3, r2
 8010f3a:	d00b      	beq.n	8010f54 <TIM_OC2_SetConfig+0xac>
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	4a1c      	ldr	r2, [pc, #112]	; (8010fb0 <TIM_OC2_SetConfig+0x108>)
 8010f40:	4293      	cmp	r3, r2
 8010f42:	d007      	beq.n	8010f54 <TIM_OC2_SetConfig+0xac>
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	4a1b      	ldr	r2, [pc, #108]	; (8010fb4 <TIM_OC2_SetConfig+0x10c>)
 8010f48:	4293      	cmp	r3, r2
 8010f4a:	d003      	beq.n	8010f54 <TIM_OC2_SetConfig+0xac>
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	4a1a      	ldr	r2, [pc, #104]	; (8010fb8 <TIM_OC2_SetConfig+0x110>)
 8010f50:	4293      	cmp	r3, r2
 8010f52:	d113      	bne.n	8010f7c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010f54:	693b      	ldr	r3, [r7, #16]
 8010f56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010f5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010f62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	695b      	ldr	r3, [r3, #20]
 8010f68:	009b      	lsls	r3, r3, #2
 8010f6a:	693a      	ldr	r2, [r7, #16]
 8010f6c:	4313      	orrs	r3, r2
 8010f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010f70:	683b      	ldr	r3, [r7, #0]
 8010f72:	699b      	ldr	r3, [r3, #24]
 8010f74:	009b      	lsls	r3, r3, #2
 8010f76:	693a      	ldr	r2, [r7, #16]
 8010f78:	4313      	orrs	r3, r2
 8010f7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	693a      	ldr	r2, [r7, #16]
 8010f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	68fa      	ldr	r2, [r7, #12]
 8010f86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	685a      	ldr	r2, [r3, #4]
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	697a      	ldr	r2, [r7, #20]
 8010f94:	621a      	str	r2, [r3, #32]
}
 8010f96:	bf00      	nop
 8010f98:	371c      	adds	r7, #28
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa0:	4770      	bx	lr
 8010fa2:	bf00      	nop
 8010fa4:	feff8fff 	.word	0xfeff8fff
 8010fa8:	40010000 	.word	0x40010000
 8010fac:	40010400 	.word	0x40010400
 8010fb0:	40014000 	.word	0x40014000
 8010fb4:	40014400 	.word	0x40014400
 8010fb8:	40014800 	.word	0x40014800

08010fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010fbc:	b480      	push	{r7}
 8010fbe:	b087      	sub	sp, #28
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
 8010fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6a1b      	ldr	r3, [r3, #32]
 8010fca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	6a1b      	ldr	r3, [r3, #32]
 8010fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	685b      	ldr	r3, [r3, #4]
 8010fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	69db      	ldr	r3, [r3, #28]
 8010fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010fe4:	68fa      	ldr	r2, [r7, #12]
 8010fe6:	4b33      	ldr	r3, [pc, #204]	; (80110b4 <TIM_OC3_SetConfig+0xf8>)
 8010fe8:	4013      	ands	r3, r2
 8010fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	f023 0303 	bic.w	r3, r3, #3
 8010ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	68fa      	ldr	r2, [r7, #12]
 8010ffa:	4313      	orrs	r3, r2
 8010ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010ffe:	697b      	ldr	r3, [r7, #20]
 8011000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8011006:	683b      	ldr	r3, [r7, #0]
 8011008:	689b      	ldr	r3, [r3, #8]
 801100a:	021b      	lsls	r3, r3, #8
 801100c:	697a      	ldr	r2, [r7, #20]
 801100e:	4313      	orrs	r3, r2
 8011010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	4a28      	ldr	r2, [pc, #160]	; (80110b8 <TIM_OC3_SetConfig+0xfc>)
 8011016:	4293      	cmp	r3, r2
 8011018:	d003      	beq.n	8011022 <TIM_OC3_SetConfig+0x66>
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	4a27      	ldr	r2, [pc, #156]	; (80110bc <TIM_OC3_SetConfig+0x100>)
 801101e:	4293      	cmp	r3, r2
 8011020:	d10d      	bne.n	801103e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011022:	697b      	ldr	r3, [r7, #20]
 8011024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	68db      	ldr	r3, [r3, #12]
 801102e:	021b      	lsls	r3, r3, #8
 8011030:	697a      	ldr	r2, [r7, #20]
 8011032:	4313      	orrs	r3, r2
 8011034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011036:	697b      	ldr	r3, [r7, #20]
 8011038:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801103c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	4a1d      	ldr	r2, [pc, #116]	; (80110b8 <TIM_OC3_SetConfig+0xfc>)
 8011042:	4293      	cmp	r3, r2
 8011044:	d00f      	beq.n	8011066 <TIM_OC3_SetConfig+0xaa>
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	4a1c      	ldr	r2, [pc, #112]	; (80110bc <TIM_OC3_SetConfig+0x100>)
 801104a:	4293      	cmp	r3, r2
 801104c:	d00b      	beq.n	8011066 <TIM_OC3_SetConfig+0xaa>
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	4a1b      	ldr	r2, [pc, #108]	; (80110c0 <TIM_OC3_SetConfig+0x104>)
 8011052:	4293      	cmp	r3, r2
 8011054:	d007      	beq.n	8011066 <TIM_OC3_SetConfig+0xaa>
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	4a1a      	ldr	r2, [pc, #104]	; (80110c4 <TIM_OC3_SetConfig+0x108>)
 801105a:	4293      	cmp	r3, r2
 801105c:	d003      	beq.n	8011066 <TIM_OC3_SetConfig+0xaa>
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	4a19      	ldr	r2, [pc, #100]	; (80110c8 <TIM_OC3_SetConfig+0x10c>)
 8011062:	4293      	cmp	r3, r2
 8011064:	d113      	bne.n	801108e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011066:	693b      	ldr	r3, [r7, #16]
 8011068:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801106c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	695b      	ldr	r3, [r3, #20]
 801107a:	011b      	lsls	r3, r3, #4
 801107c:	693a      	ldr	r2, [r7, #16]
 801107e:	4313      	orrs	r3, r2
 8011080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	699b      	ldr	r3, [r3, #24]
 8011086:	011b      	lsls	r3, r3, #4
 8011088:	693a      	ldr	r2, [r7, #16]
 801108a:	4313      	orrs	r3, r2
 801108c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	693a      	ldr	r2, [r7, #16]
 8011092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	68fa      	ldr	r2, [r7, #12]
 8011098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801109a:	683b      	ldr	r3, [r7, #0]
 801109c:	685a      	ldr	r2, [r3, #4]
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	697a      	ldr	r2, [r7, #20]
 80110a6:	621a      	str	r2, [r3, #32]
}
 80110a8:	bf00      	nop
 80110aa:	371c      	adds	r7, #28
 80110ac:	46bd      	mov	sp, r7
 80110ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b2:	4770      	bx	lr
 80110b4:	fffeff8f 	.word	0xfffeff8f
 80110b8:	40010000 	.word	0x40010000
 80110bc:	40010400 	.word	0x40010400
 80110c0:	40014000 	.word	0x40014000
 80110c4:	40014400 	.word	0x40014400
 80110c8:	40014800 	.word	0x40014800

080110cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80110cc:	b480      	push	{r7}
 80110ce:	b087      	sub	sp, #28
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
 80110d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	6a1b      	ldr	r3, [r3, #32]
 80110da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6a1b      	ldr	r3, [r3, #32]
 80110e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	685b      	ldr	r3, [r3, #4]
 80110ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	69db      	ldr	r3, [r3, #28]
 80110f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80110f4:	68fa      	ldr	r2, [r7, #12]
 80110f6:	4b24      	ldr	r3, [pc, #144]	; (8011188 <TIM_OC4_SetConfig+0xbc>)
 80110f8:	4013      	ands	r3, r2
 80110fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	021b      	lsls	r3, r3, #8
 801110a:	68fa      	ldr	r2, [r7, #12]
 801110c:	4313      	orrs	r3, r2
 801110e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011110:	693b      	ldr	r3, [r7, #16]
 8011112:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	689b      	ldr	r3, [r3, #8]
 801111c:	031b      	lsls	r3, r3, #12
 801111e:	693a      	ldr	r2, [r7, #16]
 8011120:	4313      	orrs	r3, r2
 8011122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	4a19      	ldr	r2, [pc, #100]	; (801118c <TIM_OC4_SetConfig+0xc0>)
 8011128:	4293      	cmp	r3, r2
 801112a:	d00f      	beq.n	801114c <TIM_OC4_SetConfig+0x80>
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	4a18      	ldr	r2, [pc, #96]	; (8011190 <TIM_OC4_SetConfig+0xc4>)
 8011130:	4293      	cmp	r3, r2
 8011132:	d00b      	beq.n	801114c <TIM_OC4_SetConfig+0x80>
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	4a17      	ldr	r2, [pc, #92]	; (8011194 <TIM_OC4_SetConfig+0xc8>)
 8011138:	4293      	cmp	r3, r2
 801113a:	d007      	beq.n	801114c <TIM_OC4_SetConfig+0x80>
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	4a16      	ldr	r2, [pc, #88]	; (8011198 <TIM_OC4_SetConfig+0xcc>)
 8011140:	4293      	cmp	r3, r2
 8011142:	d003      	beq.n	801114c <TIM_OC4_SetConfig+0x80>
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	4a15      	ldr	r2, [pc, #84]	; (801119c <TIM_OC4_SetConfig+0xd0>)
 8011148:	4293      	cmp	r3, r2
 801114a:	d109      	bne.n	8011160 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801114c:	697b      	ldr	r3, [r7, #20]
 801114e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011152:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	695b      	ldr	r3, [r3, #20]
 8011158:	019b      	lsls	r3, r3, #6
 801115a:	697a      	ldr	r2, [r7, #20]
 801115c:	4313      	orrs	r3, r2
 801115e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	697a      	ldr	r2, [r7, #20]
 8011164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	68fa      	ldr	r2, [r7, #12]
 801116a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801116c:	683b      	ldr	r3, [r7, #0]
 801116e:	685a      	ldr	r2, [r3, #4]
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	693a      	ldr	r2, [r7, #16]
 8011178:	621a      	str	r2, [r3, #32]
}
 801117a:	bf00      	nop
 801117c:	371c      	adds	r7, #28
 801117e:	46bd      	mov	sp, r7
 8011180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011184:	4770      	bx	lr
 8011186:	bf00      	nop
 8011188:	feff8fff 	.word	0xfeff8fff
 801118c:	40010000 	.word	0x40010000
 8011190:	40010400 	.word	0x40010400
 8011194:	40014000 	.word	0x40014000
 8011198:	40014400 	.word	0x40014400
 801119c:	40014800 	.word	0x40014800

080111a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80111a0:	b480      	push	{r7}
 80111a2:	b087      	sub	sp, #28
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
 80111a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	6a1b      	ldr	r3, [r3, #32]
 80111ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	6a1b      	ldr	r3, [r3, #32]
 80111ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	685b      	ldr	r3, [r3, #4]
 80111c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80111c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80111c8:	68fa      	ldr	r2, [r7, #12]
 80111ca:	4b21      	ldr	r3, [pc, #132]	; (8011250 <TIM_OC5_SetConfig+0xb0>)
 80111cc:	4013      	ands	r3, r2
 80111ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80111d0:	683b      	ldr	r3, [r7, #0]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	68fa      	ldr	r2, [r7, #12]
 80111d6:	4313      	orrs	r3, r2
 80111d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80111da:	693b      	ldr	r3, [r7, #16]
 80111dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80111e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	689b      	ldr	r3, [r3, #8]
 80111e6:	041b      	lsls	r3, r3, #16
 80111e8:	693a      	ldr	r2, [r7, #16]
 80111ea:	4313      	orrs	r3, r2
 80111ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	4a18      	ldr	r2, [pc, #96]	; (8011254 <TIM_OC5_SetConfig+0xb4>)
 80111f2:	4293      	cmp	r3, r2
 80111f4:	d00f      	beq.n	8011216 <TIM_OC5_SetConfig+0x76>
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	4a17      	ldr	r2, [pc, #92]	; (8011258 <TIM_OC5_SetConfig+0xb8>)
 80111fa:	4293      	cmp	r3, r2
 80111fc:	d00b      	beq.n	8011216 <TIM_OC5_SetConfig+0x76>
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	4a16      	ldr	r2, [pc, #88]	; (801125c <TIM_OC5_SetConfig+0xbc>)
 8011202:	4293      	cmp	r3, r2
 8011204:	d007      	beq.n	8011216 <TIM_OC5_SetConfig+0x76>
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	4a15      	ldr	r2, [pc, #84]	; (8011260 <TIM_OC5_SetConfig+0xc0>)
 801120a:	4293      	cmp	r3, r2
 801120c:	d003      	beq.n	8011216 <TIM_OC5_SetConfig+0x76>
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	4a14      	ldr	r2, [pc, #80]	; (8011264 <TIM_OC5_SetConfig+0xc4>)
 8011212:	4293      	cmp	r3, r2
 8011214:	d109      	bne.n	801122a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8011216:	697b      	ldr	r3, [r7, #20]
 8011218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801121c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	695b      	ldr	r3, [r3, #20]
 8011222:	021b      	lsls	r3, r3, #8
 8011224:	697a      	ldr	r2, [r7, #20]
 8011226:	4313      	orrs	r3, r2
 8011228:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	697a      	ldr	r2, [r7, #20]
 801122e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	68fa      	ldr	r2, [r7, #12]
 8011234:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	685a      	ldr	r2, [r3, #4]
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	693a      	ldr	r2, [r7, #16]
 8011242:	621a      	str	r2, [r3, #32]
}
 8011244:	bf00      	nop
 8011246:	371c      	adds	r7, #28
 8011248:	46bd      	mov	sp, r7
 801124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124e:	4770      	bx	lr
 8011250:	fffeff8f 	.word	0xfffeff8f
 8011254:	40010000 	.word	0x40010000
 8011258:	40010400 	.word	0x40010400
 801125c:	40014000 	.word	0x40014000
 8011260:	40014400 	.word	0x40014400
 8011264:	40014800 	.word	0x40014800

08011268 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8011268:	b480      	push	{r7}
 801126a:	b087      	sub	sp, #28
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
 8011270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	6a1b      	ldr	r3, [r3, #32]
 8011276:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	6a1b      	ldr	r3, [r3, #32]
 8011282:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801128e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011290:	68fa      	ldr	r2, [r7, #12]
 8011292:	4b22      	ldr	r3, [pc, #136]	; (801131c <TIM_OC6_SetConfig+0xb4>)
 8011294:	4013      	ands	r3, r2
 8011296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011298:	683b      	ldr	r3, [r7, #0]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	021b      	lsls	r3, r3, #8
 801129e:	68fa      	ldr	r2, [r7, #12]
 80112a0:	4313      	orrs	r3, r2
 80112a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80112a4:	693b      	ldr	r3, [r7, #16]
 80112a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80112aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	689b      	ldr	r3, [r3, #8]
 80112b0:	051b      	lsls	r3, r3, #20
 80112b2:	693a      	ldr	r2, [r7, #16]
 80112b4:	4313      	orrs	r3, r2
 80112b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	4a19      	ldr	r2, [pc, #100]	; (8011320 <TIM_OC6_SetConfig+0xb8>)
 80112bc:	4293      	cmp	r3, r2
 80112be:	d00f      	beq.n	80112e0 <TIM_OC6_SetConfig+0x78>
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	4a18      	ldr	r2, [pc, #96]	; (8011324 <TIM_OC6_SetConfig+0xbc>)
 80112c4:	4293      	cmp	r3, r2
 80112c6:	d00b      	beq.n	80112e0 <TIM_OC6_SetConfig+0x78>
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	4a17      	ldr	r2, [pc, #92]	; (8011328 <TIM_OC6_SetConfig+0xc0>)
 80112cc:	4293      	cmp	r3, r2
 80112ce:	d007      	beq.n	80112e0 <TIM_OC6_SetConfig+0x78>
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	4a16      	ldr	r2, [pc, #88]	; (801132c <TIM_OC6_SetConfig+0xc4>)
 80112d4:	4293      	cmp	r3, r2
 80112d6:	d003      	beq.n	80112e0 <TIM_OC6_SetConfig+0x78>
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	4a15      	ldr	r2, [pc, #84]	; (8011330 <TIM_OC6_SetConfig+0xc8>)
 80112dc:	4293      	cmp	r3, r2
 80112de:	d109      	bne.n	80112f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80112e0:	697b      	ldr	r3, [r7, #20]
 80112e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80112e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	695b      	ldr	r3, [r3, #20]
 80112ec:	029b      	lsls	r3, r3, #10
 80112ee:	697a      	ldr	r2, [r7, #20]
 80112f0:	4313      	orrs	r3, r2
 80112f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	697a      	ldr	r2, [r7, #20]
 80112f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	68fa      	ldr	r2, [r7, #12]
 80112fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8011300:	683b      	ldr	r3, [r7, #0]
 8011302:	685a      	ldr	r2, [r3, #4]
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	693a      	ldr	r2, [r7, #16]
 801130c:	621a      	str	r2, [r3, #32]
}
 801130e:	bf00      	nop
 8011310:	371c      	adds	r7, #28
 8011312:	46bd      	mov	sp, r7
 8011314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011318:	4770      	bx	lr
 801131a:	bf00      	nop
 801131c:	feff8fff 	.word	0xfeff8fff
 8011320:	40010000 	.word	0x40010000
 8011324:	40010400 	.word	0x40010400
 8011328:	40014000 	.word	0x40014000
 801132c:	40014400 	.word	0x40014400
 8011330:	40014800 	.word	0x40014800

08011334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011334:	b480      	push	{r7}
 8011336:	b087      	sub	sp, #28
 8011338:	af00      	add	r7, sp, #0
 801133a:	60f8      	str	r0, [r7, #12]
 801133c:	60b9      	str	r1, [r7, #8]
 801133e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	6a1b      	ldr	r3, [r3, #32]
 8011344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	6a1b      	ldr	r3, [r3, #32]
 801134a:	f023 0201 	bic.w	r2, r3, #1
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	699b      	ldr	r3, [r3, #24]
 8011356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011358:	693b      	ldr	r3, [r7, #16]
 801135a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801135e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	011b      	lsls	r3, r3, #4
 8011364:	693a      	ldr	r2, [r7, #16]
 8011366:	4313      	orrs	r3, r2
 8011368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801136a:	697b      	ldr	r3, [r7, #20]
 801136c:	f023 030a 	bic.w	r3, r3, #10
 8011370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011372:	697a      	ldr	r2, [r7, #20]
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	4313      	orrs	r3, r2
 8011378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	693a      	ldr	r2, [r7, #16]
 801137e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	697a      	ldr	r2, [r7, #20]
 8011384:	621a      	str	r2, [r3, #32]
}
 8011386:	bf00      	nop
 8011388:	371c      	adds	r7, #28
 801138a:	46bd      	mov	sp, r7
 801138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011390:	4770      	bx	lr

08011392 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011392:	b480      	push	{r7}
 8011394:	b087      	sub	sp, #28
 8011396:	af00      	add	r7, sp, #0
 8011398:	60f8      	str	r0, [r7, #12]
 801139a:	60b9      	str	r1, [r7, #8]
 801139c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	6a1b      	ldr	r3, [r3, #32]
 80113a2:	f023 0210 	bic.w	r2, r3, #16
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	699b      	ldr	r3, [r3, #24]
 80113ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	6a1b      	ldr	r3, [r3, #32]
 80113b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80113b6:	697b      	ldr	r3, [r7, #20]
 80113b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80113bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	031b      	lsls	r3, r3, #12
 80113c2:	697a      	ldr	r2, [r7, #20]
 80113c4:	4313      	orrs	r3, r2
 80113c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80113ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	011b      	lsls	r3, r3, #4
 80113d4:	693a      	ldr	r2, [r7, #16]
 80113d6:	4313      	orrs	r3, r2
 80113d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	697a      	ldr	r2, [r7, #20]
 80113de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	693a      	ldr	r2, [r7, #16]
 80113e4:	621a      	str	r2, [r3, #32]
}
 80113e6:	bf00      	nop
 80113e8:	371c      	adds	r7, #28
 80113ea:	46bd      	mov	sp, r7
 80113ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f0:	4770      	bx	lr
	...

080113f4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80113f4:	b480      	push	{r7}
 80113f6:	b085      	sub	sp, #20
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
 80113fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	689b      	ldr	r3, [r3, #8]
 8011402:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8011404:	68fa      	ldr	r2, [r7, #12]
 8011406:	4b09      	ldr	r3, [pc, #36]	; (801142c <TIM_ITRx_SetConfig+0x38>)
 8011408:	4013      	ands	r3, r2
 801140a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801140c:	683a      	ldr	r2, [r7, #0]
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	4313      	orrs	r3, r2
 8011412:	f043 0307 	orr.w	r3, r3, #7
 8011416:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	68fa      	ldr	r2, [r7, #12]
 801141c:	609a      	str	r2, [r3, #8]
}
 801141e:	bf00      	nop
 8011420:	3714      	adds	r7, #20
 8011422:	46bd      	mov	sp, r7
 8011424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011428:	4770      	bx	lr
 801142a:	bf00      	nop
 801142c:	ffcfff8f 	.word	0xffcfff8f

08011430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011430:	b480      	push	{r7}
 8011432:	b087      	sub	sp, #28
 8011434:	af00      	add	r7, sp, #0
 8011436:	60f8      	str	r0, [r7, #12]
 8011438:	60b9      	str	r1, [r7, #8]
 801143a:	607a      	str	r2, [r7, #4]
 801143c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	689b      	ldr	r3, [r3, #8]
 8011442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801144a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801144c:	683b      	ldr	r3, [r7, #0]
 801144e:	021a      	lsls	r2, r3, #8
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	431a      	orrs	r2, r3
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	4313      	orrs	r3, r2
 8011458:	697a      	ldr	r2, [r7, #20]
 801145a:	4313      	orrs	r3, r2
 801145c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	697a      	ldr	r2, [r7, #20]
 8011462:	609a      	str	r2, [r3, #8]
}
 8011464:	bf00      	nop
 8011466:	371c      	adds	r7, #28
 8011468:	46bd      	mov	sp, r7
 801146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801146e:	4770      	bx	lr

08011470 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011470:	b480      	push	{r7}
 8011472:	b087      	sub	sp, #28
 8011474:	af00      	add	r7, sp, #0
 8011476:	60f8      	str	r0, [r7, #12]
 8011478:	60b9      	str	r1, [r7, #8]
 801147a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801147c:	68bb      	ldr	r3, [r7, #8]
 801147e:	f003 031f 	and.w	r3, r3, #31
 8011482:	2201      	movs	r2, #1
 8011484:	fa02 f303 	lsl.w	r3, r2, r3
 8011488:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	6a1a      	ldr	r2, [r3, #32]
 801148e:	697b      	ldr	r3, [r7, #20]
 8011490:	43db      	mvns	r3, r3
 8011492:	401a      	ands	r2, r3
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	6a1a      	ldr	r2, [r3, #32]
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	f003 031f 	and.w	r3, r3, #31
 80114a2:	6879      	ldr	r1, [r7, #4]
 80114a4:	fa01 f303 	lsl.w	r3, r1, r3
 80114a8:	431a      	orrs	r2, r3
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	621a      	str	r2, [r3, #32]
}
 80114ae:	bf00      	nop
 80114b0:	371c      	adds	r7, #28
 80114b2:	46bd      	mov	sp, r7
 80114b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b8:	4770      	bx	lr
	...

080114bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80114bc:	b480      	push	{r7}
 80114be:	b085      	sub	sp, #20
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
 80114c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80114cc:	2b01      	cmp	r3, #1
 80114ce:	d101      	bne.n	80114d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80114d0:	2302      	movs	r3, #2
 80114d2:	e077      	b.n	80115c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2201      	movs	r2, #1
 80114d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	2202      	movs	r2, #2
 80114e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	685b      	ldr	r3, [r3, #4]
 80114ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	689b      	ldr	r3, [r3, #8]
 80114f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	4a35      	ldr	r2, [pc, #212]	; (80115d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80114fa:	4293      	cmp	r3, r2
 80114fc:	d004      	beq.n	8011508 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	4a34      	ldr	r2, [pc, #208]	; (80115d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011504:	4293      	cmp	r3, r2
 8011506:	d108      	bne.n	801151a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801150e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	685b      	ldr	r3, [r3, #4]
 8011514:	68fa      	ldr	r2, [r7, #12]
 8011516:	4313      	orrs	r3, r2
 8011518:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011520:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011522:	683b      	ldr	r3, [r7, #0]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	68fa      	ldr	r2, [r7, #12]
 8011528:	4313      	orrs	r3, r2
 801152a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	68fa      	ldr	r2, [r7, #12]
 8011532:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	4a25      	ldr	r2, [pc, #148]	; (80115d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801153a:	4293      	cmp	r3, r2
 801153c:	d02c      	beq.n	8011598 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011546:	d027      	beq.n	8011598 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	4a22      	ldr	r2, [pc, #136]	; (80115d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801154e:	4293      	cmp	r3, r2
 8011550:	d022      	beq.n	8011598 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	4a21      	ldr	r2, [pc, #132]	; (80115dc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8011558:	4293      	cmp	r3, r2
 801155a:	d01d      	beq.n	8011598 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	4a1f      	ldr	r2, [pc, #124]	; (80115e0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8011562:	4293      	cmp	r3, r2
 8011564:	d018      	beq.n	8011598 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	4a1a      	ldr	r2, [pc, #104]	; (80115d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801156c:	4293      	cmp	r3, r2
 801156e:	d013      	beq.n	8011598 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	4a1b      	ldr	r2, [pc, #108]	; (80115e4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8011576:	4293      	cmp	r3, r2
 8011578:	d00e      	beq.n	8011598 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	4a1a      	ldr	r2, [pc, #104]	; (80115e8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8011580:	4293      	cmp	r3, r2
 8011582:	d009      	beq.n	8011598 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	4a18      	ldr	r2, [pc, #96]	; (80115ec <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801158a:	4293      	cmp	r3, r2
 801158c:	d004      	beq.n	8011598 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	4a17      	ldr	r2, [pc, #92]	; (80115f0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011594:	4293      	cmp	r3, r2
 8011596:	d10c      	bne.n	80115b2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801159e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	689b      	ldr	r3, [r3, #8]
 80115a4:	68ba      	ldr	r2, [r7, #8]
 80115a6:	4313      	orrs	r3, r2
 80115a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	68ba      	ldr	r2, [r7, #8]
 80115b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	2201      	movs	r2, #1
 80115b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2200      	movs	r2, #0
 80115be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80115c2:	2300      	movs	r3, #0
}
 80115c4:	4618      	mov	r0, r3
 80115c6:	3714      	adds	r7, #20
 80115c8:	46bd      	mov	sp, r7
 80115ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ce:	4770      	bx	lr
 80115d0:	40010000 	.word	0x40010000
 80115d4:	40010400 	.word	0x40010400
 80115d8:	40000400 	.word	0x40000400
 80115dc:	40000800 	.word	0x40000800
 80115e0:	40000c00 	.word	0x40000c00
 80115e4:	40001800 	.word	0x40001800
 80115e8:	40014000 	.word	0x40014000
 80115ec:	4000e000 	.word	0x4000e000
 80115f0:	4000e400 	.word	0x4000e400

080115f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80115f4:	b480      	push	{r7}
 80115f6:	b085      	sub	sp, #20
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
 80115fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80115fe:	2300      	movs	r3, #0
 8011600:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011608:	2b01      	cmp	r3, #1
 801160a:	d101      	bne.n	8011610 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801160c:	2302      	movs	r3, #2
 801160e:	e087      	b.n	8011720 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2201      	movs	r2, #1
 8011614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	68db      	ldr	r3, [r3, #12]
 8011622:	4313      	orrs	r3, r2
 8011624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801162c:	683b      	ldr	r3, [r7, #0]
 801162e:	689b      	ldr	r3, [r3, #8]
 8011630:	4313      	orrs	r3, r2
 8011632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801163a:	683b      	ldr	r3, [r7, #0]
 801163c:	685b      	ldr	r3, [r3, #4]
 801163e:	4313      	orrs	r3, r2
 8011640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011648:	683b      	ldr	r3, [r7, #0]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	4313      	orrs	r3, r2
 801164e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	691b      	ldr	r3, [r3, #16]
 801165a:	4313      	orrs	r3, r2
 801165c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8011664:	683b      	ldr	r3, [r7, #0]
 8011666:	695b      	ldr	r3, [r3, #20]
 8011668:	4313      	orrs	r3, r2
 801166a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011676:	4313      	orrs	r3, r2
 8011678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	699b      	ldr	r3, [r3, #24]
 8011684:	041b      	lsls	r3, r3, #16
 8011686:	4313      	orrs	r3, r2
 8011688:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	4a27      	ldr	r2, [pc, #156]	; (801172c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8011690:	4293      	cmp	r3, r2
 8011692:	d004      	beq.n	801169e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	4a25      	ldr	r2, [pc, #148]	; (8011730 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801169a:	4293      	cmp	r3, r2
 801169c:	d106      	bne.n	80116ac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	69db      	ldr	r3, [r3, #28]
 80116a8:	4313      	orrs	r3, r2
 80116aa:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	4a1e      	ldr	r2, [pc, #120]	; (801172c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80116b2:	4293      	cmp	r3, r2
 80116b4:	d004      	beq.n	80116c0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	4a1d      	ldr	r2, [pc, #116]	; (8011730 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80116bc:	4293      	cmp	r3, r2
 80116be:	d126      	bne.n	801170e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116ca:	051b      	lsls	r3, r3, #20
 80116cc:	4313      	orrs	r3, r2
 80116ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	6a1b      	ldr	r3, [r3, #32]
 80116da:	4313      	orrs	r3, r2
 80116dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116e8:	4313      	orrs	r3, r2
 80116ea:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	4a0e      	ldr	r2, [pc, #56]	; (801172c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80116f2:	4293      	cmp	r3, r2
 80116f4:	d004      	beq.n	8011700 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	4a0d      	ldr	r2, [pc, #52]	; (8011730 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80116fc:	4293      	cmp	r3, r2
 80116fe:	d106      	bne.n	801170e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8011706:	683b      	ldr	r3, [r7, #0]
 8011708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801170a:	4313      	orrs	r3, r2
 801170c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	68fa      	ldr	r2, [r7, #12]
 8011714:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	2200      	movs	r2, #0
 801171a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801171e:	2300      	movs	r3, #0
}
 8011720:	4618      	mov	r0, r3
 8011722:	3714      	adds	r7, #20
 8011724:	46bd      	mov	sp, r7
 8011726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172a:	4770      	bx	lr
 801172c:	40010000 	.word	0x40010000
 8011730:	40010400 	.word	0x40010400

08011734 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b082      	sub	sp, #8
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d101      	bne.n	8011746 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011742:	2301      	movs	r3, #1
 8011744:	e042      	b.n	80117cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801174c:	2b00      	cmp	r3, #0
 801174e:	d106      	bne.n	801175e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	2200      	movs	r2, #0
 8011754:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011758:	6878      	ldr	r0, [r7, #4]
 801175a:	f7f8 fd8f 	bl	800a27c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	2224      	movs	r2, #36	; 0x24
 8011762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	681a      	ldr	r2, [r3, #0]
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	f022 0201 	bic.w	r2, r2, #1
 8011774:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011776:	6878      	ldr	r0, [r7, #4]
 8011778:	f000 fe48 	bl	801240c <UART_SetConfig>
 801177c:	4603      	mov	r3, r0
 801177e:	2b01      	cmp	r3, #1
 8011780:	d101      	bne.n	8011786 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8011782:	2301      	movs	r3, #1
 8011784:	e022      	b.n	80117cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801178a:	2b00      	cmp	r3, #0
 801178c:	d002      	beq.n	8011794 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801178e:	6878      	ldr	r0, [r7, #4]
 8011790:	f001 fc9a 	bl	80130c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	685a      	ldr	r2, [r3, #4]
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80117a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	689a      	ldr	r2, [r3, #8]
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80117b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	681a      	ldr	r2, [r3, #0]
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	f042 0201 	orr.w	r2, r2, #1
 80117c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80117c4:	6878      	ldr	r0, [r7, #4]
 80117c6:	f001 fd21 	bl	801320c <UART_CheckIdleState>
 80117ca:	4603      	mov	r3, r0
}
 80117cc:	4618      	mov	r0, r3
 80117ce:	3708      	adds	r7, #8
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd80      	pop	{r7, pc}

080117d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b08a      	sub	sp, #40	; 0x28
 80117d8:	af02      	add	r7, sp, #8
 80117da:	60f8      	str	r0, [r7, #12]
 80117dc:	60b9      	str	r1, [r7, #8]
 80117de:	603b      	str	r3, [r7, #0]
 80117e0:	4613      	mov	r3, r2
 80117e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80117ea:	2b20      	cmp	r3, #32
 80117ec:	f040 8083 	bne.w	80118f6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80117f0:	68bb      	ldr	r3, [r7, #8]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d002      	beq.n	80117fc <HAL_UART_Transmit+0x28>
 80117f6:	88fb      	ldrh	r3, [r7, #6]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d101      	bne.n	8011800 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80117fc:	2301      	movs	r3, #1
 80117fe:	e07b      	b.n	80118f8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011806:	2b01      	cmp	r3, #1
 8011808:	d101      	bne.n	801180e <HAL_UART_Transmit+0x3a>
 801180a:	2302      	movs	r3, #2
 801180c:	e074      	b.n	80118f8 <HAL_UART_Transmit+0x124>
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	2201      	movs	r2, #1
 8011812:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	2200      	movs	r2, #0
 801181a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	2221      	movs	r2, #33	; 0x21
 8011822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011826:	f7f8 ff2b 	bl	800a680 <HAL_GetTick>
 801182a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	88fa      	ldrh	r2, [r7, #6]
 8011830:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	88fa      	ldrh	r2, [r7, #6]
 8011838:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	689b      	ldr	r3, [r3, #8]
 8011840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011844:	d108      	bne.n	8011858 <HAL_UART_Transmit+0x84>
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	691b      	ldr	r3, [r3, #16]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d104      	bne.n	8011858 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 801184e:	2300      	movs	r3, #0
 8011850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8011852:	68bb      	ldr	r3, [r7, #8]
 8011854:	61bb      	str	r3, [r7, #24]
 8011856:	e003      	b.n	8011860 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8011858:	68bb      	ldr	r3, [r7, #8]
 801185a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801185c:	2300      	movs	r3, #0
 801185e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	2200      	movs	r2, #0
 8011864:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8011868:	e02c      	b.n	80118c4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	9300      	str	r3, [sp, #0]
 801186e:	697b      	ldr	r3, [r7, #20]
 8011870:	2200      	movs	r2, #0
 8011872:	2180      	movs	r1, #128	; 0x80
 8011874:	68f8      	ldr	r0, [r7, #12]
 8011876:	f001 fd14 	bl	80132a2 <UART_WaitOnFlagUntilTimeout>
 801187a:	4603      	mov	r3, r0
 801187c:	2b00      	cmp	r3, #0
 801187e:	d001      	beq.n	8011884 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8011880:	2303      	movs	r3, #3
 8011882:	e039      	b.n	80118f8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8011884:	69fb      	ldr	r3, [r7, #28]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d10b      	bne.n	80118a2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801188a:	69bb      	ldr	r3, [r7, #24]
 801188c:	881b      	ldrh	r3, [r3, #0]
 801188e:	461a      	mov	r2, r3
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011898:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801189a:	69bb      	ldr	r3, [r7, #24]
 801189c:	3302      	adds	r3, #2
 801189e:	61bb      	str	r3, [r7, #24]
 80118a0:	e007      	b.n	80118b2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80118a2:	69fb      	ldr	r3, [r7, #28]
 80118a4:	781a      	ldrb	r2, [r3, #0]
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80118ac:	69fb      	ldr	r3, [r7, #28]
 80118ae:	3301      	adds	r3, #1
 80118b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80118b8:	b29b      	uxth	r3, r3
 80118ba:	3b01      	subs	r3, #1
 80118bc:	b29a      	uxth	r2, r3
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80118ca:	b29b      	uxth	r3, r3
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d1cc      	bne.n	801186a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80118d0:	683b      	ldr	r3, [r7, #0]
 80118d2:	9300      	str	r3, [sp, #0]
 80118d4:	697b      	ldr	r3, [r7, #20]
 80118d6:	2200      	movs	r2, #0
 80118d8:	2140      	movs	r1, #64	; 0x40
 80118da:	68f8      	ldr	r0, [r7, #12]
 80118dc:	f001 fce1 	bl	80132a2 <UART_WaitOnFlagUntilTimeout>
 80118e0:	4603      	mov	r3, r0
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d001      	beq.n	80118ea <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80118e6:	2303      	movs	r3, #3
 80118e8:	e006      	b.n	80118f8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	2220      	movs	r2, #32
 80118ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80118f2:	2300      	movs	r3, #0
 80118f4:	e000      	b.n	80118f8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80118f6:	2302      	movs	r3, #2
  }
}
 80118f8:	4618      	mov	r0, r3
 80118fa:	3720      	adds	r7, #32
 80118fc:	46bd      	mov	sp, r7
 80118fe:	bd80      	pop	{r7, pc}

08011900 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b08a      	sub	sp, #40	; 0x28
 8011904:	af02      	add	r7, sp, #8
 8011906:	60f8      	str	r0, [r7, #12]
 8011908:	60b9      	str	r1, [r7, #8]
 801190a:	603b      	str	r3, [r7, #0]
 801190c:	4613      	mov	r3, r2
 801190e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011916:	2b20      	cmp	r3, #32
 8011918:	f040 80c0 	bne.w	8011a9c <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 801191c:	68bb      	ldr	r3, [r7, #8]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d002      	beq.n	8011928 <HAL_UART_Receive+0x28>
 8011922:	88fb      	ldrh	r3, [r7, #6]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d101      	bne.n	801192c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8011928:	2301      	movs	r3, #1
 801192a:	e0b8      	b.n	8011a9e <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011932:	2b01      	cmp	r3, #1
 8011934:	d101      	bne.n	801193a <HAL_UART_Receive+0x3a>
 8011936:	2302      	movs	r3, #2
 8011938:	e0b1      	b.n	8011a9e <HAL_UART_Receive+0x19e>
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	2201      	movs	r2, #1
 801193e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	2200      	movs	r2, #0
 8011946:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	2222      	movs	r2, #34	; 0x22
 801194e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	2200      	movs	r2, #0
 8011956:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011958:	f7f8 fe92 	bl	800a680 <HAL_GetTick>
 801195c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	88fa      	ldrh	r2, [r7, #6]
 8011962:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	88fa      	ldrh	r2, [r7, #6]
 801196a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	689b      	ldr	r3, [r3, #8]
 8011972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011976:	d10e      	bne.n	8011996 <HAL_UART_Receive+0x96>
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	691b      	ldr	r3, [r3, #16]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d105      	bne.n	801198c <HAL_UART_Receive+0x8c>
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011986:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801198a:	e02d      	b.n	80119e8 <HAL_UART_Receive+0xe8>
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	22ff      	movs	r2, #255	; 0xff
 8011990:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011994:	e028      	b.n	80119e8 <HAL_UART_Receive+0xe8>
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	689b      	ldr	r3, [r3, #8]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d10d      	bne.n	80119ba <HAL_UART_Receive+0xba>
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	691b      	ldr	r3, [r3, #16]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d104      	bne.n	80119b0 <HAL_UART_Receive+0xb0>
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	22ff      	movs	r2, #255	; 0xff
 80119aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80119ae:	e01b      	b.n	80119e8 <HAL_UART_Receive+0xe8>
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	227f      	movs	r2, #127	; 0x7f
 80119b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80119b8:	e016      	b.n	80119e8 <HAL_UART_Receive+0xe8>
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	689b      	ldr	r3, [r3, #8]
 80119be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80119c2:	d10d      	bne.n	80119e0 <HAL_UART_Receive+0xe0>
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	691b      	ldr	r3, [r3, #16]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d104      	bne.n	80119d6 <HAL_UART_Receive+0xd6>
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	227f      	movs	r2, #127	; 0x7f
 80119d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80119d4:	e008      	b.n	80119e8 <HAL_UART_Receive+0xe8>
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	223f      	movs	r2, #63	; 0x3f
 80119da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80119de:	e003      	b.n	80119e8 <HAL_UART_Receive+0xe8>
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	2200      	movs	r2, #0
 80119e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80119ee:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	689b      	ldr	r3, [r3, #8]
 80119f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80119f8:	d108      	bne.n	8011a0c <HAL_UART_Receive+0x10c>
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	691b      	ldr	r3, [r3, #16]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d104      	bne.n	8011a0c <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8011a02:	2300      	movs	r3, #0
 8011a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8011a06:	68bb      	ldr	r3, [r7, #8]
 8011a08:	61bb      	str	r3, [r7, #24]
 8011a0a:	e003      	b.n	8011a14 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011a10:	2300      	movs	r3, #0
 8011a12:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	2200      	movs	r2, #0
 8011a18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8011a1c:	e032      	b.n	8011a84 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8011a1e:	683b      	ldr	r3, [r7, #0]
 8011a20:	9300      	str	r3, [sp, #0]
 8011a22:	697b      	ldr	r3, [r7, #20]
 8011a24:	2200      	movs	r2, #0
 8011a26:	2120      	movs	r1, #32
 8011a28:	68f8      	ldr	r0, [r7, #12]
 8011a2a:	f001 fc3a 	bl	80132a2 <UART_WaitOnFlagUntilTimeout>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d001      	beq.n	8011a38 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8011a34:	2303      	movs	r3, #3
 8011a36:	e032      	b.n	8011a9e <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 8011a38:	69fb      	ldr	r3, [r7, #28]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d10c      	bne.n	8011a58 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a44:	b29a      	uxth	r2, r3
 8011a46:	8a7b      	ldrh	r3, [r7, #18]
 8011a48:	4013      	ands	r3, r2
 8011a4a:	b29a      	uxth	r2, r3
 8011a4c:	69bb      	ldr	r3, [r7, #24]
 8011a4e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8011a50:	69bb      	ldr	r3, [r7, #24]
 8011a52:	3302      	adds	r3, #2
 8011a54:	61bb      	str	r3, [r7, #24]
 8011a56:	e00c      	b.n	8011a72 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a5e:	b2da      	uxtb	r2, r3
 8011a60:	8a7b      	ldrh	r3, [r7, #18]
 8011a62:	b2db      	uxtb	r3, r3
 8011a64:	4013      	ands	r3, r2
 8011a66:	b2da      	uxtb	r2, r3
 8011a68:	69fb      	ldr	r3, [r7, #28]
 8011a6a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8011a6c:	69fb      	ldr	r3, [r7, #28]
 8011a6e:	3301      	adds	r3, #1
 8011a70:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011a78:	b29b      	uxth	r3, r3
 8011a7a:	3b01      	subs	r3, #1
 8011a7c:	b29a      	uxth	r2, r3
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011a8a:	b29b      	uxth	r3, r3
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d1c6      	bne.n	8011a1e <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	2220      	movs	r2, #32
 8011a94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8011a98:	2300      	movs	r3, #0
 8011a9a:	e000      	b.n	8011a9e <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8011a9c:	2302      	movs	r3, #2
  }
}
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	3720      	adds	r7, #32
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}
	...

08011aa8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b091      	sub	sp, #68	; 0x44
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	60f8      	str	r0, [r7, #12]
 8011ab0:	60b9      	str	r1, [r7, #8]
 8011ab2:	4613      	mov	r3, r2
 8011ab4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011abc:	2b20      	cmp	r3, #32
 8011abe:	f040 808c 	bne.w	8011bda <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8011ac2:	68bb      	ldr	r3, [r7, #8]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d002      	beq.n	8011ace <HAL_UART_Transmit_IT+0x26>
 8011ac8:	88fb      	ldrh	r3, [r7, #6]
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d101      	bne.n	8011ad2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8011ace:	2301      	movs	r3, #1
 8011ad0:	e084      	b.n	8011bdc <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011ad8:	2b01      	cmp	r3, #1
 8011ada:	d101      	bne.n	8011ae0 <HAL_UART_Transmit_IT+0x38>
 8011adc:	2302      	movs	r3, #2
 8011ade:	e07d      	b.n	8011bdc <HAL_UART_Transmit_IT+0x134>
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	2201      	movs	r2, #1
 8011ae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	68ba      	ldr	r2, [r7, #8]
 8011aec:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8011aee:	68fb      	ldr	r3, [r7, #12]
 8011af0:	88fa      	ldrh	r2, [r7, #6]
 8011af2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	88fa      	ldrh	r2, [r7, #6]
 8011afa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	2200      	movs	r2, #0
 8011b02:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	2200      	movs	r2, #0
 8011b08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	2221      	movs	r2, #33	; 0x21
 8011b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011b1c:	d12e      	bne.n	8011b7c <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	689b      	ldr	r3, [r3, #8]
 8011b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011b26:	d107      	bne.n	8011b38 <HAL_UART_Transmit_IT+0x90>
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	691b      	ldr	r3, [r3, #16]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d103      	bne.n	8011b38 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	4a2d      	ldr	r2, [pc, #180]	; (8011be8 <HAL_UART_Transmit_IT+0x140>)
 8011b34:	675a      	str	r2, [r3, #116]	; 0x74
 8011b36:	e002      	b.n	8011b3e <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	4a2c      	ldr	r2, [pc, #176]	; (8011bec <HAL_UART_Transmit_IT+0x144>)
 8011b3c:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	2200      	movs	r2, #0
 8011b42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	3308      	adds	r3, #8
 8011b4c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b50:	e853 3f00 	ldrex	r3, [r3]
 8011b54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011b5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8011b5e:	68fb      	ldr	r3, [r7, #12]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	3308      	adds	r3, #8
 8011b64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b66:	637a      	str	r2, [r7, #52]	; 0x34
 8011b68:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011b6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011b6e:	e841 2300 	strex	r3, r2, [r1]
 8011b72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d1e5      	bne.n	8011b46 <HAL_UART_Transmit_IT+0x9e>
 8011b7a:	e02c      	b.n	8011bd6 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	689b      	ldr	r3, [r3, #8]
 8011b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011b84:	d107      	bne.n	8011b96 <HAL_UART_Transmit_IT+0xee>
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	691b      	ldr	r3, [r3, #16]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d103      	bne.n	8011b96 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	4a17      	ldr	r2, [pc, #92]	; (8011bf0 <HAL_UART_Transmit_IT+0x148>)
 8011b92:	675a      	str	r2, [r3, #116]	; 0x74
 8011b94:	e002      	b.n	8011b9c <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	4a16      	ldr	r2, [pc, #88]	; (8011bf4 <HAL_UART_Transmit_IT+0x14c>)
 8011b9a:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	2200      	movs	r2, #0
 8011ba0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011baa:	697b      	ldr	r3, [r7, #20]
 8011bac:	e853 3f00 	ldrex	r3, [r3]
 8011bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8011bb2:	693b      	ldr	r3, [r7, #16]
 8011bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	461a      	mov	r2, r3
 8011bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bc2:	623b      	str	r3, [r7, #32]
 8011bc4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bc6:	69f9      	ldr	r1, [r7, #28]
 8011bc8:	6a3a      	ldr	r2, [r7, #32]
 8011bca:	e841 2300 	strex	r3, r2, [r1]
 8011bce:	61bb      	str	r3, [r7, #24]
   return(result);
 8011bd0:	69bb      	ldr	r3, [r7, #24]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d1e6      	bne.n	8011ba4 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	e000      	b.n	8011bdc <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8011bda:	2302      	movs	r3, #2
  }
}
 8011bdc:	4618      	mov	r0, r3
 8011bde:	3744      	adds	r7, #68	; 0x44
 8011be0:	46bd      	mov	sp, r7
 8011be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be6:	4770      	bx	lr
 8011be8:	080139db 	.word	0x080139db
 8011bec:	080138fb 	.word	0x080138fb
 8011bf0:	08013839 	.word	0x08013839
 8011bf4:	08013781 	.word	0x08013781

08011bf8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	b08a      	sub	sp, #40	; 0x28
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	60f8      	str	r0, [r7, #12]
 8011c00:	60b9      	str	r1, [r7, #8]
 8011c02:	4613      	mov	r3, r2
 8011c04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c0c:	2b20      	cmp	r3, #32
 8011c0e:	d142      	bne.n	8011c96 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8011c10:	68bb      	ldr	r3, [r7, #8]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d002      	beq.n	8011c1c <HAL_UART_Receive_IT+0x24>
 8011c16:	88fb      	ldrh	r3, [r7, #6]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d101      	bne.n	8011c20 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8011c1c:	2301      	movs	r3, #1
 8011c1e:	e03b      	b.n	8011c98 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011c26:	2b01      	cmp	r3, #1
 8011c28:	d101      	bne.n	8011c2e <HAL_UART_Receive_IT+0x36>
 8011c2a:	2302      	movs	r3, #2
 8011c2c:	e034      	b.n	8011c98 <HAL_UART_Receive_IT+0xa0>
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	2201      	movs	r2, #1
 8011c32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	2200      	movs	r2, #0
 8011c3a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	4a17      	ldr	r2, [pc, #92]	; (8011ca0 <HAL_UART_Receive_IT+0xa8>)
 8011c42:	4293      	cmp	r3, r2
 8011c44:	d01f      	beq.n	8011c86 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	685b      	ldr	r3, [r3, #4]
 8011c4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d018      	beq.n	8011c86 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c5a:	697b      	ldr	r3, [r7, #20]
 8011c5c:	e853 3f00 	ldrex	r3, [r3]
 8011c60:	613b      	str	r3, [r7, #16]
   return(result);
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011c68:	627b      	str	r3, [r7, #36]	; 0x24
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	461a      	mov	r2, r3
 8011c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c72:	623b      	str	r3, [r7, #32]
 8011c74:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c76:	69f9      	ldr	r1, [r7, #28]
 8011c78:	6a3a      	ldr	r2, [r7, #32]
 8011c7a:	e841 2300 	strex	r3, r2, [r1]
 8011c7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8011c80:	69bb      	ldr	r3, [r7, #24]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d1e6      	bne.n	8011c54 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8011c86:	88fb      	ldrh	r3, [r7, #6]
 8011c88:	461a      	mov	r2, r3
 8011c8a:	68b9      	ldr	r1, [r7, #8]
 8011c8c:	68f8      	ldr	r0, [r7, #12]
 8011c8e:	f001 fbd1 	bl	8013434 <UART_Start_Receive_IT>
 8011c92:	4603      	mov	r3, r0
 8011c94:	e000      	b.n	8011c98 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8011c96:	2302      	movs	r3, #2
  }
}
 8011c98:	4618      	mov	r0, r3
 8011c9a:	3728      	adds	r7, #40	; 0x28
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd80      	pop	{r7, pc}
 8011ca0:	58000c00 	.word	0x58000c00

08011ca4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b0ba      	sub	sp, #232	; 0xe8
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	69db      	ldr	r3, [r3, #28]
 8011cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	689b      	ldr	r3, [r3, #8]
 8011cc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011cca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8011cce:	f640 030f 	movw	r3, #2063	; 0x80f
 8011cd2:	4013      	ands	r3, r2
 8011cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8011cd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d11b      	bne.n	8011d18 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011ce4:	f003 0320 	and.w	r3, r3, #32
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d015      	beq.n	8011d18 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011cf0:	f003 0320 	and.w	r3, r3, #32
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d105      	bne.n	8011d04 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011cf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d009      	beq.n	8011d18 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	f000 835a 	beq.w	80123c2 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d12:	6878      	ldr	r0, [r7, #4]
 8011d14:	4798      	blx	r3
      }
      return;
 8011d16:	e354      	b.n	80123c2 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8011d18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	f000 811f 	beq.w	8011f60 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8011d22:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8011d26:	4b8b      	ldr	r3, [pc, #556]	; (8011f54 <HAL_UART_IRQHandler+0x2b0>)
 8011d28:	4013      	ands	r3, r2
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d106      	bne.n	8011d3c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8011d2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8011d32:	4b89      	ldr	r3, [pc, #548]	; (8011f58 <HAL_UART_IRQHandler+0x2b4>)
 8011d34:	4013      	ands	r3, r2
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	f000 8112 	beq.w	8011f60 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011d40:	f003 0301 	and.w	r3, r3, #1
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d011      	beq.n	8011d6c <HAL_UART_IRQHandler+0xc8>
 8011d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d00b      	beq.n	8011d6c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	2201      	movs	r2, #1
 8011d5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011d62:	f043 0201 	orr.w	r2, r3, #1
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011d70:	f003 0302 	and.w	r3, r3, #2
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d011      	beq.n	8011d9c <HAL_UART_IRQHandler+0xf8>
 8011d78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011d7c:	f003 0301 	and.w	r3, r3, #1
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d00b      	beq.n	8011d9c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	2202      	movs	r2, #2
 8011d8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011d92:	f043 0204 	orr.w	r2, r3, #4
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011da0:	f003 0304 	and.w	r3, r3, #4
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d011      	beq.n	8011dcc <HAL_UART_IRQHandler+0x128>
 8011da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011dac:	f003 0301 	and.w	r3, r3, #1
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d00b      	beq.n	8011dcc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	2204      	movs	r2, #4
 8011dba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011dc2:	f043 0202 	orr.w	r2, r3, #2
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011dd0:	f003 0308 	and.w	r3, r3, #8
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d017      	beq.n	8011e08 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011ddc:	f003 0320 	and.w	r3, r3, #32
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d105      	bne.n	8011df0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8011de4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8011de8:	4b5a      	ldr	r3, [pc, #360]	; (8011f54 <HAL_UART_IRQHandler+0x2b0>)
 8011dea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d00b      	beq.n	8011e08 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	2208      	movs	r2, #8
 8011df6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011dfe:	f043 0208 	orr.w	r2, r3, #8
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011e0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d012      	beq.n	8011e3a <HAL_UART_IRQHandler+0x196>
 8011e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011e18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d00c      	beq.n	8011e3a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011e28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e30:	f043 0220 	orr.w	r2, r3, #32
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	f000 82c0 	beq.w	80123c6 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011e4a:	f003 0320 	and.w	r3, r3, #32
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d013      	beq.n	8011e7a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011e56:	f003 0320 	and.w	r3, r3, #32
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d105      	bne.n	8011e6a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011e5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d007      	beq.n	8011e7a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d003      	beq.n	8011e7a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e76:	6878      	ldr	r0, [r7, #4]
 8011e78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	689b      	ldr	r3, [r3, #8]
 8011e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e8e:	2b40      	cmp	r3, #64	; 0x40
 8011e90:	d005      	beq.n	8011e9e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011e92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011e96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d04f      	beq.n	8011f3e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	f001 fbf2 	bl	8013688 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	689b      	ldr	r3, [r3, #8]
 8011eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011eae:	2b40      	cmp	r3, #64	; 0x40
 8011eb0:	d141      	bne.n	8011f36 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	3308      	adds	r3, #8
 8011eb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ebc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011ec0:	e853 3f00 	ldrex	r3, [r3]
 8011ec4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8011ec8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011ed0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	3308      	adds	r3, #8
 8011eda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8011ede:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8011ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ee6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8011eea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011eee:	e841 2300 	strex	r3, r2, [r1]
 8011ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8011ef6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d1d9      	bne.n	8011eb2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d013      	beq.n	8011f2e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f0a:	4a14      	ldr	r2, [pc, #80]	; (8011f5c <HAL_UART_IRQHandler+0x2b8>)
 8011f0c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f12:	4618      	mov	r0, r3
 8011f14:	f7fa fd5a 	bl	800c9cc <HAL_DMA_Abort_IT>
 8011f18:	4603      	mov	r3, r0
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d017      	beq.n	8011f4e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f24:	687a      	ldr	r2, [r7, #4]
 8011f26:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8011f28:	4610      	mov	r0, r2
 8011f2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011f2c:	e00f      	b.n	8011f4e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011f2e:	6878      	ldr	r0, [r7, #4]
 8011f30:	f000 fa56 	bl	80123e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011f34:	e00b      	b.n	8011f4e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011f36:	6878      	ldr	r0, [r7, #4]
 8011f38:	f000 fa52 	bl	80123e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011f3c:	e007      	b.n	8011f4e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	f000 fa4e 	bl	80123e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	2200      	movs	r2, #0
 8011f48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8011f4c:	e23b      	b.n	80123c6 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011f4e:	bf00      	nop
    return;
 8011f50:	e239      	b.n	80123c6 <HAL_UART_IRQHandler+0x722>
 8011f52:	bf00      	nop
 8011f54:	10000001 	.word	0x10000001
 8011f58:	04000120 	.word	0x04000120
 8011f5c:	08013755 	.word	0x08013755

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f64:	2b01      	cmp	r3, #1
 8011f66:	f040 81ce 	bne.w	8012306 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8011f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011f6e:	f003 0310 	and.w	r3, r3, #16
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	f000 81c7 	beq.w	8012306 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011f7c:	f003 0310 	and.w	r3, r3, #16
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	f000 81c0 	beq.w	8012306 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	2210      	movs	r2, #16
 8011f8c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	689b      	ldr	r3, [r3, #8]
 8011f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f98:	2b40      	cmp	r3, #64	; 0x40
 8011f9a:	f040 813b 	bne.w	8012214 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	4a8b      	ldr	r2, [pc, #556]	; (80121d4 <HAL_UART_IRQHandler+0x530>)
 8011fa6:	4293      	cmp	r3, r2
 8011fa8:	d059      	beq.n	801205e <HAL_UART_IRQHandler+0x3ba>
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	4a89      	ldr	r2, [pc, #548]	; (80121d8 <HAL_UART_IRQHandler+0x534>)
 8011fb2:	4293      	cmp	r3, r2
 8011fb4:	d053      	beq.n	801205e <HAL_UART_IRQHandler+0x3ba>
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	4a87      	ldr	r2, [pc, #540]	; (80121dc <HAL_UART_IRQHandler+0x538>)
 8011fbe:	4293      	cmp	r3, r2
 8011fc0:	d04d      	beq.n	801205e <HAL_UART_IRQHandler+0x3ba>
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fc6:	681b      	ldr	r3, [r3, #0]
 8011fc8:	4a85      	ldr	r2, [pc, #532]	; (80121e0 <HAL_UART_IRQHandler+0x53c>)
 8011fca:	4293      	cmp	r3, r2
 8011fcc:	d047      	beq.n	801205e <HAL_UART_IRQHandler+0x3ba>
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	4a83      	ldr	r2, [pc, #524]	; (80121e4 <HAL_UART_IRQHandler+0x540>)
 8011fd6:	4293      	cmp	r3, r2
 8011fd8:	d041      	beq.n	801205e <HAL_UART_IRQHandler+0x3ba>
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	4a81      	ldr	r2, [pc, #516]	; (80121e8 <HAL_UART_IRQHandler+0x544>)
 8011fe2:	4293      	cmp	r3, r2
 8011fe4:	d03b      	beq.n	801205e <HAL_UART_IRQHandler+0x3ba>
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	4a7f      	ldr	r2, [pc, #508]	; (80121ec <HAL_UART_IRQHandler+0x548>)
 8011fee:	4293      	cmp	r3, r2
 8011ff0:	d035      	beq.n	801205e <HAL_UART_IRQHandler+0x3ba>
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	4a7d      	ldr	r2, [pc, #500]	; (80121f0 <HAL_UART_IRQHandler+0x54c>)
 8011ffa:	4293      	cmp	r3, r2
 8011ffc:	d02f      	beq.n	801205e <HAL_UART_IRQHandler+0x3ba>
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	4a7b      	ldr	r2, [pc, #492]	; (80121f4 <HAL_UART_IRQHandler+0x550>)
 8012006:	4293      	cmp	r3, r2
 8012008:	d029      	beq.n	801205e <HAL_UART_IRQHandler+0x3ba>
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	4a79      	ldr	r2, [pc, #484]	; (80121f8 <HAL_UART_IRQHandler+0x554>)
 8012012:	4293      	cmp	r3, r2
 8012014:	d023      	beq.n	801205e <HAL_UART_IRQHandler+0x3ba>
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	4a77      	ldr	r2, [pc, #476]	; (80121fc <HAL_UART_IRQHandler+0x558>)
 801201e:	4293      	cmp	r3, r2
 8012020:	d01d      	beq.n	801205e <HAL_UART_IRQHandler+0x3ba>
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	4a75      	ldr	r2, [pc, #468]	; (8012200 <HAL_UART_IRQHandler+0x55c>)
 801202a:	4293      	cmp	r3, r2
 801202c:	d017      	beq.n	801205e <HAL_UART_IRQHandler+0x3ba>
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	4a73      	ldr	r2, [pc, #460]	; (8012204 <HAL_UART_IRQHandler+0x560>)
 8012036:	4293      	cmp	r3, r2
 8012038:	d011      	beq.n	801205e <HAL_UART_IRQHandler+0x3ba>
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	4a71      	ldr	r2, [pc, #452]	; (8012208 <HAL_UART_IRQHandler+0x564>)
 8012042:	4293      	cmp	r3, r2
 8012044:	d00b      	beq.n	801205e <HAL_UART_IRQHandler+0x3ba>
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	4a6f      	ldr	r2, [pc, #444]	; (801220c <HAL_UART_IRQHandler+0x568>)
 801204e:	4293      	cmp	r3, r2
 8012050:	d005      	beq.n	801205e <HAL_UART_IRQHandler+0x3ba>
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	4a6d      	ldr	r2, [pc, #436]	; (8012210 <HAL_UART_IRQHandler+0x56c>)
 801205a:	4293      	cmp	r3, r2
 801205c:	d105      	bne.n	801206a <HAL_UART_IRQHandler+0x3c6>
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	685b      	ldr	r3, [r3, #4]
 8012066:	b29b      	uxth	r3, r3
 8012068:	e004      	b.n	8012074 <HAL_UART_IRQHandler+0x3d0>
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	685b      	ldr	r3, [r3, #4]
 8012072:	b29b      	uxth	r3, r3
 8012074:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8012078:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801207c:	2b00      	cmp	r3, #0
 801207e:	f000 81a4 	beq.w	80123ca <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012088:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801208c:	429a      	cmp	r2, r3
 801208e:	f080 819c 	bcs.w	80123ca <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8012098:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80120a0:	69db      	ldr	r3, [r3, #28]
 80120a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80120a6:	f000 8086 	beq.w	80121b6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80120b6:	e853 3f00 	ldrex	r3, [r3]
 80120ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80120be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80120c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80120c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	461a      	mov	r2, r3
 80120d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80120d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80120d8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80120e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80120e4:	e841 2300 	strex	r3, r2, [r1]
 80120e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80120ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d1da      	bne.n	80120aa <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	3308      	adds	r3, #8
 80120fa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80120fe:	e853 3f00 	ldrex	r3, [r3]
 8012102:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012104:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012106:	f023 0301 	bic.w	r3, r3, #1
 801210a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	3308      	adds	r3, #8
 8012114:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8012118:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801211c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801211e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8012120:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012124:	e841 2300 	strex	r3, r2, [r1]
 8012128:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801212a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801212c:	2b00      	cmp	r3, #0
 801212e:	d1e1      	bne.n	80120f4 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	3308      	adds	r3, #8
 8012136:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012138:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801213a:	e853 3f00 	ldrex	r3, [r3]
 801213e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8012140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012146:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	3308      	adds	r3, #8
 8012150:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8012154:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012156:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012158:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801215a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801215c:	e841 2300 	strex	r3, r2, [r1]
 8012160:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012162:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012164:	2b00      	cmp	r3, #0
 8012166:	d1e3      	bne.n	8012130 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2220      	movs	r2, #32
 801216c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2200      	movs	r2, #0
 8012174:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801217c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801217e:	e853 3f00 	ldrex	r3, [r3]
 8012182:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8012184:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012186:	f023 0310 	bic.w	r3, r3, #16
 801218a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	461a      	mov	r2, r3
 8012194:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8012198:	65bb      	str	r3, [r7, #88]	; 0x58
 801219a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801219c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801219e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80121a0:	e841 2300 	strex	r3, r2, [r1]
 80121a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80121a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d1e4      	bne.n	8012176 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80121b0:	4618      	mov	r0, r3
 80121b2:	f7fa f8ed 	bl	800c390 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80121c2:	b29b      	uxth	r3, r3
 80121c4:	1ad3      	subs	r3, r2, r3
 80121c6:	b29b      	uxth	r3, r3
 80121c8:	4619      	mov	r1, r3
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	f000 f912 	bl	80123f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80121d0:	e0fb      	b.n	80123ca <HAL_UART_IRQHandler+0x726>
 80121d2:	bf00      	nop
 80121d4:	40020010 	.word	0x40020010
 80121d8:	40020028 	.word	0x40020028
 80121dc:	40020040 	.word	0x40020040
 80121e0:	40020058 	.word	0x40020058
 80121e4:	40020070 	.word	0x40020070
 80121e8:	40020088 	.word	0x40020088
 80121ec:	400200a0 	.word	0x400200a0
 80121f0:	400200b8 	.word	0x400200b8
 80121f4:	40020410 	.word	0x40020410
 80121f8:	40020428 	.word	0x40020428
 80121fc:	40020440 	.word	0x40020440
 8012200:	40020458 	.word	0x40020458
 8012204:	40020470 	.word	0x40020470
 8012208:	40020488 	.word	0x40020488
 801220c:	400204a0 	.word	0x400204a0
 8012210:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012220:	b29b      	uxth	r3, r3
 8012222:	1ad3      	subs	r3, r2, r3
 8012224:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801222e:	b29b      	uxth	r3, r3
 8012230:	2b00      	cmp	r3, #0
 8012232:	f000 80cc 	beq.w	80123ce <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8012236:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801223a:	2b00      	cmp	r3, #0
 801223c:	f000 80c7 	beq.w	80123ce <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012248:	e853 3f00 	ldrex	r3, [r3]
 801224c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801224e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012250:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012254:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	461a      	mov	r2, r3
 801225e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012262:	647b      	str	r3, [r7, #68]	; 0x44
 8012264:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012266:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012268:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801226a:	e841 2300 	strex	r3, r2, [r1]
 801226e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012272:	2b00      	cmp	r3, #0
 8012274:	d1e4      	bne.n	8012240 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	3308      	adds	r3, #8
 801227c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012280:	e853 3f00 	ldrex	r3, [r3]
 8012284:	623b      	str	r3, [r7, #32]
   return(result);
 8012286:	6a3a      	ldr	r2, [r7, #32]
 8012288:	4b54      	ldr	r3, [pc, #336]	; (80123dc <HAL_UART_IRQHandler+0x738>)
 801228a:	4013      	ands	r3, r2
 801228c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	3308      	adds	r3, #8
 8012296:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801229a:	633a      	str	r2, [r7, #48]	; 0x30
 801229c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801229e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80122a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122a2:	e841 2300 	strex	r3, r2, [r1]
 80122a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80122a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d1e3      	bne.n	8012276 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	2220      	movs	r2, #32
 80122b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	2200      	movs	r2, #0
 80122ba:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	2200      	movs	r2, #0
 80122c0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122c8:	693b      	ldr	r3, [r7, #16]
 80122ca:	e853 3f00 	ldrex	r3, [r3]
 80122ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	f023 0310 	bic.w	r3, r3, #16
 80122d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	461a      	mov	r2, r3
 80122e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80122e4:	61fb      	str	r3, [r7, #28]
 80122e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122e8:	69b9      	ldr	r1, [r7, #24]
 80122ea:	69fa      	ldr	r2, [r7, #28]
 80122ec:	e841 2300 	strex	r3, r2, [r1]
 80122f0:	617b      	str	r3, [r7, #20]
   return(result);
 80122f2:	697b      	ldr	r3, [r7, #20]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d1e4      	bne.n	80122c2 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80122f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80122fc:	4619      	mov	r1, r3
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f000 f878 	bl	80123f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012304:	e063      	b.n	80123ce <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801230a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801230e:	2b00      	cmp	r3, #0
 8012310:	d00e      	beq.n	8012330 <HAL_UART_IRQHandler+0x68c>
 8012312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801231a:	2b00      	cmp	r3, #0
 801231c:	d008      	beq.n	8012330 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8012326:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f002 f853 	bl	80143d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801232e:	e051      	b.n	80123d4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8012330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012338:	2b00      	cmp	r3, #0
 801233a:	d014      	beq.n	8012366 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801233c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012344:	2b00      	cmp	r3, #0
 8012346:	d105      	bne.n	8012354 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8012348:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801234c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012350:	2b00      	cmp	r3, #0
 8012352:	d008      	beq.n	8012366 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012358:	2b00      	cmp	r3, #0
 801235a:	d03a      	beq.n	80123d2 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012360:	6878      	ldr	r0, [r7, #4]
 8012362:	4798      	blx	r3
    }
    return;
 8012364:	e035      	b.n	80123d2 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801236a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801236e:	2b00      	cmp	r3, #0
 8012370:	d009      	beq.n	8012386 <HAL_UART_IRQHandler+0x6e2>
 8012372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801237a:	2b00      	cmp	r3, #0
 801237c:	d003      	beq.n	8012386 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 801237e:	6878      	ldr	r0, [r7, #4]
 8012380:	f001 fba0 	bl	8013ac4 <UART_EndTransmit_IT>
    return;
 8012384:	e026      	b.n	80123d4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801238a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801238e:	2b00      	cmp	r3, #0
 8012390:	d009      	beq.n	80123a6 <HAL_UART_IRQHandler+0x702>
 8012392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012396:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801239a:	2b00      	cmp	r3, #0
 801239c:	d003      	beq.n	80123a6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f002 f82c 	bl	80143fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80123a4:	e016      	b.n	80123d4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80123a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80123aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d010      	beq.n	80123d4 <HAL_UART_IRQHandler+0x730>
 80123b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	da0c      	bge.n	80123d4 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80123ba:	6878      	ldr	r0, [r7, #4]
 80123bc:	f002 f814 	bl	80143e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80123c0:	e008      	b.n	80123d4 <HAL_UART_IRQHandler+0x730>
      return;
 80123c2:	bf00      	nop
 80123c4:	e006      	b.n	80123d4 <HAL_UART_IRQHandler+0x730>
    return;
 80123c6:	bf00      	nop
 80123c8:	e004      	b.n	80123d4 <HAL_UART_IRQHandler+0x730>
      return;
 80123ca:	bf00      	nop
 80123cc:	e002      	b.n	80123d4 <HAL_UART_IRQHandler+0x730>
      return;
 80123ce:	bf00      	nop
 80123d0:	e000      	b.n	80123d4 <HAL_UART_IRQHandler+0x730>
    return;
 80123d2:	bf00      	nop
  }
}
 80123d4:	37e8      	adds	r7, #232	; 0xe8
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bd80      	pop	{r7, pc}
 80123da:	bf00      	nop
 80123dc:	effffffe 	.word	0xeffffffe

080123e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80123e0:	b480      	push	{r7}
 80123e2:	b083      	sub	sp, #12
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80123e8:	bf00      	nop
 80123ea:	370c      	adds	r7, #12
 80123ec:	46bd      	mov	sp, r7
 80123ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f2:	4770      	bx	lr

080123f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80123f4:	b480      	push	{r7}
 80123f6:	b083      	sub	sp, #12
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
 80123fc:	460b      	mov	r3, r1
 80123fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012400:	bf00      	nop
 8012402:	370c      	adds	r7, #12
 8012404:	46bd      	mov	sp, r7
 8012406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801240a:	4770      	bx	lr

0801240c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801240c:	b5b0      	push	{r4, r5, r7, lr}
 801240e:	b08e      	sub	sp, #56	; 0x38
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012414:	2300      	movs	r3, #0
 8012416:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	689a      	ldr	r2, [r3, #8]
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	691b      	ldr	r3, [r3, #16]
 8012422:	431a      	orrs	r2, r3
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	695b      	ldr	r3, [r3, #20]
 8012428:	431a      	orrs	r2, r3
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	69db      	ldr	r3, [r3, #28]
 801242e:	4313      	orrs	r3, r2
 8012430:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	681a      	ldr	r2, [r3, #0]
 8012438:	4bbf      	ldr	r3, [pc, #764]	; (8012738 <UART_SetConfig+0x32c>)
 801243a:	4013      	ands	r3, r2
 801243c:	687a      	ldr	r2, [r7, #4]
 801243e:	6812      	ldr	r2, [r2, #0]
 8012440:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012442:	430b      	orrs	r3, r1
 8012444:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	685b      	ldr	r3, [r3, #4]
 801244c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	68da      	ldr	r2, [r3, #12]
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	430a      	orrs	r2, r1
 801245a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	699b      	ldr	r3, [r3, #24]
 8012460:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	4ab5      	ldr	r2, [pc, #724]	; (801273c <UART_SetConfig+0x330>)
 8012468:	4293      	cmp	r3, r2
 801246a:	d004      	beq.n	8012476 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	6a1b      	ldr	r3, [r3, #32]
 8012470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012472:	4313      	orrs	r3, r2
 8012474:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	689a      	ldr	r2, [r3, #8]
 801247c:	4bb0      	ldr	r3, [pc, #704]	; (8012740 <UART_SetConfig+0x334>)
 801247e:	4013      	ands	r3, r2
 8012480:	687a      	ldr	r2, [r7, #4]
 8012482:	6812      	ldr	r2, [r2, #0]
 8012484:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012486:	430b      	orrs	r3, r1
 8012488:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012490:	f023 010f 	bic.w	r1, r3, #15
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	430a      	orrs	r2, r1
 801249e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	4aa7      	ldr	r2, [pc, #668]	; (8012744 <UART_SetConfig+0x338>)
 80124a6:	4293      	cmp	r3, r2
 80124a8:	d176      	bne.n	8012598 <UART_SetConfig+0x18c>
 80124aa:	4ba7      	ldr	r3, [pc, #668]	; (8012748 <UART_SetConfig+0x33c>)
 80124ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80124ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80124b2:	2b28      	cmp	r3, #40	; 0x28
 80124b4:	d86c      	bhi.n	8012590 <UART_SetConfig+0x184>
 80124b6:	a201      	add	r2, pc, #4	; (adr r2, 80124bc <UART_SetConfig+0xb0>)
 80124b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124bc:	08012561 	.word	0x08012561
 80124c0:	08012591 	.word	0x08012591
 80124c4:	08012591 	.word	0x08012591
 80124c8:	08012591 	.word	0x08012591
 80124cc:	08012591 	.word	0x08012591
 80124d0:	08012591 	.word	0x08012591
 80124d4:	08012591 	.word	0x08012591
 80124d8:	08012591 	.word	0x08012591
 80124dc:	08012569 	.word	0x08012569
 80124e0:	08012591 	.word	0x08012591
 80124e4:	08012591 	.word	0x08012591
 80124e8:	08012591 	.word	0x08012591
 80124ec:	08012591 	.word	0x08012591
 80124f0:	08012591 	.word	0x08012591
 80124f4:	08012591 	.word	0x08012591
 80124f8:	08012591 	.word	0x08012591
 80124fc:	08012571 	.word	0x08012571
 8012500:	08012591 	.word	0x08012591
 8012504:	08012591 	.word	0x08012591
 8012508:	08012591 	.word	0x08012591
 801250c:	08012591 	.word	0x08012591
 8012510:	08012591 	.word	0x08012591
 8012514:	08012591 	.word	0x08012591
 8012518:	08012591 	.word	0x08012591
 801251c:	08012579 	.word	0x08012579
 8012520:	08012591 	.word	0x08012591
 8012524:	08012591 	.word	0x08012591
 8012528:	08012591 	.word	0x08012591
 801252c:	08012591 	.word	0x08012591
 8012530:	08012591 	.word	0x08012591
 8012534:	08012591 	.word	0x08012591
 8012538:	08012591 	.word	0x08012591
 801253c:	08012581 	.word	0x08012581
 8012540:	08012591 	.word	0x08012591
 8012544:	08012591 	.word	0x08012591
 8012548:	08012591 	.word	0x08012591
 801254c:	08012591 	.word	0x08012591
 8012550:	08012591 	.word	0x08012591
 8012554:	08012591 	.word	0x08012591
 8012558:	08012591 	.word	0x08012591
 801255c:	08012589 	.word	0x08012589
 8012560:	2301      	movs	r3, #1
 8012562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012566:	e326      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012568:	2304      	movs	r3, #4
 801256a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801256e:	e322      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012570:	2308      	movs	r3, #8
 8012572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012576:	e31e      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012578:	2310      	movs	r3, #16
 801257a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801257e:	e31a      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012580:	2320      	movs	r3, #32
 8012582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012586:	e316      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012588:	2340      	movs	r3, #64	; 0x40
 801258a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801258e:	e312      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012590:	2380      	movs	r3, #128	; 0x80
 8012592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012596:	e30e      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	4a6b      	ldr	r2, [pc, #428]	; (801274c <UART_SetConfig+0x340>)
 801259e:	4293      	cmp	r3, r2
 80125a0:	d130      	bne.n	8012604 <UART_SetConfig+0x1f8>
 80125a2:	4b69      	ldr	r3, [pc, #420]	; (8012748 <UART_SetConfig+0x33c>)
 80125a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80125a6:	f003 0307 	and.w	r3, r3, #7
 80125aa:	2b05      	cmp	r3, #5
 80125ac:	d826      	bhi.n	80125fc <UART_SetConfig+0x1f0>
 80125ae:	a201      	add	r2, pc, #4	; (adr r2, 80125b4 <UART_SetConfig+0x1a8>)
 80125b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125b4:	080125cd 	.word	0x080125cd
 80125b8:	080125d5 	.word	0x080125d5
 80125bc:	080125dd 	.word	0x080125dd
 80125c0:	080125e5 	.word	0x080125e5
 80125c4:	080125ed 	.word	0x080125ed
 80125c8:	080125f5 	.word	0x080125f5
 80125cc:	2300      	movs	r3, #0
 80125ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80125d2:	e2f0      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 80125d4:	2304      	movs	r3, #4
 80125d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80125da:	e2ec      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 80125dc:	2308      	movs	r3, #8
 80125de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80125e2:	e2e8      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 80125e4:	2310      	movs	r3, #16
 80125e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80125ea:	e2e4      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 80125ec:	2320      	movs	r3, #32
 80125ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80125f2:	e2e0      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 80125f4:	2340      	movs	r3, #64	; 0x40
 80125f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80125fa:	e2dc      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 80125fc:	2380      	movs	r3, #128	; 0x80
 80125fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012602:	e2d8      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	4a51      	ldr	r2, [pc, #324]	; (8012750 <UART_SetConfig+0x344>)
 801260a:	4293      	cmp	r3, r2
 801260c:	d130      	bne.n	8012670 <UART_SetConfig+0x264>
 801260e:	4b4e      	ldr	r3, [pc, #312]	; (8012748 <UART_SetConfig+0x33c>)
 8012610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012612:	f003 0307 	and.w	r3, r3, #7
 8012616:	2b05      	cmp	r3, #5
 8012618:	d826      	bhi.n	8012668 <UART_SetConfig+0x25c>
 801261a:	a201      	add	r2, pc, #4	; (adr r2, 8012620 <UART_SetConfig+0x214>)
 801261c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012620:	08012639 	.word	0x08012639
 8012624:	08012641 	.word	0x08012641
 8012628:	08012649 	.word	0x08012649
 801262c:	08012651 	.word	0x08012651
 8012630:	08012659 	.word	0x08012659
 8012634:	08012661 	.word	0x08012661
 8012638:	2300      	movs	r3, #0
 801263a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801263e:	e2ba      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012640:	2304      	movs	r3, #4
 8012642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012646:	e2b6      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012648:	2308      	movs	r3, #8
 801264a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801264e:	e2b2      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012650:	2310      	movs	r3, #16
 8012652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012656:	e2ae      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012658:	2320      	movs	r3, #32
 801265a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801265e:	e2aa      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012660:	2340      	movs	r3, #64	; 0x40
 8012662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012666:	e2a6      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012668:	2380      	movs	r3, #128	; 0x80
 801266a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801266e:	e2a2      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	4a37      	ldr	r2, [pc, #220]	; (8012754 <UART_SetConfig+0x348>)
 8012676:	4293      	cmp	r3, r2
 8012678:	d130      	bne.n	80126dc <UART_SetConfig+0x2d0>
 801267a:	4b33      	ldr	r3, [pc, #204]	; (8012748 <UART_SetConfig+0x33c>)
 801267c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801267e:	f003 0307 	and.w	r3, r3, #7
 8012682:	2b05      	cmp	r3, #5
 8012684:	d826      	bhi.n	80126d4 <UART_SetConfig+0x2c8>
 8012686:	a201      	add	r2, pc, #4	; (adr r2, 801268c <UART_SetConfig+0x280>)
 8012688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801268c:	080126a5 	.word	0x080126a5
 8012690:	080126ad 	.word	0x080126ad
 8012694:	080126b5 	.word	0x080126b5
 8012698:	080126bd 	.word	0x080126bd
 801269c:	080126c5 	.word	0x080126c5
 80126a0:	080126cd 	.word	0x080126cd
 80126a4:	2300      	movs	r3, #0
 80126a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80126aa:	e284      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 80126ac:	2304      	movs	r3, #4
 80126ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80126b2:	e280      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 80126b4:	2308      	movs	r3, #8
 80126b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80126ba:	e27c      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 80126bc:	2310      	movs	r3, #16
 80126be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80126c2:	e278      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 80126c4:	2320      	movs	r3, #32
 80126c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80126ca:	e274      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 80126cc:	2340      	movs	r3, #64	; 0x40
 80126ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80126d2:	e270      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 80126d4:	2380      	movs	r3, #128	; 0x80
 80126d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80126da:	e26c      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	4a1d      	ldr	r2, [pc, #116]	; (8012758 <UART_SetConfig+0x34c>)
 80126e2:	4293      	cmp	r3, r2
 80126e4:	d142      	bne.n	801276c <UART_SetConfig+0x360>
 80126e6:	4b18      	ldr	r3, [pc, #96]	; (8012748 <UART_SetConfig+0x33c>)
 80126e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80126ea:	f003 0307 	and.w	r3, r3, #7
 80126ee:	2b05      	cmp	r3, #5
 80126f0:	d838      	bhi.n	8012764 <UART_SetConfig+0x358>
 80126f2:	a201      	add	r2, pc, #4	; (adr r2, 80126f8 <UART_SetConfig+0x2ec>)
 80126f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126f8:	08012711 	.word	0x08012711
 80126fc:	08012719 	.word	0x08012719
 8012700:	08012721 	.word	0x08012721
 8012704:	08012729 	.word	0x08012729
 8012708:	08012731 	.word	0x08012731
 801270c:	0801275d 	.word	0x0801275d
 8012710:	2300      	movs	r3, #0
 8012712:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012716:	e24e      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012718:	2304      	movs	r3, #4
 801271a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801271e:	e24a      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012720:	2308      	movs	r3, #8
 8012722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012726:	e246      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012728:	2310      	movs	r3, #16
 801272a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801272e:	e242      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012730:	2320      	movs	r3, #32
 8012732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012736:	e23e      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012738:	cfff69f3 	.word	0xcfff69f3
 801273c:	58000c00 	.word	0x58000c00
 8012740:	11fff4ff 	.word	0x11fff4ff
 8012744:	40011000 	.word	0x40011000
 8012748:	58024400 	.word	0x58024400
 801274c:	40004400 	.word	0x40004400
 8012750:	40004800 	.word	0x40004800
 8012754:	40004c00 	.word	0x40004c00
 8012758:	40005000 	.word	0x40005000
 801275c:	2340      	movs	r3, #64	; 0x40
 801275e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012762:	e228      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012764:	2380      	movs	r3, #128	; 0x80
 8012766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801276a:	e224      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	4ab1      	ldr	r2, [pc, #708]	; (8012a38 <UART_SetConfig+0x62c>)
 8012772:	4293      	cmp	r3, r2
 8012774:	d176      	bne.n	8012864 <UART_SetConfig+0x458>
 8012776:	4bb1      	ldr	r3, [pc, #708]	; (8012a3c <UART_SetConfig+0x630>)
 8012778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801277a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801277e:	2b28      	cmp	r3, #40	; 0x28
 8012780:	d86c      	bhi.n	801285c <UART_SetConfig+0x450>
 8012782:	a201      	add	r2, pc, #4	; (adr r2, 8012788 <UART_SetConfig+0x37c>)
 8012784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012788:	0801282d 	.word	0x0801282d
 801278c:	0801285d 	.word	0x0801285d
 8012790:	0801285d 	.word	0x0801285d
 8012794:	0801285d 	.word	0x0801285d
 8012798:	0801285d 	.word	0x0801285d
 801279c:	0801285d 	.word	0x0801285d
 80127a0:	0801285d 	.word	0x0801285d
 80127a4:	0801285d 	.word	0x0801285d
 80127a8:	08012835 	.word	0x08012835
 80127ac:	0801285d 	.word	0x0801285d
 80127b0:	0801285d 	.word	0x0801285d
 80127b4:	0801285d 	.word	0x0801285d
 80127b8:	0801285d 	.word	0x0801285d
 80127bc:	0801285d 	.word	0x0801285d
 80127c0:	0801285d 	.word	0x0801285d
 80127c4:	0801285d 	.word	0x0801285d
 80127c8:	0801283d 	.word	0x0801283d
 80127cc:	0801285d 	.word	0x0801285d
 80127d0:	0801285d 	.word	0x0801285d
 80127d4:	0801285d 	.word	0x0801285d
 80127d8:	0801285d 	.word	0x0801285d
 80127dc:	0801285d 	.word	0x0801285d
 80127e0:	0801285d 	.word	0x0801285d
 80127e4:	0801285d 	.word	0x0801285d
 80127e8:	08012845 	.word	0x08012845
 80127ec:	0801285d 	.word	0x0801285d
 80127f0:	0801285d 	.word	0x0801285d
 80127f4:	0801285d 	.word	0x0801285d
 80127f8:	0801285d 	.word	0x0801285d
 80127fc:	0801285d 	.word	0x0801285d
 8012800:	0801285d 	.word	0x0801285d
 8012804:	0801285d 	.word	0x0801285d
 8012808:	0801284d 	.word	0x0801284d
 801280c:	0801285d 	.word	0x0801285d
 8012810:	0801285d 	.word	0x0801285d
 8012814:	0801285d 	.word	0x0801285d
 8012818:	0801285d 	.word	0x0801285d
 801281c:	0801285d 	.word	0x0801285d
 8012820:	0801285d 	.word	0x0801285d
 8012824:	0801285d 	.word	0x0801285d
 8012828:	08012855 	.word	0x08012855
 801282c:	2301      	movs	r3, #1
 801282e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012832:	e1c0      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012834:	2304      	movs	r3, #4
 8012836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801283a:	e1bc      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 801283c:	2308      	movs	r3, #8
 801283e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012842:	e1b8      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012844:	2310      	movs	r3, #16
 8012846:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801284a:	e1b4      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 801284c:	2320      	movs	r3, #32
 801284e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012852:	e1b0      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012854:	2340      	movs	r3, #64	; 0x40
 8012856:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801285a:	e1ac      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 801285c:	2380      	movs	r3, #128	; 0x80
 801285e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012862:	e1a8      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	4a75      	ldr	r2, [pc, #468]	; (8012a40 <UART_SetConfig+0x634>)
 801286a:	4293      	cmp	r3, r2
 801286c:	d130      	bne.n	80128d0 <UART_SetConfig+0x4c4>
 801286e:	4b73      	ldr	r3, [pc, #460]	; (8012a3c <UART_SetConfig+0x630>)
 8012870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012872:	f003 0307 	and.w	r3, r3, #7
 8012876:	2b05      	cmp	r3, #5
 8012878:	d826      	bhi.n	80128c8 <UART_SetConfig+0x4bc>
 801287a:	a201      	add	r2, pc, #4	; (adr r2, 8012880 <UART_SetConfig+0x474>)
 801287c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012880:	08012899 	.word	0x08012899
 8012884:	080128a1 	.word	0x080128a1
 8012888:	080128a9 	.word	0x080128a9
 801288c:	080128b1 	.word	0x080128b1
 8012890:	080128b9 	.word	0x080128b9
 8012894:	080128c1 	.word	0x080128c1
 8012898:	2300      	movs	r3, #0
 801289a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801289e:	e18a      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 80128a0:	2304      	movs	r3, #4
 80128a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80128a6:	e186      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 80128a8:	2308      	movs	r3, #8
 80128aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80128ae:	e182      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 80128b0:	2310      	movs	r3, #16
 80128b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80128b6:	e17e      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 80128b8:	2320      	movs	r3, #32
 80128ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80128be:	e17a      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 80128c0:	2340      	movs	r3, #64	; 0x40
 80128c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80128c6:	e176      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 80128c8:	2380      	movs	r3, #128	; 0x80
 80128ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80128ce:	e172      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	4a5b      	ldr	r2, [pc, #364]	; (8012a44 <UART_SetConfig+0x638>)
 80128d6:	4293      	cmp	r3, r2
 80128d8:	d130      	bne.n	801293c <UART_SetConfig+0x530>
 80128da:	4b58      	ldr	r3, [pc, #352]	; (8012a3c <UART_SetConfig+0x630>)
 80128dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80128de:	f003 0307 	and.w	r3, r3, #7
 80128e2:	2b05      	cmp	r3, #5
 80128e4:	d826      	bhi.n	8012934 <UART_SetConfig+0x528>
 80128e6:	a201      	add	r2, pc, #4	; (adr r2, 80128ec <UART_SetConfig+0x4e0>)
 80128e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128ec:	08012905 	.word	0x08012905
 80128f0:	0801290d 	.word	0x0801290d
 80128f4:	08012915 	.word	0x08012915
 80128f8:	0801291d 	.word	0x0801291d
 80128fc:	08012925 	.word	0x08012925
 8012900:	0801292d 	.word	0x0801292d
 8012904:	2300      	movs	r3, #0
 8012906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801290a:	e154      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 801290c:	2304      	movs	r3, #4
 801290e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012912:	e150      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012914:	2308      	movs	r3, #8
 8012916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801291a:	e14c      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 801291c:	2310      	movs	r3, #16
 801291e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012922:	e148      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012924:	2320      	movs	r3, #32
 8012926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801292a:	e144      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 801292c:	2340      	movs	r3, #64	; 0x40
 801292e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012932:	e140      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012934:	2380      	movs	r3, #128	; 0x80
 8012936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801293a:	e13c      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	4a41      	ldr	r2, [pc, #260]	; (8012a48 <UART_SetConfig+0x63c>)
 8012942:	4293      	cmp	r3, r2
 8012944:	f040 8082 	bne.w	8012a4c <UART_SetConfig+0x640>
 8012948:	4b3c      	ldr	r3, [pc, #240]	; (8012a3c <UART_SetConfig+0x630>)
 801294a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801294c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012950:	2b28      	cmp	r3, #40	; 0x28
 8012952:	d86d      	bhi.n	8012a30 <UART_SetConfig+0x624>
 8012954:	a201      	add	r2, pc, #4	; (adr r2, 801295c <UART_SetConfig+0x550>)
 8012956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801295a:	bf00      	nop
 801295c:	08012a01 	.word	0x08012a01
 8012960:	08012a31 	.word	0x08012a31
 8012964:	08012a31 	.word	0x08012a31
 8012968:	08012a31 	.word	0x08012a31
 801296c:	08012a31 	.word	0x08012a31
 8012970:	08012a31 	.word	0x08012a31
 8012974:	08012a31 	.word	0x08012a31
 8012978:	08012a31 	.word	0x08012a31
 801297c:	08012a09 	.word	0x08012a09
 8012980:	08012a31 	.word	0x08012a31
 8012984:	08012a31 	.word	0x08012a31
 8012988:	08012a31 	.word	0x08012a31
 801298c:	08012a31 	.word	0x08012a31
 8012990:	08012a31 	.word	0x08012a31
 8012994:	08012a31 	.word	0x08012a31
 8012998:	08012a31 	.word	0x08012a31
 801299c:	08012a11 	.word	0x08012a11
 80129a0:	08012a31 	.word	0x08012a31
 80129a4:	08012a31 	.word	0x08012a31
 80129a8:	08012a31 	.word	0x08012a31
 80129ac:	08012a31 	.word	0x08012a31
 80129b0:	08012a31 	.word	0x08012a31
 80129b4:	08012a31 	.word	0x08012a31
 80129b8:	08012a31 	.word	0x08012a31
 80129bc:	08012a19 	.word	0x08012a19
 80129c0:	08012a31 	.word	0x08012a31
 80129c4:	08012a31 	.word	0x08012a31
 80129c8:	08012a31 	.word	0x08012a31
 80129cc:	08012a31 	.word	0x08012a31
 80129d0:	08012a31 	.word	0x08012a31
 80129d4:	08012a31 	.word	0x08012a31
 80129d8:	08012a31 	.word	0x08012a31
 80129dc:	08012a21 	.word	0x08012a21
 80129e0:	08012a31 	.word	0x08012a31
 80129e4:	08012a31 	.word	0x08012a31
 80129e8:	08012a31 	.word	0x08012a31
 80129ec:	08012a31 	.word	0x08012a31
 80129f0:	08012a31 	.word	0x08012a31
 80129f4:	08012a31 	.word	0x08012a31
 80129f8:	08012a31 	.word	0x08012a31
 80129fc:	08012a29 	.word	0x08012a29
 8012a00:	2301      	movs	r3, #1
 8012a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012a06:	e0d6      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012a08:	2304      	movs	r3, #4
 8012a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012a0e:	e0d2      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012a10:	2308      	movs	r3, #8
 8012a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012a16:	e0ce      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012a18:	2310      	movs	r3, #16
 8012a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012a1e:	e0ca      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012a20:	2320      	movs	r3, #32
 8012a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012a26:	e0c6      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012a28:	2340      	movs	r3, #64	; 0x40
 8012a2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012a2e:	e0c2      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012a30:	2380      	movs	r3, #128	; 0x80
 8012a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012a36:	e0be      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012a38:	40011400 	.word	0x40011400
 8012a3c:	58024400 	.word	0x58024400
 8012a40:	40007800 	.word	0x40007800
 8012a44:	40007c00 	.word	0x40007c00
 8012a48:	40011800 	.word	0x40011800
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	4aad      	ldr	r2, [pc, #692]	; (8012d08 <UART_SetConfig+0x8fc>)
 8012a52:	4293      	cmp	r3, r2
 8012a54:	d176      	bne.n	8012b44 <UART_SetConfig+0x738>
 8012a56:	4bad      	ldr	r3, [pc, #692]	; (8012d0c <UART_SetConfig+0x900>)
 8012a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012a5e:	2b28      	cmp	r3, #40	; 0x28
 8012a60:	d86c      	bhi.n	8012b3c <UART_SetConfig+0x730>
 8012a62:	a201      	add	r2, pc, #4	; (adr r2, 8012a68 <UART_SetConfig+0x65c>)
 8012a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a68:	08012b0d 	.word	0x08012b0d
 8012a6c:	08012b3d 	.word	0x08012b3d
 8012a70:	08012b3d 	.word	0x08012b3d
 8012a74:	08012b3d 	.word	0x08012b3d
 8012a78:	08012b3d 	.word	0x08012b3d
 8012a7c:	08012b3d 	.word	0x08012b3d
 8012a80:	08012b3d 	.word	0x08012b3d
 8012a84:	08012b3d 	.word	0x08012b3d
 8012a88:	08012b15 	.word	0x08012b15
 8012a8c:	08012b3d 	.word	0x08012b3d
 8012a90:	08012b3d 	.word	0x08012b3d
 8012a94:	08012b3d 	.word	0x08012b3d
 8012a98:	08012b3d 	.word	0x08012b3d
 8012a9c:	08012b3d 	.word	0x08012b3d
 8012aa0:	08012b3d 	.word	0x08012b3d
 8012aa4:	08012b3d 	.word	0x08012b3d
 8012aa8:	08012b1d 	.word	0x08012b1d
 8012aac:	08012b3d 	.word	0x08012b3d
 8012ab0:	08012b3d 	.word	0x08012b3d
 8012ab4:	08012b3d 	.word	0x08012b3d
 8012ab8:	08012b3d 	.word	0x08012b3d
 8012abc:	08012b3d 	.word	0x08012b3d
 8012ac0:	08012b3d 	.word	0x08012b3d
 8012ac4:	08012b3d 	.word	0x08012b3d
 8012ac8:	08012b25 	.word	0x08012b25
 8012acc:	08012b3d 	.word	0x08012b3d
 8012ad0:	08012b3d 	.word	0x08012b3d
 8012ad4:	08012b3d 	.word	0x08012b3d
 8012ad8:	08012b3d 	.word	0x08012b3d
 8012adc:	08012b3d 	.word	0x08012b3d
 8012ae0:	08012b3d 	.word	0x08012b3d
 8012ae4:	08012b3d 	.word	0x08012b3d
 8012ae8:	08012b2d 	.word	0x08012b2d
 8012aec:	08012b3d 	.word	0x08012b3d
 8012af0:	08012b3d 	.word	0x08012b3d
 8012af4:	08012b3d 	.word	0x08012b3d
 8012af8:	08012b3d 	.word	0x08012b3d
 8012afc:	08012b3d 	.word	0x08012b3d
 8012b00:	08012b3d 	.word	0x08012b3d
 8012b04:	08012b3d 	.word	0x08012b3d
 8012b08:	08012b35 	.word	0x08012b35
 8012b0c:	2301      	movs	r3, #1
 8012b0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012b12:	e050      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012b14:	2304      	movs	r3, #4
 8012b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012b1a:	e04c      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012b1c:	2308      	movs	r3, #8
 8012b1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012b22:	e048      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012b24:	2310      	movs	r3, #16
 8012b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012b2a:	e044      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012b2c:	2320      	movs	r3, #32
 8012b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012b32:	e040      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012b34:	2340      	movs	r3, #64	; 0x40
 8012b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012b3a:	e03c      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012b3c:	2380      	movs	r3, #128	; 0x80
 8012b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012b42:	e038      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	4a71      	ldr	r2, [pc, #452]	; (8012d10 <UART_SetConfig+0x904>)
 8012b4a:	4293      	cmp	r3, r2
 8012b4c:	d130      	bne.n	8012bb0 <UART_SetConfig+0x7a4>
 8012b4e:	4b6f      	ldr	r3, [pc, #444]	; (8012d0c <UART_SetConfig+0x900>)
 8012b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012b52:	f003 0307 	and.w	r3, r3, #7
 8012b56:	2b05      	cmp	r3, #5
 8012b58:	d826      	bhi.n	8012ba8 <UART_SetConfig+0x79c>
 8012b5a:	a201      	add	r2, pc, #4	; (adr r2, 8012b60 <UART_SetConfig+0x754>)
 8012b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b60:	08012b79 	.word	0x08012b79
 8012b64:	08012b81 	.word	0x08012b81
 8012b68:	08012b89 	.word	0x08012b89
 8012b6c:	08012b91 	.word	0x08012b91
 8012b70:	08012b99 	.word	0x08012b99
 8012b74:	08012ba1 	.word	0x08012ba1
 8012b78:	2302      	movs	r3, #2
 8012b7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012b7e:	e01a      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012b80:	2304      	movs	r3, #4
 8012b82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012b86:	e016      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012b88:	2308      	movs	r3, #8
 8012b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012b8e:	e012      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012b90:	2310      	movs	r3, #16
 8012b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012b96:	e00e      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012b98:	2320      	movs	r3, #32
 8012b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012b9e:	e00a      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012ba0:	2340      	movs	r3, #64	; 0x40
 8012ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012ba6:	e006      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012ba8:	2380      	movs	r3, #128	; 0x80
 8012baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012bae:	e002      	b.n	8012bb6 <UART_SetConfig+0x7aa>
 8012bb0:	2380      	movs	r3, #128	; 0x80
 8012bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	4a55      	ldr	r2, [pc, #340]	; (8012d10 <UART_SetConfig+0x904>)
 8012bbc:	4293      	cmp	r3, r2
 8012bbe:	f040 80f0 	bne.w	8012da2 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012bc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012bc6:	2b20      	cmp	r3, #32
 8012bc8:	dc46      	bgt.n	8012c58 <UART_SetConfig+0x84c>
 8012bca:	2b02      	cmp	r3, #2
 8012bcc:	db75      	blt.n	8012cba <UART_SetConfig+0x8ae>
 8012bce:	3b02      	subs	r3, #2
 8012bd0:	2b1e      	cmp	r3, #30
 8012bd2:	d872      	bhi.n	8012cba <UART_SetConfig+0x8ae>
 8012bd4:	a201      	add	r2, pc, #4	; (adr r2, 8012bdc <UART_SetConfig+0x7d0>)
 8012bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bda:	bf00      	nop
 8012bdc:	08012c5f 	.word	0x08012c5f
 8012be0:	08012cbb 	.word	0x08012cbb
 8012be4:	08012c67 	.word	0x08012c67
 8012be8:	08012cbb 	.word	0x08012cbb
 8012bec:	08012cbb 	.word	0x08012cbb
 8012bf0:	08012cbb 	.word	0x08012cbb
 8012bf4:	08012c77 	.word	0x08012c77
 8012bf8:	08012cbb 	.word	0x08012cbb
 8012bfc:	08012cbb 	.word	0x08012cbb
 8012c00:	08012cbb 	.word	0x08012cbb
 8012c04:	08012cbb 	.word	0x08012cbb
 8012c08:	08012cbb 	.word	0x08012cbb
 8012c0c:	08012cbb 	.word	0x08012cbb
 8012c10:	08012cbb 	.word	0x08012cbb
 8012c14:	08012c87 	.word	0x08012c87
 8012c18:	08012cbb 	.word	0x08012cbb
 8012c1c:	08012cbb 	.word	0x08012cbb
 8012c20:	08012cbb 	.word	0x08012cbb
 8012c24:	08012cbb 	.word	0x08012cbb
 8012c28:	08012cbb 	.word	0x08012cbb
 8012c2c:	08012cbb 	.word	0x08012cbb
 8012c30:	08012cbb 	.word	0x08012cbb
 8012c34:	08012cbb 	.word	0x08012cbb
 8012c38:	08012cbb 	.word	0x08012cbb
 8012c3c:	08012cbb 	.word	0x08012cbb
 8012c40:	08012cbb 	.word	0x08012cbb
 8012c44:	08012cbb 	.word	0x08012cbb
 8012c48:	08012cbb 	.word	0x08012cbb
 8012c4c:	08012cbb 	.word	0x08012cbb
 8012c50:	08012cbb 	.word	0x08012cbb
 8012c54:	08012cad 	.word	0x08012cad
 8012c58:	2b40      	cmp	r3, #64	; 0x40
 8012c5a:	d02a      	beq.n	8012cb2 <UART_SetConfig+0x8a6>
 8012c5c:	e02d      	b.n	8012cba <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8012c5e:	f7fc fd77 	bl	800f750 <HAL_RCCEx_GetD3PCLK1Freq>
 8012c62:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8012c64:	e02f      	b.n	8012cc6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012c66:	f107 0314 	add.w	r3, r7, #20
 8012c6a:	4618      	mov	r0, r3
 8012c6c:	f7fc fd86 	bl	800f77c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012c70:	69bb      	ldr	r3, [r7, #24]
 8012c72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012c74:	e027      	b.n	8012cc6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012c76:	f107 0308 	add.w	r3, r7, #8
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	f7fc fed2 	bl	800fa24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012c84:	e01f      	b.n	8012cc6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012c86:	4b21      	ldr	r3, [pc, #132]	; (8012d0c <UART_SetConfig+0x900>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	f003 0320 	and.w	r3, r3, #32
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d009      	beq.n	8012ca6 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012c92:	4b1e      	ldr	r3, [pc, #120]	; (8012d0c <UART_SetConfig+0x900>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	08db      	lsrs	r3, r3, #3
 8012c98:	f003 0303 	and.w	r3, r3, #3
 8012c9c:	4a1d      	ldr	r2, [pc, #116]	; (8012d14 <UART_SetConfig+0x908>)
 8012c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8012ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012ca4:	e00f      	b.n	8012cc6 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8012ca6:	4b1b      	ldr	r3, [pc, #108]	; (8012d14 <UART_SetConfig+0x908>)
 8012ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012caa:	e00c      	b.n	8012cc6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012cac:	4b1a      	ldr	r3, [pc, #104]	; (8012d18 <UART_SetConfig+0x90c>)
 8012cae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012cb0:	e009      	b.n	8012cc6 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012cb8:	e005      	b.n	8012cc6 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8012cba:	2300      	movs	r3, #0
 8012cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8012cbe:	2301      	movs	r3, #1
 8012cc0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8012cc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	f000 81e6 	beq.w	801309a <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cd2:	4a12      	ldr	r2, [pc, #72]	; (8012d1c <UART_SetConfig+0x910>)
 8012cd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012cd8:	461a      	mov	r2, r3
 8012cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ce0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	685a      	ldr	r2, [r3, #4]
 8012ce6:	4613      	mov	r3, r2
 8012ce8:	005b      	lsls	r3, r3, #1
 8012cea:	4413      	add	r3, r2
 8012cec:	6a3a      	ldr	r2, [r7, #32]
 8012cee:	429a      	cmp	r2, r3
 8012cf0:	d305      	bcc.n	8012cfe <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	685b      	ldr	r3, [r3, #4]
 8012cf6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012cf8:	6a3a      	ldr	r2, [r7, #32]
 8012cfa:	429a      	cmp	r2, r3
 8012cfc:	d910      	bls.n	8012d20 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8012cfe:	2301      	movs	r3, #1
 8012d00:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8012d04:	e1c9      	b.n	801309a <UART_SetConfig+0xc8e>
 8012d06:	bf00      	nop
 8012d08:	40011c00 	.word	0x40011c00
 8012d0c:	58024400 	.word	0x58024400
 8012d10:	58000c00 	.word	0x58000c00
 8012d14:	03d09000 	.word	0x03d09000
 8012d18:	003d0900 	.word	0x003d0900
 8012d1c:	08018560 	.word	0x08018560
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d22:	4618      	mov	r0, r3
 8012d24:	f04f 0100 	mov.w	r1, #0
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d2c:	4ac1      	ldr	r2, [pc, #772]	; (8013034 <UART_SetConfig+0xc28>)
 8012d2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012d32:	b29a      	uxth	r2, r3
 8012d34:	f04f 0300 	mov.w	r3, #0
 8012d38:	f7ed fb42 	bl	80003c0 <__aeabi_uldivmod>
 8012d3c:	4602      	mov	r2, r0
 8012d3e:	460b      	mov	r3, r1
 8012d40:	4610      	mov	r0, r2
 8012d42:	4619      	mov	r1, r3
 8012d44:	f04f 0200 	mov.w	r2, #0
 8012d48:	f04f 0300 	mov.w	r3, #0
 8012d4c:	020b      	lsls	r3, r1, #8
 8012d4e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012d52:	0202      	lsls	r2, r0, #8
 8012d54:	6879      	ldr	r1, [r7, #4]
 8012d56:	6849      	ldr	r1, [r1, #4]
 8012d58:	0849      	lsrs	r1, r1, #1
 8012d5a:	4608      	mov	r0, r1
 8012d5c:	f04f 0100 	mov.w	r1, #0
 8012d60:	1814      	adds	r4, r2, r0
 8012d62:	eb43 0501 	adc.w	r5, r3, r1
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	685b      	ldr	r3, [r3, #4]
 8012d6a:	461a      	mov	r2, r3
 8012d6c:	f04f 0300 	mov.w	r3, #0
 8012d70:	4620      	mov	r0, r4
 8012d72:	4629      	mov	r1, r5
 8012d74:	f7ed fb24 	bl	80003c0 <__aeabi_uldivmod>
 8012d78:	4602      	mov	r2, r0
 8012d7a:	460b      	mov	r3, r1
 8012d7c:	4613      	mov	r3, r2
 8012d7e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012d86:	d308      	bcc.n	8012d9a <UART_SetConfig+0x98e>
 8012d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012d8e:	d204      	bcs.n	8012d9a <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d96:	60da      	str	r2, [r3, #12]
 8012d98:	e17f      	b.n	801309a <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8012d9a:	2301      	movs	r3, #1
 8012d9c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8012da0:	e17b      	b.n	801309a <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	69db      	ldr	r3, [r3, #28]
 8012da6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012daa:	f040 80bd 	bne.w	8012f28 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8012dae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012db2:	2b20      	cmp	r3, #32
 8012db4:	dc48      	bgt.n	8012e48 <UART_SetConfig+0xa3c>
 8012db6:	2b00      	cmp	r3, #0
 8012db8:	db7b      	blt.n	8012eb2 <UART_SetConfig+0xaa6>
 8012dba:	2b20      	cmp	r3, #32
 8012dbc:	d879      	bhi.n	8012eb2 <UART_SetConfig+0xaa6>
 8012dbe:	a201      	add	r2, pc, #4	; (adr r2, 8012dc4 <UART_SetConfig+0x9b8>)
 8012dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012dc4:	08012e4f 	.word	0x08012e4f
 8012dc8:	08012e57 	.word	0x08012e57
 8012dcc:	08012eb3 	.word	0x08012eb3
 8012dd0:	08012eb3 	.word	0x08012eb3
 8012dd4:	08012e5f 	.word	0x08012e5f
 8012dd8:	08012eb3 	.word	0x08012eb3
 8012ddc:	08012eb3 	.word	0x08012eb3
 8012de0:	08012eb3 	.word	0x08012eb3
 8012de4:	08012e6f 	.word	0x08012e6f
 8012de8:	08012eb3 	.word	0x08012eb3
 8012dec:	08012eb3 	.word	0x08012eb3
 8012df0:	08012eb3 	.word	0x08012eb3
 8012df4:	08012eb3 	.word	0x08012eb3
 8012df8:	08012eb3 	.word	0x08012eb3
 8012dfc:	08012eb3 	.word	0x08012eb3
 8012e00:	08012eb3 	.word	0x08012eb3
 8012e04:	08012e7f 	.word	0x08012e7f
 8012e08:	08012eb3 	.word	0x08012eb3
 8012e0c:	08012eb3 	.word	0x08012eb3
 8012e10:	08012eb3 	.word	0x08012eb3
 8012e14:	08012eb3 	.word	0x08012eb3
 8012e18:	08012eb3 	.word	0x08012eb3
 8012e1c:	08012eb3 	.word	0x08012eb3
 8012e20:	08012eb3 	.word	0x08012eb3
 8012e24:	08012eb3 	.word	0x08012eb3
 8012e28:	08012eb3 	.word	0x08012eb3
 8012e2c:	08012eb3 	.word	0x08012eb3
 8012e30:	08012eb3 	.word	0x08012eb3
 8012e34:	08012eb3 	.word	0x08012eb3
 8012e38:	08012eb3 	.word	0x08012eb3
 8012e3c:	08012eb3 	.word	0x08012eb3
 8012e40:	08012eb3 	.word	0x08012eb3
 8012e44:	08012ea5 	.word	0x08012ea5
 8012e48:	2b40      	cmp	r3, #64	; 0x40
 8012e4a:	d02e      	beq.n	8012eaa <UART_SetConfig+0xa9e>
 8012e4c:	e031      	b.n	8012eb2 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012e4e:	f7fb f919 	bl	800e084 <HAL_RCC_GetPCLK1Freq>
 8012e52:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8012e54:	e033      	b.n	8012ebe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012e56:	f7fb f92b 	bl	800e0b0 <HAL_RCC_GetPCLK2Freq>
 8012e5a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8012e5c:	e02f      	b.n	8012ebe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012e5e:	f107 0314 	add.w	r3, r7, #20
 8012e62:	4618      	mov	r0, r3
 8012e64:	f7fc fc8a 	bl	800f77c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012e68:	69bb      	ldr	r3, [r7, #24]
 8012e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012e6c:	e027      	b.n	8012ebe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012e6e:	f107 0308 	add.w	r3, r7, #8
 8012e72:	4618      	mov	r0, r3
 8012e74:	f7fc fdd6 	bl	800fa24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012e7c:	e01f      	b.n	8012ebe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012e7e:	4b6e      	ldr	r3, [pc, #440]	; (8013038 <UART_SetConfig+0xc2c>)
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	f003 0320 	and.w	r3, r3, #32
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d009      	beq.n	8012e9e <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012e8a:	4b6b      	ldr	r3, [pc, #428]	; (8013038 <UART_SetConfig+0xc2c>)
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	08db      	lsrs	r3, r3, #3
 8012e90:	f003 0303 	and.w	r3, r3, #3
 8012e94:	4a69      	ldr	r2, [pc, #420]	; (801303c <UART_SetConfig+0xc30>)
 8012e96:	fa22 f303 	lsr.w	r3, r2, r3
 8012e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012e9c:	e00f      	b.n	8012ebe <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8012e9e:	4b67      	ldr	r3, [pc, #412]	; (801303c <UART_SetConfig+0xc30>)
 8012ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012ea2:	e00c      	b.n	8012ebe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012ea4:	4b66      	ldr	r3, [pc, #408]	; (8013040 <UART_SetConfig+0xc34>)
 8012ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012ea8:	e009      	b.n	8012ebe <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012eae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012eb0:	e005      	b.n	8012ebe <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8012eb6:	2301      	movs	r3, #1
 8012eb8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8012ebc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	f000 80ea 	beq.w	801309a <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012eca:	4a5a      	ldr	r2, [pc, #360]	; (8013034 <UART_SetConfig+0xc28>)
 8012ecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012ed0:	461a      	mov	r2, r3
 8012ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ed4:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ed8:	005a      	lsls	r2, r3, #1
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	685b      	ldr	r3, [r3, #4]
 8012ede:	085b      	lsrs	r3, r3, #1
 8012ee0:	441a      	add	r2, r3
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	685b      	ldr	r3, [r3, #4]
 8012ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8012eea:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eee:	2b0f      	cmp	r3, #15
 8012ef0:	d916      	bls.n	8012f20 <UART_SetConfig+0xb14>
 8012ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012ef8:	d212      	bcs.n	8012f20 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012efc:	b29b      	uxth	r3, r3
 8012efe:	f023 030f 	bic.w	r3, r3, #15
 8012f02:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f06:	085b      	lsrs	r3, r3, #1
 8012f08:	b29b      	uxth	r3, r3
 8012f0a:	f003 0307 	and.w	r3, r3, #7
 8012f0e:	b29a      	uxth	r2, r3
 8012f10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012f12:	4313      	orrs	r3, r2
 8012f14:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012f1c:	60da      	str	r2, [r3, #12]
 8012f1e:	e0bc      	b.n	801309a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8012f20:	2301      	movs	r3, #1
 8012f22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8012f26:	e0b8      	b.n	801309a <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012f28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012f2c:	2b20      	cmp	r3, #32
 8012f2e:	dc4b      	bgt.n	8012fc8 <UART_SetConfig+0xbbc>
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	f2c0 8087 	blt.w	8013044 <UART_SetConfig+0xc38>
 8012f36:	2b20      	cmp	r3, #32
 8012f38:	f200 8084 	bhi.w	8013044 <UART_SetConfig+0xc38>
 8012f3c:	a201      	add	r2, pc, #4	; (adr r2, 8012f44 <UART_SetConfig+0xb38>)
 8012f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f42:	bf00      	nop
 8012f44:	08012fcf 	.word	0x08012fcf
 8012f48:	08012fd7 	.word	0x08012fd7
 8012f4c:	08013045 	.word	0x08013045
 8012f50:	08013045 	.word	0x08013045
 8012f54:	08012fdf 	.word	0x08012fdf
 8012f58:	08013045 	.word	0x08013045
 8012f5c:	08013045 	.word	0x08013045
 8012f60:	08013045 	.word	0x08013045
 8012f64:	08012fef 	.word	0x08012fef
 8012f68:	08013045 	.word	0x08013045
 8012f6c:	08013045 	.word	0x08013045
 8012f70:	08013045 	.word	0x08013045
 8012f74:	08013045 	.word	0x08013045
 8012f78:	08013045 	.word	0x08013045
 8012f7c:	08013045 	.word	0x08013045
 8012f80:	08013045 	.word	0x08013045
 8012f84:	08012fff 	.word	0x08012fff
 8012f88:	08013045 	.word	0x08013045
 8012f8c:	08013045 	.word	0x08013045
 8012f90:	08013045 	.word	0x08013045
 8012f94:	08013045 	.word	0x08013045
 8012f98:	08013045 	.word	0x08013045
 8012f9c:	08013045 	.word	0x08013045
 8012fa0:	08013045 	.word	0x08013045
 8012fa4:	08013045 	.word	0x08013045
 8012fa8:	08013045 	.word	0x08013045
 8012fac:	08013045 	.word	0x08013045
 8012fb0:	08013045 	.word	0x08013045
 8012fb4:	08013045 	.word	0x08013045
 8012fb8:	08013045 	.word	0x08013045
 8012fbc:	08013045 	.word	0x08013045
 8012fc0:	08013045 	.word	0x08013045
 8012fc4:	08013025 	.word	0x08013025
 8012fc8:	2b40      	cmp	r3, #64	; 0x40
 8012fca:	d02e      	beq.n	801302a <UART_SetConfig+0xc1e>
 8012fcc:	e03a      	b.n	8013044 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012fce:	f7fb f859 	bl	800e084 <HAL_RCC_GetPCLK1Freq>
 8012fd2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8012fd4:	e03c      	b.n	8013050 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012fd6:	f7fb f86b 	bl	800e0b0 <HAL_RCC_GetPCLK2Freq>
 8012fda:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8012fdc:	e038      	b.n	8013050 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012fde:	f107 0314 	add.w	r3, r7, #20
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	f7fc fbca 	bl	800f77c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012fe8:	69bb      	ldr	r3, [r7, #24]
 8012fea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012fec:	e030      	b.n	8013050 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012fee:	f107 0308 	add.w	r3, r7, #8
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f7fc fd16 	bl	800fa24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012ffc:	e028      	b.n	8013050 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012ffe:	4b0e      	ldr	r3, [pc, #56]	; (8013038 <UART_SetConfig+0xc2c>)
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	f003 0320 	and.w	r3, r3, #32
 8013006:	2b00      	cmp	r3, #0
 8013008:	d009      	beq.n	801301e <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801300a:	4b0b      	ldr	r3, [pc, #44]	; (8013038 <UART_SetConfig+0xc2c>)
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	08db      	lsrs	r3, r3, #3
 8013010:	f003 0303 	and.w	r3, r3, #3
 8013014:	4a09      	ldr	r2, [pc, #36]	; (801303c <UART_SetConfig+0xc30>)
 8013016:	fa22 f303 	lsr.w	r3, r2, r3
 801301a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801301c:	e018      	b.n	8013050 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 801301e:	4b07      	ldr	r3, [pc, #28]	; (801303c <UART_SetConfig+0xc30>)
 8013020:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8013022:	e015      	b.n	8013050 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013024:	4b06      	ldr	r3, [pc, #24]	; (8013040 <UART_SetConfig+0xc34>)
 8013026:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8013028:	e012      	b.n	8013050 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801302a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801302e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8013030:	e00e      	b.n	8013050 <UART_SetConfig+0xc44>
 8013032:	bf00      	nop
 8013034:	08018560 	.word	0x08018560
 8013038:	58024400 	.word	0x58024400
 801303c:	03d09000 	.word	0x03d09000
 8013040:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8013044:	2300      	movs	r3, #0
 8013046:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8013048:	2301      	movs	r3, #1
 801304a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 801304e:	bf00      	nop
    }

    if (pclk != 0U)
 8013050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013052:	2b00      	cmp	r3, #0
 8013054:	d021      	beq.n	801309a <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801305a:	4a1a      	ldr	r2, [pc, #104]	; (80130c4 <UART_SetConfig+0xcb8>)
 801305c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013060:	461a      	mov	r2, r3
 8013062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013064:	fbb3 f2f2 	udiv	r2, r3, r2
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	685b      	ldr	r3, [r3, #4]
 801306c:	085b      	lsrs	r3, r3, #1
 801306e:	441a      	add	r2, r3
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	685b      	ldr	r3, [r3, #4]
 8013074:	fbb2 f3f3 	udiv	r3, r2, r3
 8013078:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801307a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801307c:	2b0f      	cmp	r3, #15
 801307e:	d909      	bls.n	8013094 <UART_SetConfig+0xc88>
 8013080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013086:	d205      	bcs.n	8013094 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801308a:	b29a      	uxth	r2, r3
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	60da      	str	r2, [r3, #12]
 8013092:	e002      	b.n	801309a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8013094:	2301      	movs	r3, #1
 8013096:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	2201      	movs	r2, #1
 801309e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	2201      	movs	r2, #1
 80130a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	2200      	movs	r2, #0
 80130ae:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	2200      	movs	r2, #0
 80130b4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80130b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80130ba:	4618      	mov	r0, r3
 80130bc:	3738      	adds	r7, #56	; 0x38
 80130be:	46bd      	mov	sp, r7
 80130c0:	bdb0      	pop	{r4, r5, r7, pc}
 80130c2:	bf00      	nop
 80130c4:	08018560 	.word	0x08018560

080130c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80130c8:	b480      	push	{r7}
 80130ca:	b083      	sub	sp, #12
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130d4:	f003 0301 	and.w	r3, r3, #1
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d00a      	beq.n	80130f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	681b      	ldr	r3, [r3, #0]
 80130e0:	685b      	ldr	r3, [r3, #4]
 80130e2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	430a      	orrs	r2, r1
 80130f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130f6:	f003 0302 	and.w	r3, r3, #2
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d00a      	beq.n	8013114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	685b      	ldr	r3, [r3, #4]
 8013104:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	430a      	orrs	r2, r1
 8013112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013118:	f003 0304 	and.w	r3, r3, #4
 801311c:	2b00      	cmp	r3, #0
 801311e:	d00a      	beq.n	8013136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	685b      	ldr	r3, [r3, #4]
 8013126:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	430a      	orrs	r2, r1
 8013134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801313a:	f003 0308 	and.w	r3, r3, #8
 801313e:	2b00      	cmp	r3, #0
 8013140:	d00a      	beq.n	8013158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	685b      	ldr	r3, [r3, #4]
 8013148:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	430a      	orrs	r2, r1
 8013156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801315c:	f003 0310 	and.w	r3, r3, #16
 8013160:	2b00      	cmp	r3, #0
 8013162:	d00a      	beq.n	801317a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	689b      	ldr	r3, [r3, #8]
 801316a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	430a      	orrs	r2, r1
 8013178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801317e:	f003 0320 	and.w	r3, r3, #32
 8013182:	2b00      	cmp	r3, #0
 8013184:	d00a      	beq.n	801319c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	689b      	ldr	r3, [r3, #8]
 801318c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	430a      	orrs	r2, r1
 801319a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d01a      	beq.n	80131de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	685b      	ldr	r3, [r3, #4]
 80131ae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	430a      	orrs	r2, r1
 80131bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80131c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80131c6:	d10a      	bne.n	80131de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	685b      	ldr	r3, [r3, #4]
 80131ce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	430a      	orrs	r2, r1
 80131dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d00a      	beq.n	8013200 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	685b      	ldr	r3, [r3, #4]
 80131f0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	430a      	orrs	r2, r1
 80131fe:	605a      	str	r2, [r3, #4]
  }
}
 8013200:	bf00      	nop
 8013202:	370c      	adds	r7, #12
 8013204:	46bd      	mov	sp, r7
 8013206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801320a:	4770      	bx	lr

0801320c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b086      	sub	sp, #24
 8013210:	af02      	add	r7, sp, #8
 8013212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	2200      	movs	r2, #0
 8013218:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801321c:	f7f7 fa30 	bl	800a680 <HAL_GetTick>
 8013220:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	f003 0308 	and.w	r3, r3, #8
 801322c:	2b08      	cmp	r3, #8
 801322e:	d10e      	bne.n	801324e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013234:	9300      	str	r3, [sp, #0]
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	2200      	movs	r2, #0
 801323a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801323e:	6878      	ldr	r0, [r7, #4]
 8013240:	f000 f82f 	bl	80132a2 <UART_WaitOnFlagUntilTimeout>
 8013244:	4603      	mov	r3, r0
 8013246:	2b00      	cmp	r3, #0
 8013248:	d001      	beq.n	801324e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801324a:	2303      	movs	r3, #3
 801324c:	e025      	b.n	801329a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	f003 0304 	and.w	r3, r3, #4
 8013258:	2b04      	cmp	r3, #4
 801325a:	d10e      	bne.n	801327a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801325c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013260:	9300      	str	r3, [sp, #0]
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	2200      	movs	r2, #0
 8013266:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801326a:	6878      	ldr	r0, [r7, #4]
 801326c:	f000 f819 	bl	80132a2 <UART_WaitOnFlagUntilTimeout>
 8013270:	4603      	mov	r3, r0
 8013272:	2b00      	cmp	r3, #0
 8013274:	d001      	beq.n	801327a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013276:	2303      	movs	r3, #3
 8013278:	e00f      	b.n	801329a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	2220      	movs	r2, #32
 801327e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	2220      	movs	r2, #32
 8013286:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	2200      	movs	r2, #0
 801328e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	2200      	movs	r2, #0
 8013294:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013298:	2300      	movs	r3, #0
}
 801329a:	4618      	mov	r0, r3
 801329c:	3710      	adds	r7, #16
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd80      	pop	{r7, pc}

080132a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80132a2:	b580      	push	{r7, lr}
 80132a4:	b09c      	sub	sp, #112	; 0x70
 80132a6:	af00      	add	r7, sp, #0
 80132a8:	60f8      	str	r0, [r7, #12]
 80132aa:	60b9      	str	r1, [r7, #8]
 80132ac:	603b      	str	r3, [r7, #0]
 80132ae:	4613      	mov	r3, r2
 80132b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80132b2:	e0a9      	b.n	8013408 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80132b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80132b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132ba:	f000 80a5 	beq.w	8013408 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80132be:	f7f7 f9df 	bl	800a680 <HAL_GetTick>
 80132c2:	4602      	mov	r2, r0
 80132c4:	683b      	ldr	r3, [r7, #0]
 80132c6:	1ad3      	subs	r3, r2, r3
 80132c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80132ca:	429a      	cmp	r2, r3
 80132cc:	d302      	bcc.n	80132d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80132ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d140      	bne.n	8013356 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80132dc:	e853 3f00 	ldrex	r3, [r3]
 80132e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80132e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80132e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80132e8:	667b      	str	r3, [r7, #100]	; 0x64
 80132ea:	68fb      	ldr	r3, [r7, #12]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	461a      	mov	r2, r3
 80132f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80132f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80132f4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80132f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80132f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80132fa:	e841 2300 	strex	r3, r2, [r1]
 80132fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8013300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013302:	2b00      	cmp	r3, #0
 8013304:	d1e6      	bne.n	80132d4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	3308      	adds	r3, #8
 801330c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801330e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013310:	e853 3f00 	ldrex	r3, [r3]
 8013314:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013318:	f023 0301 	bic.w	r3, r3, #1
 801331c:	663b      	str	r3, [r7, #96]	; 0x60
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	3308      	adds	r3, #8
 8013324:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013326:	64ba      	str	r2, [r7, #72]	; 0x48
 8013328:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801332a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801332c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801332e:	e841 2300 	strex	r3, r2, [r1]
 8013332:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013336:	2b00      	cmp	r3, #0
 8013338:	d1e5      	bne.n	8013306 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	2220      	movs	r2, #32
 801333e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	2220      	movs	r2, #32
 8013346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	2200      	movs	r2, #0
 801334e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8013352:	2303      	movs	r3, #3
 8013354:	e069      	b.n	801342a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	f003 0304 	and.w	r3, r3, #4
 8013360:	2b00      	cmp	r3, #0
 8013362:	d051      	beq.n	8013408 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	69db      	ldr	r3, [r3, #28]
 801336a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801336e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013372:	d149      	bne.n	8013408 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801337c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013386:	e853 3f00 	ldrex	r3, [r3]
 801338a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801338e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013392:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	461a      	mov	r2, r3
 801339a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801339c:	637b      	str	r3, [r7, #52]	; 0x34
 801339e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80133a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80133a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80133a4:	e841 2300 	strex	r3, r2, [r1]
 80133a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80133aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d1e6      	bne.n	801337e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	3308      	adds	r3, #8
 80133b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133b8:	697b      	ldr	r3, [r7, #20]
 80133ba:	e853 3f00 	ldrex	r3, [r3]
 80133be:	613b      	str	r3, [r7, #16]
   return(result);
 80133c0:	693b      	ldr	r3, [r7, #16]
 80133c2:	f023 0301 	bic.w	r3, r3, #1
 80133c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	3308      	adds	r3, #8
 80133ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80133d0:	623a      	str	r2, [r7, #32]
 80133d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80133d4:	69f9      	ldr	r1, [r7, #28]
 80133d6:	6a3a      	ldr	r2, [r7, #32]
 80133d8:	e841 2300 	strex	r3, r2, [r1]
 80133dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80133de:	69bb      	ldr	r3, [r7, #24]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d1e5      	bne.n	80133b0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	2220      	movs	r2, #32
 80133e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	2220      	movs	r2, #32
 80133f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	2220      	movs	r2, #32
 80133f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	2200      	movs	r2, #0
 8013400:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8013404:	2303      	movs	r3, #3
 8013406:	e010      	b.n	801342a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	69da      	ldr	r2, [r3, #28]
 801340e:	68bb      	ldr	r3, [r7, #8]
 8013410:	4013      	ands	r3, r2
 8013412:	68ba      	ldr	r2, [r7, #8]
 8013414:	429a      	cmp	r2, r3
 8013416:	bf0c      	ite	eq
 8013418:	2301      	moveq	r3, #1
 801341a:	2300      	movne	r3, #0
 801341c:	b2db      	uxtb	r3, r3
 801341e:	461a      	mov	r2, r3
 8013420:	79fb      	ldrb	r3, [r7, #7]
 8013422:	429a      	cmp	r2, r3
 8013424:	f43f af46 	beq.w	80132b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013428:	2300      	movs	r3, #0
}
 801342a:	4618      	mov	r0, r3
 801342c:	3770      	adds	r7, #112	; 0x70
 801342e:	46bd      	mov	sp, r7
 8013430:	bd80      	pop	{r7, pc}
	...

08013434 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013434:	b480      	push	{r7}
 8013436:	b0a3      	sub	sp, #140	; 0x8c
 8013438:	af00      	add	r7, sp, #0
 801343a:	60f8      	str	r0, [r7, #12]
 801343c:	60b9      	str	r1, [r7, #8]
 801343e:	4613      	mov	r3, r2
 8013440:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	68ba      	ldr	r2, [r7, #8]
 8013446:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	88fa      	ldrh	r2, [r7, #6]
 801344c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	88fa      	ldrh	r2, [r7, #6]
 8013454:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	2200      	movs	r2, #0
 801345c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801345e:	68fb      	ldr	r3, [r7, #12]
 8013460:	689b      	ldr	r3, [r3, #8]
 8013462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013466:	d10e      	bne.n	8013486 <UART_Start_Receive_IT+0x52>
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	691b      	ldr	r3, [r3, #16]
 801346c:	2b00      	cmp	r3, #0
 801346e:	d105      	bne.n	801347c <UART_Start_Receive_IT+0x48>
 8013470:	68fb      	ldr	r3, [r7, #12]
 8013472:	f240 12ff 	movw	r2, #511	; 0x1ff
 8013476:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801347a:	e02d      	b.n	80134d8 <UART_Start_Receive_IT+0xa4>
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	22ff      	movs	r2, #255	; 0xff
 8013480:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013484:	e028      	b.n	80134d8 <UART_Start_Receive_IT+0xa4>
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	689b      	ldr	r3, [r3, #8]
 801348a:	2b00      	cmp	r3, #0
 801348c:	d10d      	bne.n	80134aa <UART_Start_Receive_IT+0x76>
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	691b      	ldr	r3, [r3, #16]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d104      	bne.n	80134a0 <UART_Start_Receive_IT+0x6c>
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	22ff      	movs	r2, #255	; 0xff
 801349a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801349e:	e01b      	b.n	80134d8 <UART_Start_Receive_IT+0xa4>
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	227f      	movs	r2, #127	; 0x7f
 80134a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80134a8:	e016      	b.n	80134d8 <UART_Start_Receive_IT+0xa4>
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	689b      	ldr	r3, [r3, #8]
 80134ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80134b2:	d10d      	bne.n	80134d0 <UART_Start_Receive_IT+0x9c>
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	691b      	ldr	r3, [r3, #16]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d104      	bne.n	80134c6 <UART_Start_Receive_IT+0x92>
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	227f      	movs	r2, #127	; 0x7f
 80134c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80134c4:	e008      	b.n	80134d8 <UART_Start_Receive_IT+0xa4>
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	223f      	movs	r2, #63	; 0x3f
 80134ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80134ce:	e003      	b.n	80134d8 <UART_Start_Receive_IT+0xa4>
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	2200      	movs	r2, #0
 80134d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	2200      	movs	r2, #0
 80134dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80134e0:	68fb      	ldr	r3, [r7, #12]
 80134e2:	2222      	movs	r2, #34	; 0x22
 80134e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80134e8:	68fb      	ldr	r3, [r7, #12]
 80134ea:	681b      	ldr	r3, [r3, #0]
 80134ec:	3308      	adds	r3, #8
 80134ee:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80134f2:	e853 3f00 	ldrex	r3, [r3]
 80134f6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80134f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80134fa:	f043 0301 	orr.w	r3, r3, #1
 80134fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	3308      	adds	r3, #8
 8013508:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801350c:	673a      	str	r2, [r7, #112]	; 0x70
 801350e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013510:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8013512:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013514:	e841 2300 	strex	r3, r2, [r1]
 8013518:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801351a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801351c:	2b00      	cmp	r3, #0
 801351e:	d1e3      	bne.n	80134e8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013528:	d153      	bne.n	80135d2 <UART_Start_Receive_IT+0x19e>
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013530:	88fa      	ldrh	r2, [r7, #6]
 8013532:	429a      	cmp	r2, r3
 8013534:	d34d      	bcc.n	80135d2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	689b      	ldr	r3, [r3, #8]
 801353a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801353e:	d107      	bne.n	8013550 <UART_Start_Receive_IT+0x11c>
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	691b      	ldr	r3, [r3, #16]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d103      	bne.n	8013550 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	4a4b      	ldr	r2, [pc, #300]	; (8013678 <UART_Start_Receive_IT+0x244>)
 801354c:	671a      	str	r2, [r3, #112]	; 0x70
 801354e:	e002      	b.n	8013556 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	4a4a      	ldr	r2, [pc, #296]	; (801367c <UART_Start_Receive_IT+0x248>)
 8013554:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	2200      	movs	r2, #0
 801355a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	691b      	ldr	r3, [r3, #16]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d01a      	beq.n	801359c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801356c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801356e:	e853 3f00 	ldrex	r3, [r3]
 8013572:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801357a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	461a      	mov	r2, r3
 8013584:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013588:	65fb      	str	r3, [r7, #92]	; 0x5c
 801358a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801358c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801358e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013590:	e841 2300 	strex	r3, r2, [r1]
 8013594:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8013596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013598:	2b00      	cmp	r3, #0
 801359a:	d1e4      	bne.n	8013566 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	3308      	adds	r3, #8
 80135a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135a6:	e853 3f00 	ldrex	r3, [r3]
 80135aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80135ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80135b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	3308      	adds	r3, #8
 80135ba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80135bc:	64ba      	str	r2, [r7, #72]	; 0x48
 80135be:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135c0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80135c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80135c4:	e841 2300 	strex	r3, r2, [r1]
 80135c8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80135ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d1e5      	bne.n	801359c <UART_Start_Receive_IT+0x168>
 80135d0:	e04a      	b.n	8013668 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	689b      	ldr	r3, [r3, #8]
 80135d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80135da:	d107      	bne.n	80135ec <UART_Start_Receive_IT+0x1b8>
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	691b      	ldr	r3, [r3, #16]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d103      	bne.n	80135ec <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	4a26      	ldr	r2, [pc, #152]	; (8013680 <UART_Start_Receive_IT+0x24c>)
 80135e8:	671a      	str	r2, [r3, #112]	; 0x70
 80135ea:	e002      	b.n	80135f2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	4a25      	ldr	r2, [pc, #148]	; (8013684 <UART_Start_Receive_IT+0x250>)
 80135f0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	2200      	movs	r2, #0
 80135f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	691b      	ldr	r3, [r3, #16]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d019      	beq.n	8013636 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	681b      	ldr	r3, [r3, #0]
 8013606:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801360a:	e853 3f00 	ldrex	r3, [r3]
 801360e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013612:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8013616:	677b      	str	r3, [r7, #116]	; 0x74
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	461a      	mov	r2, r3
 801361e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013620:	637b      	str	r3, [r7, #52]	; 0x34
 8013622:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013624:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013626:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013628:	e841 2300 	strex	r3, r2, [r1]
 801362c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801362e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013630:	2b00      	cmp	r3, #0
 8013632:	d1e6      	bne.n	8013602 <UART_Start_Receive_IT+0x1ce>
 8013634:	e018      	b.n	8013668 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801363c:	697b      	ldr	r3, [r7, #20]
 801363e:	e853 3f00 	ldrex	r3, [r3]
 8013642:	613b      	str	r3, [r7, #16]
   return(result);
 8013644:	693b      	ldr	r3, [r7, #16]
 8013646:	f043 0320 	orr.w	r3, r3, #32
 801364a:	67bb      	str	r3, [r7, #120]	; 0x78
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	461a      	mov	r2, r3
 8013652:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013654:	623b      	str	r3, [r7, #32]
 8013656:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013658:	69f9      	ldr	r1, [r7, #28]
 801365a:	6a3a      	ldr	r2, [r7, #32]
 801365c:	e841 2300 	strex	r3, r2, [r1]
 8013660:	61bb      	str	r3, [r7, #24]
   return(result);
 8013662:	69bb      	ldr	r3, [r7, #24]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d1e6      	bne.n	8013636 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8013668:	2300      	movs	r3, #0
}
 801366a:	4618      	mov	r0, r3
 801366c:	378c      	adds	r7, #140	; 0x8c
 801366e:	46bd      	mov	sp, r7
 8013670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013674:	4770      	bx	lr
 8013676:	bf00      	nop
 8013678:	080140d5 	.word	0x080140d5
 801367c:	08013ddd 	.word	0x08013ddd
 8013680:	08013c7b 	.word	0x08013c7b
 8013684:	08013b1b 	.word	0x08013b1b

08013688 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013688:	b480      	push	{r7}
 801368a:	b095      	sub	sp, #84	; 0x54
 801368c:	af00      	add	r7, sp, #0
 801368e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013698:	e853 3f00 	ldrex	r3, [r3]
 801369c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80136a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	461a      	mov	r2, r3
 80136ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80136ae:	643b      	str	r3, [r7, #64]	; 0x40
 80136b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80136b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80136b6:	e841 2300 	strex	r3, r2, [r1]
 80136ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80136bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d1e6      	bne.n	8013690 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	681b      	ldr	r3, [r3, #0]
 80136c6:	3308      	adds	r3, #8
 80136c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136ca:	6a3b      	ldr	r3, [r7, #32]
 80136cc:	e853 3f00 	ldrex	r3, [r3]
 80136d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80136d2:	69fa      	ldr	r2, [r7, #28]
 80136d4:	4b1e      	ldr	r3, [pc, #120]	; (8013750 <UART_EndRxTransfer+0xc8>)
 80136d6:	4013      	ands	r3, r2
 80136d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	681b      	ldr	r3, [r3, #0]
 80136de:	3308      	adds	r3, #8
 80136e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80136e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80136e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80136e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80136e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80136ea:	e841 2300 	strex	r3, r2, [r1]
 80136ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80136f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d1e5      	bne.n	80136c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80136fa:	2b01      	cmp	r3, #1
 80136fc:	d118      	bne.n	8013730 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013704:	68fb      	ldr	r3, [r7, #12]
 8013706:	e853 3f00 	ldrex	r3, [r3]
 801370a:	60bb      	str	r3, [r7, #8]
   return(result);
 801370c:	68bb      	ldr	r3, [r7, #8]
 801370e:	f023 0310 	bic.w	r3, r3, #16
 8013712:	647b      	str	r3, [r7, #68]	; 0x44
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	461a      	mov	r2, r3
 801371a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801371c:	61bb      	str	r3, [r7, #24]
 801371e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013720:	6979      	ldr	r1, [r7, #20]
 8013722:	69ba      	ldr	r2, [r7, #24]
 8013724:	e841 2300 	strex	r3, r2, [r1]
 8013728:	613b      	str	r3, [r7, #16]
   return(result);
 801372a:	693b      	ldr	r3, [r7, #16]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d1e6      	bne.n	80136fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	2220      	movs	r2, #32
 8013734:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	2200      	movs	r2, #0
 801373c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	2200      	movs	r2, #0
 8013742:	671a      	str	r2, [r3, #112]	; 0x70
}
 8013744:	bf00      	nop
 8013746:	3754      	adds	r7, #84	; 0x54
 8013748:	46bd      	mov	sp, r7
 801374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801374e:	4770      	bx	lr
 8013750:	effffffe 	.word	0xeffffffe

08013754 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013754:	b580      	push	{r7, lr}
 8013756:	b084      	sub	sp, #16
 8013758:	af00      	add	r7, sp, #0
 801375a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013760:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	2200      	movs	r2, #0
 8013766:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	2200      	movs	r2, #0
 801376e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8013772:	68f8      	ldr	r0, [r7, #12]
 8013774:	f7fe fe34 	bl	80123e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013778:	bf00      	nop
 801377a:	3710      	adds	r7, #16
 801377c:	46bd      	mov	sp, r7
 801377e:	bd80      	pop	{r7, pc}

08013780 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8013780:	b480      	push	{r7}
 8013782:	b08f      	sub	sp, #60	; 0x3c
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801378e:	2b21      	cmp	r3, #33	; 0x21
 8013790:	d14c      	bne.n	801382c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013798:	b29b      	uxth	r3, r3
 801379a:	2b00      	cmp	r3, #0
 801379c:	d132      	bne.n	8013804 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137a4:	6a3b      	ldr	r3, [r7, #32]
 80137a6:	e853 3f00 	ldrex	r3, [r3]
 80137aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80137ac:	69fb      	ldr	r3, [r7, #28]
 80137ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80137b2:	637b      	str	r3, [r7, #52]	; 0x34
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	461a      	mov	r2, r3
 80137ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137be:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80137c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80137c4:	e841 2300 	strex	r3, r2, [r1]
 80137c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80137ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d1e6      	bne.n	801379e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	e853 3f00 	ldrex	r3, [r3]
 80137dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80137de:	68bb      	ldr	r3, [r7, #8]
 80137e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137e4:	633b      	str	r3, [r7, #48]	; 0x30
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	461a      	mov	r2, r3
 80137ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ee:	61bb      	str	r3, [r7, #24]
 80137f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137f2:	6979      	ldr	r1, [r7, #20]
 80137f4:	69ba      	ldr	r2, [r7, #24]
 80137f6:	e841 2300 	strex	r3, r2, [r1]
 80137fa:	613b      	str	r3, [r7, #16]
   return(result);
 80137fc:	693b      	ldr	r3, [r7, #16]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d1e6      	bne.n	80137d0 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8013802:	e013      	b.n	801382c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013808:	781a      	ldrb	r2, [r3, #0]
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	681b      	ldr	r3, [r3, #0]
 801380e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013814:	1c5a      	adds	r2, r3, #1
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013820:	b29b      	uxth	r3, r3
 8013822:	3b01      	subs	r3, #1
 8013824:	b29a      	uxth	r2, r3
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 801382c:	bf00      	nop
 801382e:	373c      	adds	r7, #60	; 0x3c
 8013830:	46bd      	mov	sp, r7
 8013832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013836:	4770      	bx	lr

08013838 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8013838:	b480      	push	{r7}
 801383a:	b091      	sub	sp, #68	; 0x44
 801383c:	af00      	add	r7, sp, #0
 801383e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013846:	2b21      	cmp	r3, #33	; 0x21
 8013848:	d151      	bne.n	80138ee <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013850:	b29b      	uxth	r3, r3
 8013852:	2b00      	cmp	r3, #0
 8013854:	d132      	bne.n	80138bc <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801385e:	e853 3f00 	ldrex	r3, [r3]
 8013862:	623b      	str	r3, [r7, #32]
   return(result);
 8013864:	6a3b      	ldr	r3, [r7, #32]
 8013866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801386a:	63bb      	str	r3, [r7, #56]	; 0x38
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	461a      	mov	r2, r3
 8013872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013874:	633b      	str	r3, [r7, #48]	; 0x30
 8013876:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013878:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801387a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801387c:	e841 2300 	strex	r3, r2, [r1]
 8013880:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013884:	2b00      	cmp	r3, #0
 8013886:	d1e6      	bne.n	8013856 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801388e:	693b      	ldr	r3, [r7, #16]
 8013890:	e853 3f00 	ldrex	r3, [r3]
 8013894:	60fb      	str	r3, [r7, #12]
   return(result);
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801389c:	637b      	str	r3, [r7, #52]	; 0x34
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	461a      	mov	r2, r3
 80138a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138a6:	61fb      	str	r3, [r7, #28]
 80138a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138aa:	69b9      	ldr	r1, [r7, #24]
 80138ac:	69fa      	ldr	r2, [r7, #28]
 80138ae:	e841 2300 	strex	r3, r2, [r1]
 80138b2:	617b      	str	r3, [r7, #20]
   return(result);
 80138b4:	697b      	ldr	r3, [r7, #20]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d1e6      	bne.n	8013888 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80138ba:	e018      	b.n	80138ee <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80138c0:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80138c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80138c4:	881b      	ldrh	r3, [r3, #0]
 80138c6:	461a      	mov	r2, r3
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80138d0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80138d6:	1c9a      	adds	r2, r3, #2
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80138e2:	b29b      	uxth	r3, r3
 80138e4:	3b01      	subs	r3, #1
 80138e6:	b29a      	uxth	r2, r3
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80138ee:	bf00      	nop
 80138f0:	3744      	adds	r7, #68	; 0x44
 80138f2:	46bd      	mov	sp, r7
 80138f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f8:	4770      	bx	lr

080138fa <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80138fa:	b480      	push	{r7}
 80138fc:	b091      	sub	sp, #68	; 0x44
 80138fe:	af00      	add	r7, sp, #0
 8013900:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013908:	2b21      	cmp	r3, #33	; 0x21
 801390a:	d160      	bne.n	80139ce <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013912:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8013914:	e057      	b.n	80139c6 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801391c:	b29b      	uxth	r3, r3
 801391e:	2b00      	cmp	r3, #0
 8013920:	d133      	bne.n	801398a <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	3308      	adds	r3, #8
 8013928:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801392c:	e853 3f00 	ldrex	r3, [r3]
 8013930:	623b      	str	r3, [r7, #32]
   return(result);
 8013932:	6a3b      	ldr	r3, [r7, #32]
 8013934:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8013938:	63bb      	str	r3, [r7, #56]	; 0x38
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	3308      	adds	r3, #8
 8013940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013942:	633a      	str	r2, [r7, #48]	; 0x30
 8013944:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801394a:	e841 2300 	strex	r3, r2, [r1]
 801394e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013952:	2b00      	cmp	r3, #0
 8013954:	d1e5      	bne.n	8013922 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801395c:	693b      	ldr	r3, [r7, #16]
 801395e:	e853 3f00 	ldrex	r3, [r3]
 8013962:	60fb      	str	r3, [r7, #12]
   return(result);
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801396a:	637b      	str	r3, [r7, #52]	; 0x34
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	461a      	mov	r2, r3
 8013972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013974:	61fb      	str	r3, [r7, #28]
 8013976:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013978:	69b9      	ldr	r1, [r7, #24]
 801397a:	69fa      	ldr	r2, [r7, #28]
 801397c:	e841 2300 	strex	r3, r2, [r1]
 8013980:	617b      	str	r3, [r7, #20]
   return(result);
 8013982:	697b      	ldr	r3, [r7, #20]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d1e6      	bne.n	8013956 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8013988:	e021      	b.n	80139ce <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	69db      	ldr	r3, [r3, #28]
 8013990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013994:	2b00      	cmp	r3, #0
 8013996:	d013      	beq.n	80139c0 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801399c:	781a      	ldrb	r2, [r3, #0]
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80139a8:	1c5a      	adds	r2, r3, #1
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80139b4:	b29b      	uxth	r3, r3
 80139b6:	3b01      	subs	r3, #1
 80139b8:	b29a      	uxth	r2, r3
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80139c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80139c2:	3b01      	subs	r3, #1
 80139c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80139c6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d1a4      	bne.n	8013916 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 80139cc:	e7ff      	b.n	80139ce <UART_TxISR_8BIT_FIFOEN+0xd4>
 80139ce:	bf00      	nop
 80139d0:	3744      	adds	r7, #68	; 0x44
 80139d2:	46bd      	mov	sp, r7
 80139d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d8:	4770      	bx	lr

080139da <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80139da:	b480      	push	{r7}
 80139dc:	b091      	sub	sp, #68	; 0x44
 80139de:	af00      	add	r7, sp, #0
 80139e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80139e8:	2b21      	cmp	r3, #33	; 0x21
 80139ea:	d165      	bne.n	8013ab8 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80139f2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80139f4:	e05c      	b.n	8013ab0 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80139fc:	b29b      	uxth	r3, r3
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d133      	bne.n	8013a6a <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	3308      	adds	r3, #8
 8013a08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a0a:	6a3b      	ldr	r3, [r7, #32]
 8013a0c:	e853 3f00 	ldrex	r3, [r3]
 8013a10:	61fb      	str	r3, [r7, #28]
   return(result);
 8013a12:	69fb      	ldr	r3, [r7, #28]
 8013a14:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8013a18:	637b      	str	r3, [r7, #52]	; 0x34
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	3308      	adds	r3, #8
 8013a20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013a24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013a2a:	e841 2300 	strex	r3, r2, [r1]
 8013a2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d1e5      	bne.n	8013a02 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	e853 3f00 	ldrex	r3, [r3]
 8013a42:	60bb      	str	r3, [r7, #8]
   return(result);
 8013a44:	68bb      	ldr	r3, [r7, #8]
 8013a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013a4a:	633b      	str	r3, [r7, #48]	; 0x30
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	461a      	mov	r2, r3
 8013a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a54:	61bb      	str	r3, [r7, #24]
 8013a56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a58:	6979      	ldr	r1, [r7, #20]
 8013a5a:	69ba      	ldr	r2, [r7, #24]
 8013a5c:	e841 2300 	strex	r3, r2, [r1]
 8013a60:	613b      	str	r3, [r7, #16]
   return(result);
 8013a62:	693b      	ldr	r3, [r7, #16]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d1e6      	bne.n	8013a36 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8013a68:	e026      	b.n	8013ab8 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	69db      	ldr	r3, [r3, #28]
 8013a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d018      	beq.n	8013aaa <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a7c:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8013a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a80:	881b      	ldrh	r3, [r3, #0]
 8013a82:	461a      	mov	r2, r3
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013a8c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a92:	1c9a      	adds	r2, r3, #2
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013a9e:	b29b      	uxth	r3, r3
 8013aa0:	3b01      	subs	r3, #1
 8013aa2:	b29a      	uxth	r2, r3
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8013aaa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013aac:	3b01      	subs	r3, #1
 8013aae:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8013ab0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d19f      	bne.n	80139f6 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8013ab6:	e7ff      	b.n	8013ab8 <UART_TxISR_16BIT_FIFOEN+0xde>
 8013ab8:	bf00      	nop
 8013aba:	3744      	adds	r7, #68	; 0x44
 8013abc:	46bd      	mov	sp, r7
 8013abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac2:	4770      	bx	lr

08013ac4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	b088      	sub	sp, #32
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	e853 3f00 	ldrex	r3, [r3]
 8013ad8:	60bb      	str	r3, [r7, #8]
   return(result);
 8013ada:	68bb      	ldr	r3, [r7, #8]
 8013adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013ae0:	61fb      	str	r3, [r7, #28]
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	461a      	mov	r2, r3
 8013ae8:	69fb      	ldr	r3, [r7, #28]
 8013aea:	61bb      	str	r3, [r7, #24]
 8013aec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013aee:	6979      	ldr	r1, [r7, #20]
 8013af0:	69ba      	ldr	r2, [r7, #24]
 8013af2:	e841 2300 	strex	r3, r2, [r1]
 8013af6:	613b      	str	r3, [r7, #16]
   return(result);
 8013af8:	693b      	ldr	r3, [r7, #16]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d1e6      	bne.n	8013acc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	2220      	movs	r2, #32
 8013b02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	2200      	movs	r2, #0
 8013b0a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f7f5 f951 	bl	8008db4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013b12:	bf00      	nop
 8013b14:	3720      	adds	r7, #32
 8013b16:	46bd      	mov	sp, r7
 8013b18:	bd80      	pop	{r7, pc}

08013b1a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8013b1a:	b580      	push	{r7, lr}
 8013b1c:	b096      	sub	sp, #88	; 0x58
 8013b1e:	af00      	add	r7, sp, #0
 8013b20:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013b28:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013b32:	2b22      	cmp	r3, #34	; 0x22
 8013b34:	f040 8095 	bne.w	8013c62 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b3e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013b42:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8013b46:	b2d9      	uxtb	r1, r3
 8013b48:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013b4c:	b2da      	uxtb	r2, r3
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013b52:	400a      	ands	r2, r1
 8013b54:	b2d2      	uxtb	r2, r2
 8013b56:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013b5c:	1c5a      	adds	r2, r3, #1
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013b68:	b29b      	uxth	r3, r3
 8013b6a:	3b01      	subs	r3, #1
 8013b6c:	b29a      	uxth	r2, r3
 8013b6e:	687b      	ldr	r3, [r7, #4]
 8013b70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013b7a:	b29b      	uxth	r3, r3
 8013b7c:	2b00      	cmp	r3, #0
 8013b7e:	d178      	bne.n	8013c72 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b88:	e853 3f00 	ldrex	r3, [r3]
 8013b8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013b94:	653b      	str	r3, [r7, #80]	; 0x50
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	461a      	mov	r2, r3
 8013b9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b9e:	647b      	str	r3, [r7, #68]	; 0x44
 8013ba0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ba2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013ba4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013ba6:	e841 2300 	strex	r3, r2, [r1]
 8013baa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d1e6      	bne.n	8013b80 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	3308      	adds	r3, #8
 8013bb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bbc:	e853 3f00 	ldrex	r3, [r3]
 8013bc0:	623b      	str	r3, [r7, #32]
   return(result);
 8013bc2:	6a3b      	ldr	r3, [r7, #32]
 8013bc4:	f023 0301 	bic.w	r3, r3, #1
 8013bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	3308      	adds	r3, #8
 8013bd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013bd2:	633a      	str	r2, [r7, #48]	; 0x30
 8013bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013bda:	e841 2300 	strex	r3, r2, [r1]
 8013bde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d1e5      	bne.n	8013bb2 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	2220      	movs	r2, #32
 8013bea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	2200      	movs	r2, #0
 8013bf2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013bf8:	2b01      	cmp	r3, #1
 8013bfa:	d12e      	bne.n	8013c5a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	2200      	movs	r2, #0
 8013c00:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c08:	693b      	ldr	r3, [r7, #16]
 8013c0a:	e853 3f00 	ldrex	r3, [r3]
 8013c0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	f023 0310 	bic.w	r3, r3, #16
 8013c16:	64bb      	str	r3, [r7, #72]	; 0x48
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	461a      	mov	r2, r3
 8013c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013c20:	61fb      	str	r3, [r7, #28]
 8013c22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c24:	69b9      	ldr	r1, [r7, #24]
 8013c26:	69fa      	ldr	r2, [r7, #28]
 8013c28:	e841 2300 	strex	r3, r2, [r1]
 8013c2c:	617b      	str	r3, [r7, #20]
   return(result);
 8013c2e:	697b      	ldr	r3, [r7, #20]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d1e6      	bne.n	8013c02 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	69db      	ldr	r3, [r3, #28]
 8013c3a:	f003 0310 	and.w	r3, r3, #16
 8013c3e:	2b10      	cmp	r3, #16
 8013c40:	d103      	bne.n	8013c4a <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	2210      	movs	r2, #16
 8013c48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013c50:	4619      	mov	r1, r3
 8013c52:	6878      	ldr	r0, [r7, #4]
 8013c54:	f7fe fbce 	bl	80123f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013c58:	e00b      	b.n	8013c72 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8013c5a:	6878      	ldr	r0, [r7, #4]
 8013c5c:	f7f5 f88e 	bl	8008d7c <HAL_UART_RxCpltCallback>
}
 8013c60:	e007      	b.n	8013c72 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	699a      	ldr	r2, [r3, #24]
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	f042 0208 	orr.w	r2, r2, #8
 8013c70:	619a      	str	r2, [r3, #24]
}
 8013c72:	bf00      	nop
 8013c74:	3758      	adds	r7, #88	; 0x58
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bd80      	pop	{r7, pc}

08013c7a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8013c7a:	b580      	push	{r7, lr}
 8013c7c:	b096      	sub	sp, #88	; 0x58
 8013c7e:	af00      	add	r7, sp, #0
 8013c80:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013c88:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013c92:	2b22      	cmp	r3, #34	; 0x22
 8013c94:	f040 8095 	bne.w	8013dc2 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c9e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ca6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8013ca8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8013cac:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013cb0:	4013      	ands	r3, r2
 8013cb2:	b29a      	uxth	r2, r3
 8013cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cb6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013cbc:	1c9a      	adds	r2, r3, #2
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013cc8:	b29b      	uxth	r3, r3
 8013cca:	3b01      	subs	r3, #1
 8013ccc:	b29a      	uxth	r2, r3
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013cda:	b29b      	uxth	r3, r3
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d178      	bne.n	8013dd2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ce8:	e853 3f00 	ldrex	r3, [r3]
 8013cec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013cf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	461a      	mov	r2, r3
 8013cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013cfe:	643b      	str	r3, [r7, #64]	; 0x40
 8013d00:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013d04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013d06:	e841 2300 	strex	r3, r2, [r1]
 8013d0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d1e6      	bne.n	8013ce0 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	3308      	adds	r3, #8
 8013d18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d1a:	6a3b      	ldr	r3, [r7, #32]
 8013d1c:	e853 3f00 	ldrex	r3, [r3]
 8013d20:	61fb      	str	r3, [r7, #28]
   return(result);
 8013d22:	69fb      	ldr	r3, [r7, #28]
 8013d24:	f023 0301 	bic.w	r3, r3, #1
 8013d28:	64bb      	str	r3, [r7, #72]	; 0x48
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	3308      	adds	r3, #8
 8013d30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013d32:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013d34:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d3a:	e841 2300 	strex	r3, r2, [r1]
 8013d3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d1e5      	bne.n	8013d12 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	2220      	movs	r2, #32
 8013d4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	2200      	movs	r2, #0
 8013d52:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d58:	2b01      	cmp	r3, #1
 8013d5a:	d12e      	bne.n	8013dba <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2200      	movs	r2, #0
 8013d60:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	e853 3f00 	ldrex	r3, [r3]
 8013d6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8013d70:	68bb      	ldr	r3, [r7, #8]
 8013d72:	f023 0310 	bic.w	r3, r3, #16
 8013d76:	647b      	str	r3, [r7, #68]	; 0x44
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	461a      	mov	r2, r3
 8013d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013d80:	61bb      	str	r3, [r7, #24]
 8013d82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d84:	6979      	ldr	r1, [r7, #20]
 8013d86:	69ba      	ldr	r2, [r7, #24]
 8013d88:	e841 2300 	strex	r3, r2, [r1]
 8013d8c:	613b      	str	r3, [r7, #16]
   return(result);
 8013d8e:	693b      	ldr	r3, [r7, #16]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d1e6      	bne.n	8013d62 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	69db      	ldr	r3, [r3, #28]
 8013d9a:	f003 0310 	and.w	r3, r3, #16
 8013d9e:	2b10      	cmp	r3, #16
 8013da0:	d103      	bne.n	8013daa <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	2210      	movs	r2, #16
 8013da8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013db0:	4619      	mov	r1, r3
 8013db2:	6878      	ldr	r0, [r7, #4]
 8013db4:	f7fe fb1e 	bl	80123f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013db8:	e00b      	b.n	8013dd2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8013dba:	6878      	ldr	r0, [r7, #4]
 8013dbc:	f7f4 ffde 	bl	8008d7c <HAL_UART_RxCpltCallback>
}
 8013dc0:	e007      	b.n	8013dd2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	699a      	ldr	r2, [r3, #24]
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	f042 0208 	orr.w	r2, r2, #8
 8013dd0:	619a      	str	r2, [r3, #24]
}
 8013dd2:	bf00      	nop
 8013dd4:	3758      	adds	r7, #88	; 0x58
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}
	...

08013ddc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b0a6      	sub	sp, #152	; 0x98
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013dea:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	69db      	ldr	r3, [r3, #28]
 8013df4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	681b      	ldr	r3, [r3, #0]
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	689b      	ldr	r3, [r3, #8]
 8013e08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013e12:	2b22      	cmp	r3, #34	; 0x22
 8013e14:	f040 814d 	bne.w	80140b2 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013e1e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013e22:	e0f4      	b.n	801400e <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e2a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013e2e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8013e32:	b2d9      	uxtb	r1, r3
 8013e34:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8013e38:	b2da      	uxtb	r2, r3
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013e3e:	400a      	ands	r2, r1
 8013e40:	b2d2      	uxtb	r2, r2
 8013e42:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013e48:	1c5a      	adds	r2, r3, #1
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013e54:	b29b      	uxth	r3, r3
 8013e56:	3b01      	subs	r3, #1
 8013e58:	b29a      	uxth	r2, r3
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	681b      	ldr	r3, [r3, #0]
 8013e64:	69db      	ldr	r3, [r3, #28]
 8013e66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8013e6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013e6e:	f003 0307 	and.w	r3, r3, #7
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d053      	beq.n	8013f1e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013e76:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013e7a:	f003 0301 	and.w	r3, r3, #1
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d011      	beq.n	8013ea6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8013e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d00b      	beq.n	8013ea6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	2201      	movs	r2, #1
 8013e94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013e9c:	f043 0201 	orr.w	r2, r3, #1
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013ea6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013eaa:	f003 0302 	and.w	r3, r3, #2
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d011      	beq.n	8013ed6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8013eb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013eb6:	f003 0301 	and.w	r3, r3, #1
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d00b      	beq.n	8013ed6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	2202      	movs	r2, #2
 8013ec4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013ecc:	f043 0204 	orr.w	r2, r3, #4
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013ed6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013eda:	f003 0304 	and.w	r3, r3, #4
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d011      	beq.n	8013f06 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8013ee2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013ee6:	f003 0301 	and.w	r3, r3, #1
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d00b      	beq.n	8013f06 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	2204      	movs	r2, #4
 8013ef4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013efc:	f043 0202 	orr.w	r2, r3, #2
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d006      	beq.n	8013f1e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013f10:	6878      	ldr	r0, [r7, #4]
 8013f12:	f7fe fa65 	bl	80123e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	2200      	movs	r2, #0
 8013f1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013f24:	b29b      	uxth	r3, r3
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d171      	bne.n	801400e <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013f32:	e853 3f00 	ldrex	r3, [r3]
 8013f36:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8013f38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013f3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013f3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	461a      	mov	r2, r3
 8013f48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013f4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8013f4e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f50:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8013f52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013f54:	e841 2300 	strex	r3, r2, [r1]
 8013f58:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8013f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d1e4      	bne.n	8013f2a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	3308      	adds	r3, #8
 8013f66:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f6a:	e853 3f00 	ldrex	r3, [r3]
 8013f6e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8013f70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013f72:	4b56      	ldr	r3, [pc, #344]	; (80140cc <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8013f74:	4013      	ands	r3, r2
 8013f76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	3308      	adds	r3, #8
 8013f7e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013f80:	657a      	str	r2, [r7, #84]	; 0x54
 8013f82:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f84:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013f86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013f88:	e841 2300 	strex	r3, r2, [r1]
 8013f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d1e5      	bne.n	8013f60 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	2220      	movs	r2, #32
 8013f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fa6:	2b01      	cmp	r3, #1
 8013fa8:	d12e      	bne.n	8014008 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	2200      	movs	r2, #0
 8013fae:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fb8:	e853 3f00 	ldrex	r3, [r3]
 8013fbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fc0:	f023 0310 	bic.w	r3, r3, #16
 8013fc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	461a      	mov	r2, r3
 8013fcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013fce:	643b      	str	r3, [r7, #64]	; 0x40
 8013fd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013fd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013fd6:	e841 2300 	strex	r3, r2, [r1]
 8013fda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d1e6      	bne.n	8013fb0 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	69db      	ldr	r3, [r3, #28]
 8013fe8:	f003 0310 	and.w	r3, r3, #16
 8013fec:	2b10      	cmp	r3, #16
 8013fee:	d103      	bne.n	8013ff8 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	2210      	movs	r2, #16
 8013ff6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013ffe:	4619      	mov	r1, r3
 8014000:	6878      	ldr	r0, [r7, #4]
 8014002:	f7fe f9f7 	bl	80123f4 <HAL_UARTEx_RxEventCallback>
 8014006:	e002      	b.n	801400e <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8014008:	6878      	ldr	r0, [r7, #4]
 801400a:	f7f4 feb7 	bl	8008d7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801400e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8014012:	2b00      	cmp	r3, #0
 8014014:	d006      	beq.n	8014024 <UART_RxISR_8BIT_FIFOEN+0x248>
 8014016:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801401a:	f003 0320 	and.w	r3, r3, #32
 801401e:	2b00      	cmp	r3, #0
 8014020:	f47f af00 	bne.w	8013e24 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801402a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801402e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8014032:	2b00      	cmp	r3, #0
 8014034:	d045      	beq.n	80140c2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801403c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8014040:	429a      	cmp	r2, r3
 8014042:	d23e      	bcs.n	80140c2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	681b      	ldr	r3, [r3, #0]
 8014048:	3308      	adds	r3, #8
 801404a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801404c:	6a3b      	ldr	r3, [r7, #32]
 801404e:	e853 3f00 	ldrex	r3, [r3]
 8014052:	61fb      	str	r3, [r7, #28]
   return(result);
 8014054:	69fb      	ldr	r3, [r7, #28]
 8014056:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801405a:	673b      	str	r3, [r7, #112]	; 0x70
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	3308      	adds	r3, #8
 8014062:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014064:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014066:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014068:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801406a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801406c:	e841 2300 	strex	r3, r2, [r1]
 8014070:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014074:	2b00      	cmp	r3, #0
 8014076:	d1e5      	bne.n	8014044 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	4a15      	ldr	r2, [pc, #84]	; (80140d0 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 801407c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014084:	68fb      	ldr	r3, [r7, #12]
 8014086:	e853 3f00 	ldrex	r3, [r3]
 801408a:	60bb      	str	r3, [r7, #8]
   return(result);
 801408c:	68bb      	ldr	r3, [r7, #8]
 801408e:	f043 0320 	orr.w	r3, r3, #32
 8014092:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	461a      	mov	r2, r3
 801409a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801409c:	61bb      	str	r3, [r7, #24]
 801409e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80140a0:	6979      	ldr	r1, [r7, #20]
 80140a2:	69ba      	ldr	r2, [r7, #24]
 80140a4:	e841 2300 	strex	r3, r2, [r1]
 80140a8:	613b      	str	r3, [r7, #16]
   return(result);
 80140aa:	693b      	ldr	r3, [r7, #16]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d1e6      	bne.n	801407e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80140b0:	e007      	b.n	80140c2 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	699a      	ldr	r2, [r3, #24]
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	f042 0208 	orr.w	r2, r2, #8
 80140c0:	619a      	str	r2, [r3, #24]
}
 80140c2:	bf00      	nop
 80140c4:	3798      	adds	r7, #152	; 0x98
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bd80      	pop	{r7, pc}
 80140ca:	bf00      	nop
 80140cc:	effffffe 	.word	0xeffffffe
 80140d0:	08013b1b 	.word	0x08013b1b

080140d4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b0a8      	sub	sp, #160	; 0xa0
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80140e2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	69db      	ldr	r3, [r3, #28]
 80140ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	689b      	ldr	r3, [r3, #8]
 8014100:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801410a:	2b22      	cmp	r3, #34	; 0x22
 801410c:	f040 8151 	bne.w	80143b2 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014116:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801411a:	e0f8      	b.n	801430e <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014122:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801412a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 801412e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8014132:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8014136:	4013      	ands	r3, r2
 8014138:	b29a      	uxth	r2, r3
 801413a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801413e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014144:	1c9a      	adds	r2, r3, #2
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014150:	b29b      	uxth	r3, r3
 8014152:	3b01      	subs	r3, #1
 8014154:	b29a      	uxth	r2, r3
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	69db      	ldr	r3, [r3, #28]
 8014162:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8014166:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801416a:	f003 0307 	and.w	r3, r3, #7
 801416e:	2b00      	cmp	r3, #0
 8014170:	d053      	beq.n	801421a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8014172:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014176:	f003 0301 	and.w	r3, r3, #1
 801417a:	2b00      	cmp	r3, #0
 801417c:	d011      	beq.n	80141a2 <UART_RxISR_16BIT_FIFOEN+0xce>
 801417e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014186:	2b00      	cmp	r3, #0
 8014188:	d00b      	beq.n	80141a2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	2201      	movs	r2, #1
 8014190:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014198:	f043 0201 	orr.w	r2, r3, #1
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80141a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80141a6:	f003 0302 	and.w	r3, r3, #2
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d011      	beq.n	80141d2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80141ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80141b2:	f003 0301 	and.w	r3, r3, #1
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d00b      	beq.n	80141d2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	2202      	movs	r2, #2
 80141c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80141c8:	f043 0204 	orr.w	r2, r3, #4
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80141d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80141d6:	f003 0304 	and.w	r3, r3, #4
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d011      	beq.n	8014202 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80141de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80141e2:	f003 0301 	and.w	r3, r3, #1
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d00b      	beq.n	8014202 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	2204      	movs	r2, #4
 80141f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80141f8:	f043 0202 	orr.w	r2, r3, #2
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014208:	2b00      	cmp	r3, #0
 801420a:	d006      	beq.n	801421a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801420c:	6878      	ldr	r0, [r7, #4]
 801420e:	f7fe f8e7 	bl	80123e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	2200      	movs	r2, #0
 8014216:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014220:	b29b      	uxth	r3, r3
 8014222:	2b00      	cmp	r3, #0
 8014224:	d173      	bne.n	801430e <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801422c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801422e:	e853 3f00 	ldrex	r3, [r3]
 8014232:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8014234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014236:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801423a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	461a      	mov	r2, r3
 8014244:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014248:	66fb      	str	r3, [r7, #108]	; 0x6c
 801424a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801424c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801424e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014250:	e841 2300 	strex	r3, r2, [r1]
 8014254:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014256:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014258:	2b00      	cmp	r3, #0
 801425a:	d1e4      	bne.n	8014226 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	3308      	adds	r3, #8
 8014262:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014264:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014266:	e853 3f00 	ldrex	r3, [r3]
 801426a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801426c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801426e:	4b57      	ldr	r3, [pc, #348]	; (80143cc <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8014270:	4013      	ands	r3, r2
 8014272:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	3308      	adds	r3, #8
 801427c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014280:	65ba      	str	r2, [r7, #88]	; 0x58
 8014282:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014284:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014286:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014288:	e841 2300 	strex	r3, r2, [r1]
 801428c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801428e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014290:	2b00      	cmp	r3, #0
 8014292:	d1e3      	bne.n	801425c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	2220      	movs	r2, #32
 8014298:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	2200      	movs	r2, #0
 80142a0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142a6:	2b01      	cmp	r3, #1
 80142a8:	d12e      	bne.n	8014308 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	2200      	movs	r2, #0
 80142ae:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142b8:	e853 3f00 	ldrex	r3, [r3]
 80142bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80142be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80142c0:	f023 0310 	bic.w	r3, r3, #16
 80142c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	461a      	mov	r2, r3
 80142cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80142ce:	647b      	str	r3, [r7, #68]	; 0x44
 80142d0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80142d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80142d6:	e841 2300 	strex	r3, r2, [r1]
 80142da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80142dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d1e6      	bne.n	80142b0 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	69db      	ldr	r3, [r3, #28]
 80142e8:	f003 0310 	and.w	r3, r3, #16
 80142ec:	2b10      	cmp	r3, #16
 80142ee:	d103      	bne.n	80142f8 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	2210      	movs	r2, #16
 80142f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80142fe:	4619      	mov	r1, r3
 8014300:	6878      	ldr	r0, [r7, #4]
 8014302:	f7fe f877 	bl	80123f4 <HAL_UARTEx_RxEventCallback>
 8014306:	e002      	b.n	801430e <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8014308:	6878      	ldr	r0, [r7, #4]
 801430a:	f7f4 fd37 	bl	8008d7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801430e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8014312:	2b00      	cmp	r3, #0
 8014314:	d006      	beq.n	8014324 <UART_RxISR_16BIT_FIFOEN+0x250>
 8014316:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801431a:	f003 0320 	and.w	r3, r3, #32
 801431e:	2b00      	cmp	r3, #0
 8014320:	f47f aefc 	bne.w	801411c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801432a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801432e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8014332:	2b00      	cmp	r3, #0
 8014334:	d045      	beq.n	80143c2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801433c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8014340:	429a      	cmp	r2, r3
 8014342:	d23e      	bcs.n	80143c2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	3308      	adds	r3, #8
 801434a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801434c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801434e:	e853 3f00 	ldrex	r3, [r3]
 8014352:	623b      	str	r3, [r7, #32]
   return(result);
 8014354:	6a3b      	ldr	r3, [r7, #32]
 8014356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801435a:	677b      	str	r3, [r7, #116]	; 0x74
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	3308      	adds	r3, #8
 8014362:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014364:	633a      	str	r2, [r7, #48]	; 0x30
 8014366:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014368:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801436a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801436c:	e841 2300 	strex	r3, r2, [r1]
 8014370:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014374:	2b00      	cmp	r3, #0
 8014376:	d1e5      	bne.n	8014344 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	4a15      	ldr	r2, [pc, #84]	; (80143d0 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 801437c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014384:	693b      	ldr	r3, [r7, #16]
 8014386:	e853 3f00 	ldrex	r3, [r3]
 801438a:	60fb      	str	r3, [r7, #12]
   return(result);
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	f043 0320 	orr.w	r3, r3, #32
 8014392:	673b      	str	r3, [r7, #112]	; 0x70
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	461a      	mov	r2, r3
 801439a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801439c:	61fb      	str	r3, [r7, #28]
 801439e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80143a0:	69b9      	ldr	r1, [r7, #24]
 80143a2:	69fa      	ldr	r2, [r7, #28]
 80143a4:	e841 2300 	strex	r3, r2, [r1]
 80143a8:	617b      	str	r3, [r7, #20]
   return(result);
 80143aa:	697b      	ldr	r3, [r7, #20]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d1e6      	bne.n	801437e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80143b0:	e007      	b.n	80143c2 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	699a      	ldr	r2, [r3, #24]
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	f042 0208 	orr.w	r2, r2, #8
 80143c0:	619a      	str	r2, [r3, #24]
}
 80143c2:	bf00      	nop
 80143c4:	37a0      	adds	r7, #160	; 0xa0
 80143c6:	46bd      	mov	sp, r7
 80143c8:	bd80      	pop	{r7, pc}
 80143ca:	bf00      	nop
 80143cc:	effffffe 	.word	0xeffffffe
 80143d0:	08013c7b 	.word	0x08013c7b

080143d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80143d4:	b480      	push	{r7}
 80143d6:	b083      	sub	sp, #12
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80143dc:	bf00      	nop
 80143de:	370c      	adds	r7, #12
 80143e0:	46bd      	mov	sp, r7
 80143e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e6:	4770      	bx	lr

080143e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80143e8:	b480      	push	{r7}
 80143ea:	b083      	sub	sp, #12
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80143f0:	bf00      	nop
 80143f2:	370c      	adds	r7, #12
 80143f4:	46bd      	mov	sp, r7
 80143f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fa:	4770      	bx	lr

080143fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80143fc:	b480      	push	{r7}
 80143fe:	b083      	sub	sp, #12
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8014404:	bf00      	nop
 8014406:	370c      	adds	r7, #12
 8014408:	46bd      	mov	sp, r7
 801440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440e:	4770      	bx	lr

08014410 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8014410:	b480      	push	{r7}
 8014412:	b085      	sub	sp, #20
 8014414:	af00      	add	r7, sp, #0
 8014416:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801441e:	2b01      	cmp	r3, #1
 8014420:	d101      	bne.n	8014426 <HAL_UARTEx_DisableFifoMode+0x16>
 8014422:	2302      	movs	r3, #2
 8014424:	e027      	b.n	8014476 <HAL_UARTEx_DisableFifoMode+0x66>
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	2201      	movs	r2, #1
 801442a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	2224      	movs	r2, #36	; 0x24
 8014432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	681a      	ldr	r2, [r3, #0]
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	f022 0201 	bic.w	r2, r2, #1
 801444c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8014454:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	2200      	movs	r2, #0
 801445a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	68fa      	ldr	r2, [r7, #12]
 8014462:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	2220      	movs	r2, #32
 8014468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	2200      	movs	r2, #0
 8014470:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8014474:	2300      	movs	r3, #0
}
 8014476:	4618      	mov	r0, r3
 8014478:	3714      	adds	r7, #20
 801447a:	46bd      	mov	sp, r7
 801447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014480:	4770      	bx	lr

08014482 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014482:	b580      	push	{r7, lr}
 8014484:	b084      	sub	sp, #16
 8014486:	af00      	add	r7, sp, #0
 8014488:	6078      	str	r0, [r7, #4]
 801448a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014492:	2b01      	cmp	r3, #1
 8014494:	d101      	bne.n	801449a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8014496:	2302      	movs	r3, #2
 8014498:	e02d      	b.n	80144f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	2201      	movs	r2, #1
 801449e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2224      	movs	r2, #36	; 0x24
 80144a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	681a      	ldr	r2, [r3, #0]
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	f022 0201 	bic.w	r2, r2, #1
 80144c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	689b      	ldr	r3, [r3, #8]
 80144c8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	683a      	ldr	r2, [r7, #0]
 80144d2:	430a      	orrs	r2, r1
 80144d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80144d6:	6878      	ldr	r0, [r7, #4]
 80144d8:	f000 f850 	bl	801457c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	68fa      	ldr	r2, [r7, #12]
 80144e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	2220      	movs	r2, #32
 80144e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	2200      	movs	r2, #0
 80144f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80144f4:	2300      	movs	r3, #0
}
 80144f6:	4618      	mov	r0, r3
 80144f8:	3710      	adds	r7, #16
 80144fa:	46bd      	mov	sp, r7
 80144fc:	bd80      	pop	{r7, pc}

080144fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80144fe:	b580      	push	{r7, lr}
 8014500:	b084      	sub	sp, #16
 8014502:	af00      	add	r7, sp, #0
 8014504:	6078      	str	r0, [r7, #4]
 8014506:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801450e:	2b01      	cmp	r3, #1
 8014510:	d101      	bne.n	8014516 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8014512:	2302      	movs	r3, #2
 8014514:	e02d      	b.n	8014572 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	2201      	movs	r2, #1
 801451a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	2224      	movs	r2, #36	; 0x24
 8014522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	681a      	ldr	r2, [r3, #0]
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	f022 0201 	bic.w	r2, r2, #1
 801453c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	689b      	ldr	r3, [r3, #8]
 8014544:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	683a      	ldr	r2, [r7, #0]
 801454e:	430a      	orrs	r2, r1
 8014550:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014552:	6878      	ldr	r0, [r7, #4]
 8014554:	f000 f812 	bl	801457c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	68fa      	ldr	r2, [r7, #12]
 801455e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	2220      	movs	r2, #32
 8014564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	2200      	movs	r2, #0
 801456c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8014570:	2300      	movs	r3, #0
}
 8014572:	4618      	mov	r0, r3
 8014574:	3710      	adds	r7, #16
 8014576:	46bd      	mov	sp, r7
 8014578:	bd80      	pop	{r7, pc}
	...

0801457c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801457c:	b480      	push	{r7}
 801457e:	b085      	sub	sp, #20
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014588:	2b00      	cmp	r3, #0
 801458a:	d108      	bne.n	801459e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	2201      	movs	r2, #1
 8014590:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	2201      	movs	r2, #1
 8014598:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801459c:	e031      	b.n	8014602 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801459e:	2310      	movs	r3, #16
 80145a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80145a2:	2310      	movs	r3, #16
 80145a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	689b      	ldr	r3, [r3, #8]
 80145ac:	0e5b      	lsrs	r3, r3, #25
 80145ae:	b2db      	uxtb	r3, r3
 80145b0:	f003 0307 	and.w	r3, r3, #7
 80145b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	689b      	ldr	r3, [r3, #8]
 80145bc:	0f5b      	lsrs	r3, r3, #29
 80145be:	b2db      	uxtb	r3, r3
 80145c0:	f003 0307 	and.w	r3, r3, #7
 80145c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80145c6:	7bbb      	ldrb	r3, [r7, #14]
 80145c8:	7b3a      	ldrb	r2, [r7, #12]
 80145ca:	4911      	ldr	r1, [pc, #68]	; (8014610 <UARTEx_SetNbDataToProcess+0x94>)
 80145cc:	5c8a      	ldrb	r2, [r1, r2]
 80145ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80145d2:	7b3a      	ldrb	r2, [r7, #12]
 80145d4:	490f      	ldr	r1, [pc, #60]	; (8014614 <UARTEx_SetNbDataToProcess+0x98>)
 80145d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80145d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80145dc:	b29a      	uxth	r2, r3
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80145e4:	7bfb      	ldrb	r3, [r7, #15]
 80145e6:	7b7a      	ldrb	r2, [r7, #13]
 80145e8:	4909      	ldr	r1, [pc, #36]	; (8014610 <UARTEx_SetNbDataToProcess+0x94>)
 80145ea:	5c8a      	ldrb	r2, [r1, r2]
 80145ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80145f0:	7b7a      	ldrb	r2, [r7, #13]
 80145f2:	4908      	ldr	r1, [pc, #32]	; (8014614 <UARTEx_SetNbDataToProcess+0x98>)
 80145f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80145f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80145fa:	b29a      	uxth	r2, r3
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8014602:	bf00      	nop
 8014604:	3714      	adds	r7, #20
 8014606:	46bd      	mov	sp, r7
 8014608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801460c:	4770      	bx	lr
 801460e:	bf00      	nop
 8014610:	08018578 	.word	0x08018578
 8014614:	08018580 	.word	0x08018580

08014618 <__errno>:
 8014618:	4b01      	ldr	r3, [pc, #4]	; (8014620 <__errno+0x8>)
 801461a:	6818      	ldr	r0, [r3, #0]
 801461c:	4770      	bx	lr
 801461e:	bf00      	nop
 8014620:	24000060 	.word	0x24000060

08014624 <__libc_init_array>:
 8014624:	b570      	push	{r4, r5, r6, lr}
 8014626:	4d0d      	ldr	r5, [pc, #52]	; (801465c <__libc_init_array+0x38>)
 8014628:	4c0d      	ldr	r4, [pc, #52]	; (8014660 <__libc_init_array+0x3c>)
 801462a:	1b64      	subs	r4, r4, r5
 801462c:	10a4      	asrs	r4, r4, #2
 801462e:	2600      	movs	r6, #0
 8014630:	42a6      	cmp	r6, r4
 8014632:	d109      	bne.n	8014648 <__libc_init_array+0x24>
 8014634:	4d0b      	ldr	r5, [pc, #44]	; (8014664 <__libc_init_array+0x40>)
 8014636:	4c0c      	ldr	r4, [pc, #48]	; (8014668 <__libc_init_array+0x44>)
 8014638:	f003 ff48 	bl	80184cc <_init>
 801463c:	1b64      	subs	r4, r4, r5
 801463e:	10a4      	asrs	r4, r4, #2
 8014640:	2600      	movs	r6, #0
 8014642:	42a6      	cmp	r6, r4
 8014644:	d105      	bne.n	8014652 <__libc_init_array+0x2e>
 8014646:	bd70      	pop	{r4, r5, r6, pc}
 8014648:	f855 3b04 	ldr.w	r3, [r5], #4
 801464c:	4798      	blx	r3
 801464e:	3601      	adds	r6, #1
 8014650:	e7ee      	b.n	8014630 <__libc_init_array+0xc>
 8014652:	f855 3b04 	ldr.w	r3, [r5], #4
 8014656:	4798      	blx	r3
 8014658:	3601      	adds	r6, #1
 801465a:	e7f2      	b.n	8014642 <__libc_init_array+0x1e>
 801465c:	0801a408 	.word	0x0801a408
 8014660:	0801a408 	.word	0x0801a408
 8014664:	0801a408 	.word	0x0801a408
 8014668:	0801a40c 	.word	0x0801a40c

0801466c <memcpy>:
 801466c:	440a      	add	r2, r1
 801466e:	4291      	cmp	r1, r2
 8014670:	f100 33ff 	add.w	r3, r0, #4294967295
 8014674:	d100      	bne.n	8014678 <memcpy+0xc>
 8014676:	4770      	bx	lr
 8014678:	b510      	push	{r4, lr}
 801467a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801467e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014682:	4291      	cmp	r1, r2
 8014684:	d1f9      	bne.n	801467a <memcpy+0xe>
 8014686:	bd10      	pop	{r4, pc}

08014688 <memset>:
 8014688:	4402      	add	r2, r0
 801468a:	4603      	mov	r3, r0
 801468c:	4293      	cmp	r3, r2
 801468e:	d100      	bne.n	8014692 <memset+0xa>
 8014690:	4770      	bx	lr
 8014692:	f803 1b01 	strb.w	r1, [r3], #1
 8014696:	e7f9      	b.n	801468c <memset+0x4>

08014698 <__cvt>:
 8014698:	b5f0      	push	{r4, r5, r6, r7, lr}
 801469a:	ed2d 8b02 	vpush	{d8}
 801469e:	eeb0 8b40 	vmov.f64	d8, d0
 80146a2:	b085      	sub	sp, #20
 80146a4:	4617      	mov	r7, r2
 80146a6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80146a8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80146aa:	ee18 2a90 	vmov	r2, s17
 80146ae:	f025 0520 	bic.w	r5, r5, #32
 80146b2:	2a00      	cmp	r2, #0
 80146b4:	bfb6      	itet	lt
 80146b6:	222d      	movlt	r2, #45	; 0x2d
 80146b8:	2200      	movge	r2, #0
 80146ba:	eeb1 8b40 	vneglt.f64	d8, d0
 80146be:	2d46      	cmp	r5, #70	; 0x46
 80146c0:	460c      	mov	r4, r1
 80146c2:	701a      	strb	r2, [r3, #0]
 80146c4:	d004      	beq.n	80146d0 <__cvt+0x38>
 80146c6:	2d45      	cmp	r5, #69	; 0x45
 80146c8:	d100      	bne.n	80146cc <__cvt+0x34>
 80146ca:	3401      	adds	r4, #1
 80146cc:	2102      	movs	r1, #2
 80146ce:	e000      	b.n	80146d2 <__cvt+0x3a>
 80146d0:	2103      	movs	r1, #3
 80146d2:	ab03      	add	r3, sp, #12
 80146d4:	9301      	str	r3, [sp, #4]
 80146d6:	ab02      	add	r3, sp, #8
 80146d8:	9300      	str	r3, [sp, #0]
 80146da:	4622      	mov	r2, r4
 80146dc:	4633      	mov	r3, r6
 80146de:	eeb0 0b48 	vmov.f64	d0, d8
 80146e2:	f000 fca9 	bl	8015038 <_dtoa_r>
 80146e6:	2d47      	cmp	r5, #71	; 0x47
 80146e8:	d109      	bne.n	80146fe <__cvt+0x66>
 80146ea:	07fb      	lsls	r3, r7, #31
 80146ec:	d407      	bmi.n	80146fe <__cvt+0x66>
 80146ee:	9b03      	ldr	r3, [sp, #12]
 80146f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80146f2:	1a1b      	subs	r3, r3, r0
 80146f4:	6013      	str	r3, [r2, #0]
 80146f6:	b005      	add	sp, #20
 80146f8:	ecbd 8b02 	vpop	{d8}
 80146fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80146fe:	2d46      	cmp	r5, #70	; 0x46
 8014700:	eb00 0204 	add.w	r2, r0, r4
 8014704:	d10c      	bne.n	8014720 <__cvt+0x88>
 8014706:	7803      	ldrb	r3, [r0, #0]
 8014708:	2b30      	cmp	r3, #48	; 0x30
 801470a:	d107      	bne.n	801471c <__cvt+0x84>
 801470c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014714:	bf1c      	itt	ne
 8014716:	f1c4 0401 	rsbne	r4, r4, #1
 801471a:	6034      	strne	r4, [r6, #0]
 801471c:	6833      	ldr	r3, [r6, #0]
 801471e:	441a      	add	r2, r3
 8014720:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014728:	bf08      	it	eq
 801472a:	9203      	streq	r2, [sp, #12]
 801472c:	2130      	movs	r1, #48	; 0x30
 801472e:	9b03      	ldr	r3, [sp, #12]
 8014730:	4293      	cmp	r3, r2
 8014732:	d2dc      	bcs.n	80146ee <__cvt+0x56>
 8014734:	1c5c      	adds	r4, r3, #1
 8014736:	9403      	str	r4, [sp, #12]
 8014738:	7019      	strb	r1, [r3, #0]
 801473a:	e7f8      	b.n	801472e <__cvt+0x96>

0801473c <__exponent>:
 801473c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801473e:	4603      	mov	r3, r0
 8014740:	2900      	cmp	r1, #0
 8014742:	bfb8      	it	lt
 8014744:	4249      	neglt	r1, r1
 8014746:	f803 2b02 	strb.w	r2, [r3], #2
 801474a:	bfb4      	ite	lt
 801474c:	222d      	movlt	r2, #45	; 0x2d
 801474e:	222b      	movge	r2, #43	; 0x2b
 8014750:	2909      	cmp	r1, #9
 8014752:	7042      	strb	r2, [r0, #1]
 8014754:	dd2a      	ble.n	80147ac <__exponent+0x70>
 8014756:	f10d 0407 	add.w	r4, sp, #7
 801475a:	46a4      	mov	ip, r4
 801475c:	270a      	movs	r7, #10
 801475e:	46a6      	mov	lr, r4
 8014760:	460a      	mov	r2, r1
 8014762:	fb91 f6f7 	sdiv	r6, r1, r7
 8014766:	fb07 1516 	mls	r5, r7, r6, r1
 801476a:	3530      	adds	r5, #48	; 0x30
 801476c:	2a63      	cmp	r2, #99	; 0x63
 801476e:	f104 34ff 	add.w	r4, r4, #4294967295
 8014772:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8014776:	4631      	mov	r1, r6
 8014778:	dcf1      	bgt.n	801475e <__exponent+0x22>
 801477a:	3130      	adds	r1, #48	; 0x30
 801477c:	f1ae 0502 	sub.w	r5, lr, #2
 8014780:	f804 1c01 	strb.w	r1, [r4, #-1]
 8014784:	1c44      	adds	r4, r0, #1
 8014786:	4629      	mov	r1, r5
 8014788:	4561      	cmp	r1, ip
 801478a:	d30a      	bcc.n	80147a2 <__exponent+0x66>
 801478c:	f10d 0209 	add.w	r2, sp, #9
 8014790:	eba2 020e 	sub.w	r2, r2, lr
 8014794:	4565      	cmp	r5, ip
 8014796:	bf88      	it	hi
 8014798:	2200      	movhi	r2, #0
 801479a:	4413      	add	r3, r2
 801479c:	1a18      	subs	r0, r3, r0
 801479e:	b003      	add	sp, #12
 80147a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80147a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80147aa:	e7ed      	b.n	8014788 <__exponent+0x4c>
 80147ac:	2330      	movs	r3, #48	; 0x30
 80147ae:	3130      	adds	r1, #48	; 0x30
 80147b0:	7083      	strb	r3, [r0, #2]
 80147b2:	70c1      	strb	r1, [r0, #3]
 80147b4:	1d03      	adds	r3, r0, #4
 80147b6:	e7f1      	b.n	801479c <__exponent+0x60>

080147b8 <_printf_float>:
 80147b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147bc:	b08b      	sub	sp, #44	; 0x2c
 80147be:	460c      	mov	r4, r1
 80147c0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80147c4:	4616      	mov	r6, r2
 80147c6:	461f      	mov	r7, r3
 80147c8:	4605      	mov	r5, r0
 80147ca:	f001 f9b7 	bl	8015b3c <_localeconv_r>
 80147ce:	f8d0 b000 	ldr.w	fp, [r0]
 80147d2:	4658      	mov	r0, fp
 80147d4:	f7eb fd9c 	bl	8000310 <strlen>
 80147d8:	2300      	movs	r3, #0
 80147da:	9308      	str	r3, [sp, #32]
 80147dc:	f8d8 3000 	ldr.w	r3, [r8]
 80147e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80147e4:	6822      	ldr	r2, [r4, #0]
 80147e6:	3307      	adds	r3, #7
 80147e8:	f023 0307 	bic.w	r3, r3, #7
 80147ec:	f103 0108 	add.w	r1, r3, #8
 80147f0:	f8c8 1000 	str.w	r1, [r8]
 80147f4:	4682      	mov	sl, r0
 80147f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80147fa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80147fe:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8014a60 <_printf_float+0x2a8>
 8014802:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8014806:	eeb0 6bc0 	vabs.f64	d6, d0
 801480a:	eeb4 6b47 	vcmp.f64	d6, d7
 801480e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014812:	dd24      	ble.n	801485e <_printf_float+0xa6>
 8014814:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801481c:	d502      	bpl.n	8014824 <_printf_float+0x6c>
 801481e:	232d      	movs	r3, #45	; 0x2d
 8014820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014824:	4b90      	ldr	r3, [pc, #576]	; (8014a68 <_printf_float+0x2b0>)
 8014826:	4891      	ldr	r0, [pc, #580]	; (8014a6c <_printf_float+0x2b4>)
 8014828:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801482c:	bf94      	ite	ls
 801482e:	4698      	movls	r8, r3
 8014830:	4680      	movhi	r8, r0
 8014832:	2303      	movs	r3, #3
 8014834:	6123      	str	r3, [r4, #16]
 8014836:	f022 0204 	bic.w	r2, r2, #4
 801483a:	2300      	movs	r3, #0
 801483c:	6022      	str	r2, [r4, #0]
 801483e:	9304      	str	r3, [sp, #16]
 8014840:	9700      	str	r7, [sp, #0]
 8014842:	4633      	mov	r3, r6
 8014844:	aa09      	add	r2, sp, #36	; 0x24
 8014846:	4621      	mov	r1, r4
 8014848:	4628      	mov	r0, r5
 801484a:	f000 f9d3 	bl	8014bf4 <_printf_common>
 801484e:	3001      	adds	r0, #1
 8014850:	f040 808a 	bne.w	8014968 <_printf_float+0x1b0>
 8014854:	f04f 30ff 	mov.w	r0, #4294967295
 8014858:	b00b      	add	sp, #44	; 0x2c
 801485a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801485e:	eeb4 0b40 	vcmp.f64	d0, d0
 8014862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014866:	d709      	bvc.n	801487c <_printf_float+0xc4>
 8014868:	ee10 3a90 	vmov	r3, s1
 801486c:	2b00      	cmp	r3, #0
 801486e:	bfbc      	itt	lt
 8014870:	232d      	movlt	r3, #45	; 0x2d
 8014872:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014876:	487e      	ldr	r0, [pc, #504]	; (8014a70 <_printf_float+0x2b8>)
 8014878:	4b7e      	ldr	r3, [pc, #504]	; (8014a74 <_printf_float+0x2bc>)
 801487a:	e7d5      	b.n	8014828 <_printf_float+0x70>
 801487c:	6863      	ldr	r3, [r4, #4]
 801487e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8014882:	9104      	str	r1, [sp, #16]
 8014884:	1c59      	adds	r1, r3, #1
 8014886:	d13c      	bne.n	8014902 <_printf_float+0x14a>
 8014888:	2306      	movs	r3, #6
 801488a:	6063      	str	r3, [r4, #4]
 801488c:	2300      	movs	r3, #0
 801488e:	9303      	str	r3, [sp, #12]
 8014890:	ab08      	add	r3, sp, #32
 8014892:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8014896:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801489a:	ab07      	add	r3, sp, #28
 801489c:	6861      	ldr	r1, [r4, #4]
 801489e:	9300      	str	r3, [sp, #0]
 80148a0:	6022      	str	r2, [r4, #0]
 80148a2:	f10d 031b 	add.w	r3, sp, #27
 80148a6:	4628      	mov	r0, r5
 80148a8:	f7ff fef6 	bl	8014698 <__cvt>
 80148ac:	9b04      	ldr	r3, [sp, #16]
 80148ae:	9907      	ldr	r1, [sp, #28]
 80148b0:	2b47      	cmp	r3, #71	; 0x47
 80148b2:	4680      	mov	r8, r0
 80148b4:	d108      	bne.n	80148c8 <_printf_float+0x110>
 80148b6:	1cc8      	adds	r0, r1, #3
 80148b8:	db02      	blt.n	80148c0 <_printf_float+0x108>
 80148ba:	6863      	ldr	r3, [r4, #4]
 80148bc:	4299      	cmp	r1, r3
 80148be:	dd41      	ble.n	8014944 <_printf_float+0x18c>
 80148c0:	f1a9 0902 	sub.w	r9, r9, #2
 80148c4:	fa5f f989 	uxtb.w	r9, r9
 80148c8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80148cc:	d820      	bhi.n	8014910 <_printf_float+0x158>
 80148ce:	3901      	subs	r1, #1
 80148d0:	464a      	mov	r2, r9
 80148d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80148d6:	9107      	str	r1, [sp, #28]
 80148d8:	f7ff ff30 	bl	801473c <__exponent>
 80148dc:	9a08      	ldr	r2, [sp, #32]
 80148de:	9004      	str	r0, [sp, #16]
 80148e0:	1813      	adds	r3, r2, r0
 80148e2:	2a01      	cmp	r2, #1
 80148e4:	6123      	str	r3, [r4, #16]
 80148e6:	dc02      	bgt.n	80148ee <_printf_float+0x136>
 80148e8:	6822      	ldr	r2, [r4, #0]
 80148ea:	07d2      	lsls	r2, r2, #31
 80148ec:	d501      	bpl.n	80148f2 <_printf_float+0x13a>
 80148ee:	3301      	adds	r3, #1
 80148f0:	6123      	str	r3, [r4, #16]
 80148f2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80148f6:	2b00      	cmp	r3, #0
 80148f8:	d0a2      	beq.n	8014840 <_printf_float+0x88>
 80148fa:	232d      	movs	r3, #45	; 0x2d
 80148fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014900:	e79e      	b.n	8014840 <_printf_float+0x88>
 8014902:	9904      	ldr	r1, [sp, #16]
 8014904:	2947      	cmp	r1, #71	; 0x47
 8014906:	d1c1      	bne.n	801488c <_printf_float+0xd4>
 8014908:	2b00      	cmp	r3, #0
 801490a:	d1bf      	bne.n	801488c <_printf_float+0xd4>
 801490c:	2301      	movs	r3, #1
 801490e:	e7bc      	b.n	801488a <_printf_float+0xd2>
 8014910:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8014914:	d118      	bne.n	8014948 <_printf_float+0x190>
 8014916:	2900      	cmp	r1, #0
 8014918:	6863      	ldr	r3, [r4, #4]
 801491a:	dd0b      	ble.n	8014934 <_printf_float+0x17c>
 801491c:	6121      	str	r1, [r4, #16]
 801491e:	b913      	cbnz	r3, 8014926 <_printf_float+0x16e>
 8014920:	6822      	ldr	r2, [r4, #0]
 8014922:	07d0      	lsls	r0, r2, #31
 8014924:	d502      	bpl.n	801492c <_printf_float+0x174>
 8014926:	3301      	adds	r3, #1
 8014928:	440b      	add	r3, r1
 801492a:	6123      	str	r3, [r4, #16]
 801492c:	2300      	movs	r3, #0
 801492e:	65a1      	str	r1, [r4, #88]	; 0x58
 8014930:	9304      	str	r3, [sp, #16]
 8014932:	e7de      	b.n	80148f2 <_printf_float+0x13a>
 8014934:	b913      	cbnz	r3, 801493c <_printf_float+0x184>
 8014936:	6822      	ldr	r2, [r4, #0]
 8014938:	07d2      	lsls	r2, r2, #31
 801493a:	d501      	bpl.n	8014940 <_printf_float+0x188>
 801493c:	3302      	adds	r3, #2
 801493e:	e7f4      	b.n	801492a <_printf_float+0x172>
 8014940:	2301      	movs	r3, #1
 8014942:	e7f2      	b.n	801492a <_printf_float+0x172>
 8014944:	f04f 0967 	mov.w	r9, #103	; 0x67
 8014948:	9b08      	ldr	r3, [sp, #32]
 801494a:	4299      	cmp	r1, r3
 801494c:	db05      	blt.n	801495a <_printf_float+0x1a2>
 801494e:	6823      	ldr	r3, [r4, #0]
 8014950:	6121      	str	r1, [r4, #16]
 8014952:	07d8      	lsls	r0, r3, #31
 8014954:	d5ea      	bpl.n	801492c <_printf_float+0x174>
 8014956:	1c4b      	adds	r3, r1, #1
 8014958:	e7e7      	b.n	801492a <_printf_float+0x172>
 801495a:	2900      	cmp	r1, #0
 801495c:	bfd4      	ite	le
 801495e:	f1c1 0202 	rsble	r2, r1, #2
 8014962:	2201      	movgt	r2, #1
 8014964:	4413      	add	r3, r2
 8014966:	e7e0      	b.n	801492a <_printf_float+0x172>
 8014968:	6823      	ldr	r3, [r4, #0]
 801496a:	055a      	lsls	r2, r3, #21
 801496c:	d407      	bmi.n	801497e <_printf_float+0x1c6>
 801496e:	6923      	ldr	r3, [r4, #16]
 8014970:	4642      	mov	r2, r8
 8014972:	4631      	mov	r1, r6
 8014974:	4628      	mov	r0, r5
 8014976:	47b8      	blx	r7
 8014978:	3001      	adds	r0, #1
 801497a:	d12a      	bne.n	80149d2 <_printf_float+0x21a>
 801497c:	e76a      	b.n	8014854 <_printf_float+0x9c>
 801497e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014982:	f240 80e2 	bls.w	8014b4a <_printf_float+0x392>
 8014986:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801498a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801498e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014992:	d133      	bne.n	80149fc <_printf_float+0x244>
 8014994:	4a38      	ldr	r2, [pc, #224]	; (8014a78 <_printf_float+0x2c0>)
 8014996:	2301      	movs	r3, #1
 8014998:	4631      	mov	r1, r6
 801499a:	4628      	mov	r0, r5
 801499c:	47b8      	blx	r7
 801499e:	3001      	adds	r0, #1
 80149a0:	f43f af58 	beq.w	8014854 <_printf_float+0x9c>
 80149a4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80149a8:	429a      	cmp	r2, r3
 80149aa:	db02      	blt.n	80149b2 <_printf_float+0x1fa>
 80149ac:	6823      	ldr	r3, [r4, #0]
 80149ae:	07d8      	lsls	r0, r3, #31
 80149b0:	d50f      	bpl.n	80149d2 <_printf_float+0x21a>
 80149b2:	4653      	mov	r3, sl
 80149b4:	465a      	mov	r2, fp
 80149b6:	4631      	mov	r1, r6
 80149b8:	4628      	mov	r0, r5
 80149ba:	47b8      	blx	r7
 80149bc:	3001      	adds	r0, #1
 80149be:	f43f af49 	beq.w	8014854 <_printf_float+0x9c>
 80149c2:	f04f 0800 	mov.w	r8, #0
 80149c6:	f104 091a 	add.w	r9, r4, #26
 80149ca:	9b08      	ldr	r3, [sp, #32]
 80149cc:	3b01      	subs	r3, #1
 80149ce:	4543      	cmp	r3, r8
 80149d0:	dc09      	bgt.n	80149e6 <_printf_float+0x22e>
 80149d2:	6823      	ldr	r3, [r4, #0]
 80149d4:	079b      	lsls	r3, r3, #30
 80149d6:	f100 8108 	bmi.w	8014bea <_printf_float+0x432>
 80149da:	68e0      	ldr	r0, [r4, #12]
 80149dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149de:	4298      	cmp	r0, r3
 80149e0:	bfb8      	it	lt
 80149e2:	4618      	movlt	r0, r3
 80149e4:	e738      	b.n	8014858 <_printf_float+0xa0>
 80149e6:	2301      	movs	r3, #1
 80149e8:	464a      	mov	r2, r9
 80149ea:	4631      	mov	r1, r6
 80149ec:	4628      	mov	r0, r5
 80149ee:	47b8      	blx	r7
 80149f0:	3001      	adds	r0, #1
 80149f2:	f43f af2f 	beq.w	8014854 <_printf_float+0x9c>
 80149f6:	f108 0801 	add.w	r8, r8, #1
 80149fa:	e7e6      	b.n	80149ca <_printf_float+0x212>
 80149fc:	9b07      	ldr	r3, [sp, #28]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	dc3c      	bgt.n	8014a7c <_printf_float+0x2c4>
 8014a02:	4a1d      	ldr	r2, [pc, #116]	; (8014a78 <_printf_float+0x2c0>)
 8014a04:	2301      	movs	r3, #1
 8014a06:	4631      	mov	r1, r6
 8014a08:	4628      	mov	r0, r5
 8014a0a:	47b8      	blx	r7
 8014a0c:	3001      	adds	r0, #1
 8014a0e:	f43f af21 	beq.w	8014854 <_printf_float+0x9c>
 8014a12:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014a16:	4313      	orrs	r3, r2
 8014a18:	d102      	bne.n	8014a20 <_printf_float+0x268>
 8014a1a:	6823      	ldr	r3, [r4, #0]
 8014a1c:	07d9      	lsls	r1, r3, #31
 8014a1e:	d5d8      	bpl.n	80149d2 <_printf_float+0x21a>
 8014a20:	4653      	mov	r3, sl
 8014a22:	465a      	mov	r2, fp
 8014a24:	4631      	mov	r1, r6
 8014a26:	4628      	mov	r0, r5
 8014a28:	47b8      	blx	r7
 8014a2a:	3001      	adds	r0, #1
 8014a2c:	f43f af12 	beq.w	8014854 <_printf_float+0x9c>
 8014a30:	f04f 0900 	mov.w	r9, #0
 8014a34:	f104 0a1a 	add.w	sl, r4, #26
 8014a38:	9b07      	ldr	r3, [sp, #28]
 8014a3a:	425b      	negs	r3, r3
 8014a3c:	454b      	cmp	r3, r9
 8014a3e:	dc01      	bgt.n	8014a44 <_printf_float+0x28c>
 8014a40:	9b08      	ldr	r3, [sp, #32]
 8014a42:	e795      	b.n	8014970 <_printf_float+0x1b8>
 8014a44:	2301      	movs	r3, #1
 8014a46:	4652      	mov	r2, sl
 8014a48:	4631      	mov	r1, r6
 8014a4a:	4628      	mov	r0, r5
 8014a4c:	47b8      	blx	r7
 8014a4e:	3001      	adds	r0, #1
 8014a50:	f43f af00 	beq.w	8014854 <_printf_float+0x9c>
 8014a54:	f109 0901 	add.w	r9, r9, #1
 8014a58:	e7ee      	b.n	8014a38 <_printf_float+0x280>
 8014a5a:	bf00      	nop
 8014a5c:	f3af 8000 	nop.w
 8014a60:	ffffffff 	.word	0xffffffff
 8014a64:	7fefffff 	.word	0x7fefffff
 8014a68:	0801858c 	.word	0x0801858c
 8014a6c:	08018590 	.word	0x08018590
 8014a70:	08018598 	.word	0x08018598
 8014a74:	08018594 	.word	0x08018594
 8014a78:	0801859c 	.word	0x0801859c
 8014a7c:	9a08      	ldr	r2, [sp, #32]
 8014a7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014a80:	429a      	cmp	r2, r3
 8014a82:	bfa8      	it	ge
 8014a84:	461a      	movge	r2, r3
 8014a86:	2a00      	cmp	r2, #0
 8014a88:	4691      	mov	r9, r2
 8014a8a:	dc38      	bgt.n	8014afe <_printf_float+0x346>
 8014a8c:	2300      	movs	r3, #0
 8014a8e:	9305      	str	r3, [sp, #20]
 8014a90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014a94:	f104 021a 	add.w	r2, r4, #26
 8014a98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014a9a:	9905      	ldr	r1, [sp, #20]
 8014a9c:	9304      	str	r3, [sp, #16]
 8014a9e:	eba3 0309 	sub.w	r3, r3, r9
 8014aa2:	428b      	cmp	r3, r1
 8014aa4:	dc33      	bgt.n	8014b0e <_printf_float+0x356>
 8014aa6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014aaa:	429a      	cmp	r2, r3
 8014aac:	db3c      	blt.n	8014b28 <_printf_float+0x370>
 8014aae:	6823      	ldr	r3, [r4, #0]
 8014ab0:	07da      	lsls	r2, r3, #31
 8014ab2:	d439      	bmi.n	8014b28 <_printf_float+0x370>
 8014ab4:	9a08      	ldr	r2, [sp, #32]
 8014ab6:	9b04      	ldr	r3, [sp, #16]
 8014ab8:	9907      	ldr	r1, [sp, #28]
 8014aba:	1ad3      	subs	r3, r2, r3
 8014abc:	eba2 0901 	sub.w	r9, r2, r1
 8014ac0:	4599      	cmp	r9, r3
 8014ac2:	bfa8      	it	ge
 8014ac4:	4699      	movge	r9, r3
 8014ac6:	f1b9 0f00 	cmp.w	r9, #0
 8014aca:	dc35      	bgt.n	8014b38 <_printf_float+0x380>
 8014acc:	f04f 0800 	mov.w	r8, #0
 8014ad0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014ad4:	f104 0a1a 	add.w	sl, r4, #26
 8014ad8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014adc:	1a9b      	subs	r3, r3, r2
 8014ade:	eba3 0309 	sub.w	r3, r3, r9
 8014ae2:	4543      	cmp	r3, r8
 8014ae4:	f77f af75 	ble.w	80149d2 <_printf_float+0x21a>
 8014ae8:	2301      	movs	r3, #1
 8014aea:	4652      	mov	r2, sl
 8014aec:	4631      	mov	r1, r6
 8014aee:	4628      	mov	r0, r5
 8014af0:	47b8      	blx	r7
 8014af2:	3001      	adds	r0, #1
 8014af4:	f43f aeae 	beq.w	8014854 <_printf_float+0x9c>
 8014af8:	f108 0801 	add.w	r8, r8, #1
 8014afc:	e7ec      	b.n	8014ad8 <_printf_float+0x320>
 8014afe:	4613      	mov	r3, r2
 8014b00:	4631      	mov	r1, r6
 8014b02:	4642      	mov	r2, r8
 8014b04:	4628      	mov	r0, r5
 8014b06:	47b8      	blx	r7
 8014b08:	3001      	adds	r0, #1
 8014b0a:	d1bf      	bne.n	8014a8c <_printf_float+0x2d4>
 8014b0c:	e6a2      	b.n	8014854 <_printf_float+0x9c>
 8014b0e:	2301      	movs	r3, #1
 8014b10:	4631      	mov	r1, r6
 8014b12:	4628      	mov	r0, r5
 8014b14:	9204      	str	r2, [sp, #16]
 8014b16:	47b8      	blx	r7
 8014b18:	3001      	adds	r0, #1
 8014b1a:	f43f ae9b 	beq.w	8014854 <_printf_float+0x9c>
 8014b1e:	9b05      	ldr	r3, [sp, #20]
 8014b20:	9a04      	ldr	r2, [sp, #16]
 8014b22:	3301      	adds	r3, #1
 8014b24:	9305      	str	r3, [sp, #20]
 8014b26:	e7b7      	b.n	8014a98 <_printf_float+0x2e0>
 8014b28:	4653      	mov	r3, sl
 8014b2a:	465a      	mov	r2, fp
 8014b2c:	4631      	mov	r1, r6
 8014b2e:	4628      	mov	r0, r5
 8014b30:	47b8      	blx	r7
 8014b32:	3001      	adds	r0, #1
 8014b34:	d1be      	bne.n	8014ab4 <_printf_float+0x2fc>
 8014b36:	e68d      	b.n	8014854 <_printf_float+0x9c>
 8014b38:	9a04      	ldr	r2, [sp, #16]
 8014b3a:	464b      	mov	r3, r9
 8014b3c:	4442      	add	r2, r8
 8014b3e:	4631      	mov	r1, r6
 8014b40:	4628      	mov	r0, r5
 8014b42:	47b8      	blx	r7
 8014b44:	3001      	adds	r0, #1
 8014b46:	d1c1      	bne.n	8014acc <_printf_float+0x314>
 8014b48:	e684      	b.n	8014854 <_printf_float+0x9c>
 8014b4a:	9a08      	ldr	r2, [sp, #32]
 8014b4c:	2a01      	cmp	r2, #1
 8014b4e:	dc01      	bgt.n	8014b54 <_printf_float+0x39c>
 8014b50:	07db      	lsls	r3, r3, #31
 8014b52:	d537      	bpl.n	8014bc4 <_printf_float+0x40c>
 8014b54:	2301      	movs	r3, #1
 8014b56:	4642      	mov	r2, r8
 8014b58:	4631      	mov	r1, r6
 8014b5a:	4628      	mov	r0, r5
 8014b5c:	47b8      	blx	r7
 8014b5e:	3001      	adds	r0, #1
 8014b60:	f43f ae78 	beq.w	8014854 <_printf_float+0x9c>
 8014b64:	4653      	mov	r3, sl
 8014b66:	465a      	mov	r2, fp
 8014b68:	4631      	mov	r1, r6
 8014b6a:	4628      	mov	r0, r5
 8014b6c:	47b8      	blx	r7
 8014b6e:	3001      	adds	r0, #1
 8014b70:	f43f ae70 	beq.w	8014854 <_printf_float+0x9c>
 8014b74:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8014b78:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b80:	d01b      	beq.n	8014bba <_printf_float+0x402>
 8014b82:	9b08      	ldr	r3, [sp, #32]
 8014b84:	f108 0201 	add.w	r2, r8, #1
 8014b88:	3b01      	subs	r3, #1
 8014b8a:	4631      	mov	r1, r6
 8014b8c:	4628      	mov	r0, r5
 8014b8e:	47b8      	blx	r7
 8014b90:	3001      	adds	r0, #1
 8014b92:	d10e      	bne.n	8014bb2 <_printf_float+0x3fa>
 8014b94:	e65e      	b.n	8014854 <_printf_float+0x9c>
 8014b96:	2301      	movs	r3, #1
 8014b98:	464a      	mov	r2, r9
 8014b9a:	4631      	mov	r1, r6
 8014b9c:	4628      	mov	r0, r5
 8014b9e:	47b8      	blx	r7
 8014ba0:	3001      	adds	r0, #1
 8014ba2:	f43f ae57 	beq.w	8014854 <_printf_float+0x9c>
 8014ba6:	f108 0801 	add.w	r8, r8, #1
 8014baa:	9b08      	ldr	r3, [sp, #32]
 8014bac:	3b01      	subs	r3, #1
 8014bae:	4543      	cmp	r3, r8
 8014bb0:	dcf1      	bgt.n	8014b96 <_printf_float+0x3de>
 8014bb2:	9b04      	ldr	r3, [sp, #16]
 8014bb4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014bb8:	e6db      	b.n	8014972 <_printf_float+0x1ba>
 8014bba:	f04f 0800 	mov.w	r8, #0
 8014bbe:	f104 091a 	add.w	r9, r4, #26
 8014bc2:	e7f2      	b.n	8014baa <_printf_float+0x3f2>
 8014bc4:	2301      	movs	r3, #1
 8014bc6:	4642      	mov	r2, r8
 8014bc8:	e7df      	b.n	8014b8a <_printf_float+0x3d2>
 8014bca:	2301      	movs	r3, #1
 8014bcc:	464a      	mov	r2, r9
 8014bce:	4631      	mov	r1, r6
 8014bd0:	4628      	mov	r0, r5
 8014bd2:	47b8      	blx	r7
 8014bd4:	3001      	adds	r0, #1
 8014bd6:	f43f ae3d 	beq.w	8014854 <_printf_float+0x9c>
 8014bda:	f108 0801 	add.w	r8, r8, #1
 8014bde:	68e3      	ldr	r3, [r4, #12]
 8014be0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014be2:	1a5b      	subs	r3, r3, r1
 8014be4:	4543      	cmp	r3, r8
 8014be6:	dcf0      	bgt.n	8014bca <_printf_float+0x412>
 8014be8:	e6f7      	b.n	80149da <_printf_float+0x222>
 8014bea:	f04f 0800 	mov.w	r8, #0
 8014bee:	f104 0919 	add.w	r9, r4, #25
 8014bf2:	e7f4      	b.n	8014bde <_printf_float+0x426>

08014bf4 <_printf_common>:
 8014bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014bf8:	4616      	mov	r6, r2
 8014bfa:	4699      	mov	r9, r3
 8014bfc:	688a      	ldr	r2, [r1, #8]
 8014bfe:	690b      	ldr	r3, [r1, #16]
 8014c00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014c04:	4293      	cmp	r3, r2
 8014c06:	bfb8      	it	lt
 8014c08:	4613      	movlt	r3, r2
 8014c0a:	6033      	str	r3, [r6, #0]
 8014c0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014c10:	4607      	mov	r7, r0
 8014c12:	460c      	mov	r4, r1
 8014c14:	b10a      	cbz	r2, 8014c1a <_printf_common+0x26>
 8014c16:	3301      	adds	r3, #1
 8014c18:	6033      	str	r3, [r6, #0]
 8014c1a:	6823      	ldr	r3, [r4, #0]
 8014c1c:	0699      	lsls	r1, r3, #26
 8014c1e:	bf42      	ittt	mi
 8014c20:	6833      	ldrmi	r3, [r6, #0]
 8014c22:	3302      	addmi	r3, #2
 8014c24:	6033      	strmi	r3, [r6, #0]
 8014c26:	6825      	ldr	r5, [r4, #0]
 8014c28:	f015 0506 	ands.w	r5, r5, #6
 8014c2c:	d106      	bne.n	8014c3c <_printf_common+0x48>
 8014c2e:	f104 0a19 	add.w	sl, r4, #25
 8014c32:	68e3      	ldr	r3, [r4, #12]
 8014c34:	6832      	ldr	r2, [r6, #0]
 8014c36:	1a9b      	subs	r3, r3, r2
 8014c38:	42ab      	cmp	r3, r5
 8014c3a:	dc26      	bgt.n	8014c8a <_printf_common+0x96>
 8014c3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014c40:	1e13      	subs	r3, r2, #0
 8014c42:	6822      	ldr	r2, [r4, #0]
 8014c44:	bf18      	it	ne
 8014c46:	2301      	movne	r3, #1
 8014c48:	0692      	lsls	r2, r2, #26
 8014c4a:	d42b      	bmi.n	8014ca4 <_printf_common+0xb0>
 8014c4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014c50:	4649      	mov	r1, r9
 8014c52:	4638      	mov	r0, r7
 8014c54:	47c0      	blx	r8
 8014c56:	3001      	adds	r0, #1
 8014c58:	d01e      	beq.n	8014c98 <_printf_common+0xa4>
 8014c5a:	6823      	ldr	r3, [r4, #0]
 8014c5c:	68e5      	ldr	r5, [r4, #12]
 8014c5e:	6832      	ldr	r2, [r6, #0]
 8014c60:	f003 0306 	and.w	r3, r3, #6
 8014c64:	2b04      	cmp	r3, #4
 8014c66:	bf08      	it	eq
 8014c68:	1aad      	subeq	r5, r5, r2
 8014c6a:	68a3      	ldr	r3, [r4, #8]
 8014c6c:	6922      	ldr	r2, [r4, #16]
 8014c6e:	bf0c      	ite	eq
 8014c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014c74:	2500      	movne	r5, #0
 8014c76:	4293      	cmp	r3, r2
 8014c78:	bfc4      	itt	gt
 8014c7a:	1a9b      	subgt	r3, r3, r2
 8014c7c:	18ed      	addgt	r5, r5, r3
 8014c7e:	2600      	movs	r6, #0
 8014c80:	341a      	adds	r4, #26
 8014c82:	42b5      	cmp	r5, r6
 8014c84:	d11a      	bne.n	8014cbc <_printf_common+0xc8>
 8014c86:	2000      	movs	r0, #0
 8014c88:	e008      	b.n	8014c9c <_printf_common+0xa8>
 8014c8a:	2301      	movs	r3, #1
 8014c8c:	4652      	mov	r2, sl
 8014c8e:	4649      	mov	r1, r9
 8014c90:	4638      	mov	r0, r7
 8014c92:	47c0      	blx	r8
 8014c94:	3001      	adds	r0, #1
 8014c96:	d103      	bne.n	8014ca0 <_printf_common+0xac>
 8014c98:	f04f 30ff 	mov.w	r0, #4294967295
 8014c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ca0:	3501      	adds	r5, #1
 8014ca2:	e7c6      	b.n	8014c32 <_printf_common+0x3e>
 8014ca4:	18e1      	adds	r1, r4, r3
 8014ca6:	1c5a      	adds	r2, r3, #1
 8014ca8:	2030      	movs	r0, #48	; 0x30
 8014caa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014cae:	4422      	add	r2, r4
 8014cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014cb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014cb8:	3302      	adds	r3, #2
 8014cba:	e7c7      	b.n	8014c4c <_printf_common+0x58>
 8014cbc:	2301      	movs	r3, #1
 8014cbe:	4622      	mov	r2, r4
 8014cc0:	4649      	mov	r1, r9
 8014cc2:	4638      	mov	r0, r7
 8014cc4:	47c0      	blx	r8
 8014cc6:	3001      	adds	r0, #1
 8014cc8:	d0e6      	beq.n	8014c98 <_printf_common+0xa4>
 8014cca:	3601      	adds	r6, #1
 8014ccc:	e7d9      	b.n	8014c82 <_printf_common+0x8e>
	...

08014cd0 <_printf_i>:
 8014cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014cd4:	460c      	mov	r4, r1
 8014cd6:	4691      	mov	r9, r2
 8014cd8:	7e27      	ldrb	r7, [r4, #24]
 8014cda:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014cdc:	2f78      	cmp	r7, #120	; 0x78
 8014cde:	4680      	mov	r8, r0
 8014ce0:	469a      	mov	sl, r3
 8014ce2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014ce6:	d807      	bhi.n	8014cf8 <_printf_i+0x28>
 8014ce8:	2f62      	cmp	r7, #98	; 0x62
 8014cea:	d80a      	bhi.n	8014d02 <_printf_i+0x32>
 8014cec:	2f00      	cmp	r7, #0
 8014cee:	f000 80d8 	beq.w	8014ea2 <_printf_i+0x1d2>
 8014cf2:	2f58      	cmp	r7, #88	; 0x58
 8014cf4:	f000 80a3 	beq.w	8014e3e <_printf_i+0x16e>
 8014cf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014cfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014d00:	e03a      	b.n	8014d78 <_printf_i+0xa8>
 8014d02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014d06:	2b15      	cmp	r3, #21
 8014d08:	d8f6      	bhi.n	8014cf8 <_printf_i+0x28>
 8014d0a:	a001      	add	r0, pc, #4	; (adr r0, 8014d10 <_printf_i+0x40>)
 8014d0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014d10:	08014d69 	.word	0x08014d69
 8014d14:	08014d7d 	.word	0x08014d7d
 8014d18:	08014cf9 	.word	0x08014cf9
 8014d1c:	08014cf9 	.word	0x08014cf9
 8014d20:	08014cf9 	.word	0x08014cf9
 8014d24:	08014cf9 	.word	0x08014cf9
 8014d28:	08014d7d 	.word	0x08014d7d
 8014d2c:	08014cf9 	.word	0x08014cf9
 8014d30:	08014cf9 	.word	0x08014cf9
 8014d34:	08014cf9 	.word	0x08014cf9
 8014d38:	08014cf9 	.word	0x08014cf9
 8014d3c:	08014e89 	.word	0x08014e89
 8014d40:	08014dad 	.word	0x08014dad
 8014d44:	08014e6b 	.word	0x08014e6b
 8014d48:	08014cf9 	.word	0x08014cf9
 8014d4c:	08014cf9 	.word	0x08014cf9
 8014d50:	08014eab 	.word	0x08014eab
 8014d54:	08014cf9 	.word	0x08014cf9
 8014d58:	08014dad 	.word	0x08014dad
 8014d5c:	08014cf9 	.word	0x08014cf9
 8014d60:	08014cf9 	.word	0x08014cf9
 8014d64:	08014e73 	.word	0x08014e73
 8014d68:	680b      	ldr	r3, [r1, #0]
 8014d6a:	1d1a      	adds	r2, r3, #4
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	600a      	str	r2, [r1, #0]
 8014d70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014d78:	2301      	movs	r3, #1
 8014d7a:	e0a3      	b.n	8014ec4 <_printf_i+0x1f4>
 8014d7c:	6825      	ldr	r5, [r4, #0]
 8014d7e:	6808      	ldr	r0, [r1, #0]
 8014d80:	062e      	lsls	r6, r5, #24
 8014d82:	f100 0304 	add.w	r3, r0, #4
 8014d86:	d50a      	bpl.n	8014d9e <_printf_i+0xce>
 8014d88:	6805      	ldr	r5, [r0, #0]
 8014d8a:	600b      	str	r3, [r1, #0]
 8014d8c:	2d00      	cmp	r5, #0
 8014d8e:	da03      	bge.n	8014d98 <_printf_i+0xc8>
 8014d90:	232d      	movs	r3, #45	; 0x2d
 8014d92:	426d      	negs	r5, r5
 8014d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014d98:	485e      	ldr	r0, [pc, #376]	; (8014f14 <_printf_i+0x244>)
 8014d9a:	230a      	movs	r3, #10
 8014d9c:	e019      	b.n	8014dd2 <_printf_i+0x102>
 8014d9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8014da2:	6805      	ldr	r5, [r0, #0]
 8014da4:	600b      	str	r3, [r1, #0]
 8014da6:	bf18      	it	ne
 8014da8:	b22d      	sxthne	r5, r5
 8014daa:	e7ef      	b.n	8014d8c <_printf_i+0xbc>
 8014dac:	680b      	ldr	r3, [r1, #0]
 8014dae:	6825      	ldr	r5, [r4, #0]
 8014db0:	1d18      	adds	r0, r3, #4
 8014db2:	6008      	str	r0, [r1, #0]
 8014db4:	0628      	lsls	r0, r5, #24
 8014db6:	d501      	bpl.n	8014dbc <_printf_i+0xec>
 8014db8:	681d      	ldr	r5, [r3, #0]
 8014dba:	e002      	b.n	8014dc2 <_printf_i+0xf2>
 8014dbc:	0669      	lsls	r1, r5, #25
 8014dbe:	d5fb      	bpl.n	8014db8 <_printf_i+0xe8>
 8014dc0:	881d      	ldrh	r5, [r3, #0]
 8014dc2:	4854      	ldr	r0, [pc, #336]	; (8014f14 <_printf_i+0x244>)
 8014dc4:	2f6f      	cmp	r7, #111	; 0x6f
 8014dc6:	bf0c      	ite	eq
 8014dc8:	2308      	moveq	r3, #8
 8014dca:	230a      	movne	r3, #10
 8014dcc:	2100      	movs	r1, #0
 8014dce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014dd2:	6866      	ldr	r6, [r4, #4]
 8014dd4:	60a6      	str	r6, [r4, #8]
 8014dd6:	2e00      	cmp	r6, #0
 8014dd8:	bfa2      	ittt	ge
 8014dda:	6821      	ldrge	r1, [r4, #0]
 8014ddc:	f021 0104 	bicge.w	r1, r1, #4
 8014de0:	6021      	strge	r1, [r4, #0]
 8014de2:	b90d      	cbnz	r5, 8014de8 <_printf_i+0x118>
 8014de4:	2e00      	cmp	r6, #0
 8014de6:	d04d      	beq.n	8014e84 <_printf_i+0x1b4>
 8014de8:	4616      	mov	r6, r2
 8014dea:	fbb5 f1f3 	udiv	r1, r5, r3
 8014dee:	fb03 5711 	mls	r7, r3, r1, r5
 8014df2:	5dc7      	ldrb	r7, [r0, r7]
 8014df4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014df8:	462f      	mov	r7, r5
 8014dfa:	42bb      	cmp	r3, r7
 8014dfc:	460d      	mov	r5, r1
 8014dfe:	d9f4      	bls.n	8014dea <_printf_i+0x11a>
 8014e00:	2b08      	cmp	r3, #8
 8014e02:	d10b      	bne.n	8014e1c <_printf_i+0x14c>
 8014e04:	6823      	ldr	r3, [r4, #0]
 8014e06:	07df      	lsls	r7, r3, #31
 8014e08:	d508      	bpl.n	8014e1c <_printf_i+0x14c>
 8014e0a:	6923      	ldr	r3, [r4, #16]
 8014e0c:	6861      	ldr	r1, [r4, #4]
 8014e0e:	4299      	cmp	r1, r3
 8014e10:	bfde      	ittt	le
 8014e12:	2330      	movle	r3, #48	; 0x30
 8014e14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014e18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014e1c:	1b92      	subs	r2, r2, r6
 8014e1e:	6122      	str	r2, [r4, #16]
 8014e20:	f8cd a000 	str.w	sl, [sp]
 8014e24:	464b      	mov	r3, r9
 8014e26:	aa03      	add	r2, sp, #12
 8014e28:	4621      	mov	r1, r4
 8014e2a:	4640      	mov	r0, r8
 8014e2c:	f7ff fee2 	bl	8014bf4 <_printf_common>
 8014e30:	3001      	adds	r0, #1
 8014e32:	d14c      	bne.n	8014ece <_printf_i+0x1fe>
 8014e34:	f04f 30ff 	mov.w	r0, #4294967295
 8014e38:	b004      	add	sp, #16
 8014e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e3e:	4835      	ldr	r0, [pc, #212]	; (8014f14 <_printf_i+0x244>)
 8014e40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014e44:	6823      	ldr	r3, [r4, #0]
 8014e46:	680e      	ldr	r6, [r1, #0]
 8014e48:	061f      	lsls	r7, r3, #24
 8014e4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8014e4e:	600e      	str	r6, [r1, #0]
 8014e50:	d514      	bpl.n	8014e7c <_printf_i+0x1ac>
 8014e52:	07d9      	lsls	r1, r3, #31
 8014e54:	bf44      	itt	mi
 8014e56:	f043 0320 	orrmi.w	r3, r3, #32
 8014e5a:	6023      	strmi	r3, [r4, #0]
 8014e5c:	b91d      	cbnz	r5, 8014e66 <_printf_i+0x196>
 8014e5e:	6823      	ldr	r3, [r4, #0]
 8014e60:	f023 0320 	bic.w	r3, r3, #32
 8014e64:	6023      	str	r3, [r4, #0]
 8014e66:	2310      	movs	r3, #16
 8014e68:	e7b0      	b.n	8014dcc <_printf_i+0xfc>
 8014e6a:	6823      	ldr	r3, [r4, #0]
 8014e6c:	f043 0320 	orr.w	r3, r3, #32
 8014e70:	6023      	str	r3, [r4, #0]
 8014e72:	2378      	movs	r3, #120	; 0x78
 8014e74:	4828      	ldr	r0, [pc, #160]	; (8014f18 <_printf_i+0x248>)
 8014e76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014e7a:	e7e3      	b.n	8014e44 <_printf_i+0x174>
 8014e7c:	065e      	lsls	r6, r3, #25
 8014e7e:	bf48      	it	mi
 8014e80:	b2ad      	uxthmi	r5, r5
 8014e82:	e7e6      	b.n	8014e52 <_printf_i+0x182>
 8014e84:	4616      	mov	r6, r2
 8014e86:	e7bb      	b.n	8014e00 <_printf_i+0x130>
 8014e88:	680b      	ldr	r3, [r1, #0]
 8014e8a:	6826      	ldr	r6, [r4, #0]
 8014e8c:	6960      	ldr	r0, [r4, #20]
 8014e8e:	1d1d      	adds	r5, r3, #4
 8014e90:	600d      	str	r5, [r1, #0]
 8014e92:	0635      	lsls	r5, r6, #24
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	d501      	bpl.n	8014e9c <_printf_i+0x1cc>
 8014e98:	6018      	str	r0, [r3, #0]
 8014e9a:	e002      	b.n	8014ea2 <_printf_i+0x1d2>
 8014e9c:	0671      	lsls	r1, r6, #25
 8014e9e:	d5fb      	bpl.n	8014e98 <_printf_i+0x1c8>
 8014ea0:	8018      	strh	r0, [r3, #0]
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	6123      	str	r3, [r4, #16]
 8014ea6:	4616      	mov	r6, r2
 8014ea8:	e7ba      	b.n	8014e20 <_printf_i+0x150>
 8014eaa:	680b      	ldr	r3, [r1, #0]
 8014eac:	1d1a      	adds	r2, r3, #4
 8014eae:	600a      	str	r2, [r1, #0]
 8014eb0:	681e      	ldr	r6, [r3, #0]
 8014eb2:	6862      	ldr	r2, [r4, #4]
 8014eb4:	2100      	movs	r1, #0
 8014eb6:	4630      	mov	r0, r6
 8014eb8:	f7eb fa32 	bl	8000320 <memchr>
 8014ebc:	b108      	cbz	r0, 8014ec2 <_printf_i+0x1f2>
 8014ebe:	1b80      	subs	r0, r0, r6
 8014ec0:	6060      	str	r0, [r4, #4]
 8014ec2:	6863      	ldr	r3, [r4, #4]
 8014ec4:	6123      	str	r3, [r4, #16]
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014ecc:	e7a8      	b.n	8014e20 <_printf_i+0x150>
 8014ece:	6923      	ldr	r3, [r4, #16]
 8014ed0:	4632      	mov	r2, r6
 8014ed2:	4649      	mov	r1, r9
 8014ed4:	4640      	mov	r0, r8
 8014ed6:	47d0      	blx	sl
 8014ed8:	3001      	adds	r0, #1
 8014eda:	d0ab      	beq.n	8014e34 <_printf_i+0x164>
 8014edc:	6823      	ldr	r3, [r4, #0]
 8014ede:	079b      	lsls	r3, r3, #30
 8014ee0:	d413      	bmi.n	8014f0a <_printf_i+0x23a>
 8014ee2:	68e0      	ldr	r0, [r4, #12]
 8014ee4:	9b03      	ldr	r3, [sp, #12]
 8014ee6:	4298      	cmp	r0, r3
 8014ee8:	bfb8      	it	lt
 8014eea:	4618      	movlt	r0, r3
 8014eec:	e7a4      	b.n	8014e38 <_printf_i+0x168>
 8014eee:	2301      	movs	r3, #1
 8014ef0:	4632      	mov	r2, r6
 8014ef2:	4649      	mov	r1, r9
 8014ef4:	4640      	mov	r0, r8
 8014ef6:	47d0      	blx	sl
 8014ef8:	3001      	adds	r0, #1
 8014efa:	d09b      	beq.n	8014e34 <_printf_i+0x164>
 8014efc:	3501      	adds	r5, #1
 8014efe:	68e3      	ldr	r3, [r4, #12]
 8014f00:	9903      	ldr	r1, [sp, #12]
 8014f02:	1a5b      	subs	r3, r3, r1
 8014f04:	42ab      	cmp	r3, r5
 8014f06:	dcf2      	bgt.n	8014eee <_printf_i+0x21e>
 8014f08:	e7eb      	b.n	8014ee2 <_printf_i+0x212>
 8014f0a:	2500      	movs	r5, #0
 8014f0c:	f104 0619 	add.w	r6, r4, #25
 8014f10:	e7f5      	b.n	8014efe <_printf_i+0x22e>
 8014f12:	bf00      	nop
 8014f14:	0801859e 	.word	0x0801859e
 8014f18:	080185af 	.word	0x080185af

08014f1c <quorem>:
 8014f1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f20:	6903      	ldr	r3, [r0, #16]
 8014f22:	690c      	ldr	r4, [r1, #16]
 8014f24:	42a3      	cmp	r3, r4
 8014f26:	4607      	mov	r7, r0
 8014f28:	f2c0 8081 	blt.w	801502e <quorem+0x112>
 8014f2c:	3c01      	subs	r4, #1
 8014f2e:	f101 0814 	add.w	r8, r1, #20
 8014f32:	f100 0514 	add.w	r5, r0, #20
 8014f36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014f3a:	9301      	str	r3, [sp, #4]
 8014f3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014f40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014f44:	3301      	adds	r3, #1
 8014f46:	429a      	cmp	r2, r3
 8014f48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014f4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014f50:	fbb2 f6f3 	udiv	r6, r2, r3
 8014f54:	d331      	bcc.n	8014fba <quorem+0x9e>
 8014f56:	f04f 0e00 	mov.w	lr, #0
 8014f5a:	4640      	mov	r0, r8
 8014f5c:	46ac      	mov	ip, r5
 8014f5e:	46f2      	mov	sl, lr
 8014f60:	f850 2b04 	ldr.w	r2, [r0], #4
 8014f64:	b293      	uxth	r3, r2
 8014f66:	fb06 e303 	mla	r3, r6, r3, lr
 8014f6a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014f6e:	b29b      	uxth	r3, r3
 8014f70:	ebaa 0303 	sub.w	r3, sl, r3
 8014f74:	0c12      	lsrs	r2, r2, #16
 8014f76:	f8dc a000 	ldr.w	sl, [ip]
 8014f7a:	fb06 e202 	mla	r2, r6, r2, lr
 8014f7e:	fa13 f38a 	uxtah	r3, r3, sl
 8014f82:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014f86:	fa1f fa82 	uxth.w	sl, r2
 8014f8a:	f8dc 2000 	ldr.w	r2, [ip]
 8014f8e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8014f92:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014f96:	b29b      	uxth	r3, r3
 8014f98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014f9c:	4581      	cmp	r9, r0
 8014f9e:	f84c 3b04 	str.w	r3, [ip], #4
 8014fa2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014fa6:	d2db      	bcs.n	8014f60 <quorem+0x44>
 8014fa8:	f855 300b 	ldr.w	r3, [r5, fp]
 8014fac:	b92b      	cbnz	r3, 8014fba <quorem+0x9e>
 8014fae:	9b01      	ldr	r3, [sp, #4]
 8014fb0:	3b04      	subs	r3, #4
 8014fb2:	429d      	cmp	r5, r3
 8014fb4:	461a      	mov	r2, r3
 8014fb6:	d32e      	bcc.n	8015016 <quorem+0xfa>
 8014fb8:	613c      	str	r4, [r7, #16]
 8014fba:	4638      	mov	r0, r7
 8014fbc:	f001 f848 	bl	8016050 <__mcmp>
 8014fc0:	2800      	cmp	r0, #0
 8014fc2:	db24      	blt.n	801500e <quorem+0xf2>
 8014fc4:	3601      	adds	r6, #1
 8014fc6:	4628      	mov	r0, r5
 8014fc8:	f04f 0c00 	mov.w	ip, #0
 8014fcc:	f858 2b04 	ldr.w	r2, [r8], #4
 8014fd0:	f8d0 e000 	ldr.w	lr, [r0]
 8014fd4:	b293      	uxth	r3, r2
 8014fd6:	ebac 0303 	sub.w	r3, ip, r3
 8014fda:	0c12      	lsrs	r2, r2, #16
 8014fdc:	fa13 f38e 	uxtah	r3, r3, lr
 8014fe0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014fe4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014fe8:	b29b      	uxth	r3, r3
 8014fea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014fee:	45c1      	cmp	r9, r8
 8014ff0:	f840 3b04 	str.w	r3, [r0], #4
 8014ff4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014ff8:	d2e8      	bcs.n	8014fcc <quorem+0xb0>
 8014ffa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014ffe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015002:	b922      	cbnz	r2, 801500e <quorem+0xf2>
 8015004:	3b04      	subs	r3, #4
 8015006:	429d      	cmp	r5, r3
 8015008:	461a      	mov	r2, r3
 801500a:	d30a      	bcc.n	8015022 <quorem+0x106>
 801500c:	613c      	str	r4, [r7, #16]
 801500e:	4630      	mov	r0, r6
 8015010:	b003      	add	sp, #12
 8015012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015016:	6812      	ldr	r2, [r2, #0]
 8015018:	3b04      	subs	r3, #4
 801501a:	2a00      	cmp	r2, #0
 801501c:	d1cc      	bne.n	8014fb8 <quorem+0x9c>
 801501e:	3c01      	subs	r4, #1
 8015020:	e7c7      	b.n	8014fb2 <quorem+0x96>
 8015022:	6812      	ldr	r2, [r2, #0]
 8015024:	3b04      	subs	r3, #4
 8015026:	2a00      	cmp	r2, #0
 8015028:	d1f0      	bne.n	801500c <quorem+0xf0>
 801502a:	3c01      	subs	r4, #1
 801502c:	e7eb      	b.n	8015006 <quorem+0xea>
 801502e:	2000      	movs	r0, #0
 8015030:	e7ee      	b.n	8015010 <quorem+0xf4>
 8015032:	0000      	movs	r0, r0
 8015034:	0000      	movs	r0, r0
	...

08015038 <_dtoa_r>:
 8015038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801503c:	ec59 8b10 	vmov	r8, r9, d0
 8015040:	b095      	sub	sp, #84	; 0x54
 8015042:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015044:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8015046:	9107      	str	r1, [sp, #28]
 8015048:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801504c:	4606      	mov	r6, r0
 801504e:	9209      	str	r2, [sp, #36]	; 0x24
 8015050:	9310      	str	r3, [sp, #64]	; 0x40
 8015052:	b975      	cbnz	r5, 8015072 <_dtoa_r+0x3a>
 8015054:	2010      	movs	r0, #16
 8015056:	f000 fd75 	bl	8015b44 <malloc>
 801505a:	4602      	mov	r2, r0
 801505c:	6270      	str	r0, [r6, #36]	; 0x24
 801505e:	b920      	cbnz	r0, 801506a <_dtoa_r+0x32>
 8015060:	4bab      	ldr	r3, [pc, #684]	; (8015310 <_dtoa_r+0x2d8>)
 8015062:	21ea      	movs	r1, #234	; 0xea
 8015064:	48ab      	ldr	r0, [pc, #684]	; (8015314 <_dtoa_r+0x2dc>)
 8015066:	f001 f9bd 	bl	80163e4 <__assert_func>
 801506a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801506e:	6005      	str	r5, [r0, #0]
 8015070:	60c5      	str	r5, [r0, #12]
 8015072:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015074:	6819      	ldr	r1, [r3, #0]
 8015076:	b151      	cbz	r1, 801508e <_dtoa_r+0x56>
 8015078:	685a      	ldr	r2, [r3, #4]
 801507a:	604a      	str	r2, [r1, #4]
 801507c:	2301      	movs	r3, #1
 801507e:	4093      	lsls	r3, r2
 8015080:	608b      	str	r3, [r1, #8]
 8015082:	4630      	mov	r0, r6
 8015084:	f000 fda6 	bl	8015bd4 <_Bfree>
 8015088:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801508a:	2200      	movs	r2, #0
 801508c:	601a      	str	r2, [r3, #0]
 801508e:	f1b9 0300 	subs.w	r3, r9, #0
 8015092:	bfbb      	ittet	lt
 8015094:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015098:	9303      	strlt	r3, [sp, #12]
 801509a:	2300      	movge	r3, #0
 801509c:	2201      	movlt	r2, #1
 801509e:	bfac      	ite	ge
 80150a0:	6023      	strge	r3, [r4, #0]
 80150a2:	6022      	strlt	r2, [r4, #0]
 80150a4:	4b9c      	ldr	r3, [pc, #624]	; (8015318 <_dtoa_r+0x2e0>)
 80150a6:	9c03      	ldr	r4, [sp, #12]
 80150a8:	43a3      	bics	r3, r4
 80150aa:	d11a      	bne.n	80150e2 <_dtoa_r+0xaa>
 80150ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80150ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80150b2:	6013      	str	r3, [r2, #0]
 80150b4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80150b8:	ea53 0308 	orrs.w	r3, r3, r8
 80150bc:	f000 8512 	beq.w	8015ae4 <_dtoa_r+0xaac>
 80150c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80150c2:	b953      	cbnz	r3, 80150da <_dtoa_r+0xa2>
 80150c4:	4b95      	ldr	r3, [pc, #596]	; (801531c <_dtoa_r+0x2e4>)
 80150c6:	e01f      	b.n	8015108 <_dtoa_r+0xd0>
 80150c8:	4b95      	ldr	r3, [pc, #596]	; (8015320 <_dtoa_r+0x2e8>)
 80150ca:	9300      	str	r3, [sp, #0]
 80150cc:	3308      	adds	r3, #8
 80150ce:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80150d0:	6013      	str	r3, [r2, #0]
 80150d2:	9800      	ldr	r0, [sp, #0]
 80150d4:	b015      	add	sp, #84	; 0x54
 80150d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150da:	4b90      	ldr	r3, [pc, #576]	; (801531c <_dtoa_r+0x2e4>)
 80150dc:	9300      	str	r3, [sp, #0]
 80150de:	3303      	adds	r3, #3
 80150e0:	e7f5      	b.n	80150ce <_dtoa_r+0x96>
 80150e2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80150e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80150ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150ee:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80150f2:	d10b      	bne.n	801510c <_dtoa_r+0xd4>
 80150f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80150f6:	2301      	movs	r3, #1
 80150f8:	6013      	str	r3, [r2, #0]
 80150fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	f000 84ee 	beq.w	8015ade <_dtoa_r+0xaa6>
 8015102:	4888      	ldr	r0, [pc, #544]	; (8015324 <_dtoa_r+0x2ec>)
 8015104:	6018      	str	r0, [r3, #0]
 8015106:	1e43      	subs	r3, r0, #1
 8015108:	9300      	str	r3, [sp, #0]
 801510a:	e7e2      	b.n	80150d2 <_dtoa_r+0x9a>
 801510c:	a913      	add	r1, sp, #76	; 0x4c
 801510e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8015112:	aa12      	add	r2, sp, #72	; 0x48
 8015114:	4630      	mov	r0, r6
 8015116:	f001 f83f 	bl	8016198 <__d2b>
 801511a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801511e:	4605      	mov	r5, r0
 8015120:	9812      	ldr	r0, [sp, #72]	; 0x48
 8015122:	2900      	cmp	r1, #0
 8015124:	d047      	beq.n	80151b6 <_dtoa_r+0x17e>
 8015126:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8015128:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801512c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015130:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8015134:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8015138:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801513c:	2400      	movs	r4, #0
 801513e:	ec43 2b16 	vmov	d6, r2, r3
 8015142:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8015146:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80152f8 <_dtoa_r+0x2c0>
 801514a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801514e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8015300 <_dtoa_r+0x2c8>
 8015152:	eea7 6b05 	vfma.f64	d6, d7, d5
 8015156:	eeb0 7b46 	vmov.f64	d7, d6
 801515a:	ee06 1a90 	vmov	s13, r1
 801515e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8015162:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8015308 <_dtoa_r+0x2d0>
 8015166:	eea5 7b06 	vfma.f64	d7, d5, d6
 801516a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801516e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8015172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015176:	ee16 ba90 	vmov	fp, s13
 801517a:	9411      	str	r4, [sp, #68]	; 0x44
 801517c:	d508      	bpl.n	8015190 <_dtoa_r+0x158>
 801517e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8015182:	eeb4 6b47 	vcmp.f64	d6, d7
 8015186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801518a:	bf18      	it	ne
 801518c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8015190:	f1bb 0f16 	cmp.w	fp, #22
 8015194:	d832      	bhi.n	80151fc <_dtoa_r+0x1c4>
 8015196:	4b64      	ldr	r3, [pc, #400]	; (8015328 <_dtoa_r+0x2f0>)
 8015198:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801519c:	ed93 7b00 	vldr	d7, [r3]
 80151a0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80151a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80151a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151ac:	d501      	bpl.n	80151b2 <_dtoa_r+0x17a>
 80151ae:	f10b 3bff 	add.w	fp, fp, #4294967295
 80151b2:	2300      	movs	r3, #0
 80151b4:	e023      	b.n	80151fe <_dtoa_r+0x1c6>
 80151b6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80151b8:	4401      	add	r1, r0
 80151ba:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80151be:	2b20      	cmp	r3, #32
 80151c0:	bfc3      	ittte	gt
 80151c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80151c6:	fa04 f303 	lslgt.w	r3, r4, r3
 80151ca:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80151ce:	f1c3 0320 	rsble	r3, r3, #32
 80151d2:	bfc6      	itte	gt
 80151d4:	fa28 f804 	lsrgt.w	r8, r8, r4
 80151d8:	ea43 0308 	orrgt.w	r3, r3, r8
 80151dc:	fa08 f303 	lslle.w	r3, r8, r3
 80151e0:	ee07 3a90 	vmov	s15, r3
 80151e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80151e8:	3901      	subs	r1, #1
 80151ea:	ed8d 7b00 	vstr	d7, [sp]
 80151ee:	9c01      	ldr	r4, [sp, #4]
 80151f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151f4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80151f8:	2401      	movs	r4, #1
 80151fa:	e7a0      	b.n	801513e <_dtoa_r+0x106>
 80151fc:	2301      	movs	r3, #1
 80151fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8015200:	1a43      	subs	r3, r0, r1
 8015202:	1e5a      	subs	r2, r3, #1
 8015204:	bf45      	ittet	mi
 8015206:	f1c3 0301 	rsbmi	r3, r3, #1
 801520a:	9305      	strmi	r3, [sp, #20]
 801520c:	2300      	movpl	r3, #0
 801520e:	2300      	movmi	r3, #0
 8015210:	9206      	str	r2, [sp, #24]
 8015212:	bf54      	ite	pl
 8015214:	9305      	strpl	r3, [sp, #20]
 8015216:	9306      	strmi	r3, [sp, #24]
 8015218:	f1bb 0f00 	cmp.w	fp, #0
 801521c:	db18      	blt.n	8015250 <_dtoa_r+0x218>
 801521e:	9b06      	ldr	r3, [sp, #24]
 8015220:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8015224:	445b      	add	r3, fp
 8015226:	9306      	str	r3, [sp, #24]
 8015228:	2300      	movs	r3, #0
 801522a:	9a07      	ldr	r2, [sp, #28]
 801522c:	2a09      	cmp	r2, #9
 801522e:	d849      	bhi.n	80152c4 <_dtoa_r+0x28c>
 8015230:	2a05      	cmp	r2, #5
 8015232:	bfc4      	itt	gt
 8015234:	3a04      	subgt	r2, #4
 8015236:	9207      	strgt	r2, [sp, #28]
 8015238:	9a07      	ldr	r2, [sp, #28]
 801523a:	f1a2 0202 	sub.w	r2, r2, #2
 801523e:	bfcc      	ite	gt
 8015240:	2400      	movgt	r4, #0
 8015242:	2401      	movle	r4, #1
 8015244:	2a03      	cmp	r2, #3
 8015246:	d848      	bhi.n	80152da <_dtoa_r+0x2a2>
 8015248:	e8df f002 	tbb	[pc, r2]
 801524c:	3a2c2e0b 	.word	0x3a2c2e0b
 8015250:	9b05      	ldr	r3, [sp, #20]
 8015252:	2200      	movs	r2, #0
 8015254:	eba3 030b 	sub.w	r3, r3, fp
 8015258:	9305      	str	r3, [sp, #20]
 801525a:	920e      	str	r2, [sp, #56]	; 0x38
 801525c:	f1cb 0300 	rsb	r3, fp, #0
 8015260:	e7e3      	b.n	801522a <_dtoa_r+0x1f2>
 8015262:	2200      	movs	r2, #0
 8015264:	9208      	str	r2, [sp, #32]
 8015266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015268:	2a00      	cmp	r2, #0
 801526a:	dc39      	bgt.n	80152e0 <_dtoa_r+0x2a8>
 801526c:	f04f 0a01 	mov.w	sl, #1
 8015270:	46d1      	mov	r9, sl
 8015272:	4652      	mov	r2, sl
 8015274:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015278:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801527a:	2100      	movs	r1, #0
 801527c:	6079      	str	r1, [r7, #4]
 801527e:	2004      	movs	r0, #4
 8015280:	f100 0c14 	add.w	ip, r0, #20
 8015284:	4594      	cmp	ip, r2
 8015286:	6879      	ldr	r1, [r7, #4]
 8015288:	d92f      	bls.n	80152ea <_dtoa_r+0x2b2>
 801528a:	4630      	mov	r0, r6
 801528c:	930c      	str	r3, [sp, #48]	; 0x30
 801528e:	f000 fc61 	bl	8015b54 <_Balloc>
 8015292:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015294:	9000      	str	r0, [sp, #0]
 8015296:	4602      	mov	r2, r0
 8015298:	2800      	cmp	r0, #0
 801529a:	d149      	bne.n	8015330 <_dtoa_r+0x2f8>
 801529c:	4b23      	ldr	r3, [pc, #140]	; (801532c <_dtoa_r+0x2f4>)
 801529e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80152a2:	e6df      	b.n	8015064 <_dtoa_r+0x2c>
 80152a4:	2201      	movs	r2, #1
 80152a6:	e7dd      	b.n	8015264 <_dtoa_r+0x22c>
 80152a8:	2200      	movs	r2, #0
 80152aa:	9208      	str	r2, [sp, #32]
 80152ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80152ae:	eb0b 0a02 	add.w	sl, fp, r2
 80152b2:	f10a 0901 	add.w	r9, sl, #1
 80152b6:	464a      	mov	r2, r9
 80152b8:	2a01      	cmp	r2, #1
 80152ba:	bfb8      	it	lt
 80152bc:	2201      	movlt	r2, #1
 80152be:	e7db      	b.n	8015278 <_dtoa_r+0x240>
 80152c0:	2201      	movs	r2, #1
 80152c2:	e7f2      	b.n	80152aa <_dtoa_r+0x272>
 80152c4:	2401      	movs	r4, #1
 80152c6:	2200      	movs	r2, #0
 80152c8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80152cc:	f04f 3aff 	mov.w	sl, #4294967295
 80152d0:	2100      	movs	r1, #0
 80152d2:	46d1      	mov	r9, sl
 80152d4:	2212      	movs	r2, #18
 80152d6:	9109      	str	r1, [sp, #36]	; 0x24
 80152d8:	e7ce      	b.n	8015278 <_dtoa_r+0x240>
 80152da:	2201      	movs	r2, #1
 80152dc:	9208      	str	r2, [sp, #32]
 80152de:	e7f5      	b.n	80152cc <_dtoa_r+0x294>
 80152e0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80152e4:	46d1      	mov	r9, sl
 80152e6:	4652      	mov	r2, sl
 80152e8:	e7c6      	b.n	8015278 <_dtoa_r+0x240>
 80152ea:	3101      	adds	r1, #1
 80152ec:	6079      	str	r1, [r7, #4]
 80152ee:	0040      	lsls	r0, r0, #1
 80152f0:	e7c6      	b.n	8015280 <_dtoa_r+0x248>
 80152f2:	bf00      	nop
 80152f4:	f3af 8000 	nop.w
 80152f8:	636f4361 	.word	0x636f4361
 80152fc:	3fd287a7 	.word	0x3fd287a7
 8015300:	8b60c8b3 	.word	0x8b60c8b3
 8015304:	3fc68a28 	.word	0x3fc68a28
 8015308:	509f79fb 	.word	0x509f79fb
 801530c:	3fd34413 	.word	0x3fd34413
 8015310:	080185cd 	.word	0x080185cd
 8015314:	080185e4 	.word	0x080185e4
 8015318:	7ff00000 	.word	0x7ff00000
 801531c:	080185c9 	.word	0x080185c9
 8015320:	080185c0 	.word	0x080185c0
 8015324:	0801859d 	.word	0x0801859d
 8015328:	080186e0 	.word	0x080186e0
 801532c:	08018643 	.word	0x08018643
 8015330:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8015332:	9900      	ldr	r1, [sp, #0]
 8015334:	6011      	str	r1, [r2, #0]
 8015336:	f1b9 0f0e 	cmp.w	r9, #14
 801533a:	d872      	bhi.n	8015422 <_dtoa_r+0x3ea>
 801533c:	2c00      	cmp	r4, #0
 801533e:	d070      	beq.n	8015422 <_dtoa_r+0x3ea>
 8015340:	f1bb 0f00 	cmp.w	fp, #0
 8015344:	f340 80a6 	ble.w	8015494 <_dtoa_r+0x45c>
 8015348:	49ca      	ldr	r1, [pc, #808]	; (8015674 <_dtoa_r+0x63c>)
 801534a:	f00b 020f 	and.w	r2, fp, #15
 801534e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8015352:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015356:	ed92 7b00 	vldr	d7, [r2]
 801535a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801535e:	f000 808d 	beq.w	801547c <_dtoa_r+0x444>
 8015362:	4ac5      	ldr	r2, [pc, #788]	; (8015678 <_dtoa_r+0x640>)
 8015364:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8015368:	ed92 6b08 	vldr	d6, [r2, #32]
 801536c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8015370:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015374:	f001 010f 	and.w	r1, r1, #15
 8015378:	2203      	movs	r2, #3
 801537a:	48bf      	ldr	r0, [pc, #764]	; (8015678 <_dtoa_r+0x640>)
 801537c:	2900      	cmp	r1, #0
 801537e:	d17f      	bne.n	8015480 <_dtoa_r+0x448>
 8015380:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015384:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015388:	ed8d 7b02 	vstr	d7, [sp, #8]
 801538c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801538e:	2900      	cmp	r1, #0
 8015390:	f000 80b2 	beq.w	80154f8 <_dtoa_r+0x4c0>
 8015394:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8015398:	ed9d 7b02 	vldr	d7, [sp, #8]
 801539c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80153a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153a4:	f140 80a8 	bpl.w	80154f8 <_dtoa_r+0x4c0>
 80153a8:	f1b9 0f00 	cmp.w	r9, #0
 80153ac:	f000 80a4 	beq.w	80154f8 <_dtoa_r+0x4c0>
 80153b0:	f1ba 0f00 	cmp.w	sl, #0
 80153b4:	dd31      	ble.n	801541a <_dtoa_r+0x3e2>
 80153b6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80153ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80153be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80153c2:	f10b 37ff 	add.w	r7, fp, #4294967295
 80153c6:	3201      	adds	r2, #1
 80153c8:	4650      	mov	r0, sl
 80153ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 80153ce:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80153d2:	ee07 2a90 	vmov	s15, r2
 80153d6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80153da:	eea7 5b06 	vfma.f64	d5, d7, d6
 80153de:	ed8d 5b02 	vstr	d5, [sp, #8]
 80153e2:	9c03      	ldr	r4, [sp, #12]
 80153e4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80153e8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80153ec:	2800      	cmp	r0, #0
 80153ee:	f040 8086 	bne.w	80154fe <_dtoa_r+0x4c6>
 80153f2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80153f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80153fa:	ec42 1b17 	vmov	d7, r1, r2
 80153fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015406:	f300 8272 	bgt.w	80158ee <_dtoa_r+0x8b6>
 801540a:	eeb1 7b47 	vneg.f64	d7, d7
 801540e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015416:	f100 8267 	bmi.w	80158e8 <_dtoa_r+0x8b0>
 801541a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801541e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8015422:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015424:	2a00      	cmp	r2, #0
 8015426:	f2c0 8129 	blt.w	801567c <_dtoa_r+0x644>
 801542a:	f1bb 0f0e 	cmp.w	fp, #14
 801542e:	f300 8125 	bgt.w	801567c <_dtoa_r+0x644>
 8015432:	4b90      	ldr	r3, [pc, #576]	; (8015674 <_dtoa_r+0x63c>)
 8015434:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015438:	ed93 6b00 	vldr	d6, [r3]
 801543c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801543e:	2b00      	cmp	r3, #0
 8015440:	f280 80c3 	bge.w	80155ca <_dtoa_r+0x592>
 8015444:	f1b9 0f00 	cmp.w	r9, #0
 8015448:	f300 80bf 	bgt.w	80155ca <_dtoa_r+0x592>
 801544c:	f040 824c 	bne.w	80158e8 <_dtoa_r+0x8b0>
 8015450:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015454:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015458:	ed9d 7b02 	vldr	d7, [sp, #8]
 801545c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015464:	464c      	mov	r4, r9
 8015466:	464f      	mov	r7, r9
 8015468:	f280 8222 	bge.w	80158b0 <_dtoa_r+0x878>
 801546c:	f8dd 8000 	ldr.w	r8, [sp]
 8015470:	2331      	movs	r3, #49	; 0x31
 8015472:	f808 3b01 	strb.w	r3, [r8], #1
 8015476:	f10b 0b01 	add.w	fp, fp, #1
 801547a:	e21e      	b.n	80158ba <_dtoa_r+0x882>
 801547c:	2202      	movs	r2, #2
 801547e:	e77c      	b.n	801537a <_dtoa_r+0x342>
 8015480:	07cc      	lsls	r4, r1, #31
 8015482:	d504      	bpl.n	801548e <_dtoa_r+0x456>
 8015484:	ed90 6b00 	vldr	d6, [r0]
 8015488:	3201      	adds	r2, #1
 801548a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801548e:	1049      	asrs	r1, r1, #1
 8015490:	3008      	adds	r0, #8
 8015492:	e773      	b.n	801537c <_dtoa_r+0x344>
 8015494:	d02e      	beq.n	80154f4 <_dtoa_r+0x4bc>
 8015496:	f1cb 0100 	rsb	r1, fp, #0
 801549a:	4a76      	ldr	r2, [pc, #472]	; (8015674 <_dtoa_r+0x63c>)
 801549c:	f001 000f 	and.w	r0, r1, #15
 80154a0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80154a4:	ed92 7b00 	vldr	d7, [r2]
 80154a8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80154ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80154b0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80154b4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80154b8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80154bc:	486e      	ldr	r0, [pc, #440]	; (8015678 <_dtoa_r+0x640>)
 80154be:	1109      	asrs	r1, r1, #4
 80154c0:	2400      	movs	r4, #0
 80154c2:	2202      	movs	r2, #2
 80154c4:	b939      	cbnz	r1, 80154d6 <_dtoa_r+0x49e>
 80154c6:	2c00      	cmp	r4, #0
 80154c8:	f43f af60 	beq.w	801538c <_dtoa_r+0x354>
 80154cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80154d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80154d4:	e75a      	b.n	801538c <_dtoa_r+0x354>
 80154d6:	07cf      	lsls	r7, r1, #31
 80154d8:	d509      	bpl.n	80154ee <_dtoa_r+0x4b6>
 80154da:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80154de:	ed90 7b00 	vldr	d7, [r0]
 80154e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80154e6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80154ea:	3201      	adds	r2, #1
 80154ec:	2401      	movs	r4, #1
 80154ee:	1049      	asrs	r1, r1, #1
 80154f0:	3008      	adds	r0, #8
 80154f2:	e7e7      	b.n	80154c4 <_dtoa_r+0x48c>
 80154f4:	2202      	movs	r2, #2
 80154f6:	e749      	b.n	801538c <_dtoa_r+0x354>
 80154f8:	465f      	mov	r7, fp
 80154fa:	4648      	mov	r0, r9
 80154fc:	e765      	b.n	80153ca <_dtoa_r+0x392>
 80154fe:	ec42 1b17 	vmov	d7, r1, r2
 8015502:	4a5c      	ldr	r2, [pc, #368]	; (8015674 <_dtoa_r+0x63c>)
 8015504:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015508:	ed12 4b02 	vldr	d4, [r2, #-8]
 801550c:	9a00      	ldr	r2, [sp, #0]
 801550e:	1814      	adds	r4, r2, r0
 8015510:	9a08      	ldr	r2, [sp, #32]
 8015512:	b352      	cbz	r2, 801556a <_dtoa_r+0x532>
 8015514:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8015518:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801551c:	f8dd 8000 	ldr.w	r8, [sp]
 8015520:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8015524:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015528:	ee35 7b47 	vsub.f64	d7, d5, d7
 801552c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015530:	ee14 2a90 	vmov	r2, s9
 8015534:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015538:	3230      	adds	r2, #48	; 0x30
 801553a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801553e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015546:	f808 2b01 	strb.w	r2, [r8], #1
 801554a:	d439      	bmi.n	80155c0 <_dtoa_r+0x588>
 801554c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8015550:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8015554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015558:	d472      	bmi.n	8015640 <_dtoa_r+0x608>
 801555a:	45a0      	cmp	r8, r4
 801555c:	f43f af5d 	beq.w	801541a <_dtoa_r+0x3e2>
 8015560:	ee27 7b03 	vmul.f64	d7, d7, d3
 8015564:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015568:	e7e0      	b.n	801552c <_dtoa_r+0x4f4>
 801556a:	f8dd 8000 	ldr.w	r8, [sp]
 801556e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015572:	4621      	mov	r1, r4
 8015574:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015578:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801557c:	ee14 2a90 	vmov	r2, s9
 8015580:	3230      	adds	r2, #48	; 0x30
 8015582:	f808 2b01 	strb.w	r2, [r8], #1
 8015586:	45a0      	cmp	r8, r4
 8015588:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801558c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015590:	d118      	bne.n	80155c4 <_dtoa_r+0x58c>
 8015592:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8015596:	ee37 4b05 	vadd.f64	d4, d7, d5
 801559a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801559e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155a2:	dc4d      	bgt.n	8015640 <_dtoa_r+0x608>
 80155a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80155a8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80155ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155b0:	f57f af33 	bpl.w	801541a <_dtoa_r+0x3e2>
 80155b4:	4688      	mov	r8, r1
 80155b6:	3901      	subs	r1, #1
 80155b8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80155bc:	2b30      	cmp	r3, #48	; 0x30
 80155be:	d0f9      	beq.n	80155b4 <_dtoa_r+0x57c>
 80155c0:	46bb      	mov	fp, r7
 80155c2:	e02a      	b.n	801561a <_dtoa_r+0x5e2>
 80155c4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80155c8:	e7d6      	b.n	8015578 <_dtoa_r+0x540>
 80155ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80155ce:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80155d2:	f8dd 8000 	ldr.w	r8, [sp]
 80155d6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80155da:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80155de:	ee15 3a10 	vmov	r3, s10
 80155e2:	3330      	adds	r3, #48	; 0x30
 80155e4:	f808 3b01 	strb.w	r3, [r8], #1
 80155e8:	9b00      	ldr	r3, [sp, #0]
 80155ea:	eba8 0303 	sub.w	r3, r8, r3
 80155ee:	4599      	cmp	r9, r3
 80155f0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80155f4:	eea3 7b46 	vfms.f64	d7, d3, d6
 80155f8:	d133      	bne.n	8015662 <_dtoa_r+0x62a>
 80155fa:	ee37 7b07 	vadd.f64	d7, d7, d7
 80155fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015606:	dc1a      	bgt.n	801563e <_dtoa_r+0x606>
 8015608:	eeb4 7b46 	vcmp.f64	d7, d6
 801560c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015610:	d103      	bne.n	801561a <_dtoa_r+0x5e2>
 8015612:	ee15 3a10 	vmov	r3, s10
 8015616:	07d9      	lsls	r1, r3, #31
 8015618:	d411      	bmi.n	801563e <_dtoa_r+0x606>
 801561a:	4629      	mov	r1, r5
 801561c:	4630      	mov	r0, r6
 801561e:	f000 fad9 	bl	8015bd4 <_Bfree>
 8015622:	2300      	movs	r3, #0
 8015624:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015626:	f888 3000 	strb.w	r3, [r8]
 801562a:	f10b 0301 	add.w	r3, fp, #1
 801562e:	6013      	str	r3, [r2, #0]
 8015630:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015632:	2b00      	cmp	r3, #0
 8015634:	f43f ad4d 	beq.w	80150d2 <_dtoa_r+0x9a>
 8015638:	f8c3 8000 	str.w	r8, [r3]
 801563c:	e549      	b.n	80150d2 <_dtoa_r+0x9a>
 801563e:	465f      	mov	r7, fp
 8015640:	4643      	mov	r3, r8
 8015642:	4698      	mov	r8, r3
 8015644:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015648:	2a39      	cmp	r2, #57	; 0x39
 801564a:	d106      	bne.n	801565a <_dtoa_r+0x622>
 801564c:	9a00      	ldr	r2, [sp, #0]
 801564e:	429a      	cmp	r2, r3
 8015650:	d1f7      	bne.n	8015642 <_dtoa_r+0x60a>
 8015652:	9900      	ldr	r1, [sp, #0]
 8015654:	2230      	movs	r2, #48	; 0x30
 8015656:	3701      	adds	r7, #1
 8015658:	700a      	strb	r2, [r1, #0]
 801565a:	781a      	ldrb	r2, [r3, #0]
 801565c:	3201      	adds	r2, #1
 801565e:	701a      	strb	r2, [r3, #0]
 8015660:	e7ae      	b.n	80155c0 <_dtoa_r+0x588>
 8015662:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015666:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801566a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801566e:	d1b2      	bne.n	80155d6 <_dtoa_r+0x59e>
 8015670:	e7d3      	b.n	801561a <_dtoa_r+0x5e2>
 8015672:	bf00      	nop
 8015674:	080186e0 	.word	0x080186e0
 8015678:	080186b8 	.word	0x080186b8
 801567c:	9908      	ldr	r1, [sp, #32]
 801567e:	2900      	cmp	r1, #0
 8015680:	f000 80d1 	beq.w	8015826 <_dtoa_r+0x7ee>
 8015684:	9907      	ldr	r1, [sp, #28]
 8015686:	2901      	cmp	r1, #1
 8015688:	f300 80b4 	bgt.w	80157f4 <_dtoa_r+0x7bc>
 801568c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801568e:	2900      	cmp	r1, #0
 8015690:	f000 80ac 	beq.w	80157ec <_dtoa_r+0x7b4>
 8015694:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015698:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801569c:	461c      	mov	r4, r3
 801569e:	930a      	str	r3, [sp, #40]	; 0x28
 80156a0:	9b05      	ldr	r3, [sp, #20]
 80156a2:	4413      	add	r3, r2
 80156a4:	9305      	str	r3, [sp, #20]
 80156a6:	9b06      	ldr	r3, [sp, #24]
 80156a8:	2101      	movs	r1, #1
 80156aa:	4413      	add	r3, r2
 80156ac:	4630      	mov	r0, r6
 80156ae:	9306      	str	r3, [sp, #24]
 80156b0:	f000 fb4c 	bl	8015d4c <__i2b>
 80156b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156b6:	4607      	mov	r7, r0
 80156b8:	f1b8 0f00 	cmp.w	r8, #0
 80156bc:	dd0d      	ble.n	80156da <_dtoa_r+0x6a2>
 80156be:	9a06      	ldr	r2, [sp, #24]
 80156c0:	2a00      	cmp	r2, #0
 80156c2:	dd0a      	ble.n	80156da <_dtoa_r+0x6a2>
 80156c4:	4542      	cmp	r2, r8
 80156c6:	9905      	ldr	r1, [sp, #20]
 80156c8:	bfa8      	it	ge
 80156ca:	4642      	movge	r2, r8
 80156cc:	1a89      	subs	r1, r1, r2
 80156ce:	9105      	str	r1, [sp, #20]
 80156d0:	9906      	ldr	r1, [sp, #24]
 80156d2:	eba8 0802 	sub.w	r8, r8, r2
 80156d6:	1a8a      	subs	r2, r1, r2
 80156d8:	9206      	str	r2, [sp, #24]
 80156da:	b303      	cbz	r3, 801571e <_dtoa_r+0x6e6>
 80156dc:	9a08      	ldr	r2, [sp, #32]
 80156de:	2a00      	cmp	r2, #0
 80156e0:	f000 80a6 	beq.w	8015830 <_dtoa_r+0x7f8>
 80156e4:	2c00      	cmp	r4, #0
 80156e6:	dd13      	ble.n	8015710 <_dtoa_r+0x6d8>
 80156e8:	4639      	mov	r1, r7
 80156ea:	4622      	mov	r2, r4
 80156ec:	4630      	mov	r0, r6
 80156ee:	930c      	str	r3, [sp, #48]	; 0x30
 80156f0:	f000 fbe8 	bl	8015ec4 <__pow5mult>
 80156f4:	462a      	mov	r2, r5
 80156f6:	4601      	mov	r1, r0
 80156f8:	4607      	mov	r7, r0
 80156fa:	4630      	mov	r0, r6
 80156fc:	f000 fb3c 	bl	8015d78 <__multiply>
 8015700:	4629      	mov	r1, r5
 8015702:	900a      	str	r0, [sp, #40]	; 0x28
 8015704:	4630      	mov	r0, r6
 8015706:	f000 fa65 	bl	8015bd4 <_Bfree>
 801570a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801570c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801570e:	4615      	mov	r5, r2
 8015710:	1b1a      	subs	r2, r3, r4
 8015712:	d004      	beq.n	801571e <_dtoa_r+0x6e6>
 8015714:	4629      	mov	r1, r5
 8015716:	4630      	mov	r0, r6
 8015718:	f000 fbd4 	bl	8015ec4 <__pow5mult>
 801571c:	4605      	mov	r5, r0
 801571e:	2101      	movs	r1, #1
 8015720:	4630      	mov	r0, r6
 8015722:	f000 fb13 	bl	8015d4c <__i2b>
 8015726:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015728:	2b00      	cmp	r3, #0
 801572a:	4604      	mov	r4, r0
 801572c:	f340 8082 	ble.w	8015834 <_dtoa_r+0x7fc>
 8015730:	461a      	mov	r2, r3
 8015732:	4601      	mov	r1, r0
 8015734:	4630      	mov	r0, r6
 8015736:	f000 fbc5 	bl	8015ec4 <__pow5mult>
 801573a:	9b07      	ldr	r3, [sp, #28]
 801573c:	2b01      	cmp	r3, #1
 801573e:	4604      	mov	r4, r0
 8015740:	dd7b      	ble.n	801583a <_dtoa_r+0x802>
 8015742:	2300      	movs	r3, #0
 8015744:	930a      	str	r3, [sp, #40]	; 0x28
 8015746:	6922      	ldr	r2, [r4, #16]
 8015748:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801574c:	6910      	ldr	r0, [r2, #16]
 801574e:	f000 faad 	bl	8015cac <__hi0bits>
 8015752:	f1c0 0020 	rsb	r0, r0, #32
 8015756:	9b06      	ldr	r3, [sp, #24]
 8015758:	4418      	add	r0, r3
 801575a:	f010 001f 	ands.w	r0, r0, #31
 801575e:	f000 808d 	beq.w	801587c <_dtoa_r+0x844>
 8015762:	f1c0 0220 	rsb	r2, r0, #32
 8015766:	2a04      	cmp	r2, #4
 8015768:	f340 8086 	ble.w	8015878 <_dtoa_r+0x840>
 801576c:	f1c0 001c 	rsb	r0, r0, #28
 8015770:	9b05      	ldr	r3, [sp, #20]
 8015772:	4403      	add	r3, r0
 8015774:	9305      	str	r3, [sp, #20]
 8015776:	9b06      	ldr	r3, [sp, #24]
 8015778:	4403      	add	r3, r0
 801577a:	4480      	add	r8, r0
 801577c:	9306      	str	r3, [sp, #24]
 801577e:	9b05      	ldr	r3, [sp, #20]
 8015780:	2b00      	cmp	r3, #0
 8015782:	dd05      	ble.n	8015790 <_dtoa_r+0x758>
 8015784:	4629      	mov	r1, r5
 8015786:	461a      	mov	r2, r3
 8015788:	4630      	mov	r0, r6
 801578a:	f000 fbf5 	bl	8015f78 <__lshift>
 801578e:	4605      	mov	r5, r0
 8015790:	9b06      	ldr	r3, [sp, #24]
 8015792:	2b00      	cmp	r3, #0
 8015794:	dd05      	ble.n	80157a2 <_dtoa_r+0x76a>
 8015796:	4621      	mov	r1, r4
 8015798:	461a      	mov	r2, r3
 801579a:	4630      	mov	r0, r6
 801579c:	f000 fbec 	bl	8015f78 <__lshift>
 80157a0:	4604      	mov	r4, r0
 80157a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d06b      	beq.n	8015880 <_dtoa_r+0x848>
 80157a8:	4621      	mov	r1, r4
 80157aa:	4628      	mov	r0, r5
 80157ac:	f000 fc50 	bl	8016050 <__mcmp>
 80157b0:	2800      	cmp	r0, #0
 80157b2:	da65      	bge.n	8015880 <_dtoa_r+0x848>
 80157b4:	2300      	movs	r3, #0
 80157b6:	4629      	mov	r1, r5
 80157b8:	220a      	movs	r2, #10
 80157ba:	4630      	mov	r0, r6
 80157bc:	f000 fa2c 	bl	8015c18 <__multadd>
 80157c0:	9b08      	ldr	r3, [sp, #32]
 80157c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80157c6:	4605      	mov	r5, r0
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	f000 8192 	beq.w	8015af2 <_dtoa_r+0xaba>
 80157ce:	4639      	mov	r1, r7
 80157d0:	2300      	movs	r3, #0
 80157d2:	220a      	movs	r2, #10
 80157d4:	4630      	mov	r0, r6
 80157d6:	f000 fa1f 	bl	8015c18 <__multadd>
 80157da:	f1ba 0f00 	cmp.w	sl, #0
 80157de:	4607      	mov	r7, r0
 80157e0:	f300 808e 	bgt.w	8015900 <_dtoa_r+0x8c8>
 80157e4:	9b07      	ldr	r3, [sp, #28]
 80157e6:	2b02      	cmp	r3, #2
 80157e8:	dc51      	bgt.n	801588e <_dtoa_r+0x856>
 80157ea:	e089      	b.n	8015900 <_dtoa_r+0x8c8>
 80157ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80157ee:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80157f2:	e751      	b.n	8015698 <_dtoa_r+0x660>
 80157f4:	f109 34ff 	add.w	r4, r9, #4294967295
 80157f8:	42a3      	cmp	r3, r4
 80157fa:	bfbf      	itttt	lt
 80157fc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80157fe:	1ae3      	sublt	r3, r4, r3
 8015800:	18d2      	addlt	r2, r2, r3
 8015802:	4613      	movlt	r3, r2
 8015804:	bfb7      	itett	lt
 8015806:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015808:	1b1c      	subge	r4, r3, r4
 801580a:	4623      	movlt	r3, r4
 801580c:	2400      	movlt	r4, #0
 801580e:	f1b9 0f00 	cmp.w	r9, #0
 8015812:	bfb5      	itete	lt
 8015814:	9a05      	ldrlt	r2, [sp, #20]
 8015816:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801581a:	eba2 0809 	sublt.w	r8, r2, r9
 801581e:	464a      	movge	r2, r9
 8015820:	bfb8      	it	lt
 8015822:	2200      	movlt	r2, #0
 8015824:	e73b      	b.n	801569e <_dtoa_r+0x666>
 8015826:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801582a:	9f08      	ldr	r7, [sp, #32]
 801582c:	461c      	mov	r4, r3
 801582e:	e743      	b.n	80156b8 <_dtoa_r+0x680>
 8015830:	461a      	mov	r2, r3
 8015832:	e76f      	b.n	8015714 <_dtoa_r+0x6dc>
 8015834:	9b07      	ldr	r3, [sp, #28]
 8015836:	2b01      	cmp	r3, #1
 8015838:	dc18      	bgt.n	801586c <_dtoa_r+0x834>
 801583a:	9b02      	ldr	r3, [sp, #8]
 801583c:	b9b3      	cbnz	r3, 801586c <_dtoa_r+0x834>
 801583e:	9b03      	ldr	r3, [sp, #12]
 8015840:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8015844:	b9a2      	cbnz	r2, 8015870 <_dtoa_r+0x838>
 8015846:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801584a:	0d12      	lsrs	r2, r2, #20
 801584c:	0512      	lsls	r2, r2, #20
 801584e:	b18a      	cbz	r2, 8015874 <_dtoa_r+0x83c>
 8015850:	9b05      	ldr	r3, [sp, #20]
 8015852:	3301      	adds	r3, #1
 8015854:	9305      	str	r3, [sp, #20]
 8015856:	9b06      	ldr	r3, [sp, #24]
 8015858:	3301      	adds	r3, #1
 801585a:	9306      	str	r3, [sp, #24]
 801585c:	2301      	movs	r3, #1
 801585e:	930a      	str	r3, [sp, #40]	; 0x28
 8015860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015862:	2b00      	cmp	r3, #0
 8015864:	f47f af6f 	bne.w	8015746 <_dtoa_r+0x70e>
 8015868:	2001      	movs	r0, #1
 801586a:	e774      	b.n	8015756 <_dtoa_r+0x71e>
 801586c:	2300      	movs	r3, #0
 801586e:	e7f6      	b.n	801585e <_dtoa_r+0x826>
 8015870:	9b02      	ldr	r3, [sp, #8]
 8015872:	e7f4      	b.n	801585e <_dtoa_r+0x826>
 8015874:	920a      	str	r2, [sp, #40]	; 0x28
 8015876:	e7f3      	b.n	8015860 <_dtoa_r+0x828>
 8015878:	d081      	beq.n	801577e <_dtoa_r+0x746>
 801587a:	4610      	mov	r0, r2
 801587c:	301c      	adds	r0, #28
 801587e:	e777      	b.n	8015770 <_dtoa_r+0x738>
 8015880:	f1b9 0f00 	cmp.w	r9, #0
 8015884:	dc37      	bgt.n	80158f6 <_dtoa_r+0x8be>
 8015886:	9b07      	ldr	r3, [sp, #28]
 8015888:	2b02      	cmp	r3, #2
 801588a:	dd34      	ble.n	80158f6 <_dtoa_r+0x8be>
 801588c:	46ca      	mov	sl, r9
 801588e:	f1ba 0f00 	cmp.w	sl, #0
 8015892:	d10d      	bne.n	80158b0 <_dtoa_r+0x878>
 8015894:	4621      	mov	r1, r4
 8015896:	4653      	mov	r3, sl
 8015898:	2205      	movs	r2, #5
 801589a:	4630      	mov	r0, r6
 801589c:	f000 f9bc 	bl	8015c18 <__multadd>
 80158a0:	4601      	mov	r1, r0
 80158a2:	4604      	mov	r4, r0
 80158a4:	4628      	mov	r0, r5
 80158a6:	f000 fbd3 	bl	8016050 <__mcmp>
 80158aa:	2800      	cmp	r0, #0
 80158ac:	f73f adde 	bgt.w	801546c <_dtoa_r+0x434>
 80158b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80158b2:	f8dd 8000 	ldr.w	r8, [sp]
 80158b6:	ea6f 0b03 	mvn.w	fp, r3
 80158ba:	f04f 0900 	mov.w	r9, #0
 80158be:	4621      	mov	r1, r4
 80158c0:	4630      	mov	r0, r6
 80158c2:	f000 f987 	bl	8015bd4 <_Bfree>
 80158c6:	2f00      	cmp	r7, #0
 80158c8:	f43f aea7 	beq.w	801561a <_dtoa_r+0x5e2>
 80158cc:	f1b9 0f00 	cmp.w	r9, #0
 80158d0:	d005      	beq.n	80158de <_dtoa_r+0x8a6>
 80158d2:	45b9      	cmp	r9, r7
 80158d4:	d003      	beq.n	80158de <_dtoa_r+0x8a6>
 80158d6:	4649      	mov	r1, r9
 80158d8:	4630      	mov	r0, r6
 80158da:	f000 f97b 	bl	8015bd4 <_Bfree>
 80158de:	4639      	mov	r1, r7
 80158e0:	4630      	mov	r0, r6
 80158e2:	f000 f977 	bl	8015bd4 <_Bfree>
 80158e6:	e698      	b.n	801561a <_dtoa_r+0x5e2>
 80158e8:	2400      	movs	r4, #0
 80158ea:	4627      	mov	r7, r4
 80158ec:	e7e0      	b.n	80158b0 <_dtoa_r+0x878>
 80158ee:	46bb      	mov	fp, r7
 80158f0:	4604      	mov	r4, r0
 80158f2:	4607      	mov	r7, r0
 80158f4:	e5ba      	b.n	801546c <_dtoa_r+0x434>
 80158f6:	9b08      	ldr	r3, [sp, #32]
 80158f8:	46ca      	mov	sl, r9
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	f000 8100 	beq.w	8015b00 <_dtoa_r+0xac8>
 8015900:	f1b8 0f00 	cmp.w	r8, #0
 8015904:	dd05      	ble.n	8015912 <_dtoa_r+0x8da>
 8015906:	4639      	mov	r1, r7
 8015908:	4642      	mov	r2, r8
 801590a:	4630      	mov	r0, r6
 801590c:	f000 fb34 	bl	8015f78 <__lshift>
 8015910:	4607      	mov	r7, r0
 8015912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015914:	2b00      	cmp	r3, #0
 8015916:	d05d      	beq.n	80159d4 <_dtoa_r+0x99c>
 8015918:	6879      	ldr	r1, [r7, #4]
 801591a:	4630      	mov	r0, r6
 801591c:	f000 f91a 	bl	8015b54 <_Balloc>
 8015920:	4680      	mov	r8, r0
 8015922:	b928      	cbnz	r0, 8015930 <_dtoa_r+0x8f8>
 8015924:	4b82      	ldr	r3, [pc, #520]	; (8015b30 <_dtoa_r+0xaf8>)
 8015926:	4602      	mov	r2, r0
 8015928:	f240 21ea 	movw	r1, #746	; 0x2ea
 801592c:	f7ff bb9a 	b.w	8015064 <_dtoa_r+0x2c>
 8015930:	693a      	ldr	r2, [r7, #16]
 8015932:	3202      	adds	r2, #2
 8015934:	0092      	lsls	r2, r2, #2
 8015936:	f107 010c 	add.w	r1, r7, #12
 801593a:	300c      	adds	r0, #12
 801593c:	f7fe fe96 	bl	801466c <memcpy>
 8015940:	2201      	movs	r2, #1
 8015942:	4641      	mov	r1, r8
 8015944:	4630      	mov	r0, r6
 8015946:	f000 fb17 	bl	8015f78 <__lshift>
 801594a:	9b00      	ldr	r3, [sp, #0]
 801594c:	3301      	adds	r3, #1
 801594e:	9305      	str	r3, [sp, #20]
 8015950:	9b00      	ldr	r3, [sp, #0]
 8015952:	4453      	add	r3, sl
 8015954:	9309      	str	r3, [sp, #36]	; 0x24
 8015956:	9b02      	ldr	r3, [sp, #8]
 8015958:	f003 0301 	and.w	r3, r3, #1
 801595c:	46b9      	mov	r9, r7
 801595e:	9308      	str	r3, [sp, #32]
 8015960:	4607      	mov	r7, r0
 8015962:	9b05      	ldr	r3, [sp, #20]
 8015964:	4621      	mov	r1, r4
 8015966:	3b01      	subs	r3, #1
 8015968:	4628      	mov	r0, r5
 801596a:	9302      	str	r3, [sp, #8]
 801596c:	f7ff fad6 	bl	8014f1c <quorem>
 8015970:	4603      	mov	r3, r0
 8015972:	3330      	adds	r3, #48	; 0x30
 8015974:	9006      	str	r0, [sp, #24]
 8015976:	4649      	mov	r1, r9
 8015978:	4628      	mov	r0, r5
 801597a:	930a      	str	r3, [sp, #40]	; 0x28
 801597c:	f000 fb68 	bl	8016050 <__mcmp>
 8015980:	463a      	mov	r2, r7
 8015982:	4682      	mov	sl, r0
 8015984:	4621      	mov	r1, r4
 8015986:	4630      	mov	r0, r6
 8015988:	f000 fb7e 	bl	8016088 <__mdiff>
 801598c:	68c2      	ldr	r2, [r0, #12]
 801598e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015990:	4680      	mov	r8, r0
 8015992:	bb0a      	cbnz	r2, 80159d8 <_dtoa_r+0x9a0>
 8015994:	4601      	mov	r1, r0
 8015996:	4628      	mov	r0, r5
 8015998:	f000 fb5a 	bl	8016050 <__mcmp>
 801599c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801599e:	4602      	mov	r2, r0
 80159a0:	4641      	mov	r1, r8
 80159a2:	4630      	mov	r0, r6
 80159a4:	920e      	str	r2, [sp, #56]	; 0x38
 80159a6:	930a      	str	r3, [sp, #40]	; 0x28
 80159a8:	f000 f914 	bl	8015bd4 <_Bfree>
 80159ac:	9b07      	ldr	r3, [sp, #28]
 80159ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80159b0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80159b4:	ea43 0102 	orr.w	r1, r3, r2
 80159b8:	9b08      	ldr	r3, [sp, #32]
 80159ba:	430b      	orrs	r3, r1
 80159bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80159be:	d10d      	bne.n	80159dc <_dtoa_r+0x9a4>
 80159c0:	2b39      	cmp	r3, #57	; 0x39
 80159c2:	d029      	beq.n	8015a18 <_dtoa_r+0x9e0>
 80159c4:	f1ba 0f00 	cmp.w	sl, #0
 80159c8:	dd01      	ble.n	80159ce <_dtoa_r+0x996>
 80159ca:	9b06      	ldr	r3, [sp, #24]
 80159cc:	3331      	adds	r3, #49	; 0x31
 80159ce:	9a02      	ldr	r2, [sp, #8]
 80159d0:	7013      	strb	r3, [r2, #0]
 80159d2:	e774      	b.n	80158be <_dtoa_r+0x886>
 80159d4:	4638      	mov	r0, r7
 80159d6:	e7b8      	b.n	801594a <_dtoa_r+0x912>
 80159d8:	2201      	movs	r2, #1
 80159da:	e7e1      	b.n	80159a0 <_dtoa_r+0x968>
 80159dc:	f1ba 0f00 	cmp.w	sl, #0
 80159e0:	db06      	blt.n	80159f0 <_dtoa_r+0x9b8>
 80159e2:	9907      	ldr	r1, [sp, #28]
 80159e4:	ea41 0a0a 	orr.w	sl, r1, sl
 80159e8:	9908      	ldr	r1, [sp, #32]
 80159ea:	ea5a 0101 	orrs.w	r1, sl, r1
 80159ee:	d120      	bne.n	8015a32 <_dtoa_r+0x9fa>
 80159f0:	2a00      	cmp	r2, #0
 80159f2:	ddec      	ble.n	80159ce <_dtoa_r+0x996>
 80159f4:	4629      	mov	r1, r5
 80159f6:	2201      	movs	r2, #1
 80159f8:	4630      	mov	r0, r6
 80159fa:	9305      	str	r3, [sp, #20]
 80159fc:	f000 fabc 	bl	8015f78 <__lshift>
 8015a00:	4621      	mov	r1, r4
 8015a02:	4605      	mov	r5, r0
 8015a04:	f000 fb24 	bl	8016050 <__mcmp>
 8015a08:	2800      	cmp	r0, #0
 8015a0a:	9b05      	ldr	r3, [sp, #20]
 8015a0c:	dc02      	bgt.n	8015a14 <_dtoa_r+0x9dc>
 8015a0e:	d1de      	bne.n	80159ce <_dtoa_r+0x996>
 8015a10:	07da      	lsls	r2, r3, #31
 8015a12:	d5dc      	bpl.n	80159ce <_dtoa_r+0x996>
 8015a14:	2b39      	cmp	r3, #57	; 0x39
 8015a16:	d1d8      	bne.n	80159ca <_dtoa_r+0x992>
 8015a18:	9a02      	ldr	r2, [sp, #8]
 8015a1a:	2339      	movs	r3, #57	; 0x39
 8015a1c:	7013      	strb	r3, [r2, #0]
 8015a1e:	4643      	mov	r3, r8
 8015a20:	4698      	mov	r8, r3
 8015a22:	3b01      	subs	r3, #1
 8015a24:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8015a28:	2a39      	cmp	r2, #57	; 0x39
 8015a2a:	d051      	beq.n	8015ad0 <_dtoa_r+0xa98>
 8015a2c:	3201      	adds	r2, #1
 8015a2e:	701a      	strb	r2, [r3, #0]
 8015a30:	e745      	b.n	80158be <_dtoa_r+0x886>
 8015a32:	2a00      	cmp	r2, #0
 8015a34:	dd03      	ble.n	8015a3e <_dtoa_r+0xa06>
 8015a36:	2b39      	cmp	r3, #57	; 0x39
 8015a38:	d0ee      	beq.n	8015a18 <_dtoa_r+0x9e0>
 8015a3a:	3301      	adds	r3, #1
 8015a3c:	e7c7      	b.n	80159ce <_dtoa_r+0x996>
 8015a3e:	9a05      	ldr	r2, [sp, #20]
 8015a40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015a42:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015a46:	428a      	cmp	r2, r1
 8015a48:	d02b      	beq.n	8015aa2 <_dtoa_r+0xa6a>
 8015a4a:	4629      	mov	r1, r5
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	220a      	movs	r2, #10
 8015a50:	4630      	mov	r0, r6
 8015a52:	f000 f8e1 	bl	8015c18 <__multadd>
 8015a56:	45b9      	cmp	r9, r7
 8015a58:	4605      	mov	r5, r0
 8015a5a:	f04f 0300 	mov.w	r3, #0
 8015a5e:	f04f 020a 	mov.w	r2, #10
 8015a62:	4649      	mov	r1, r9
 8015a64:	4630      	mov	r0, r6
 8015a66:	d107      	bne.n	8015a78 <_dtoa_r+0xa40>
 8015a68:	f000 f8d6 	bl	8015c18 <__multadd>
 8015a6c:	4681      	mov	r9, r0
 8015a6e:	4607      	mov	r7, r0
 8015a70:	9b05      	ldr	r3, [sp, #20]
 8015a72:	3301      	adds	r3, #1
 8015a74:	9305      	str	r3, [sp, #20]
 8015a76:	e774      	b.n	8015962 <_dtoa_r+0x92a>
 8015a78:	f000 f8ce 	bl	8015c18 <__multadd>
 8015a7c:	4639      	mov	r1, r7
 8015a7e:	4681      	mov	r9, r0
 8015a80:	2300      	movs	r3, #0
 8015a82:	220a      	movs	r2, #10
 8015a84:	4630      	mov	r0, r6
 8015a86:	f000 f8c7 	bl	8015c18 <__multadd>
 8015a8a:	4607      	mov	r7, r0
 8015a8c:	e7f0      	b.n	8015a70 <_dtoa_r+0xa38>
 8015a8e:	f1ba 0f00 	cmp.w	sl, #0
 8015a92:	9a00      	ldr	r2, [sp, #0]
 8015a94:	bfcc      	ite	gt
 8015a96:	46d0      	movgt	r8, sl
 8015a98:	f04f 0801 	movle.w	r8, #1
 8015a9c:	4490      	add	r8, r2
 8015a9e:	f04f 0900 	mov.w	r9, #0
 8015aa2:	4629      	mov	r1, r5
 8015aa4:	2201      	movs	r2, #1
 8015aa6:	4630      	mov	r0, r6
 8015aa8:	9302      	str	r3, [sp, #8]
 8015aaa:	f000 fa65 	bl	8015f78 <__lshift>
 8015aae:	4621      	mov	r1, r4
 8015ab0:	4605      	mov	r5, r0
 8015ab2:	f000 facd 	bl	8016050 <__mcmp>
 8015ab6:	2800      	cmp	r0, #0
 8015ab8:	dcb1      	bgt.n	8015a1e <_dtoa_r+0x9e6>
 8015aba:	d102      	bne.n	8015ac2 <_dtoa_r+0xa8a>
 8015abc:	9b02      	ldr	r3, [sp, #8]
 8015abe:	07db      	lsls	r3, r3, #31
 8015ac0:	d4ad      	bmi.n	8015a1e <_dtoa_r+0x9e6>
 8015ac2:	4643      	mov	r3, r8
 8015ac4:	4698      	mov	r8, r3
 8015ac6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015aca:	2a30      	cmp	r2, #48	; 0x30
 8015acc:	d0fa      	beq.n	8015ac4 <_dtoa_r+0xa8c>
 8015ace:	e6f6      	b.n	80158be <_dtoa_r+0x886>
 8015ad0:	9a00      	ldr	r2, [sp, #0]
 8015ad2:	429a      	cmp	r2, r3
 8015ad4:	d1a4      	bne.n	8015a20 <_dtoa_r+0x9e8>
 8015ad6:	f10b 0b01 	add.w	fp, fp, #1
 8015ada:	2331      	movs	r3, #49	; 0x31
 8015adc:	e778      	b.n	80159d0 <_dtoa_r+0x998>
 8015ade:	4b15      	ldr	r3, [pc, #84]	; (8015b34 <_dtoa_r+0xafc>)
 8015ae0:	f7ff bb12 	b.w	8015108 <_dtoa_r+0xd0>
 8015ae4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	f47f aaee 	bne.w	80150c8 <_dtoa_r+0x90>
 8015aec:	4b12      	ldr	r3, [pc, #72]	; (8015b38 <_dtoa_r+0xb00>)
 8015aee:	f7ff bb0b 	b.w	8015108 <_dtoa_r+0xd0>
 8015af2:	f1ba 0f00 	cmp.w	sl, #0
 8015af6:	dc03      	bgt.n	8015b00 <_dtoa_r+0xac8>
 8015af8:	9b07      	ldr	r3, [sp, #28]
 8015afa:	2b02      	cmp	r3, #2
 8015afc:	f73f aec7 	bgt.w	801588e <_dtoa_r+0x856>
 8015b00:	f8dd 8000 	ldr.w	r8, [sp]
 8015b04:	4621      	mov	r1, r4
 8015b06:	4628      	mov	r0, r5
 8015b08:	f7ff fa08 	bl	8014f1c <quorem>
 8015b0c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8015b10:	f808 3b01 	strb.w	r3, [r8], #1
 8015b14:	9a00      	ldr	r2, [sp, #0]
 8015b16:	eba8 0202 	sub.w	r2, r8, r2
 8015b1a:	4592      	cmp	sl, r2
 8015b1c:	ddb7      	ble.n	8015a8e <_dtoa_r+0xa56>
 8015b1e:	4629      	mov	r1, r5
 8015b20:	2300      	movs	r3, #0
 8015b22:	220a      	movs	r2, #10
 8015b24:	4630      	mov	r0, r6
 8015b26:	f000 f877 	bl	8015c18 <__multadd>
 8015b2a:	4605      	mov	r5, r0
 8015b2c:	e7ea      	b.n	8015b04 <_dtoa_r+0xacc>
 8015b2e:	bf00      	nop
 8015b30:	08018643 	.word	0x08018643
 8015b34:	0801859c 	.word	0x0801859c
 8015b38:	080185c0 	.word	0x080185c0

08015b3c <_localeconv_r>:
 8015b3c:	4800      	ldr	r0, [pc, #0]	; (8015b40 <_localeconv_r+0x4>)
 8015b3e:	4770      	bx	lr
 8015b40:	240001b4 	.word	0x240001b4

08015b44 <malloc>:
 8015b44:	4b02      	ldr	r3, [pc, #8]	; (8015b50 <malloc+0xc>)
 8015b46:	4601      	mov	r1, r0
 8015b48:	6818      	ldr	r0, [r3, #0]
 8015b4a:	f000 bbe1 	b.w	8016310 <_malloc_r>
 8015b4e:	bf00      	nop
 8015b50:	24000060 	.word	0x24000060

08015b54 <_Balloc>:
 8015b54:	b570      	push	{r4, r5, r6, lr}
 8015b56:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015b58:	4604      	mov	r4, r0
 8015b5a:	460d      	mov	r5, r1
 8015b5c:	b976      	cbnz	r6, 8015b7c <_Balloc+0x28>
 8015b5e:	2010      	movs	r0, #16
 8015b60:	f7ff fff0 	bl	8015b44 <malloc>
 8015b64:	4602      	mov	r2, r0
 8015b66:	6260      	str	r0, [r4, #36]	; 0x24
 8015b68:	b920      	cbnz	r0, 8015b74 <_Balloc+0x20>
 8015b6a:	4b18      	ldr	r3, [pc, #96]	; (8015bcc <_Balloc+0x78>)
 8015b6c:	4818      	ldr	r0, [pc, #96]	; (8015bd0 <_Balloc+0x7c>)
 8015b6e:	2166      	movs	r1, #102	; 0x66
 8015b70:	f000 fc38 	bl	80163e4 <__assert_func>
 8015b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015b78:	6006      	str	r6, [r0, #0]
 8015b7a:	60c6      	str	r6, [r0, #12]
 8015b7c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015b7e:	68f3      	ldr	r3, [r6, #12]
 8015b80:	b183      	cbz	r3, 8015ba4 <_Balloc+0x50>
 8015b82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015b84:	68db      	ldr	r3, [r3, #12]
 8015b86:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015b8a:	b9b8      	cbnz	r0, 8015bbc <_Balloc+0x68>
 8015b8c:	2101      	movs	r1, #1
 8015b8e:	fa01 f605 	lsl.w	r6, r1, r5
 8015b92:	1d72      	adds	r2, r6, #5
 8015b94:	0092      	lsls	r2, r2, #2
 8015b96:	4620      	mov	r0, r4
 8015b98:	f000 fb5a 	bl	8016250 <_calloc_r>
 8015b9c:	b160      	cbz	r0, 8015bb8 <_Balloc+0x64>
 8015b9e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015ba2:	e00e      	b.n	8015bc2 <_Balloc+0x6e>
 8015ba4:	2221      	movs	r2, #33	; 0x21
 8015ba6:	2104      	movs	r1, #4
 8015ba8:	4620      	mov	r0, r4
 8015baa:	f000 fb51 	bl	8016250 <_calloc_r>
 8015bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015bb0:	60f0      	str	r0, [r6, #12]
 8015bb2:	68db      	ldr	r3, [r3, #12]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d1e4      	bne.n	8015b82 <_Balloc+0x2e>
 8015bb8:	2000      	movs	r0, #0
 8015bba:	bd70      	pop	{r4, r5, r6, pc}
 8015bbc:	6802      	ldr	r2, [r0, #0]
 8015bbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015bc8:	e7f7      	b.n	8015bba <_Balloc+0x66>
 8015bca:	bf00      	nop
 8015bcc:	080185cd 	.word	0x080185cd
 8015bd0:	08018654 	.word	0x08018654

08015bd4 <_Bfree>:
 8015bd4:	b570      	push	{r4, r5, r6, lr}
 8015bd6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015bd8:	4605      	mov	r5, r0
 8015bda:	460c      	mov	r4, r1
 8015bdc:	b976      	cbnz	r6, 8015bfc <_Bfree+0x28>
 8015bde:	2010      	movs	r0, #16
 8015be0:	f7ff ffb0 	bl	8015b44 <malloc>
 8015be4:	4602      	mov	r2, r0
 8015be6:	6268      	str	r0, [r5, #36]	; 0x24
 8015be8:	b920      	cbnz	r0, 8015bf4 <_Bfree+0x20>
 8015bea:	4b09      	ldr	r3, [pc, #36]	; (8015c10 <_Bfree+0x3c>)
 8015bec:	4809      	ldr	r0, [pc, #36]	; (8015c14 <_Bfree+0x40>)
 8015bee:	218a      	movs	r1, #138	; 0x8a
 8015bf0:	f000 fbf8 	bl	80163e4 <__assert_func>
 8015bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015bf8:	6006      	str	r6, [r0, #0]
 8015bfa:	60c6      	str	r6, [r0, #12]
 8015bfc:	b13c      	cbz	r4, 8015c0e <_Bfree+0x3a>
 8015bfe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015c00:	6862      	ldr	r2, [r4, #4]
 8015c02:	68db      	ldr	r3, [r3, #12]
 8015c04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015c08:	6021      	str	r1, [r4, #0]
 8015c0a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015c0e:	bd70      	pop	{r4, r5, r6, pc}
 8015c10:	080185cd 	.word	0x080185cd
 8015c14:	08018654 	.word	0x08018654

08015c18 <__multadd>:
 8015c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c1c:	690e      	ldr	r6, [r1, #16]
 8015c1e:	4607      	mov	r7, r0
 8015c20:	4698      	mov	r8, r3
 8015c22:	460c      	mov	r4, r1
 8015c24:	f101 0014 	add.w	r0, r1, #20
 8015c28:	2300      	movs	r3, #0
 8015c2a:	6805      	ldr	r5, [r0, #0]
 8015c2c:	b2a9      	uxth	r1, r5
 8015c2e:	fb02 8101 	mla	r1, r2, r1, r8
 8015c32:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8015c36:	0c2d      	lsrs	r5, r5, #16
 8015c38:	fb02 c505 	mla	r5, r2, r5, ip
 8015c3c:	b289      	uxth	r1, r1
 8015c3e:	3301      	adds	r3, #1
 8015c40:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8015c44:	429e      	cmp	r6, r3
 8015c46:	f840 1b04 	str.w	r1, [r0], #4
 8015c4a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8015c4e:	dcec      	bgt.n	8015c2a <__multadd+0x12>
 8015c50:	f1b8 0f00 	cmp.w	r8, #0
 8015c54:	d022      	beq.n	8015c9c <__multadd+0x84>
 8015c56:	68a3      	ldr	r3, [r4, #8]
 8015c58:	42b3      	cmp	r3, r6
 8015c5a:	dc19      	bgt.n	8015c90 <__multadd+0x78>
 8015c5c:	6861      	ldr	r1, [r4, #4]
 8015c5e:	4638      	mov	r0, r7
 8015c60:	3101      	adds	r1, #1
 8015c62:	f7ff ff77 	bl	8015b54 <_Balloc>
 8015c66:	4605      	mov	r5, r0
 8015c68:	b928      	cbnz	r0, 8015c76 <__multadd+0x5e>
 8015c6a:	4602      	mov	r2, r0
 8015c6c:	4b0d      	ldr	r3, [pc, #52]	; (8015ca4 <__multadd+0x8c>)
 8015c6e:	480e      	ldr	r0, [pc, #56]	; (8015ca8 <__multadd+0x90>)
 8015c70:	21b5      	movs	r1, #181	; 0xb5
 8015c72:	f000 fbb7 	bl	80163e4 <__assert_func>
 8015c76:	6922      	ldr	r2, [r4, #16]
 8015c78:	3202      	adds	r2, #2
 8015c7a:	f104 010c 	add.w	r1, r4, #12
 8015c7e:	0092      	lsls	r2, r2, #2
 8015c80:	300c      	adds	r0, #12
 8015c82:	f7fe fcf3 	bl	801466c <memcpy>
 8015c86:	4621      	mov	r1, r4
 8015c88:	4638      	mov	r0, r7
 8015c8a:	f7ff ffa3 	bl	8015bd4 <_Bfree>
 8015c8e:	462c      	mov	r4, r5
 8015c90:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8015c94:	3601      	adds	r6, #1
 8015c96:	f8c3 8014 	str.w	r8, [r3, #20]
 8015c9a:	6126      	str	r6, [r4, #16]
 8015c9c:	4620      	mov	r0, r4
 8015c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015ca2:	bf00      	nop
 8015ca4:	08018643 	.word	0x08018643
 8015ca8:	08018654 	.word	0x08018654

08015cac <__hi0bits>:
 8015cac:	0c03      	lsrs	r3, r0, #16
 8015cae:	041b      	lsls	r3, r3, #16
 8015cb0:	b9d3      	cbnz	r3, 8015ce8 <__hi0bits+0x3c>
 8015cb2:	0400      	lsls	r0, r0, #16
 8015cb4:	2310      	movs	r3, #16
 8015cb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015cba:	bf04      	itt	eq
 8015cbc:	0200      	lsleq	r0, r0, #8
 8015cbe:	3308      	addeq	r3, #8
 8015cc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015cc4:	bf04      	itt	eq
 8015cc6:	0100      	lsleq	r0, r0, #4
 8015cc8:	3304      	addeq	r3, #4
 8015cca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015cce:	bf04      	itt	eq
 8015cd0:	0080      	lsleq	r0, r0, #2
 8015cd2:	3302      	addeq	r3, #2
 8015cd4:	2800      	cmp	r0, #0
 8015cd6:	db05      	blt.n	8015ce4 <__hi0bits+0x38>
 8015cd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015cdc:	f103 0301 	add.w	r3, r3, #1
 8015ce0:	bf08      	it	eq
 8015ce2:	2320      	moveq	r3, #32
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	4770      	bx	lr
 8015ce8:	2300      	movs	r3, #0
 8015cea:	e7e4      	b.n	8015cb6 <__hi0bits+0xa>

08015cec <__lo0bits>:
 8015cec:	6803      	ldr	r3, [r0, #0]
 8015cee:	f013 0207 	ands.w	r2, r3, #7
 8015cf2:	4601      	mov	r1, r0
 8015cf4:	d00b      	beq.n	8015d0e <__lo0bits+0x22>
 8015cf6:	07da      	lsls	r2, r3, #31
 8015cf8:	d424      	bmi.n	8015d44 <__lo0bits+0x58>
 8015cfa:	0798      	lsls	r0, r3, #30
 8015cfc:	bf49      	itett	mi
 8015cfe:	085b      	lsrmi	r3, r3, #1
 8015d00:	089b      	lsrpl	r3, r3, #2
 8015d02:	2001      	movmi	r0, #1
 8015d04:	600b      	strmi	r3, [r1, #0]
 8015d06:	bf5c      	itt	pl
 8015d08:	600b      	strpl	r3, [r1, #0]
 8015d0a:	2002      	movpl	r0, #2
 8015d0c:	4770      	bx	lr
 8015d0e:	b298      	uxth	r0, r3
 8015d10:	b9b0      	cbnz	r0, 8015d40 <__lo0bits+0x54>
 8015d12:	0c1b      	lsrs	r3, r3, #16
 8015d14:	2010      	movs	r0, #16
 8015d16:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015d1a:	bf04      	itt	eq
 8015d1c:	0a1b      	lsreq	r3, r3, #8
 8015d1e:	3008      	addeq	r0, #8
 8015d20:	071a      	lsls	r2, r3, #28
 8015d22:	bf04      	itt	eq
 8015d24:	091b      	lsreq	r3, r3, #4
 8015d26:	3004      	addeq	r0, #4
 8015d28:	079a      	lsls	r2, r3, #30
 8015d2a:	bf04      	itt	eq
 8015d2c:	089b      	lsreq	r3, r3, #2
 8015d2e:	3002      	addeq	r0, #2
 8015d30:	07da      	lsls	r2, r3, #31
 8015d32:	d403      	bmi.n	8015d3c <__lo0bits+0x50>
 8015d34:	085b      	lsrs	r3, r3, #1
 8015d36:	f100 0001 	add.w	r0, r0, #1
 8015d3a:	d005      	beq.n	8015d48 <__lo0bits+0x5c>
 8015d3c:	600b      	str	r3, [r1, #0]
 8015d3e:	4770      	bx	lr
 8015d40:	4610      	mov	r0, r2
 8015d42:	e7e8      	b.n	8015d16 <__lo0bits+0x2a>
 8015d44:	2000      	movs	r0, #0
 8015d46:	4770      	bx	lr
 8015d48:	2020      	movs	r0, #32
 8015d4a:	4770      	bx	lr

08015d4c <__i2b>:
 8015d4c:	b510      	push	{r4, lr}
 8015d4e:	460c      	mov	r4, r1
 8015d50:	2101      	movs	r1, #1
 8015d52:	f7ff feff 	bl	8015b54 <_Balloc>
 8015d56:	4602      	mov	r2, r0
 8015d58:	b928      	cbnz	r0, 8015d66 <__i2b+0x1a>
 8015d5a:	4b05      	ldr	r3, [pc, #20]	; (8015d70 <__i2b+0x24>)
 8015d5c:	4805      	ldr	r0, [pc, #20]	; (8015d74 <__i2b+0x28>)
 8015d5e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015d62:	f000 fb3f 	bl	80163e4 <__assert_func>
 8015d66:	2301      	movs	r3, #1
 8015d68:	6144      	str	r4, [r0, #20]
 8015d6a:	6103      	str	r3, [r0, #16]
 8015d6c:	bd10      	pop	{r4, pc}
 8015d6e:	bf00      	nop
 8015d70:	08018643 	.word	0x08018643
 8015d74:	08018654 	.word	0x08018654

08015d78 <__multiply>:
 8015d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d7c:	4614      	mov	r4, r2
 8015d7e:	690a      	ldr	r2, [r1, #16]
 8015d80:	6923      	ldr	r3, [r4, #16]
 8015d82:	429a      	cmp	r2, r3
 8015d84:	bfb8      	it	lt
 8015d86:	460b      	movlt	r3, r1
 8015d88:	460d      	mov	r5, r1
 8015d8a:	bfbc      	itt	lt
 8015d8c:	4625      	movlt	r5, r4
 8015d8e:	461c      	movlt	r4, r3
 8015d90:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8015d94:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015d98:	68ab      	ldr	r3, [r5, #8]
 8015d9a:	6869      	ldr	r1, [r5, #4]
 8015d9c:	eb0a 0709 	add.w	r7, sl, r9
 8015da0:	42bb      	cmp	r3, r7
 8015da2:	b085      	sub	sp, #20
 8015da4:	bfb8      	it	lt
 8015da6:	3101      	addlt	r1, #1
 8015da8:	f7ff fed4 	bl	8015b54 <_Balloc>
 8015dac:	b930      	cbnz	r0, 8015dbc <__multiply+0x44>
 8015dae:	4602      	mov	r2, r0
 8015db0:	4b42      	ldr	r3, [pc, #264]	; (8015ebc <__multiply+0x144>)
 8015db2:	4843      	ldr	r0, [pc, #268]	; (8015ec0 <__multiply+0x148>)
 8015db4:	f240 115d 	movw	r1, #349	; 0x15d
 8015db8:	f000 fb14 	bl	80163e4 <__assert_func>
 8015dbc:	f100 0614 	add.w	r6, r0, #20
 8015dc0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8015dc4:	4633      	mov	r3, r6
 8015dc6:	2200      	movs	r2, #0
 8015dc8:	4543      	cmp	r3, r8
 8015dca:	d31e      	bcc.n	8015e0a <__multiply+0x92>
 8015dcc:	f105 0c14 	add.w	ip, r5, #20
 8015dd0:	f104 0314 	add.w	r3, r4, #20
 8015dd4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8015dd8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8015ddc:	9202      	str	r2, [sp, #8]
 8015dde:	ebac 0205 	sub.w	r2, ip, r5
 8015de2:	3a15      	subs	r2, #21
 8015de4:	f022 0203 	bic.w	r2, r2, #3
 8015de8:	3204      	adds	r2, #4
 8015dea:	f105 0115 	add.w	r1, r5, #21
 8015dee:	458c      	cmp	ip, r1
 8015df0:	bf38      	it	cc
 8015df2:	2204      	movcc	r2, #4
 8015df4:	9201      	str	r2, [sp, #4]
 8015df6:	9a02      	ldr	r2, [sp, #8]
 8015df8:	9303      	str	r3, [sp, #12]
 8015dfa:	429a      	cmp	r2, r3
 8015dfc:	d808      	bhi.n	8015e10 <__multiply+0x98>
 8015dfe:	2f00      	cmp	r7, #0
 8015e00:	dc55      	bgt.n	8015eae <__multiply+0x136>
 8015e02:	6107      	str	r7, [r0, #16]
 8015e04:	b005      	add	sp, #20
 8015e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e0a:	f843 2b04 	str.w	r2, [r3], #4
 8015e0e:	e7db      	b.n	8015dc8 <__multiply+0x50>
 8015e10:	f8b3 a000 	ldrh.w	sl, [r3]
 8015e14:	f1ba 0f00 	cmp.w	sl, #0
 8015e18:	d020      	beq.n	8015e5c <__multiply+0xe4>
 8015e1a:	f105 0e14 	add.w	lr, r5, #20
 8015e1e:	46b1      	mov	r9, r6
 8015e20:	2200      	movs	r2, #0
 8015e22:	f85e 4b04 	ldr.w	r4, [lr], #4
 8015e26:	f8d9 b000 	ldr.w	fp, [r9]
 8015e2a:	b2a1      	uxth	r1, r4
 8015e2c:	fa1f fb8b 	uxth.w	fp, fp
 8015e30:	fb0a b101 	mla	r1, sl, r1, fp
 8015e34:	4411      	add	r1, r2
 8015e36:	f8d9 2000 	ldr.w	r2, [r9]
 8015e3a:	0c24      	lsrs	r4, r4, #16
 8015e3c:	0c12      	lsrs	r2, r2, #16
 8015e3e:	fb0a 2404 	mla	r4, sl, r4, r2
 8015e42:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8015e46:	b289      	uxth	r1, r1
 8015e48:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8015e4c:	45f4      	cmp	ip, lr
 8015e4e:	f849 1b04 	str.w	r1, [r9], #4
 8015e52:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8015e56:	d8e4      	bhi.n	8015e22 <__multiply+0xaa>
 8015e58:	9901      	ldr	r1, [sp, #4]
 8015e5a:	5072      	str	r2, [r6, r1]
 8015e5c:	9a03      	ldr	r2, [sp, #12]
 8015e5e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015e62:	3304      	adds	r3, #4
 8015e64:	f1b9 0f00 	cmp.w	r9, #0
 8015e68:	d01f      	beq.n	8015eaa <__multiply+0x132>
 8015e6a:	6834      	ldr	r4, [r6, #0]
 8015e6c:	f105 0114 	add.w	r1, r5, #20
 8015e70:	46b6      	mov	lr, r6
 8015e72:	f04f 0a00 	mov.w	sl, #0
 8015e76:	880a      	ldrh	r2, [r1, #0]
 8015e78:	f8be b002 	ldrh.w	fp, [lr, #2]
 8015e7c:	fb09 b202 	mla	r2, r9, r2, fp
 8015e80:	4492      	add	sl, r2
 8015e82:	b2a4      	uxth	r4, r4
 8015e84:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8015e88:	f84e 4b04 	str.w	r4, [lr], #4
 8015e8c:	f851 4b04 	ldr.w	r4, [r1], #4
 8015e90:	f8be 2000 	ldrh.w	r2, [lr]
 8015e94:	0c24      	lsrs	r4, r4, #16
 8015e96:	fb09 2404 	mla	r4, r9, r4, r2
 8015e9a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8015e9e:	458c      	cmp	ip, r1
 8015ea0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015ea4:	d8e7      	bhi.n	8015e76 <__multiply+0xfe>
 8015ea6:	9a01      	ldr	r2, [sp, #4]
 8015ea8:	50b4      	str	r4, [r6, r2]
 8015eaa:	3604      	adds	r6, #4
 8015eac:	e7a3      	b.n	8015df6 <__multiply+0x7e>
 8015eae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d1a5      	bne.n	8015e02 <__multiply+0x8a>
 8015eb6:	3f01      	subs	r7, #1
 8015eb8:	e7a1      	b.n	8015dfe <__multiply+0x86>
 8015eba:	bf00      	nop
 8015ebc:	08018643 	.word	0x08018643
 8015ec0:	08018654 	.word	0x08018654

08015ec4 <__pow5mult>:
 8015ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ec8:	4615      	mov	r5, r2
 8015eca:	f012 0203 	ands.w	r2, r2, #3
 8015ece:	4606      	mov	r6, r0
 8015ed0:	460f      	mov	r7, r1
 8015ed2:	d007      	beq.n	8015ee4 <__pow5mult+0x20>
 8015ed4:	4c25      	ldr	r4, [pc, #148]	; (8015f6c <__pow5mult+0xa8>)
 8015ed6:	3a01      	subs	r2, #1
 8015ed8:	2300      	movs	r3, #0
 8015eda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015ede:	f7ff fe9b 	bl	8015c18 <__multadd>
 8015ee2:	4607      	mov	r7, r0
 8015ee4:	10ad      	asrs	r5, r5, #2
 8015ee6:	d03d      	beq.n	8015f64 <__pow5mult+0xa0>
 8015ee8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015eea:	b97c      	cbnz	r4, 8015f0c <__pow5mult+0x48>
 8015eec:	2010      	movs	r0, #16
 8015eee:	f7ff fe29 	bl	8015b44 <malloc>
 8015ef2:	4602      	mov	r2, r0
 8015ef4:	6270      	str	r0, [r6, #36]	; 0x24
 8015ef6:	b928      	cbnz	r0, 8015f04 <__pow5mult+0x40>
 8015ef8:	4b1d      	ldr	r3, [pc, #116]	; (8015f70 <__pow5mult+0xac>)
 8015efa:	481e      	ldr	r0, [pc, #120]	; (8015f74 <__pow5mult+0xb0>)
 8015efc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015f00:	f000 fa70 	bl	80163e4 <__assert_func>
 8015f04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015f08:	6004      	str	r4, [r0, #0]
 8015f0a:	60c4      	str	r4, [r0, #12]
 8015f0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015f10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015f14:	b94c      	cbnz	r4, 8015f2a <__pow5mult+0x66>
 8015f16:	f240 2171 	movw	r1, #625	; 0x271
 8015f1a:	4630      	mov	r0, r6
 8015f1c:	f7ff ff16 	bl	8015d4c <__i2b>
 8015f20:	2300      	movs	r3, #0
 8015f22:	f8c8 0008 	str.w	r0, [r8, #8]
 8015f26:	4604      	mov	r4, r0
 8015f28:	6003      	str	r3, [r0, #0]
 8015f2a:	f04f 0900 	mov.w	r9, #0
 8015f2e:	07eb      	lsls	r3, r5, #31
 8015f30:	d50a      	bpl.n	8015f48 <__pow5mult+0x84>
 8015f32:	4639      	mov	r1, r7
 8015f34:	4622      	mov	r2, r4
 8015f36:	4630      	mov	r0, r6
 8015f38:	f7ff ff1e 	bl	8015d78 <__multiply>
 8015f3c:	4639      	mov	r1, r7
 8015f3e:	4680      	mov	r8, r0
 8015f40:	4630      	mov	r0, r6
 8015f42:	f7ff fe47 	bl	8015bd4 <_Bfree>
 8015f46:	4647      	mov	r7, r8
 8015f48:	106d      	asrs	r5, r5, #1
 8015f4a:	d00b      	beq.n	8015f64 <__pow5mult+0xa0>
 8015f4c:	6820      	ldr	r0, [r4, #0]
 8015f4e:	b938      	cbnz	r0, 8015f60 <__pow5mult+0x9c>
 8015f50:	4622      	mov	r2, r4
 8015f52:	4621      	mov	r1, r4
 8015f54:	4630      	mov	r0, r6
 8015f56:	f7ff ff0f 	bl	8015d78 <__multiply>
 8015f5a:	6020      	str	r0, [r4, #0]
 8015f5c:	f8c0 9000 	str.w	r9, [r0]
 8015f60:	4604      	mov	r4, r0
 8015f62:	e7e4      	b.n	8015f2e <__pow5mult+0x6a>
 8015f64:	4638      	mov	r0, r7
 8015f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f6a:	bf00      	nop
 8015f6c:	080187a8 	.word	0x080187a8
 8015f70:	080185cd 	.word	0x080185cd
 8015f74:	08018654 	.word	0x08018654

08015f78 <__lshift>:
 8015f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f7c:	460c      	mov	r4, r1
 8015f7e:	6849      	ldr	r1, [r1, #4]
 8015f80:	6923      	ldr	r3, [r4, #16]
 8015f82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015f86:	68a3      	ldr	r3, [r4, #8]
 8015f88:	4607      	mov	r7, r0
 8015f8a:	4691      	mov	r9, r2
 8015f8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015f90:	f108 0601 	add.w	r6, r8, #1
 8015f94:	42b3      	cmp	r3, r6
 8015f96:	db0b      	blt.n	8015fb0 <__lshift+0x38>
 8015f98:	4638      	mov	r0, r7
 8015f9a:	f7ff fddb 	bl	8015b54 <_Balloc>
 8015f9e:	4605      	mov	r5, r0
 8015fa0:	b948      	cbnz	r0, 8015fb6 <__lshift+0x3e>
 8015fa2:	4602      	mov	r2, r0
 8015fa4:	4b28      	ldr	r3, [pc, #160]	; (8016048 <__lshift+0xd0>)
 8015fa6:	4829      	ldr	r0, [pc, #164]	; (801604c <__lshift+0xd4>)
 8015fa8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015fac:	f000 fa1a 	bl	80163e4 <__assert_func>
 8015fb0:	3101      	adds	r1, #1
 8015fb2:	005b      	lsls	r3, r3, #1
 8015fb4:	e7ee      	b.n	8015f94 <__lshift+0x1c>
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	f100 0114 	add.w	r1, r0, #20
 8015fbc:	f100 0210 	add.w	r2, r0, #16
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	4553      	cmp	r3, sl
 8015fc4:	db33      	blt.n	801602e <__lshift+0xb6>
 8015fc6:	6920      	ldr	r0, [r4, #16]
 8015fc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015fcc:	f104 0314 	add.w	r3, r4, #20
 8015fd0:	f019 091f 	ands.w	r9, r9, #31
 8015fd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015fd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015fdc:	d02b      	beq.n	8016036 <__lshift+0xbe>
 8015fde:	f1c9 0e20 	rsb	lr, r9, #32
 8015fe2:	468a      	mov	sl, r1
 8015fe4:	2200      	movs	r2, #0
 8015fe6:	6818      	ldr	r0, [r3, #0]
 8015fe8:	fa00 f009 	lsl.w	r0, r0, r9
 8015fec:	4302      	orrs	r2, r0
 8015fee:	f84a 2b04 	str.w	r2, [sl], #4
 8015ff2:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ff6:	459c      	cmp	ip, r3
 8015ff8:	fa22 f20e 	lsr.w	r2, r2, lr
 8015ffc:	d8f3      	bhi.n	8015fe6 <__lshift+0x6e>
 8015ffe:	ebac 0304 	sub.w	r3, ip, r4
 8016002:	3b15      	subs	r3, #21
 8016004:	f023 0303 	bic.w	r3, r3, #3
 8016008:	3304      	adds	r3, #4
 801600a:	f104 0015 	add.w	r0, r4, #21
 801600e:	4584      	cmp	ip, r0
 8016010:	bf38      	it	cc
 8016012:	2304      	movcc	r3, #4
 8016014:	50ca      	str	r2, [r1, r3]
 8016016:	b10a      	cbz	r2, 801601c <__lshift+0xa4>
 8016018:	f108 0602 	add.w	r6, r8, #2
 801601c:	3e01      	subs	r6, #1
 801601e:	4638      	mov	r0, r7
 8016020:	612e      	str	r6, [r5, #16]
 8016022:	4621      	mov	r1, r4
 8016024:	f7ff fdd6 	bl	8015bd4 <_Bfree>
 8016028:	4628      	mov	r0, r5
 801602a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801602e:	f842 0f04 	str.w	r0, [r2, #4]!
 8016032:	3301      	adds	r3, #1
 8016034:	e7c5      	b.n	8015fc2 <__lshift+0x4a>
 8016036:	3904      	subs	r1, #4
 8016038:	f853 2b04 	ldr.w	r2, [r3], #4
 801603c:	f841 2f04 	str.w	r2, [r1, #4]!
 8016040:	459c      	cmp	ip, r3
 8016042:	d8f9      	bhi.n	8016038 <__lshift+0xc0>
 8016044:	e7ea      	b.n	801601c <__lshift+0xa4>
 8016046:	bf00      	nop
 8016048:	08018643 	.word	0x08018643
 801604c:	08018654 	.word	0x08018654

08016050 <__mcmp>:
 8016050:	b530      	push	{r4, r5, lr}
 8016052:	6902      	ldr	r2, [r0, #16]
 8016054:	690c      	ldr	r4, [r1, #16]
 8016056:	1b12      	subs	r2, r2, r4
 8016058:	d10e      	bne.n	8016078 <__mcmp+0x28>
 801605a:	f100 0314 	add.w	r3, r0, #20
 801605e:	3114      	adds	r1, #20
 8016060:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016064:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016068:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801606c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016070:	42a5      	cmp	r5, r4
 8016072:	d003      	beq.n	801607c <__mcmp+0x2c>
 8016074:	d305      	bcc.n	8016082 <__mcmp+0x32>
 8016076:	2201      	movs	r2, #1
 8016078:	4610      	mov	r0, r2
 801607a:	bd30      	pop	{r4, r5, pc}
 801607c:	4283      	cmp	r3, r0
 801607e:	d3f3      	bcc.n	8016068 <__mcmp+0x18>
 8016080:	e7fa      	b.n	8016078 <__mcmp+0x28>
 8016082:	f04f 32ff 	mov.w	r2, #4294967295
 8016086:	e7f7      	b.n	8016078 <__mcmp+0x28>

08016088 <__mdiff>:
 8016088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801608c:	460c      	mov	r4, r1
 801608e:	4606      	mov	r6, r0
 8016090:	4611      	mov	r1, r2
 8016092:	4620      	mov	r0, r4
 8016094:	4617      	mov	r7, r2
 8016096:	f7ff ffdb 	bl	8016050 <__mcmp>
 801609a:	1e05      	subs	r5, r0, #0
 801609c:	d110      	bne.n	80160c0 <__mdiff+0x38>
 801609e:	4629      	mov	r1, r5
 80160a0:	4630      	mov	r0, r6
 80160a2:	f7ff fd57 	bl	8015b54 <_Balloc>
 80160a6:	b930      	cbnz	r0, 80160b6 <__mdiff+0x2e>
 80160a8:	4b39      	ldr	r3, [pc, #228]	; (8016190 <__mdiff+0x108>)
 80160aa:	4602      	mov	r2, r0
 80160ac:	f240 2132 	movw	r1, #562	; 0x232
 80160b0:	4838      	ldr	r0, [pc, #224]	; (8016194 <__mdiff+0x10c>)
 80160b2:	f000 f997 	bl	80163e4 <__assert_func>
 80160b6:	2301      	movs	r3, #1
 80160b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80160bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160c0:	bfa4      	itt	ge
 80160c2:	463b      	movge	r3, r7
 80160c4:	4627      	movge	r7, r4
 80160c6:	4630      	mov	r0, r6
 80160c8:	6879      	ldr	r1, [r7, #4]
 80160ca:	bfa6      	itte	ge
 80160cc:	461c      	movge	r4, r3
 80160ce:	2500      	movge	r5, #0
 80160d0:	2501      	movlt	r5, #1
 80160d2:	f7ff fd3f 	bl	8015b54 <_Balloc>
 80160d6:	b920      	cbnz	r0, 80160e2 <__mdiff+0x5a>
 80160d8:	4b2d      	ldr	r3, [pc, #180]	; (8016190 <__mdiff+0x108>)
 80160da:	4602      	mov	r2, r0
 80160dc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80160e0:	e7e6      	b.n	80160b0 <__mdiff+0x28>
 80160e2:	693e      	ldr	r6, [r7, #16]
 80160e4:	60c5      	str	r5, [r0, #12]
 80160e6:	6925      	ldr	r5, [r4, #16]
 80160e8:	f107 0114 	add.w	r1, r7, #20
 80160ec:	f104 0914 	add.w	r9, r4, #20
 80160f0:	f100 0e14 	add.w	lr, r0, #20
 80160f4:	f107 0210 	add.w	r2, r7, #16
 80160f8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80160fc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8016100:	46f2      	mov	sl, lr
 8016102:	2700      	movs	r7, #0
 8016104:	f859 3b04 	ldr.w	r3, [r9], #4
 8016108:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801610c:	fa1f f883 	uxth.w	r8, r3
 8016110:	fa17 f78b 	uxtah	r7, r7, fp
 8016114:	0c1b      	lsrs	r3, r3, #16
 8016116:	eba7 0808 	sub.w	r8, r7, r8
 801611a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801611e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016122:	fa1f f888 	uxth.w	r8, r8
 8016126:	141f      	asrs	r7, r3, #16
 8016128:	454d      	cmp	r5, r9
 801612a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801612e:	f84a 3b04 	str.w	r3, [sl], #4
 8016132:	d8e7      	bhi.n	8016104 <__mdiff+0x7c>
 8016134:	1b2b      	subs	r3, r5, r4
 8016136:	3b15      	subs	r3, #21
 8016138:	f023 0303 	bic.w	r3, r3, #3
 801613c:	3304      	adds	r3, #4
 801613e:	3415      	adds	r4, #21
 8016140:	42a5      	cmp	r5, r4
 8016142:	bf38      	it	cc
 8016144:	2304      	movcc	r3, #4
 8016146:	4419      	add	r1, r3
 8016148:	4473      	add	r3, lr
 801614a:	469e      	mov	lr, r3
 801614c:	460d      	mov	r5, r1
 801614e:	4565      	cmp	r5, ip
 8016150:	d30e      	bcc.n	8016170 <__mdiff+0xe8>
 8016152:	f10c 0203 	add.w	r2, ip, #3
 8016156:	1a52      	subs	r2, r2, r1
 8016158:	f022 0203 	bic.w	r2, r2, #3
 801615c:	3903      	subs	r1, #3
 801615e:	458c      	cmp	ip, r1
 8016160:	bf38      	it	cc
 8016162:	2200      	movcc	r2, #0
 8016164:	441a      	add	r2, r3
 8016166:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801616a:	b17b      	cbz	r3, 801618c <__mdiff+0x104>
 801616c:	6106      	str	r6, [r0, #16]
 801616e:	e7a5      	b.n	80160bc <__mdiff+0x34>
 8016170:	f855 8b04 	ldr.w	r8, [r5], #4
 8016174:	fa17 f488 	uxtah	r4, r7, r8
 8016178:	1422      	asrs	r2, r4, #16
 801617a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801617e:	b2a4      	uxth	r4, r4
 8016180:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8016184:	f84e 4b04 	str.w	r4, [lr], #4
 8016188:	1417      	asrs	r7, r2, #16
 801618a:	e7e0      	b.n	801614e <__mdiff+0xc6>
 801618c:	3e01      	subs	r6, #1
 801618e:	e7ea      	b.n	8016166 <__mdiff+0xde>
 8016190:	08018643 	.word	0x08018643
 8016194:	08018654 	.word	0x08018654

08016198 <__d2b>:
 8016198:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801619c:	4689      	mov	r9, r1
 801619e:	2101      	movs	r1, #1
 80161a0:	ec57 6b10 	vmov	r6, r7, d0
 80161a4:	4690      	mov	r8, r2
 80161a6:	f7ff fcd5 	bl	8015b54 <_Balloc>
 80161aa:	4604      	mov	r4, r0
 80161ac:	b930      	cbnz	r0, 80161bc <__d2b+0x24>
 80161ae:	4602      	mov	r2, r0
 80161b0:	4b25      	ldr	r3, [pc, #148]	; (8016248 <__d2b+0xb0>)
 80161b2:	4826      	ldr	r0, [pc, #152]	; (801624c <__d2b+0xb4>)
 80161b4:	f240 310a 	movw	r1, #778	; 0x30a
 80161b8:	f000 f914 	bl	80163e4 <__assert_func>
 80161bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80161c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80161c4:	bb35      	cbnz	r5, 8016214 <__d2b+0x7c>
 80161c6:	2e00      	cmp	r6, #0
 80161c8:	9301      	str	r3, [sp, #4]
 80161ca:	d028      	beq.n	801621e <__d2b+0x86>
 80161cc:	4668      	mov	r0, sp
 80161ce:	9600      	str	r6, [sp, #0]
 80161d0:	f7ff fd8c 	bl	8015cec <__lo0bits>
 80161d4:	9900      	ldr	r1, [sp, #0]
 80161d6:	b300      	cbz	r0, 801621a <__d2b+0x82>
 80161d8:	9a01      	ldr	r2, [sp, #4]
 80161da:	f1c0 0320 	rsb	r3, r0, #32
 80161de:	fa02 f303 	lsl.w	r3, r2, r3
 80161e2:	430b      	orrs	r3, r1
 80161e4:	40c2      	lsrs	r2, r0
 80161e6:	6163      	str	r3, [r4, #20]
 80161e8:	9201      	str	r2, [sp, #4]
 80161ea:	9b01      	ldr	r3, [sp, #4]
 80161ec:	61a3      	str	r3, [r4, #24]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	bf14      	ite	ne
 80161f2:	2202      	movne	r2, #2
 80161f4:	2201      	moveq	r2, #1
 80161f6:	6122      	str	r2, [r4, #16]
 80161f8:	b1d5      	cbz	r5, 8016230 <__d2b+0x98>
 80161fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80161fe:	4405      	add	r5, r0
 8016200:	f8c9 5000 	str.w	r5, [r9]
 8016204:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016208:	f8c8 0000 	str.w	r0, [r8]
 801620c:	4620      	mov	r0, r4
 801620e:	b003      	add	sp, #12
 8016210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016218:	e7d5      	b.n	80161c6 <__d2b+0x2e>
 801621a:	6161      	str	r1, [r4, #20]
 801621c:	e7e5      	b.n	80161ea <__d2b+0x52>
 801621e:	a801      	add	r0, sp, #4
 8016220:	f7ff fd64 	bl	8015cec <__lo0bits>
 8016224:	9b01      	ldr	r3, [sp, #4]
 8016226:	6163      	str	r3, [r4, #20]
 8016228:	2201      	movs	r2, #1
 801622a:	6122      	str	r2, [r4, #16]
 801622c:	3020      	adds	r0, #32
 801622e:	e7e3      	b.n	80161f8 <__d2b+0x60>
 8016230:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016234:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016238:	f8c9 0000 	str.w	r0, [r9]
 801623c:	6918      	ldr	r0, [r3, #16]
 801623e:	f7ff fd35 	bl	8015cac <__hi0bits>
 8016242:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016246:	e7df      	b.n	8016208 <__d2b+0x70>
 8016248:	08018643 	.word	0x08018643
 801624c:	08018654 	.word	0x08018654

08016250 <_calloc_r>:
 8016250:	b513      	push	{r0, r1, r4, lr}
 8016252:	434a      	muls	r2, r1
 8016254:	4611      	mov	r1, r2
 8016256:	9201      	str	r2, [sp, #4]
 8016258:	f000 f85a 	bl	8016310 <_malloc_r>
 801625c:	4604      	mov	r4, r0
 801625e:	b118      	cbz	r0, 8016268 <_calloc_r+0x18>
 8016260:	9a01      	ldr	r2, [sp, #4]
 8016262:	2100      	movs	r1, #0
 8016264:	f7fe fa10 	bl	8014688 <memset>
 8016268:	4620      	mov	r0, r4
 801626a:	b002      	add	sp, #8
 801626c:	bd10      	pop	{r4, pc}
	...

08016270 <_free_r>:
 8016270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016272:	2900      	cmp	r1, #0
 8016274:	d048      	beq.n	8016308 <_free_r+0x98>
 8016276:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801627a:	9001      	str	r0, [sp, #4]
 801627c:	2b00      	cmp	r3, #0
 801627e:	f1a1 0404 	sub.w	r4, r1, #4
 8016282:	bfb8      	it	lt
 8016284:	18e4      	addlt	r4, r4, r3
 8016286:	f000 f8ef 	bl	8016468 <__malloc_lock>
 801628a:	4a20      	ldr	r2, [pc, #128]	; (801630c <_free_r+0x9c>)
 801628c:	9801      	ldr	r0, [sp, #4]
 801628e:	6813      	ldr	r3, [r2, #0]
 8016290:	4615      	mov	r5, r2
 8016292:	b933      	cbnz	r3, 80162a2 <_free_r+0x32>
 8016294:	6063      	str	r3, [r4, #4]
 8016296:	6014      	str	r4, [r2, #0]
 8016298:	b003      	add	sp, #12
 801629a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801629e:	f000 b8e9 	b.w	8016474 <__malloc_unlock>
 80162a2:	42a3      	cmp	r3, r4
 80162a4:	d90b      	bls.n	80162be <_free_r+0x4e>
 80162a6:	6821      	ldr	r1, [r4, #0]
 80162a8:	1862      	adds	r2, r4, r1
 80162aa:	4293      	cmp	r3, r2
 80162ac:	bf04      	itt	eq
 80162ae:	681a      	ldreq	r2, [r3, #0]
 80162b0:	685b      	ldreq	r3, [r3, #4]
 80162b2:	6063      	str	r3, [r4, #4]
 80162b4:	bf04      	itt	eq
 80162b6:	1852      	addeq	r2, r2, r1
 80162b8:	6022      	streq	r2, [r4, #0]
 80162ba:	602c      	str	r4, [r5, #0]
 80162bc:	e7ec      	b.n	8016298 <_free_r+0x28>
 80162be:	461a      	mov	r2, r3
 80162c0:	685b      	ldr	r3, [r3, #4]
 80162c2:	b10b      	cbz	r3, 80162c8 <_free_r+0x58>
 80162c4:	42a3      	cmp	r3, r4
 80162c6:	d9fa      	bls.n	80162be <_free_r+0x4e>
 80162c8:	6811      	ldr	r1, [r2, #0]
 80162ca:	1855      	adds	r5, r2, r1
 80162cc:	42a5      	cmp	r5, r4
 80162ce:	d10b      	bne.n	80162e8 <_free_r+0x78>
 80162d0:	6824      	ldr	r4, [r4, #0]
 80162d2:	4421      	add	r1, r4
 80162d4:	1854      	adds	r4, r2, r1
 80162d6:	42a3      	cmp	r3, r4
 80162d8:	6011      	str	r1, [r2, #0]
 80162da:	d1dd      	bne.n	8016298 <_free_r+0x28>
 80162dc:	681c      	ldr	r4, [r3, #0]
 80162de:	685b      	ldr	r3, [r3, #4]
 80162e0:	6053      	str	r3, [r2, #4]
 80162e2:	4421      	add	r1, r4
 80162e4:	6011      	str	r1, [r2, #0]
 80162e6:	e7d7      	b.n	8016298 <_free_r+0x28>
 80162e8:	d902      	bls.n	80162f0 <_free_r+0x80>
 80162ea:	230c      	movs	r3, #12
 80162ec:	6003      	str	r3, [r0, #0]
 80162ee:	e7d3      	b.n	8016298 <_free_r+0x28>
 80162f0:	6825      	ldr	r5, [r4, #0]
 80162f2:	1961      	adds	r1, r4, r5
 80162f4:	428b      	cmp	r3, r1
 80162f6:	bf04      	itt	eq
 80162f8:	6819      	ldreq	r1, [r3, #0]
 80162fa:	685b      	ldreq	r3, [r3, #4]
 80162fc:	6063      	str	r3, [r4, #4]
 80162fe:	bf04      	itt	eq
 8016300:	1949      	addeq	r1, r1, r5
 8016302:	6021      	streq	r1, [r4, #0]
 8016304:	6054      	str	r4, [r2, #4]
 8016306:	e7c7      	b.n	8016298 <_free_r+0x28>
 8016308:	b003      	add	sp, #12
 801630a:	bd30      	pop	{r4, r5, pc}
 801630c:	2400034c 	.word	0x2400034c

08016310 <_malloc_r>:
 8016310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016312:	1ccd      	adds	r5, r1, #3
 8016314:	f025 0503 	bic.w	r5, r5, #3
 8016318:	3508      	adds	r5, #8
 801631a:	2d0c      	cmp	r5, #12
 801631c:	bf38      	it	cc
 801631e:	250c      	movcc	r5, #12
 8016320:	2d00      	cmp	r5, #0
 8016322:	4606      	mov	r6, r0
 8016324:	db01      	blt.n	801632a <_malloc_r+0x1a>
 8016326:	42a9      	cmp	r1, r5
 8016328:	d903      	bls.n	8016332 <_malloc_r+0x22>
 801632a:	230c      	movs	r3, #12
 801632c:	6033      	str	r3, [r6, #0]
 801632e:	2000      	movs	r0, #0
 8016330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016332:	f000 f899 	bl	8016468 <__malloc_lock>
 8016336:	4921      	ldr	r1, [pc, #132]	; (80163bc <_malloc_r+0xac>)
 8016338:	680a      	ldr	r2, [r1, #0]
 801633a:	4614      	mov	r4, r2
 801633c:	b99c      	cbnz	r4, 8016366 <_malloc_r+0x56>
 801633e:	4f20      	ldr	r7, [pc, #128]	; (80163c0 <_malloc_r+0xb0>)
 8016340:	683b      	ldr	r3, [r7, #0]
 8016342:	b923      	cbnz	r3, 801634e <_malloc_r+0x3e>
 8016344:	4621      	mov	r1, r4
 8016346:	4630      	mov	r0, r6
 8016348:	f000 f83c 	bl	80163c4 <_sbrk_r>
 801634c:	6038      	str	r0, [r7, #0]
 801634e:	4629      	mov	r1, r5
 8016350:	4630      	mov	r0, r6
 8016352:	f000 f837 	bl	80163c4 <_sbrk_r>
 8016356:	1c43      	adds	r3, r0, #1
 8016358:	d123      	bne.n	80163a2 <_malloc_r+0x92>
 801635a:	230c      	movs	r3, #12
 801635c:	6033      	str	r3, [r6, #0]
 801635e:	4630      	mov	r0, r6
 8016360:	f000 f888 	bl	8016474 <__malloc_unlock>
 8016364:	e7e3      	b.n	801632e <_malloc_r+0x1e>
 8016366:	6823      	ldr	r3, [r4, #0]
 8016368:	1b5b      	subs	r3, r3, r5
 801636a:	d417      	bmi.n	801639c <_malloc_r+0x8c>
 801636c:	2b0b      	cmp	r3, #11
 801636e:	d903      	bls.n	8016378 <_malloc_r+0x68>
 8016370:	6023      	str	r3, [r4, #0]
 8016372:	441c      	add	r4, r3
 8016374:	6025      	str	r5, [r4, #0]
 8016376:	e004      	b.n	8016382 <_malloc_r+0x72>
 8016378:	6863      	ldr	r3, [r4, #4]
 801637a:	42a2      	cmp	r2, r4
 801637c:	bf0c      	ite	eq
 801637e:	600b      	streq	r3, [r1, #0]
 8016380:	6053      	strne	r3, [r2, #4]
 8016382:	4630      	mov	r0, r6
 8016384:	f000 f876 	bl	8016474 <__malloc_unlock>
 8016388:	f104 000b 	add.w	r0, r4, #11
 801638c:	1d23      	adds	r3, r4, #4
 801638e:	f020 0007 	bic.w	r0, r0, #7
 8016392:	1ac2      	subs	r2, r0, r3
 8016394:	d0cc      	beq.n	8016330 <_malloc_r+0x20>
 8016396:	1a1b      	subs	r3, r3, r0
 8016398:	50a3      	str	r3, [r4, r2]
 801639a:	e7c9      	b.n	8016330 <_malloc_r+0x20>
 801639c:	4622      	mov	r2, r4
 801639e:	6864      	ldr	r4, [r4, #4]
 80163a0:	e7cc      	b.n	801633c <_malloc_r+0x2c>
 80163a2:	1cc4      	adds	r4, r0, #3
 80163a4:	f024 0403 	bic.w	r4, r4, #3
 80163a8:	42a0      	cmp	r0, r4
 80163aa:	d0e3      	beq.n	8016374 <_malloc_r+0x64>
 80163ac:	1a21      	subs	r1, r4, r0
 80163ae:	4630      	mov	r0, r6
 80163b0:	f000 f808 	bl	80163c4 <_sbrk_r>
 80163b4:	3001      	adds	r0, #1
 80163b6:	d1dd      	bne.n	8016374 <_malloc_r+0x64>
 80163b8:	e7cf      	b.n	801635a <_malloc_r+0x4a>
 80163ba:	bf00      	nop
 80163bc:	2400034c 	.word	0x2400034c
 80163c0:	24000350 	.word	0x24000350

080163c4 <_sbrk_r>:
 80163c4:	b538      	push	{r3, r4, r5, lr}
 80163c6:	4d06      	ldr	r5, [pc, #24]	; (80163e0 <_sbrk_r+0x1c>)
 80163c8:	2300      	movs	r3, #0
 80163ca:	4604      	mov	r4, r0
 80163cc:	4608      	mov	r0, r1
 80163ce:	602b      	str	r3, [r5, #0]
 80163d0:	f7f2 fd90 	bl	8008ef4 <_sbrk>
 80163d4:	1c43      	adds	r3, r0, #1
 80163d6:	d102      	bne.n	80163de <_sbrk_r+0x1a>
 80163d8:	682b      	ldr	r3, [r5, #0]
 80163da:	b103      	cbz	r3, 80163de <_sbrk_r+0x1a>
 80163dc:	6023      	str	r3, [r4, #0]
 80163de:	bd38      	pop	{r3, r4, r5, pc}
 80163e0:	240013f4 	.word	0x240013f4

080163e4 <__assert_func>:
 80163e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80163e6:	4614      	mov	r4, r2
 80163e8:	461a      	mov	r2, r3
 80163ea:	4b09      	ldr	r3, [pc, #36]	; (8016410 <__assert_func+0x2c>)
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	4605      	mov	r5, r0
 80163f0:	68d8      	ldr	r0, [r3, #12]
 80163f2:	b14c      	cbz	r4, 8016408 <__assert_func+0x24>
 80163f4:	4b07      	ldr	r3, [pc, #28]	; (8016414 <__assert_func+0x30>)
 80163f6:	9100      	str	r1, [sp, #0]
 80163f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80163fc:	4906      	ldr	r1, [pc, #24]	; (8016418 <__assert_func+0x34>)
 80163fe:	462b      	mov	r3, r5
 8016400:	f000 f80e 	bl	8016420 <fiprintf>
 8016404:	f000 fa64 	bl	80168d0 <abort>
 8016408:	4b04      	ldr	r3, [pc, #16]	; (801641c <__assert_func+0x38>)
 801640a:	461c      	mov	r4, r3
 801640c:	e7f3      	b.n	80163f6 <__assert_func+0x12>
 801640e:	bf00      	nop
 8016410:	24000060 	.word	0x24000060
 8016414:	080187b4 	.word	0x080187b4
 8016418:	080187c1 	.word	0x080187c1
 801641c:	080187ef 	.word	0x080187ef

08016420 <fiprintf>:
 8016420:	b40e      	push	{r1, r2, r3}
 8016422:	b503      	push	{r0, r1, lr}
 8016424:	4601      	mov	r1, r0
 8016426:	ab03      	add	r3, sp, #12
 8016428:	4805      	ldr	r0, [pc, #20]	; (8016440 <fiprintf+0x20>)
 801642a:	f853 2b04 	ldr.w	r2, [r3], #4
 801642e:	6800      	ldr	r0, [r0, #0]
 8016430:	9301      	str	r3, [sp, #4]
 8016432:	f000 f84f 	bl	80164d4 <_vfiprintf_r>
 8016436:	b002      	add	sp, #8
 8016438:	f85d eb04 	ldr.w	lr, [sp], #4
 801643c:	b003      	add	sp, #12
 801643e:	4770      	bx	lr
 8016440:	24000060 	.word	0x24000060

08016444 <__ascii_mbtowc>:
 8016444:	b082      	sub	sp, #8
 8016446:	b901      	cbnz	r1, 801644a <__ascii_mbtowc+0x6>
 8016448:	a901      	add	r1, sp, #4
 801644a:	b142      	cbz	r2, 801645e <__ascii_mbtowc+0x1a>
 801644c:	b14b      	cbz	r3, 8016462 <__ascii_mbtowc+0x1e>
 801644e:	7813      	ldrb	r3, [r2, #0]
 8016450:	600b      	str	r3, [r1, #0]
 8016452:	7812      	ldrb	r2, [r2, #0]
 8016454:	1e10      	subs	r0, r2, #0
 8016456:	bf18      	it	ne
 8016458:	2001      	movne	r0, #1
 801645a:	b002      	add	sp, #8
 801645c:	4770      	bx	lr
 801645e:	4610      	mov	r0, r2
 8016460:	e7fb      	b.n	801645a <__ascii_mbtowc+0x16>
 8016462:	f06f 0001 	mvn.w	r0, #1
 8016466:	e7f8      	b.n	801645a <__ascii_mbtowc+0x16>

08016468 <__malloc_lock>:
 8016468:	4801      	ldr	r0, [pc, #4]	; (8016470 <__malloc_lock+0x8>)
 801646a:	f000 bbf1 	b.w	8016c50 <__retarget_lock_acquire_recursive>
 801646e:	bf00      	nop
 8016470:	240013fc 	.word	0x240013fc

08016474 <__malloc_unlock>:
 8016474:	4801      	ldr	r0, [pc, #4]	; (801647c <__malloc_unlock+0x8>)
 8016476:	f000 bbec 	b.w	8016c52 <__retarget_lock_release_recursive>
 801647a:	bf00      	nop
 801647c:	240013fc 	.word	0x240013fc

08016480 <__sfputc_r>:
 8016480:	6893      	ldr	r3, [r2, #8]
 8016482:	3b01      	subs	r3, #1
 8016484:	2b00      	cmp	r3, #0
 8016486:	b410      	push	{r4}
 8016488:	6093      	str	r3, [r2, #8]
 801648a:	da08      	bge.n	801649e <__sfputc_r+0x1e>
 801648c:	6994      	ldr	r4, [r2, #24]
 801648e:	42a3      	cmp	r3, r4
 8016490:	db01      	blt.n	8016496 <__sfputc_r+0x16>
 8016492:	290a      	cmp	r1, #10
 8016494:	d103      	bne.n	801649e <__sfputc_r+0x1e>
 8016496:	f85d 4b04 	ldr.w	r4, [sp], #4
 801649a:	f000 b94b 	b.w	8016734 <__swbuf_r>
 801649e:	6813      	ldr	r3, [r2, #0]
 80164a0:	1c58      	adds	r0, r3, #1
 80164a2:	6010      	str	r0, [r2, #0]
 80164a4:	7019      	strb	r1, [r3, #0]
 80164a6:	4608      	mov	r0, r1
 80164a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80164ac:	4770      	bx	lr

080164ae <__sfputs_r>:
 80164ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164b0:	4606      	mov	r6, r0
 80164b2:	460f      	mov	r7, r1
 80164b4:	4614      	mov	r4, r2
 80164b6:	18d5      	adds	r5, r2, r3
 80164b8:	42ac      	cmp	r4, r5
 80164ba:	d101      	bne.n	80164c0 <__sfputs_r+0x12>
 80164bc:	2000      	movs	r0, #0
 80164be:	e007      	b.n	80164d0 <__sfputs_r+0x22>
 80164c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164c4:	463a      	mov	r2, r7
 80164c6:	4630      	mov	r0, r6
 80164c8:	f7ff ffda 	bl	8016480 <__sfputc_r>
 80164cc:	1c43      	adds	r3, r0, #1
 80164ce:	d1f3      	bne.n	80164b8 <__sfputs_r+0xa>
 80164d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080164d4 <_vfiprintf_r>:
 80164d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164d8:	460d      	mov	r5, r1
 80164da:	b09d      	sub	sp, #116	; 0x74
 80164dc:	4614      	mov	r4, r2
 80164de:	4698      	mov	r8, r3
 80164e0:	4606      	mov	r6, r0
 80164e2:	b118      	cbz	r0, 80164ec <_vfiprintf_r+0x18>
 80164e4:	6983      	ldr	r3, [r0, #24]
 80164e6:	b90b      	cbnz	r3, 80164ec <_vfiprintf_r+0x18>
 80164e8:	f000 fb14 	bl	8016b14 <__sinit>
 80164ec:	4b89      	ldr	r3, [pc, #548]	; (8016714 <_vfiprintf_r+0x240>)
 80164ee:	429d      	cmp	r5, r3
 80164f0:	d11b      	bne.n	801652a <_vfiprintf_r+0x56>
 80164f2:	6875      	ldr	r5, [r6, #4]
 80164f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80164f6:	07d9      	lsls	r1, r3, #31
 80164f8:	d405      	bmi.n	8016506 <_vfiprintf_r+0x32>
 80164fa:	89ab      	ldrh	r3, [r5, #12]
 80164fc:	059a      	lsls	r2, r3, #22
 80164fe:	d402      	bmi.n	8016506 <_vfiprintf_r+0x32>
 8016500:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016502:	f000 fba5 	bl	8016c50 <__retarget_lock_acquire_recursive>
 8016506:	89ab      	ldrh	r3, [r5, #12]
 8016508:	071b      	lsls	r3, r3, #28
 801650a:	d501      	bpl.n	8016510 <_vfiprintf_r+0x3c>
 801650c:	692b      	ldr	r3, [r5, #16]
 801650e:	b9eb      	cbnz	r3, 801654c <_vfiprintf_r+0x78>
 8016510:	4629      	mov	r1, r5
 8016512:	4630      	mov	r0, r6
 8016514:	f000 f96e 	bl	80167f4 <__swsetup_r>
 8016518:	b1c0      	cbz	r0, 801654c <_vfiprintf_r+0x78>
 801651a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801651c:	07dc      	lsls	r4, r3, #31
 801651e:	d50e      	bpl.n	801653e <_vfiprintf_r+0x6a>
 8016520:	f04f 30ff 	mov.w	r0, #4294967295
 8016524:	b01d      	add	sp, #116	; 0x74
 8016526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801652a:	4b7b      	ldr	r3, [pc, #492]	; (8016718 <_vfiprintf_r+0x244>)
 801652c:	429d      	cmp	r5, r3
 801652e:	d101      	bne.n	8016534 <_vfiprintf_r+0x60>
 8016530:	68b5      	ldr	r5, [r6, #8]
 8016532:	e7df      	b.n	80164f4 <_vfiprintf_r+0x20>
 8016534:	4b79      	ldr	r3, [pc, #484]	; (801671c <_vfiprintf_r+0x248>)
 8016536:	429d      	cmp	r5, r3
 8016538:	bf08      	it	eq
 801653a:	68f5      	ldreq	r5, [r6, #12]
 801653c:	e7da      	b.n	80164f4 <_vfiprintf_r+0x20>
 801653e:	89ab      	ldrh	r3, [r5, #12]
 8016540:	0598      	lsls	r0, r3, #22
 8016542:	d4ed      	bmi.n	8016520 <_vfiprintf_r+0x4c>
 8016544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016546:	f000 fb84 	bl	8016c52 <__retarget_lock_release_recursive>
 801654a:	e7e9      	b.n	8016520 <_vfiprintf_r+0x4c>
 801654c:	2300      	movs	r3, #0
 801654e:	9309      	str	r3, [sp, #36]	; 0x24
 8016550:	2320      	movs	r3, #32
 8016552:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016556:	f8cd 800c 	str.w	r8, [sp, #12]
 801655a:	2330      	movs	r3, #48	; 0x30
 801655c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016720 <_vfiprintf_r+0x24c>
 8016560:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016564:	f04f 0901 	mov.w	r9, #1
 8016568:	4623      	mov	r3, r4
 801656a:	469a      	mov	sl, r3
 801656c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016570:	b10a      	cbz	r2, 8016576 <_vfiprintf_r+0xa2>
 8016572:	2a25      	cmp	r2, #37	; 0x25
 8016574:	d1f9      	bne.n	801656a <_vfiprintf_r+0x96>
 8016576:	ebba 0b04 	subs.w	fp, sl, r4
 801657a:	d00b      	beq.n	8016594 <_vfiprintf_r+0xc0>
 801657c:	465b      	mov	r3, fp
 801657e:	4622      	mov	r2, r4
 8016580:	4629      	mov	r1, r5
 8016582:	4630      	mov	r0, r6
 8016584:	f7ff ff93 	bl	80164ae <__sfputs_r>
 8016588:	3001      	adds	r0, #1
 801658a:	f000 80aa 	beq.w	80166e2 <_vfiprintf_r+0x20e>
 801658e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016590:	445a      	add	r2, fp
 8016592:	9209      	str	r2, [sp, #36]	; 0x24
 8016594:	f89a 3000 	ldrb.w	r3, [sl]
 8016598:	2b00      	cmp	r3, #0
 801659a:	f000 80a2 	beq.w	80166e2 <_vfiprintf_r+0x20e>
 801659e:	2300      	movs	r3, #0
 80165a0:	f04f 32ff 	mov.w	r2, #4294967295
 80165a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80165a8:	f10a 0a01 	add.w	sl, sl, #1
 80165ac:	9304      	str	r3, [sp, #16]
 80165ae:	9307      	str	r3, [sp, #28]
 80165b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80165b4:	931a      	str	r3, [sp, #104]	; 0x68
 80165b6:	4654      	mov	r4, sl
 80165b8:	2205      	movs	r2, #5
 80165ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80165be:	4858      	ldr	r0, [pc, #352]	; (8016720 <_vfiprintf_r+0x24c>)
 80165c0:	f7e9 feae 	bl	8000320 <memchr>
 80165c4:	9a04      	ldr	r2, [sp, #16]
 80165c6:	b9d8      	cbnz	r0, 8016600 <_vfiprintf_r+0x12c>
 80165c8:	06d1      	lsls	r1, r2, #27
 80165ca:	bf44      	itt	mi
 80165cc:	2320      	movmi	r3, #32
 80165ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80165d2:	0713      	lsls	r3, r2, #28
 80165d4:	bf44      	itt	mi
 80165d6:	232b      	movmi	r3, #43	; 0x2b
 80165d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80165dc:	f89a 3000 	ldrb.w	r3, [sl]
 80165e0:	2b2a      	cmp	r3, #42	; 0x2a
 80165e2:	d015      	beq.n	8016610 <_vfiprintf_r+0x13c>
 80165e4:	9a07      	ldr	r2, [sp, #28]
 80165e6:	4654      	mov	r4, sl
 80165e8:	2000      	movs	r0, #0
 80165ea:	f04f 0c0a 	mov.w	ip, #10
 80165ee:	4621      	mov	r1, r4
 80165f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80165f4:	3b30      	subs	r3, #48	; 0x30
 80165f6:	2b09      	cmp	r3, #9
 80165f8:	d94e      	bls.n	8016698 <_vfiprintf_r+0x1c4>
 80165fa:	b1b0      	cbz	r0, 801662a <_vfiprintf_r+0x156>
 80165fc:	9207      	str	r2, [sp, #28]
 80165fe:	e014      	b.n	801662a <_vfiprintf_r+0x156>
 8016600:	eba0 0308 	sub.w	r3, r0, r8
 8016604:	fa09 f303 	lsl.w	r3, r9, r3
 8016608:	4313      	orrs	r3, r2
 801660a:	9304      	str	r3, [sp, #16]
 801660c:	46a2      	mov	sl, r4
 801660e:	e7d2      	b.n	80165b6 <_vfiprintf_r+0xe2>
 8016610:	9b03      	ldr	r3, [sp, #12]
 8016612:	1d19      	adds	r1, r3, #4
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	9103      	str	r1, [sp, #12]
 8016618:	2b00      	cmp	r3, #0
 801661a:	bfbb      	ittet	lt
 801661c:	425b      	neglt	r3, r3
 801661e:	f042 0202 	orrlt.w	r2, r2, #2
 8016622:	9307      	strge	r3, [sp, #28]
 8016624:	9307      	strlt	r3, [sp, #28]
 8016626:	bfb8      	it	lt
 8016628:	9204      	strlt	r2, [sp, #16]
 801662a:	7823      	ldrb	r3, [r4, #0]
 801662c:	2b2e      	cmp	r3, #46	; 0x2e
 801662e:	d10c      	bne.n	801664a <_vfiprintf_r+0x176>
 8016630:	7863      	ldrb	r3, [r4, #1]
 8016632:	2b2a      	cmp	r3, #42	; 0x2a
 8016634:	d135      	bne.n	80166a2 <_vfiprintf_r+0x1ce>
 8016636:	9b03      	ldr	r3, [sp, #12]
 8016638:	1d1a      	adds	r2, r3, #4
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	9203      	str	r2, [sp, #12]
 801663e:	2b00      	cmp	r3, #0
 8016640:	bfb8      	it	lt
 8016642:	f04f 33ff 	movlt.w	r3, #4294967295
 8016646:	3402      	adds	r4, #2
 8016648:	9305      	str	r3, [sp, #20]
 801664a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016730 <_vfiprintf_r+0x25c>
 801664e:	7821      	ldrb	r1, [r4, #0]
 8016650:	2203      	movs	r2, #3
 8016652:	4650      	mov	r0, sl
 8016654:	f7e9 fe64 	bl	8000320 <memchr>
 8016658:	b140      	cbz	r0, 801666c <_vfiprintf_r+0x198>
 801665a:	2340      	movs	r3, #64	; 0x40
 801665c:	eba0 000a 	sub.w	r0, r0, sl
 8016660:	fa03 f000 	lsl.w	r0, r3, r0
 8016664:	9b04      	ldr	r3, [sp, #16]
 8016666:	4303      	orrs	r3, r0
 8016668:	3401      	adds	r4, #1
 801666a:	9304      	str	r3, [sp, #16]
 801666c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016670:	482c      	ldr	r0, [pc, #176]	; (8016724 <_vfiprintf_r+0x250>)
 8016672:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016676:	2206      	movs	r2, #6
 8016678:	f7e9 fe52 	bl	8000320 <memchr>
 801667c:	2800      	cmp	r0, #0
 801667e:	d03f      	beq.n	8016700 <_vfiprintf_r+0x22c>
 8016680:	4b29      	ldr	r3, [pc, #164]	; (8016728 <_vfiprintf_r+0x254>)
 8016682:	bb1b      	cbnz	r3, 80166cc <_vfiprintf_r+0x1f8>
 8016684:	9b03      	ldr	r3, [sp, #12]
 8016686:	3307      	adds	r3, #7
 8016688:	f023 0307 	bic.w	r3, r3, #7
 801668c:	3308      	adds	r3, #8
 801668e:	9303      	str	r3, [sp, #12]
 8016690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016692:	443b      	add	r3, r7
 8016694:	9309      	str	r3, [sp, #36]	; 0x24
 8016696:	e767      	b.n	8016568 <_vfiprintf_r+0x94>
 8016698:	fb0c 3202 	mla	r2, ip, r2, r3
 801669c:	460c      	mov	r4, r1
 801669e:	2001      	movs	r0, #1
 80166a0:	e7a5      	b.n	80165ee <_vfiprintf_r+0x11a>
 80166a2:	2300      	movs	r3, #0
 80166a4:	3401      	adds	r4, #1
 80166a6:	9305      	str	r3, [sp, #20]
 80166a8:	4619      	mov	r1, r3
 80166aa:	f04f 0c0a 	mov.w	ip, #10
 80166ae:	4620      	mov	r0, r4
 80166b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80166b4:	3a30      	subs	r2, #48	; 0x30
 80166b6:	2a09      	cmp	r2, #9
 80166b8:	d903      	bls.n	80166c2 <_vfiprintf_r+0x1ee>
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d0c5      	beq.n	801664a <_vfiprintf_r+0x176>
 80166be:	9105      	str	r1, [sp, #20]
 80166c0:	e7c3      	b.n	801664a <_vfiprintf_r+0x176>
 80166c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80166c6:	4604      	mov	r4, r0
 80166c8:	2301      	movs	r3, #1
 80166ca:	e7f0      	b.n	80166ae <_vfiprintf_r+0x1da>
 80166cc:	ab03      	add	r3, sp, #12
 80166ce:	9300      	str	r3, [sp, #0]
 80166d0:	462a      	mov	r2, r5
 80166d2:	4b16      	ldr	r3, [pc, #88]	; (801672c <_vfiprintf_r+0x258>)
 80166d4:	a904      	add	r1, sp, #16
 80166d6:	4630      	mov	r0, r6
 80166d8:	f7fe f86e 	bl	80147b8 <_printf_float>
 80166dc:	4607      	mov	r7, r0
 80166de:	1c78      	adds	r0, r7, #1
 80166e0:	d1d6      	bne.n	8016690 <_vfiprintf_r+0x1bc>
 80166e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80166e4:	07d9      	lsls	r1, r3, #31
 80166e6:	d405      	bmi.n	80166f4 <_vfiprintf_r+0x220>
 80166e8:	89ab      	ldrh	r3, [r5, #12]
 80166ea:	059a      	lsls	r2, r3, #22
 80166ec:	d402      	bmi.n	80166f4 <_vfiprintf_r+0x220>
 80166ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80166f0:	f000 faaf 	bl	8016c52 <__retarget_lock_release_recursive>
 80166f4:	89ab      	ldrh	r3, [r5, #12]
 80166f6:	065b      	lsls	r3, r3, #25
 80166f8:	f53f af12 	bmi.w	8016520 <_vfiprintf_r+0x4c>
 80166fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80166fe:	e711      	b.n	8016524 <_vfiprintf_r+0x50>
 8016700:	ab03      	add	r3, sp, #12
 8016702:	9300      	str	r3, [sp, #0]
 8016704:	462a      	mov	r2, r5
 8016706:	4b09      	ldr	r3, [pc, #36]	; (801672c <_vfiprintf_r+0x258>)
 8016708:	a904      	add	r1, sp, #16
 801670a:	4630      	mov	r0, r6
 801670c:	f7fe fae0 	bl	8014cd0 <_printf_i>
 8016710:	e7e4      	b.n	80166dc <_vfiprintf_r+0x208>
 8016712:	bf00      	nop
 8016714:	0801892c 	.word	0x0801892c
 8016718:	0801894c 	.word	0x0801894c
 801671c:	0801890c 	.word	0x0801890c
 8016720:	080187fa 	.word	0x080187fa
 8016724:	08018804 	.word	0x08018804
 8016728:	080147b9 	.word	0x080147b9
 801672c:	080164af 	.word	0x080164af
 8016730:	08018800 	.word	0x08018800

08016734 <__swbuf_r>:
 8016734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016736:	460e      	mov	r6, r1
 8016738:	4614      	mov	r4, r2
 801673a:	4605      	mov	r5, r0
 801673c:	b118      	cbz	r0, 8016746 <__swbuf_r+0x12>
 801673e:	6983      	ldr	r3, [r0, #24]
 8016740:	b90b      	cbnz	r3, 8016746 <__swbuf_r+0x12>
 8016742:	f000 f9e7 	bl	8016b14 <__sinit>
 8016746:	4b21      	ldr	r3, [pc, #132]	; (80167cc <__swbuf_r+0x98>)
 8016748:	429c      	cmp	r4, r3
 801674a:	d12b      	bne.n	80167a4 <__swbuf_r+0x70>
 801674c:	686c      	ldr	r4, [r5, #4]
 801674e:	69a3      	ldr	r3, [r4, #24]
 8016750:	60a3      	str	r3, [r4, #8]
 8016752:	89a3      	ldrh	r3, [r4, #12]
 8016754:	071a      	lsls	r2, r3, #28
 8016756:	d52f      	bpl.n	80167b8 <__swbuf_r+0x84>
 8016758:	6923      	ldr	r3, [r4, #16]
 801675a:	b36b      	cbz	r3, 80167b8 <__swbuf_r+0x84>
 801675c:	6923      	ldr	r3, [r4, #16]
 801675e:	6820      	ldr	r0, [r4, #0]
 8016760:	1ac0      	subs	r0, r0, r3
 8016762:	6963      	ldr	r3, [r4, #20]
 8016764:	b2f6      	uxtb	r6, r6
 8016766:	4283      	cmp	r3, r0
 8016768:	4637      	mov	r7, r6
 801676a:	dc04      	bgt.n	8016776 <__swbuf_r+0x42>
 801676c:	4621      	mov	r1, r4
 801676e:	4628      	mov	r0, r5
 8016770:	f000 f93c 	bl	80169ec <_fflush_r>
 8016774:	bb30      	cbnz	r0, 80167c4 <__swbuf_r+0x90>
 8016776:	68a3      	ldr	r3, [r4, #8]
 8016778:	3b01      	subs	r3, #1
 801677a:	60a3      	str	r3, [r4, #8]
 801677c:	6823      	ldr	r3, [r4, #0]
 801677e:	1c5a      	adds	r2, r3, #1
 8016780:	6022      	str	r2, [r4, #0]
 8016782:	701e      	strb	r6, [r3, #0]
 8016784:	6963      	ldr	r3, [r4, #20]
 8016786:	3001      	adds	r0, #1
 8016788:	4283      	cmp	r3, r0
 801678a:	d004      	beq.n	8016796 <__swbuf_r+0x62>
 801678c:	89a3      	ldrh	r3, [r4, #12]
 801678e:	07db      	lsls	r3, r3, #31
 8016790:	d506      	bpl.n	80167a0 <__swbuf_r+0x6c>
 8016792:	2e0a      	cmp	r6, #10
 8016794:	d104      	bne.n	80167a0 <__swbuf_r+0x6c>
 8016796:	4621      	mov	r1, r4
 8016798:	4628      	mov	r0, r5
 801679a:	f000 f927 	bl	80169ec <_fflush_r>
 801679e:	b988      	cbnz	r0, 80167c4 <__swbuf_r+0x90>
 80167a0:	4638      	mov	r0, r7
 80167a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167a4:	4b0a      	ldr	r3, [pc, #40]	; (80167d0 <__swbuf_r+0x9c>)
 80167a6:	429c      	cmp	r4, r3
 80167a8:	d101      	bne.n	80167ae <__swbuf_r+0x7a>
 80167aa:	68ac      	ldr	r4, [r5, #8]
 80167ac:	e7cf      	b.n	801674e <__swbuf_r+0x1a>
 80167ae:	4b09      	ldr	r3, [pc, #36]	; (80167d4 <__swbuf_r+0xa0>)
 80167b0:	429c      	cmp	r4, r3
 80167b2:	bf08      	it	eq
 80167b4:	68ec      	ldreq	r4, [r5, #12]
 80167b6:	e7ca      	b.n	801674e <__swbuf_r+0x1a>
 80167b8:	4621      	mov	r1, r4
 80167ba:	4628      	mov	r0, r5
 80167bc:	f000 f81a 	bl	80167f4 <__swsetup_r>
 80167c0:	2800      	cmp	r0, #0
 80167c2:	d0cb      	beq.n	801675c <__swbuf_r+0x28>
 80167c4:	f04f 37ff 	mov.w	r7, #4294967295
 80167c8:	e7ea      	b.n	80167a0 <__swbuf_r+0x6c>
 80167ca:	bf00      	nop
 80167cc:	0801892c 	.word	0x0801892c
 80167d0:	0801894c 	.word	0x0801894c
 80167d4:	0801890c 	.word	0x0801890c

080167d8 <__ascii_wctomb>:
 80167d8:	b149      	cbz	r1, 80167ee <__ascii_wctomb+0x16>
 80167da:	2aff      	cmp	r2, #255	; 0xff
 80167dc:	bf85      	ittet	hi
 80167de:	238a      	movhi	r3, #138	; 0x8a
 80167e0:	6003      	strhi	r3, [r0, #0]
 80167e2:	700a      	strbls	r2, [r1, #0]
 80167e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80167e8:	bf98      	it	ls
 80167ea:	2001      	movls	r0, #1
 80167ec:	4770      	bx	lr
 80167ee:	4608      	mov	r0, r1
 80167f0:	4770      	bx	lr
	...

080167f4 <__swsetup_r>:
 80167f4:	4b32      	ldr	r3, [pc, #200]	; (80168c0 <__swsetup_r+0xcc>)
 80167f6:	b570      	push	{r4, r5, r6, lr}
 80167f8:	681d      	ldr	r5, [r3, #0]
 80167fa:	4606      	mov	r6, r0
 80167fc:	460c      	mov	r4, r1
 80167fe:	b125      	cbz	r5, 801680a <__swsetup_r+0x16>
 8016800:	69ab      	ldr	r3, [r5, #24]
 8016802:	b913      	cbnz	r3, 801680a <__swsetup_r+0x16>
 8016804:	4628      	mov	r0, r5
 8016806:	f000 f985 	bl	8016b14 <__sinit>
 801680a:	4b2e      	ldr	r3, [pc, #184]	; (80168c4 <__swsetup_r+0xd0>)
 801680c:	429c      	cmp	r4, r3
 801680e:	d10f      	bne.n	8016830 <__swsetup_r+0x3c>
 8016810:	686c      	ldr	r4, [r5, #4]
 8016812:	89a3      	ldrh	r3, [r4, #12]
 8016814:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016818:	0719      	lsls	r1, r3, #28
 801681a:	d42c      	bmi.n	8016876 <__swsetup_r+0x82>
 801681c:	06dd      	lsls	r5, r3, #27
 801681e:	d411      	bmi.n	8016844 <__swsetup_r+0x50>
 8016820:	2309      	movs	r3, #9
 8016822:	6033      	str	r3, [r6, #0]
 8016824:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016828:	81a3      	strh	r3, [r4, #12]
 801682a:	f04f 30ff 	mov.w	r0, #4294967295
 801682e:	e03e      	b.n	80168ae <__swsetup_r+0xba>
 8016830:	4b25      	ldr	r3, [pc, #148]	; (80168c8 <__swsetup_r+0xd4>)
 8016832:	429c      	cmp	r4, r3
 8016834:	d101      	bne.n	801683a <__swsetup_r+0x46>
 8016836:	68ac      	ldr	r4, [r5, #8]
 8016838:	e7eb      	b.n	8016812 <__swsetup_r+0x1e>
 801683a:	4b24      	ldr	r3, [pc, #144]	; (80168cc <__swsetup_r+0xd8>)
 801683c:	429c      	cmp	r4, r3
 801683e:	bf08      	it	eq
 8016840:	68ec      	ldreq	r4, [r5, #12]
 8016842:	e7e6      	b.n	8016812 <__swsetup_r+0x1e>
 8016844:	0758      	lsls	r0, r3, #29
 8016846:	d512      	bpl.n	801686e <__swsetup_r+0x7a>
 8016848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801684a:	b141      	cbz	r1, 801685e <__swsetup_r+0x6a>
 801684c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016850:	4299      	cmp	r1, r3
 8016852:	d002      	beq.n	801685a <__swsetup_r+0x66>
 8016854:	4630      	mov	r0, r6
 8016856:	f7ff fd0b 	bl	8016270 <_free_r>
 801685a:	2300      	movs	r3, #0
 801685c:	6363      	str	r3, [r4, #52]	; 0x34
 801685e:	89a3      	ldrh	r3, [r4, #12]
 8016860:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016864:	81a3      	strh	r3, [r4, #12]
 8016866:	2300      	movs	r3, #0
 8016868:	6063      	str	r3, [r4, #4]
 801686a:	6923      	ldr	r3, [r4, #16]
 801686c:	6023      	str	r3, [r4, #0]
 801686e:	89a3      	ldrh	r3, [r4, #12]
 8016870:	f043 0308 	orr.w	r3, r3, #8
 8016874:	81a3      	strh	r3, [r4, #12]
 8016876:	6923      	ldr	r3, [r4, #16]
 8016878:	b94b      	cbnz	r3, 801688e <__swsetup_r+0x9a>
 801687a:	89a3      	ldrh	r3, [r4, #12]
 801687c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016884:	d003      	beq.n	801688e <__swsetup_r+0x9a>
 8016886:	4621      	mov	r1, r4
 8016888:	4630      	mov	r0, r6
 801688a:	f000 fa07 	bl	8016c9c <__smakebuf_r>
 801688e:	89a0      	ldrh	r0, [r4, #12]
 8016890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016894:	f010 0301 	ands.w	r3, r0, #1
 8016898:	d00a      	beq.n	80168b0 <__swsetup_r+0xbc>
 801689a:	2300      	movs	r3, #0
 801689c:	60a3      	str	r3, [r4, #8]
 801689e:	6963      	ldr	r3, [r4, #20]
 80168a0:	425b      	negs	r3, r3
 80168a2:	61a3      	str	r3, [r4, #24]
 80168a4:	6923      	ldr	r3, [r4, #16]
 80168a6:	b943      	cbnz	r3, 80168ba <__swsetup_r+0xc6>
 80168a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80168ac:	d1ba      	bne.n	8016824 <__swsetup_r+0x30>
 80168ae:	bd70      	pop	{r4, r5, r6, pc}
 80168b0:	0781      	lsls	r1, r0, #30
 80168b2:	bf58      	it	pl
 80168b4:	6963      	ldrpl	r3, [r4, #20]
 80168b6:	60a3      	str	r3, [r4, #8]
 80168b8:	e7f4      	b.n	80168a4 <__swsetup_r+0xb0>
 80168ba:	2000      	movs	r0, #0
 80168bc:	e7f7      	b.n	80168ae <__swsetup_r+0xba>
 80168be:	bf00      	nop
 80168c0:	24000060 	.word	0x24000060
 80168c4:	0801892c 	.word	0x0801892c
 80168c8:	0801894c 	.word	0x0801894c
 80168cc:	0801890c 	.word	0x0801890c

080168d0 <abort>:
 80168d0:	b508      	push	{r3, lr}
 80168d2:	2006      	movs	r0, #6
 80168d4:	f000 fa4a 	bl	8016d6c <raise>
 80168d8:	2001      	movs	r0, #1
 80168da:	f7f2 fa93 	bl	8008e04 <_exit>
	...

080168e0 <__sflush_r>:
 80168e0:	898a      	ldrh	r2, [r1, #12]
 80168e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168e6:	4605      	mov	r5, r0
 80168e8:	0710      	lsls	r0, r2, #28
 80168ea:	460c      	mov	r4, r1
 80168ec:	d458      	bmi.n	80169a0 <__sflush_r+0xc0>
 80168ee:	684b      	ldr	r3, [r1, #4]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	dc05      	bgt.n	8016900 <__sflush_r+0x20>
 80168f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	dc02      	bgt.n	8016900 <__sflush_r+0x20>
 80168fa:	2000      	movs	r0, #0
 80168fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016900:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016902:	2e00      	cmp	r6, #0
 8016904:	d0f9      	beq.n	80168fa <__sflush_r+0x1a>
 8016906:	2300      	movs	r3, #0
 8016908:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801690c:	682f      	ldr	r7, [r5, #0]
 801690e:	602b      	str	r3, [r5, #0]
 8016910:	d032      	beq.n	8016978 <__sflush_r+0x98>
 8016912:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016914:	89a3      	ldrh	r3, [r4, #12]
 8016916:	075a      	lsls	r2, r3, #29
 8016918:	d505      	bpl.n	8016926 <__sflush_r+0x46>
 801691a:	6863      	ldr	r3, [r4, #4]
 801691c:	1ac0      	subs	r0, r0, r3
 801691e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016920:	b10b      	cbz	r3, 8016926 <__sflush_r+0x46>
 8016922:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016924:	1ac0      	subs	r0, r0, r3
 8016926:	2300      	movs	r3, #0
 8016928:	4602      	mov	r2, r0
 801692a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801692c:	6a21      	ldr	r1, [r4, #32]
 801692e:	4628      	mov	r0, r5
 8016930:	47b0      	blx	r6
 8016932:	1c43      	adds	r3, r0, #1
 8016934:	89a3      	ldrh	r3, [r4, #12]
 8016936:	d106      	bne.n	8016946 <__sflush_r+0x66>
 8016938:	6829      	ldr	r1, [r5, #0]
 801693a:	291d      	cmp	r1, #29
 801693c:	d82c      	bhi.n	8016998 <__sflush_r+0xb8>
 801693e:	4a2a      	ldr	r2, [pc, #168]	; (80169e8 <__sflush_r+0x108>)
 8016940:	40ca      	lsrs	r2, r1
 8016942:	07d6      	lsls	r6, r2, #31
 8016944:	d528      	bpl.n	8016998 <__sflush_r+0xb8>
 8016946:	2200      	movs	r2, #0
 8016948:	6062      	str	r2, [r4, #4]
 801694a:	04d9      	lsls	r1, r3, #19
 801694c:	6922      	ldr	r2, [r4, #16]
 801694e:	6022      	str	r2, [r4, #0]
 8016950:	d504      	bpl.n	801695c <__sflush_r+0x7c>
 8016952:	1c42      	adds	r2, r0, #1
 8016954:	d101      	bne.n	801695a <__sflush_r+0x7a>
 8016956:	682b      	ldr	r3, [r5, #0]
 8016958:	b903      	cbnz	r3, 801695c <__sflush_r+0x7c>
 801695a:	6560      	str	r0, [r4, #84]	; 0x54
 801695c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801695e:	602f      	str	r7, [r5, #0]
 8016960:	2900      	cmp	r1, #0
 8016962:	d0ca      	beq.n	80168fa <__sflush_r+0x1a>
 8016964:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016968:	4299      	cmp	r1, r3
 801696a:	d002      	beq.n	8016972 <__sflush_r+0x92>
 801696c:	4628      	mov	r0, r5
 801696e:	f7ff fc7f 	bl	8016270 <_free_r>
 8016972:	2000      	movs	r0, #0
 8016974:	6360      	str	r0, [r4, #52]	; 0x34
 8016976:	e7c1      	b.n	80168fc <__sflush_r+0x1c>
 8016978:	6a21      	ldr	r1, [r4, #32]
 801697a:	2301      	movs	r3, #1
 801697c:	4628      	mov	r0, r5
 801697e:	47b0      	blx	r6
 8016980:	1c41      	adds	r1, r0, #1
 8016982:	d1c7      	bne.n	8016914 <__sflush_r+0x34>
 8016984:	682b      	ldr	r3, [r5, #0]
 8016986:	2b00      	cmp	r3, #0
 8016988:	d0c4      	beq.n	8016914 <__sflush_r+0x34>
 801698a:	2b1d      	cmp	r3, #29
 801698c:	d001      	beq.n	8016992 <__sflush_r+0xb2>
 801698e:	2b16      	cmp	r3, #22
 8016990:	d101      	bne.n	8016996 <__sflush_r+0xb6>
 8016992:	602f      	str	r7, [r5, #0]
 8016994:	e7b1      	b.n	80168fa <__sflush_r+0x1a>
 8016996:	89a3      	ldrh	r3, [r4, #12]
 8016998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801699c:	81a3      	strh	r3, [r4, #12]
 801699e:	e7ad      	b.n	80168fc <__sflush_r+0x1c>
 80169a0:	690f      	ldr	r7, [r1, #16]
 80169a2:	2f00      	cmp	r7, #0
 80169a4:	d0a9      	beq.n	80168fa <__sflush_r+0x1a>
 80169a6:	0793      	lsls	r3, r2, #30
 80169a8:	680e      	ldr	r6, [r1, #0]
 80169aa:	bf08      	it	eq
 80169ac:	694b      	ldreq	r3, [r1, #20]
 80169ae:	600f      	str	r7, [r1, #0]
 80169b0:	bf18      	it	ne
 80169b2:	2300      	movne	r3, #0
 80169b4:	eba6 0807 	sub.w	r8, r6, r7
 80169b8:	608b      	str	r3, [r1, #8]
 80169ba:	f1b8 0f00 	cmp.w	r8, #0
 80169be:	dd9c      	ble.n	80168fa <__sflush_r+0x1a>
 80169c0:	6a21      	ldr	r1, [r4, #32]
 80169c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80169c4:	4643      	mov	r3, r8
 80169c6:	463a      	mov	r2, r7
 80169c8:	4628      	mov	r0, r5
 80169ca:	47b0      	blx	r6
 80169cc:	2800      	cmp	r0, #0
 80169ce:	dc06      	bgt.n	80169de <__sflush_r+0xfe>
 80169d0:	89a3      	ldrh	r3, [r4, #12]
 80169d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80169d6:	81a3      	strh	r3, [r4, #12]
 80169d8:	f04f 30ff 	mov.w	r0, #4294967295
 80169dc:	e78e      	b.n	80168fc <__sflush_r+0x1c>
 80169de:	4407      	add	r7, r0
 80169e0:	eba8 0800 	sub.w	r8, r8, r0
 80169e4:	e7e9      	b.n	80169ba <__sflush_r+0xda>
 80169e6:	bf00      	nop
 80169e8:	20400001 	.word	0x20400001

080169ec <_fflush_r>:
 80169ec:	b538      	push	{r3, r4, r5, lr}
 80169ee:	690b      	ldr	r3, [r1, #16]
 80169f0:	4605      	mov	r5, r0
 80169f2:	460c      	mov	r4, r1
 80169f4:	b913      	cbnz	r3, 80169fc <_fflush_r+0x10>
 80169f6:	2500      	movs	r5, #0
 80169f8:	4628      	mov	r0, r5
 80169fa:	bd38      	pop	{r3, r4, r5, pc}
 80169fc:	b118      	cbz	r0, 8016a06 <_fflush_r+0x1a>
 80169fe:	6983      	ldr	r3, [r0, #24]
 8016a00:	b90b      	cbnz	r3, 8016a06 <_fflush_r+0x1a>
 8016a02:	f000 f887 	bl	8016b14 <__sinit>
 8016a06:	4b14      	ldr	r3, [pc, #80]	; (8016a58 <_fflush_r+0x6c>)
 8016a08:	429c      	cmp	r4, r3
 8016a0a:	d11b      	bne.n	8016a44 <_fflush_r+0x58>
 8016a0c:	686c      	ldr	r4, [r5, #4]
 8016a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d0ef      	beq.n	80169f6 <_fflush_r+0xa>
 8016a16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016a18:	07d0      	lsls	r0, r2, #31
 8016a1a:	d404      	bmi.n	8016a26 <_fflush_r+0x3a>
 8016a1c:	0599      	lsls	r1, r3, #22
 8016a1e:	d402      	bmi.n	8016a26 <_fflush_r+0x3a>
 8016a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016a22:	f000 f915 	bl	8016c50 <__retarget_lock_acquire_recursive>
 8016a26:	4628      	mov	r0, r5
 8016a28:	4621      	mov	r1, r4
 8016a2a:	f7ff ff59 	bl	80168e0 <__sflush_r>
 8016a2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016a30:	07da      	lsls	r2, r3, #31
 8016a32:	4605      	mov	r5, r0
 8016a34:	d4e0      	bmi.n	80169f8 <_fflush_r+0xc>
 8016a36:	89a3      	ldrh	r3, [r4, #12]
 8016a38:	059b      	lsls	r3, r3, #22
 8016a3a:	d4dd      	bmi.n	80169f8 <_fflush_r+0xc>
 8016a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016a3e:	f000 f908 	bl	8016c52 <__retarget_lock_release_recursive>
 8016a42:	e7d9      	b.n	80169f8 <_fflush_r+0xc>
 8016a44:	4b05      	ldr	r3, [pc, #20]	; (8016a5c <_fflush_r+0x70>)
 8016a46:	429c      	cmp	r4, r3
 8016a48:	d101      	bne.n	8016a4e <_fflush_r+0x62>
 8016a4a:	68ac      	ldr	r4, [r5, #8]
 8016a4c:	e7df      	b.n	8016a0e <_fflush_r+0x22>
 8016a4e:	4b04      	ldr	r3, [pc, #16]	; (8016a60 <_fflush_r+0x74>)
 8016a50:	429c      	cmp	r4, r3
 8016a52:	bf08      	it	eq
 8016a54:	68ec      	ldreq	r4, [r5, #12]
 8016a56:	e7da      	b.n	8016a0e <_fflush_r+0x22>
 8016a58:	0801892c 	.word	0x0801892c
 8016a5c:	0801894c 	.word	0x0801894c
 8016a60:	0801890c 	.word	0x0801890c

08016a64 <std>:
 8016a64:	2300      	movs	r3, #0
 8016a66:	b510      	push	{r4, lr}
 8016a68:	4604      	mov	r4, r0
 8016a6a:	e9c0 3300 	strd	r3, r3, [r0]
 8016a6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016a72:	6083      	str	r3, [r0, #8]
 8016a74:	8181      	strh	r1, [r0, #12]
 8016a76:	6643      	str	r3, [r0, #100]	; 0x64
 8016a78:	81c2      	strh	r2, [r0, #14]
 8016a7a:	6183      	str	r3, [r0, #24]
 8016a7c:	4619      	mov	r1, r3
 8016a7e:	2208      	movs	r2, #8
 8016a80:	305c      	adds	r0, #92	; 0x5c
 8016a82:	f7fd fe01 	bl	8014688 <memset>
 8016a86:	4b05      	ldr	r3, [pc, #20]	; (8016a9c <std+0x38>)
 8016a88:	6263      	str	r3, [r4, #36]	; 0x24
 8016a8a:	4b05      	ldr	r3, [pc, #20]	; (8016aa0 <std+0x3c>)
 8016a8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8016a8e:	4b05      	ldr	r3, [pc, #20]	; (8016aa4 <std+0x40>)
 8016a90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016a92:	4b05      	ldr	r3, [pc, #20]	; (8016aa8 <std+0x44>)
 8016a94:	6224      	str	r4, [r4, #32]
 8016a96:	6323      	str	r3, [r4, #48]	; 0x30
 8016a98:	bd10      	pop	{r4, pc}
 8016a9a:	bf00      	nop
 8016a9c:	08016da5 	.word	0x08016da5
 8016aa0:	08016dc7 	.word	0x08016dc7
 8016aa4:	08016dff 	.word	0x08016dff
 8016aa8:	08016e23 	.word	0x08016e23

08016aac <_cleanup_r>:
 8016aac:	4901      	ldr	r1, [pc, #4]	; (8016ab4 <_cleanup_r+0x8>)
 8016aae:	f000 b8af 	b.w	8016c10 <_fwalk_reent>
 8016ab2:	bf00      	nop
 8016ab4:	080169ed 	.word	0x080169ed

08016ab8 <__sfmoreglue>:
 8016ab8:	b570      	push	{r4, r5, r6, lr}
 8016aba:	1e4a      	subs	r2, r1, #1
 8016abc:	2568      	movs	r5, #104	; 0x68
 8016abe:	4355      	muls	r5, r2
 8016ac0:	460e      	mov	r6, r1
 8016ac2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016ac6:	f7ff fc23 	bl	8016310 <_malloc_r>
 8016aca:	4604      	mov	r4, r0
 8016acc:	b140      	cbz	r0, 8016ae0 <__sfmoreglue+0x28>
 8016ace:	2100      	movs	r1, #0
 8016ad0:	e9c0 1600 	strd	r1, r6, [r0]
 8016ad4:	300c      	adds	r0, #12
 8016ad6:	60a0      	str	r0, [r4, #8]
 8016ad8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016adc:	f7fd fdd4 	bl	8014688 <memset>
 8016ae0:	4620      	mov	r0, r4
 8016ae2:	bd70      	pop	{r4, r5, r6, pc}

08016ae4 <__sfp_lock_acquire>:
 8016ae4:	4801      	ldr	r0, [pc, #4]	; (8016aec <__sfp_lock_acquire+0x8>)
 8016ae6:	f000 b8b3 	b.w	8016c50 <__retarget_lock_acquire_recursive>
 8016aea:	bf00      	nop
 8016aec:	24001400 	.word	0x24001400

08016af0 <__sfp_lock_release>:
 8016af0:	4801      	ldr	r0, [pc, #4]	; (8016af8 <__sfp_lock_release+0x8>)
 8016af2:	f000 b8ae 	b.w	8016c52 <__retarget_lock_release_recursive>
 8016af6:	bf00      	nop
 8016af8:	24001400 	.word	0x24001400

08016afc <__sinit_lock_acquire>:
 8016afc:	4801      	ldr	r0, [pc, #4]	; (8016b04 <__sinit_lock_acquire+0x8>)
 8016afe:	f000 b8a7 	b.w	8016c50 <__retarget_lock_acquire_recursive>
 8016b02:	bf00      	nop
 8016b04:	240013fb 	.word	0x240013fb

08016b08 <__sinit_lock_release>:
 8016b08:	4801      	ldr	r0, [pc, #4]	; (8016b10 <__sinit_lock_release+0x8>)
 8016b0a:	f000 b8a2 	b.w	8016c52 <__retarget_lock_release_recursive>
 8016b0e:	bf00      	nop
 8016b10:	240013fb 	.word	0x240013fb

08016b14 <__sinit>:
 8016b14:	b510      	push	{r4, lr}
 8016b16:	4604      	mov	r4, r0
 8016b18:	f7ff fff0 	bl	8016afc <__sinit_lock_acquire>
 8016b1c:	69a3      	ldr	r3, [r4, #24]
 8016b1e:	b11b      	cbz	r3, 8016b28 <__sinit+0x14>
 8016b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b24:	f7ff bff0 	b.w	8016b08 <__sinit_lock_release>
 8016b28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016b2c:	6523      	str	r3, [r4, #80]	; 0x50
 8016b2e:	4b13      	ldr	r3, [pc, #76]	; (8016b7c <__sinit+0x68>)
 8016b30:	4a13      	ldr	r2, [pc, #76]	; (8016b80 <__sinit+0x6c>)
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	62a2      	str	r2, [r4, #40]	; 0x28
 8016b36:	42a3      	cmp	r3, r4
 8016b38:	bf04      	itt	eq
 8016b3a:	2301      	moveq	r3, #1
 8016b3c:	61a3      	streq	r3, [r4, #24]
 8016b3e:	4620      	mov	r0, r4
 8016b40:	f000 f820 	bl	8016b84 <__sfp>
 8016b44:	6060      	str	r0, [r4, #4]
 8016b46:	4620      	mov	r0, r4
 8016b48:	f000 f81c 	bl	8016b84 <__sfp>
 8016b4c:	60a0      	str	r0, [r4, #8]
 8016b4e:	4620      	mov	r0, r4
 8016b50:	f000 f818 	bl	8016b84 <__sfp>
 8016b54:	2200      	movs	r2, #0
 8016b56:	60e0      	str	r0, [r4, #12]
 8016b58:	2104      	movs	r1, #4
 8016b5a:	6860      	ldr	r0, [r4, #4]
 8016b5c:	f7ff ff82 	bl	8016a64 <std>
 8016b60:	68a0      	ldr	r0, [r4, #8]
 8016b62:	2201      	movs	r2, #1
 8016b64:	2109      	movs	r1, #9
 8016b66:	f7ff ff7d 	bl	8016a64 <std>
 8016b6a:	68e0      	ldr	r0, [r4, #12]
 8016b6c:	2202      	movs	r2, #2
 8016b6e:	2112      	movs	r1, #18
 8016b70:	f7ff ff78 	bl	8016a64 <std>
 8016b74:	2301      	movs	r3, #1
 8016b76:	61a3      	str	r3, [r4, #24]
 8016b78:	e7d2      	b.n	8016b20 <__sinit+0xc>
 8016b7a:	bf00      	nop
 8016b7c:	08018588 	.word	0x08018588
 8016b80:	08016aad 	.word	0x08016aad

08016b84 <__sfp>:
 8016b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b86:	4607      	mov	r7, r0
 8016b88:	f7ff ffac 	bl	8016ae4 <__sfp_lock_acquire>
 8016b8c:	4b1e      	ldr	r3, [pc, #120]	; (8016c08 <__sfp+0x84>)
 8016b8e:	681e      	ldr	r6, [r3, #0]
 8016b90:	69b3      	ldr	r3, [r6, #24]
 8016b92:	b913      	cbnz	r3, 8016b9a <__sfp+0x16>
 8016b94:	4630      	mov	r0, r6
 8016b96:	f7ff ffbd 	bl	8016b14 <__sinit>
 8016b9a:	3648      	adds	r6, #72	; 0x48
 8016b9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016ba0:	3b01      	subs	r3, #1
 8016ba2:	d503      	bpl.n	8016bac <__sfp+0x28>
 8016ba4:	6833      	ldr	r3, [r6, #0]
 8016ba6:	b30b      	cbz	r3, 8016bec <__sfp+0x68>
 8016ba8:	6836      	ldr	r6, [r6, #0]
 8016baa:	e7f7      	b.n	8016b9c <__sfp+0x18>
 8016bac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016bb0:	b9d5      	cbnz	r5, 8016be8 <__sfp+0x64>
 8016bb2:	4b16      	ldr	r3, [pc, #88]	; (8016c0c <__sfp+0x88>)
 8016bb4:	60e3      	str	r3, [r4, #12]
 8016bb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016bba:	6665      	str	r5, [r4, #100]	; 0x64
 8016bbc:	f000 f847 	bl	8016c4e <__retarget_lock_init_recursive>
 8016bc0:	f7ff ff96 	bl	8016af0 <__sfp_lock_release>
 8016bc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016bc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016bcc:	6025      	str	r5, [r4, #0]
 8016bce:	61a5      	str	r5, [r4, #24]
 8016bd0:	2208      	movs	r2, #8
 8016bd2:	4629      	mov	r1, r5
 8016bd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016bd8:	f7fd fd56 	bl	8014688 <memset>
 8016bdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016be0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016be4:	4620      	mov	r0, r4
 8016be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016be8:	3468      	adds	r4, #104	; 0x68
 8016bea:	e7d9      	b.n	8016ba0 <__sfp+0x1c>
 8016bec:	2104      	movs	r1, #4
 8016bee:	4638      	mov	r0, r7
 8016bf0:	f7ff ff62 	bl	8016ab8 <__sfmoreglue>
 8016bf4:	4604      	mov	r4, r0
 8016bf6:	6030      	str	r0, [r6, #0]
 8016bf8:	2800      	cmp	r0, #0
 8016bfa:	d1d5      	bne.n	8016ba8 <__sfp+0x24>
 8016bfc:	f7ff ff78 	bl	8016af0 <__sfp_lock_release>
 8016c00:	230c      	movs	r3, #12
 8016c02:	603b      	str	r3, [r7, #0]
 8016c04:	e7ee      	b.n	8016be4 <__sfp+0x60>
 8016c06:	bf00      	nop
 8016c08:	08018588 	.word	0x08018588
 8016c0c:	ffff0001 	.word	0xffff0001

08016c10 <_fwalk_reent>:
 8016c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c14:	4606      	mov	r6, r0
 8016c16:	4688      	mov	r8, r1
 8016c18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016c1c:	2700      	movs	r7, #0
 8016c1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016c22:	f1b9 0901 	subs.w	r9, r9, #1
 8016c26:	d505      	bpl.n	8016c34 <_fwalk_reent+0x24>
 8016c28:	6824      	ldr	r4, [r4, #0]
 8016c2a:	2c00      	cmp	r4, #0
 8016c2c:	d1f7      	bne.n	8016c1e <_fwalk_reent+0xe>
 8016c2e:	4638      	mov	r0, r7
 8016c30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016c34:	89ab      	ldrh	r3, [r5, #12]
 8016c36:	2b01      	cmp	r3, #1
 8016c38:	d907      	bls.n	8016c4a <_fwalk_reent+0x3a>
 8016c3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016c3e:	3301      	adds	r3, #1
 8016c40:	d003      	beq.n	8016c4a <_fwalk_reent+0x3a>
 8016c42:	4629      	mov	r1, r5
 8016c44:	4630      	mov	r0, r6
 8016c46:	47c0      	blx	r8
 8016c48:	4307      	orrs	r7, r0
 8016c4a:	3568      	adds	r5, #104	; 0x68
 8016c4c:	e7e9      	b.n	8016c22 <_fwalk_reent+0x12>

08016c4e <__retarget_lock_init_recursive>:
 8016c4e:	4770      	bx	lr

08016c50 <__retarget_lock_acquire_recursive>:
 8016c50:	4770      	bx	lr

08016c52 <__retarget_lock_release_recursive>:
 8016c52:	4770      	bx	lr

08016c54 <__swhatbuf_r>:
 8016c54:	b570      	push	{r4, r5, r6, lr}
 8016c56:	460e      	mov	r6, r1
 8016c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c5c:	2900      	cmp	r1, #0
 8016c5e:	b096      	sub	sp, #88	; 0x58
 8016c60:	4614      	mov	r4, r2
 8016c62:	461d      	mov	r5, r3
 8016c64:	da07      	bge.n	8016c76 <__swhatbuf_r+0x22>
 8016c66:	2300      	movs	r3, #0
 8016c68:	602b      	str	r3, [r5, #0]
 8016c6a:	89b3      	ldrh	r3, [r6, #12]
 8016c6c:	061a      	lsls	r2, r3, #24
 8016c6e:	d410      	bmi.n	8016c92 <__swhatbuf_r+0x3e>
 8016c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016c74:	e00e      	b.n	8016c94 <__swhatbuf_r+0x40>
 8016c76:	466a      	mov	r2, sp
 8016c78:	f000 f8fa 	bl	8016e70 <_fstat_r>
 8016c7c:	2800      	cmp	r0, #0
 8016c7e:	dbf2      	blt.n	8016c66 <__swhatbuf_r+0x12>
 8016c80:	9a01      	ldr	r2, [sp, #4]
 8016c82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016c86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016c8a:	425a      	negs	r2, r3
 8016c8c:	415a      	adcs	r2, r3
 8016c8e:	602a      	str	r2, [r5, #0]
 8016c90:	e7ee      	b.n	8016c70 <__swhatbuf_r+0x1c>
 8016c92:	2340      	movs	r3, #64	; 0x40
 8016c94:	2000      	movs	r0, #0
 8016c96:	6023      	str	r3, [r4, #0]
 8016c98:	b016      	add	sp, #88	; 0x58
 8016c9a:	bd70      	pop	{r4, r5, r6, pc}

08016c9c <__smakebuf_r>:
 8016c9c:	898b      	ldrh	r3, [r1, #12]
 8016c9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016ca0:	079d      	lsls	r5, r3, #30
 8016ca2:	4606      	mov	r6, r0
 8016ca4:	460c      	mov	r4, r1
 8016ca6:	d507      	bpl.n	8016cb8 <__smakebuf_r+0x1c>
 8016ca8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016cac:	6023      	str	r3, [r4, #0]
 8016cae:	6123      	str	r3, [r4, #16]
 8016cb0:	2301      	movs	r3, #1
 8016cb2:	6163      	str	r3, [r4, #20]
 8016cb4:	b002      	add	sp, #8
 8016cb6:	bd70      	pop	{r4, r5, r6, pc}
 8016cb8:	ab01      	add	r3, sp, #4
 8016cba:	466a      	mov	r2, sp
 8016cbc:	f7ff ffca 	bl	8016c54 <__swhatbuf_r>
 8016cc0:	9900      	ldr	r1, [sp, #0]
 8016cc2:	4605      	mov	r5, r0
 8016cc4:	4630      	mov	r0, r6
 8016cc6:	f7ff fb23 	bl	8016310 <_malloc_r>
 8016cca:	b948      	cbnz	r0, 8016ce0 <__smakebuf_r+0x44>
 8016ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016cd0:	059a      	lsls	r2, r3, #22
 8016cd2:	d4ef      	bmi.n	8016cb4 <__smakebuf_r+0x18>
 8016cd4:	f023 0303 	bic.w	r3, r3, #3
 8016cd8:	f043 0302 	orr.w	r3, r3, #2
 8016cdc:	81a3      	strh	r3, [r4, #12]
 8016cde:	e7e3      	b.n	8016ca8 <__smakebuf_r+0xc>
 8016ce0:	4b0d      	ldr	r3, [pc, #52]	; (8016d18 <__smakebuf_r+0x7c>)
 8016ce2:	62b3      	str	r3, [r6, #40]	; 0x28
 8016ce4:	89a3      	ldrh	r3, [r4, #12]
 8016ce6:	6020      	str	r0, [r4, #0]
 8016ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016cec:	81a3      	strh	r3, [r4, #12]
 8016cee:	9b00      	ldr	r3, [sp, #0]
 8016cf0:	6163      	str	r3, [r4, #20]
 8016cf2:	9b01      	ldr	r3, [sp, #4]
 8016cf4:	6120      	str	r0, [r4, #16]
 8016cf6:	b15b      	cbz	r3, 8016d10 <__smakebuf_r+0x74>
 8016cf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016cfc:	4630      	mov	r0, r6
 8016cfe:	f000 f8c9 	bl	8016e94 <_isatty_r>
 8016d02:	b128      	cbz	r0, 8016d10 <__smakebuf_r+0x74>
 8016d04:	89a3      	ldrh	r3, [r4, #12]
 8016d06:	f023 0303 	bic.w	r3, r3, #3
 8016d0a:	f043 0301 	orr.w	r3, r3, #1
 8016d0e:	81a3      	strh	r3, [r4, #12]
 8016d10:	89a0      	ldrh	r0, [r4, #12]
 8016d12:	4305      	orrs	r5, r0
 8016d14:	81a5      	strh	r5, [r4, #12]
 8016d16:	e7cd      	b.n	8016cb4 <__smakebuf_r+0x18>
 8016d18:	08016aad 	.word	0x08016aad

08016d1c <_raise_r>:
 8016d1c:	291f      	cmp	r1, #31
 8016d1e:	b538      	push	{r3, r4, r5, lr}
 8016d20:	4604      	mov	r4, r0
 8016d22:	460d      	mov	r5, r1
 8016d24:	d904      	bls.n	8016d30 <_raise_r+0x14>
 8016d26:	2316      	movs	r3, #22
 8016d28:	6003      	str	r3, [r0, #0]
 8016d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8016d2e:	bd38      	pop	{r3, r4, r5, pc}
 8016d30:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016d32:	b112      	cbz	r2, 8016d3a <_raise_r+0x1e>
 8016d34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016d38:	b94b      	cbnz	r3, 8016d4e <_raise_r+0x32>
 8016d3a:	4620      	mov	r0, r4
 8016d3c:	f000 f830 	bl	8016da0 <_getpid_r>
 8016d40:	462a      	mov	r2, r5
 8016d42:	4601      	mov	r1, r0
 8016d44:	4620      	mov	r0, r4
 8016d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016d4a:	f000 b817 	b.w	8016d7c <_kill_r>
 8016d4e:	2b01      	cmp	r3, #1
 8016d50:	d00a      	beq.n	8016d68 <_raise_r+0x4c>
 8016d52:	1c59      	adds	r1, r3, #1
 8016d54:	d103      	bne.n	8016d5e <_raise_r+0x42>
 8016d56:	2316      	movs	r3, #22
 8016d58:	6003      	str	r3, [r0, #0]
 8016d5a:	2001      	movs	r0, #1
 8016d5c:	e7e7      	b.n	8016d2e <_raise_r+0x12>
 8016d5e:	2400      	movs	r4, #0
 8016d60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016d64:	4628      	mov	r0, r5
 8016d66:	4798      	blx	r3
 8016d68:	2000      	movs	r0, #0
 8016d6a:	e7e0      	b.n	8016d2e <_raise_r+0x12>

08016d6c <raise>:
 8016d6c:	4b02      	ldr	r3, [pc, #8]	; (8016d78 <raise+0xc>)
 8016d6e:	4601      	mov	r1, r0
 8016d70:	6818      	ldr	r0, [r3, #0]
 8016d72:	f7ff bfd3 	b.w	8016d1c <_raise_r>
 8016d76:	bf00      	nop
 8016d78:	24000060 	.word	0x24000060

08016d7c <_kill_r>:
 8016d7c:	b538      	push	{r3, r4, r5, lr}
 8016d7e:	4d07      	ldr	r5, [pc, #28]	; (8016d9c <_kill_r+0x20>)
 8016d80:	2300      	movs	r3, #0
 8016d82:	4604      	mov	r4, r0
 8016d84:	4608      	mov	r0, r1
 8016d86:	4611      	mov	r1, r2
 8016d88:	602b      	str	r3, [r5, #0]
 8016d8a:	f7f2 f82b 	bl	8008de4 <_kill>
 8016d8e:	1c43      	adds	r3, r0, #1
 8016d90:	d102      	bne.n	8016d98 <_kill_r+0x1c>
 8016d92:	682b      	ldr	r3, [r5, #0]
 8016d94:	b103      	cbz	r3, 8016d98 <_kill_r+0x1c>
 8016d96:	6023      	str	r3, [r4, #0]
 8016d98:	bd38      	pop	{r3, r4, r5, pc}
 8016d9a:	bf00      	nop
 8016d9c:	240013f4 	.word	0x240013f4

08016da0 <_getpid_r>:
 8016da0:	f7f2 b818 	b.w	8008dd4 <_getpid>

08016da4 <__sread>:
 8016da4:	b510      	push	{r4, lr}
 8016da6:	460c      	mov	r4, r1
 8016da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016dac:	f000 f894 	bl	8016ed8 <_read_r>
 8016db0:	2800      	cmp	r0, #0
 8016db2:	bfab      	itete	ge
 8016db4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016db6:	89a3      	ldrhlt	r3, [r4, #12]
 8016db8:	181b      	addge	r3, r3, r0
 8016dba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016dbe:	bfac      	ite	ge
 8016dc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8016dc2:	81a3      	strhlt	r3, [r4, #12]
 8016dc4:	bd10      	pop	{r4, pc}

08016dc6 <__swrite>:
 8016dc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dca:	461f      	mov	r7, r3
 8016dcc:	898b      	ldrh	r3, [r1, #12]
 8016dce:	05db      	lsls	r3, r3, #23
 8016dd0:	4605      	mov	r5, r0
 8016dd2:	460c      	mov	r4, r1
 8016dd4:	4616      	mov	r6, r2
 8016dd6:	d505      	bpl.n	8016de4 <__swrite+0x1e>
 8016dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ddc:	2302      	movs	r3, #2
 8016dde:	2200      	movs	r2, #0
 8016de0:	f000 f868 	bl	8016eb4 <_lseek_r>
 8016de4:	89a3      	ldrh	r3, [r4, #12]
 8016de6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016dea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016dee:	81a3      	strh	r3, [r4, #12]
 8016df0:	4632      	mov	r2, r6
 8016df2:	463b      	mov	r3, r7
 8016df4:	4628      	mov	r0, r5
 8016df6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016dfa:	f000 b817 	b.w	8016e2c <_write_r>

08016dfe <__sseek>:
 8016dfe:	b510      	push	{r4, lr}
 8016e00:	460c      	mov	r4, r1
 8016e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e06:	f000 f855 	bl	8016eb4 <_lseek_r>
 8016e0a:	1c43      	adds	r3, r0, #1
 8016e0c:	89a3      	ldrh	r3, [r4, #12]
 8016e0e:	bf15      	itete	ne
 8016e10:	6560      	strne	r0, [r4, #84]	; 0x54
 8016e12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016e16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016e1a:	81a3      	strheq	r3, [r4, #12]
 8016e1c:	bf18      	it	ne
 8016e1e:	81a3      	strhne	r3, [r4, #12]
 8016e20:	bd10      	pop	{r4, pc}

08016e22 <__sclose>:
 8016e22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e26:	f000 b813 	b.w	8016e50 <_close_r>
	...

08016e2c <_write_r>:
 8016e2c:	b538      	push	{r3, r4, r5, lr}
 8016e2e:	4d07      	ldr	r5, [pc, #28]	; (8016e4c <_write_r+0x20>)
 8016e30:	4604      	mov	r4, r0
 8016e32:	4608      	mov	r0, r1
 8016e34:	4611      	mov	r1, r2
 8016e36:	2200      	movs	r2, #0
 8016e38:	602a      	str	r2, [r5, #0]
 8016e3a:	461a      	mov	r2, r3
 8016e3c:	f7f2 f809 	bl	8008e52 <_write>
 8016e40:	1c43      	adds	r3, r0, #1
 8016e42:	d102      	bne.n	8016e4a <_write_r+0x1e>
 8016e44:	682b      	ldr	r3, [r5, #0]
 8016e46:	b103      	cbz	r3, 8016e4a <_write_r+0x1e>
 8016e48:	6023      	str	r3, [r4, #0]
 8016e4a:	bd38      	pop	{r3, r4, r5, pc}
 8016e4c:	240013f4 	.word	0x240013f4

08016e50 <_close_r>:
 8016e50:	b538      	push	{r3, r4, r5, lr}
 8016e52:	4d06      	ldr	r5, [pc, #24]	; (8016e6c <_close_r+0x1c>)
 8016e54:	2300      	movs	r3, #0
 8016e56:	4604      	mov	r4, r0
 8016e58:	4608      	mov	r0, r1
 8016e5a:	602b      	str	r3, [r5, #0]
 8016e5c:	f7f2 f815 	bl	8008e8a <_close>
 8016e60:	1c43      	adds	r3, r0, #1
 8016e62:	d102      	bne.n	8016e6a <_close_r+0x1a>
 8016e64:	682b      	ldr	r3, [r5, #0]
 8016e66:	b103      	cbz	r3, 8016e6a <_close_r+0x1a>
 8016e68:	6023      	str	r3, [r4, #0]
 8016e6a:	bd38      	pop	{r3, r4, r5, pc}
 8016e6c:	240013f4 	.word	0x240013f4

08016e70 <_fstat_r>:
 8016e70:	b538      	push	{r3, r4, r5, lr}
 8016e72:	4d07      	ldr	r5, [pc, #28]	; (8016e90 <_fstat_r+0x20>)
 8016e74:	2300      	movs	r3, #0
 8016e76:	4604      	mov	r4, r0
 8016e78:	4608      	mov	r0, r1
 8016e7a:	4611      	mov	r1, r2
 8016e7c:	602b      	str	r3, [r5, #0]
 8016e7e:	f7f2 f810 	bl	8008ea2 <_fstat>
 8016e82:	1c43      	adds	r3, r0, #1
 8016e84:	d102      	bne.n	8016e8c <_fstat_r+0x1c>
 8016e86:	682b      	ldr	r3, [r5, #0]
 8016e88:	b103      	cbz	r3, 8016e8c <_fstat_r+0x1c>
 8016e8a:	6023      	str	r3, [r4, #0]
 8016e8c:	bd38      	pop	{r3, r4, r5, pc}
 8016e8e:	bf00      	nop
 8016e90:	240013f4 	.word	0x240013f4

08016e94 <_isatty_r>:
 8016e94:	b538      	push	{r3, r4, r5, lr}
 8016e96:	4d06      	ldr	r5, [pc, #24]	; (8016eb0 <_isatty_r+0x1c>)
 8016e98:	2300      	movs	r3, #0
 8016e9a:	4604      	mov	r4, r0
 8016e9c:	4608      	mov	r0, r1
 8016e9e:	602b      	str	r3, [r5, #0]
 8016ea0:	f7f2 f80f 	bl	8008ec2 <_isatty>
 8016ea4:	1c43      	adds	r3, r0, #1
 8016ea6:	d102      	bne.n	8016eae <_isatty_r+0x1a>
 8016ea8:	682b      	ldr	r3, [r5, #0]
 8016eaa:	b103      	cbz	r3, 8016eae <_isatty_r+0x1a>
 8016eac:	6023      	str	r3, [r4, #0]
 8016eae:	bd38      	pop	{r3, r4, r5, pc}
 8016eb0:	240013f4 	.word	0x240013f4

08016eb4 <_lseek_r>:
 8016eb4:	b538      	push	{r3, r4, r5, lr}
 8016eb6:	4d07      	ldr	r5, [pc, #28]	; (8016ed4 <_lseek_r+0x20>)
 8016eb8:	4604      	mov	r4, r0
 8016eba:	4608      	mov	r0, r1
 8016ebc:	4611      	mov	r1, r2
 8016ebe:	2200      	movs	r2, #0
 8016ec0:	602a      	str	r2, [r5, #0]
 8016ec2:	461a      	mov	r2, r3
 8016ec4:	f7f2 f808 	bl	8008ed8 <_lseek>
 8016ec8:	1c43      	adds	r3, r0, #1
 8016eca:	d102      	bne.n	8016ed2 <_lseek_r+0x1e>
 8016ecc:	682b      	ldr	r3, [r5, #0]
 8016ece:	b103      	cbz	r3, 8016ed2 <_lseek_r+0x1e>
 8016ed0:	6023      	str	r3, [r4, #0]
 8016ed2:	bd38      	pop	{r3, r4, r5, pc}
 8016ed4:	240013f4 	.word	0x240013f4

08016ed8 <_read_r>:
 8016ed8:	b538      	push	{r3, r4, r5, lr}
 8016eda:	4d07      	ldr	r5, [pc, #28]	; (8016ef8 <_read_r+0x20>)
 8016edc:	4604      	mov	r4, r0
 8016ede:	4608      	mov	r0, r1
 8016ee0:	4611      	mov	r1, r2
 8016ee2:	2200      	movs	r2, #0
 8016ee4:	602a      	str	r2, [r5, #0]
 8016ee6:	461a      	mov	r2, r3
 8016ee8:	f7f1 ff96 	bl	8008e18 <_read>
 8016eec:	1c43      	adds	r3, r0, #1
 8016eee:	d102      	bne.n	8016ef6 <_read_r+0x1e>
 8016ef0:	682b      	ldr	r3, [r5, #0]
 8016ef2:	b103      	cbz	r3, 8016ef6 <_read_r+0x1e>
 8016ef4:	6023      	str	r3, [r4, #0]
 8016ef6:	bd38      	pop	{r3, r4, r5, pc}
 8016ef8:	240013f4 	.word	0x240013f4

08016efc <checkint>:
 8016efc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016f00:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8016f04:	429a      	cmp	r2, r3
 8016f06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f08:	dd2b      	ble.n	8016f62 <checkint+0x66>
 8016f0a:	f240 4333 	movw	r3, #1075	; 0x433
 8016f0e:	429a      	cmp	r2, r3
 8016f10:	dc25      	bgt.n	8016f5e <checkint+0x62>
 8016f12:	1a9b      	subs	r3, r3, r2
 8016f14:	f1a3 0620 	sub.w	r6, r3, #32
 8016f18:	f04f 32ff 	mov.w	r2, #4294967295
 8016f1c:	fa02 f606 	lsl.w	r6, r2, r6
 8016f20:	fa02 f403 	lsl.w	r4, r2, r3
 8016f24:	f1c3 0520 	rsb	r5, r3, #32
 8016f28:	4334      	orrs	r4, r6
 8016f2a:	fa22 f505 	lsr.w	r5, r2, r5
 8016f2e:	432c      	orrs	r4, r5
 8016f30:	409a      	lsls	r2, r3
 8016f32:	ea20 0602 	bic.w	r6, r0, r2
 8016f36:	ea21 0704 	bic.w	r7, r1, r4
 8016f3a:	ea56 0207 	orrs.w	r2, r6, r7
 8016f3e:	f1a3 0420 	sub.w	r4, r3, #32
 8016f42:	f1c3 0220 	rsb	r2, r3, #32
 8016f46:	d10c      	bne.n	8016f62 <checkint+0x66>
 8016f48:	40d8      	lsrs	r0, r3
 8016f4a:	fa01 f302 	lsl.w	r3, r1, r2
 8016f4e:	4318      	orrs	r0, r3
 8016f50:	40e1      	lsrs	r1, r4
 8016f52:	4308      	orrs	r0, r1
 8016f54:	f000 0301 	and.w	r3, r0, #1
 8016f58:	f1c3 0002 	rsb	r0, r3, #2
 8016f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f5e:	2002      	movs	r0, #2
 8016f60:	e7fc      	b.n	8016f5c <checkint+0x60>
 8016f62:	2000      	movs	r0, #0
 8016f64:	e7fa      	b.n	8016f5c <checkint+0x60>
	...

08016f68 <pow>:
 8016f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f6c:	ed2d 8b0a 	vpush	{d8-d12}
 8016f70:	b09b      	sub	sp, #108	; 0x6c
 8016f72:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016f76:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8016f7a:	ed8d 1b00 	vstr	d1, [sp]
 8016f7e:	ea4f 5915 	mov.w	r9, r5, lsr #20
 8016f82:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016f86:	f109 30ff 	add.w	r0, r9, #4294967295
 8016f8a:	f240 71fd 	movw	r1, #2045	; 0x7fd
 8016f8e:	4288      	cmp	r0, r1
 8016f90:	46cc      	mov	ip, r9
 8016f92:	ea4f 5817 	mov.w	r8, r7, lsr #20
 8016f96:	d806      	bhi.n	8016fa6 <pow+0x3e>
 8016f98:	f3c8 010a 	ubfx	r1, r8, #0, #11
 8016f9c:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 8016fa0:	297f      	cmp	r1, #127	; 0x7f
 8016fa2:	f240 81ab 	bls.w	80172fc <pow+0x394>
 8016fa6:	19b1      	adds	r1, r6, r6
 8016fa8:	9104      	str	r1, [sp, #16]
 8016faa:	eb47 0107 	adc.w	r1, r7, r7
 8016fae:	9105      	str	r1, [sp, #20]
 8016fb0:	9904      	ldr	r1, [sp, #16]
 8016fb2:	f111 31ff 	adds.w	r1, r1, #4294967295
 8016fb6:	460a      	mov	r2, r1
 8016fb8:	9905      	ldr	r1, [sp, #20]
 8016fba:	f141 31ff 	adc.w	r1, r1, #4294967295
 8016fbe:	460b      	mov	r3, r1
 8016fc0:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 8016fc4:	f06f 0001 	mvn.w	r0, #1
 8016fc8:	4299      	cmp	r1, r3
 8016fca:	bf08      	it	eq
 8016fcc:	4290      	cmpeq	r0, r2
 8016fce:	d260      	bcs.n	8017092 <pow+0x12a>
 8016fd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016fd4:	4313      	orrs	r3, r2
 8016fd6:	d11a      	bne.n	801700e <pow+0xa6>
 8016fd8:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 8016fdc:	1923      	adds	r3, r4, r4
 8016fde:	930c      	str	r3, [sp, #48]	; 0x30
 8016fe0:	eb42 0302 	adc.w	r3, r2, r2
 8016fe4:	930d      	str	r3, [sp, #52]	; 0x34
 8016fe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016fea:	4bcf      	ldr	r3, [pc, #828]	; (8017328 <pow+0x3c0>)
 8016fec:	2200      	movs	r2, #0
 8016fee:	428b      	cmp	r3, r1
 8016ff0:	bf08      	it	eq
 8016ff2:	4282      	cmpeq	r2, r0
 8016ff4:	f080 8265 	bcs.w	80174c2 <pow+0x55a>
 8016ff8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016ffc:	ed9d 6b00 	vldr	d6, [sp]
 8017000:	ee37 0b06 	vadd.f64	d0, d7, d6
 8017004:	b01b      	add	sp, #108	; 0x6c
 8017006:	ecbd 8b0a 	vpop	{d8-d12}
 801700a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801700e:	49c7      	ldr	r1, [pc, #796]	; (801732c <pow+0x3c4>)
 8017010:	2000      	movs	r0, #0
 8017012:	428d      	cmp	r5, r1
 8017014:	bf08      	it	eq
 8017016:	4284      	cmpeq	r4, r0
 8017018:	d10b      	bne.n	8017032 <pow+0xca>
 801701a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801701e:	19b3      	adds	r3, r6, r6
 8017020:	930e      	str	r3, [sp, #56]	; 0x38
 8017022:	eb42 0302 	adc.w	r3, r2, r2
 8017026:	930f      	str	r3, [sp, #60]	; 0x3c
 8017028:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801702c:	4bbe      	ldr	r3, [pc, #760]	; (8017328 <pow+0x3c0>)
 801702e:	2200      	movs	r2, #0
 8017030:	e7dd      	b.n	8016fee <pow+0x86>
 8017032:	1921      	adds	r1, r4, r4
 8017034:	9106      	str	r1, [sp, #24]
 8017036:	eb45 0105 	adc.w	r1, r5, r5
 801703a:	9107      	str	r1, [sp, #28]
 801703c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8017040:	49bb      	ldr	r1, [pc, #748]	; (8017330 <pow+0x3c8>)
 8017042:	2000      	movs	r0, #0
 8017044:	42a1      	cmp	r1, r4
 8017046:	bf08      	it	eq
 8017048:	4298      	cmpeq	r0, r3
 801704a:	d3d5      	bcc.n	8016ff8 <pow+0x90>
 801704c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8017050:	428c      	cmp	r4, r1
 8017052:	bf08      	it	eq
 8017054:	4283      	cmpeq	r3, r0
 8017056:	d1cf      	bne.n	8016ff8 <pow+0x90>
 8017058:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 801705c:	49b5      	ldr	r1, [pc, #724]	; (8017334 <pow+0x3cc>)
 801705e:	2000      	movs	r0, #0
 8017060:	428c      	cmp	r4, r1
 8017062:	bf08      	it	eq
 8017064:	4283      	cmpeq	r3, r0
 8017066:	f000 822c 	beq.w	80174c2 <pow+0x55a>
 801706a:	49b3      	ldr	r1, [pc, #716]	; (8017338 <pow+0x3d0>)
 801706c:	f04f 30ff 	mov.w	r0, #4294967295
 8017070:	42a1      	cmp	r1, r4
 8017072:	bf08      	it	eq
 8017074:	4298      	cmpeq	r0, r3
 8017076:	ea6f 0307 	mvn.w	r3, r7
 801707a:	bf34      	ite	cc
 801707c:	2201      	movcc	r2, #1
 801707e:	2200      	movcs	r2, #0
 8017080:	0fdb      	lsrs	r3, r3, #31
 8017082:	429a      	cmp	r2, r3
 8017084:	f040 821a 	bne.w	80174bc <pow+0x554>
 8017088:	ed9d 7b00 	vldr	d7, [sp]
 801708c:	ee27 0b07 	vmul.f64	d0, d7, d7
 8017090:	e7b8      	b.n	8017004 <pow+0x9c>
 8017092:	1923      	adds	r3, r4, r4
 8017094:	9308      	str	r3, [sp, #32]
 8017096:	eb45 0305 	adc.w	r3, r5, r5
 801709a:	9309      	str	r3, [sp, #36]	; 0x24
 801709c:	9b08      	ldr	r3, [sp, #32]
 801709e:	f113 33ff 	adds.w	r3, r3, #4294967295
 80170a2:	9310      	str	r3, [sp, #64]	; 0x40
 80170a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170a6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80170aa:	9311      	str	r3, [sp, #68]	; 0x44
 80170ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80170b0:	4299      	cmp	r1, r3
 80170b2:	bf08      	it	eq
 80170b4:	4290      	cmpeq	r0, r2
 80170b6:	d22d      	bcs.n	8017114 <pow+0x1ac>
 80170b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80170bc:	2c00      	cmp	r4, #0
 80170be:	f175 0300 	sbcs.w	r3, r5, #0
 80170c2:	ee27 0b07 	vmul.f64	d0, d7, d7
 80170c6:	da16      	bge.n	80170f6 <pow+0x18e>
 80170c8:	4630      	mov	r0, r6
 80170ca:	4639      	mov	r1, r7
 80170cc:	f7ff ff16 	bl	8016efc <checkint>
 80170d0:	2801      	cmp	r0, #1
 80170d2:	d110      	bne.n	80170f6 <pow+0x18e>
 80170d4:	eeb1 0b40 	vneg.f64	d0, d0
 80170d8:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 80170dc:	4323      	orrs	r3, r4
 80170de:	d10c      	bne.n	80170fa <pow+0x192>
 80170e0:	2e00      	cmp	r6, #0
 80170e2:	f177 0300 	sbcs.w	r3, r7, #0
 80170e6:	da8d      	bge.n	8017004 <pow+0x9c>
 80170e8:	b01b      	add	sp, #108	; 0x6c
 80170ea:	ecbd 8b0a 	vpop	{d8-d12}
 80170ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170f2:	f001 b899 	b.w	8018228 <__math_divzero>
 80170f6:	2000      	movs	r0, #0
 80170f8:	e7ee      	b.n	80170d8 <pow+0x170>
 80170fa:	2e00      	cmp	r6, #0
 80170fc:	f177 0300 	sbcs.w	r3, r7, #0
 8017100:	da80      	bge.n	8017004 <pow+0x9c>
 8017102:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017106:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801710a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 801710e:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8017112:	e777      	b.n	8017004 <pow+0x9c>
 8017114:	2c00      	cmp	r4, #0
 8017116:	f175 0300 	sbcs.w	r3, r5, #0
 801711a:	da35      	bge.n	8017188 <pow+0x220>
 801711c:	4630      	mov	r0, r6
 801711e:	4639      	mov	r1, r7
 8017120:	f7ff feec 	bl	8016efc <checkint>
 8017124:	b940      	cbnz	r0, 8017138 <pow+0x1d0>
 8017126:	ed9d 0b02 	vldr	d0, [sp, #8]
 801712a:	b01b      	add	sp, #108	; 0x6c
 801712c:	ecbd 8b0a 	vpop	{d8-d12}
 8017130:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017134:	f001 b890 	b.w	8018258 <__math_invalid>
 8017138:	2801      	cmp	r0, #1
 801713a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801713e:	bf14      	ite	ne
 8017140:	2000      	movne	r0, #0
 8017142:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8017146:	461d      	mov	r5, r3
 8017148:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 801714c:	f3c8 030a 	ubfx	r3, r8, #0, #11
 8017150:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 8017154:	2a7f      	cmp	r2, #127	; 0x7f
 8017156:	d933      	bls.n	80171c0 <pow+0x258>
 8017158:	4974      	ldr	r1, [pc, #464]	; (801732c <pow+0x3c4>)
 801715a:	2000      	movs	r0, #0
 801715c:	428d      	cmp	r5, r1
 801715e:	bf08      	it	eq
 8017160:	4284      	cmpeq	r4, r0
 8017162:	f000 81ae 	beq.w	80174c2 <pow+0x55a>
 8017166:	f240 32bd 	movw	r2, #957	; 0x3bd
 801716a:	4293      	cmp	r3, r2
 801716c:	d80e      	bhi.n	801718c <pow+0x224>
 801716e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017172:	ed9d 7b00 	vldr	d7, [sp]
 8017176:	42a9      	cmp	r1, r5
 8017178:	bf08      	it	eq
 801717a:	42a0      	cmpeq	r0, r4
 801717c:	bf34      	ite	cc
 801717e:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 8017182:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 8017186:	e73d      	b.n	8017004 <pow+0x9c>
 8017188:	2000      	movs	r0, #0
 801718a:	e7df      	b.n	801714c <pow+0x1e4>
 801718c:	42a9      	cmp	r1, r5
 801718e:	bf08      	it	eq
 8017190:	42a0      	cmpeq	r0, r4
 8017192:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8017196:	bf2c      	ite	cs
 8017198:	2301      	movcs	r3, #1
 801719a:	2300      	movcc	r3, #0
 801719c:	4590      	cmp	r8, r2
 801719e:	bf8c      	ite	hi
 80171a0:	f04f 0800 	movhi.w	r8, #0
 80171a4:	f04f 0801 	movls.w	r8, #1
 80171a8:	4543      	cmp	r3, r8
 80171aa:	f04f 0000 	mov.w	r0, #0
 80171ae:	f000 80af 	beq.w	8017310 <pow+0x3a8>
 80171b2:	b01b      	add	sp, #108	; 0x6c
 80171b4:	ecbd 8b0a 	vpop	{d8-d12}
 80171b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171bc:	f001 b82c 	b.w	8018218 <__math_oflow>
 80171c0:	f1bc 0f00 	cmp.w	ip, #0
 80171c4:	d10e      	bne.n	80171e4 <pow+0x27c>
 80171c6:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8017320 <pow+0x3b8>
 80171ca:	ed9d 6b02 	vldr	d6, [sp, #8]
 80171ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80171d2:	ec57 6b17 	vmov	r6, r7, d7
 80171d6:	4b59      	ldr	r3, [pc, #356]	; (801733c <pow+0x3d4>)
 80171d8:	2100      	movs	r1, #0
 80171da:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80171de:	1874      	adds	r4, r6, r1
 80171e0:	eb42 0503 	adc.w	r5, r2, r3
 80171e4:	2300      	movs	r3, #0
 80171e6:	18e3      	adds	r3, r4, r3
 80171e8:	4b55      	ldr	r3, [pc, #340]	; (8017340 <pow+0x3d8>)
 80171ea:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80171ee:	eb45 0303 	adc.w	r3, r5, r3
 80171f2:	1519      	asrs	r1, r3, #20
 80171f4:	ee03 1a10 	vmov	s6, r1
 80171f8:	0d1e      	lsrs	r6, r3, #20
 80171fa:	2100      	movs	r1, #0
 80171fc:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8017200:	0536      	lsls	r6, r6, #20
 8017202:	1a63      	subs	r3, r4, r1
 8017204:	9312      	str	r3, [sp, #72]	; 0x48
 8017206:	eb65 0306 	sbc.w	r3, r5, r6
 801720a:	9313      	str	r3, [sp, #76]	; 0x4c
 801720c:	4b4d      	ldr	r3, [pc, #308]	; (8017344 <pow+0x3dc>)
 801720e:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 8017212:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8017216:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 801721a:	eea5 6b07 	vfma.f64	d6, d5, d7
 801721e:	ed93 7b00 	vldr	d7, [r3]
 8017222:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 8017226:	ed93 4b02 	vldr	d4, [r3, #8]
 801722a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 801722e:	eea3 5b07 	vfma.f64	d5, d3, d7
 8017232:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 8017236:	ee36 9b05 	vadd.f64	d9, d6, d5
 801723a:	ee35 5b49 	vsub.f64	d5, d5, d9
 801723e:	eea3 7b04 	vfma.f64	d7, d3, d4
 8017242:	ed93 4b04 	vldr	d4, [r3, #16]
 8017246:	ee35 5b06 	vadd.f64	d5, d5, d6
 801724a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801724e:	ee26 4b04 	vmul.f64	d4, d6, d4
 8017252:	ed93 3b08 	vldr	d3, [r3, #32]
 8017256:	ee26 0b04 	vmul.f64	d0, d6, d4
 801725a:	eeb0 8b40 	vmov.f64	d8, d0
 801725e:	ee94 8b06 	vfnms.f64	d8, d4, d6
 8017262:	ed93 4b06 	vldr	d4, [r3, #24]
 8017266:	ee26 ab00 	vmul.f64	d10, d6, d0
 801726a:	ee39 1b00 	vadd.f64	d1, d9, d0
 801726e:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8017272:	eea6 4b03 	vfma.f64	d4, d6, d3
 8017276:	ee39 9b41 	vsub.f64	d9, d9, d1
 801727a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 801727e:	ee37 8b08 	vadd.f64	d8, d7, d8
 8017282:	ee39 9b00 	vadd.f64	d9, d9, d0
 8017286:	eea6 3b02 	vfma.f64	d3, d6, d2
 801728a:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 801728e:	ee38 9b09 	vadd.f64	d9, d8, d9
 8017292:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 8017296:	eea6 2b0c 	vfma.f64	d2, d6, d12
 801729a:	ed9d 6b00 	vldr	d6, [sp]
 801729e:	eea0 3b02 	vfma.f64	d3, d0, d2
 80172a2:	eea0 4b03 	vfma.f64	d4, d0, d3
 80172a6:	eeaa 9b04 	vfma.f64	d9, d10, d4
 80172aa:	ee31 7b09 	vadd.f64	d7, d1, d9
 80172ae:	ee26 6b07 	vmul.f64	d6, d6, d7
 80172b2:	ed8d 6b02 	vstr	d6, [sp, #8]
 80172b6:	eeb0 3b46 	vmov.f64	d3, d6
 80172ba:	ee31 1b47 	vsub.f64	d1, d1, d7
 80172be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80172c2:	ee31 9b09 	vadd.f64	d9, d1, d9
 80172c6:	ed9d 6b00 	vldr	d6, [sp]
 80172ca:	f3c3 570a 	ubfx	r7, r3, #20, #11
 80172ce:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 80172d2:	193c      	adds	r4, r7, r4
 80172d4:	2c3e      	cmp	r4, #62	; 0x3e
 80172d6:	ee96 3b07 	vfnms.f64	d3, d6, d7
 80172da:	eea6 3b09 	vfma.f64	d3, d6, d9
 80172de:	d934      	bls.n	801734a <pow+0x3e2>
 80172e0:	428c      	cmp	r4, r1
 80172e2:	da0d      	bge.n	8017300 <pow+0x398>
 80172e4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80172e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80172ec:	ee37 0b00 	vadd.f64	d0, d7, d0
 80172f0:	2800      	cmp	r0, #0
 80172f2:	f43f ae87 	beq.w	8017004 <pow+0x9c>
 80172f6:	eeb1 0b40 	vneg.f64	d0, d0
 80172fa:	e683      	b.n	8017004 <pow+0x9c>
 80172fc:	2000      	movs	r0, #0
 80172fe:	e771      	b.n	80171e4 <pow+0x27c>
 8017300:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 8017304:	d920      	bls.n	8017348 <pow+0x3e0>
 8017306:	2a00      	cmp	r2, #0
 8017308:	f173 0300 	sbcs.w	r3, r3, #0
 801730c:	f6bf af51 	bge.w	80171b2 <pow+0x24a>
 8017310:	b01b      	add	sp, #108	; 0x6c
 8017312:	ecbd 8b0a 	vpop	{d8-d12}
 8017316:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801731a:	f000 bf75 	b.w	8018208 <__math_uflow>
 801731e:	bf00      	nop
 8017320:	00000000 	.word	0x00000000
 8017324:	43300000 	.word	0x43300000
 8017328:	fff00000 	.word	0xfff00000
 801732c:	3ff00000 	.word	0x3ff00000
 8017330:	ffe00000 	.word	0xffe00000
 8017334:	7fe00000 	.word	0x7fe00000
 8017338:	7fdfffff 	.word	0x7fdfffff
 801733c:	fcc00000 	.word	0xfcc00000
 8017340:	c0196aab 	.word	0xc0196aab
 8017344:	08018970 	.word	0x08018970
 8017348:	460f      	mov	r7, r1
 801734a:	4e65      	ldr	r6, [pc, #404]	; (80174e0 <pow+0x578>)
 801734c:	ed9d 4b02 	vldr	d4, [sp, #8]
 8017350:	ed96 6b02 	vldr	d6, [r6, #8]
 8017354:	ed96 7b00 	vldr	d7, [r6]
 8017358:	eeb0 5b46 	vmov.f64	d5, d6
 801735c:	eea4 5b07 	vfma.f64	d5, d4, d7
 8017360:	ed8d 5b00 	vstr	d5, [sp]
 8017364:	ee35 6b46 	vsub.f64	d6, d5, d6
 8017368:	eeb0 5b44 	vmov.f64	d5, d4
 801736c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017370:	ed96 7b04 	vldr	d7, [r6, #16]
 8017374:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8017378:	eea6 5b07 	vfma.f64	d5, d6, d7
 801737c:	eeb0 7b45 	vmov.f64	d7, d5
 8017380:	ed96 5b06 	vldr	d5, [r6, #24]
 8017384:	1849      	adds	r1, r1, r1
 8017386:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 801738a:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 801738e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8017392:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 8017396:	ee33 3b07 	vadd.f64	d3, d3, d7
 801739a:	ee23 6b03 	vmul.f64	d6, d3, d3
 801739e:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 80173a2:	ed96 5b08 	vldr	d5, [r6, #32]
 80173a6:	ee33 7b07 	vadd.f64	d7, d3, d7
 80173aa:	1814      	adds	r4, r2, r0
 80173ac:	0365      	lsls	r5, r4, #13
 80173ae:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 80173b2:	eea3 5b04 	vfma.f64	d5, d3, d4
 80173b6:	eea6 7b05 	vfma.f64	d7, d6, d5
 80173ba:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 80173be:	ee26 6b06 	vmul.f64	d6, d6, d6
 80173c2:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 80173c6:	2000      	movs	r0, #0
 80173c8:	eb10 0a04 	adds.w	sl, r0, r4
 80173cc:	eea3 5b04 	vfma.f64	d5, d3, d4
 80173d0:	eb45 0b0c 	adc.w	fp, r5, ip
 80173d4:	eea6 7b05 	vfma.f64	d7, d6, d5
 80173d8:	2f00      	cmp	r7, #0
 80173da:	d16a      	bne.n	80174b2 <pow+0x54a>
 80173dc:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 80173e0:	4639      	mov	r1, r7
 80173e2:	ea50 0301 	orrs.w	r3, r0, r1
 80173e6:	f04f 0300 	mov.w	r3, #0
 80173ea:	d115      	bne.n	8017418 <pow+0x4b0>
 80173ec:	eb1a 0303 	adds.w	r3, sl, r3
 80173f0:	ee0b 3a10 	vmov	s22, r3
 80173f4:	4b3b      	ldr	r3, [pc, #236]	; (80174e4 <pow+0x57c>)
 80173f6:	ed9f 0b34 	vldr	d0, [pc, #208]	; 80174c8 <pow+0x560>
 80173fa:	eb4b 0303 	adc.w	r3, fp, r3
 80173fe:	ee0b 3a90 	vmov	s23, r3
 8017402:	eea7 bb0b 	vfma.f64	d11, d7, d11
 8017406:	ee2b 0b00 	vmul.f64	d0, d11, d0
 801740a:	b01b      	add	sp, #108	; 0x6c
 801740c:	ecbd 8b0a 	vpop	{d8-d12}
 8017410:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017414:	f000 bf38 	b.w	8018288 <__math_check_oflow>
 8017418:	eb1a 0303 	adds.w	r3, sl, r3
 801741c:	930a      	str	r3, [sp, #40]	; 0x28
 801741e:	4b32      	ldr	r3, [pc, #200]	; (80174e8 <pow+0x580>)
 8017420:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8017424:	eb4b 0303 	adc.w	r3, fp, r3
 8017428:	930b      	str	r3, [sp, #44]	; 0x2c
 801742a:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 801742e:	ee27 6b05 	vmul.f64	d6, d7, d5
 8017432:	ee35 7b06 	vadd.f64	d7, d5, d6
 8017436:	eeb0 3bc7 	vabs.f64	d3, d7
 801743a:	eeb4 3bc4 	vcmpe.f64	d3, d4
 801743e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017442:	ed9f 0b23 	vldr	d0, [pc, #140]	; 80174d0 <pow+0x568>
 8017446:	d52b      	bpl.n	80174a0 <pow+0x538>
 8017448:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801744c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8017450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017454:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8017458:	ee35 6b06 	vadd.f64	d6, d5, d6
 801745c:	bf48      	it	mi
 801745e:	eeb0 4b43 	vmovmi.f64	d4, d3
 8017462:	ee37 3b04 	vadd.f64	d3, d7, d4
 8017466:	ee34 5b43 	vsub.f64	d5, d4, d3
 801746a:	ee35 7b07 	vadd.f64	d7, d5, d7
 801746e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017472:	ee37 7b03 	vadd.f64	d7, d7, d3
 8017476:	ee37 7b44 	vsub.f64	d7, d7, d4
 801747a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801747e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017482:	d105      	bne.n	8017490 <pow+0x528>
 8017484:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017486:	463a      	mov	r2, r7
 8017488:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801748c:	ec43 2b17 	vmov	d7, r2, r3
 8017490:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 8017494:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 8017498:	ee26 6b00 	vmul.f64	d6, d6, d0
 801749c:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 80174a0:	ee27 0b00 	vmul.f64	d0, d7, d0
 80174a4:	b01b      	add	sp, #108	; 0x6c
 80174a6:	ecbd 8b0a 	vpop	{d8-d12}
 80174aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174ae:	f000 bee2 	b.w	8018276 <__math_check_uflow>
 80174b2:	ec4b ab10 	vmov	d0, sl, fp
 80174b6:	eea7 0b00 	vfma.f64	d0, d7, d0
 80174ba:	e5a3      	b.n	8017004 <pow+0x9c>
 80174bc:	ed9f 0b06 	vldr	d0, [pc, #24]	; 80174d8 <pow+0x570>
 80174c0:	e5a0      	b.n	8017004 <pow+0x9c>
 80174c2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80174c6:	e59d      	b.n	8017004 <pow+0x9c>
 80174c8:	00000000 	.word	0x00000000
 80174cc:	7f000000 	.word	0x7f000000
 80174d0:	00000000 	.word	0x00000000
 80174d4:	00100000 	.word	0x00100000
	...
 80174e0:	08019b40 	.word	0x08019b40
 80174e4:	c0f00000 	.word	0xc0f00000
 80174e8:	3fe00000 	.word	0x3fe00000
 80174ec:	00000000 	.word	0x00000000

080174f0 <cos>:
 80174f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80174f2:	eeb0 7b40 	vmov.f64	d7, d0
 80174f6:	ee17 3a90 	vmov	r3, s15
 80174fa:	4a1f      	ldr	r2, [pc, #124]	; (8017578 <cos+0x88>)
 80174fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017500:	4293      	cmp	r3, r2
 8017502:	dc04      	bgt.n	801750e <cos+0x1e>
 8017504:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8017570 <cos+0x80>
 8017508:	f000 fb1e 	bl	8017b48 <__kernel_cos>
 801750c:	e004      	b.n	8017518 <cos+0x28>
 801750e:	4a1b      	ldr	r2, [pc, #108]	; (801757c <cos+0x8c>)
 8017510:	4293      	cmp	r3, r2
 8017512:	dd04      	ble.n	801751e <cos+0x2e>
 8017514:	ee30 0b40 	vsub.f64	d0, d0, d0
 8017518:	b005      	add	sp, #20
 801751a:	f85d fb04 	ldr.w	pc, [sp], #4
 801751e:	4668      	mov	r0, sp
 8017520:	f000 f9ce 	bl	80178c0 <__ieee754_rem_pio2>
 8017524:	f000 0003 	and.w	r0, r0, #3
 8017528:	2801      	cmp	r0, #1
 801752a:	d007      	beq.n	801753c <cos+0x4c>
 801752c:	2802      	cmp	r0, #2
 801752e:	d00e      	beq.n	801754e <cos+0x5e>
 8017530:	b9a0      	cbnz	r0, 801755c <cos+0x6c>
 8017532:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017536:	ed9d 0b00 	vldr	d0, [sp]
 801753a:	e7e5      	b.n	8017508 <cos+0x18>
 801753c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017540:	ed9d 0b00 	vldr	d0, [sp]
 8017544:	f000 fdec 	bl	8018120 <__kernel_sin>
 8017548:	eeb1 0b40 	vneg.f64	d0, d0
 801754c:	e7e4      	b.n	8017518 <cos+0x28>
 801754e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017552:	ed9d 0b00 	vldr	d0, [sp]
 8017556:	f000 faf7 	bl	8017b48 <__kernel_cos>
 801755a:	e7f5      	b.n	8017548 <cos+0x58>
 801755c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017560:	ed9d 0b00 	vldr	d0, [sp]
 8017564:	2001      	movs	r0, #1
 8017566:	f000 fddb 	bl	8018120 <__kernel_sin>
 801756a:	e7d5      	b.n	8017518 <cos+0x28>
 801756c:	f3af 8000 	nop.w
	...
 8017578:	3fe921fb 	.word	0x3fe921fb
 801757c:	7fefffff 	.word	0x7fefffff

08017580 <fabs>:
 8017580:	ec51 0b10 	vmov	r0, r1, d0
 8017584:	ee10 2a10 	vmov	r2, s0
 8017588:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801758c:	ec43 2b10 	vmov	d0, r2, r3
 8017590:	4770      	bx	lr
 8017592:	0000      	movs	r0, r0
 8017594:	0000      	movs	r0, r0
	...

08017598 <sin>:
 8017598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801759a:	eeb0 7b40 	vmov.f64	d7, d0
 801759e:	ee17 3a90 	vmov	r3, s15
 80175a2:	4a1f      	ldr	r2, [pc, #124]	; (8017620 <sin+0x88>)
 80175a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80175a8:	4293      	cmp	r3, r2
 80175aa:	dc05      	bgt.n	80175b8 <sin+0x20>
 80175ac:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8017618 <sin+0x80>
 80175b0:	2000      	movs	r0, #0
 80175b2:	f000 fdb5 	bl	8018120 <__kernel_sin>
 80175b6:	e004      	b.n	80175c2 <sin+0x2a>
 80175b8:	4a1a      	ldr	r2, [pc, #104]	; (8017624 <sin+0x8c>)
 80175ba:	4293      	cmp	r3, r2
 80175bc:	dd04      	ble.n	80175c8 <sin+0x30>
 80175be:	ee30 0b40 	vsub.f64	d0, d0, d0
 80175c2:	b005      	add	sp, #20
 80175c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80175c8:	4668      	mov	r0, sp
 80175ca:	f000 f979 	bl	80178c0 <__ieee754_rem_pio2>
 80175ce:	f000 0003 	and.w	r0, r0, #3
 80175d2:	2801      	cmp	r0, #1
 80175d4:	d008      	beq.n	80175e8 <sin+0x50>
 80175d6:	2802      	cmp	r0, #2
 80175d8:	d00d      	beq.n	80175f6 <sin+0x5e>
 80175da:	b9b0      	cbnz	r0, 801760a <sin+0x72>
 80175dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80175e0:	ed9d 0b00 	vldr	d0, [sp]
 80175e4:	2001      	movs	r0, #1
 80175e6:	e7e4      	b.n	80175b2 <sin+0x1a>
 80175e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80175ec:	ed9d 0b00 	vldr	d0, [sp]
 80175f0:	f000 faaa 	bl	8017b48 <__kernel_cos>
 80175f4:	e7e5      	b.n	80175c2 <sin+0x2a>
 80175f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80175fa:	ed9d 0b00 	vldr	d0, [sp]
 80175fe:	2001      	movs	r0, #1
 8017600:	f000 fd8e 	bl	8018120 <__kernel_sin>
 8017604:	eeb1 0b40 	vneg.f64	d0, d0
 8017608:	e7db      	b.n	80175c2 <sin+0x2a>
 801760a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801760e:	ed9d 0b00 	vldr	d0, [sp]
 8017612:	f000 fa99 	bl	8017b48 <__kernel_cos>
 8017616:	e7f5      	b.n	8017604 <sin+0x6c>
	...
 8017620:	3fe921fb 	.word	0x3fe921fb
 8017624:	7fefffff 	.word	0x7fefffff

08017628 <asin>:
 8017628:	b508      	push	{r3, lr}
 801762a:	ed2d 8b04 	vpush	{d8-d9}
 801762e:	eeb0 8b40 	vmov.f64	d8, d0
 8017632:	f000 f82d 	bl	8017690 <__ieee754_asin>
 8017636:	4b13      	ldr	r3, [pc, #76]	; (8017684 <asin+0x5c>)
 8017638:	eeb0 9b40 	vmov.f64	d9, d0
 801763c:	f993 3000 	ldrsb.w	r3, [r3]
 8017640:	3301      	adds	r3, #1
 8017642:	d01a      	beq.n	801767a <asin+0x52>
 8017644:	eeb4 8b48 	vcmp.f64	d8, d8
 8017648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801764c:	d615      	bvs.n	801767a <asin+0x52>
 801764e:	eeb0 0b48 	vmov.f64	d0, d8
 8017652:	f7ff ff95 	bl	8017580 <fabs>
 8017656:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801765a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801765e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017662:	dd0a      	ble.n	801767a <asin+0x52>
 8017664:	f7fc ffd8 	bl	8014618 <__errno>
 8017668:	ecbd 8b04 	vpop	{d8-d9}
 801766c:	2321      	movs	r3, #33	; 0x21
 801766e:	6003      	str	r3, [r0, #0]
 8017670:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017674:	4804      	ldr	r0, [pc, #16]	; (8017688 <asin+0x60>)
 8017676:	f000 be8f 	b.w	8018398 <nan>
 801767a:	eeb0 0b49 	vmov.f64	d0, d9
 801767e:	ecbd 8b04 	vpop	{d8-d9}
 8017682:	bd08      	pop	{r3, pc}
 8017684:	24000230 	.word	0x24000230
 8017688:	080187ef 	.word	0x080187ef
 801768c:	00000000 	.word	0x00000000

08017690 <__ieee754_asin>:
 8017690:	b530      	push	{r4, r5, lr}
 8017692:	ee10 5a90 	vmov	r5, s1
 8017696:	ed2d 8b06 	vpush	{d8-d10}
 801769a:	4b85      	ldr	r3, [pc, #532]	; (80178b0 <__ieee754_asin+0x220>)
 801769c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80176a0:	429c      	cmp	r4, r3
 80176a2:	b083      	sub	sp, #12
 80176a4:	dd1a      	ble.n	80176dc <__ieee754_asin+0x4c>
 80176a6:	ee10 3a10 	vmov	r3, s0
 80176aa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80176ae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80176b2:	4323      	orrs	r3, r4
 80176b4:	d10d      	bne.n	80176d2 <__ieee754_asin+0x42>
 80176b6:	ed9f 7b60 	vldr	d7, [pc, #384]	; 8017838 <__ieee754_asin+0x1a8>
 80176ba:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8017840 <__ieee754_asin+0x1b0>
 80176be:	ee20 7b07 	vmul.f64	d7, d0, d7
 80176c2:	eea0 7b06 	vfma.f64	d7, d0, d6
 80176c6:	eeb0 0b47 	vmov.f64	d0, d7
 80176ca:	b003      	add	sp, #12
 80176cc:	ecbd 8b06 	vpop	{d8-d10}
 80176d0:	bd30      	pop	{r4, r5, pc}
 80176d2:	ee30 7b40 	vsub.f64	d7, d0, d0
 80176d6:	ee87 0b07 	vdiv.f64	d0, d7, d7
 80176da:	e7f6      	b.n	80176ca <__ieee754_asin+0x3a>
 80176dc:	4b75      	ldr	r3, [pc, #468]	; (80178b4 <__ieee754_asin+0x224>)
 80176de:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 80176e2:	429c      	cmp	r4, r3
 80176e4:	dc0b      	bgt.n	80176fe <__ieee754_asin+0x6e>
 80176e6:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 80176ea:	da56      	bge.n	801779a <__ieee754_asin+0x10a>
 80176ec:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8017848 <__ieee754_asin+0x1b8>
 80176f0:	ee30 7b07 	vadd.f64	d7, d0, d7
 80176f4:	eeb4 7bc9 	vcmpe.f64	d7, d9
 80176f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80176fc:	dce5      	bgt.n	80176ca <__ieee754_asin+0x3a>
 80176fe:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8017702:	f7ff ff3d 	bl	8017580 <fabs>
 8017706:	ed9f 7b52 	vldr	d7, [pc, #328]	; 8017850 <__ieee754_asin+0x1c0>
 801770a:	ee39 0b40 	vsub.f64	d0, d9, d0
 801770e:	ee20 8b08 	vmul.f64	d8, d0, d8
 8017712:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8017858 <__ieee754_asin+0x1c8>
 8017716:	eeb0 0b48 	vmov.f64	d0, d8
 801771a:	eea8 6b07 	vfma.f64	d6, d8, d7
 801771e:	ed9f 7b50 	vldr	d7, [pc, #320]	; 8017860 <__ieee754_asin+0x1d0>
 8017722:	eea6 7b08 	vfma.f64	d7, d6, d8
 8017726:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8017868 <__ieee754_asin+0x1d8>
 801772a:	ed9f ab51 	vldr	d10, [pc, #324]	; 8017870 <__ieee754_asin+0x1e0>
 801772e:	eea7 6b08 	vfma.f64	d6, d7, d8
 8017732:	ed9f 7b51 	vldr	d7, [pc, #324]	; 8017878 <__ieee754_asin+0x1e8>
 8017736:	eea6 7b08 	vfma.f64	d7, d6, d8
 801773a:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8017880 <__ieee754_asin+0x1f0>
 801773e:	eea7 ab08 	vfma.f64	d10, d7, d8
 8017742:	ee2a ab08 	vmul.f64	d10, d10, d8
 8017746:	ed9f 7b50 	vldr	d7, [pc, #320]	; 8017888 <__ieee754_asin+0x1f8>
 801774a:	eea8 7b06 	vfma.f64	d7, d8, d6
 801774e:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8017890 <__ieee754_asin+0x200>
 8017752:	eea7 6b08 	vfma.f64	d6, d7, d8
 8017756:	ed9f 7b50 	vldr	d7, [pc, #320]	; 8017898 <__ieee754_asin+0x208>
 801775a:	eea6 7b08 	vfma.f64	d7, d6, d8
 801775e:	eea7 9b08 	vfma.f64	d9, d7, d8
 8017762:	f000 f9ed 	bl	8017b40 <__ieee754_sqrt>
 8017766:	ee8a 4b09 	vdiv.f64	d4, d10, d9
 801776a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801776e:	4b52      	ldr	r3, [pc, #328]	; (80178b8 <__ieee754_asin+0x228>)
 8017770:	429c      	cmp	r4, r3
 8017772:	ed8d 0b00 	vstr	d0, [sp]
 8017776:	dd3f      	ble.n	80177f8 <__ieee754_asin+0x168>
 8017778:	eeb0 7b40 	vmov.f64	d7, d0
 801777c:	eea0 7b04 	vfma.f64	d7, d0, d4
 8017780:	ed9f 0b47 	vldr	d0, [pc, #284]	; 80178a0 <__ieee754_asin+0x210>
 8017784:	eea7 0b05 	vfma.f64	d0, d7, d5
 8017788:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8017840 <__ieee754_asin+0x1b0>
 801778c:	ee37 0b40 	vsub.f64	d0, d7, d0
 8017790:	2d00      	cmp	r5, #0
 8017792:	bfd8      	it	le
 8017794:	eeb1 0b40 	vnegle.f64	d0, d0
 8017798:	e797      	b.n	80176ca <__ieee754_asin+0x3a>
 801779a:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8017850 <__ieee754_asin+0x1c0>
 801779e:	ee20 7b00 	vmul.f64	d7, d0, d0
 80177a2:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8017858 <__ieee754_asin+0x1c8>
 80177a6:	eea7 6b05 	vfma.f64	d6, d7, d5
 80177aa:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8017860 <__ieee754_asin+0x1d0>
 80177ae:	eea6 5b07 	vfma.f64	d5, d6, d7
 80177b2:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8017868 <__ieee754_asin+0x1d8>
 80177b6:	eea5 6b07 	vfma.f64	d6, d5, d7
 80177ba:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8017878 <__ieee754_asin+0x1e8>
 80177be:	eea6 5b07 	vfma.f64	d5, d6, d7
 80177c2:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8017870 <__ieee754_asin+0x1e0>
 80177c6:	ed9f 4b2e 	vldr	d4, [pc, #184]	; 8017880 <__ieee754_asin+0x1f0>
 80177ca:	eea5 6b07 	vfma.f64	d6, d5, d7
 80177ce:	ee26 6b07 	vmul.f64	d6, d6, d7
 80177d2:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8017888 <__ieee754_asin+0x1f8>
 80177d6:	eea7 5b04 	vfma.f64	d5, d7, d4
 80177da:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8017890 <__ieee754_asin+0x200>
 80177de:	eea5 4b07 	vfma.f64	d4, d5, d7
 80177e2:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8017898 <__ieee754_asin+0x208>
 80177e6:	eea4 5b07 	vfma.f64	d5, d4, d7
 80177ea:	eea5 9b07 	vfma.f64	d9, d5, d7
 80177ee:	ee86 7b09 	vdiv.f64	d7, d6, d9
 80177f2:	eea0 0b07 	vfma.f64	d0, d0, d7
 80177f6:	e768      	b.n	80176ca <__ieee754_asin+0x3a>
 80177f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80177fc:	ed9d 7b00 	vldr	d7, [sp]
 8017800:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8017838 <__ieee754_asin+0x1a8>
 8017804:	2200      	movs	r2, #0
 8017806:	ec43 2b16 	vmov	d6, r2, r3
 801780a:	eea6 8b46 	vfms.f64	d8, d6, d6
 801780e:	ee37 3b06 	vadd.f64	d3, d7, d6
 8017812:	ee88 7b03 	vdiv.f64	d7, d8, d3
 8017816:	eea7 0b45 	vfms.f64	d0, d7, d5
 801781a:	ed9d 7b00 	vldr	d7, [sp]
 801781e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8017822:	ee97 0b04 	vfnms.f64	d0, d7, d4
 8017826:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80178a8 <__ieee754_asin+0x218>
 801782a:	eeb0 4b47 	vmov.f64	d4, d7
 801782e:	eea6 4b45 	vfms.f64	d4, d6, d5
 8017832:	ee30 0b44 	vsub.f64	d0, d0, d4
 8017836:	e7a9      	b.n	801778c <__ieee754_asin+0xfc>
 8017838:	33145c07 	.word	0x33145c07
 801783c:	3c91a626 	.word	0x3c91a626
 8017840:	54442d18 	.word	0x54442d18
 8017844:	3ff921fb 	.word	0x3ff921fb
 8017848:	8800759c 	.word	0x8800759c
 801784c:	7e37e43c 	.word	0x7e37e43c
 8017850:	0dfdf709 	.word	0x0dfdf709
 8017854:	3f023de1 	.word	0x3f023de1
 8017858:	7501b288 	.word	0x7501b288
 801785c:	3f49efe0 	.word	0x3f49efe0
 8017860:	b5688f3b 	.word	0xb5688f3b
 8017864:	bfa48228 	.word	0xbfa48228
 8017868:	0e884455 	.word	0x0e884455
 801786c:	3fc9c155 	.word	0x3fc9c155
 8017870:	55555555 	.word	0x55555555
 8017874:	3fc55555 	.word	0x3fc55555
 8017878:	03eb6f7d 	.word	0x03eb6f7d
 801787c:	bfd4d612 	.word	0xbfd4d612
 8017880:	b12e9282 	.word	0xb12e9282
 8017884:	3fb3b8c5 	.word	0x3fb3b8c5
 8017888:	1b8d0159 	.word	0x1b8d0159
 801788c:	bfe6066c 	.word	0xbfe6066c
 8017890:	9c598ac8 	.word	0x9c598ac8
 8017894:	40002ae5 	.word	0x40002ae5
 8017898:	1c8a2d4b 	.word	0x1c8a2d4b
 801789c:	c0033a27 	.word	0xc0033a27
 80178a0:	33145c07 	.word	0x33145c07
 80178a4:	bc91a626 	.word	0xbc91a626
 80178a8:	54442d18 	.word	0x54442d18
 80178ac:	3fe921fb 	.word	0x3fe921fb
 80178b0:	3fefffff 	.word	0x3fefffff
 80178b4:	3fdfffff 	.word	0x3fdfffff
 80178b8:	3fef3332 	.word	0x3fef3332
 80178bc:	00000000 	.word	0x00000000

080178c0 <__ieee754_rem_pio2>:
 80178c0:	b570      	push	{r4, r5, r6, lr}
 80178c2:	eeb0 7b40 	vmov.f64	d7, d0
 80178c6:	ee17 5a90 	vmov	r5, s15
 80178ca:	4b97      	ldr	r3, [pc, #604]	; (8017b28 <__ieee754_rem_pio2+0x268>)
 80178cc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80178d0:	429e      	cmp	r6, r3
 80178d2:	b088      	sub	sp, #32
 80178d4:	4604      	mov	r4, r0
 80178d6:	dc07      	bgt.n	80178e8 <__ieee754_rem_pio2+0x28>
 80178d8:	2200      	movs	r2, #0
 80178da:	2300      	movs	r3, #0
 80178dc:	ed84 0b00 	vstr	d0, [r4]
 80178e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80178e4:	2000      	movs	r0, #0
 80178e6:	e01b      	b.n	8017920 <__ieee754_rem_pio2+0x60>
 80178e8:	4b90      	ldr	r3, [pc, #576]	; (8017b2c <__ieee754_rem_pio2+0x26c>)
 80178ea:	429e      	cmp	r6, r3
 80178ec:	dc3b      	bgt.n	8017966 <__ieee754_rem_pio2+0xa6>
 80178ee:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80178f2:	2d00      	cmp	r5, #0
 80178f4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8017ae8 <__ieee754_rem_pio2+0x228>
 80178f8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80178fc:	dd19      	ble.n	8017932 <__ieee754_rem_pio2+0x72>
 80178fe:	ee30 7b46 	vsub.f64	d7, d0, d6
 8017902:	429e      	cmp	r6, r3
 8017904:	d00e      	beq.n	8017924 <__ieee754_rem_pio2+0x64>
 8017906:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8017af0 <__ieee754_rem_pio2+0x230>
 801790a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801790e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8017912:	ed84 5b00 	vstr	d5, [r4]
 8017916:	ee37 7b46 	vsub.f64	d7, d7, d6
 801791a:	ed84 7b02 	vstr	d7, [r4, #8]
 801791e:	2001      	movs	r0, #1
 8017920:	b008      	add	sp, #32
 8017922:	bd70      	pop	{r4, r5, r6, pc}
 8017924:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8017af8 <__ieee754_rem_pio2+0x238>
 8017928:	ee37 7b46 	vsub.f64	d7, d7, d6
 801792c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8017b00 <__ieee754_rem_pio2+0x240>
 8017930:	e7eb      	b.n	801790a <__ieee754_rem_pio2+0x4a>
 8017932:	429e      	cmp	r6, r3
 8017934:	ee30 7b06 	vadd.f64	d7, d0, d6
 8017938:	d00e      	beq.n	8017958 <__ieee754_rem_pio2+0x98>
 801793a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8017af0 <__ieee754_rem_pio2+0x230>
 801793e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8017942:	ee37 7b45 	vsub.f64	d7, d7, d5
 8017946:	ed84 5b00 	vstr	d5, [r4]
 801794a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801794e:	f04f 30ff 	mov.w	r0, #4294967295
 8017952:	ed84 7b02 	vstr	d7, [r4, #8]
 8017956:	e7e3      	b.n	8017920 <__ieee754_rem_pio2+0x60>
 8017958:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8017af8 <__ieee754_rem_pio2+0x238>
 801795c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017960:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8017b00 <__ieee754_rem_pio2+0x240>
 8017964:	e7eb      	b.n	801793e <__ieee754_rem_pio2+0x7e>
 8017966:	4b72      	ldr	r3, [pc, #456]	; (8017b30 <__ieee754_rem_pio2+0x270>)
 8017968:	429e      	cmp	r6, r3
 801796a:	dc6e      	bgt.n	8017a4a <__ieee754_rem_pio2+0x18a>
 801796c:	f7ff fe08 	bl	8017580 <fabs>
 8017970:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8017974:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8017b08 <__ieee754_rem_pio2+0x248>
 8017978:	eea0 7b06 	vfma.f64	d7, d0, d6
 801797c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8017980:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8017984:	ee17 0a90 	vmov	r0, s15
 8017988:	eeb1 4b45 	vneg.f64	d4, d5
 801798c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8017ae8 <__ieee754_rem_pio2+0x228>
 8017990:	eea5 0b47 	vfms.f64	d0, d5, d7
 8017994:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8017af0 <__ieee754_rem_pio2+0x230>
 8017998:	281f      	cmp	r0, #31
 801799a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801799e:	ee30 6b47 	vsub.f64	d6, d0, d7
 80179a2:	dc08      	bgt.n	80179b6 <__ieee754_rem_pio2+0xf6>
 80179a4:	4b63      	ldr	r3, [pc, #396]	; (8017b34 <__ieee754_rem_pio2+0x274>)
 80179a6:	1e42      	subs	r2, r0, #1
 80179a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80179ac:	42b3      	cmp	r3, r6
 80179ae:	d002      	beq.n	80179b6 <__ieee754_rem_pio2+0xf6>
 80179b0:	ed84 6b00 	vstr	d6, [r4]
 80179b4:	e024      	b.n	8017a00 <__ieee754_rem_pio2+0x140>
 80179b6:	ee16 3a90 	vmov	r3, s13
 80179ba:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80179be:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 80179c2:	2b10      	cmp	r3, #16
 80179c4:	ea4f 5226 	mov.w	r2, r6, asr #20
 80179c8:	ddf2      	ble.n	80179b0 <__ieee754_rem_pio2+0xf0>
 80179ca:	eeb0 6b40 	vmov.f64	d6, d0
 80179ce:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8017af8 <__ieee754_rem_pio2+0x238>
 80179d2:	eea4 6b03 	vfma.f64	d6, d4, d3
 80179d6:	ee30 7b46 	vsub.f64	d7, d0, d6
 80179da:	eea4 7b03 	vfma.f64	d7, d4, d3
 80179de:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8017b00 <__ieee754_rem_pio2+0x240>
 80179e2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80179e6:	ee36 3b47 	vsub.f64	d3, d6, d7
 80179ea:	ee13 3a90 	vmov	r3, s7
 80179ee:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80179f2:	1ad3      	subs	r3, r2, r3
 80179f4:	2b31      	cmp	r3, #49	; 0x31
 80179f6:	dc17      	bgt.n	8017a28 <__ieee754_rem_pio2+0x168>
 80179f8:	eeb0 0b46 	vmov.f64	d0, d6
 80179fc:	ed84 3b00 	vstr	d3, [r4]
 8017a00:	ed94 6b00 	vldr	d6, [r4]
 8017a04:	2d00      	cmp	r5, #0
 8017a06:	ee30 0b46 	vsub.f64	d0, d0, d6
 8017a0a:	ee30 7b47 	vsub.f64	d7, d0, d7
 8017a0e:	ed84 7b02 	vstr	d7, [r4, #8]
 8017a12:	da85      	bge.n	8017920 <__ieee754_rem_pio2+0x60>
 8017a14:	eeb1 6b46 	vneg.f64	d6, d6
 8017a18:	ed84 6b00 	vstr	d6, [r4]
 8017a1c:	eeb1 7b47 	vneg.f64	d7, d7
 8017a20:	4240      	negs	r0, r0
 8017a22:	ed84 7b02 	vstr	d7, [r4, #8]
 8017a26:	e77b      	b.n	8017920 <__ieee754_rem_pio2+0x60>
 8017a28:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8017b10 <__ieee754_rem_pio2+0x250>
 8017a2c:	eeb0 0b46 	vmov.f64	d0, d6
 8017a30:	eea4 0b03 	vfma.f64	d0, d4, d3
 8017a34:	ee36 7b40 	vsub.f64	d7, d6, d0
 8017a38:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8017b18 <__ieee754_rem_pio2+0x258>
 8017a3c:	eea4 7b03 	vfma.f64	d7, d4, d3
 8017a40:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8017a44:	ee30 6b47 	vsub.f64	d6, d0, d7
 8017a48:	e7b2      	b.n	80179b0 <__ieee754_rem_pio2+0xf0>
 8017a4a:	4b3b      	ldr	r3, [pc, #236]	; (8017b38 <__ieee754_rem_pio2+0x278>)
 8017a4c:	429e      	cmp	r6, r3
 8017a4e:	dd06      	ble.n	8017a5e <__ieee754_rem_pio2+0x19e>
 8017a50:	ee30 7b40 	vsub.f64	d7, d0, d0
 8017a54:	ed80 7b02 	vstr	d7, [r0, #8]
 8017a58:	ed80 7b00 	vstr	d7, [r0]
 8017a5c:	e742      	b.n	80178e4 <__ieee754_rem_pio2+0x24>
 8017a5e:	1532      	asrs	r2, r6, #20
 8017a60:	ee10 0a10 	vmov	r0, s0
 8017a64:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8017a68:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8017a6c:	ec41 0b17 	vmov	d7, r0, r1
 8017a70:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8017a74:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8017b20 <__ieee754_rem_pio2+0x260>
 8017a78:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8017a7c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017a80:	ed8d 6b02 	vstr	d6, [sp, #8]
 8017a84:	ee27 7b05 	vmul.f64	d7, d7, d5
 8017a88:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8017a8c:	a902      	add	r1, sp, #8
 8017a8e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8017a92:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017a96:	ed8d 6b04 	vstr	d6, [sp, #16]
 8017a9a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8017a9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017aa2:	2603      	movs	r6, #3
 8017aa4:	4608      	mov	r0, r1
 8017aa6:	ed91 7b04 	vldr	d7, [r1, #16]
 8017aaa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ab2:	4633      	mov	r3, r6
 8017ab4:	f1a1 0108 	sub.w	r1, r1, #8
 8017ab8:	f106 36ff 	add.w	r6, r6, #4294967295
 8017abc:	d0f3      	beq.n	8017aa6 <__ieee754_rem_pio2+0x1e6>
 8017abe:	491f      	ldr	r1, [pc, #124]	; (8017b3c <__ieee754_rem_pio2+0x27c>)
 8017ac0:	9101      	str	r1, [sp, #4]
 8017ac2:	2102      	movs	r1, #2
 8017ac4:	9100      	str	r1, [sp, #0]
 8017ac6:	4621      	mov	r1, r4
 8017ac8:	f000 f8aa 	bl	8017c20 <__kernel_rem_pio2>
 8017acc:	2d00      	cmp	r5, #0
 8017ace:	f6bf af27 	bge.w	8017920 <__ieee754_rem_pio2+0x60>
 8017ad2:	ed94 7b00 	vldr	d7, [r4]
 8017ad6:	eeb1 7b47 	vneg.f64	d7, d7
 8017ada:	ed84 7b00 	vstr	d7, [r4]
 8017ade:	ed94 7b02 	vldr	d7, [r4, #8]
 8017ae2:	e79b      	b.n	8017a1c <__ieee754_rem_pio2+0x15c>
 8017ae4:	f3af 8000 	nop.w
 8017ae8:	54400000 	.word	0x54400000
 8017aec:	3ff921fb 	.word	0x3ff921fb
 8017af0:	1a626331 	.word	0x1a626331
 8017af4:	3dd0b461 	.word	0x3dd0b461
 8017af8:	1a600000 	.word	0x1a600000
 8017afc:	3dd0b461 	.word	0x3dd0b461
 8017b00:	2e037073 	.word	0x2e037073
 8017b04:	3ba3198a 	.word	0x3ba3198a
 8017b08:	6dc9c883 	.word	0x6dc9c883
 8017b0c:	3fe45f30 	.word	0x3fe45f30
 8017b10:	2e000000 	.word	0x2e000000
 8017b14:	3ba3198a 	.word	0x3ba3198a
 8017b18:	252049c1 	.word	0x252049c1
 8017b1c:	397b839a 	.word	0x397b839a
 8017b20:	00000000 	.word	0x00000000
 8017b24:	41700000 	.word	0x41700000
 8017b28:	3fe921fb 	.word	0x3fe921fb
 8017b2c:	4002d97b 	.word	0x4002d97b
 8017b30:	413921fb 	.word	0x413921fb
 8017b34:	080199b8 	.word	0x080199b8
 8017b38:	7fefffff 	.word	0x7fefffff
 8017b3c:	08019a38 	.word	0x08019a38

08017b40 <__ieee754_sqrt>:
 8017b40:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8017b44:	4770      	bx	lr
	...

08017b48 <__kernel_cos>:
 8017b48:	ee10 1a90 	vmov	r1, s1
 8017b4c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8017b50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8017b54:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8017b58:	da05      	bge.n	8017b66 <__kernel_cos+0x1e>
 8017b5a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8017b5e:	ee17 3a90 	vmov	r3, s15
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d03d      	beq.n	8017be2 <__kernel_cos+0x9a>
 8017b66:	ee20 3b00 	vmul.f64	d3, d0, d0
 8017b6a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8017be8 <__kernel_cos+0xa0>
 8017b6e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8017bf0 <__kernel_cos+0xa8>
 8017b72:	eea3 6b07 	vfma.f64	d6, d3, d7
 8017b76:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8017bf8 <__kernel_cos+0xb0>
 8017b7a:	eea6 7b03 	vfma.f64	d7, d6, d3
 8017b7e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8017c00 <__kernel_cos+0xb8>
 8017b82:	eea7 6b03 	vfma.f64	d6, d7, d3
 8017b86:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8017c08 <__kernel_cos+0xc0>
 8017b8a:	4b23      	ldr	r3, [pc, #140]	; (8017c18 <__kernel_cos+0xd0>)
 8017b8c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8017b90:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8017c10 <__kernel_cos+0xc8>
 8017b94:	4299      	cmp	r1, r3
 8017b96:	eea7 6b03 	vfma.f64	d6, d7, d3
 8017b9a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8017b9e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8017ba2:	ee23 7b07 	vmul.f64	d7, d3, d7
 8017ba6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8017baa:	eea3 6b05 	vfma.f64	d6, d3, d5
 8017bae:	dc04      	bgt.n	8017bba <__kernel_cos+0x72>
 8017bb0:	ee37 6b46 	vsub.f64	d6, d7, d6
 8017bb4:	ee34 0b46 	vsub.f64	d0, d4, d6
 8017bb8:	4770      	bx	lr
 8017bba:	4b18      	ldr	r3, [pc, #96]	; (8017c1c <__kernel_cos+0xd4>)
 8017bbc:	4299      	cmp	r1, r3
 8017bbe:	dc0d      	bgt.n	8017bdc <__kernel_cos+0x94>
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8017bc6:	ec43 2b15 	vmov	d5, r2, r3
 8017bca:	ee34 0b45 	vsub.f64	d0, d4, d5
 8017bce:	ee37 7b45 	vsub.f64	d7, d7, d5
 8017bd2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017bd6:	ee30 0b47 	vsub.f64	d0, d0, d7
 8017bda:	4770      	bx	lr
 8017bdc:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8017be0:	e7f3      	b.n	8017bca <__kernel_cos+0x82>
 8017be2:	eeb0 0b44 	vmov.f64	d0, d4
 8017be6:	4770      	bx	lr
 8017be8:	be8838d4 	.word	0xbe8838d4
 8017bec:	bda8fae9 	.word	0xbda8fae9
 8017bf0:	bdb4b1c4 	.word	0xbdb4b1c4
 8017bf4:	3e21ee9e 	.word	0x3e21ee9e
 8017bf8:	809c52ad 	.word	0x809c52ad
 8017bfc:	be927e4f 	.word	0xbe927e4f
 8017c00:	19cb1590 	.word	0x19cb1590
 8017c04:	3efa01a0 	.word	0x3efa01a0
 8017c08:	16c15177 	.word	0x16c15177
 8017c0c:	bf56c16c 	.word	0xbf56c16c
 8017c10:	5555554c 	.word	0x5555554c
 8017c14:	3fa55555 	.word	0x3fa55555
 8017c18:	3fd33332 	.word	0x3fd33332
 8017c1c:	3fe90000 	.word	0x3fe90000

08017c20 <__kernel_rem_pio2>:
 8017c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c24:	ed2d 8b06 	vpush	{d8-d10}
 8017c28:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8017c2c:	469b      	mov	fp, r3
 8017c2e:	460f      	mov	r7, r1
 8017c30:	4bcf      	ldr	r3, [pc, #828]	; (8017f70 <__kernel_rem_pio2+0x350>)
 8017c32:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8017c34:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8017c38:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8017c3c:	9000      	str	r0, [sp, #0]
 8017c3e:	f112 0f14 	cmn.w	r2, #20
 8017c42:	bfa8      	it	ge
 8017c44:	2318      	movge	r3, #24
 8017c46:	f10b 31ff 	add.w	r1, fp, #4294967295
 8017c4a:	bfb8      	it	lt
 8017c4c:	2300      	movlt	r3, #0
 8017c4e:	f06f 0417 	mvn.w	r4, #23
 8017c52:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8017f58 <__kernel_rem_pio2+0x338>
 8017c56:	bfa4      	itt	ge
 8017c58:	f1a2 0a03 	subge.w	sl, r2, #3
 8017c5c:	fb9a f3f3 	sdivge	r3, sl, r3
 8017c60:	fb03 4404 	mla	r4, r3, r4, r4
 8017c64:	1a5d      	subs	r5, r3, r1
 8017c66:	4414      	add	r4, r2
 8017c68:	eb09 0601 	add.w	r6, r9, r1
 8017c6c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8017c70:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8017c74:	2200      	movs	r2, #0
 8017c76:	42b2      	cmp	r2, r6
 8017c78:	dd12      	ble.n	8017ca0 <__kernel_rem_pio2+0x80>
 8017c7a:	aa18      	add	r2, sp, #96	; 0x60
 8017c7c:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8017c80:	460e      	mov	r6, r1
 8017c82:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8017c86:	f1cb 0a01 	rsb	sl, fp, #1
 8017c8a:	eb0a 0006 	add.w	r0, sl, r6
 8017c8e:	4581      	cmp	r9, r0
 8017c90:	db25      	blt.n	8017cde <__kernel_rem_pio2+0xbe>
 8017c92:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8017f58 <__kernel_rem_pio2+0x338>
 8017c96:	f8dd e000 	ldr.w	lr, [sp]
 8017c9a:	4615      	mov	r5, r2
 8017c9c:	2000      	movs	r0, #0
 8017c9e:	e015      	b.n	8017ccc <__kernel_rem_pio2+0xac>
 8017ca0:	42d5      	cmn	r5, r2
 8017ca2:	d409      	bmi.n	8017cb8 <__kernel_rem_pio2+0x98>
 8017ca4:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8017ca8:	ee07 0a90 	vmov	s15, r0
 8017cac:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017cb0:	eca8 7b02 	vstmia	r8!, {d7}
 8017cb4:	3201      	adds	r2, #1
 8017cb6:	e7de      	b.n	8017c76 <__kernel_rem_pio2+0x56>
 8017cb8:	eeb0 7b46 	vmov.f64	d7, d6
 8017cbc:	e7f8      	b.n	8017cb0 <__kernel_rem_pio2+0x90>
 8017cbe:	ecbe 5b02 	vldmia	lr!, {d5}
 8017cc2:	ed95 6b00 	vldr	d6, [r5]
 8017cc6:	3001      	adds	r0, #1
 8017cc8:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017ccc:	4288      	cmp	r0, r1
 8017cce:	f1a5 0508 	sub.w	r5, r5, #8
 8017cd2:	ddf4      	ble.n	8017cbe <__kernel_rem_pio2+0x9e>
 8017cd4:	eca8 7b02 	vstmia	r8!, {d7}
 8017cd8:	3208      	adds	r2, #8
 8017cda:	3601      	adds	r6, #1
 8017cdc:	e7d5      	b.n	8017c8a <__kernel_rem_pio2+0x6a>
 8017cde:	aa04      	add	r2, sp, #16
 8017ce0:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8017f60 <__kernel_rem_pio2+0x340>
 8017ce4:	ed9f aba0 	vldr	d10, [pc, #640]	; 8017f68 <__kernel_rem_pio2+0x348>
 8017ce8:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8017cec:	9201      	str	r2, [sp, #4]
 8017cee:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8017cf2:	464e      	mov	r6, r9
 8017cf4:	ab90      	add	r3, sp, #576	; 0x240
 8017cf6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017cfa:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8017cfe:	ab04      	add	r3, sp, #16
 8017d00:	4618      	mov	r0, r3
 8017d02:	4632      	mov	r2, r6
 8017d04:	2a00      	cmp	r2, #0
 8017d06:	dc4e      	bgt.n	8017da6 <__kernel_rem_pio2+0x186>
 8017d08:	4620      	mov	r0, r4
 8017d0a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8017d0e:	f000 fb4b 	bl	80183a8 <scalbn>
 8017d12:	eeb0 8b40 	vmov.f64	d8, d0
 8017d16:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8017d1a:	ee28 0b00 	vmul.f64	d0, d8, d0
 8017d1e:	f000 fac7 	bl	80182b0 <floor>
 8017d22:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8017d26:	eea0 8b47 	vfms.f64	d8, d0, d7
 8017d2a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8017d2e:	2c00      	cmp	r4, #0
 8017d30:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8017d34:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8017d38:	ee38 8b40 	vsub.f64	d8, d8, d0
 8017d3c:	ee17 8a90 	vmov	r8, s15
 8017d40:	dd46      	ble.n	8017dd0 <__kernel_rem_pio2+0x1b0>
 8017d42:	1e70      	subs	r0, r6, #1
 8017d44:	aa04      	add	r2, sp, #16
 8017d46:	f1c4 0c18 	rsb	ip, r4, #24
 8017d4a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8017d4e:	fa45 f20c 	asr.w	r2, r5, ip
 8017d52:	4490      	add	r8, r2
 8017d54:	fa02 f20c 	lsl.w	r2, r2, ip
 8017d58:	1aad      	subs	r5, r5, r2
 8017d5a:	aa04      	add	r2, sp, #16
 8017d5c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8017d60:	f1c4 0217 	rsb	r2, r4, #23
 8017d64:	4115      	asrs	r5, r2
 8017d66:	2d00      	cmp	r5, #0
 8017d68:	dd41      	ble.n	8017dee <__kernel_rem_pio2+0x1ce>
 8017d6a:	f04f 0c00 	mov.w	ip, #0
 8017d6e:	f108 0801 	add.w	r8, r8, #1
 8017d72:	4660      	mov	r0, ip
 8017d74:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8017d78:	4566      	cmp	r6, ip
 8017d7a:	dc69      	bgt.n	8017e50 <__kernel_rem_pio2+0x230>
 8017d7c:	2c00      	cmp	r4, #0
 8017d7e:	dd03      	ble.n	8017d88 <__kernel_rem_pio2+0x168>
 8017d80:	2c01      	cmp	r4, #1
 8017d82:	d076      	beq.n	8017e72 <__kernel_rem_pio2+0x252>
 8017d84:	2c02      	cmp	r4, #2
 8017d86:	d07f      	beq.n	8017e88 <__kernel_rem_pio2+0x268>
 8017d88:	2d02      	cmp	r5, #2
 8017d8a:	d130      	bne.n	8017dee <__kernel_rem_pio2+0x1ce>
 8017d8c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017d90:	ee30 8b48 	vsub.f64	d8, d0, d8
 8017d94:	b358      	cbz	r0, 8017dee <__kernel_rem_pio2+0x1ce>
 8017d96:	4620      	mov	r0, r4
 8017d98:	9102      	str	r1, [sp, #8]
 8017d9a:	f000 fb05 	bl	80183a8 <scalbn>
 8017d9e:	9902      	ldr	r1, [sp, #8]
 8017da0:	ee38 8b40 	vsub.f64	d8, d8, d0
 8017da4:	e023      	b.n	8017dee <__kernel_rem_pio2+0x1ce>
 8017da6:	ee20 7b09 	vmul.f64	d7, d0, d9
 8017daa:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8017dae:	3a01      	subs	r2, #1
 8017db0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8017db4:	ad68      	add	r5, sp, #416	; 0x1a0
 8017db6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8017dba:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017dbe:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8017dc2:	eca0 0a01 	vstmia	r0!, {s0}
 8017dc6:	ed95 0b00 	vldr	d0, [r5]
 8017dca:	ee37 0b00 	vadd.f64	d0, d7, d0
 8017dce:	e799      	b.n	8017d04 <__kernel_rem_pio2+0xe4>
 8017dd0:	d105      	bne.n	8017dde <__kernel_rem_pio2+0x1be>
 8017dd2:	1e72      	subs	r2, r6, #1
 8017dd4:	a804      	add	r0, sp, #16
 8017dd6:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8017dda:	15ed      	asrs	r5, r5, #23
 8017ddc:	e7c3      	b.n	8017d66 <__kernel_rem_pio2+0x146>
 8017dde:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8017de2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dea:	da2f      	bge.n	8017e4c <__kernel_rem_pio2+0x22c>
 8017dec:	2500      	movs	r5, #0
 8017dee:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017df6:	f040 8087 	bne.w	8017f08 <__kernel_rem_pio2+0x2e8>
 8017dfa:	1e73      	subs	r3, r6, #1
 8017dfc:	4618      	mov	r0, r3
 8017dfe:	f04f 0c00 	mov.w	ip, #0
 8017e02:	4548      	cmp	r0, r9
 8017e04:	da47      	bge.n	8017e96 <__kernel_rem_pio2+0x276>
 8017e06:	f1bc 0f00 	cmp.w	ip, #0
 8017e0a:	d070      	beq.n	8017eee <__kernel_rem_pio2+0x2ce>
 8017e0c:	aa04      	add	r2, sp, #16
 8017e0e:	3c18      	subs	r4, #24
 8017e10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8017e14:	2a00      	cmp	r2, #0
 8017e16:	d075      	beq.n	8017f04 <__kernel_rem_pio2+0x2e4>
 8017e18:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017e1c:	4620      	mov	r0, r4
 8017e1e:	9300      	str	r3, [sp, #0]
 8017e20:	f000 fac2 	bl	80183a8 <scalbn>
 8017e24:	9b00      	ldr	r3, [sp, #0]
 8017e26:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8017f60 <__kernel_rem_pio2+0x340>
 8017e2a:	461a      	mov	r2, r3
 8017e2c:	2a00      	cmp	r2, #0
 8017e2e:	f280 80ac 	bge.w	8017f8a <__kernel_rem_pio2+0x36a>
 8017e32:	4619      	mov	r1, r3
 8017e34:	2000      	movs	r0, #0
 8017e36:	2900      	cmp	r1, #0
 8017e38:	f2c0 80cd 	blt.w	8017fd6 <__kernel_rem_pio2+0x3b6>
 8017e3c:	aa68      	add	r2, sp, #416	; 0x1a0
 8017e3e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8017e42:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8017f58 <__kernel_rem_pio2+0x338>
 8017e46:	4e4b      	ldr	r6, [pc, #300]	; (8017f74 <__kernel_rem_pio2+0x354>)
 8017e48:	2200      	movs	r2, #0
 8017e4a:	e0b8      	b.n	8017fbe <__kernel_rem_pio2+0x39e>
 8017e4c:	2502      	movs	r5, #2
 8017e4e:	e78c      	b.n	8017d6a <__kernel_rem_pio2+0x14a>
 8017e50:	681a      	ldr	r2, [r3, #0]
 8017e52:	b948      	cbnz	r0, 8017e68 <__kernel_rem_pio2+0x248>
 8017e54:	b11a      	cbz	r2, 8017e5e <__kernel_rem_pio2+0x23e>
 8017e56:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8017e5a:	601a      	str	r2, [r3, #0]
 8017e5c:	2201      	movs	r2, #1
 8017e5e:	f10c 0c01 	add.w	ip, ip, #1
 8017e62:	3304      	adds	r3, #4
 8017e64:	4610      	mov	r0, r2
 8017e66:	e787      	b.n	8017d78 <__kernel_rem_pio2+0x158>
 8017e68:	ebae 0202 	sub.w	r2, lr, r2
 8017e6c:	601a      	str	r2, [r3, #0]
 8017e6e:	4602      	mov	r2, r0
 8017e70:	e7f5      	b.n	8017e5e <__kernel_rem_pio2+0x23e>
 8017e72:	1e72      	subs	r2, r6, #1
 8017e74:	ab04      	add	r3, sp, #16
 8017e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e7a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8017e7e:	f10d 0c10 	add.w	ip, sp, #16
 8017e82:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8017e86:	e77f      	b.n	8017d88 <__kernel_rem_pio2+0x168>
 8017e88:	1e72      	subs	r2, r6, #1
 8017e8a:	ab04      	add	r3, sp, #16
 8017e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e90:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8017e94:	e7f3      	b.n	8017e7e <__kernel_rem_pio2+0x25e>
 8017e96:	aa04      	add	r2, sp, #16
 8017e98:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8017e9c:	3801      	subs	r0, #1
 8017e9e:	ea4c 0c02 	orr.w	ip, ip, r2
 8017ea2:	e7ae      	b.n	8017e02 <__kernel_rem_pio2+0x1e2>
 8017ea4:	3001      	adds	r0, #1
 8017ea6:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8017eaa:	2a00      	cmp	r2, #0
 8017eac:	d0fa      	beq.n	8017ea4 <__kernel_rem_pio2+0x284>
 8017eae:	eb06 020b 	add.w	r2, r6, fp
 8017eb2:	ad18      	add	r5, sp, #96	; 0x60
 8017eb4:	1c73      	adds	r3, r6, #1
 8017eb6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8017eba:	4406      	add	r6, r0
 8017ebc:	429e      	cmp	r6, r3
 8017ebe:	f6ff af19 	blt.w	8017cf4 <__kernel_rem_pio2+0xd4>
 8017ec2:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8017ec6:	9d00      	ldr	r5, [sp, #0]
 8017ec8:	ee07 0a90 	vmov	s15, r0
 8017ecc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017ed0:	2000      	movs	r0, #0
 8017ed2:	eca2 7b02 	vstmia	r2!, {d7}
 8017ed6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8017f58 <__kernel_rem_pio2+0x338>
 8017eda:	4694      	mov	ip, r2
 8017edc:	4288      	cmp	r0, r1
 8017ede:	dd09      	ble.n	8017ef4 <__kernel_rem_pio2+0x2d4>
 8017ee0:	a868      	add	r0, sp, #416	; 0x1a0
 8017ee2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8017ee6:	ed80 7b00 	vstr	d7, [r0]
 8017eea:	3301      	adds	r3, #1
 8017eec:	e7e6      	b.n	8017ebc <__kernel_rem_pio2+0x29c>
 8017eee:	9b01      	ldr	r3, [sp, #4]
 8017ef0:	2001      	movs	r0, #1
 8017ef2:	e7d8      	b.n	8017ea6 <__kernel_rem_pio2+0x286>
 8017ef4:	ecb5 5b02 	vldmia	r5!, {d5}
 8017ef8:	ed3c 6b02 	vldmdb	ip!, {d6}
 8017efc:	3001      	adds	r0, #1
 8017efe:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017f02:	e7eb      	b.n	8017edc <__kernel_rem_pio2+0x2bc>
 8017f04:	3b01      	subs	r3, #1
 8017f06:	e781      	b.n	8017e0c <__kernel_rem_pio2+0x1ec>
 8017f08:	4260      	negs	r0, r4
 8017f0a:	eeb0 0b48 	vmov.f64	d0, d8
 8017f0e:	f000 fa4b 	bl	80183a8 <scalbn>
 8017f12:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8017f68 <__kernel_rem_pio2+0x348>
 8017f16:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8017f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f1e:	db2b      	blt.n	8017f78 <__kernel_rem_pio2+0x358>
 8017f20:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8017f60 <__kernel_rem_pio2+0x340>
 8017f24:	ee20 7b07 	vmul.f64	d7, d0, d7
 8017f28:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8017f2c:	aa04      	add	r2, sp, #16
 8017f2e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8017f32:	eea5 0b46 	vfms.f64	d0, d5, d6
 8017f36:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017f3a:	a904      	add	r1, sp, #16
 8017f3c:	ee10 3a10 	vmov	r3, s0
 8017f40:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8017f44:	ee17 2a10 	vmov	r2, s14
 8017f48:	1c73      	adds	r3, r6, #1
 8017f4a:	3418      	adds	r4, #24
 8017f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8017f50:	e762      	b.n	8017e18 <__kernel_rem_pio2+0x1f8>
 8017f52:	bf00      	nop
 8017f54:	f3af 8000 	nop.w
	...
 8017f64:	3e700000 	.word	0x3e700000
 8017f68:	00000000 	.word	0x00000000
 8017f6c:	41700000 	.word	0x41700000
 8017f70:	0801a3f0 	.word	0x0801a3f0
 8017f74:	0801a3b0 	.word	0x0801a3b0
 8017f78:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017f7c:	aa04      	add	r2, sp, #16
 8017f7e:	ee10 3a10 	vmov	r3, s0
 8017f82:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8017f86:	4633      	mov	r3, r6
 8017f88:	e746      	b.n	8017e18 <__kernel_rem_pio2+0x1f8>
 8017f8a:	a804      	add	r0, sp, #16
 8017f8c:	a968      	add	r1, sp, #416	; 0x1a0
 8017f8e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8017f92:	9000      	str	r0, [sp, #0]
 8017f94:	ee07 0a90 	vmov	s15, r0
 8017f98:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8017f9c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017fa0:	3a01      	subs	r2, #1
 8017fa2:	ee27 7b00 	vmul.f64	d7, d7, d0
 8017fa6:	ee20 0b06 	vmul.f64	d0, d0, d6
 8017faa:	ed81 7b00 	vstr	d7, [r1]
 8017fae:	e73d      	b.n	8017e2c <__kernel_rem_pio2+0x20c>
 8017fb0:	ecb6 5b02 	vldmia	r6!, {d5}
 8017fb4:	ecb4 6b02 	vldmia	r4!, {d6}
 8017fb8:	3201      	adds	r2, #1
 8017fba:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017fbe:	454a      	cmp	r2, r9
 8017fc0:	dc01      	bgt.n	8017fc6 <__kernel_rem_pio2+0x3a6>
 8017fc2:	4290      	cmp	r0, r2
 8017fc4:	daf4      	bge.n	8017fb0 <__kernel_rem_pio2+0x390>
 8017fc6:	aa40      	add	r2, sp, #256	; 0x100
 8017fc8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8017fcc:	ed82 7b00 	vstr	d7, [r2]
 8017fd0:	3901      	subs	r1, #1
 8017fd2:	3001      	adds	r0, #1
 8017fd4:	e72f      	b.n	8017e36 <__kernel_rem_pio2+0x216>
 8017fd6:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8017fd8:	2a02      	cmp	r2, #2
 8017fda:	dc0a      	bgt.n	8017ff2 <__kernel_rem_pio2+0x3d2>
 8017fdc:	2a00      	cmp	r2, #0
 8017fde:	dc5a      	bgt.n	8018096 <__kernel_rem_pio2+0x476>
 8017fe0:	d039      	beq.n	8018056 <__kernel_rem_pio2+0x436>
 8017fe2:	f008 0007 	and.w	r0, r8, #7
 8017fe6:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8017fea:	ecbd 8b06 	vpop	{d8-d10}
 8017fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ff2:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8017ff4:	2a03      	cmp	r2, #3
 8017ff6:	d1f4      	bne.n	8017fe2 <__kernel_rem_pio2+0x3c2>
 8017ff8:	aa40      	add	r2, sp, #256	; 0x100
 8017ffa:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017ffe:	4611      	mov	r1, r2
 8018000:	4618      	mov	r0, r3
 8018002:	2800      	cmp	r0, #0
 8018004:	f1a1 0108 	sub.w	r1, r1, #8
 8018008:	dc52      	bgt.n	80180b0 <__kernel_rem_pio2+0x490>
 801800a:	4619      	mov	r1, r3
 801800c:	2901      	cmp	r1, #1
 801800e:	f1a2 0208 	sub.w	r2, r2, #8
 8018012:	dc5d      	bgt.n	80180d0 <__kernel_rem_pio2+0x4b0>
 8018014:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8018118 <__kernel_rem_pio2+0x4f8>
 8018018:	2b01      	cmp	r3, #1
 801801a:	dc69      	bgt.n	80180f0 <__kernel_rem_pio2+0x4d0>
 801801c:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8018020:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8018024:	2d00      	cmp	r5, #0
 8018026:	d16c      	bne.n	8018102 <__kernel_rem_pio2+0x4e2>
 8018028:	ed87 5b00 	vstr	d5, [r7]
 801802c:	ed87 6b02 	vstr	d6, [r7, #8]
 8018030:	ed87 7b04 	vstr	d7, [r7, #16]
 8018034:	e7d5      	b.n	8017fe2 <__kernel_rem_pio2+0x3c2>
 8018036:	aa40      	add	r2, sp, #256	; 0x100
 8018038:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801803c:	ed92 6b00 	vldr	d6, [r2]
 8018040:	3b01      	subs	r3, #1
 8018042:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018046:	2b00      	cmp	r3, #0
 8018048:	daf5      	bge.n	8018036 <__kernel_rem_pio2+0x416>
 801804a:	b10d      	cbz	r5, 8018050 <__kernel_rem_pio2+0x430>
 801804c:	eeb1 7b47 	vneg.f64	d7, d7
 8018050:	ed87 7b00 	vstr	d7, [r7]
 8018054:	e7c5      	b.n	8017fe2 <__kernel_rem_pio2+0x3c2>
 8018056:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8018118 <__kernel_rem_pio2+0x4f8>
 801805a:	e7f4      	b.n	8018046 <__kernel_rem_pio2+0x426>
 801805c:	a940      	add	r1, sp, #256	; 0x100
 801805e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8018062:	ed91 7b00 	vldr	d7, [r1]
 8018066:	3a01      	subs	r2, #1
 8018068:	ee36 6b07 	vadd.f64	d6, d6, d7
 801806c:	2a00      	cmp	r2, #0
 801806e:	daf5      	bge.n	801805c <__kernel_rem_pio2+0x43c>
 8018070:	b1ad      	cbz	r5, 801809e <__kernel_rem_pio2+0x47e>
 8018072:	eeb1 7b46 	vneg.f64	d7, d6
 8018076:	ed87 7b00 	vstr	d7, [r7]
 801807a:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 801807e:	a942      	add	r1, sp, #264	; 0x108
 8018080:	2201      	movs	r2, #1
 8018082:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018086:	4293      	cmp	r3, r2
 8018088:	da0c      	bge.n	80180a4 <__kernel_rem_pio2+0x484>
 801808a:	b10d      	cbz	r5, 8018090 <__kernel_rem_pio2+0x470>
 801808c:	eeb1 7b47 	vneg.f64	d7, d7
 8018090:	ed87 7b02 	vstr	d7, [r7, #8]
 8018094:	e7a5      	b.n	8017fe2 <__kernel_rem_pio2+0x3c2>
 8018096:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8018118 <__kernel_rem_pio2+0x4f8>
 801809a:	461a      	mov	r2, r3
 801809c:	e7e6      	b.n	801806c <__kernel_rem_pio2+0x44c>
 801809e:	eeb0 7b46 	vmov.f64	d7, d6
 80180a2:	e7e8      	b.n	8018076 <__kernel_rem_pio2+0x456>
 80180a4:	ecb1 6b02 	vldmia	r1!, {d6}
 80180a8:	3201      	adds	r2, #1
 80180aa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80180ae:	e7ea      	b.n	8018086 <__kernel_rem_pio2+0x466>
 80180b0:	ed91 7b00 	vldr	d7, [r1]
 80180b4:	ed91 5b02 	vldr	d5, [r1, #8]
 80180b8:	3801      	subs	r0, #1
 80180ba:	ee37 6b05 	vadd.f64	d6, d7, d5
 80180be:	ee37 7b46 	vsub.f64	d7, d7, d6
 80180c2:	ed81 6b00 	vstr	d6, [r1]
 80180c6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80180ca:	ed81 7b02 	vstr	d7, [r1, #8]
 80180ce:	e798      	b.n	8018002 <__kernel_rem_pio2+0x3e2>
 80180d0:	ed92 7b00 	vldr	d7, [r2]
 80180d4:	ed92 5b02 	vldr	d5, [r2, #8]
 80180d8:	3901      	subs	r1, #1
 80180da:	ee37 6b05 	vadd.f64	d6, d7, d5
 80180de:	ee37 7b46 	vsub.f64	d7, d7, d6
 80180e2:	ed82 6b00 	vstr	d6, [r2]
 80180e6:	ee37 7b05 	vadd.f64	d7, d7, d5
 80180ea:	ed82 7b02 	vstr	d7, [r2, #8]
 80180ee:	e78d      	b.n	801800c <__kernel_rem_pio2+0x3ec>
 80180f0:	aa40      	add	r2, sp, #256	; 0x100
 80180f2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80180f6:	ed92 6b00 	vldr	d6, [r2]
 80180fa:	3b01      	subs	r3, #1
 80180fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018100:	e78a      	b.n	8018018 <__kernel_rem_pio2+0x3f8>
 8018102:	eeb1 5b45 	vneg.f64	d5, d5
 8018106:	eeb1 6b46 	vneg.f64	d6, d6
 801810a:	ed87 5b00 	vstr	d5, [r7]
 801810e:	eeb1 7b47 	vneg.f64	d7, d7
 8018112:	ed87 6b02 	vstr	d6, [r7, #8]
 8018116:	e78b      	b.n	8018030 <__kernel_rem_pio2+0x410>
	...

08018120 <__kernel_sin>:
 8018120:	ee10 3a90 	vmov	r3, s1
 8018124:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018128:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801812c:	da04      	bge.n	8018138 <__kernel_sin+0x18>
 801812e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8018132:	ee17 3a90 	vmov	r3, s15
 8018136:	b35b      	cbz	r3, 8018190 <__kernel_sin+0x70>
 8018138:	ee20 6b00 	vmul.f64	d6, d0, d0
 801813c:	ee20 5b06 	vmul.f64	d5, d0, d6
 8018140:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8018198 <__kernel_sin+0x78>
 8018144:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80181a0 <__kernel_sin+0x80>
 8018148:	eea6 4b07 	vfma.f64	d4, d6, d7
 801814c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80181a8 <__kernel_sin+0x88>
 8018150:	eea4 7b06 	vfma.f64	d7, d4, d6
 8018154:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80181b0 <__kernel_sin+0x90>
 8018158:	eea7 4b06 	vfma.f64	d4, d7, d6
 801815c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 80181b8 <__kernel_sin+0x98>
 8018160:	eea4 7b06 	vfma.f64	d7, d4, d6
 8018164:	b930      	cbnz	r0, 8018174 <__kernel_sin+0x54>
 8018166:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80181c0 <__kernel_sin+0xa0>
 801816a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801816e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8018172:	4770      	bx	lr
 8018174:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8018178:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801817c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8018180:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8018184:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80181c8 <__kernel_sin+0xa8>
 8018188:	eea5 1b07 	vfma.f64	d1, d5, d7
 801818c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8018190:	4770      	bx	lr
 8018192:	bf00      	nop
 8018194:	f3af 8000 	nop.w
 8018198:	5acfd57c 	.word	0x5acfd57c
 801819c:	3de5d93a 	.word	0x3de5d93a
 80181a0:	8a2b9ceb 	.word	0x8a2b9ceb
 80181a4:	be5ae5e6 	.word	0xbe5ae5e6
 80181a8:	57b1fe7d 	.word	0x57b1fe7d
 80181ac:	3ec71de3 	.word	0x3ec71de3
 80181b0:	19c161d5 	.word	0x19c161d5
 80181b4:	bf2a01a0 	.word	0xbf2a01a0
 80181b8:	1110f8a6 	.word	0x1110f8a6
 80181bc:	3f811111 	.word	0x3f811111
 80181c0:	55555549 	.word	0x55555549
 80181c4:	bfc55555 	.word	0xbfc55555
 80181c8:	55555549 	.word	0x55555549
 80181cc:	3fc55555 	.word	0x3fc55555

080181d0 <with_errno>:
 80181d0:	b513      	push	{r0, r1, r4, lr}
 80181d2:	4604      	mov	r4, r0
 80181d4:	ed8d 0b00 	vstr	d0, [sp]
 80181d8:	f7fc fa1e 	bl	8014618 <__errno>
 80181dc:	ed9d 0b00 	vldr	d0, [sp]
 80181e0:	6004      	str	r4, [r0, #0]
 80181e2:	b002      	add	sp, #8
 80181e4:	bd10      	pop	{r4, pc}

080181e6 <xflow>:
 80181e6:	b082      	sub	sp, #8
 80181e8:	b158      	cbz	r0, 8018202 <xflow+0x1c>
 80181ea:	eeb1 7b40 	vneg.f64	d7, d0
 80181ee:	ed8d 7b00 	vstr	d7, [sp]
 80181f2:	ed9d 7b00 	vldr	d7, [sp]
 80181f6:	2022      	movs	r0, #34	; 0x22
 80181f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80181fc:	b002      	add	sp, #8
 80181fe:	f7ff bfe7 	b.w	80181d0 <with_errno>
 8018202:	eeb0 7b40 	vmov.f64	d7, d0
 8018206:	e7f2      	b.n	80181ee <xflow+0x8>

08018208 <__math_uflow>:
 8018208:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018210 <__math_uflow+0x8>
 801820c:	f7ff bfeb 	b.w	80181e6 <xflow>
 8018210:	00000000 	.word	0x00000000
 8018214:	10000000 	.word	0x10000000

08018218 <__math_oflow>:
 8018218:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018220 <__math_oflow+0x8>
 801821c:	f7ff bfe3 	b.w	80181e6 <xflow>
 8018220:	00000000 	.word	0x00000000
 8018224:	70000000 	.word	0x70000000

08018228 <__math_divzero>:
 8018228:	b082      	sub	sp, #8
 801822a:	2800      	cmp	r0, #0
 801822c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8018230:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8018234:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8018238:	ed8d 7b00 	vstr	d7, [sp]
 801823c:	ed9d 0b00 	vldr	d0, [sp]
 8018240:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8018250 <__math_divzero+0x28>
 8018244:	2022      	movs	r0, #34	; 0x22
 8018246:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801824a:	b002      	add	sp, #8
 801824c:	f7ff bfc0 	b.w	80181d0 <with_errno>
	...

08018258 <__math_invalid>:
 8018258:	eeb0 7b40 	vmov.f64	d7, d0
 801825c:	eeb4 7b47 	vcmp.f64	d7, d7
 8018260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018264:	ee30 6b40 	vsub.f64	d6, d0, d0
 8018268:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801826c:	d602      	bvs.n	8018274 <__math_invalid+0x1c>
 801826e:	2021      	movs	r0, #33	; 0x21
 8018270:	f7ff bfae 	b.w	80181d0 <with_errno>
 8018274:	4770      	bx	lr

08018276 <__math_check_uflow>:
 8018276:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801827a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801827e:	d102      	bne.n	8018286 <__math_check_uflow+0x10>
 8018280:	2022      	movs	r0, #34	; 0x22
 8018282:	f7ff bfa5 	b.w	80181d0 <with_errno>
 8018286:	4770      	bx	lr

08018288 <__math_check_oflow>:
 8018288:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80182a8 <__math_check_oflow+0x20>
 801828c:	eeb0 7bc0 	vabs.f64	d7, d0
 8018290:	eeb4 7b46 	vcmp.f64	d7, d6
 8018294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018298:	dd02      	ble.n	80182a0 <__math_check_oflow+0x18>
 801829a:	2022      	movs	r0, #34	; 0x22
 801829c:	f7ff bf98 	b.w	80181d0 <with_errno>
 80182a0:	4770      	bx	lr
 80182a2:	bf00      	nop
 80182a4:	f3af 8000 	nop.w
 80182a8:	ffffffff 	.word	0xffffffff
 80182ac:	7fefffff 	.word	0x7fefffff

080182b0 <floor>:
 80182b0:	ee10 1a90 	vmov	r1, s1
 80182b4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80182b8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80182bc:	2b13      	cmp	r3, #19
 80182be:	b530      	push	{r4, r5, lr}
 80182c0:	ee10 0a10 	vmov	r0, s0
 80182c4:	ee10 5a10 	vmov	r5, s0
 80182c8:	dc31      	bgt.n	801832e <floor+0x7e>
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	da15      	bge.n	80182fa <floor+0x4a>
 80182ce:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8018388 <floor+0xd8>
 80182d2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80182d6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80182da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182de:	dd07      	ble.n	80182f0 <floor+0x40>
 80182e0:	2900      	cmp	r1, #0
 80182e2:	da4e      	bge.n	8018382 <floor+0xd2>
 80182e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80182e8:	4318      	orrs	r0, r3
 80182ea:	d001      	beq.n	80182f0 <floor+0x40>
 80182ec:	4928      	ldr	r1, [pc, #160]	; (8018390 <floor+0xe0>)
 80182ee:	2000      	movs	r0, #0
 80182f0:	460b      	mov	r3, r1
 80182f2:	4602      	mov	r2, r0
 80182f4:	ec43 2b10 	vmov	d0, r2, r3
 80182f8:	e020      	b.n	801833c <floor+0x8c>
 80182fa:	4a26      	ldr	r2, [pc, #152]	; (8018394 <floor+0xe4>)
 80182fc:	411a      	asrs	r2, r3
 80182fe:	ea01 0402 	and.w	r4, r1, r2
 8018302:	4304      	orrs	r4, r0
 8018304:	d01a      	beq.n	801833c <floor+0x8c>
 8018306:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8018388 <floor+0xd8>
 801830a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801830e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018316:	ddeb      	ble.n	80182f0 <floor+0x40>
 8018318:	2900      	cmp	r1, #0
 801831a:	bfbe      	ittt	lt
 801831c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8018320:	fa40 f303 	asrlt.w	r3, r0, r3
 8018324:	18c9      	addlt	r1, r1, r3
 8018326:	ea21 0102 	bic.w	r1, r1, r2
 801832a:	2000      	movs	r0, #0
 801832c:	e7e0      	b.n	80182f0 <floor+0x40>
 801832e:	2b33      	cmp	r3, #51	; 0x33
 8018330:	dd05      	ble.n	801833e <floor+0x8e>
 8018332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018336:	d101      	bne.n	801833c <floor+0x8c>
 8018338:	ee30 0b00 	vadd.f64	d0, d0, d0
 801833c:	bd30      	pop	{r4, r5, pc}
 801833e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8018342:	f04f 32ff 	mov.w	r2, #4294967295
 8018346:	40e2      	lsrs	r2, r4
 8018348:	4202      	tst	r2, r0
 801834a:	d0f7      	beq.n	801833c <floor+0x8c>
 801834c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8018388 <floor+0xd8>
 8018350:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018354:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801835c:	ddc8      	ble.n	80182f0 <floor+0x40>
 801835e:	2900      	cmp	r1, #0
 8018360:	da02      	bge.n	8018368 <floor+0xb8>
 8018362:	2b14      	cmp	r3, #20
 8018364:	d103      	bne.n	801836e <floor+0xbe>
 8018366:	3101      	adds	r1, #1
 8018368:	ea20 0002 	bic.w	r0, r0, r2
 801836c:	e7c0      	b.n	80182f0 <floor+0x40>
 801836e:	2401      	movs	r4, #1
 8018370:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8018374:	fa04 f303 	lsl.w	r3, r4, r3
 8018378:	4418      	add	r0, r3
 801837a:	42a8      	cmp	r0, r5
 801837c:	bf38      	it	cc
 801837e:	1909      	addcc	r1, r1, r4
 8018380:	e7f2      	b.n	8018368 <floor+0xb8>
 8018382:	2000      	movs	r0, #0
 8018384:	4601      	mov	r1, r0
 8018386:	e7b3      	b.n	80182f0 <floor+0x40>
 8018388:	8800759c 	.word	0x8800759c
 801838c:	7e37e43c 	.word	0x7e37e43c
 8018390:	bff00000 	.word	0xbff00000
 8018394:	000fffff 	.word	0x000fffff

08018398 <nan>:
 8018398:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80183a0 <nan+0x8>
 801839c:	4770      	bx	lr
 801839e:	bf00      	nop
 80183a0:	00000000 	.word	0x00000000
 80183a4:	7ff80000 	.word	0x7ff80000

080183a8 <scalbn>:
 80183a8:	b082      	sub	sp, #8
 80183aa:	ed8d 0b00 	vstr	d0, [sp]
 80183ae:	9b01      	ldr	r3, [sp, #4]
 80183b0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80183b4:	b9a2      	cbnz	r2, 80183e0 <scalbn+0x38>
 80183b6:	9a00      	ldr	r2, [sp, #0]
 80183b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80183bc:	4313      	orrs	r3, r2
 80183be:	d03a      	beq.n	8018436 <scalbn+0x8e>
 80183c0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8018498 <scalbn+0xf0>
 80183c4:	4b40      	ldr	r3, [pc, #256]	; (80184c8 <scalbn+0x120>)
 80183c6:	ee20 7b07 	vmul.f64	d7, d0, d7
 80183ca:	4298      	cmp	r0, r3
 80183cc:	ed8d 7b00 	vstr	d7, [sp]
 80183d0:	da11      	bge.n	80183f6 <scalbn+0x4e>
 80183d2:	ed9f 7b33 	vldr	d7, [pc, #204]	; 80184a0 <scalbn+0xf8>
 80183d6:	ed9d 6b00 	vldr	d6, [sp]
 80183da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80183de:	e007      	b.n	80183f0 <scalbn+0x48>
 80183e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80183e4:	428a      	cmp	r2, r1
 80183e6:	d10a      	bne.n	80183fe <scalbn+0x56>
 80183e8:	ed9d 7b00 	vldr	d7, [sp]
 80183ec:	ee37 7b07 	vadd.f64	d7, d7, d7
 80183f0:	ed8d 7b00 	vstr	d7, [sp]
 80183f4:	e01f      	b.n	8018436 <scalbn+0x8e>
 80183f6:	9b01      	ldr	r3, [sp, #4]
 80183f8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80183fc:	3a36      	subs	r2, #54	; 0x36
 80183fe:	4402      	add	r2, r0
 8018400:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8018404:	428a      	cmp	r2, r1
 8018406:	dd0a      	ble.n	801841e <scalbn+0x76>
 8018408:	ed9f 7b27 	vldr	d7, [pc, #156]	; 80184a8 <scalbn+0x100>
 801840c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80184b0 <scalbn+0x108>
 8018410:	eeb0 6b47 	vmov.f64	d6, d7
 8018414:	9b01      	ldr	r3, [sp, #4]
 8018416:	2b00      	cmp	r3, #0
 8018418:	fe27 7b05 	vselge.f64	d7, d7, d5
 801841c:	e7dd      	b.n	80183da <scalbn+0x32>
 801841e:	2a00      	cmp	r2, #0
 8018420:	dd0d      	ble.n	801843e <scalbn+0x96>
 8018422:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018426:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801842a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801842e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8018432:	e9cd 0100 	strd	r0, r1, [sp]
 8018436:	ed9d 0b00 	vldr	d0, [sp]
 801843a:	b002      	add	sp, #8
 801843c:	4770      	bx	lr
 801843e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8018442:	da18      	bge.n	8018476 <scalbn+0xce>
 8018444:	f24c 3350 	movw	r3, #50000	; 0xc350
 8018448:	4298      	cmp	r0, r3
 801844a:	9b01      	ldr	r3, [sp, #4]
 801844c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8018450:	dd09      	ble.n	8018466 <scalbn+0xbe>
 8018452:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80184a8 <scalbn+0x100>
 8018456:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80184b0 <scalbn+0x108>
 801845a:	eeb0 6b47 	vmov.f64	d6, d7
 801845e:	2b00      	cmp	r3, #0
 8018460:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8018464:	e7b9      	b.n	80183da <scalbn+0x32>
 8018466:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80184a0 <scalbn+0xf8>
 801846a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 80184b8 <scalbn+0x110>
 801846e:	eeb0 6b47 	vmov.f64	d6, d7
 8018472:	2b00      	cmp	r3, #0
 8018474:	e7f4      	b.n	8018460 <scalbn+0xb8>
 8018476:	e9dd 0100 	ldrd	r0, r1, [sp]
 801847a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801847e:	3236      	adds	r2, #54	; 0x36
 8018480:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018484:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8018488:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 80184c0 <scalbn+0x118>
 801848c:	ec41 0b17 	vmov	d7, r0, r1
 8018490:	e7a3      	b.n	80183da <scalbn+0x32>
 8018492:	bf00      	nop
 8018494:	f3af 8000 	nop.w
 8018498:	00000000 	.word	0x00000000
 801849c:	43500000 	.word	0x43500000
 80184a0:	c2f8f359 	.word	0xc2f8f359
 80184a4:	01a56e1f 	.word	0x01a56e1f
 80184a8:	8800759c 	.word	0x8800759c
 80184ac:	7e37e43c 	.word	0x7e37e43c
 80184b0:	8800759c 	.word	0x8800759c
 80184b4:	fe37e43c 	.word	0xfe37e43c
 80184b8:	c2f8f359 	.word	0xc2f8f359
 80184bc:	81a56e1f 	.word	0x81a56e1f
 80184c0:	00000000 	.word	0x00000000
 80184c4:	3c900000 	.word	0x3c900000
 80184c8:	ffff3cb0 	.word	0xffff3cb0

080184cc <_init>:
 80184cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184ce:	bf00      	nop
 80184d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184d2:	bc08      	pop	{r3}
 80184d4:	469e      	mov	lr, r3
 80184d6:	4770      	bx	lr

080184d8 <_fini>:
 80184d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184da:	bf00      	nop
 80184dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184de:	bc08      	pop	{r3}
 80184e0:	469e      	mov	lr, r3
 80184e2:	4770      	bx	lr
