
BongZhu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017fd4  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f18  080182a8  080182a8  000282a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a1c0  0801a1c0  0002a1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a1c8  0801a1c8  0002a1c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a1cc  0801a1cc  0002a1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  24000000  0801a1d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000011cc  240001e8  0801a3b4  000301e8  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240013b4  0801a3b4  000313b4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a2f2  00000000  00000000  00030212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005c55  00000000  00000000  0006a504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ae8  00000000  00000000  00070160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018e0  00000000  00000000  00071c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039e94  00000000  00000000  00073528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000295cd  00000000  00000000  000ad3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016e13a  00000000  00000000  000d6989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00244ac3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000083bc  00000000  00000000  00244b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001e8 	.word	0x240001e8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801828c 	.word	0x0801828c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001ec 	.word	0x240001ec
 800030c:	0801828c 	.word	0x0801828c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <AMT21_initialise>:
 *      Author: fame
 */
#include <Library/AMT21.h>

void AMT21_initialise(AMT21 *dev, UART_HandleTypeDef *uartHandle,
		uint8_t address, GPIO_TypeDef *DE_port, uint16_t DE_Pin) {
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4613      	mov	r3, r2
 80006c6:	71fb      	strb	r3, [r7, #7]
	dev->uartHandle = uartHandle;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	601a      	str	r2, [r3, #0]
	dev->DE_port = DE_port;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	605a      	str	r2, [r3, #4]
	dev->DE_pin = DE_Pin;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	8b3a      	ldrh	r2, [r7, #24]
 80006d8:	811a      	strh	r2, [r3, #8]
	dev->address = address;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	79fa      	ldrb	r2, [r7, #7]
 80006de:	729a      	strb	r2, [r3, #10]

	dev->uart_buf = 0;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2200      	movs	r2, #0
 80006e4:	819a      	strh	r2, [r3, #12]
	dev->position = 0;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2200      	movs	r2, #0
 80006ea:	81da      	strh	r2, [r3, #14]
	dev->prev_position = 0;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2200      	movs	r2, #0
 80006f0:	821a      	strh	r2, [r3, #16]
	dev->k0 = 0;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2200      	movs	r2, #0
 80006f6:	749a      	strb	r2, [r3, #18]
	dev->k1 = 0;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	2200      	movs	r2, #0
 80006fc:	74da      	strb	r2, [r3, #19]
}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <AMT21_read_value>:

void AMT21_read_value(AMT21 *dev) {
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
	 AMT21_read_value does read raw data from encoder but you must use AMT21_check_value first.

	 :param dev = AMT21 struct
	 :return: None
	 */
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6858      	ldr	r0, [r3, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	891b      	ldrh	r3, [r3, #8]
 800071a:	2201      	movs	r2, #1
 800071c:	4619      	mov	r1, r3
 800071e:	f00c fc1f 	bl	800cf60 <HAL_GPIO_WritePin>
	//HAL_UART_Transmit(dev->uartHandle, (uint8_t*) &(dev->address),
			//1, 100);
	HAL_UART_Transmit(dev->uartHandle, &(dev->address),
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f103 010a 	add.w	r1, r3, #10
 800072c:	2364      	movs	r3, #100	; 0x64
 800072e:	2201      	movs	r2, #1
 8000730:	f010 ff2e 	bl	8011590 <HAL_UART_Transmit>
				1, 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6858      	ldr	r0, [r3, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	891b      	ldrh	r3, [r3, #8]
 800073c:	2200      	movs	r2, #0
 800073e:	4619      	mov	r1, r3
 8000740:	f00c fc0e 	bl	800cf60 <HAL_GPIO_WritePin>
	HAL_UART_Receive(dev->uartHandle, (uint8_t*) &(dev->uart_buf), 2, 100);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6818      	ldr	r0, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f103 010c 	add.w	r1, r3, #12
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2202      	movs	r2, #2
 8000752:	f010 ffb3 	bl	80116bc <HAL_UART_Receive>
	dev->k0 = (dev->uart_buf & 0x4000) == 0x4000;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	899b      	ldrh	r3, [r3, #12]
 800075a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075e:	2b00      	cmp	r3, #0
 8000760:	bf14      	ite	ne
 8000762:	2301      	movne	r3, #1
 8000764:	2300      	moveq	r3, #0
 8000766:	b2db      	uxtb	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	749a      	strb	r2, [r3, #18]
	dev->k1 = (dev->uart_buf & 0x8000) == 0x8000;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	899b      	ldrh	r3, [r3, #12]
 8000772:	b21b      	sxth	r3, r3
 8000774:	b29b      	uxth	r3, r3
 8000776:	0bdb      	lsrs	r3, r3, #15
 8000778:	b2db      	uxtb	r3, r3
 800077a:	461a      	mov	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	74da      	strb	r2, [r3, #19]
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <AMT21_check_value>:
	HAL_UART_Transmit(dev->uartHandle, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21_check_value(AMT21 *dev) {
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

	 :param dev = AMT21 struct
	 :return: HAL_OK 	: if value is right
	 HAL_ERROR : if value is wrong
	 */
	uint16_t position_temp = dev->uart_buf & 0x3FFF;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	899b      	ldrh	r3, [r3, #12]
 8000794:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000798:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = dev->uart_buf & 0x0001;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	899b      	ldrh	r3, [r3, #12]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (dev->uart_buf >> 1) & 0x0001;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	899b      	ldrh	r3, [r3, #12]
 80007aa:	085b      	lsrs	r3, r3, #1
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007b6:	2300      	movs	r3, #0
 80007b8:	737b      	strb	r3, [r7, #13]
 80007ba:	e020      	b.n	80007fe <AMT21_check_value+0x76>
		dev->uart_buf = dev->uart_buf >> 2;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	899b      	ldrh	r3, [r3, #12]
 80007c0:	089b      	lsrs	r3, r3, #2
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	819a      	strh	r2, [r3, #12]
		k0_check ^= dev->uart_buf & 0x0001;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	899b      	ldrh	r3, [r3, #12]
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	b25a      	sxtb	r2, r3
 80007d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d8:	4053      	eors	r3, r2
 80007da:	b25b      	sxtb	r3, r3
 80007dc:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (dev->uart_buf >> 1) & 0x0001;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	899b      	ldrh	r3, [r3, #12]
 80007e2:	085b      	lsrs	r3, r3, #1
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	b25a      	sxtb	r2, r3
 80007ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007f2:	4053      	eors	r3, r2
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007f8:	7b7b      	ldrb	r3, [r7, #13]
 80007fa:	3301      	adds	r3, #1
 80007fc:	737b      	strb	r3, [r7, #13]
 80007fe:	7b7b      	ldrb	r3, [r7, #13]
 8000800:	2b05      	cmp	r3, #5
 8000802:	d9db      	bls.n	80007bc <AMT21_check_value+0x34>
	}
	k0_check = !k0_check;
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	2b00      	cmp	r3, #0
 8000808:	bf0c      	ite	eq
 800080a:	2301      	moveq	r3, #1
 800080c:	2300      	movne	r3, #0
 800080e:	b2db      	uxtb	r3, r3
 8000810:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 8000812:	7bbb      	ldrb	r3, [r7, #14]
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf0c      	ite	eq
 8000818:	2301      	moveq	r3, #1
 800081a:	2300      	movne	r3, #0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	73bb      	strb	r3, [r7, #14]
	if ((dev->k0 == k0_check) && (dev->k1 == k1_check)) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7c9b      	ldrb	r3, [r3, #18]
 8000824:	7bfa      	ldrb	r2, [r7, #15]
 8000826:	429a      	cmp	r2, r3
 8000828:	d109      	bne.n	800083e <AMT21_check_value+0xb6>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	7cdb      	ldrb	r3, [r3, #19]
 800082e:	7bba      	ldrb	r2, [r7, #14]
 8000830:	429a      	cmp	r2, r3
 8000832:	d104      	bne.n	800083e <AMT21_check_value+0xb6>
		dev->position = position_temp;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	897a      	ldrh	r2, [r7, #10]
 8000838:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 800083a:	2300      	movs	r3, #0
 800083c:	e000      	b.n	8000840 <AMT21_check_value+0xb8>
	} else {
		return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
	}
}
 8000840:	4618      	mov	r0, r3
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <AMT21_unwrap>:

int32_t AMT21_unwrap(int32_t pulse, int32_t prev_pulse) {
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
	int32_t dPulse = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
	if (pulse - prev_pulse > 8191) {
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000864:	db06      	blt.n	8000874 <AMT21_unwrap+0x28>
		dPulse = -(16383 - (pulse-prev_pulse));
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	1ad2      	subs	r2, r2, r3
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <AMT21_unwrap+0x5c>)
 800086e:	4413      	add	r3, r2
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	e011      	b.n	8000898 <AMT21_unwrap+0x4c>
	} else if ( pulse -  prev_pulse < -8191) {
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800087e:	dc07      	bgt.n	8000890 <AMT21_unwrap+0x44>
		dPulse = 16383 - (prev_pulse - pulse);
 8000880:	683a      	ldr	r2, [r7, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	1ad2      	subs	r2, r2, r3
 8000886:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800088a:	1a9b      	subs	r3, r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	e003      	b.n	8000898 <AMT21_unwrap+0x4c>
	} else {
		dPulse =  pulse -  prev_pulse;
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	60fb      	str	r3, [r7, #12]
	}
	return dPulse;
 8000898:	68fb      	ldr	r3, [r7, #12]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	ffffc001 	.word	0xffffc001

080008ac <ARMsProtocol_FUNC_Init>:
/**
 * @brief	Initial Function : Initial the parameters that use in this library
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Init(void){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	// setting ARMsProtocol_h1
	ARMsProtocol_h1.handle = &huart3;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <ARMsProtocol_FUNC_Init+0x40>)
 80008b2:	4a0f      	ldr	r2, [pc, #60]	; (80008f0 <ARMsProtocol_FUNC_Init+0x44>)
 80008b4:	601a      	str	r2, [r3, #0]
	ARMsProtocol_h1.Instance = USART3;
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <ARMsProtocol_FUNC_Init+0x40>)
 80008b8:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <ARMsProtocol_FUNC_Init+0x48>)
 80008ba:	605a      	str	r2, [r3, #4]
	ARMsProtocol_h1.slave_id = 0;
 80008bc:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <ARMsProtocol_FUNC_Init+0x40>)
 80008be:	2200      	movs	r2, #0
 80008c0:	721a      	strb	r2, [r3, #8]

	//setting ARMsProtocol_Data
	ARMsProtocol_Data.Code = 0;
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <ARMsProtocol_FUNC_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
	ARMsProtocol_Data.State = 0;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <ARMsProtocol_FUNC_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
	ARMsProtocol_Data.Rx_count = 0;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <ARMsProtocol_FUNC_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8

	// Enable UART IT
	HAL_UART_Receive_IT(ARMsProtocol_h1.handle, &ARMsProtocol_Data.Rx_reg, 1);
 80008da:	4b04      	ldr	r3, [pc, #16]	; (80008ec <ARMsProtocol_FUNC_Init+0x40>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2201      	movs	r2, #1
 80008e0:	4906      	ldr	r1, [pc, #24]	; (80008fc <ARMsProtocol_FUNC_Init+0x50>)
 80008e2:	4618      	mov	r0, r3
 80008e4:	f011 f866 	bl	80119b4 <HAL_UART_Receive_IT>
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	24000304 	.word	0x24000304
 80008f0:	24001160 	.word	0x24001160
 80008f4:	40004800 	.word	0x40004800
 80008f8:	24000310 	.word	0x24000310
 80008fc:	24000374 	.word	0x24000374

08000900 <ARMsProtocol_FUNC_Interface>:
/**
 * @brief	Interface Function : Data frame checking and state machine
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Interface(void){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
	ARMsProtocol_Data.Flag = 1;
 8000906:	4b6b      	ldr	r3, [pc, #428]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000908:	2201      	movs	r2, #1
 800090a:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
	if(ARMsProtocol_Data.Flag  == 1){
 800090e:	4b69      	ldr	r3, [pc, #420]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000910:	f893 30e5 	ldrb.w	r3, [r3, #229]	; 0xe5
 8000914:	2b01      	cmp	r3, #1
 8000916:	f040 80c8 	bne.w	8000aaa <ARMsProtocol_FUNC_Interface+0x1aa>
		//check header
		if(ARMsProtocol_Data.State == 0){
 800091a:	4b66      	ldr	r3, [pc, #408]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 800091c:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8000920:	2b00      	cmp	r3, #0
 8000922:	d10d      	bne.n	8000940 <ARMsProtocol_FUNC_Interface+0x40>
			ARMsProtocol_Data.Header = ARMsProtocol_Data.Rx_buf[0];
 8000924:	4b63      	ldr	r3, [pc, #396]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000926:	781a      	ldrb	r2, [r3, #0]
 8000928:	4b62      	ldr	r3, [pc, #392]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 800092a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			if(ARMsProtocol_Data.Header == ARMsProtocol_HEADER){
 800092e:	4b61      	ldr	r3, [pc, #388]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000930:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8000934:	2bff      	cmp	r3, #255	; 0xff
 8000936:	d103      	bne.n	8000940 <ARMsProtocol_FUNC_Interface+0x40>
				ARMsProtocol_Data.State = 1;
 8000938:	4b5e      	ldr	r3, [pc, #376]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 800093a:	2201      	movs	r2, #1
 800093c:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
			}
		}
		//check slave id
		if(ARMsProtocol_Data.State == 1){
 8000940:	4b5c      	ldr	r3, [pc, #368]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000942:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8000946:	2b01      	cmp	r3, #1
 8000948:	d122      	bne.n	8000990 <ARMsProtocol_FUNC_Interface+0x90>
			ARMsProtocol_Data.Id = ARMsProtocol_Data.Rx_buf[1];
 800094a:	4b5a      	ldr	r3, [pc, #360]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 800094c:	785a      	ldrb	r2, [r3, #1]
 800094e:	4b59      	ldr	r3, [pc, #356]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000950:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
			if(ARMsProtocol_Data.Id == ARMsProtocol_h1.slave_id){
 8000954:	4b57      	ldr	r3, [pc, #348]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000956:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800095a:	4b57      	ldr	r3, [pc, #348]	; (8000ab8 <ARMsProtocol_FUNC_Interface+0x1b8>)
 800095c:	7a1b      	ldrb	r3, [r3, #8]
 800095e:	429a      	cmp	r2, r3
 8000960:	d116      	bne.n	8000990 <ARMsProtocol_FUNC_Interface+0x90>
				ARMsProtocol_Data.Instruction = ARMsProtocol_Data.Rx_buf[2];
 8000962:	4b54      	ldr	r3, [pc, #336]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000964:	789a      	ldrb	r2, [r3, #2]
 8000966:	4b53      	ldr	r3, [pc, #332]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000968:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
				ARMsProtocol_Data.Length = ARMsProtocol_Data.Rx_buf[3];
 800096c:	4b51      	ldr	r3, [pc, #324]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 800096e:	78da      	ldrb	r2, [r3, #3]
 8000970:	4b50      	ldr	r3, [pc, #320]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000972:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
				ARMsProtocol_Data._CRC = ARMsProtocol_Data.Rx_buf[3 + ARMsProtocol_Data.Length];
 8000976:	4b4f      	ldr	r3, [pc, #316]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000978:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800097c:	3303      	adds	r3, #3
 800097e:	4a4d      	ldr	r2, [pc, #308]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000980:	5cd2      	ldrb	r2, [r2, r3]
 8000982:	4b4c      	ldr	r3, [pc, #304]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000984:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
				ARMsProtocol_Data.State = 2;
 8000988:	4b4a      	ldr	r3, [pc, #296]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 800098a:	2202      	movs	r2, #2
 800098c:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
			}
		}
		// check crc
		if(ARMsProtocol_Data.State == 2){
 8000990:	4b48      	ldr	r3, [pc, #288]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000992:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8000996:	2b02      	cmp	r3, #2
 8000998:	d13b      	bne.n	8000a12 <ARMsProtocol_FUNC_Interface+0x112>
			ARMsProtocol_CALC_CRC((uint32_t *) &ARMsProtocol_Data.Rx_buf[2], ARMsProtocol_Data.Length + 1);
 800099a:	4b46      	ldr	r3, [pc, #280]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 800099c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80009a0:	3301      	adds	r3, #1
 80009a2:	4619      	mov	r1, r3
 80009a4:	4845      	ldr	r0, [pc, #276]	; (8000abc <ARMsProtocol_FUNC_Interface+0x1bc>)
 80009a6:	f000 f915 	bl	8000bd4 <ARMsProtocol_CALC_CRC>
			if(ARMsProtocol_Data._CRC == ARMsProtocol_Data.CRC_CAL){
 80009aa:	4b42      	ldr	r3, [pc, #264]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 80009ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b40      	ldr	r3, [pc, #256]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 80009b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d11b      	bne.n	80009f2 <ARMsProtocol_FUNC_Interface+0xf2>
				for(int i = 0;i <= ARMsProtocol_Data.Length - 2;i++){
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	e00c      	b.n	80009da <ARMsProtocol_FUNC_Interface+0xda>
					ARMsProtocol_Data.Data_buf[i] = ARMsProtocol_Data.Rx_buf[i+4];
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3304      	adds	r3, #4
 80009c4:	4a3b      	ldr	r2, [pc, #236]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 80009c6:	5cd1      	ldrb	r1, [r2, r3]
 80009c8:	4a3a      	ldr	r2, [pc, #232]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	3380      	adds	r3, #128	; 0x80
 80009d0:	460a      	mov	r2, r1
 80009d2:	701a      	strb	r2, [r3, #0]
				for(int i = 0;i <= ARMsProtocol_Data.Length - 2;i++){
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3301      	adds	r3, #1
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b36      	ldr	r3, [pc, #216]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 80009dc:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80009e0:	3b01      	subs	r3, #1
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	dbeb      	blt.n	80009c0 <ARMsProtocol_FUNC_Interface+0xc0>
				}
				ARMsProtocol_Data.State = 3;
 80009e8:	4b32      	ldr	r3, [pc, #200]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 80009ea:	2203      	movs	r2, #3
 80009ec:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 80009f0:	e005      	b.n	80009fe <ARMsProtocol_FUNC_Interface+0xfe>
			}
			else{
				ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ILLEGALCRC);
 80009f2:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <ARMsProtocol_FUNC_Interface+0x1b8>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2102      	movs	r1, #2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 f8b5 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
			}
			ARMsProtocol_FUNC_Rx_Clrbuf(ARMsProtocol_Data.Rx_count);
 80009fe:	4b2d      	ldr	r3, [pc, #180]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000a00:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 f8fd 	bl	8000c04 <ARMsProtocol_FUNC_Rx_Clrbuf>
			ARMsProtocol_Data.Rx_count = 0;
 8000a0a:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
		}
		if(ARMsProtocol_Data.State == 3){
 8000a12:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000a14:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8000a18:	2b03      	cmp	r3, #3
 8000a1a:	d139      	bne.n	8000a90 <ARMsProtocol_FUNC_Interface+0x190>
			switch(ARMsProtocol_Data.Instruction){
 8000a1c:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000a1e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8000a22:	3b01      	subs	r3, #1
 8000a24:	2b06      	cmp	r3, #6
 8000a26:	d82c      	bhi.n	8000a82 <ARMsProtocol_FUNC_Interface+0x182>
 8000a28:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <ARMsProtocol_FUNC_Interface+0x130>)
 8000a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2e:	bf00      	nop
 8000a30:	08000a4d 	.word	0x08000a4d
 8000a34:	08000a53 	.word	0x08000a53
 8000a38:	08000a59 	.word	0x08000a59
 8000a3c:	08000a5f 	.word	0x08000a5f
 8000a40:	08000a65 	.word	0x08000a65
 8000a44:	08000a6b 	.word	0x08000a6b
 8000a48:	08000a77 	.word	0x08000a77
			/* USER CODE BEGIN 0 */
			case ARMsProtocol_ADDR_JOINTJOG:
				ARMsProtocol_FUNC_Jointjog();
 8000a4c:	f000 f92c 	bl	8000ca8 <ARMsProtocol_FUNC_Jointjog>
				break;
 8000a50:	e01f      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			case ARMsProtocol_ADDR_CATESIANJOG:
				ARMsProtocol_FUNC_Catesianjog();
 8000a52:	f000 fa35 	bl	8000ec0 <ARMsProtocol_FUNC_Catesianjog>
				break;
 8000a56:	e01c      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			case ARMsProtocol_ADDR_TRAJECTORY:
				ARMsProtocol_FUNC_Trajectory();
 8000a58:	f000 fb20 	bl	800109c <ARMsProtocol_FUNC_Trajectory>
				break;
 8000a5c:	e019      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			case ARMsProtocol_ADDR_PATHWAY:
				ARMsProtocol_FUNC_Pathway();
 8000a5e:	f000 f90f 	bl	8000c80 <ARMsProtocol_FUNC_Pathway>
				break;
 8000a62:	e016      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			case ARMsProtocol_ADDR_GRIPPER:
				ARMsProtocol_FUNC_Gripper();
 8000a64:	f000 fb2e 	bl	80010c4 <ARMsProtocol_FUNC_Gripper>
				break;
 8000a68:	e013      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			case ARMsProtocol_ADDR_JOTNTFEEDBACK:
				ARMsProtocol_FUNC_Jointfeedback(ARMsProtocol_h1.handle);
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <ARMsProtocol_FUNC_Interface+0x1b8>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 fb4a 	bl	8001108 <ARMsProtocol_FUNC_Jointfeedback>
				break;
 8000a74:	e00d      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			case ARMsProtocol_ADDR_BOARDFEEDBACK:
				ARMsProtocol_FUNC_Boardfeedback(ARMsProtocol_h1.handle);
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <ARMsProtocol_FUNC_Interface+0x1b8>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 fc9c 	bl	80013b8 <ARMsProtocol_FUNC_Boardfeedback>
				break;
 8000a80:	e007      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			/* USER CODE END 0 */
			default:
				ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ILLEGALFUNC);
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <ARMsProtocol_FUNC_Interface+0x1b8>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2101      	movs	r1, #1
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 f86d 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
 8000a8e:	e000      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			}
		}
 8000a90:	bf00      	nop
		ARMsProtocol_Data.Flag  = 0;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
		ARMsProtocol_Data.State = 0;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
		ARMsProtocol_Data.Rx_count = 0;
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	}
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	24000310 	.word	0x24000310
 8000ab8:	24000304 	.word	0x24000304
 8000abc:	24000312 	.word	0x24000312

08000ac0 <ARMsProtocol_FUNC_Rx_Callback>:
/**
 * @brief	Recieve Callback Function
 * @param  	huart : UART_TypeDef of USART
 * @retval 	None
 */
void ARMsProtocol_FUNC_Rx_Callback(UART_HandleTypeDef *huart){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == ARMsProtocol_h1.Instance) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <ARMsProtocol_FUNC_Rx_Callback+0x54>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d11b      	bne.n	8000b0c <ARMsProtocol_FUNC_Rx_Callback+0x4c>
		ARMsProtocol_Data.Rx_buf[ARMsProtocol_Data.Rx_count++] = ARMsProtocol_Data.Rx_reg;
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <ARMsProtocol_FUNC_Rx_Callback+0x58>)
 8000ad6:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8000ada:	1c5a      	adds	r2, r3, #1
 8000adc:	b2d1      	uxtb	r1, r2
 8000ade:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <ARMsProtocol_FUNC_Rx_Callback+0x58>)
 8000ae0:	f882 10e8 	strb.w	r1, [r2, #232]	; 0xe8
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <ARMsProtocol_FUNC_Rx_Callback+0x58>)
 8000ae8:	f893 1064 	ldrb.w	r1, [r3, #100]	; 0x64
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <ARMsProtocol_FUNC_Rx_Callback+0x58>)
 8000aee:	5499      	strb	r1, [r3, r2]
			if (ARMsProtocol_Data.Rx_count >= sizeof(ARMsProtocol_Data.Rx_buf)) {
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <ARMsProtocol_FUNC_Rx_Callback+0x58>)
 8000af2:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8000af6:	2b63      	cmp	r3, #99	; 0x63
 8000af8:	d903      	bls.n	8000b02 <ARMsProtocol_FUNC_Rx_Callback+0x42>
				ARMsProtocol_Data.Rx_count = 0;
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <ARMsProtocol_FUNC_Rx_Callback+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
			}
		HAL_UART_Receive_IT(huart, &ARMsProtocol_Data.Rx_reg, 1);
 8000b02:	2201      	movs	r2, #1
 8000b04:	4905      	ldr	r1, [pc, #20]	; (8000b1c <ARMsProtocol_FUNC_Rx_Callback+0x5c>)
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f010 ff54 	bl	80119b4 <HAL_UART_Receive_IT>
	}
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	24000304 	.word	0x24000304
 8000b18:	24000310 	.word	0x24000310
 8000b1c:	24000374 	.word	0x24000374

08000b20 <ARMsProtocol_FUNC_Tx_Callback>:
/**
 * @brief	Transmit Callback Function
 * @param  	huart : UART_TypeDef of USART
 * @retval 	None
 */
void ARMsProtocol_FUNC_Tx_Callback(UART_HandleTypeDef *huart){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	if (huart->Instance == ARMsProtocol_h1.Instance){
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <ARMsProtocol_FUNC_Tx_Callback+0x3c>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d10e      	bne.n	8000b52 <ARMsProtocol_FUNC_Tx_Callback+0x32>
			HAL_UART_Transmit_IT(huart, &ARMsProtocol_Data.Tx_buf[0], ARMsProtocol_Data.Tx_count);
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <ARMsProtocol_FUNC_Tx_Callback+0x40>)
 8000b36:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4909      	ldr	r1, [pc, #36]	; (8000b64 <ARMsProtocol_FUNC_Tx_Callback+0x44>)
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f010 fe8f 	bl	8011864 <HAL_UART_Transmit_IT>
			while(ARMsProtocol_Data.Tx_flag);
 8000b46:	bf00      	nop
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <ARMsProtocol_FUNC_Tx_Callback+0x40>)
 8000b4a:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1fa      	bne.n	8000b48 <ARMsProtocol_FUNC_Tx_Callback+0x28>
			//ARMsProtocol_Data.Tx_count = 0;
	}
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	24000304 	.word	0x24000304
 8000b60:	24000310 	.word	0x24000310
 8000b64:	24000375 	.word	0x24000375

08000b68 <ARMsProtocol_EXCEPTION_Response>:
 * 									0x02 = ARMsProtocol_TRANSMIT_ILLEGALCRC
 * 									0x03 = ARMsProtocol_TRANSMIT_ACKNOWLEDGE
 * 									0x04 = ARMsProtocol_TRANSMIT_DONE
 * @retval 	None
 */
void ARMsProtocol_EXCEPTION_Response(UART_HandleTypeDef *huart, uint8_t code){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	70fb      	strb	r3, [r7, #3]
	ARMsProtocol_Data.Tx_count = 4;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000b76:	2204      	movs	r2, #4
 8000b78:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	ARMsProtocol_Data.Tx_buf[0] = 0xFF;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000b7e:	22ff      	movs	r2, #255	; 0xff
 8000b80:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	ARMsProtocol_Data.Tx_buf[1] = ARMsProtocol_h1.slave_id;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <ARMsProtocol_EXCEPTION_Response+0x64>)
 8000b86:	7a1a      	ldrb	r2, [r3, #8]
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000b8a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	ARMsProtocol_Data.Tx_buf[2] = code;
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	ARMsProtocol_CALC_CRC((uint32_t*) &ARMsProtocol_Data.Tx_buf, ARMsProtocol_Data.Tx_count - 1);
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000b98:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <ARMsProtocol_EXCEPTION_Response+0x68>)
 8000ba2:	f000 f817 	bl	8000bd4 <ARMsProtocol_CALC_CRC>
	ARMsProtocol_Data.Tx_buf[3] = ARMsProtocol_Data.CRC_CAL;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000bae:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	ARMsProtocol_Data.Tx_flag = 1;
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
	ARMsProtocol_FUNC_Tx_Callback(huart);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ffb0 	bl	8000b20 <ARMsProtocol_FUNC_Tx_Callback>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	24000310 	.word	0x24000310
 8000bcc:	24000304 	.word	0x24000304
 8000bd0:	24000375 	.word	0x24000375

08000bd4 <ARMsProtocol_CALC_CRC>:
 * @param  	*nData  : Data
 * 			wLength : Length of Data
 * @retval 	None
 */
void ARMsProtocol_CALC_CRC (uint32_t *pBuffer, uint32_t BufferLength)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
	ARMsProtocol_Data.CRC_CAL = HAL_CRC_Calculate(&hcrc, pBuffer, BufferLength) ^ 0xFF;
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <ARMsProtocol_CALC_CRC+0x28>)
 8000be4:	f00b f918 	bl	800be18 <HAL_CRC_Calculate>
 8000be8:	4603      	mov	r3, r0
 8000bea:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8000bee:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <ARMsProtocol_CALC_CRC+0x2c>)
 8000bf0:	6793      	str	r3, [r2, #120]	; 0x78
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	240004e0 	.word	0x240004e0
 8000c00:	24000310 	.word	0x24000310

08000c04 <ARMsProtocol_FUNC_Rx_Clrbuf>:
/**
 * @brief	Clear Recieve Buffer
 * @param  	count : amount of data in Rx_buf
 * @retval 	None
 */
void ARMsProtocol_FUNC_Rx_Clrbuf(uint8_t count){
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
	for(int i =0; i <= count; i++){
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	e007      	b.n	8000c24 <ARMsProtocol_FUNC_Rx_Clrbuf+0x20>
		ARMsProtocol_Data.Rx_buf[i] = 0;
 8000c14:	4a09      	ldr	r2, [pc, #36]	; (8000c3c <ARMsProtocol_FUNC_Rx_Clrbuf+0x38>)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4413      	add	r3, r2
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
	for(int i =0; i <= count; i++){
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	3301      	adds	r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	ddf3      	ble.n	8000c14 <ARMsProtocol_FUNC_Rx_Clrbuf+0x10>
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	24000310 	.word	0x24000310

08000c40 <ARMsProtocol_FUNC_Data_Clrbuf>:
/**
 * @brief	Clear Data Buffer
 * @param  	count : amount of data in Data_buf
 * @retval 	None
 */
void ARMsProtocol_FUNC_Data_Clrbuf(){
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
	for(int i =0; i <= ARMsProtocol_Data.Length; i++){
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	e008      	b.n	8000c5e <ARMsProtocol_FUNC_Data_Clrbuf+0x1e>
		ARMsProtocol_Data.Data_buf[i] = 0;
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <ARMsProtocol_FUNC_Data_Clrbuf+0x3c>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	3380      	adds	r3, #128	; 0x80
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
	for(int i =0; i <= ARMsProtocol_Data.Length; i++){
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <ARMsProtocol_FUNC_Data_Clrbuf+0x3c>)
 8000c60:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8000c64:	461a      	mov	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	ddef      	ble.n	8000c4c <ARMsProtocol_FUNC_Data_Clrbuf+0xc>
	}
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	24000310 	.word	0x24000310

08000c80 <ARMsProtocol_FUNC_Pathway>:
/**
 * @brief	Sethome Function
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Pathway(void){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	// Acknowledge Func
	ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ACKNOWLEDGE);
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <ARMsProtocol_FUNC_Pathway+0x20>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2103      	movs	r1, #3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ff6c 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
	ARMsProtocol_Data.Pathway_flag = 1;
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <ARMsProtocol_FUNC_Pathway+0x24>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	// Clear Data
	ARMsProtocol_FUNC_Data_Clrbuf();
 8000c98:	f7ff ffd2 	bl	8000c40 <ARMsProtocol_FUNC_Data_Clrbuf>
	// Done Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_DONE);
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	24000304 	.word	0x24000304
 8000ca4:	24000310 	.word	0x24000310

08000ca8 <ARMsProtocol_FUNC_Jointjog>:
/**
 * @brief	Jointjog Function
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Jointjog(void){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
	// Acknowledge Func
	ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ACKNOWLEDGE);
 8000cae:	4b80      	ldr	r3, [pc, #512]	; (8000eb0 <ARMsProtocol_FUNC_Jointjog+0x208>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2103      	movs	r1, #3
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff57 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
	ARMsProtocol_Data.Jointjog_flag = 1;
 8000cba:	4b7e      	ldr	r3, [pc, #504]	; (8000eb4 <ARMsProtocol_FUNC_Jointjog+0x20c>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
	double data_buf = 0.0;
 8000cc2:	f04f 0200 	mov.w	r2, #0
 8000cc6:	f04f 0300 	mov.w	r3, #0
 8000cca:	e9c7 2300 	strd	r2, r3, [r7]
	/* USER CODE BEGIN 3 */
	for(int i = 0;i < 5;i++){
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	e0d2      	b.n	8000e7a <ARMsProtocol_FUNC_Jointjog+0x1d2>
		data_buf = (int16_t)((ARMsProtocol_Data.Data_buf[i*2] << 8) + ARMsProtocol_Data.Data_buf[(i*2)+1]);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4a76      	ldr	r2, [pc, #472]	; (8000eb4 <ARMsProtocol_FUNC_Jointjog+0x20c>)
 8000cda:	4413      	add	r3, r2
 8000cdc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	3301      	adds	r3, #1
 8000cec:	4971      	ldr	r1, [pc, #452]	; (8000eb4 <ARMsProtocol_FUNC_Jointjog+0x20c>)
 8000cee:	440b      	add	r3, r1
 8000cf0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	4413      	add	r3, r2
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	b21b      	sxth	r3, r3
 8000cfc:	ee07 3a90 	vmov	s15, r3
 8000d00:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d04:	ed87 7b00 	vstr	d7, [r7]
		data_buf = data_buf/1000.0;
 8000d08:	ed97 6b00 	vldr	d6, [r7]
 8000d0c:	ed9f 5b60 	vldr	d5, [pc, #384]	; 8000e90 <ARMsProtocol_FUNC_Jointjog+0x1e8>
 8000d10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d14:	ed87 7b00 	vstr	d7, [r7]
		desired_position[i] += data_buf;
 8000d18:	4a67      	ldr	r2, [pc, #412]	; (8000eb8 <ARMsProtocol_FUNC_Jointjog+0x210>)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	4413      	add	r3, r2
 8000d20:	ed93 6b00 	vldr	d6, [r3]
 8000d24:	ed97 7b00 	vldr	d7, [r7]
 8000d28:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d2c:	4a62      	ldr	r2, [pc, #392]	; (8000eb8 <ARMsProtocol_FUNC_Jointjog+0x210>)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	4413      	add	r3, r2
 8000d34:	ed83 7b00 	vstr	d7, [r3]
		if (i == 0){
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d112      	bne.n	8000d64 <ARMsProtocol_FUNC_Jointjog+0xbc>
			data_buf = data_buf / (9.0 / 25.0);
 8000d3e:	ed97 6b00 	vldr	d6, [r7]
 8000d42:	ed9f 5b55 	vldr	d5, [pc, #340]	; 8000e98 <ARMsProtocol_FUNC_Jointjog+0x1f0>
 8000d46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d4a:	ed87 7b00 	vstr	d7, [r7]
			desired_position[0] += data_buf;
 8000d4e:	4b5a      	ldr	r3, [pc, #360]	; (8000eb8 <ARMsProtocol_FUNC_Jointjog+0x210>)
 8000d50:	ed93 6b00 	vldr	d6, [r3]
 8000d54:	ed97 7b00 	vldr	d7, [r7]
 8000d58:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d5c:	4b56      	ldr	r3, [pc, #344]	; (8000eb8 <ARMsProtocol_FUNC_Jointjog+0x210>)
 8000d5e:	ed83 7b00 	vstr	d7, [r3]
 8000d62:	e087      	b.n	8000e74 <ARMsProtocol_FUNC_Jointjog+0x1cc>
		}
		else if (i == 1){
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d112      	bne.n	8000d90 <ARMsProtocol_FUNC_Jointjog+0xe8>
			data_buf = data_buf * 27.0;
 8000d6a:	ed97 7b00 	vldr	d7, [r7]
 8000d6e:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8000d72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d76:	ed87 7b00 	vstr	d7, [r7]
			desired_position[1] += data_buf;
 8000d7a:	4b4f      	ldr	r3, [pc, #316]	; (8000eb8 <ARMsProtocol_FUNC_Jointjog+0x210>)
 8000d7c:	ed93 6b02 	vldr	d6, [r3, #8]
 8000d80:	ed97 7b00 	vldr	d7, [r7]
 8000d84:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d88:	4b4b      	ldr	r3, [pc, #300]	; (8000eb8 <ARMsProtocol_FUNC_Jointjog+0x210>)
 8000d8a:	ed83 7b02 	vstr	d7, [r3, #8]
 8000d8e:	e071      	b.n	8000e74 <ARMsProtocol_FUNC_Jointjog+0x1cc>
		}
		else if (i == 2){
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d116      	bne.n	8000dc4 <ARMsProtocol_FUNC_Jointjog+0x11c>
			data_buf = 22.5 * sin(data_buf);
 8000d96:	ed97 0b00 	vldr	d0, [r7]
 8000d9a:	f016 fadd 	bl	8017358 <sin>
 8000d9e:	eeb0 7b40 	vmov.f64	d7, d0
 8000da2:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8000ea0 <ARMsProtocol_FUNC_Jointjog+0x1f8>
 8000da6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000daa:	ed87 7b00 	vstr	d7, [r7]
			desired_position[2] += data_buf;
 8000dae:	4b42      	ldr	r3, [pc, #264]	; (8000eb8 <ARMsProtocol_FUNC_Jointjog+0x210>)
 8000db0:	ed93 6b04 	vldr	d6, [r3, #16]
 8000db4:	ed97 7b00 	vldr	d7, [r7]
 8000db8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000dbc:	4b3e      	ldr	r3, [pc, #248]	; (8000eb8 <ARMsProtocol_FUNC_Jointjog+0x210>)
 8000dbe:	ed83 7b04 	vstr	d7, [r3, #16]
 8000dc2:	e057      	b.n	8000e74 <ARMsProtocol_FUNC_Jointjog+0x1cc>
		}
		else if (i ==3){
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d124      	bne.n	8000e14 <ARMsProtocol_FUNC_Jointjog+0x16c>
			desired_position[3] += (40.0 * data_buf)/9.0;
 8000dca:	4b3b      	ldr	r3, [pc, #236]	; (8000eb8 <ARMsProtocol_FUNC_Jointjog+0x210>)
 8000dcc:	ed93 6b06 	vldr	d6, [r3, #24]
 8000dd0:	ed97 7b00 	vldr	d7, [r7]
 8000dd4:	ed9f 5b34 	vldr	d5, [pc, #208]	; 8000ea8 <ARMsProtocol_FUNC_Jointjog+0x200>
 8000dd8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000ddc:	eeb2 4b02 	vmov.f64	d4, #34	; 0x41100000  9.0
 8000de0:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000de4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000de8:	4b33      	ldr	r3, [pc, #204]	; (8000eb8 <ARMsProtocol_FUNC_Jointjog+0x210>)
 8000dea:	ed83 7b06 	vstr	d7, [r3, #24]
			desired_position[4] += (40.0 * data_buf)/9.0;
 8000dee:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <ARMsProtocol_FUNC_Jointjog+0x210>)
 8000df0:	ed93 6b08 	vldr	d6, [r3, #32]
 8000df4:	ed97 7b00 	vldr	d7, [r7]
 8000df8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8000ea8 <ARMsProtocol_FUNC_Jointjog+0x200>
 8000dfc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000e00:	eeb2 4b02 	vmov.f64	d4, #34	; 0x41100000  9.0
 8000e04:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000e08:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e0c:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <ARMsProtocol_FUNC_Jointjog+0x210>)
 8000e0e:	ed83 7b08 	vstr	d7, [r3, #32]
 8000e12:	e02f      	b.n	8000e74 <ARMsProtocol_FUNC_Jointjog+0x1cc>
		}
		else if (i ==4){
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	d11c      	bne.n	8000e54 <ARMsProtocol_FUNC_Jointjog+0x1ac>
			desired_position[3] += (4 * data_buf);
 8000e1a:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <ARMsProtocol_FUNC_Jointjog+0x210>)
 8000e1c:	ed93 6b06 	vldr	d6, [r3, #24]
 8000e20:	ed97 7b00 	vldr	d7, [r7]
 8000e24:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000e28:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e2c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e30:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <ARMsProtocol_FUNC_Jointjog+0x210>)
 8000e32:	ed83 7b06 	vstr	d7, [r3, #24]
			desired_position[4] -= (4 * data_buf);
 8000e36:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <ARMsProtocol_FUNC_Jointjog+0x210>)
 8000e38:	ed93 6b08 	vldr	d6, [r3, #32]
 8000e3c:	ed97 7b00 	vldr	d7, [r7]
 8000e40:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000e44:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000e48:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <ARMsProtocol_FUNC_Jointjog+0x210>)
 8000e4e:	ed83 7b08 	vstr	d7, [r3, #32]
 8000e52:	e00f      	b.n	8000e74 <ARMsProtocol_FUNC_Jointjog+0x1cc>
		}
		else {
			desired_position[i] += data_buf;
 8000e54:	4a18      	ldr	r2, [pc, #96]	; (8000eb8 <ARMsProtocol_FUNC_Jointjog+0x210>)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	00db      	lsls	r3, r3, #3
 8000e5a:	4413      	add	r3, r2
 8000e5c:	ed93 6b00 	vldr	d6, [r3]
 8000e60:	ed97 7b00 	vldr	d7, [r7]
 8000e64:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e68:	4a13      	ldr	r2, [pc, #76]	; (8000eb8 <ARMsProtocol_FUNC_Jointjog+0x210>)
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	4413      	add	r3, r2
 8000e70:	ed83 7b00 	vstr	d7, [r3]
	for(int i = 0;i < 5;i++){
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	3301      	adds	r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	2b04      	cmp	r3, #4
 8000e7e:	f77f af29 	ble.w	8000cd4 <ARMsProtocol_FUNC_Jointjog+0x2c>
		}
	}
	/* USER CODE END 3 */

	// Clear Data
	ARMsProtocol_FUNC_Data_Clrbuf();
 8000e82:	f7ff fedd 	bl	8000c40 <ARMsProtocol_FUNC_Data_Clrbuf>
	// Done Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_DONE);
}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	00000000 	.word	0x00000000
 8000e94:	408f4000 	.word	0x408f4000
 8000e98:	70a3d70a 	.word	0x70a3d70a
 8000e9c:	3fd70a3d 	.word	0x3fd70a3d
 8000ea0:	00000000 	.word	0x00000000
 8000ea4:	40368000 	.word	0x40368000
 8000ea8:	00000000 	.word	0x00000000
 8000eac:	40440000 	.word	0x40440000
 8000eb0:	24000304 	.word	0x24000304
 8000eb4:	24000310 	.word	0x24000310
 8000eb8:	24000208 	.word	0x24000208
 8000ebc:	00000000 	.word	0x00000000

08000ec0 <ARMsProtocol_FUNC_Catesianjog>:
/**
 * @brief	Catesianjog Function
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Catesianjog(void){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b0a0      	sub	sp, #128	; 0x80
 8000ec4:	af00      	add	r7, sp, #0
	// Acknowledge Func
	ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ACKNOWLEDGE);
 8000ec6:	4b72      	ldr	r3, [pc, #456]	; (8001090 <ARMsProtocol_FUNC_Catesianjog+0x1d0>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2103      	movs	r1, #3
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fe4b 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
	ARMsProtocol_Data.Catesian_flag = 1;
 8000ed2:	4b70      	ldr	r3, [pc, #448]	; (8001094 <ARMsProtocol_FUNC_Catesianjog+0x1d4>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
	/* USER CODE BEGIN 4 */
	double joint_config[5] = {0};
 8000eda:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ede:	2228      	movs	r2, #40	; 0x28
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f013 faae 	bl	8014444 <memset>
	double delta_q[5] = {0};
 8000ee8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eec:	2228      	movs	r2, #40	; 0x28
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f013 faa7 	bl	8014444 <memset>
	double delta_khe[5] = {0};
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	2228      	movs	r2, #40	; 0x28
 8000efa:	2100      	movs	r1, #0
 8000efc:	4618      	mov	r0, r3
 8000efe:	f013 faa1 	bl	8014444 <memset>
	for (int i = 0; i <5; i++){
 8000f02:	2300      	movs	r3, #0
 8000f04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f06:	e036      	b.n	8000f76 <ARMsProtocol_FUNC_Catesianjog+0xb6>
		delta_khe[i] = (int16_t)((ARMsProtocol_Data.Data_buf[i*2] << 8) + ARMsProtocol_Data.Data_buf[(i*2)+1]);
 8000f08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	4a61      	ldr	r2, [pc, #388]	; (8001094 <ARMsProtocol_FUNC_Catesianjog+0x1d4>)
 8000f0e:	4413      	add	r3, r2
 8000f10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	021b      	lsls	r3, r3, #8
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	3301      	adds	r3, #1
 8000f20:	495c      	ldr	r1, [pc, #368]	; (8001094 <ARMsProtocol_FUNC_Catesianjog+0x1d4>)
 8000f22:	440b      	add	r3, r1
 8000f24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	4413      	add	r3, r2
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	ee07 3a90 	vmov	s15, r3
 8000f34:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000f40:	4413      	add	r3, r2
 8000f42:	3b80      	subs	r3, #128	; 0x80
 8000f44:	ed83 7b00 	vstr	d7, [r3]
		delta_khe[i] = delta_khe[i]/1000.0;
 8000f48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f4a:	00db      	lsls	r3, r3, #3
 8000f4c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000f50:	4413      	add	r3, r2
 8000f52:	3b80      	subs	r3, #128	; 0x80
 8000f54:	ed93 6b00 	vldr	d6, [r3]
 8000f58:	ed9f 5b45 	vldr	d5, [pc, #276]	; 8001070 <ARMsProtocol_FUNC_Catesianjog+0x1b0>
 8000f5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000f68:	4413      	add	r3, r2
 8000f6a:	3b80      	subs	r3, #128	; 0x80
 8000f6c:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i <5; i++){
 8000f70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f72:	3301      	adds	r3, #1
 8000f74:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000f76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000f78:	2b04      	cmp	r3, #4
 8000f7a:	ddc5      	ble.n	8000f08 <ARMsProtocol_FUNC_Catesianjog+0x48>
//	joint_config[2] = (2*M_PI * encoder_config[2])/16384.0f;
//	double m4 = (2*M_PI * encoder_config[3])/16384.0f;
//	double m5 =  (2*M_PI * encoder_config[4])/16384.0f;
//	joint_config[3] = (m4 + m5) * 0.1125;
//	joint_config[4] = (m4 - m5)/8.0;
	joint_config[0] = desired_position[0] * (9.0/25.0);
 8000f7c:	4b46      	ldr	r3, [pc, #280]	; (8001098 <ARMsProtocol_FUNC_Catesianjog+0x1d8>)
 8000f7e:	ed93 7b00 	vldr	d7, [r3]
 8000f82:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8001078 <ARMsProtocol_FUNC_Catesianjog+0x1b8>
 8000f86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f8a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	joint_config[1] = desired_position[1] / 27.0;
 8000f8e:	4b42      	ldr	r3, [pc, #264]	; (8001098 <ARMsProtocol_FUNC_Catesianjog+0x1d8>)
 8000f90:	ed93 6b02 	vldr	d6, [r3, #8]
 8000f94:	eeb3 5b0b 	vmov.f64	d5, #59	; 0x41d80000  27.0
 8000f98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000f9c:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	joint_config[2] = asin(desired_position[2]/22.5);
 8000fa0:	4b3d      	ldr	r3, [pc, #244]	; (8001098 <ARMsProtocol_FUNC_Catesianjog+0x1d8>)
 8000fa2:	ed93 7b04 	vldr	d7, [r3, #16]
 8000fa6:	ed9f 5b36 	vldr	d5, [pc, #216]	; 8001080 <ARMsProtocol_FUNC_Catesianjog+0x1c0>
 8000faa:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000fae:	eeb0 0b46 	vmov.f64	d0, d6
 8000fb2:	f016 fa19 	bl	80173e8 <asin>
 8000fb6:	eeb0 7b40 	vmov.f64	d7, d0
 8000fba:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
	joint_config[3] = (desired_position[3] + desired_position[4]) * 0.1125;
 8000fbe:	4b36      	ldr	r3, [pc, #216]	; (8001098 <ARMsProtocol_FUNC_Catesianjog+0x1d8>)
 8000fc0:	ed93 6b06 	vldr	d6, [r3, #24]
 8000fc4:	4b34      	ldr	r3, [pc, #208]	; (8001098 <ARMsProtocol_FUNC_Catesianjog+0x1d8>)
 8000fc6:	ed93 7b08 	vldr	d7, [r3, #32]
 8000fca:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fce:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8001088 <ARMsProtocol_FUNC_Catesianjog+0x1c8>
 8000fd2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fd6:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
	joint_config[4] = (desired_position[3] - desired_position[4])/8.0;
 8000fda:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <ARMsProtocol_FUNC_Catesianjog+0x1d8>)
 8000fdc:	ed93 6b06 	vldr	d6, [r3, #24]
 8000fe0:	4b2d      	ldr	r3, [pc, #180]	; (8001098 <ARMsProtocol_FUNC_Catesianjog+0x1d8>)
 8000fe2:	ed93 7b08 	vldr	d7, [r3, #32]
 8000fe6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000fea:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8000fee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ff2:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
	IVK(joint_config, delta_khe, delta_q);
 8000ff6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000ffa:	4639      	mov	r1, r7
 8000ffc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001000:	4618      	mov	r0, r3
 8001002:	f000 fd71 	bl	8001ae8 <IVK>
	for (int i = 0; i < 5; i++) {
 8001006:	2300      	movs	r3, #0
 8001008:	67bb      	str	r3, [r7, #120]	; 0x78
 800100a:	e025      	b.n	8001058 <ARMsProtocol_FUNC_Catesianjog+0x198>
		delta_khe[i] = 0;
 800100c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8001014:	4413      	add	r3, r2
 8001016:	f1a3 0180 	sub.w	r1, r3, #128	; 0x80
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	e9c1 2300 	strd	r2, r3, [r1]
		desired_position[i] += delta_q[i];
 8001026:	4a1c      	ldr	r2, [pc, #112]	; (8001098 <ARMsProtocol_FUNC_Catesianjog+0x1d8>)
 8001028:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	4413      	add	r3, r2
 800102e:	ed93 6b00 	vldr	d6, [r3]
 8001032:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800103a:	4413      	add	r3, r2
 800103c:	3b58      	subs	r3, #88	; 0x58
 800103e:	ed93 7b00 	vldr	d7, [r3]
 8001042:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001046:	4a14      	ldr	r2, [pc, #80]	; (8001098 <ARMsProtocol_FUNC_Catesianjog+0x1d8>)
 8001048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	4413      	add	r3, r2
 800104e:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i < 5; i++) {
 8001052:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001054:	3301      	adds	r3, #1
 8001056:	67bb      	str	r3, [r7, #120]	; 0x78
 8001058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800105a:	2b04      	cmp	r3, #4
 800105c:	ddd6      	ble.n	800100c <ARMsProtocol_FUNC_Catesianjog+0x14c>
	}
	/* USER CODE END 4 */

	// Clear Data
	ARMsProtocol_FUNC_Data_Clrbuf();
 800105e:	f7ff fdef 	bl	8000c40 <ARMsProtocol_FUNC_Data_Clrbuf>
	// Done Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_DONE);
}
 8001062:	bf00      	nop
 8001064:	3780      	adds	r7, #128	; 0x80
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	f3af 8000 	nop.w
 8001070:	00000000 	.word	0x00000000
 8001074:	408f4000 	.word	0x408f4000
 8001078:	70a3d70a 	.word	0x70a3d70a
 800107c:	3fd70a3d 	.word	0x3fd70a3d
 8001080:	00000000 	.word	0x00000000
 8001084:	40368000 	.word	0x40368000
 8001088:	cccccccd 	.word	0xcccccccd
 800108c:	3fbccccc 	.word	0x3fbccccc
 8001090:	24000304 	.word	0x24000304
 8001094:	24000310 	.word	0x24000310
 8001098:	24000208 	.word	0x24000208

0800109c <ARMsProtocol_FUNC_Trajectory>:
 *
 * @brief	Recievetrajectory Function
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Trajectory(void){
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	// Acknowledge Func
	ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ACKNOWLEDGE);
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <ARMsProtocol_FUNC_Trajectory+0x20>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2103      	movs	r1, #3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fd5e 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
	ARMsProtocol_Data.Trajectory_flag = 1;
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <ARMsProtocol_FUNC_Trajectory+0x24>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	/* USER CODE BEGIN 5 */

	/* USER CODE END 5 */

	// Clear Data
	ARMsProtocol_FUNC_Data_Clrbuf();
 80010b4:	f7ff fdc4 	bl	8000c40 <ARMsProtocol_FUNC_Data_Clrbuf>
	// Done Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_DONE);
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	24000304 	.word	0x24000304
 80010c0:	24000310 	.word	0x24000310

080010c4 <ARMsProtocol_FUNC_Gripper>:
/**
 * @brief	Controlgripper Function
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Gripper(void){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	// Acknowledge Func
	ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ACKNOWLEDGE);
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <ARMsProtocol_FUNC_Gripper+0x34>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2103      	movs	r1, #3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fd4a 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
	/* USER CODE BEGIN 6 */
	servo_flag = 1;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <ARMsProtocol_FUNC_Gripper+0x38>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
	servo_degree = ARMsProtocol_Data.Data_buf[0];
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <ARMsProtocol_FUNC_Gripper+0x3c>)
 80010dc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80010e0:	ee07 3a90 	vmov	s15, r3
 80010e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <ARMsProtocol_FUNC_Gripper+0x40>)
 80010ea:	ed83 7b00 	vstr	d7, [r3]
	/* USER CODE END 6 */

	// Clear Data
	ARMsProtocol_FUNC_Data_Clrbuf();
 80010ee:	f7ff fda7 	bl	8000c40 <ARMsProtocol_FUNC_Data_Clrbuf>
	// Done Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_DONE);
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	24000304 	.word	0x24000304
 80010fc:	24000230 	.word	0x24000230
 8001100:	24000310 	.word	0x24000310
 8001104:	24000238 	.word	0x24000238

08001108 <ARMsProtocol_FUNC_Jointfeedback>:
/**
 * @brief	Setzeroencoder Function
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Jointfeedback(UART_HandleTypeDef *huart){
 8001108:	b580      	push	{r7, lr}
 800110a:	b090      	sub	sp, #64	; 0x40
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
	// Acknowledge Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ACKNOWLEDGE);
	/* USER CODE BEGIN 7 */
	double joint_config[5] = {0};
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	2228      	movs	r2, #40	; 0x28
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f013 f993 	bl	8014444 <memset>
	joint_config[0] = (2*M_PI * encoder_config[0])/16384.0f;
 800111e:	4ba2      	ldr	r3, [pc, #648]	; (80013a8 <ARMsProtocol_FUNC_Jointfeedback+0x2a0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	ee07 3a90 	vmov	s15, r3
 8001126:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800112a:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8001388 <ARMsProtocol_FUNC_Jointfeedback+0x280>
 800112e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001132:	ed9f 5b97 	vldr	d5, [pc, #604]	; 8001390 <ARMsProtocol_FUNC_Jointfeedback+0x288>
 8001136:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800113a:	ed87 7b02 	vstr	d7, [r7, #8]
	joint_config[1] = (2*M_PI * encoder_config[1])/16384.0f;
 800113e:	4b9a      	ldr	r3, [pc, #616]	; (80013a8 <ARMsProtocol_FUNC_Jointfeedback+0x2a0>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	ee07 3a90 	vmov	s15, r3
 8001146:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800114a:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8001388 <ARMsProtocol_FUNC_Jointfeedback+0x280>
 800114e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001152:	ed9f 5b8f 	vldr	d5, [pc, #572]	; 8001390 <ARMsProtocol_FUNC_Jointfeedback+0x288>
 8001156:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800115a:	ed87 7b04 	vstr	d7, [r7, #16]
	joint_config[2] = (2*M_PI * encoder_config[2])/16384.0f;
 800115e:	4b92      	ldr	r3, [pc, #584]	; (80013a8 <ARMsProtocol_FUNC_Jointfeedback+0x2a0>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	ee07 3a90 	vmov	s15, r3
 8001166:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800116a:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8001388 <ARMsProtocol_FUNC_Jointfeedback+0x280>
 800116e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001172:	ed9f 5b87 	vldr	d5, [pc, #540]	; 8001390 <ARMsProtocol_FUNC_Jointfeedback+0x288>
 8001176:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800117a:	ed87 7b06 	vstr	d7, [r7, #24]
	double m4 = (2*M_PI * encoder_config[3])/16384.0f;
 800117e:	4b8a      	ldr	r3, [pc, #552]	; (80013a8 <ARMsProtocol_FUNC_Jointfeedback+0x2a0>)
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	ee07 3a90 	vmov	s15, r3
 8001186:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800118a:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8001388 <ARMsProtocol_FUNC_Jointfeedback+0x280>
 800118e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001192:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 8001390 <ARMsProtocol_FUNC_Jointfeedback+0x288>
 8001196:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800119a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	double m5 =  (2*M_PI * encoder_config[4])/16384.0f;
 800119e:	4b82      	ldr	r3, [pc, #520]	; (80013a8 <ARMsProtocol_FUNC_Jointfeedback+0x2a0>)
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	ee07 3a90 	vmov	s15, r3
 80011a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80011aa:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8001388 <ARMsProtocol_FUNC_Jointfeedback+0x280>
 80011ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80011b2:	ed9f 5b77 	vldr	d5, [pc, #476]	; 8001390 <ARMsProtocol_FUNC_Jointfeedback+0x288>
 80011b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011ba:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	joint_config[3] = (m4 + m5) * 0.1125;
 80011be:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 80011c2:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80011c6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80011ca:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8001398 <ARMsProtocol_FUNC_Jointfeedback+0x290>
 80011ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011d2:	ed87 7b08 	vstr	d7, [r7, #32]
	joint_config[4] = (m4 - m5)/8.0;
 80011d6:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 80011da:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80011de:	ee36 6b47 	vsub.f64	d6, d6, d7
 80011e2:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 80011e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011ea:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	joint_config[0] = joint_config[0]*1000.0;
 80011ee:	ed97 7b02 	vldr	d7, [r7, #8]
 80011f2:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 80013a0 <ARMsProtocol_FUNC_Jointfeedback+0x298>
 80011f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80011fa:	ed87 7b02 	vstr	d7, [r7, #8]
	joint_config[1] = joint_config[1]*1000.0;
 80011fe:	ed97 7b04 	vldr	d7, [r7, #16]
 8001202:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80013a0 <ARMsProtocol_FUNC_Jointfeedback+0x298>
 8001206:	ee27 7b06 	vmul.f64	d7, d7, d6
 800120a:	ed87 7b04 	vstr	d7, [r7, #16]
	joint_config[2] = joint_config[2]*1000.0;
 800120e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001212:	ed9f 6b63 	vldr	d6, [pc, #396]	; 80013a0 <ARMsProtocol_FUNC_Jointfeedback+0x298>
 8001216:	ee27 7b06 	vmul.f64	d7, d7, d6
 800121a:	ed87 7b06 	vstr	d7, [r7, #24]
	joint_config[3] = joint_config[3]*1000.0;
 800121e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001222:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 80013a0 <ARMsProtocol_FUNC_Jointfeedback+0x298>
 8001226:	ee27 7b06 	vmul.f64	d7, d7, d6
 800122a:	ed87 7b08 	vstr	d7, [r7, #32]
	joint_config[4] = joint_config[4]*1000.0;
 800122e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001232:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 80013a0 <ARMsProtocol_FUNC_Jointfeedback+0x298>
 8001236:	ee27 7b06 	vmul.f64	d7, d7, d6
 800123a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	ARMsProtocol_Data.Tx_count = 15;
 800123e:	4b5b      	ldr	r3, [pc, #364]	; (80013ac <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 8001240:	220f      	movs	r2, #15
 8001242:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	ARMsProtocol_Data.Tx_buf[0] = 0xFF;
 8001246:	4b59      	ldr	r3, [pc, #356]	; (80013ac <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 8001248:	22ff      	movs	r2, #255	; 0xff
 800124a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	ARMsProtocol_Data.Tx_buf[1] = ARMsProtocol_h1.slave_id;
 800124e:	4b58      	ldr	r3, [pc, #352]	; (80013b0 <ARMsProtocol_FUNC_Jointfeedback+0x2a8>)
 8001250:	7a1a      	ldrb	r2, [r3, #8]
 8001252:	4b56      	ldr	r3, [pc, #344]	; (80013ac <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 8001254:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	ARMsProtocol_Data.Tx_buf[2] = ARMsProtocol_ADDR_JOTNTFEEDBACK;
 8001258:	4b54      	ldr	r3, [pc, #336]	; (80013ac <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 800125a:	2206      	movs	r2, #6
 800125c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	ARMsProtocol_Data.Tx_buf[3] = 11;
 8001260:	4b52      	ldr	r3, [pc, #328]	; (80013ac <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 8001262:	220b      	movs	r2, #11
 8001264:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	ARMsProtocol_Data.Tx_buf[4] = ((int16_t)joint_config[0]) >> 8; //J1_H
 8001268:	ed97 7b02 	vldr	d7, [r7, #8]
 800126c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001270:	ee17 3a90 	vmov	r3, s15
 8001274:	b21b      	sxth	r3, r3
 8001276:	121b      	asrs	r3, r3, #8
 8001278:	b21b      	sxth	r3, r3
 800127a:	b2da      	uxtb	r2, r3
 800127c:	4b4b      	ldr	r3, [pc, #300]	; (80013ac <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 800127e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	ARMsProtocol_Data.Tx_buf[5] = ((int16_t)joint_config[0]);//J1_L
 8001282:	ed97 7b02 	vldr	d7, [r7, #8]
 8001286:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800128a:	ee17 3a90 	vmov	r3, s15
 800128e:	b21b      	sxth	r3, r3
 8001290:	b2da      	uxtb	r2, r3
 8001292:	4b46      	ldr	r3, [pc, #280]	; (80013ac <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 8001294:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	ARMsProtocol_Data.Tx_buf[6] = ((int16_t)joint_config[1]) >> 8; //J2_H
 8001298:	ed97 7b04 	vldr	d7, [r7, #16]
 800129c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012a0:	ee17 3a90 	vmov	r3, s15
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	121b      	asrs	r3, r3, #8
 80012a8:	b21b      	sxth	r3, r3
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	4b3f      	ldr	r3, [pc, #252]	; (80013ac <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 80012ae:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	ARMsProtocol_Data.Tx_buf[7] = ((int16_t)joint_config[1]); //J2_L
 80012b2:	ed97 7b04 	vldr	d7, [r7, #16]
 80012b6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012ba:	ee17 3a90 	vmov	r3, s15
 80012be:	b21b      	sxth	r3, r3
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b3a      	ldr	r3, [pc, #232]	; (80013ac <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 80012c4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	ARMsProtocol_Data.Tx_buf[8] = ((int16_t)joint_config[2]) >> 8; //J3_H
 80012c8:	ed97 7b06 	vldr	d7, [r7, #24]
 80012cc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012d0:	ee17 3a90 	vmov	r3, s15
 80012d4:	b21b      	sxth	r3, r3
 80012d6:	121b      	asrs	r3, r3, #8
 80012d8:	b21b      	sxth	r3, r3
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	4b33      	ldr	r3, [pc, #204]	; (80013ac <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 80012de:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	ARMsProtocol_Data.Tx_buf[9] = ((int16_t)joint_config[2]); //J3_L
 80012e2:	ed97 7b06 	vldr	d7, [r7, #24]
 80012e6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80012ea:	ee17 3a90 	vmov	r3, s15
 80012ee:	b21b      	sxth	r3, r3
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 80012f4:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	ARMsProtocol_Data.Tx_buf[10] = ((int16_t)joint_config[3]) >> 8;//J4_H
 80012f8:	ed97 7b08 	vldr	d7, [r7, #32]
 80012fc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001300:	ee17 3a90 	vmov	r3, s15
 8001304:	b21b      	sxth	r3, r3
 8001306:	121b      	asrs	r3, r3, #8
 8001308:	b21b      	sxth	r3, r3
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 800130e:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	ARMsProtocol_Data.Tx_buf[11] = ((int16_t)joint_config[3]);//J4_L
 8001312:	ed97 7b08 	vldr	d7, [r7, #32]
 8001316:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800131a:	ee17 3a90 	vmov	r3, s15
 800131e:	b21b      	sxth	r3, r3
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b22      	ldr	r3, [pc, #136]	; (80013ac <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 8001324:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	ARMsProtocol_Data.Tx_buf[12] = ((int16_t)joint_config[4]) >> 8;//J5_H
 8001328:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800132c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001330:	ee17 3a90 	vmov	r3, s15
 8001334:	b21b      	sxth	r3, r3
 8001336:	121b      	asrs	r3, r3, #8
 8001338:	b21b      	sxth	r3, r3
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 800133e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	ARMsProtocol_Data.Tx_buf[13] = ((int16_t)joint_config[4]);//J6_L
 8001342:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001346:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800134a:	ee17 3a90 	vmov	r3, s15
 800134e:	b21b      	sxth	r3, r3
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 8001354:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	ARMsProtocol_CALC_CRC((uint32_t*) &ARMsProtocol_Data.Tx_buf[2], 12);
 8001358:	210c      	movs	r1, #12
 800135a:	4816      	ldr	r0, [pc, #88]	; (80013b4 <ARMsProtocol_FUNC_Jointfeedback+0x2ac>)
 800135c:	f7ff fc3a 	bl	8000bd4 <ARMsProtocol_CALC_CRC>
	ARMsProtocol_Data.Tx_buf[14] = ARMsProtocol_Data.CRC_CAL;
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 8001362:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 8001368:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	ARMsProtocol_Data.Tx_flag = 1;
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 800136e:	2201      	movs	r2, #1
 8001370:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
	ARMsProtocol_FUNC_Tx_Callback(huart);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff fbd3 	bl	8000b20 <ARMsProtocol_FUNC_Tx_Callback>
	/* USER CODE END 7 */

	// Clear Data
	ARMsProtocol_FUNC_Data_Clrbuf();
 800137a:	f7ff fc61 	bl	8000c40 <ARMsProtocol_FUNC_Data_Clrbuf>
	// Done Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_DONE);
}
 800137e:	bf00      	nop
 8001380:	3740      	adds	r7, #64	; 0x40
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	54442d18 	.word	0x54442d18
 800138c:	401921fb 	.word	0x401921fb
 8001390:	00000000 	.word	0x00000000
 8001394:	40d00000 	.word	0x40d00000
 8001398:	cccccccd 	.word	0xcccccccd
 800139c:	3fbccccc 	.word	0x3fbccccc
 80013a0:	00000000 	.word	0x00000000
 80013a4:	408f4000 	.word	0x408f4000
 80013a8:	24000240 	.word	0x24000240
 80013ac:	24000310 	.word	0x24000310
 80013b0:	24000304 	.word	0x24000304
 80013b4:	24000377 	.word	0x24000377

080013b8 <ARMsProtocol_FUNC_Boardfeedback>:


void ARMsProtocol_FUNC_Boardfeedback(UART_HandleTypeDef *huart){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	// Acknowledge Func
	ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ACKNOWLEDGE);
 80013c0:	4b1e      	ldr	r3, [pc, #120]	; (800143c <ARMsProtocol_FUNC_Boardfeedback+0x84>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2103      	movs	r1, #3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fbce 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
	/* USER CODE BEGIN 8 */
	ARMsProtocol_Data.Tx_count = 7;
 80013cc:	4b1c      	ldr	r3, [pc, #112]	; (8001440 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 80013ce:	2207      	movs	r2, #7
 80013d0:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	ARMsProtocol_Data.Tx_buf[0] = 0xFF;
 80013d4:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 80013d6:	22ff      	movs	r2, #255	; 0xff
 80013d8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	ARMsProtocol_Data.Tx_buf[1] = ARMsProtocol_h1.slave_id;
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <ARMsProtocol_FUNC_Boardfeedback+0x84>)
 80013de:	7a1a      	ldrb	r2, [r3, #8]
 80013e0:	4b17      	ldr	r3, [pc, #92]	; (8001440 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 80013e2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	ARMsProtocol_Data.Tx_buf[2] = ARMsProtocol_ADDR_BOARDFEEDBACK;
 80013e6:	4b16      	ldr	r3, [pc, #88]	; (8001440 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	ARMsProtocol_Data.Tx_buf[3] = 11;
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 80013f0:	220b      	movs	r2, #11
 80013f2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	ARMsProtocol_Data.Tx_buf[4] = 0;
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	ARMsProtocol_Data.Tx_buf[5] = 0;
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 8001400:	2200      	movs	r2, #0
 8001402:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	ARMsProtocol_CALC_CRC((uint32_t*) &ARMsProtocol_Data.Tx_buf, ARMsProtocol_Data.Tx_count - 1);
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 8001408:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 800140c:	3b01      	subs	r3, #1
 800140e:	4619      	mov	r1, r3
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <ARMsProtocol_FUNC_Boardfeedback+0x8c>)
 8001412:	f7ff fbdf 	bl	8000bd4 <ARMsProtocol_CALC_CRC>
	ARMsProtocol_Data.Tx_buf[6] = ARMsProtocol_Data.CRC_CAL;
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 8001418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800141a:	b2da      	uxtb	r2, r3
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 800141e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	ARMsProtocol_Data.Tx_flag = 1;
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 8001424:	2201      	movs	r2, #1
 8001426:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
	ARMsProtocol_FUNC_Tx_Callback(huart);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff fb78 	bl	8000b20 <ARMsProtocol_FUNC_Tx_Callback>
	/* USER CODE END 8 */

	// Clear Data
	ARMsProtocol_FUNC_Data_Clrbuf();
 8001430:	f7ff fc06 	bl	8000c40 <ARMsProtocol_FUNC_Data_Clrbuf>
	// Done Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_DONE);
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	24000304 	.word	0x24000304
 8001440:	24000310 	.word	0x24000310
 8001444:	24000375 	.word	0x24000375

08001448 <KalmanFilter_initialise>:
 *  Created on: Jan 28, 2022
 *      Author: fame
 */
#include <Library/KalmanFilter.h>

void KalmanFilter_initialise(KalmanFilter *dev, double x1,double x2,double p11,double p12,double p21,double p22, double R, double Q){
 8001448:	b480      	push	{r7}
 800144a:	b093      	sub	sp, #76	; 0x4c
 800144c:	af00      	add	r7, sp, #0
 800144e:	6478      	str	r0, [r7, #68]	; 0x44
 8001450:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 8001454:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 8001458:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 800145c:	ed87 3b08 	vstr	d3, [r7, #32]
 8001460:	ed87 4b06 	vstr	d4, [r7, #24]
 8001464:	ed87 5b04 	vstr	d5, [r7, #16]
 8001468:	ed87 6b02 	vstr	d6, [r7, #8]
 800146c:	ed87 7b00 	vstr	d7, [r7]
	/* Parameter */
	dev->R = R;
 8001470:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001472:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001476:	e9c1 2300 	strd	r2, r3, [r1]
	dev->Q = Q;
 800147a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800147c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001480:	e9c1 2302 	strd	r2, r3, [r1, #8]

	/* KF "memory" */
	dev->x1 = x1;
 8001484:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001486:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800148a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dev->x2 = x2;
 800148e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001490:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001494:	e9c1 2306 	strd	r2, r3, [r1, #24]
	dev->p11 = p11;
 8001498:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800149a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800149e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	dev->p12 = p12;
 80014a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80014a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014a8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	dev->p21 = p21;
 80014ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80014ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014b2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	dev->p22 = p22;
 80014b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80014b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014bc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 80014c0:	bf00      	nop
 80014c2:	374c      	adds	r7, #76	; 0x4c
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	0000      	movs	r0, r0
	...

080014d0 <KalmanFilter_Update>:

void KalmanFilter_Update(KalmanFilter *dev,double theta_k) {
 80014d0:	b480      	push	{r7}
 80014d2:	b09b      	sub	sp, #108	; 0x6c
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	ed87 0b00 	vstr	d0, [r7]
	double X1 = (dev->x1);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80014e2:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double X2 = (dev->x2);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80014ec:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double P11 = (dev->p11);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80014f6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double P12 = (dev->p12);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001500:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double P21 = (dev->p21);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800150a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double P22 = (dev->p22);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8001514:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double Q = (dev->Q);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800151e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double R = (dev->R);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double dt_pow2 = DT * DT;
 800152c:	f20f 4320 	addw	r3, pc, #1056	; 0x420
 8001530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001534:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double dt_pow3 = DT * DT * DT;
 8001538:	f20f 431c 	addw	r3, pc, #1052	; 0x41c
 800153c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001540:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double dt_pow4 = DT * DT * DT * DT;
 8001544:	f20f 4318 	addw	r3, pc, #1048	; 0x418
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	dev->x1 = X1 + X2*DT - ((X1 - theta_k + X2*DT)*(P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT)))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 8001550:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8001554:	ed9f 6bfc 	vldr	d6, [pc, #1008]	; 8001948 <KalmanFilter_Update+0x478>
 8001558:	ee27 6b06 	vmul.f64	d6, d7, d6
 800155c:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8001560:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001564:	ed97 5b18 	vldr	d5, [r7, #96]	; 0x60
 8001568:	ed97 7b00 	vldr	d7, [r7]
 800156c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001570:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8001574:	ed9f 4bf4 	vldr	d4, [pc, #976]	; 8001948 <KalmanFilter_Update+0x478>
 8001578:	ee27 7b04 	vmul.f64	d7, d7, d4
 800157c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001580:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001584:	ed9f 4bf0 	vldr	d4, [pc, #960]	; 8001948 <KalmanFilter_Update+0x478>
 8001588:	ee27 4b04 	vmul.f64	d4, d7, d4
 800158c:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8001590:	ee34 4b07 	vadd.f64	d4, d4, d7
 8001594:	ed97 3b0c 	vldr	d3, [r7, #48]	; 0x30
 8001598:	ed97 7b04 	vldr	d7, [r7, #16]
 800159c:	ee23 3b07 	vmul.f64	d3, d3, d7
 80015a0:	eeb1 2b00 	vmov.f64	d2, #16	; 0x40800000  4.0
 80015a4:	ee83 7b02 	vdiv.f64	d7, d3, d2
 80015a8:	ee34 4b07 	vadd.f64	d4, d4, d7
 80015ac:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80015b0:	ed9f 3be5 	vldr	d3, [pc, #916]	; 8001948 <KalmanFilter_Update+0x478>
 80015b4:	ee27 3b03 	vmul.f64	d3, d7, d3
 80015b8:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80015bc:	ee33 7b07 	vadd.f64	d7, d3, d7
 80015c0:	ed9f 3be1 	vldr	d3, [pc, #900]	; 8001948 <KalmanFilter_Update+0x478>
 80015c4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80015c8:	ee34 7b07 	vadd.f64	d7, d4, d7
 80015cc:	ee25 4b07 	vmul.f64	d4, d5, d7
 80015d0:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 80015d4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80015d8:	ee35 5b07 	vadd.f64	d5, d5, d7
 80015dc:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80015e0:	ed9f 3bd9 	vldr	d3, [pc, #868]	; 8001948 <KalmanFilter_Update+0x478>
 80015e4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80015e8:	ee35 5b07 	vadd.f64	d5, d5, d7
 80015ec:	ed97 3b0c 	vldr	d3, [r7, #48]	; 0x30
 80015f0:	ed97 7b04 	vldr	d7, [r7, #16]
 80015f4:	ee23 3b07 	vmul.f64	d3, d3, d7
 80015f8:	eeb1 2b00 	vmov.f64	d2, #16	; 0x40800000  4.0
 80015fc:	ee83 7b02 	vdiv.f64	d7, d3, d2
 8001600:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001604:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001608:	ed9f 3bcf 	vldr	d3, [pc, #828]	; 8001948 <KalmanFilter_Update+0x478>
 800160c:	ee27 3b03 	vmul.f64	d3, d7, d3
 8001610:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001614:	ee33 7b07 	vadd.f64	d7, d3, d7
 8001618:	ed9f 3bcb 	vldr	d3, [pc, #812]	; 8001948 <KalmanFilter_Update+0x478>
 800161c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001620:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001624:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001628:	ee36 7b47 	vsub.f64	d7, d6, d7
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	ed83 7b04 	vstr	d7, [r3, #16]
	dev->x2  = X2 - (((Q*dt_pow3)/2 + P22*DT + P21)*(X1 - theta_k + X2*DT))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 8001632:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8001636:	ed97 7b06 	vldr	d7, [r7, #24]
 800163a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800163e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001642:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001646:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800164a:	ed9f 5bbf 	vldr	d5, [pc, #764]	; 8001948 <KalmanFilter_Update+0x478>
 800164e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001652:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001656:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800165a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800165e:	ed97 5b18 	vldr	d5, [r7, #96]	; 0x60
 8001662:	ed97 7b00 	vldr	d7, [r7]
 8001666:	ee35 5b47 	vsub.f64	d5, d5, d7
 800166a:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800166e:	ed9f 4bb6 	vldr	d4, [pc, #728]	; 8001948 <KalmanFilter_Update+0x478>
 8001672:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001676:	ee35 7b07 	vadd.f64	d7, d5, d7
 800167a:	ee26 5b07 	vmul.f64	d5, d6, d7
 800167e:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8001682:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001686:	ee36 6b07 	vadd.f64	d6, d6, d7
 800168a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800168e:	ed9f 4bae 	vldr	d4, [pc, #696]	; 8001948 <KalmanFilter_Update+0x478>
 8001692:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001696:	ee36 6b07 	vadd.f64	d6, d6, d7
 800169a:	ed97 4b0c 	vldr	d4, [r7, #48]	; 0x30
 800169e:	ed97 7b04 	vldr	d7, [r7, #16]
 80016a2:	ee24 4b07 	vmul.f64	d4, d4, d7
 80016a6:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
 80016aa:	ee84 7b03 	vdiv.f64	d7, d4, d3
 80016ae:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016b2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80016b6:	ed9f 4ba4 	vldr	d4, [pc, #656]	; 8001948 <KalmanFilter_Update+0x478>
 80016ba:	ee27 4b04 	vmul.f64	d4, d7, d4
 80016be:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80016c2:	ee34 7b07 	vadd.f64	d7, d4, d7
 80016c6:	ed9f 4ba0 	vldr	d4, [pc, #640]	; 8001948 <KalmanFilter_Update+0x478>
 80016ca:	ee27 7b04 	vmul.f64	d7, d7, d4
 80016ce:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016d2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80016d6:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 80016da:	ee36 7b47 	vsub.f64	d7, d6, d7
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	ed83 7b06 	vstr	d7, [r3, #24]
	dev->p11  = -((P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT)) - 1)*(P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 80016e4:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80016e8:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8001948 <KalmanFilter_Update+0x478>
 80016ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80016f0:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80016f4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016f8:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 80016fc:	ed97 7b04 	vldr	d7, [r7, #16]
 8001700:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001704:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 8001708:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800170c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001710:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001714:	ed9f 5b8c 	vldr	d5, [pc, #560]	; 8001948 <KalmanFilter_Update+0x478>
 8001718:	ee27 5b05 	vmul.f64	d5, d7, d5
 800171c:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001720:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001724:	ed9f 5b88 	vldr	d5, [pc, #544]	; 8001948 <KalmanFilter_Update+0x478>
 8001728:	ee27 7b05 	vmul.f64	d7, d7, d5
 800172c:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001730:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8001734:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001738:	ee36 6b07 	vadd.f64	d6, d6, d7
 800173c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001740:	ed9f 4b81 	vldr	d4, [pc, #516]	; 8001948 <KalmanFilter_Update+0x478>
 8001744:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001748:	ee36 6b07 	vadd.f64	d6, d6, d7
 800174c:	ed97 4b0c 	vldr	d4, [r7, #48]	; 0x30
 8001750:	ed97 7b04 	vldr	d7, [r7, #16]
 8001754:	ee24 4b07 	vmul.f64	d4, d4, d7
 8001758:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
 800175c:	ee84 7b03 	vdiv.f64	d7, d4, d3
 8001760:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001764:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001768:	ed9f 4b77 	vldr	d4, [pc, #476]	; 8001948 <KalmanFilter_Update+0x478>
 800176c:	ee27 4b04 	vmul.f64	d4, d7, d4
 8001770:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001774:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001778:	ed9f 4b73 	vldr	d4, [pc, #460]	; 8001948 <KalmanFilter_Update+0x478>
 800177c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001780:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001784:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001788:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800178c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001790:	eeb1 6b47 	vneg.f64	d6, d7
 8001794:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001798:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8001948 <KalmanFilter_Update+0x478>
 800179c:	ee27 5b05 	vmul.f64	d5, d7, d5
 80017a0:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80017a4:	ee35 5b07 	vadd.f64	d5, d5, d7
 80017a8:	ed97 4b0c 	vldr	d4, [r7, #48]	; 0x30
 80017ac:	ed97 7b04 	vldr	d7, [r7, #16]
 80017b0:	ee24 4b07 	vmul.f64	d4, d4, d7
 80017b4:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
 80017b8:	ee84 7b03 	vdiv.f64	d7, d4, d3
 80017bc:	ee35 5b07 	vadd.f64	d5, d5, d7
 80017c0:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80017c4:	ed9f 4b60 	vldr	d4, [pc, #384]	; 8001948 <KalmanFilter_Update+0x478>
 80017c8:	ee27 4b04 	vmul.f64	d4, d7, d4
 80017cc:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80017d0:	ee34 7b07 	vadd.f64	d7, d4, d7
 80017d4:	ed9f 4b5c 	vldr	d4, [pc, #368]	; 8001948 <KalmanFilter_Update+0x478>
 80017d8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80017dc:	ee35 7b07 	vadd.f64	d7, d5, d7
 80017e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	ed83 7b08 	vstr	d7, [r3, #32]
	dev->p12 = -((P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT)) - 1)*((Q*dt_pow3)/2 + P22*DT + P12);
 80017ea:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80017ee:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001948 <KalmanFilter_Update+0x478>
 80017f2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80017f6:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80017fa:	ee36 6b07 	vadd.f64	d6, d6, d7
 80017fe:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 8001802:	ed97 7b04 	vldr	d7, [r7, #16]
 8001806:	ee25 5b07 	vmul.f64	d5, d5, d7
 800180a:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 800180e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001812:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001816:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800181a:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 8001948 <KalmanFilter_Update+0x478>
 800181e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001822:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001826:	ee35 7b07 	vadd.f64	d7, d5, d7
 800182a:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8001948 <KalmanFilter_Update+0x478>
 800182e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001832:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001836:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 800183a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800183e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001842:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001846:	ed9f 4b40 	vldr	d4, [pc, #256]	; 8001948 <KalmanFilter_Update+0x478>
 800184a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800184e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001852:	ed97 4b0c 	vldr	d4, [r7, #48]	; 0x30
 8001856:	ed97 7b04 	vldr	d7, [r7, #16]
 800185a:	ee24 4b07 	vmul.f64	d4, d4, d7
 800185e:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
 8001862:	ee84 7b03 	vdiv.f64	d7, d4, d3
 8001866:	ee36 6b07 	vadd.f64	d6, d6, d7
 800186a:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800186e:	ed9f 4b36 	vldr	d4, [pc, #216]	; 8001948 <KalmanFilter_Update+0x478>
 8001872:	ee27 4b04 	vmul.f64	d4, d7, d4
 8001876:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800187a:	ee34 7b07 	vadd.f64	d7, d4, d7
 800187e:	ed9f 4b32 	vldr	d4, [pc, #200]	; 8001948 <KalmanFilter_Update+0x478>
 8001882:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001886:	ee36 6b07 	vadd.f64	d6, d6, d7
 800188a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800188e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001892:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001896:	eeb1 6b47 	vneg.f64	d6, d7
 800189a:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 800189e:	ed97 7b06 	vldr	d7, [r7, #24]
 80018a2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80018a6:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80018aa:	ee87 5b04 	vdiv.f64	d5, d7, d4
 80018ae:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80018b2:	ed9f 4b25 	vldr	d4, [pc, #148]	; 8001948 <KalmanFilter_Update+0x478>
 80018b6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80018ba:	ee35 5b07 	vadd.f64	d5, d5, d7
 80018be:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80018c2:	ee35 7b07 	vadd.f64	d7, d5, d7
 80018c6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	dev->p21 = P21 + P22*DT + (Q*dt_pow3)/2 - (((Q*dt_pow3)/2 + P22*DT + P21)*(P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT)))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 80018d0:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80018d4:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8001948 <KalmanFilter_Update+0x478>
 80018d8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80018dc:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80018e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80018e4:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 80018e8:	ed97 7b06 	vldr	d7, [r7, #24]
 80018ec:	ee25 5b07 	vmul.f64	d5, d5, d7
 80018f0:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80018f4:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80018f8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80018fc:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 8001900:	ed97 7b06 	vldr	d7, [r7, #24]
 8001904:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001908:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 800190c:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8001910:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001914:	ed9f 4b0c 	vldr	d4, [pc, #48]	; 8001948 <KalmanFilter_Update+0x478>
 8001918:	ee27 7b04 	vmul.f64	d7, d7, d4
 800191c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001920:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001924:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001928:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800192c:	ed9f 4b06 	vldr	d4, [pc, #24]	; 8001948 <KalmanFilter_Update+0x478>
 8001930:	ee27 4b04 	vmul.f64	d4, d7, d4
 8001934:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8001938:	ee34 4b07 	vadd.f64	d4, d4, d7
 800193c:	ed97 3b0c 	vldr	d3, [r7, #48]	; 0x30
 8001940:	e016      	b.n	8001970 <KalmanFilter_Update+0x4a0>
 8001942:	bf00      	nop
 8001944:	f3af 8000 	nop.w
 8001948:	47ae147b 	.word	0x47ae147b
 800194c:	3f847ae1 	.word	0x3f847ae1
 8001950:	eb1c432d 	.word	0xeb1c432d
 8001954:	3f1a36e2 	.word	0x3f1a36e2
 8001958:	a0b5ed8e 	.word	0xa0b5ed8e
 800195c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001960:	e2308c3b 	.word	0xe2308c3b
 8001964:	3e45798e 	.word	0x3e45798e
 8001968:	47ae147b 	.word	0x47ae147b
 800196c:	3f847ae1 	.word	0x3f847ae1
 8001970:	ed97 7b04 	vldr	d7, [r7, #16]
 8001974:	ee23 3b07 	vmul.f64	d3, d3, d7
 8001978:	eeb1 2b00 	vmov.f64	d2, #16	; 0x40800000  4.0
 800197c:	ee83 7b02 	vdiv.f64	d7, d3, d2
 8001980:	ee34 4b07 	vadd.f64	d4, d4, d7
 8001984:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001988:	ed1f 3b09 	vldr	d3, [pc, #-36]	; 8001968 <KalmanFilter_Update+0x498>
 800198c:	ee27 3b03 	vmul.f64	d3, d7, d3
 8001990:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001994:	ee33 7b07 	vadd.f64	d7, d3, d7
 8001998:	ed1f 3b0d 	vldr	d3, [pc, #-52]	; 8001968 <KalmanFilter_Update+0x498>
 800199c:	ee27 7b03 	vmul.f64	d7, d7, d3
 80019a0:	ee34 7b07 	vadd.f64	d7, d4, d7
 80019a4:	ee25 4b07 	vmul.f64	d4, d5, d7
 80019a8:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 80019ac:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80019b0:	ee35 5b07 	vadd.f64	d5, d5, d7
 80019b4:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80019b8:	ed1f 3b15 	vldr	d3, [pc, #-84]	; 8001968 <KalmanFilter_Update+0x498>
 80019bc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80019c0:	ee35 5b07 	vadd.f64	d5, d5, d7
 80019c4:	ed97 3b0c 	vldr	d3, [r7, #48]	; 0x30
 80019c8:	ed97 7b04 	vldr	d7, [r7, #16]
 80019cc:	ee23 3b07 	vmul.f64	d3, d3, d7
 80019d0:	eeb1 2b00 	vmov.f64	d2, #16	; 0x40800000  4.0
 80019d4:	ee83 7b02 	vdiv.f64	d7, d3, d2
 80019d8:	ee35 5b07 	vadd.f64	d5, d5, d7
 80019dc:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80019e0:	ed1f 3b1f 	vldr	d3, [pc, #-124]	; 8001968 <KalmanFilter_Update+0x498>
 80019e4:	ee27 3b03 	vmul.f64	d3, d7, d3
 80019e8:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80019ec:	ee33 7b07 	vadd.f64	d7, d3, d7
 80019f0:	ed1f 3b23 	vldr	d3, [pc, #-140]	; 8001968 <KalmanFilter_Update+0x498>
 80019f4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80019f8:	ee35 5b07 	vadd.f64	d5, d5, d7
 80019fc:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001a00:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	dev->p22 = P22 + Q*dt_pow2 - (((Q*dt_pow3)/2 + P22*DT + P12)*((Q*dt_pow3)/2 + P22*DT + P21))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 8001a0a:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8001a0e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001a12:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a16:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001a1a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001a1e:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 8001a22:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a26:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001a2a:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8001a2e:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8001a32:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001a36:	ed1f 4b34 	vldr	d4, [pc, #-208]	; 8001968 <KalmanFilter_Update+0x498>
 8001a3a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001a3e:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001a42:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001a46:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001a4a:	ed97 4b0c 	vldr	d4, [r7, #48]	; 0x30
 8001a4e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001a52:	ee24 7b07 	vmul.f64	d7, d4, d7
 8001a56:	eeb0 3b00 	vmov.f64	d3, #0	; 0x40000000  2.0
 8001a5a:	ee87 4b03 	vdiv.f64	d4, d7, d3
 8001a5e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001a62:	ed1f 3b3f 	vldr	d3, [pc, #-252]	; 8001968 <KalmanFilter_Update+0x498>
 8001a66:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001a6a:	ee34 4b07 	vadd.f64	d4, d4, d7
 8001a6e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001a72:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001a76:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001a7a:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 8001a7e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001a82:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001a86:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001a8a:	ed1f 3b49 	vldr	d3, [pc, #-292]	; 8001968 <KalmanFilter_Update+0x498>
 8001a8e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001a92:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001a96:	ed97 3b0c 	vldr	d3, [r7, #48]	; 0x30
 8001a9a:	ed97 7b04 	vldr	d7, [r7, #16]
 8001a9e:	ee23 3b07 	vmul.f64	d3, d3, d7
 8001aa2:	eeb1 2b00 	vmov.f64	d2, #16	; 0x40800000  4.0
 8001aa6:	ee83 7b02 	vdiv.f64	d7, d3, d2
 8001aaa:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001aae:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001ab2:	ed1f 3b53 	vldr	d3, [pc, #-332]	; 8001968 <KalmanFilter_Update+0x498>
 8001ab6:	ee27 3b03 	vmul.f64	d3, d7, d3
 8001aba:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001abe:	ee33 7b07 	vadd.f64	d7, d3, d7
 8001ac2:	ed1f 3b57 	vldr	d3, [pc, #-348]	; 8001968 <KalmanFilter_Update+0x498>
 8001ac6:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001aca:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001ace:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001ad2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
}
 8001adc:	bf00      	nop
 8001ade:	376c      	adds	r7, #108	; 0x6c
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <IVK>:
	q_arr[4] = roll;
	memcpy(config_arr, q_arr, sizeof(q_arr));
	return 1;
}

void IVK(double q[5], double x_dot[5], double *m_dot){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	ed2d 8b04 	vpush	{d8-d9}
 8001aee:	b0fc      	sub	sp, #496	; 0x1f0
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	f107 030c 	add.w	r3, r7, #12
 8001af6:	6018      	str	r0, [r3, #0]
 8001af8:	f107 0308 	add.w	r3, r7, #8
 8001afc:	6019      	str	r1, [r3, #0]
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	601a      	str	r2, [r3, #0]
	  double e_J_inv_tmp;
	  double e_J_inv_tmp_tmp;
	  double f_J_inv_tmp_tmp;
	  int i;
	  int i1;
	  J_inv_tmp_tmp = q[1] + 2.0 * q[2];
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	3308      	adds	r3, #8
 8001b0a:	ed93 6b00 	vldr	d6, [r3]
 8001b0e:	f107 030c 	add.w	r3, r7, #12
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	3310      	adds	r3, #16
 8001b16:	ed93 7b00 	vldr	d7, [r3]
 8001b1a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001b1e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b22:	ed87 7b76 	vstr	d7, [r7, #472]	; 0x1d8
	  b_J_inv_tmp_tmp =
	      ((((J_inv_tmp_tmp + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205;
 8001b26:	f107 030c 	add.w	r3, r7, #12
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	3318      	adds	r3, #24
 8001b2e:	ed93 6b00 	vldr	d6, [r3]
 8001b32:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8001b36:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b3a:	ed9f 6bf1 	vldr	d6, [pc, #964]	; 8001f00 <IVK+0x418>
 8001b3e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b42:	ed9f 6bf1 	vldr	d6, [pc, #964]	; 8001f08 <IVK+0x420>
 8001b46:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b4a:	ed9f 6bf1 	vldr	d6, [pc, #964]	; 8001f10 <IVK+0x428>
 8001b4e:	ee37 7b46 	vsub.f64	d7, d7, d6
	  b_J_inv_tmp_tmp =
 8001b52:	ed9f 6bf1 	vldr	d6, [pc, #964]	; 8001f18 <IVK+0x430>
 8001b56:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b5a:	ed87 7b74 	vstr	d7, [r7, #464]	; 0x1d0
	  c_J_inv_tmp_tmp = sin(b_J_inv_tmp_tmp);
 8001b5e:	ed97 0b74 	vldr	d0, [r7, #464]	; 0x1d0
 8001b62:	f015 fbf9 	bl	8017358 <sin>
 8001b66:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
	  d_J_inv_tmp_tmp = sin(q[0]);
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	ed93 7b00 	vldr	d7, [r3]
 8001b74:	eeb0 0b47 	vmov.f64	d0, d7
 8001b78:	f015 fbee 	bl	8017358 <sin>
 8001b7c:	ed87 0b70 	vstr	d0, [r7, #448]	; 0x1c0
	  J_inv_tmp = cos(((J_inv_tmp_tmp + 1.6845) + -0.8995) + -0.73665);
 8001b80:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8001b84:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8001f00 <IVK+0x418>
 8001b88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b8c:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8001f08 <IVK+0x420>
 8001b90:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b94:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8001f10 <IVK+0x428>
 8001b98:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b9c:	eeb0 0b47 	vmov.f64	d0, d7
 8001ba0:	f015 fb86 	bl	80172b0 <cos>
 8001ba4:	ed87 0b6e 	vstr	d0, [r7, #440]	; 0x1b8
	  b_J_inv_tmp = cos(b_J_inv_tmp_tmp);
 8001ba8:	ed97 0b74 	vldr	d0, [r7, #464]	; 0x1d0
 8001bac:	f015 fb80 	bl	80172b0 <cos>
 8001bb0:	ed87 0b6c 	vstr	d0, [r7, #432]	; 0x1b0
	  J_inv_tmp_tmp = ((q[1] + q[2]) + 1.6845) + -0.8995;
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	3308      	adds	r3, #8
 8001bbc:	ed93 6b00 	vldr	d6, [r3]
 8001bc0:	f107 030c 	add.w	r3, r7, #12
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	3310      	adds	r3, #16
 8001bc8:	ed93 7b00 	vldr	d7, [r3]
 8001bcc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001bd0:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 8001f00 <IVK+0x418>
 8001bd4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001bd8:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 8001f08 <IVK+0x420>
 8001bdc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001be0:	ed87 7b76 	vstr	d7, [r7, #472]	; 0x1d8
	  c_J_inv_tmp = cos(J_inv_tmp_tmp);
 8001be4:	ed97 0b76 	vldr	d0, [r7, #472]	; 0x1d8
 8001be8:	f015 fb62 	bl	80172b0 <cos>
 8001bec:	ed87 0b6a 	vstr	d0, [r7, #424]	; 0x1a8
	  d_J_inv_tmp = sin(J_inv_tmp_tmp);
 8001bf0:	ed97 0b76 	vldr	d0, [r7, #472]	; 0x1d8
 8001bf4:	f015 fbb0 	bl	8017358 <sin>
 8001bf8:	ed87 0b68 	vstr	d0, [r7, #416]	; 0x1a0
	  J_inv_tmp_tmp = sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665);
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	3308      	adds	r3, #8
 8001c04:	ed93 6b00 	vldr	d6, [r3]
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	3310      	adds	r3, #16
 8001c10:	ed93 7b00 	vldr	d7, [r3]
 8001c14:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001c18:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001c1c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8001f00 <IVK+0x418>
 8001c20:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c24:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8001f08 <IVK+0x420>
 8001c28:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c2c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8001f10 <IVK+0x428>
 8001c30:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c34:	eeb0 0b47 	vmov.f64	d0, d7
 8001c38:	f015 fb8e 	bl	8017358 <sin>
 8001c3c:	ed87 0b76 	vstr	d0, [r7, #472]	; 0x1d8
	  b_J_inv_tmp_tmp = cos(q[1] + 1.6845);
 8001c40:	f107 030c 	add.w	r3, r7, #12
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	3308      	adds	r3, #8
 8001c48:	ed93 7b00 	vldr	d7, [r3]
 8001c4c:	ed9f 6bac 	vldr	d6, [pc, #688]	; 8001f00 <IVK+0x418>
 8001c50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c54:	eeb0 0b47 	vmov.f64	d0, d7
 8001c58:	f015 fb2a 	bl	80172b0 <cos>
 8001c5c:	ed87 0b74 	vstr	d0, [r7, #464]	; 0x1d0
	  e_J_inv_tmp_tmp = sin(q[1] + 1.6845);
 8001c60:	f107 030c 	add.w	r3, r7, #12
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	3308      	adds	r3, #8
 8001c68:	ed93 7b00 	vldr	d7, [r3]
 8001c6c:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8001f00 <IVK+0x418>
 8001c70:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c74:	eeb0 0b47 	vmov.f64	d0, d7
 8001c78:	f015 fb6e 	bl	8017358 <sin>
 8001c7c:	ed87 0b66 	vstr	d0, [r7, #408]	; 0x198
	  f_J_inv_tmp_tmp = cos(q[0]);
 8001c80:	f107 030c 	add.w	r3, r7, #12
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	ed93 7b00 	vldr	d7, [r3]
 8001c8a:	eeb0 0b47 	vmov.f64	d0, d7
 8001c8e:	f015 fb0f 	bl	80172b0 <cos>
 8001c92:	ed87 0b64 	vstr	d0, [r7, #400]	; 0x190
	  e_J_inv_tmp = cos(q[2]);
 8001c96:	f107 030c 	add.w	r3, r7, #12
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	3310      	adds	r3, #16
 8001c9e:	ed93 7b00 	vldr	d7, [r3]
 8001ca2:	eeb0 0b47 	vmov.f64	d0, d7
 8001ca6:	f015 fb03 	bl	80172b0 <cos>
 8001caa:	ed87 0b62 	vstr	d0, [r7, #392]	; 0x188
	  dv[0] = 0.0;
 8001cae:	f107 0110 	add.w	r1, r7, #16
 8001cb2:	f04f 0200 	mov.w	r2, #0
 8001cb6:	f04f 0300 	mov.w	r3, #0
 8001cba:	e9c1 2300 	strd	r2, r3, [r1]
	  dv[5] = 0.0;
 8001cbe:	f107 0110 	add.w	r1, r7, #16
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	  d = f_J_inv_tmp_tmp * f_J_inv_tmp_tmp;
 8001cce:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8001cd2:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001cd6:	ed87 7b7a 	vstr	d7, [r7, #488]	; 0x1e8
	  d1 = d_J_inv_tmp_tmp * d_J_inv_tmp_tmp;
 8001cda:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8001cde:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001ce2:	ed87 7b60 	vstr	d7, [r7, #384]	; 0x180
	  dv[10] =
	      -(25.0 * d_J_inv_tmp_tmp) /
 8001ce6:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8001cea:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 8001cee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001cf2:	eeb1 8b47 	vneg.f64	d8, d7
	      (9.0 *
	       (((((((146.0 * c_J_inv_tmp_tmp * d + 410.488 * J_inv_tmp * d) +
 8001cf6:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8001cfa:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8001f28 <IVK+0x440>
 8001cfe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d02:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8001d06:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001d0a:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8001d0e:	ed9f 5b88 	vldr	d5, [pc, #544]	; 8001f30 <IVK+0x448>
 8001d12:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001d16:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8001d1a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001d1e:	ee36 9b07 	vadd.f64	d9, d6, d7
	             146.0 *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8001d22:	f107 030c 	add.w	r3, r7, #12
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	3308      	adds	r3, #8
 8001d2a:	ed93 6b00 	vldr	d6, [r3]
 8001d2e:	f107 030c 	add.w	r3, r7, #12
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	3310      	adds	r3, #16
 8001d36:	ed93 7b00 	vldr	d7, [r3]
 8001d3a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001d3e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001d42:	f107 030c 	add.w	r3, r7, #12
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	3318      	adds	r3, #24
 8001d4a:	ed93 7b00 	vldr	d7, [r3]
 8001d4e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d52:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8001f00 <IVK+0x418>
 8001d56:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001d5a:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8001f08 <IVK+0x420>
 8001d5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d62:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8001f10 <IVK+0x428>
 8001d66:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d6a:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8001f18 <IVK+0x430>
 8001d6e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001d72:	eeb0 0b47 	vmov.f64	d0, d7
 8001d76:	f015 faef 	bl	8017358 <sin>
 8001d7a:	eeb0 7b40 	vmov.f64	d7, d0
	             146.0 *
 8001d7e:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8001f28 <IVK+0x440>
 8001d82:	ee27 6b06 	vmul.f64	d6, d7, d6
	                      -0.73665) +
	                     1.52205) *
 8001d86:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001d8a:	ee26 7b07 	vmul.f64	d7, d6, d7
	       (((((((146.0 * c_J_inv_tmp_tmp * d + 410.488 * J_inv_tmp * d) +
 8001d8e:	ee39 9b07 	vadd.f64	d9, d9, d7
	                 d1) +
	            410.488 *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	3308      	adds	r3, #8
 8001d9a:	ed93 6b00 	vldr	d6, [r3]
 8001d9e:	f107 030c 	add.w	r3, r7, #12
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	3310      	adds	r3, #16
 8001da6:	ed93 7b00 	vldr	d7, [r3]
 8001daa:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001dae:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001db2:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8001f00 <IVK+0x418>
 8001db6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001dba:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8001f08 <IVK+0x420>
 8001dbe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001dc2:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8001f10 <IVK+0x428>
 8001dc6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001dca:	eeb0 0b47 	vmov.f64	d0, d7
 8001dce:	f015 fa6f 	bl	80172b0 <cos>
 8001dd2:	eeb0 7b40 	vmov.f64	d7, d0
	            410.488 *
 8001dd6:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001f30 <IVK+0x448>
 8001dda:	ee27 6b06 	vmul.f64	d6, d7, d6
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001dde:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001de2:	ee26 7b07 	vmul.f64	d7, d6, d7
	                 d1) +
 8001de6:	ee39 6b07 	vadd.f64	d6, d9, d7
	                d1) +
	           60.0 * c_J_inv_tmp * d) +
 8001dea:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8001dee:	ed9f 5b52 	vldr	d5, [pc, #328]	; 8001f38 <IVK+0x450>
 8001df2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001df6:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8001dfa:	ee25 7b07 	vmul.f64	d7, d5, d7
	                d1) +
 8001dfe:	ee36 9b07 	vadd.f64	d9, d6, d7
	          60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * d1) +
 8001e02:	f107 030c 	add.w	r3, r7, #12
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	3308      	adds	r3, #8
 8001e0a:	ed93 6b00 	vldr	d6, [r3]
 8001e0e:	f107 030c 	add.w	r3, r7, #12
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	3310      	adds	r3, #16
 8001e16:	ed93 7b00 	vldr	d7, [r3]
 8001e1a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e1e:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8001f00 <IVK+0x418>
 8001e22:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e26:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8001f08 <IVK+0x420>
 8001e2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e2e:	eeb0 0b47 	vmov.f64	d0, d7
 8001e32:	f015 fa3d 	bl	80172b0 <cos>
 8001e36:	eeb0 7b40 	vmov.f64	d7, d0
 8001e3a:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8001f38 <IVK+0x450>
 8001e3e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001e42:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001e46:	ee26 7b07 	vmul.f64	d7, d6, d7
	           60.0 * c_J_inv_tmp * d) +
 8001e4a:	ee39 6b07 	vadd.f64	d6, d9, d7
	         352.278 * b_J_inv_tmp_tmp * d) +
 8001e4e:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8001e52:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8001f40 <IVK+0x458>
 8001e56:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001e5a:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8001e5e:	ee25 7b07 	vmul.f64	d7, d5, d7
	          60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * d1) +
 8001e62:	ee36 9b07 	vadd.f64	d9, d6, d7
	        352.278 * cos(q[1] + 1.6845) * d1));
 8001e66:	f107 030c 	add.w	r3, r7, #12
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	3308      	adds	r3, #8
 8001e6e:	ed93 7b00 	vldr	d7, [r3]
 8001e72:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001f00 <IVK+0x418>
 8001e76:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e7a:	eeb0 0b47 	vmov.f64	d0, d7
 8001e7e:	f015 fa17 	bl	80172b0 <cos>
 8001e82:	eeb0 7b40 	vmov.f64	d7, d0
 8001e86:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8001f40 <IVK+0x458>
 8001e8a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001e8e:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001e92:	ee26 7b07 	vmul.f64	d7, d6, d7
	         352.278 * b_J_inv_tmp_tmp * d) +
 8001e96:	ee39 7b07 	vadd.f64	d7, d9, d7
	      (9.0 *
 8001e9a:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8001e9e:	ee27 6b06 	vmul.f64	d6, d7, d6
	      -(25.0 * d_J_inv_tmp_tmp) /
 8001ea2:	ee88 7b06 	vdiv.f64	d7, d8, d6
	  dv[10] =
 8001ea6:	f107 0310 	add.w	r3, r7, #16
 8001eaa:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	  dv[15] =
	      25.0 * f_J_inv_tmp_tmp /
 8001eae:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8001eb2:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 8001eb6:	ee27 8b06 	vmul.f64	d8, d7, d6
	      (9.0 *
	       (((((((146.0 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8001eba:	f107 030c 	add.w	r3, r7, #12
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	3308      	adds	r3, #8
 8001ec2:	ed93 6b00 	vldr	d6, [r3]
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	3310      	adds	r3, #16
 8001ece:	ed93 7b00 	vldr	d7, [r3]
 8001ed2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001ed6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001eda:	f107 030c 	add.w	r3, r7, #12
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	3318      	adds	r3, #24
 8001ee2:	ed93 7b00 	vldr	d7, [r3]
 8001ee6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001eea:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8001f00 <IVK+0x418>
 8001eee:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ef2:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8001f08 <IVK+0x420>
 8001ef6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001efa:	e039      	b.n	8001f70 <IVK+0x488>
 8001efc:	f3af 8000 	nop.w
 8001f00:	45a1cac1 	.word	0x45a1cac1
 8001f04:	3ffaf3b6 	.word	0x3ffaf3b6
 8001f08:	39581062 	.word	0x39581062
 8001f0c:	3fecc8b4 	.word	0x3fecc8b4
 8001f10:	05532618 	.word	0x05532618
 8001f14:	3fe792a3 	.word	0x3fe792a3
 8001f18:	19ce075f 	.word	0x19ce075f
 8001f1c:	3ff85a51 	.word	0x3ff85a51
 8001f20:	19ce075f 	.word	0x19ce075f
 8001f24:	3ff85a51 	.word	0x3ff85a51
 8001f28:	00000000 	.word	0x00000000
 8001f2c:	40624000 	.word	0x40624000
 8001f30:	d916872b 	.word	0xd916872b
 8001f34:	4079a7ce 	.word	0x4079a7ce
 8001f38:	00000000 	.word	0x00000000
 8001f3c:	404e0000 	.word	0x404e0000
 8001f40:	b020c49c 	.word	0xb020c49c
 8001f44:	40760472 	.word	0x40760472
 8001f48:	eb851eb8 	.word	0xeb851eb8
 8001f4c:	40d80d51 	.word	0x40d80d51
 8001f50:	45a1cac1 	.word	0x45a1cac1
 8001f54:	3ffaf3b6 	.word	0x3ffaf3b6
 8001f58:	39581062 	.word	0x39581062
 8001f5c:	3fecc8b4 	.word	0x3fecc8b4
 8001f60:	05532618 	.word	0x05532618
 8001f64:	3fe792a3 	.word	0x3fe792a3
 8001f68:	2220bc38 	.word	0x2220bc38
 8001f6c:	4111a6ef 	.word	0x4111a6ef
 8001f70:	ed1f 6b05 	vldr	d6, [pc, #-20]	; 8001f60 <IVK+0x478>
 8001f74:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f78:	ed1f 6b17 	vldr	d6, [pc, #-92]	; 8001f20 <IVK+0x438>
 8001f7c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f80:	eeb0 0b47 	vmov.f64	d0, d7
 8001f84:	f015 f9e8 	bl	8017358 <sin>
 8001f88:	eeb0 7b40 	vmov.f64	d7, d0
	       (((((((146.0 *
 8001f8c:	ed1f 6b1a 	vldr	d6, [pc, #-104]	; 8001f28 <IVK+0x440>
 8001f90:	ee27 6b06 	vmul.f64	d6, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) +
 8001f94:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8001f98:	ee27 7b07 	vmul.f64	d7, d7, d7
	                      1.52205) *
 8001f9c:	ee26 9b07 	vmul.f64	d9, d6, d7
	              410.488 *
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001fa0:	f107 030c 	add.w	r3, r7, #12
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	3308      	adds	r3, #8
 8001fa8:	ed93 6b00 	vldr	d6, [r3]
 8001fac:	f107 030c 	add.w	r3, r7, #12
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	3310      	adds	r3, #16
 8001fb4:	ed93 7b00 	vldr	d7, [r3]
 8001fb8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001fbc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001fc0:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 8001f50 <IVK+0x468>
 8001fc4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001fc8:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 8001f58 <IVK+0x470>
 8001fcc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fd0:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 8001f60 <IVK+0x478>
 8001fd4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fd8:	eeb0 0b47 	vmov.f64	d0, d7
 8001fdc:	f015 f968 	bl	80172b0 <cos>
 8001fe0:	eeb0 7b40 	vmov.f64	d7, d0
	              410.488 *
 8001fe4:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 8001f30 <IVK+0x448>
 8001fe8:	ee27 6b06 	vmul.f64	d6, d7, d6
	                  (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001fec:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8001ff0:	ee27 7b07 	vmul.f64	d7, d7, d7
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001ff4:	ee26 7b07 	vmul.f64	d7, d6, d7
	                  (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) +
 8001ff8:	ee39 9b07 	vadd.f64	d9, d9, d7
	             146.0 *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8001ffc:	f107 030c 	add.w	r3, r7, #12
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3308      	adds	r3, #8
 8002004:	ed93 6b00 	vldr	d6, [r3]
 8002008:	f107 030c 	add.w	r3, r7, #12
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	3310      	adds	r3, #16
 8002010:	ed93 7b00 	vldr	d7, [r3]
 8002014:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002018:	ee36 6b07 	vadd.f64	d6, d6, d7
 800201c:	f107 030c 	add.w	r3, r7, #12
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3318      	adds	r3, #24
 8002024:	ed93 7b00 	vldr	d7, [r3]
 8002028:	ee36 7b07 	vadd.f64	d7, d6, d7
 800202c:	ed1f 6b38 	vldr	d6, [pc, #-224]	; 8001f50 <IVK+0x468>
 8002030:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002034:	ed1f 6b38 	vldr	d6, [pc, #-224]	; 8001f58 <IVK+0x470>
 8002038:	ee37 7b46 	vsub.f64	d7, d7, d6
 800203c:	ed1f 6b38 	vldr	d6, [pc, #-224]	; 8001f60 <IVK+0x478>
 8002040:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002044:	ed1f 6b4a 	vldr	d6, [pc, #-296]	; 8001f20 <IVK+0x438>
 8002048:	ee37 7b06 	vadd.f64	d7, d7, d6
 800204c:	eeb0 0b47 	vmov.f64	d0, d7
 8002050:	f015 f982 	bl	8017358 <sin>
 8002054:	eeb0 7b40 	vmov.f64	d7, d0
	             146.0 *
 8002058:	ed1f 6b4d 	vldr	d6, [pc, #-308]	; 8001f28 <IVK+0x440>
 800205c:	ee27 6b06 	vmul.f64	d6, d7, d6
	                      -0.73665) +
	                     1.52205) *
	                 (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8002060:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002064:	ee27 7b07 	vmul.f64	d7, d7, d7
	                     1.52205) *
 8002068:	ee26 7b07 	vmul.f64	d7, d6, d7
	                  (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800206c:	ee39 9b07 	vadd.f64	d9, d9, d7
	            410.488 *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002070:	f107 030c 	add.w	r3, r7, #12
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	3308      	adds	r3, #8
 8002078:	ed93 6b00 	vldr	d6, [r3]
 800207c:	f107 030c 	add.w	r3, r7, #12
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	3310      	adds	r3, #16
 8002084:	ed93 7b00 	vldr	d7, [r3]
 8002088:	ee37 7b07 	vadd.f64	d7, d7, d7
 800208c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002090:	ed1f 6b51 	vldr	d6, [pc, #-324]	; 8001f50 <IVK+0x468>
 8002094:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002098:	ed1f 6b51 	vldr	d6, [pc, #-324]	; 8001f58 <IVK+0x470>
 800209c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020a0:	ed1f 6b51 	vldr	d6, [pc, #-324]	; 8001f60 <IVK+0x478>
 80020a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020a8:	eeb0 0b47 	vmov.f64	d0, d7
 80020ac:	f015 f900 	bl	80172b0 <cos>
 80020b0:	eeb0 7b40 	vmov.f64	d7, d0
	            410.488 *
 80020b4:	ed1f 6b62 	vldr	d6, [pc, #-392]	; 8001f30 <IVK+0x448>
 80020b8:	ee27 6b06 	vmul.f64	d6, d7, d6
	                (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80020bc:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80020c0:	ee27 7b07 	vmul.f64	d7, d7, d7
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80020c4:	ee26 7b07 	vmul.f64	d7, d6, d7
	                 (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80020c8:	ee39 9b07 	vadd.f64	d9, d9, d7
	           60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	3308      	adds	r3, #8
 80020d4:	ed93 6b00 	vldr	d6, [r3]
 80020d8:	f107 030c 	add.w	r3, r7, #12
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	3310      	adds	r3, #16
 80020e0:	ed93 7b00 	vldr	d7, [r3]
 80020e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020e8:	ed1f 6b67 	vldr	d6, [pc, #-412]	; 8001f50 <IVK+0x468>
 80020ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020f0:	ed1f 6b67 	vldr	d6, [pc, #-412]	; 8001f58 <IVK+0x470>
 80020f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020f8:	eeb0 0b47 	vmov.f64	d0, d7
 80020fc:	f015 f8d8 	bl	80172b0 <cos>
 8002100:	eeb0 7b40 	vmov.f64	d7, d0
 8002104:	ed1f 6b74 	vldr	d6, [pc, #-464]	; 8001f38 <IVK+0x450>
 8002108:	ee27 6b06 	vmul.f64	d6, d7, d6
	               (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800210c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002110:	ee27 7b07 	vmul.f64	d7, d7, d7
	           60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8002114:	ee26 7b07 	vmul.f64	d7, d6, d7
	                (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8002118:	ee39 9b07 	vadd.f64	d9, d9, d7
	          60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800211c:	f107 030c 	add.w	r3, r7, #12
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	3308      	adds	r3, #8
 8002124:	ed93 6b00 	vldr	d6, [r3]
 8002128:	f107 030c 	add.w	r3, r7, #12
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	3310      	adds	r3, #16
 8002130:	ed93 7b00 	vldr	d7, [r3]
 8002134:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002138:	ed1f 6b7b 	vldr	d6, [pc, #-492]	; 8001f50 <IVK+0x468>
 800213c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002140:	ed1f 6b7b 	vldr	d6, [pc, #-492]	; 8001f58 <IVK+0x470>
 8002144:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002148:	eeb0 0b47 	vmov.f64	d0, d7
 800214c:	f015 f8b0 	bl	80172b0 <cos>
 8002150:	eeb0 7b40 	vmov.f64	d7, d0
 8002154:	ed1f 6b88 	vldr	d6, [pc, #-544]	; 8001f38 <IVK+0x450>
 8002158:	ee27 6b06 	vmul.f64	d6, d7, d6
	              (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 800215c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002160:	ee27 7b07 	vmul.f64	d7, d7, d7
	          60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8002164:	ee26 7b07 	vmul.f64	d7, d6, d7
	               (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8002168:	ee39 9b07 	vadd.f64	d9, d9, d7
	         352.278 * cos(q[1] + 1.6845) * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800216c:	f107 030c 	add.w	r3, r7, #12
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	3308      	adds	r3, #8
 8002174:	ed93 7b00 	vldr	d7, [r3]
 8002178:	ed1f 6b8b 	vldr	d6, [pc, #-556]	; 8001f50 <IVK+0x468>
 800217c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002180:	eeb0 0b47 	vmov.f64	d0, d7
 8002184:	f015 f894 	bl	80172b0 <cos>
 8002188:	eeb0 7b40 	vmov.f64	d7, d0
 800218c:	ed1f 6b94 	vldr	d6, [pc, #-592]	; 8001f40 <IVK+0x458>
 8002190:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002194:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002198:	ee27 7b07 	vmul.f64	d7, d7, d7
 800219c:	ee26 7b07 	vmul.f64	d7, d6, d7
	              (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80021a0:	ee39 9b07 	vadd.f64	d9, d9, d7
	        352.278 * cos(q[1] + 1.6845) * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)));
 80021a4:	f107 030c 	add.w	r3, r7, #12
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	3308      	adds	r3, #8
 80021ac:	ed93 7b00 	vldr	d7, [r3]
 80021b0:	ed1f 6b99 	vldr	d6, [pc, #-612]	; 8001f50 <IVK+0x468>
 80021b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80021b8:	eeb0 0b47 	vmov.f64	d0, d7
 80021bc:	f015 f878 	bl	80172b0 <cos>
 80021c0:	eeb0 7b40 	vmov.f64	d7, d0
 80021c4:	ed1f 6ba2 	vldr	d6, [pc, #-648]	; 8001f40 <IVK+0x458>
 80021c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80021cc:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80021d0:	ee27 7b07 	vmul.f64	d7, d7, d7
 80021d4:	ee26 7b07 	vmul.f64	d7, d6, d7
	         352.278 * cos(q[1] + 1.6845) * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80021d8:	ee39 7b07 	vadd.f64	d7, d9, d7
	      (9.0 *
 80021dc:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 80021e0:	ee27 6b06 	vmul.f64	d6, d7, d6
	      25.0 * f_J_inv_tmp_tmp /
 80021e4:	ee88 7b06 	vdiv.f64	d7, d8, d6
	  dv[15] =
 80021e8:	f107 0310 	add.w	r3, r7, #16
 80021ec:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
	  dv[20] = 0.0;
 80021f0:	f107 0110 	add.w	r1, r7, #16
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	f04f 0300 	mov.w	r3, #0
 80021fc:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	  d2 = sin(((q[1] + q[2]) + 1.6845) + -0.8995);
 8002200:	f107 030c 	add.w	r3, r7, #12
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	3308      	adds	r3, #8
 8002208:	ed93 6b00 	vldr	d6, [r3]
 800220c:	f107 030c 	add.w	r3, r7, #12
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	3310      	adds	r3, #16
 8002214:	ed93 7b00 	vldr	d7, [r3]
 8002218:	ee36 7b07 	vadd.f64	d7, d6, d7
 800221c:	ed1f 6bb4 	vldr	d6, [pc, #-720]	; 8001f50 <IVK+0x468>
 8002220:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002224:	ed1f 6bb4 	vldr	d6, [pc, #-720]	; 8001f58 <IVK+0x470>
 8002228:	ee37 7b46 	vsub.f64	d7, d7, d6
 800222c:	eeb0 0b47 	vmov.f64	d0, d7
 8002230:	f015 f892 	bl	8017358 <sin>
 8002234:	ed87 0b5e 	vstr	d0, [r7, #376]	; 0x178
	  d3 = 24629.28 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002238:	f107 030c 	add.w	r3, r7, #12
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	3308      	adds	r3, #8
 8002240:	ed93 6b00 	vldr	d6, [r3]
 8002244:	f107 030c 	add.w	r3, r7, #12
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	3310      	adds	r3, #16
 800224c:	ed93 7b00 	vldr	d7, [r3]
 8002250:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002254:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002258:	ed1f 6bc3 	vldr	d6, [pc, #-780]	; 8001f50 <IVK+0x468>
 800225c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002260:	ed1f 6bc3 	vldr	d6, [pc, #-780]	; 8001f58 <IVK+0x470>
 8002264:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002268:	ed1f 6bc3 	vldr	d6, [pc, #-780]	; 8001f60 <IVK+0x478>
 800226c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002270:	eeb0 0b47 	vmov.f64	d0, d7
 8002274:	f015 f81c 	bl	80172b0 <cos>
 8002278:	eeb0 7b40 	vmov.f64	d7, d0
 800227c:	ed1f 6bce 	vldr	d6, [pc, #-824]	; 8001f48 <IVK+0x460>
 8002280:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002284:	ed97 6b5e 	vldr	d6, [r7, #376]	; 0x178
 8002288:	ee26 7b07 	vmul.f64	d7, d6, d7
 800228c:	ed87 7b5c 	vstr	d7, [r7, #368]	; 0x170
	       d2;
	  d4 = 24629.28 * J_inv_tmp_tmp * cos(((q[1] + q[2]) + 1.6845) + -0.8995);
 8002290:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8002294:	ed1f 6bd4 	vldr	d6, [pc, #-848]	; 8001f48 <IVK+0x460>
 8002298:	ee27 8b06 	vmul.f64	d8, d7, d6
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3308      	adds	r3, #8
 80022a4:	ed93 6b00 	vldr	d6, [r3]
 80022a8:	f107 030c 	add.w	r3, r7, #12
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	3310      	adds	r3, #16
 80022b0:	ed93 7b00 	vldr	d7, [r3]
 80022b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80022b8:	ed1f 6bdb 	vldr	d6, [pc, #-876]	; 8001f50 <IVK+0x468>
 80022bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80022c0:	ed1f 6bdb 	vldr	d6, [pc, #-876]	; 8001f58 <IVK+0x470>
 80022c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80022c8:	eeb0 0b47 	vmov.f64	d0, d7
 80022cc:	f014 fff0 	bl	80172b0 <cos>
 80022d0:	eeb0 7b40 	vmov.f64	d7, d0
 80022d4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80022d8:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
	  d5 = 289211.783328 *
	       cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80022dc:	f107 030c 	add.w	r3, r7, #12
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	3308      	adds	r3, #8
 80022e4:	ed93 6b00 	vldr	d6, [r3]
 80022e8:	f107 030c 	add.w	r3, r7, #12
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	3310      	adds	r3, #16
 80022f0:	ed93 7b00 	vldr	d7, [r3]
 80022f4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80022f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80022fc:	ed1f 6bec 	vldr	d6, [pc, #-944]	; 8001f50 <IVK+0x468>
 8002300:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002304:	ed1f 6bec 	vldr	d6, [pc, #-944]	; 8001f58 <IVK+0x470>
 8002308:	ee37 7b46 	vsub.f64	d7, d7, d6
 800230c:	ed1f 6bec 	vldr	d6, [pc, #-944]	; 8001f60 <IVK+0x478>
 8002310:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002314:	eeb0 0b47 	vmov.f64	d0, d7
 8002318:	f014 ffca 	bl	80172b0 <cos>
 800231c:	eeb0 7b40 	vmov.f64	d7, d0
	  d5 = 289211.783328 *
 8002320:	ed1f 6bef 	vldr	d6, [pc, #-956]	; 8001f68 <IVK+0x480>
 8002324:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002328:	ed97 6b66 	vldr	d6, [r7, #408]	; 0x198
 800232c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002330:	ed87 7b58 	vstr	d7, [r7, #352]	; 0x160
	       e_J_inv_tmp_tmp;
	  d6 = 289211.783328 * J_inv_tmp_tmp * b_J_inv_tmp_tmp;
 8002334:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8002338:	ed9f 6bf7 	vldr	d6, [pc, #988]	; 8002718 <IVK+0xc30>
 800233c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002340:	ed97 6b74 	vldr	d6, [r7, #464]	; 0x1d0
 8002344:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002348:	ed87 7b56 	vstr	d7, [r7, #344]	; 0x158
	  d7 = 21136.68 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp_tmp;
 800234c:	f107 030c 	add.w	r3, r7, #12
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	3308      	adds	r3, #8
 8002354:	ed93 6b00 	vldr	d6, [r3]
 8002358:	f107 030c 	add.w	r3, r7, #12
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	3310      	adds	r3, #16
 8002360:	ed93 7b00 	vldr	d7, [r3]
 8002364:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002368:	ed9f 6bed 	vldr	d6, [pc, #948]	; 8002720 <IVK+0xc38>
 800236c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002370:	ed9f 6bed 	vldr	d6, [pc, #948]	; 8002728 <IVK+0xc40>
 8002374:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002378:	eeb0 0b47 	vmov.f64	d0, d7
 800237c:	f014 ff98 	bl	80172b0 <cos>
 8002380:	eeb0 7b40 	vmov.f64	d7, d0
 8002384:	ed9f 6bea 	vldr	d6, [pc, #936]	; 8002730 <IVK+0xc48>
 8002388:	ee27 7b06 	vmul.f64	d7, d7, d6
 800238c:	ed97 6b66 	vldr	d6, [r7, #408]	; 0x198
 8002390:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002394:	ed87 7b54 	vstr	d7, [r7, #336]	; 0x150
	  d8 = 21136.68 * d2 * b_J_inv_tmp_tmp;
 8002398:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 800239c:	ed9f 6be4 	vldr	d6, [pc, #912]	; 8002730 <IVK+0xc48>
 80023a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023a4:	ed97 6b74 	vldr	d6, [r7, #464]	; 0x1d0
 80023a8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80023ac:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
	  dv[1] = 27.0 *
	          (((8760.0 * c_J_inv_tmp_tmp * d_J_inv_tmp * d_J_inv_tmp_tmp +
 80023b0:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 80023b4:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8002738 <IVK+0xc50>
 80023b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80023bc:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 80023c0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80023c4:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80023c8:	ee26 6b07 	vmul.f64	d6, d6, d7
	             119862.496 * b_J_inv_tmp * J_inv_tmp * d_J_inv_tmp_tmp) +
 80023cc:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80023d0:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 8002750 <IVK+0xc68>
 80023d4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80023d8:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 80023dc:	ee25 5b07 	vmul.f64	d5, d5, d7
 80023e0:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80023e4:	ee25 7b07 	vmul.f64	d7, d5, d7
	          (((8760.0 * c_J_inv_tmp_tmp * d_J_inv_tmp * d_J_inv_tmp_tmp +
 80023e8:	ee36 6b07 	vadd.f64	d6, d6, d7
	            119862.496 * c_J_inv_tmp_tmp * J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 80023ec:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 80023f0:	ed9f 5bd7 	vldr	d5, [pc, #860]	; 8002750 <IVK+0xc68>
 80023f4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80023f8:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80023fc:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002400:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002404:	ee25 7b07 	vmul.f64	d7, d5, d7
	             119862.496 * b_J_inv_tmp * J_inv_tmp * d_J_inv_tmp_tmp) +
 8002408:	ee36 6b07 	vadd.f64	d6, d6, d7
	           8760.0 * b_J_inv_tmp * c_J_inv_tmp * d_J_inv_tmp_tmp) /
 800240c:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002410:	ed9f 5bc9 	vldr	d5, [pc, #804]	; 8002738 <IVK+0xc50>
 8002414:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002418:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 800241c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002420:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002424:	ee25 7b07 	vmul.f64	d7, d5, d7
	            119862.496 * c_J_inv_tmp_tmp * J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 8002428:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[1] = 27.0 *
 800242c:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8002430:	ee27 5b06 	vmul.f64	d5, d7, d6
	          (((((((((((24629.28 * J_inv_tmp * d_J_inv_tmp * d -
 8002434:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8002438:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8002740 <IVK+0xc58>
 800243c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002440:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8002444:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002448:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 800244c:	ee26 6b07 	vmul.f64	d6, d6, d7
	                     24629.28 * J_inv_tmp_tmp * c_J_inv_tmp * d) +
 8002450:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8002454:	ed9f 4bba 	vldr	d4, [pc, #744]	; 8002740 <IVK+0xc58>
 8002458:	ee27 4b04 	vmul.f64	d4, d7, d4
 800245c:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8002460:	ee24 4b07 	vmul.f64	d4, d4, d7
 8002464:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8002468:	ee24 7b07 	vmul.f64	d7, d4, d7
	          (((((((((((24629.28 * J_inv_tmp * d_J_inv_tmp * d -
 800246c:	ee36 6b47 	vsub.f64	d6, d6, d7
	                    d3 * d1) -
 8002470:	ed97 4b5c 	vldr	d4, [r7, #368]	; 0x170
 8002474:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002478:	ee24 7b07 	vmul.f64	d7, d4, d7
	                     24629.28 * J_inv_tmp_tmp * c_J_inv_tmp * d) +
 800247c:	ee36 6b07 	vadd.f64	d6, d6, d7
	                   d4 * d1) +
 8002480:	ed97 4b5a 	vldr	d4, [r7, #360]	; 0x168
 8002484:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002488:	ee24 7b07 	vmul.f64	d7, d4, d7
	                    d3 * d1) -
 800248c:	ee36 6b47 	vsub.f64	d6, d6, d7
	                  289211.783328 * J_inv_tmp * e_J_inv_tmp_tmp * d) -
 8002490:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8002494:	ed9f 4ba0 	vldr	d4, [pc, #640]	; 8002718 <IVK+0xc30>
 8002498:	ee27 4b04 	vmul.f64	d4, d7, d4
 800249c:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 80024a0:	ee24 4b07 	vmul.f64	d4, d4, d7
 80024a4:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 80024a8:	ee24 7b07 	vmul.f64	d7, d4, d7
	                   d4 * d1) +
 80024ac:	ee36 6b07 	vadd.f64	d6, d6, d7
	                 d6 * d) +
 80024b0:	ed97 4b56 	vldr	d4, [r7, #344]	; 0x158
 80024b4:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 80024b8:	ee24 7b07 	vmul.f64	d7, d4, d7
	                  289211.783328 * J_inv_tmp * e_J_inv_tmp_tmp * d) -
 80024bc:	ee36 6b47 	vsub.f64	d6, d6, d7
	                d5 * d1) -
 80024c0:	ed97 4b58 	vldr	d4, [r7, #352]	; 0x160
 80024c4:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80024c8:	ee24 7b07 	vmul.f64	d7, d4, d7
	                 d6 * d) +
 80024cc:	ee36 6b07 	vadd.f64	d6, d6, d7
	               d6 * d1) +
 80024d0:	ed97 4b56 	vldr	d4, [r7, #344]	; 0x158
 80024d4:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80024d8:	ee24 7b07 	vmul.f64	d7, d4, d7
	                d5 * d1) -
 80024dc:	ee36 6b47 	vsub.f64	d6, d6, d7
	              21136.68 * c_J_inv_tmp * e_J_inv_tmp_tmp * d) -
 80024e0:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80024e4:	ed9f 4b92 	vldr	d4, [pc, #584]	; 8002730 <IVK+0xc48>
 80024e8:	ee27 4b04 	vmul.f64	d4, d7, d4
 80024ec:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 80024f0:	ee24 4b07 	vmul.f64	d4, d4, d7
 80024f4:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 80024f8:	ee24 7b07 	vmul.f64	d7, d4, d7
	               d6 * d1) +
 80024fc:	ee36 6b07 	vadd.f64	d6, d6, d7
	             21136.68 * d_J_inv_tmp * b_J_inv_tmp_tmp * d) +
 8002500:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8002504:	ed9f 4b8a 	vldr	d4, [pc, #552]	; 8002730 <IVK+0xc48>
 8002508:	ee27 4b04 	vmul.f64	d4, d7, d4
 800250c:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8002510:	ee24 4b07 	vmul.f64	d4, d4, d7
 8002514:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8002518:	ee24 7b07 	vmul.f64	d7, d4, d7
	              21136.68 * c_J_inv_tmp * e_J_inv_tmp_tmp * d) -
 800251c:	ee36 6b47 	vsub.f64	d6, d6, d7
	            d7 * d1) -
 8002520:	ed97 4b54 	vldr	d4, [r7, #336]	; 0x150
 8002524:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002528:	ee24 7b07 	vmul.f64	d7, d4, d7
	             21136.68 * d_J_inv_tmp * b_J_inv_tmp_tmp * d) +
 800252c:	ee36 6b07 	vadd.f64	d6, d6, d7
	           d8 * d1);
 8002530:	ed97 4b52 	vldr	d4, [r7, #328]	; 0x148
 8002534:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002538:	ee24 7b07 	vmul.f64	d7, d4, d7
	            d7 * d1) -
 800253c:	ee36 6b47 	vsub.f64	d6, d6, d7
	           8760.0 * b_J_inv_tmp * c_J_inv_tmp * d_J_inv_tmp_tmp) /
 8002540:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[1] = 27.0 *
 8002544:	f107 0310 	add.w	r3, r7, #16
 8002548:	ed83 7b02 	vstr	d7, [r3, #8]
	  d9 = 8760.0 *
	       cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 800254c:	f107 030c 	add.w	r3, r7, #12
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	3308      	adds	r3, #8
 8002554:	ed93 6b00 	vldr	d6, [r3]
 8002558:	f107 030c 	add.w	r3, r7, #12
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	3310      	adds	r3, #16
 8002560:	ed93 7b00 	vldr	d7, [r3]
 8002564:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002568:	ee36 6b07 	vadd.f64	d6, d6, d7
 800256c:	f107 030c 	add.w	r3, r7, #12
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	3318      	adds	r3, #24
 8002574:	ed93 7b00 	vldr	d7, [r3]
 8002578:	ee36 7b07 	vadd.f64	d7, d6, d7
 800257c:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8002720 <IVK+0xc38>
 8002580:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002584:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8002728 <IVK+0xc40>
 8002588:	ee37 7b46 	vsub.f64	d7, d7, d6
 800258c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8002758 <IVK+0xc70>
 8002590:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002594:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8002748 <IVK+0xc60>
 8002598:	ee37 7b06 	vadd.f64	d7, d7, d6
 800259c:	eeb0 0b47 	vmov.f64	d0, d7
 80025a0:	f014 fe86 	bl	80172b0 <cos>
 80025a4:	eeb0 7b40 	vmov.f64	d7, d0
	  d9 = 8760.0 *
 80025a8:	ed9f 6b63 	vldr	d6, [pc, #396]	; 8002738 <IVK+0xc50>
 80025ac:	ee27 8b06 	vmul.f64	d8, d7, d6
	           1.52205) *
	       cos(((q[1] + q[2]) + 1.6845) + -0.8995);
 80025b0:	f107 030c 	add.w	r3, r7, #12
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	3308      	adds	r3, #8
 80025b8:	ed93 6b00 	vldr	d6, [r3]
 80025bc:	f107 030c 	add.w	r3, r7, #12
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	3310      	adds	r3, #16
 80025c4:	ed93 7b00 	vldr	d7, [r3]
 80025c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80025cc:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8002720 <IVK+0xc38>
 80025d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80025d4:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8002728 <IVK+0xc40>
 80025d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80025dc:	eeb0 0b47 	vmov.f64	d0, d7
 80025e0:	f014 fe66 	bl	80172b0 <cos>
 80025e4:	eeb0 7b40 	vmov.f64	d7, d0
	  d9 = 8760.0 *
 80025e8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80025ec:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
	  d10 = 8760.0 *
	        sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 80025f0:	f107 030c 	add.w	r3, r7, #12
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3308      	adds	r3, #8
 80025f8:	ed93 6b00 	vldr	d6, [r3]
 80025fc:	f107 030c 	add.w	r3, r7, #12
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	3310      	adds	r3, #16
 8002604:	ed93 7b00 	vldr	d7, [r3]
 8002608:	ee37 7b07 	vadd.f64	d7, d7, d7
 800260c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002610:	f107 030c 	add.w	r3, r7, #12
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	3318      	adds	r3, #24
 8002618:	ed93 7b00 	vldr	d7, [r3]
 800261c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002620:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8002720 <IVK+0xc38>
 8002624:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002628:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8002728 <IVK+0xc40>
 800262c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002630:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8002758 <IVK+0xc70>
 8002634:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002638:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8002748 <IVK+0xc60>
 800263c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002640:	eeb0 0b47 	vmov.f64	d0, d7
 8002644:	f014 fe88 	bl	8017358 <sin>
 8002648:	eeb0 7b40 	vmov.f64	d7, d0
	  d10 = 8760.0 *
 800264c:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 8002738 <IVK+0xc50>
 8002650:	ee27 8b06 	vmul.f64	d8, d7, d6
	            1.52205) *
	        sin(((q[1] + q[2]) + 1.6845) + -0.8995);
 8002654:	f107 030c 	add.w	r3, r7, #12
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	3308      	adds	r3, #8
 800265c:	ed93 6b00 	vldr	d6, [r3]
 8002660:	f107 030c 	add.w	r3, r7, #12
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	3310      	adds	r3, #16
 8002668:	ed93 7b00 	vldr	d7, [r3]
 800266c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002670:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8002720 <IVK+0xc38>
 8002674:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002678:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8002728 <IVK+0xc40>
 800267c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002680:	eeb0 0b47 	vmov.f64	d0, d7
 8002684:	f014 fe68 	bl	8017358 <sin>
 8002688:	eeb0 7b40 	vmov.f64	d7, d0
	  d10 = 8760.0 *
 800268c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002690:	ed87 7b4e 	vstr	d7, [r7, #312]	; 0x138
	  d11 = ((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8002694:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002698:	ee27 6b07 	vmul.f64	d6, d7, d7
 800269c:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80026a0:	ee26 6b07 	vmul.f64	d6, d6, d7
	                  d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80026a4:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80026a8:	ee27 5b07 	vmul.f64	d5, d7, d7
 80026ac:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 80026b0:	ee25 7b07 	vmul.f64	d7, d5, d7
	  d11 = ((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 80026b4:	ee36 6b47 	vsub.f64	d6, d6, d7
	                 d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80026b8:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80026bc:	ee27 5b07 	vmul.f64	d5, d7, d7
 80026c0:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80026c4:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80026c8:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80026cc:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80026d0:	ee27 5b07 	vmul.f64	d5, d7, d7
 80026d4:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 80026d8:	ee25 7b07 	vmul.f64	d7, d5, d7
	                 d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80026dc:	ee36 6b47 	vsub.f64	d6, d6, d7
	               d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 80026e0:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80026e4:	ee27 5b07 	vmul.f64	d5, d7, d7
 80026e8:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 80026ec:	ee25 7b07 	vmul.f64	d7, d5, d7
	                d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80026f0:	ee36 6b07 	vadd.f64	d6, d6, d7
	              d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80026f4:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80026f8:	ee27 5b07 	vmul.f64	d5, d7, d7
 80026fc:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8002700:	ee25 7b07 	vmul.f64	d7, d5, d7
	               d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8002704:	ee36 6b47 	vsub.f64	d6, d6, d7
	             d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8002708:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800270c:	ee27 5b07 	vmul.f64	d5, d7, d7
 8002710:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8002714:	e038      	b.n	8002788 <IVK+0xca0>
 8002716:	bf00      	nop
 8002718:	2220bc38 	.word	0x2220bc38
 800271c:	4111a6ef 	.word	0x4111a6ef
 8002720:	45a1cac1 	.word	0x45a1cac1
 8002724:	3ffaf3b6 	.word	0x3ffaf3b6
 8002728:	39581062 	.word	0x39581062
 800272c:	3fecc8b4 	.word	0x3fecc8b4
 8002730:	851eb852 	.word	0x851eb852
 8002734:	40d4a42b 	.word	0x40d4a42b
 8002738:	00000000 	.word	0x00000000
 800273c:	40c11c00 	.word	0x40c11c00
 8002740:	eb851eb8 	.word	0xeb851eb8
 8002744:	40d80d51 	.word	0x40d80d51
 8002748:	19ce075f 	.word	0x19ce075f
 800274c:	3ff85a51 	.word	0x3ff85a51
 8002750:	ef9db22d 	.word	0xef9db22d
 8002754:	40fd4367 	.word	0x40fd4367
 8002758:	05532618 	.word	0x05532618
 800275c:	3fe792a3 	.word	0x3fe792a3
 8002760:	45a1cac1 	.word	0x45a1cac1
 8002764:	3ffaf3b6 	.word	0x3ffaf3b6
 8002768:	39581062 	.word	0x39581062
 800276c:	3fecc8b4 	.word	0x3fecc8b4
 8002770:	d916872b 	.word	0xd916872b
 8002774:	4089a7ce 	.word	0x4089a7ce
 8002778:	00000000 	.word	0x00000000
 800277c:	404e0000 	.word	0x404e0000
 8002780:	ef9db22d 	.word	0xef9db22d
 8002784:	40ed4367 	.word	0x40ed4367
 8002788:	ee25 7b07 	vmul.f64	d7, d5, d7
	              d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800278c:	ee36 6b07 	vadd.f64	d6, d6, d7
	            d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8002790:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002794:	ee27 5b07 	vmul.f64	d5, d7, d7
 8002798:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 800279c:	ee25 7b07 	vmul.f64	d7, d5, d7
	             d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80027a0:	ee36 6b47 	vsub.f64	d6, d6, d7
	           d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 80027a4:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80027a8:	ee27 5b07 	vmul.f64	d5, d7, d7
 80027ac:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 80027b0:	ee25 7b07 	vmul.f64	d7, d5, d7
	            d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80027b4:	ee36 6b07 	vadd.f64	d6, d6, d7
	          d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80027b8:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80027bc:	ee27 5b07 	vmul.f64	d5, d7, d7
 80027c0:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 80027c4:	ee25 7b07 	vmul.f64	d7, d5, d7
	           d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 80027c8:	ee36 6b47 	vsub.f64	d6, d6, d7
	         d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80027cc:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80027d0:	ee27 5b07 	vmul.f64	d5, d7, d7
 80027d4:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 80027d8:	ee25 7b07 	vmul.f64	d7, d5, d7
	          d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80027dc:	ee36 6b07 	vadd.f64	d6, d6, d7
	        d8 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp);
 80027e0:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80027e4:	ee27 5b07 	vmul.f64	d5, d7, d7
 80027e8:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 80027ec:	ee25 7b07 	vmul.f64	d7, d5, d7
	  d11 = ((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 80027f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80027f4:	ed87 7b4c 	vstr	d7, [r7, #304]	; 0x130
	  dv[6] = -(27.0 *
	            (((d10 * f_J_inv_tmp_tmp +
 80027f8:	ed97 6b4e 	vldr	d6, [r7, #312]	; 0x138
 80027fc:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002800:	ee26 8b07 	vmul.f64	d8, d6, d7
	               119862.496 *
	                   cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002804:	f107 030c 	add.w	r3, r7, #12
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	3308      	adds	r3, #8
 800280c:	ed93 6b00 	vldr	d6, [r3]
 8002810:	f107 030c 	add.w	r3, r7, #12
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	3310      	adds	r3, #16
 8002818:	ed93 7b00 	vldr	d7, [r3]
 800281c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002820:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002824:	f107 030c 	add.w	r3, r7, #12
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	3318      	adds	r3, #24
 800282c:	ed93 7b00 	vldr	d7, [r3]
 8002830:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002834:	ed1f 6b36 	vldr	d6, [pc, #-216]	; 8002760 <IVK+0xc78>
 8002838:	ee37 7b06 	vadd.f64	d7, d7, d6
 800283c:	ed1f 6b36 	vldr	d6, [pc, #-216]	; 8002768 <IVK+0xc80>
 8002840:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002844:	ed1f 6b3c 	vldr	d6, [pc, #-240]	; 8002758 <IVK+0xc70>
 8002848:	ee37 7b46 	vsub.f64	d7, d7, d6
 800284c:	ed1f 6b42 	vldr	d6, [pc, #-264]	; 8002748 <IVK+0xc60>
 8002850:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002854:	eeb0 0b47 	vmov.f64	d0, d7
 8002858:	f014 fd2a 	bl	80172b0 <cos>
 800285c:	eeb0 7b40 	vmov.f64	d7, d0
	               119862.496 *
 8002860:	ed1f 6b45 	vldr	d6, [pc, #-276]	; 8002750 <IVK+0xc68>
 8002864:	ee27 9b06 	vmul.f64	d9, d7, d6
	                        -0.73665) +
	                       1.52205) *
	                   cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002868:	f107 030c 	add.w	r3, r7, #12
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	3308      	adds	r3, #8
 8002870:	ed93 6b00 	vldr	d6, [r3]
 8002874:	f107 030c 	add.w	r3, r7, #12
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	3310      	adds	r3, #16
 800287c:	ed93 7b00 	vldr	d7, [r3]
 8002880:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002884:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002888:	ed1f 6b4b 	vldr	d6, [pc, #-300]	; 8002760 <IVK+0xc78>
 800288c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002890:	ed1f 6b4b 	vldr	d6, [pc, #-300]	; 8002768 <IVK+0xc80>
 8002894:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002898:	ed1f 6b51 	vldr	d6, [pc, #-324]	; 8002758 <IVK+0xc70>
 800289c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80028a0:	eeb0 0b47 	vmov.f64	d0, d7
 80028a4:	f014 fd04 	bl	80172b0 <cos>
 80028a8:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 80028ac:	ee29 6b07 	vmul.f64	d6, d9, d7
	                   cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80028b0:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80028b4:	ee26 7b07 	vmul.f64	d7, d6, d7
	            (((d10 * f_J_inv_tmp_tmp +
 80028b8:	ee38 8b07 	vadd.f64	d8, d8, d7
	                   f_J_inv_tmp_tmp) +
	              119862.496 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80028bc:	f107 030c 	add.w	r3, r7, #12
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	3308      	adds	r3, #8
 80028c4:	ed93 6b00 	vldr	d6, [r3]
 80028c8:	f107 030c 	add.w	r3, r7, #12
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	3310      	adds	r3, #16
 80028d0:	ed93 7b00 	vldr	d7, [r3]
 80028d4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80028d8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80028dc:	f107 030c 	add.w	r3, r7, #12
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	3318      	adds	r3, #24
 80028e4:	ed93 7b00 	vldr	d7, [r3]
 80028e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80028ec:	ed1f 6b64 	vldr	d6, [pc, #-400]	; 8002760 <IVK+0xc78>
 80028f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80028f4:	ed1f 6b64 	vldr	d6, [pc, #-400]	; 8002768 <IVK+0xc80>
 80028f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80028fc:	ed1f 6b6a 	vldr	d6, [pc, #-424]	; 8002758 <IVK+0xc70>
 8002900:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002904:	ed1f 6b70 	vldr	d6, [pc, #-448]	; 8002748 <IVK+0xc60>
 8002908:	ee37 7b06 	vadd.f64	d7, d7, d6
 800290c:	eeb0 0b47 	vmov.f64	d0, d7
 8002910:	f014 fd22 	bl	8017358 <sin>
 8002914:	eeb0 7b40 	vmov.f64	d7, d0
	              119862.496 *
 8002918:	ed1f 6b73 	vldr	d6, [pc, #-460]	; 8002750 <IVK+0xc68>
 800291c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002920:	f107 030c 	add.w	r3, r7, #12
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	3308      	adds	r3, #8
 8002928:	ed93 6b00 	vldr	d6, [r3]
 800292c:	f107 030c 	add.w	r3, r7, #12
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	3310      	adds	r3, #16
 8002934:	ed93 7b00 	vldr	d7, [r3]
 8002938:	ee37 7b07 	vadd.f64	d7, d7, d7
 800293c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002940:	ed1f 6b79 	vldr	d6, [pc, #-484]	; 8002760 <IVK+0xc78>
 8002944:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002948:	ed1f 6b79 	vldr	d6, [pc, #-484]	; 8002768 <IVK+0xc80>
 800294c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002950:	ed1f 6b7f 	vldr	d6, [pc, #-508]	; 8002758 <IVK+0xc70>
 8002954:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002958:	eeb0 0b47 	vmov.f64	d0, d7
 800295c:	f014 fcfc 	bl	8017358 <sin>
 8002960:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 8002964:	ee29 6b07 	vmul.f64	d6, d9, d7
	                  sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002968:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800296c:	ee26 7b07 	vmul.f64	d7, d6, d7
	                   f_J_inv_tmp_tmp) +
 8002970:	ee38 6b07 	vadd.f64	d6, d8, d7
	                  f_J_inv_tmp_tmp) +
	             d9 * f_J_inv_tmp_tmp)) /
 8002974:	ed97 5b50 	vldr	d5, [r7, #320]	; 0x140
 8002978:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800297c:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  f_J_inv_tmp_tmp) +
 8002980:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[6] = -(27.0 *
 8002984:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8002988:	ee27 7b06 	vmul.f64	d7, d7, d6
 800298c:	eeb1 5b47 	vneg.f64	d5, d7
	             d9 * f_J_inv_tmp_tmp)) /
 8002990:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 8002994:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[6] = -(27.0 *
 8002998:	f107 0310 	add.w	r3, r7, #16
 800299c:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	          d11;
	  dv[11] = -(27.0 * (820.976 * J_inv_tmp * f_J_inv_tmp_tmp +
 80029a0:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 80029a4:	ed1f 6b8e 	vldr	d6, [pc, #-568]	; 8002770 <IVK+0xc88>
 80029a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80029ac:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80029b0:	ee26 8b07 	vmul.f64	d8, d6, d7
	                     60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80029b4:	f107 030c 	add.w	r3, r7, #12
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	3308      	adds	r3, #8
 80029bc:	ed93 6b00 	vldr	d6, [r3]
 80029c0:	f107 030c 	add.w	r3, r7, #12
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	3310      	adds	r3, #16
 80029c8:	ed93 7b00 	vldr	d7, [r3]
 80029cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80029d0:	ed1f 6b9d 	vldr	d6, [pc, #-628]	; 8002760 <IVK+0xc78>
 80029d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80029d8:	ed1f 6b9d 	vldr	d6, [pc, #-628]	; 8002768 <IVK+0xc80>
 80029dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80029e0:	eeb0 0b47 	vmov.f64	d0, d7
 80029e4:	f014 fc64 	bl	80172b0 <cos>
 80029e8:	eeb0 7b40 	vmov.f64	d7, d0
 80029ec:	ed1f 6b9e 	vldr	d6, [pc, #-632]	; 8002778 <IVK+0xc90>
 80029f0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80029f4:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80029f8:	ee26 7b07 	vmul.f64	d7, d6, d7
	  dv[11] = -(27.0 * (820.976 * J_inv_tmp * f_J_inv_tmp_tmp +
 80029fc:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002a00:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8002a04:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a08:	eeb1 5b47 	vneg.f64	d5, d7
	                         f_J_inv_tmp_tmp)) /
 8002a0c:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 8002a10:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[11] = -(27.0 * (820.976 * J_inv_tmp * f_J_inv_tmp_tmp +
 8002a14:	f107 0310 	add.w	r3, r7, #16
 8002a18:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	           d11;
	  dv[16] =
	      -(27.0 *
	        (820.976 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002a1c:	f107 030c 	add.w	r3, r7, #12
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	3308      	adds	r3, #8
 8002a24:	ed93 6b00 	vldr	d6, [r3]
 8002a28:	f107 030c 	add.w	r3, r7, #12
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	3310      	adds	r3, #16
 8002a30:	ed93 7b00 	vldr	d7, [r3]
 8002a34:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002a38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002a3c:	ed1f 6bb8 	vldr	d6, [pc, #-736]	; 8002760 <IVK+0xc78>
 8002a40:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002a44:	ed1f 6bb8 	vldr	d6, [pc, #-736]	; 8002768 <IVK+0xc80>
 8002a48:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002a4c:	ed1f 6bbe 	vldr	d6, [pc, #-760]	; 8002758 <IVK+0xc70>
 8002a50:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002a54:	eeb0 0b47 	vmov.f64	d0, d7
 8002a58:	f014 fc2a 	bl	80172b0 <cos>
 8002a5c:	eeb0 7b40 	vmov.f64	d7, d0
 8002a60:	ed1f 6bbd 	vldr	d6, [pc, #-756]	; 8002770 <IVK+0xc88>
 8002a64:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002a68:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002a6c:	ee26 8b07 	vmul.f64	d8, d6, d7
	             d_J_inv_tmp_tmp +
	         60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * d_J_inv_tmp_tmp)) /
 8002a70:	f107 030c 	add.w	r3, r7, #12
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	3308      	adds	r3, #8
 8002a78:	ed93 6b00 	vldr	d6, [r3]
 8002a7c:	f107 030c 	add.w	r3, r7, #12
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3310      	adds	r3, #16
 8002a84:	ed93 7b00 	vldr	d7, [r3]
 8002a88:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002a8c:	ed1f 6bcc 	vldr	d6, [pc, #-816]	; 8002760 <IVK+0xc78>
 8002a90:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002a94:	ed1f 6bcc 	vldr	d6, [pc, #-816]	; 8002768 <IVK+0xc80>
 8002a98:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002a9c:	eeb0 0b47 	vmov.f64	d0, d7
 8002aa0:	f014 fc06 	bl	80172b0 <cos>
 8002aa4:	eeb0 7b40 	vmov.f64	d7, d0
 8002aa8:	ed1f 6bcd 	vldr	d6, [pc, #-820]	; 8002778 <IVK+0xc90>
 8002aac:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002ab0:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002ab4:	ee26 7b07 	vmul.f64	d7, d6, d7
	             d_J_inv_tmp_tmp +
 8002ab8:	ee38 7b07 	vadd.f64	d7, d8, d7
	      -(27.0 *
 8002abc:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8002ac0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002ac4:	eeb1 5b47 	vneg.f64	d5, d7
	         60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * d_J_inv_tmp_tmp)) /
 8002ac8:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 8002acc:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[16] =
 8002ad0:	f107 0310 	add.w	r3, r7, #16
 8002ad4:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
	      d11;
	  dv[21] = -(27.0 * (820.976 * J_inv_tmp_tmp + 60.0 * d_J_inv_tmp)) / d11;
 8002ad8:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8002adc:	ed1f 6bdc 	vldr	d6, [pc, #-880]	; 8002770 <IVK+0xc88>
 8002ae0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002ae4:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8002ae8:	ed1f 5bdd 	vldr	d5, [pc, #-884]	; 8002778 <IVK+0xc90>
 8002aec:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002af0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002af4:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8002af8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002afc:	eeb1 5b47 	vneg.f64	d5, d7
 8002b00:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 8002b04:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002b08:	f107 0310 	add.w	r3, r7, #16
 8002b0c:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8
	  d12 = 2.0 * d11;
 8002b10:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 8002b14:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002b18:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
	  dv[2] = -(55.0 * (((((59931.248 * b_J_inv_tmp * J_inv_tmp * e_J_inv_tmp *
 8002b1c:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002b20:	ed1f 6be9 	vldr	d6, [pc, #-932]	; 8002780 <IVK+0xc98>
 8002b24:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002b28:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8002b2c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002b30:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002b34:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002b38:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002b3c:	ee26 6b07 	vmul.f64	d6, d6, d7
	                            d_J_inv_tmp_tmp +
	                        59931.248 * c_J_inv_tmp_tmp * J_inv_tmp_tmp *
 8002b40:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8002b44:	ed1f 5bf2 	vldr	d5, [pc, #-968]	; 8002780 <IVK+0xc98>
 8002b48:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002b4c:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8002b50:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002b54:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002b58:	ee25 5b07 	vmul.f64	d5, d5, d7
	                            e_J_inv_tmp * d_J_inv_tmp_tmp) +
 8002b5c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002b60:	ee25 7b07 	vmul.f64	d7, d5, d7
	                            d_J_inv_tmp_tmp +
 8002b64:	ee36 6b07 	vadd.f64	d6, d6, d7
	                       d9 * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 8002b68:	ed97 5b50 	vldr	d5, [r7, #320]	; 0x140
 8002b6c:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002b70:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002b74:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002b78:	ee25 7b07 	vmul.f64	d7, d5, d7
	                            e_J_inv_tmp * d_J_inv_tmp_tmp) +
 8002b7c:	ee36 6b07 	vadd.f64	d6, d6, d7
	                      51432.588 * b_J_inv_tmp * b_J_inv_tmp_tmp * e_J_inv_tmp *
 8002b80:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002b84:	ed9f 5bf2 	vldr	d5, [pc, #968]	; 8002f50 <IVK+0x1468>
 8002b88:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002b8c:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8002b90:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002b94:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002b98:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002b9c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002ba0:	ee25 7b07 	vmul.f64	d7, d5, d7
	                       d9 * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 8002ba4:	ee36 6b07 	vadd.f64	d6, d6, d7
	                          d_J_inv_tmp_tmp) +
	                     d10 * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 8002ba8:	ed97 5b4e 	vldr	d5, [r7, #312]	; 0x138
 8002bac:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002bb0:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002bb4:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002bb8:	ee25 7b07 	vmul.f64	d7, d5, d7
	                          d_J_inv_tmp_tmp) +
 8002bbc:	ee36 6b07 	vadd.f64	d6, d6, d7
	                    51432.588 * c_J_inv_tmp_tmp * e_J_inv_tmp_tmp *
 8002bc0:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8002bc4:	ed9f 5be2 	vldr	d5, [pc, #904]	; 8002f50 <IVK+0x1468>
 8002bc8:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002bcc:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8002bd0:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002bd4:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002bd8:	ee25 5b07 	vmul.f64	d5, d5, d7
	                        e_J_inv_tmp * d_J_inv_tmp_tmp)) /
 8002bdc:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002be0:	ee25 7b07 	vmul.f64	d7, d5, d7
	                     d10 * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 8002be4:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[2] = -(55.0 * (((((59931.248 * b_J_inv_tmp * J_inv_tmp * e_J_inv_tmp *
 8002be8:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8002fa8 <IVK+0x14c0>
 8002bec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002bf0:	eeb1 5b47 	vneg.f64	d5, d7
	                        e_J_inv_tmp * d_J_inv_tmp_tmp)) /
 8002bf4:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 8002bf8:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[2] = -(55.0 * (((((59931.248 * b_J_inv_tmp * J_inv_tmp * e_J_inv_tmp *
 8002bfc:	f107 0310 	add.w	r3, r7, #16
 8002c00:	ed83 7b04 	vstr	d7, [r3, #16]
	          d12;
	  dv[7] =
	      55.0 *
	      (((((59931.248 *
	               cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002c04:	f107 030c 	add.w	r3, r7, #12
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	3308      	adds	r3, #8
 8002c0c:	ed93 6b00 	vldr	d6, [r3]
 8002c10:	f107 030c 	add.w	r3, r7, #12
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3310      	adds	r3, #16
 8002c18:	ed93 7b00 	vldr	d7, [r3]
 8002c1c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002c20:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002c24:	f107 030c 	add.w	r3, r7, #12
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	3318      	adds	r3, #24
 8002c2c:	ed93 7b00 	vldr	d7, [r3]
 8002c30:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c34:	ed9f 6bd4 	vldr	d6, [pc, #848]	; 8002f88 <IVK+0x14a0>
 8002c38:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002c3c:	ed9f 6bd4 	vldr	d6, [pc, #848]	; 8002f90 <IVK+0x14a8>
 8002c40:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c44:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 8002f78 <IVK+0x1490>
 8002c48:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c4c:	ed9f 6bc6 	vldr	d6, [pc, #792]	; 8002f68 <IVK+0x1480>
 8002c50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002c54:	eeb0 0b47 	vmov.f64	d0, d7
 8002c58:	f014 fb2a 	bl	80172b0 <cos>
 8002c5c:	eeb0 7b40 	vmov.f64	d7, d0
	      (((((59931.248 *
 8002c60:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8002f58 <IVK+0x1470>
 8002c64:	ee27 8b06 	vmul.f64	d8, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002c68:	f107 030c 	add.w	r3, r7, #12
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	3308      	adds	r3, #8
 8002c70:	ed93 6b00 	vldr	d6, [r3]
 8002c74:	f107 030c 	add.w	r3, r7, #12
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	3310      	adds	r3, #16
 8002c7c:	ed93 7b00 	vldr	d7, [r3]
 8002c80:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002c84:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c88:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 8002f88 <IVK+0x14a0>
 8002c8c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002c90:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 8002f90 <IVK+0x14a8>
 8002c94:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c98:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8002f78 <IVK+0x1490>
 8002c9c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ca0:	eeb0 0b47 	vmov.f64	d0, d7
 8002ca4:	f014 fb04 	bl	80172b0 <cos>
 8002ca8:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 8002cac:	ee28 6b07 	vmul.f64	d6, d8, d7
	               cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002cb0:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002cb4:	ee26 6b07 	vmul.f64	d6, d6, d7
	               f_J_inv_tmp_tmp * e_J_inv_tmp +
 8002cb8:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002cbc:	ee26 8b07 	vmul.f64	d8, d6, d7
	           59931.248 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	3308      	adds	r3, #8
 8002cc8:	ed93 6b00 	vldr	d6, [r3]
 8002ccc:	f107 030c 	add.w	r3, r7, #12
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3310      	adds	r3, #16
 8002cd4:	ed93 7b00 	vldr	d7, [r3]
 8002cd8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002cdc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002ce0:	f107 030c 	add.w	r3, r7, #12
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	3318      	adds	r3, #24
 8002ce8:	ed93 7b00 	vldr	d7, [r3]
 8002cec:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002cf0:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8002f88 <IVK+0x14a0>
 8002cf4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002cf8:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8002f90 <IVK+0x14a8>
 8002cfc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002d00:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8002f78 <IVK+0x1490>
 8002d04:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002d08:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8002f68 <IVK+0x1480>
 8002d0c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002d10:	eeb0 0b47 	vmov.f64	d0, d7
 8002d14:	f014 fb20 	bl	8017358 <sin>
 8002d18:	eeb0 7b40 	vmov.f64	d7, d0
	           59931.248 *
 8002d1c:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 8002f58 <IVK+0x1470>
 8002d20:	ee27 9b06 	vmul.f64	d9, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002d24:	f107 030c 	add.w	r3, r7, #12
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3308      	adds	r3, #8
 8002d2c:	ed93 6b00 	vldr	d6, [r3]
 8002d30:	f107 030c 	add.w	r3, r7, #12
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	3310      	adds	r3, #16
 8002d38:	ed93 7b00 	vldr	d7, [r3]
 8002d3c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002d40:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d44:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002f88 <IVK+0x14a0>
 8002d48:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002d4c:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002f90 <IVK+0x14a8>
 8002d50:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002d54:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8002f78 <IVK+0x1490>
 8002d58:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002d5c:	eeb0 0b47 	vmov.f64	d0, d7
 8002d60:	f014 fafa 	bl	8017358 <sin>
 8002d64:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 8002d68:	ee29 6b07 	vmul.f64	d6, d9, d7
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002d6c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002d70:	ee26 6b07 	vmul.f64	d6, d6, d7
	               f_J_inv_tmp_tmp * e_J_inv_tmp) +
 8002d74:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002d78:	ee26 7b07 	vmul.f64	d7, d6, d7
	               f_J_inv_tmp_tmp * e_J_inv_tmp +
 8002d7c:	ee38 8b07 	vadd.f64	d8, d8, d7
	          8760.0 *
	              cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002d80:	f107 030c 	add.w	r3, r7, #12
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	3308      	adds	r3, #8
 8002d88:	ed93 6b00 	vldr	d6, [r3]
 8002d8c:	f107 030c 	add.w	r3, r7, #12
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	3310      	adds	r3, #16
 8002d94:	ed93 7b00 	vldr	d7, [r3]
 8002d98:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002d9c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002da0:	f107 030c 	add.w	r3, r7, #12
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3318      	adds	r3, #24
 8002da8:	ed93 7b00 	vldr	d7, [r3]
 8002dac:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002db0:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8002f88 <IVK+0x14a0>
 8002db4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002db8:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8002f90 <IVK+0x14a8>
 8002dbc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002dc0:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8002f78 <IVK+0x1490>
 8002dc4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002dc8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8002f68 <IVK+0x1480>
 8002dcc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002dd0:	eeb0 0b47 	vmov.f64	d0, d7
 8002dd4:	f014 fa6c 	bl	80172b0 <cos>
 8002dd8:	eeb0 7b40 	vmov.f64	d7, d0
	          8760.0 *
 8002ddc:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8002f60 <IVK+0x1478>
 8002de0:	ee27 9b06 	vmul.f64	d9, d7, d6
	                   -0.73665) +
	                  1.52205) *
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) *
 8002de4:	f107 030c 	add.w	r3, r7, #12
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3308      	adds	r3, #8
 8002dec:	ed93 6b00 	vldr	d6, [r3]
 8002df0:	f107 030c 	add.w	r3, r7, #12
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3310      	adds	r3, #16
 8002df8:	ed93 7b00 	vldr	d7, [r3]
 8002dfc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e00:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8002f88 <IVK+0x14a0>
 8002e04:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002e08:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8002f90 <IVK+0x14a8>
 8002e0c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002e10:	eeb0 0b47 	vmov.f64	d0, d7
 8002e14:	f014 fa4c 	bl	80172b0 <cos>
 8002e18:	eeb0 7b40 	vmov.f64	d7, d0
	                  1.52205) *
 8002e1c:	ee29 9b07 	vmul.f64	d9, d9, d7
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) *
 8002e20:	f107 030c 	add.w	r3, r7, #12
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	ed93 7b00 	vldr	d7, [r3]
 8002e2a:	eeb0 0b47 	vmov.f64	d0, d7
 8002e2e:	f014 fa3f 	bl	80172b0 <cos>
 8002e32:	eeb0 7b40 	vmov.f64	d7, d0
 8002e36:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002e3a:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002e3e:	ee26 7b07 	vmul.f64	d7, d6, d7
	               f_J_inv_tmp_tmp * e_J_inv_tmp) +
 8002e42:	ee38 8b07 	vadd.f64	d8, d8, d7
	              e_J_inv_tmp) +
	         51432.588 *
	             cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002e46:	f107 030c 	add.w	r3, r7, #12
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	3308      	adds	r3, #8
 8002e4e:	ed93 6b00 	vldr	d6, [r3]
 8002e52:	f107 030c 	add.w	r3, r7, #12
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3310      	adds	r3, #16
 8002e5a:	ed93 7b00 	vldr	d7, [r3]
 8002e5e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002e62:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002e66:	f107 030c 	add.w	r3, r7, #12
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3318      	adds	r3, #24
 8002e6e:	ed93 7b00 	vldr	d7, [r3]
 8002e72:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e76:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8002f88 <IVK+0x14a0>
 8002e7a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002e7e:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8002f90 <IVK+0x14a8>
 8002e82:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002e86:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8002f78 <IVK+0x1490>
 8002e8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002e8e:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8002f68 <IVK+0x1480>
 8002e92:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002e96:	eeb0 0b47 	vmov.f64	d0, d7
 8002e9a:	f014 fa09 	bl	80172b0 <cos>
 8002e9e:	eeb0 7b40 	vmov.f64	d7, d0
	         51432.588 *
 8002ea2:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8002f50 <IVK+0x1468>
 8002ea6:	ee27 9b06 	vmul.f64	d9, d7, d6
	                  -0.73665) +
	                 1.52205) *
	             cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 8002eaa:	f107 030c 	add.w	r3, r7, #12
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3308      	adds	r3, #8
 8002eb2:	ed93 7b00 	vldr	d7, [r3]
 8002eb6:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8002f88 <IVK+0x14a0>
 8002eba:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ebe:	eeb0 0b47 	vmov.f64	d0, d7
 8002ec2:	f014 f9f5 	bl	80172b0 <cos>
 8002ec6:	eeb0 7b40 	vmov.f64	d7, d0
	                 1.52205) *
 8002eca:	ee29 6b07 	vmul.f64	d6, d9, d7
	             cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 8002ece:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002ed2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002ed6:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002eda:	ee26 7b07 	vmul.f64	d7, d6, d7
	              e_J_inv_tmp) +
 8002ede:	ee38 8b07 	vadd.f64	d8, d8, d7
	        8760.0 *
	            sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002ee2:	f107 030c 	add.w	r3, r7, #12
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	3308      	adds	r3, #8
 8002eea:	ed93 6b00 	vldr	d6, [r3]
 8002eee:	f107 030c 	add.w	r3, r7, #12
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3310      	adds	r3, #16
 8002ef6:	ed93 7b00 	vldr	d7, [r3]
 8002efa:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002efe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002f02:	f107 030c 	add.w	r3, r7, #12
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	3318      	adds	r3, #24
 8002f0a:	ed93 7b00 	vldr	d7, [r3]
 8002f0e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002f12:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8002f88 <IVK+0x14a0>
 8002f16:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002f1a:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8002f90 <IVK+0x14a8>
 8002f1e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002f22:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8002f78 <IVK+0x1490>
 8002f26:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002f2a:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8002f68 <IVK+0x1480>
 8002f2e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002f32:	eeb0 0b47 	vmov.f64	d0, d7
 8002f36:	f014 fa0f 	bl	8017358 <sin>
 8002f3a:	eeb0 7b40 	vmov.f64	d7, d0
	        8760.0 *
 8002f3e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8002f60 <IVK+0x1478>
 8002f42:	ee27 9b06 	vmul.f64	d9, d7, d6
	                 -0.73665) +
	                1.52205) *
	            sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) * e_J_inv_tmp) +
 8002f46:	f107 030c 	add.w	r3, r7, #12
 8002f4a:	e031      	b.n	8002fb0 <IVK+0x14c8>
 8002f4c:	f3af 8000 	nop.w
 8002f50:	d0e56042 	.word	0xd0e56042
 8002f54:	40e91d12 	.word	0x40e91d12
 8002f58:	ef9db22d 	.word	0xef9db22d
 8002f5c:	40ed4367 	.word	0x40ed4367
 8002f60:	00000000 	.word	0x00000000
 8002f64:	40c11c00 	.word	0x40c11c00
 8002f68:	19ce075f 	.word	0x19ce075f
 8002f6c:	3ff85a51 	.word	0x3ff85a51
 8002f70:	d0e56042 	.word	0xd0e56042
 8002f74:	40e91d12 	.word	0x40e91d12
 8002f78:	05532618 	.word	0x05532618
 8002f7c:	3fe792a3 	.word	0x3fe792a3
 8002f80:	d916872b 	.word	0xd916872b
 8002f84:	4079a7ce 	.word	0x4079a7ce
 8002f88:	45a1cac1 	.word	0x45a1cac1
 8002f8c:	3ffaf3b6 	.word	0x3ffaf3b6
 8002f90:	39581062 	.word	0x39581062
 8002f94:	3fecc8b4 	.word	0x3fecc8b4
 8002f98:	00000000 	.word	0x00000000
 8002f9c:	404e0000 	.word	0x404e0000
 8002fa0:	b020c49c 	.word	0xb020c49c
 8002fa4:	40760472 	.word	0x40760472
 8002fa8:	00000000 	.word	0x00000000
 8002fac:	404b8000 	.word	0x404b8000
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	3308      	adds	r3, #8
 8002fb4:	ed93 6b00 	vldr	d6, [r3]
 8002fb8:	f107 030c 	add.w	r3, r7, #12
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	3310      	adds	r3, #16
 8002fc0:	ed93 7b00 	vldr	d7, [r3]
 8002fc4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002fc8:	ed1f 6b11 	vldr	d6, [pc, #-68]	; 8002f88 <IVK+0x14a0>
 8002fcc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002fd0:	ed1f 6b11 	vldr	d6, [pc, #-68]	; 8002f90 <IVK+0x14a8>
 8002fd4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002fd8:	eeb0 0b47 	vmov.f64	d0, d7
 8002fdc:	f014 f9bc 	bl	8017358 <sin>
 8002fe0:	eeb0 7b40 	vmov.f64	d7, d0
	                1.52205) *
 8002fe4:	ee29 9b07 	vmul.f64	d9, d9, d7
	            sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) * e_J_inv_tmp) +
 8002fe8:	f107 030c 	add.w	r3, r7, #12
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	ed93 7b00 	vldr	d7, [r3]
 8002ff2:	eeb0 0b47 	vmov.f64	d0, d7
 8002ff6:	f014 f95b 	bl	80172b0 <cos>
 8002ffa:	eeb0 7b40 	vmov.f64	d7, d0
 8002ffe:	ee29 6b07 	vmul.f64	d6, d9, d7
 8003002:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8003006:	ee26 7b07 	vmul.f64	d7, d6, d7
	             cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 800300a:	ee38 8b07 	vadd.f64	d8, d8, d7
	       51432.588 *
	           sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800300e:	f107 030c 	add.w	r3, r7, #12
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3308      	adds	r3, #8
 8003016:	ed93 6b00 	vldr	d6, [r3]
 800301a:	f107 030c 	add.w	r3, r7, #12
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	3310      	adds	r3, #16
 8003022:	ed93 7b00 	vldr	d7, [r3]
 8003026:	ee37 7b07 	vadd.f64	d7, d7, d7
 800302a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800302e:	f107 030c 	add.w	r3, r7, #12
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3318      	adds	r3, #24
 8003036:	ed93 7b00 	vldr	d7, [r3]
 800303a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800303e:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 8002f88 <IVK+0x14a0>
 8003042:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003046:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 8002f90 <IVK+0x14a8>
 800304a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800304e:	ed1f 6b36 	vldr	d6, [pc, #-216]	; 8002f78 <IVK+0x1490>
 8003052:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003056:	ed1f 6b3c 	vldr	d6, [pc, #-240]	; 8002f68 <IVK+0x1480>
 800305a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800305e:	eeb0 0b47 	vmov.f64	d0, d7
 8003062:	f014 f979 	bl	8017358 <sin>
 8003066:	eeb0 7b40 	vmov.f64	d7, d0
	       51432.588 *
 800306a:	ed1f 6b3f 	vldr	d6, [pc, #-252]	; 8002f70 <IVK+0x1488>
 800306e:	ee27 9b06 	vmul.f64	d9, d7, d6
	                -0.73665) +
	               1.52205) *
	           sin(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) /
 8003072:	f107 030c 	add.w	r3, r7, #12
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3308      	adds	r3, #8
 800307a:	ed93 7b00 	vldr	d7, [r3]
 800307e:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 8002f88 <IVK+0x14a0>
 8003082:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003086:	eeb0 0b47 	vmov.f64	d0, d7
 800308a:	f014 f965 	bl	8017358 <sin>
 800308e:	eeb0 7b40 	vmov.f64	d7, d0
	               1.52205) *
 8003092:	ee29 6b07 	vmul.f64	d6, d9, d7
	           sin(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) /
 8003096:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800309a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800309e:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 80030a2:	ee26 7b07 	vmul.f64	d7, d6, d7
	            sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) * e_J_inv_tmp) +
 80030a6:	ee38 7b07 	vadd.f64	d7, d8, d7
	      55.0 *
 80030aa:	ed1f 6b41 	vldr	d6, [pc, #-260]	; 8002fa8 <IVK+0x14c0>
 80030ae:	ee27 5b06 	vmul.f64	d5, d7, d6
	           sin(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) /
 80030b2:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 80030b6:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[7] =
 80030ba:	f107 0310 	add.w	r3, r7, #16
 80030be:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	      d12;
	  dv[12] =
	      55.0 *
	      ((60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) *
 80030c2:	f107 030c 	add.w	r3, r7, #12
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3308      	adds	r3, #8
 80030ca:	ed93 6b00 	vldr	d6, [r3]
 80030ce:	f107 030c 	add.w	r3, r7, #12
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3310      	adds	r3, #16
 80030d6:	ed93 7b00 	vldr	d7, [r3]
 80030da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80030de:	ed1f 6b56 	vldr	d6, [pc, #-344]	; 8002f88 <IVK+0x14a0>
 80030e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80030e6:	ed1f 6b56 	vldr	d6, [pc, #-344]	; 8002f90 <IVK+0x14a8>
 80030ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80030ee:	eeb0 0b47 	vmov.f64	d0, d7
 80030f2:	f014 f8dd 	bl	80172b0 <cos>
 80030f6:	eeb0 7b40 	vmov.f64	d7, d0
 80030fa:	ed1f 6b59 	vldr	d6, [pc, #-356]	; 8002f98 <IVK+0x14b0>
 80030fe:	ee27 8b06 	vmul.f64	d8, d7, d6
 8003102:	f107 030c 	add.w	r3, r7, #12
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	ed93 7b00 	vldr	d7, [r3]
 800310c:	eeb0 0b47 	vmov.f64	d0, d7
 8003110:	f014 f8ce 	bl	80172b0 <cos>
 8003114:	eeb0 7b40 	vmov.f64	d7, d0
 8003118:	ee28 6b07 	vmul.f64	d6, d8, d7
 800311c:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8003120:	ee26 8b07 	vmul.f64	d8, d6, d7
	            e_J_inv_tmp +
	        352.278 * cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 8003124:	f107 030c 	add.w	r3, r7, #12
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3308      	adds	r3, #8
 800312c:	ed93 7b00 	vldr	d7, [r3]
 8003130:	ed1f 6b6b 	vldr	d6, [pc, #-428]	; 8002f88 <IVK+0x14a0>
 8003134:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003138:	eeb0 0b47 	vmov.f64	d0, d7
 800313c:	f014 f8b8 	bl	80172b0 <cos>
 8003140:	eeb0 7b40 	vmov.f64	d7, d0
 8003144:	ed1f 6b6a 	vldr	d6, [pc, #-424]	; 8002fa0 <IVK+0x14b8>
 8003148:	ee27 6b06 	vmul.f64	d6, d7, d6
 800314c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003150:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003154:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8003158:	ee26 7b07 	vmul.f64	d7, d6, d7
	            e_J_inv_tmp +
 800315c:	ee38 8b07 	vadd.f64	d8, d8, d7
	       410.488 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8003160:	f107 030c 	add.w	r3, r7, #12
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	3308      	adds	r3, #8
 8003168:	ed93 6b00 	vldr	d6, [r3]
 800316c:	f107 030c 	add.w	r3, r7, #12
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	3310      	adds	r3, #16
 8003174:	ed93 7b00 	vldr	d7, [r3]
 8003178:	ee37 7b07 	vadd.f64	d7, d7, d7
 800317c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003180:	ed1f 6b7f 	vldr	d6, [pc, #-508]	; 8002f88 <IVK+0x14a0>
 8003184:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003188:	ed1f 6b7f 	vldr	d6, [pc, #-508]	; 8002f90 <IVK+0x14a8>
 800318c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003190:	ed1f 6b87 	vldr	d6, [pc, #-540]	; 8002f78 <IVK+0x1490>
 8003194:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003198:	eeb0 0b47 	vmov.f64	d0, d7
 800319c:	f014 f888 	bl	80172b0 <cos>
 80031a0:	eeb0 7b40 	vmov.f64	d7, d0
 80031a4:	ed1f 6b8a 	vldr	d6, [pc, #-552]	; 8002f80 <IVK+0x1498>
 80031a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80031ac:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80031b0:	ee26 6b07 	vmul.f64	d6, d6, d7
	           f_J_inv_tmp_tmp * e_J_inv_tmp) /
 80031b4:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 80031b8:	ee26 7b07 	vmul.f64	d7, d6, d7
	        352.278 * cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 80031bc:	ee38 7b07 	vadd.f64	d7, d8, d7
	      55.0 *
 80031c0:	ed1f 6b87 	vldr	d6, [pc, #-540]	; 8002fa8 <IVK+0x14c0>
 80031c4:	ee27 5b06 	vmul.f64	d5, d7, d6
	           f_J_inv_tmp_tmp * e_J_inv_tmp) /
 80031c8:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 80031cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[12] =
 80031d0:	f107 0310 	add.w	r3, r7, #16
 80031d4:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
	      d12;
	  dv[17] =
	      55.0 *
	      ((60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp *
 80031d8:	f107 030c 	add.w	r3, r7, #12
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	3308      	adds	r3, #8
 80031e0:	ed93 6b00 	vldr	d6, [r3]
 80031e4:	f107 030c 	add.w	r3, r7, #12
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	3310      	adds	r3, #16
 80031ec:	ed93 7b00 	vldr	d7, [r3]
 80031f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80031f4:	ed1f 6b9c 	vldr	d6, [pc, #-624]	; 8002f88 <IVK+0x14a0>
 80031f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80031fc:	ed1f 6b9c 	vldr	d6, [pc, #-624]	; 8002f90 <IVK+0x14a8>
 8003200:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003204:	eeb0 0b47 	vmov.f64	d0, d7
 8003208:	f014 f852 	bl	80172b0 <cos>
 800320c:	eeb0 7b40 	vmov.f64	d7, d0
 8003210:	ed1f 6b9f 	vldr	d6, [pc, #-636]	; 8002f98 <IVK+0x14b0>
 8003214:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003218:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 800321c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003220:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003224:	ee26 8b07 	vmul.f64	d8, d6, d7
	            d_J_inv_tmp_tmp +
	        352.278 * cos(q[1] + 1.6845) * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 8003228:	f107 030c 	add.w	r3, r7, #12
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	3308      	adds	r3, #8
 8003230:	ed93 7b00 	vldr	d7, [r3]
 8003234:	ed1f 6bac 	vldr	d6, [pc, #-688]	; 8002f88 <IVK+0x14a0>
 8003238:	ee37 7b06 	vadd.f64	d7, d7, d6
 800323c:	eeb0 0b47 	vmov.f64	d0, d7
 8003240:	f014 f836 	bl	80172b0 <cos>
 8003244:	eeb0 7b40 	vmov.f64	d7, d0
 8003248:	ed1f 6bab 	vldr	d6, [pc, #-684]	; 8002fa0 <IVK+0x14b8>
 800324c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003250:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8003254:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003258:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800325c:	ee26 7b07 	vmul.f64	d7, d6, d7
	            d_J_inv_tmp_tmp +
 8003260:	ee38 8b07 	vadd.f64	d8, d8, d7
	       410.488 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8003264:	f107 030c 	add.w	r3, r7, #12
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3308      	adds	r3, #8
 800326c:	ed93 6b00 	vldr	d6, [r3]
 8003270:	f107 030c 	add.w	r3, r7, #12
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	3310      	adds	r3, #16
 8003278:	ed93 7b00 	vldr	d7, [r3]
 800327c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003280:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003284:	ed1f 6bc0 	vldr	d6, [pc, #-768]	; 8002f88 <IVK+0x14a0>
 8003288:	ee37 7b06 	vadd.f64	d7, d7, d6
 800328c:	ed1f 6bc0 	vldr	d6, [pc, #-768]	; 8002f90 <IVK+0x14a8>
 8003290:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003294:	ed1f 6bc8 	vldr	d6, [pc, #-800]	; 8002f78 <IVK+0x1490>
 8003298:	ee37 7b46 	vsub.f64	d7, d7, d6
 800329c:	eeb0 0b47 	vmov.f64	d0, d7
 80032a0:	f014 f806 	bl	80172b0 <cos>
 80032a4:	eeb0 7b40 	vmov.f64	d7, d0
 80032a8:	ed1f 6bcb 	vldr	d6, [pc, #-812]	; 8002f80 <IVK+0x1498>
 80032ac:	ee27 6b06 	vmul.f64	d6, d7, d6
 80032b0:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 80032b4:	ee26 6b07 	vmul.f64	d6, d6, d7
	           e_J_inv_tmp * d_J_inv_tmp_tmp) /
 80032b8:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80032bc:	ee26 7b07 	vmul.f64	d7, d6, d7
	        352.278 * cos(q[1] + 1.6845) * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 80032c0:	ee38 7b07 	vadd.f64	d7, d8, d7
	      55.0 *
 80032c4:	ed1f 6bc8 	vldr	d6, [pc, #-800]	; 8002fa8 <IVK+0x14c0>
 80032c8:	ee27 5b06 	vmul.f64	d5, d7, d6
	           e_J_inv_tmp * d_J_inv_tmp_tmp) /
 80032cc:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 80032d0:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[17] =
 80032d4:	f107 0310 	add.w	r3, r7, #16
 80032d8:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
	      d12;
	  dv[22] = 55.0 *
	           ((410.488 * J_inv_tmp_tmp * e_J_inv_tmp +
 80032dc:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80032e0:	ed1f 6bd9 	vldr	d6, [pc, #-868]	; 8002f80 <IVK+0x1498>
 80032e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80032e8:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 80032ec:	ee26 8b07 	vmul.f64	d8, d6, d7
	             60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp) +
 80032f0:	f107 030c 	add.w	r3, r7, #12
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	3308      	adds	r3, #8
 80032f8:	ed93 6b00 	vldr	d6, [r3]
 80032fc:	f107 030c 	add.w	r3, r7, #12
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	3310      	adds	r3, #16
 8003304:	ed93 7b00 	vldr	d7, [r3]
 8003308:	ee36 7b07 	vadd.f64	d7, d6, d7
 800330c:	ed1f 6be2 	vldr	d6, [pc, #-904]	; 8002f88 <IVK+0x14a0>
 8003310:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003314:	ed1f 6be2 	vldr	d6, [pc, #-904]	; 8002f90 <IVK+0x14a8>
 8003318:	ee37 7b46 	vsub.f64	d7, d7, d6
 800331c:	eeb0 0b47 	vmov.f64	d0, d7
 8003320:	f014 f81a 	bl	8017358 <sin>
 8003324:	eeb0 7b40 	vmov.f64	d7, d0
 8003328:	ed1f 6be5 	vldr	d6, [pc, #-916]	; 8002f98 <IVK+0x14b0>
 800332c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003330:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8003334:	ee26 7b07 	vmul.f64	d7, d6, d7
	           ((410.488 * J_inv_tmp_tmp * e_J_inv_tmp +
 8003338:	ee38 6b07 	vadd.f64	d6, d8, d7
	            352.278 * e_J_inv_tmp_tmp * e_J_inv_tmp) /
 800333c:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8003340:	ed1f 5be9 	vldr	d5, [pc, #-932]	; 8002fa0 <IVK+0x14b8>
 8003344:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003348:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 800334c:	ee25 7b07 	vmul.f64	d7, d5, d7
	             60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp) +
 8003350:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[22] = 55.0 *
 8003354:	ed1f 6bec 	vldr	d6, [pc, #-944]	; 8002fa8 <IVK+0x14c0>
 8003358:	ee27 5b06 	vmul.f64	d5, d7, d6
	            352.278 * e_J_inv_tmp_tmp * e_J_inv_tmp) /
 800335c:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 8003360:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[22] = 55.0 *
 8003364:	f107 0310 	add.w	r3, r7, #16
 8003368:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
	           d12;
	  d9 = 21136.68 *
	       sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 800336c:	f107 030c 	add.w	r3, r7, #12
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	3308      	adds	r3, #8
 8003374:	ed93 6b00 	vldr	d6, [r3]
 8003378:	f107 030c 	add.w	r3, r7, #12
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	3310      	adds	r3, #16
 8003380:	ed93 7b00 	vldr	d7, [r3]
 8003384:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003388:	ee36 6b07 	vadd.f64	d6, d6, d7
 800338c:	f107 030c 	add.w	r3, r7, #12
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3318      	adds	r3, #24
 8003394:	ed93 7b00 	vldr	d7, [r3]
 8003398:	ee36 7b07 	vadd.f64	d7, d6, d7
 800339c:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 8003778 <IVK+0x1c90>
 80033a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80033a4:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 8003780 <IVK+0x1c98>
 80033a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80033ac:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 8003788 <IVK+0x1ca0>
 80033b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80033b4:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 8003790 <IVK+0x1ca8>
 80033b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80033bc:	eeb0 0b47 	vmov.f64	d0, d7
 80033c0:	f013 ffca 	bl	8017358 <sin>
 80033c4:	eeb0 7b40 	vmov.f64	d7, d0
	  d9 = 21136.68 *
 80033c8:	ed9f 6bf3 	vldr	d6, [pc, #972]	; 8003798 <IVK+0x1cb0>
 80033cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80033d0:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
	           1.52205);
	  d10 = d9 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp_tmp;
 80033d4:	f107 030c 	add.w	r3, r7, #12
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3308      	adds	r3, #8
 80033dc:	ed93 6b00 	vldr	d6, [r3]
 80033e0:	f107 030c 	add.w	r3, r7, #12
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3310      	adds	r3, #16
 80033e8:	ed93 7b00 	vldr	d7, [r3]
 80033ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80033f0:	ed9f 6be1 	vldr	d6, [pc, #900]	; 8003778 <IVK+0x1c90>
 80033f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80033f8:	ed9f 6be1 	vldr	d6, [pc, #900]	; 8003780 <IVK+0x1c98>
 80033fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003400:	eeb0 0b47 	vmov.f64	d0, d7
 8003404:	f013 ff54 	bl	80172b0 <cos>
 8003408:	eeb0 6b40 	vmov.f64	d6, d0
 800340c:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8003410:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003414:	ed97 6b66 	vldr	d6, [r7, #408]	; 0x198
 8003418:	ee26 7b07 	vmul.f64	d7, d6, d7
 800341c:	ed87 7b4e 	vstr	d7, [r7, #312]	; 0x138
	  d9 = d9 * d2 * b_J_inv_tmp_tmp;
 8003420:	ed97 6b50 	vldr	d6, [r7, #320]	; 0x140
 8003424:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8003428:	ee26 7b07 	vmul.f64	d7, d6, d7
 800342c:	ed97 6b74 	vldr	d6, [r7, #464]	; 0x1d0
 8003430:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003434:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
	  d12 = 24629.28 *
	        sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 8003438:	f107 030c 	add.w	r3, r7, #12
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3308      	adds	r3, #8
 8003440:	ed93 6b00 	vldr	d6, [r3]
 8003444:	f107 030c 	add.w	r3, r7, #12
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	3310      	adds	r3, #16
 800344c:	ed93 7b00 	vldr	d7, [r3]
 8003450:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003454:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003458:	f107 030c 	add.w	r3, r7, #12
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3318      	adds	r3, #24
 8003460:	ed93 7b00 	vldr	d7, [r3]
 8003464:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003468:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8003778 <IVK+0x1c90>
 800346c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003470:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8003780 <IVK+0x1c98>
 8003474:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003478:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8003788 <IVK+0x1ca0>
 800347c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003480:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8003790 <IVK+0x1ca8>
 8003484:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003488:	eeb0 0b47 	vmov.f64	d0, d7
 800348c:	f013 ff64 	bl	8017358 <sin>
 8003490:	eeb0 7b40 	vmov.f64	d7, d0
	  d12 = 24629.28 *
 8003494:	ed9f 6bdc 	vldr	d6, [pc, #880]	; 8003808 <IVK+0x1d20>
 8003498:	ee27 7b06 	vmul.f64	d7, d7, d6
 800349c:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
	            1.52205);
	  d2 *= d12 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665);
 80034a0:	f107 030c 	add.w	r3, r7, #12
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	3308      	adds	r3, #8
 80034a8:	ed93 6b00 	vldr	d6, [r3]
 80034ac:	f107 030c 	add.w	r3, r7, #12
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	3310      	adds	r3, #16
 80034b4:	ed93 7b00 	vldr	d7, [r3]
 80034b8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80034bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80034c0:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8003778 <IVK+0x1c90>
 80034c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80034c8:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8003780 <IVK+0x1c98>
 80034cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80034d0:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8003788 <IVK+0x1ca0>
 80034d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80034d8:	eeb0 0b47 	vmov.f64	d0, d7
 80034dc:	f013 fee8 	bl	80172b0 <cos>
 80034e0:	eeb0 6b40 	vmov.f64	d6, d0
 80034e4:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 80034e8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80034ec:	ed97 6b5e 	vldr	d6, [r7, #376]	; 0x178
 80034f0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80034f4:	ed87 7b5e 	vstr	d7, [r7, #376]	; 0x178
	  d12 = d12 * J_inv_tmp_tmp * cos(((q[1] + q[2]) + 1.6845) + -0.8995);
 80034f8:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 80034fc:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8003500:	ee26 8b07 	vmul.f64	d8, d6, d7
 8003504:	f107 030c 	add.w	r3, r7, #12
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3308      	adds	r3, #8
 800350c:	ed93 6b00 	vldr	d6, [r3]
 8003510:	f107 030c 	add.w	r3, r7, #12
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3310      	adds	r3, #16
 8003518:	ed93 7b00 	vldr	d7, [r3]
 800351c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003520:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8003778 <IVK+0x1c90>
 8003524:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003528:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8003780 <IVK+0x1c98>
 800352c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003530:	eeb0 0b47 	vmov.f64	d0, d7
 8003534:	f013 febc 	bl	80172b0 <cos>
 8003538:	eeb0 7b40 	vmov.f64	d7, d0
 800353c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8003540:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
	  e_J_inv_tmp =
	      289211.783328 *
	      sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 8003544:	f107 030c 	add.w	r3, r7, #12
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3308      	adds	r3, #8
 800354c:	ed93 6b00 	vldr	d6, [r3]
 8003550:	f107 030c 	add.w	r3, r7, #12
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3310      	adds	r3, #16
 8003558:	ed93 7b00 	vldr	d7, [r3]
 800355c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003560:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003564:	f107 030c 	add.w	r3, r7, #12
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3318      	adds	r3, #24
 800356c:	ed93 7b00 	vldr	d7, [r3]
 8003570:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003574:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8003778 <IVK+0x1c90>
 8003578:	ee37 7b06 	vadd.f64	d7, d7, d6
 800357c:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8003780 <IVK+0x1c98>
 8003580:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003584:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8003788 <IVK+0x1ca0>
 8003588:	ee37 7b46 	vsub.f64	d7, d7, d6
 800358c:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8003790 <IVK+0x1ca8>
 8003590:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003594:	eeb0 0b47 	vmov.f64	d0, d7
 8003598:	f013 fede 	bl	8017358 <sin>
 800359c:	eeb0 7b40 	vmov.f64	d7, d0
	  e_J_inv_tmp =
 80035a0:	ed9f 6b9b 	vldr	d6, [pc, #620]	; 8003810 <IVK+0x1d28>
 80035a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80035a8:	ed87 7b62 	vstr	d7, [r7, #392]	; 0x188
	          1.52205);
	  d13 = e_J_inv_tmp *
	        cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80035ac:	f107 030c 	add.w	r3, r7, #12
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	3308      	adds	r3, #8
 80035b4:	ed93 6b00 	vldr	d6, [r3]
 80035b8:	f107 030c 	add.w	r3, r7, #12
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3310      	adds	r3, #16
 80035c0:	ed93 7b00 	vldr	d7, [r3]
 80035c4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80035c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80035cc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8003778 <IVK+0x1c90>
 80035d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80035d4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8003780 <IVK+0x1c98>
 80035d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80035dc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8003788 <IVK+0x1ca0>
 80035e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80035e4:	eeb0 0b47 	vmov.f64	d0, d7
 80035e8:	f013 fe62 	bl	80172b0 <cos>
 80035ec:	eeb0 6b40 	vmov.f64	d6, d0
	  d13 = e_J_inv_tmp *
 80035f0:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 80035f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80035f8:	ed97 6b66 	vldr	d6, [r7, #408]	; 0x198
 80035fc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003600:	ed87 7b48 	vstr	d7, [r7, #288]	; 0x120
	        e_J_inv_tmp_tmp;
	  e_J_inv_tmp = e_J_inv_tmp * J_inv_tmp_tmp * b_J_inv_tmp_tmp;
 8003604:	ed97 6b62 	vldr	d6, [r7, #392]	; 0x188
 8003608:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 800360c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003610:	ed97 6b74 	vldr	d6, [r7, #464]	; 0x1d0
 8003614:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003618:	ed87 7b62 	vstr	d7, [r7, #392]	; 0x188
	  d14 = c_J_inv_tmp_tmp * c_J_inv_tmp_tmp;
 800361c:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8003620:	ee27 7b07 	vmul.f64	d7, d7, d7
 8003624:	ed87 7b46 	vstr	d7, [r7, #280]	; 0x118
	  d15 = 87600.0 * d14 * d_J_inv_tmp;
 8003628:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 800362c:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 80037a0 <IVK+0x1cb8>
 8003630:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003634:	ed97 6b68 	vldr	d6, [r7, #416]	; 0x1a0
 8003638:	ee26 7b07 	vmul.f64	d7, d6, d7
 800363c:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
	  d14 = 1.02865176E+6 * d14 * e_J_inv_tmp_tmp;
 8003640:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 8003644:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 80037c0 <IVK+0x1cd8>
 8003648:	ee27 7b06 	vmul.f64	d7, d7, d6
 800364c:	ed97 6b66 	vldr	d6, [r7, #408]	; 0x198
 8003650:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003654:	ed87 7b46 	vstr	d7, [r7, #280]	; 0x118
	  d16 = d15 * d_J_inv_tmp_tmp;
 8003658:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 800365c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003660:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003664:	ed87 7b42 	vstr	d7, [r7, #264]	; 0x108
	  d17 = d14 * d_J_inv_tmp_tmp;
 8003668:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 800366c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003670:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003674:	ed87 7b40 	vstr	d7, [r7, #256]	; 0x100
	  dv[3] =
	      4.0 *
	      (((((((((((((((221663.52 * J_inv_tmp * d_J_inv_tmp * f_J_inv_tmp_tmp -
 8003678:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 800367c:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80037a8 <IVK+0x1cc0>
 8003680:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003684:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8003688:	ee26 6b07 	vmul.f64	d6, d6, d7
 800368c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003690:	ee26 6b07 	vmul.f64	d6, d6, d7
	                     221663.52 * J_inv_tmp_tmp * c_J_inv_tmp *
 8003694:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8003698:	ed9f 5b43 	vldr	d5, [pc, #268]	; 80037a8 <IVK+0x1cc0>
 800369c:	ee27 5b05 	vmul.f64	d5, d7, d5
 80036a0:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80036a4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80036a8:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80036ac:	ee25 7b07 	vmul.f64	d7, d5, d7
	      (((((((((((((((221663.52 * J_inv_tmp * d_J_inv_tmp * f_J_inv_tmp_tmp -
 80036b0:	ee36 6b47 	vsub.f64	d6, d6, d7
	                         f_J_inv_tmp_tmp) +
	                    2.6029060499520004E+6 * J_inv_tmp * e_J_inv_tmp_tmp *
 80036b4:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 80036b8:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 80037b0 <IVK+0x1cc8>
 80036bc:	ee27 5b05 	vmul.f64	d5, d7, d5
 80036c0:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 80036c4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80036c8:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80036cc:	ee25 7b07 	vmul.f64	d7, d5, d7
	                         f_J_inv_tmp_tmp) +
 80036d0:	ee36 6b07 	vadd.f64	d6, d6, d7
	                        f_J_inv_tmp_tmp) -
	                   2.6029060499520004E+6 * J_inv_tmp_tmp * b_J_inv_tmp_tmp *
 80036d4:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80036d8:	ed9f 5b35 	vldr	d5, [pc, #212]	; 80037b0 <IVK+0x1cc8>
 80036dc:	ee27 5b05 	vmul.f64	d5, d7, d5
 80036e0:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 80036e4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80036e8:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80036ec:	ee25 7b07 	vmul.f64	d7, d5, d7
	                        f_J_inv_tmp_tmp) -
 80036f0:	ee36 6b47 	vsub.f64	d6, d6, d7
	                       f_J_inv_tmp_tmp) +
	                  190230.12000000002 * c_J_inv_tmp * e_J_inv_tmp_tmp *
 80036f4:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80036f8:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 80037b8 <IVK+0x1cd0>
 80036fc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003700:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8003704:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003708:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800370c:	ee25 7b07 	vmul.f64	d7, d5, d7
	                       f_J_inv_tmp_tmp) +
 8003710:	ee36 6b07 	vadd.f64	d6, d6, d7
	                      f_J_inv_tmp_tmp) -
	                 190230.12000000002 * d_J_inv_tmp * b_J_inv_tmp_tmp *
 8003714:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8003718:	ed9f 5b27 	vldr	d5, [pc, #156]	; 80037b8 <IVK+0x1cd0>
 800371c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003720:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8003724:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003728:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800372c:	ee25 7b07 	vmul.f64	d7, d5, d7
	                      f_J_inv_tmp_tmp) -
 8003730:	ee36 6b47 	vsub.f64	d6, d6, d7
	                     f_J_inv_tmp_tmp) +
 8003734:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 8003738:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d16) +
 800373c:	ed97 7b40 	vldr	d7, [r7, #256]	; 0x100
 8003740:	ee36 6b07 	vadd.f64	d6, d6, d7
	               d17) +
	              87600.0 * b_J_inv_tmp * c_J_inv_tmp_tmp * c_J_inv_tmp *
 8003744:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8003748:	ed9f 5b15 	vldr	d5, [pc, #84]	; 80037a0 <IVK+0x1cb8>
 800374c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003750:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8003754:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003758:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 800375c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003760:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003764:	ee25 7b07 	vmul.f64	d7, d5, d7
	               d17) +
 8003768:	ee36 6b07 	vadd.f64	d6, d6, d7
	                  d_J_inv_tmp_tmp) +
	             1.02865176E+6 * b_J_inv_tmp * c_J_inv_tmp_tmp * b_J_inv_tmp_tmp *
 800376c:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8003770:	e052      	b.n	8003818 <IVK+0x1d30>
 8003772:	bf00      	nop
 8003774:	f3af 8000 	nop.w
 8003778:	45a1cac1 	.word	0x45a1cac1
 800377c:	3ffaf3b6 	.word	0x3ffaf3b6
 8003780:	39581062 	.word	0x39581062
 8003784:	3fecc8b4 	.word	0x3fecc8b4
 8003788:	05532618 	.word	0x05532618
 800378c:	3fe792a3 	.word	0x3fe792a3
 8003790:	19ce075f 	.word	0x19ce075f
 8003794:	3ff85a51 	.word	0x3ff85a51
 8003798:	851eb852 	.word	0x851eb852
 800379c:	40d4a42b 	.word	0x40d4a42b
 80037a0:	00000000 	.word	0x00000000
 80037a4:	40f56300 	.word	0x40f56300
 80037a8:	28f5c28f 	.word	0x28f5c28f
 80037ac:	410b0efc 	.word	0x410b0efc
 80037b0:	0664d3c0 	.word	0x0664d3c0
 80037b4:	4143dbcd 	.word	0x4143dbcd
 80037b8:	f5c28f5d 	.word	0xf5c28f5d
 80037bc:	410738b0 	.word	0x410738b0
 80037c0:	851eb852 	.word	0x851eb852
 80037c4:	412f6457 	.word	0x412f6457
 80037c8:	66666666 	.word	0x66666666
 80037cc:	410e10a6 	.word	0x410e10a6
 80037d0:	eaa8eb47 	.word	0xeaa8eb47
 80037d4:	414610aa 	.word	0x414610aa
 80037d8:	66666667 	.word	0x66666667
 80037dc:	4109cd36 	.word	0x4109cd36
 80037e0:	851eb852 	.word	0x851eb852
 80037e4:	40d4a42b 	.word	0x40d4a42b
 80037e8:	45a1cac1 	.word	0x45a1cac1
 80037ec:	3ffaf3b6 	.word	0x3ffaf3b6
 80037f0:	39581062 	.word	0x39581062
 80037f4:	3fecc8b4 	.word	0x3fecc8b4
 80037f8:	19ce075f 	.word	0x19ce075f
 80037fc:	3ff85a51 	.word	0x3ff85a51
 8003800:	05532618 	.word	0x05532618
 8003804:	3fe792a3 	.word	0x3fe792a3
 8003808:	eb851eb8 	.word	0xeb851eb8
 800380c:	40d80d51 	.word	0x40d80d51
 8003810:	2220bc38 	.word	0x2220bc38
 8003814:	4111a6ef 	.word	0x4111a6ef
 8003818:	ed1f 5b17 	vldr	d5, [pc, #-92]	; 80037c0 <IVK+0x1cd8>
 800381c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003820:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8003824:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003828:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 800382c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003830:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003834:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  d_J_inv_tmp_tmp) +
 8003838:	ee36 6b07 	vadd.f64	d6, d6, d7
	                 d_J_inv_tmp_tmp) +
	            246292.8 * c_J_inv_tmp_tmp * J_inv_tmp * d_J_inv_tmp *
 800383c:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8003840:	ed1f 5b1f 	vldr	d5, [pc, #-124]	; 80037c8 <IVK+0x1ce0>
 8003844:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003848:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 800384c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003850:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8003854:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003858:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800385c:	ee25 7b07 	vmul.f64	d7, d5, d7
	                 d_J_inv_tmp_tmp) +
 8003860:	ee36 8b07 	vadd.f64	d8, d6, d7
	                d_J_inv_tmp_tmp) -
	           246292.8 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8003864:	f107 030c 	add.w	r3, r7, #12
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	3308      	adds	r3, #8
 800386c:	ed93 6b00 	vldr	d6, [r3]
 8003870:	f107 030c 	add.w	r3, r7, #12
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	3310      	adds	r3, #16
 8003878:	ed93 7b00 	vldr	d7, [r3]
 800387c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003880:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003884:	f107 030c 	add.w	r3, r7, #12
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3318      	adds	r3, #24
 800388c:	ed93 7b00 	vldr	d7, [r3]
 8003890:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003894:	ed1f 6b2c 	vldr	d6, [pc, #-176]	; 80037e8 <IVK+0x1d00>
 8003898:	ee37 7b06 	vadd.f64	d7, d7, d6
 800389c:	ed1f 6b2c 	vldr	d6, [pc, #-176]	; 80037f0 <IVK+0x1d08>
 80038a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80038a4:	ed1f 6b2a 	vldr	d6, [pc, #-168]	; 8003800 <IVK+0x1d18>
 80038a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80038ac:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 80037f8 <IVK+0x1d10>
 80038b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80038b4:	eeb0 0b47 	vmov.f64	d0, d7
 80038b8:	f013 fd4e 	bl	8017358 <sin>
 80038bc:	eeb0 7b40 	vmov.f64	d7, d0
	           246292.8 *
 80038c0:	ed1f 6b3f 	vldr	d6, [pc, #-252]	; 80037c8 <IVK+0x1ce0>
 80038c4:	ee27 6b06 	vmul.f64	d6, d7, d6
	                    -0.73665) +
	                   1.52205) *
 80038c8:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80038cc:	ee26 6b07 	vmul.f64	d6, d6, d7
	               J_inv_tmp_tmp * c_J_inv_tmp * d_J_inv_tmp_tmp) +
 80038d0:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80038d4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80038d8:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80038dc:	ee26 7b07 	vmul.f64	d7, d6, d7
	                d_J_inv_tmp_tmp) -
 80038e0:	ee38 6b47 	vsub.f64	d6, d8, d7
	          2.8921178332800004E+6 * c_J_inv_tmp_tmp * J_inv_tmp *
 80038e4:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 80038e8:	ed1f 5b47 	vldr	d5, [pc, #-284]	; 80037d0 <IVK+0x1ce8>
 80038ec:	ee27 5b05 	vmul.f64	d5, d7, d5
 80038f0:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 80038f4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80038f8:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 80038fc:	ee25 5b07 	vmul.f64	d5, d5, d7
	              e_J_inv_tmp_tmp * d_J_inv_tmp_tmp) -
 8003900:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003904:	ee25 7b07 	vmul.f64	d7, d5, d7
	               J_inv_tmp_tmp * c_J_inv_tmp * d_J_inv_tmp_tmp) +
 8003908:	ee36 8b07 	vadd.f64	d8, d6, d7
	         2.8921178332800004E+6 *
	             sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800390c:	f107 030c 	add.w	r3, r7, #12
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3308      	adds	r3, #8
 8003914:	ed93 6b00 	vldr	d6, [r3]
 8003918:	f107 030c 	add.w	r3, r7, #12
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3310      	adds	r3, #16
 8003920:	ed93 7b00 	vldr	d7, [r3]
 8003924:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003928:	ee36 6b07 	vadd.f64	d6, d6, d7
 800392c:	f107 030c 	add.w	r3, r7, #12
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3318      	adds	r3, #24
 8003934:	ed93 7b00 	vldr	d7, [r3]
 8003938:	ee36 7b07 	vadd.f64	d7, d6, d7
 800393c:	ed1f 6b56 	vldr	d6, [pc, #-344]	; 80037e8 <IVK+0x1d00>
 8003940:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003944:	ed1f 6b56 	vldr	d6, [pc, #-344]	; 80037f0 <IVK+0x1d08>
 8003948:	ee37 7b46 	vsub.f64	d7, d7, d6
 800394c:	ed1f 6b54 	vldr	d6, [pc, #-336]	; 8003800 <IVK+0x1d18>
 8003950:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003954:	ed1f 6b58 	vldr	d6, [pc, #-352]	; 80037f8 <IVK+0x1d10>
 8003958:	ee37 7b06 	vadd.f64	d7, d7, d6
 800395c:	eeb0 0b47 	vmov.f64	d0, d7
 8003960:	f013 fcfa 	bl	8017358 <sin>
 8003964:	eeb0 7b40 	vmov.f64	d7, d0
	         2.8921178332800004E+6 *
 8003968:	ed1f 6b67 	vldr	d6, [pc, #-412]	; 80037d0 <IVK+0x1ce8>
 800396c:	ee27 6b06 	vmul.f64	d6, d7, d6
	                  -0.73665) +
	                 1.52205) *
 8003970:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8003974:	ee26 6b07 	vmul.f64	d6, d6, d7
	             J_inv_tmp_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 8003978:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 800397c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003980:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003984:	ee26 7b07 	vmul.f64	d7, d6, d7
	              e_J_inv_tmp_tmp * d_J_inv_tmp_tmp) -
 8003988:	ee38 6b47 	vsub.f64	d6, d8, d7
	        211366.80000000002 * c_J_inv_tmp_tmp * c_J_inv_tmp * e_J_inv_tmp_tmp *
 800398c:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8003990:	ed1f 5b6f 	vldr	d5, [pc, #-444]	; 80037d8 <IVK+0x1cf0>
 8003994:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003998:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 800399c:	ee25 5b07 	vmul.f64	d5, d5, d7
 80039a0:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 80039a4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80039a8:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80039ac:	ee25 7b07 	vmul.f64	d7, d5, d7
	             J_inv_tmp_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 80039b0:	ee36 8b07 	vadd.f64	d8, d6, d7
	            d_J_inv_tmp_tmp) -
	       211366.80000000002 *
	           sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80039b4:	f107 030c 	add.w	r3, r7, #12
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3308      	adds	r3, #8
 80039bc:	ed93 6b00 	vldr	d6, [r3]
 80039c0:	f107 030c 	add.w	r3, r7, #12
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3310      	adds	r3, #16
 80039c8:	ed93 7b00 	vldr	d7, [r3]
 80039cc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80039d0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80039d4:	f107 030c 	add.w	r3, r7, #12
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3318      	adds	r3, #24
 80039dc:	ed93 7b00 	vldr	d7, [r3]
 80039e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039e4:	ed1f 6b80 	vldr	d6, [pc, #-512]	; 80037e8 <IVK+0x1d00>
 80039e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80039ec:	ed1f 6b80 	vldr	d6, [pc, #-512]	; 80037f0 <IVK+0x1d08>
 80039f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80039f4:	ed1f 6b7e 	vldr	d6, [pc, #-504]	; 8003800 <IVK+0x1d18>
 80039f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80039fc:	ed1f 6b82 	vldr	d6, [pc, #-520]	; 80037f8 <IVK+0x1d10>
 8003a00:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a04:	eeb0 0b47 	vmov.f64	d0, d7
 8003a08:	f013 fca6 	bl	8017358 <sin>
 8003a0c:	eeb0 7b40 	vmov.f64	d7, d0
	       211366.80000000002 *
 8003a10:	ed1f 6b8f 	vldr	d6, [pc, #-572]	; 80037d8 <IVK+0x1cf0>
 8003a14:	ee27 6b06 	vmul.f64	d6, d7, d6
	                -0.73665) +
	               1.52205) *
 8003a18:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8003a1c:	ee26 6b07 	vmul.f64	d6, d6, d7
	           d_J_inv_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) /
 8003a20:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8003a24:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003a28:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003a2c:	ee26 7b07 	vmul.f64	d7, d6, d7
	            d_J_inv_tmp_tmp) -
 8003a30:	ee38 7b47 	vsub.f64	d7, d8, d7
	      4.0 *
 8003a34:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8003a38:	ee27 8b06 	vmul.f64	d8, d7, d6
	      (9.0 *
	       (((((((((((21136.68 * c_J_inv_tmp_tmp * c_J_inv_tmp * e_J_inv_tmp_tmp *
 8003a3c:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8003a40:	ed1f 6b99 	vldr	d6, [pc, #-612]	; 80037e0 <IVK+0x1cf8>
 8003a44:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003a48:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8003a4c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003a50:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8003a54:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003a58:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8003a5c:	ee26 9b07 	vmul.f64	d9, d6, d7
	                      d -
	                  21136.68 *
	                      sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8003a60:	f107 030c 	add.w	r3, r7, #12
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3308      	adds	r3, #8
 8003a68:	ed93 6b00 	vldr	d6, [r3]
 8003a6c:	f107 030c 	add.w	r3, r7, #12
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3310      	adds	r3, #16
 8003a74:	ed93 7b00 	vldr	d7, [r3]
 8003a78:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003a7c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003a80:	f107 030c 	add.w	r3, r7, #12
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	3318      	adds	r3, #24
 8003a88:	ed93 7b00 	vldr	d7, [r3]
 8003a8c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003a90:	ed1f 6bab 	vldr	d6, [pc, #-684]	; 80037e8 <IVK+0x1d00>
 8003a94:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a98:	ed1f 6bab 	vldr	d6, [pc, #-684]	; 80037f0 <IVK+0x1d08>
 8003a9c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003aa0:	ed1f 6ba9 	vldr	d6, [pc, #-676]	; 8003800 <IVK+0x1d18>
 8003aa4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003aa8:	ed1f 6bad 	vldr	d6, [pc, #-692]	; 80037f8 <IVK+0x1d10>
 8003aac:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003ab0:	eeb0 0b47 	vmov.f64	d0, d7
 8003ab4:	f013 fc50 	bl	8017358 <sin>
 8003ab8:	eeb0 7b40 	vmov.f64	d7, d0
	                  21136.68 *
 8003abc:	ed1f 6bb8 	vldr	d6, [pc, #-736]	; 80037e0 <IVK+0x1cf8>
 8003ac0:	ee27 6b06 	vmul.f64	d6, d7, d6
	                           -0.73665) +
	                          1.52205) *
 8003ac4:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8003ac8:	ee26 6b07 	vmul.f64	d6, d6, d7
	                      d_J_inv_tmp * b_J_inv_tmp_tmp * d) +
 8003acc:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8003ad0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003ad4:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8003ad8:	ee26 7b07 	vmul.f64	d7, d6, d7
	                      d -
 8003adc:	ee39 6b47 	vsub.f64	d6, d9, d7
	                 d10 * d1) -
 8003ae0:	ed97 5b4e 	vldr	d5, [r7, #312]	; 0x138
 8003ae4:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003ae8:	ee25 7b07 	vmul.f64	d7, d5, d7
	                      d_J_inv_tmp * b_J_inv_tmp_tmp * d) +
 8003aec:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d9 * d1) +
 8003af0:	ed97 5b50 	vldr	d5, [r7, #320]	; 0x140
 8003af4:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003af8:	ee25 7b07 	vmul.f64	d7, d5, d7
	                 d10 * d1) -
 8003afc:	ee36 6b47 	vsub.f64	d6, d6, d7
	               24629.28 * c_J_inv_tmp_tmp * J_inv_tmp * d_J_inv_tmp * d) -
 8003b00:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8003b04:	ed1f 5bc0 	vldr	d5, [pc, #-768]	; 8003808 <IVK+0x1d20>
 8003b08:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003b0c:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8003b10:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003b14:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8003b18:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003b1c:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8003b20:	ee25 7b07 	vmul.f64	d7, d5, d7
	                d9 * d1) +
 8003b24:	ee36 9b07 	vadd.f64	d9, d6, d7
	              24629.28 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8003b28:	f107 030c 	add.w	r3, r7, #12
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3308      	adds	r3, #8
 8003b30:	ed93 6b00 	vldr	d6, [r3]
 8003b34:	f107 030c 	add.w	r3, r7, #12
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	3310      	adds	r3, #16
 8003b3c:	ed93 7b00 	vldr	d7, [r3]
 8003b40:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003b44:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003b48:	f107 030c 	add.w	r3, r7, #12
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3318      	adds	r3, #24
 8003b50:	ed93 7b00 	vldr	d7, [r3]
 8003b54:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003b58:	ed1f 6bdd 	vldr	d6, [pc, #-884]	; 80037e8 <IVK+0x1d00>
 8003b5c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003b60:	ed1f 6bdd 	vldr	d6, [pc, #-884]	; 80037f0 <IVK+0x1d08>
 8003b64:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003b68:	ed1f 6bdb 	vldr	d6, [pc, #-876]	; 8003800 <IVK+0x1d18>
 8003b6c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003b70:	ed1f 6bdf 	vldr	d6, [pc, #-892]	; 80037f8 <IVK+0x1d10>
 8003b74:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003b78:	eeb0 0b47 	vmov.f64	d0, d7
 8003b7c:	f013 fbec 	bl	8017358 <sin>
 8003b80:	eeb0 7b40 	vmov.f64	d7, d0
	              24629.28 *
 8003b84:	ed1f 6be0 	vldr	d6, [pc, #-896]	; 8003808 <IVK+0x1d20>
 8003b88:	ee27 6b06 	vmul.f64	d6, d7, d6
	                       -0.73665) +
	                      1.52205) *
 8003b8c:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8003b90:	ee26 6b07 	vmul.f64	d6, d6, d7
	                  J_inv_tmp_tmp * c_J_inv_tmp * d) +
 8003b94:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8003b98:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003b9c:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8003ba0:	ee26 7b07 	vmul.f64	d7, d6, d7
	               24629.28 * c_J_inv_tmp_tmp * J_inv_tmp * d_J_inv_tmp * d) -
 8003ba4:	ee39 6b47 	vsub.f64	d6, d9, d7
	             d2 * d1) -
 8003ba8:	ed97 5b5e 	vldr	d5, [r7, #376]	; 0x178
 8003bac:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003bb0:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  J_inv_tmp_tmp * c_J_inv_tmp * d) +
 8003bb4:	ee36 6b07 	vadd.f64	d6, d6, d7
	            d12 * d1) +
 8003bb8:	ed97 5b4a 	vldr	d5, [r7, #296]	; 0x128
 8003bbc:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003bc0:	ee25 7b07 	vmul.f64	d7, d5, d7
	             d2 * d1) -
 8003bc4:	ee36 6b47 	vsub.f64	d6, d6, d7
	           289211.783328 * c_J_inv_tmp_tmp * J_inv_tmp * e_J_inv_tmp_tmp * d) -
 8003bc8:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8003bcc:	ed1f 5bf0 	vldr	d5, [pc, #-960]	; 8003810 <IVK+0x1d28>
 8003bd0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003bd4:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8003bd8:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003bdc:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8003be0:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003be4:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8003be8:	ee25 7b07 	vmul.f64	d7, d5, d7
	            d12 * d1) +
 8003bec:	ee36 6b07 	vadd.f64	d6, d6, d7
	          e_J_inv_tmp * d) +
 8003bf0:	ed97 5b62 	vldr	d5, [r7, #392]	; 0x188
 8003bf4:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8003bf8:	ee25 7b07 	vmul.f64	d7, d5, d7
	           289211.783328 * c_J_inv_tmp_tmp * J_inv_tmp * e_J_inv_tmp_tmp * d) -
 8003bfc:	ee36 6b47 	vsub.f64	d6, d6, d7
	         d13 * d1) -
 8003c00:	ed97 5b48 	vldr	d5, [r7, #288]	; 0x120
 8003c04:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003c08:	ee25 7b07 	vmul.f64	d7, d5, d7
	          e_J_inv_tmp * d) +
 8003c0c:	ee36 6b07 	vadd.f64	d6, d6, d7
	        e_J_inv_tmp * d1));
 8003c10:	ed97 5b62 	vldr	d5, [r7, #392]	; 0x188
 8003c14:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003c18:	ee25 7b07 	vmul.f64	d7, d5, d7
	         d13 * d1) -
 8003c1c:	ee36 7b47 	vsub.f64	d7, d6, d7
	      (9.0 *
 8003c20:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8003c24:	ee27 6b06 	vmul.f64	d6, d7, d6
	           d_J_inv_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) /
 8003c28:	ee88 7b06 	vdiv.f64	d7, d8, d6
	  dv[3] =
 8003c2c:	f107 0310 	add.w	r3, r7, #16
 8003c30:	ed83 7b06 	vstr	d7, [r3, #24]
	  d = 9.0 * (((((((((((d10 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8003c34:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003c38:	ee27 6b07 	vmul.f64	d6, d7, d7
 8003c3c:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8003c40:	ee26 6b07 	vmul.f64	d6, d6, d7
	                       d9 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003c44:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003c48:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003c4c:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8003c50:	ee25 7b07 	vmul.f64	d7, d5, d7
	  d = 9.0 * (((((((((((d10 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8003c54:	ee36 6b47 	vsub.f64	d6, d6, d7
	                      d10 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003c58:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003c5c:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003c60:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8003c64:	ee25 7b07 	vmul.f64	d7, d5, d7
	                       d9 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003c68:	ee36 6b07 	vadd.f64	d6, d6, d7
	                     d9 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8003c6c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003c70:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003c74:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8003c78:	ee25 7b07 	vmul.f64	d7, d5, d7
	                      d10 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003c7c:	ee36 6b47 	vsub.f64	d6, d6, d7
	                    d2 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8003c80:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003c84:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003c88:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8003c8c:	ee25 7b07 	vmul.f64	d7, d5, d7
	                     d9 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8003c90:	ee36 6b07 	vadd.f64	d6, d6, d7
	                   d12 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003c94:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003c98:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003c9c:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 8003ca0:	ee25 7b07 	vmul.f64	d7, d5, d7
	                    d2 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8003ca4:	ee36 6b47 	vsub.f64	d6, d6, d7
	                  d2 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003ca8:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003cac:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003cb0:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8003cb4:	ee25 7b07 	vmul.f64	d7, d5, d7
	                   d12 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003cb8:	ee36 6b07 	vadd.f64	d6, d6, d7
	                 d12 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8003cbc:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003cc0:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003cc4:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 8003cc8:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  d2 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003ccc:	ee36 6b47 	vsub.f64	d6, d6, d7
	                d13 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8003cd0:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003cd4:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003cd8:	ed97 7b48 	vldr	d7, [r7, #288]	; 0x120
 8003cdc:	ee25 7b07 	vmul.f64	d7, d5, d7
	                 d12 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8003ce0:	ee36 6b07 	vadd.f64	d6, d6, d7
	               e_J_inv_tmp * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003ce4:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003ce8:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003cec:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8003cf0:	ee25 7b07 	vmul.f64	d7, d5, d7
	                d13 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8003cf4:	ee36 6b47 	vsub.f64	d6, d6, d7
	              d13 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003cf8:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003cfc:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003d00:	ed97 7b48 	vldr	d7, [r7, #288]	; 0x120
 8003d04:	ee25 7b07 	vmul.f64	d7, d5, d7
	               e_J_inv_tmp * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003d08:	ee36 6b07 	vadd.f64	d6, d6, d7
	             e_J_inv_tmp * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp));
 8003d0c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003d10:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003d14:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8003d18:	ee25 7b07 	vmul.f64	d7, d5, d7
	              d13 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003d1c:	ee36 7b47 	vsub.f64	d7, d6, d7
	  d = 9.0 * (((((((((((d10 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8003d20:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8003d24:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003d28:	ed87 7b7a 	vstr	d7, [r7, #488]	; 0x1e8
	  d1 = d15 * f_J_inv_tmp_tmp;
 8003d2c:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 8003d30:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003d34:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003d38:	ed87 7b60 	vstr	d7, [r7, #384]	; 0x180
	  d2 = d14 * f_J_inv_tmp_tmp;
 8003d3c:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 8003d40:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003d44:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003d48:	ed87 7b5e 	vstr	d7, [r7, #376]	; 0x178
	  dv[8] =
	      -(4.0 *
	        (((((((((((((((221663.52 *
	                           sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8003d4c:	f107 030c 	add.w	r3, r7, #12
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3308      	adds	r3, #8
 8003d54:	ed93 6b00 	vldr	d6, [r3]
 8003d58:	f107 030c 	add.w	r3, r7, #12
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3310      	adds	r3, #16
 8003d60:	ed93 7b00 	vldr	d7, [r3]
 8003d64:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003d68:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003d6c:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8004130 <IVK+0x2648>
 8003d70:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003d74:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8004138 <IVK+0x2650>
 8003d78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003d7c:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8004140 <IVK+0x2658>
 8003d80:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003d84:	eeb0 0b47 	vmov.f64	d0, d7
 8003d88:	f013 fae6 	bl	8017358 <sin>
 8003d8c:	eeb0 7b40 	vmov.f64	d7, d0
	        (((((((((((((((221663.52 *
 8003d90:	ed9f 6bed 	vldr	d6, [pc, #948]	; 8004148 <IVK+0x2660>
 8003d94:	ee27 8b06 	vmul.f64	d8, d7, d6
	                               -0.73665) *
	                           cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003d98:	f107 030c 	add.w	r3, r7, #12
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	3308      	adds	r3, #8
 8003da0:	ed93 6b00 	vldr	d6, [r3]
 8003da4:	f107 030c 	add.w	r3, r7, #12
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3310      	adds	r3, #16
 8003dac:	ed93 7b00 	vldr	d7, [r3]
 8003db0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003db4:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8004130 <IVK+0x2648>
 8003db8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003dbc:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8004138 <IVK+0x2650>
 8003dc0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003dc4:	eeb0 0b47 	vmov.f64	d0, d7
 8003dc8:	f013 fa72 	bl	80172b0 <cos>
 8003dcc:	eeb0 7b40 	vmov.f64	d7, d0
	                               -0.73665) *
 8003dd0:	ee28 6b07 	vmul.f64	d6, d8, d7
	                           cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003dd4:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003dd8:	ee26 8b07 	vmul.f64	d8, d6, d7
	                           d_J_inv_tmp_tmp -
	                       221663.52 *
	                           cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8003ddc:	f107 030c 	add.w	r3, r7, #12
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	3308      	adds	r3, #8
 8003de4:	ed93 6b00 	vldr	d6, [r3]
 8003de8:	f107 030c 	add.w	r3, r7, #12
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3310      	adds	r3, #16
 8003df0:	ed93 7b00 	vldr	d7, [r3]
 8003df4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003df8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003dfc:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 8004130 <IVK+0x2648>
 8003e00:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e04:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 8004138 <IVK+0x2650>
 8003e08:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003e0c:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 8004140 <IVK+0x2658>
 8003e10:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003e14:	eeb0 0b47 	vmov.f64	d0, d7
 8003e18:	f013 fa4a 	bl	80172b0 <cos>
 8003e1c:	eeb0 7b40 	vmov.f64	d7, d0
	                       221663.52 *
 8003e20:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8004148 <IVK+0x2660>
 8003e24:	ee27 9b06 	vmul.f64	d9, d7, d6
	                               -0.73665) *
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003e28:	f107 030c 	add.w	r3, r7, #12
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3308      	adds	r3, #8
 8003e30:	ed93 6b00 	vldr	d6, [r3]
 8003e34:	f107 030c 	add.w	r3, r7, #12
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3310      	adds	r3, #16
 8003e3c:	ed93 7b00 	vldr	d7, [r3]
 8003e40:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e44:	ed9f 6bba 	vldr	d6, [pc, #744]	; 8004130 <IVK+0x2648>
 8003e48:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e4c:	ed9f 6bba 	vldr	d6, [pc, #744]	; 8004138 <IVK+0x2650>
 8003e50:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003e54:	eeb0 0b47 	vmov.f64	d0, d7
 8003e58:	f013 fa7e 	bl	8017358 <sin>
 8003e5c:	eeb0 7b40 	vmov.f64	d7, d0
	                               -0.73665) *
 8003e60:	ee29 6b07 	vmul.f64	d6, d9, d7
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003e64:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003e68:	ee26 7b07 	vmul.f64	d7, d6, d7
	                           d_J_inv_tmp_tmp -
 8003e6c:	ee38 8b47 	vsub.f64	d8, d8, d7
	                           d_J_inv_tmp_tmp) -
	                      2.6029060499520004E+6 *
	                          cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8003e70:	f107 030c 	add.w	r3, r7, #12
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3308      	adds	r3, #8
 8003e78:	ed93 6b00 	vldr	d6, [r3]
 8003e7c:	f107 030c 	add.w	r3, r7, #12
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3310      	adds	r3, #16
 8003e84:	ed93 7b00 	vldr	d7, [r3]
 8003e88:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003e8c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e90:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8004130 <IVK+0x2648>
 8003e94:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e98:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8004138 <IVK+0x2650>
 8003e9c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ea0:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8004140 <IVK+0x2658>
 8003ea4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ea8:	eeb0 0b47 	vmov.f64	d0, d7
 8003eac:	f013 fa00 	bl	80172b0 <cos>
 8003eb0:	eeb0 7b40 	vmov.f64	d7, d0
	                      2.6029060499520004E+6 *
 8003eb4:	ed9f 6ba6 	vldr	d6, [pc, #664]	; 8004150 <IVK+0x2668>
 8003eb8:	ee27 9b06 	vmul.f64	d9, d7, d6
	                              -0.73665) *
	                          sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003ebc:	f107 030c 	add.w	r3, r7, #12
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	3308      	adds	r3, #8
 8003ec4:	ed93 7b00 	vldr	d7, [r3]
 8003ec8:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8004130 <IVK+0x2648>
 8003ecc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003ed0:	eeb0 0b47 	vmov.f64	d0, d7
 8003ed4:	f013 fa40 	bl	8017358 <sin>
 8003ed8:	eeb0 7b40 	vmov.f64	d7, d0
	                              -0.73665) *
 8003edc:	ee29 6b07 	vmul.f64	d6, d9, d7
	                          sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003ee0:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003ee4:	ee26 7b07 	vmul.f64	d7, d6, d7
	                           d_J_inv_tmp_tmp) -
 8003ee8:	ee38 8b47 	vsub.f64	d8, d8, d7
	                     2.6029060499520004E+6 *
	                         sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8003eec:	f107 030c 	add.w	r3, r7, #12
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3308      	adds	r3, #8
 8003ef4:	ed93 6b00 	vldr	d6, [r3]
 8003ef8:	f107 030c 	add.w	r3, r7, #12
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3310      	adds	r3, #16
 8003f00:	ed93 7b00 	vldr	d7, [r3]
 8003f04:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003f08:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003f0c:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8004130 <IVK+0x2648>
 8003f10:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f14:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8004138 <IVK+0x2650>
 8003f18:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003f1c:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8004140 <IVK+0x2658>
 8003f20:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003f24:	eeb0 0b47 	vmov.f64	d0, d7
 8003f28:	f013 fa16 	bl	8017358 <sin>
 8003f2c:	eeb0 7b40 	vmov.f64	d7, d0
	                     2.6029060499520004E+6 *
 8003f30:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8004150 <IVK+0x2668>
 8003f34:	ee27 9b06 	vmul.f64	d9, d7, d6
	                             -0.73665) *
	                         cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003f38:	f107 030c 	add.w	r3, r7, #12
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3308      	adds	r3, #8
 8003f40:	ed93 7b00 	vldr	d7, [r3]
 8003f44:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8004130 <IVK+0x2648>
 8003f48:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f4c:	eeb0 0b47 	vmov.f64	d0, d7
 8003f50:	f013 f9ae 	bl	80172b0 <cos>
 8003f54:	eeb0 7b40 	vmov.f64	d7, d0
	                             -0.73665) *
 8003f58:	ee29 6b07 	vmul.f64	d6, d9, d7
	                         cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003f5c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003f60:	ee26 7b07 	vmul.f64	d7, d6, d7
	                          sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003f64:	ee38 6b07 	vadd.f64	d6, d8, d7
	                         cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003f68:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003f6c:	ee36 8b07 	vadd.f64	d8, d6, d7
	                    d1) -
	                   190230.12000000002 *
	                       cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003f70:	f107 030c 	add.w	r3, r7, #12
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	3308      	adds	r3, #8
 8003f78:	ed93 6b00 	vldr	d6, [r3]
 8003f7c:	f107 030c 	add.w	r3, r7, #12
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3310      	adds	r3, #16
 8003f84:	ed93 7b00 	vldr	d7, [r3]
 8003f88:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003f8c:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8004130 <IVK+0x2648>
 8003f90:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f94:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8004138 <IVK+0x2650>
 8003f98:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003f9c:	eeb0 0b47 	vmov.f64	d0, d7
 8003fa0:	f013 f986 	bl	80172b0 <cos>
 8003fa4:	eeb0 7b40 	vmov.f64	d7, d0
	                   190230.12000000002 *
 8003fa8:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8004158 <IVK+0x2670>
 8003fac:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003fb0:	f107 030c 	add.w	r3, r7, #12
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	ed93 7b00 	vldr	d7, [r3]
 8003fbc:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8004130 <IVK+0x2648>
 8003fc0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003fc4:	eeb0 0b47 	vmov.f64	d0, d7
 8003fc8:	f013 f9c6 	bl	8017358 <sin>
 8003fcc:	eeb0 7b40 	vmov.f64	d7, d0
	                       cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003fd0:	ee29 6b07 	vmul.f64	d6, d9, d7
	                       sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003fd4:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003fd8:	ee26 7b07 	vmul.f64	d7, d6, d7
	                    d1) -
 8003fdc:	ee38 8b47 	vsub.f64	d8, d8, d7
	                  190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003fe0:	f107 030c 	add.w	r3, r7, #12
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	ed93 6b00 	vldr	d6, [r3]
 8003fec:	f107 030c 	add.w	r3, r7, #12
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3310      	adds	r3, #16
 8003ff4:	ed93 7b00 	vldr	d7, [r3]
 8003ff8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003ffc:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8004130 <IVK+0x2648>
 8004000:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004004:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8004138 <IVK+0x2650>
 8004008:	ee37 7b46 	vsub.f64	d7, d7, d6
 800400c:	eeb0 0b47 	vmov.f64	d0, d7
 8004010:	f013 f9a2 	bl	8017358 <sin>
 8004014:	eeb0 7b40 	vmov.f64	d7, d0
 8004018:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8004158 <IVK+0x2670>
 800401c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8004020:	f107 030c 	add.w	r3, r7, #12
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3308      	adds	r3, #8
 8004028:	ed93 7b00 	vldr	d7, [r3]
 800402c:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8004130 <IVK+0x2648>
 8004030:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004034:	eeb0 0b47 	vmov.f64	d0, d7
 8004038:	f013 f93a 	bl	80172b0 <cos>
 800403c:	eeb0 7b40 	vmov.f64	d7, d0
	                  190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004040:	ee29 6b07 	vmul.f64	d6, d9, d7
	                      cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8004044:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8004048:	ee26 7b07 	vmul.f64	d7, d6, d7
	                       sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 800404c:	ee38 6b07 	vadd.f64	d6, d8, d7
	                      cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8004050:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8004054:	ee36 8b07 	vadd.f64	d8, d6, d7
	                 d2) +
	                87600.0 *
	                    cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004058:	f107 030c 	add.w	r3, r7, #12
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3308      	adds	r3, #8
 8004060:	ed93 6b00 	vldr	d6, [r3]
 8004064:	f107 030c 	add.w	r3, r7, #12
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3310      	adds	r3, #16
 800406c:	ed93 7b00 	vldr	d7, [r3]
 8004070:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004074:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004078:	f107 030c 	add.w	r3, r7, #12
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3318      	adds	r3, #24
 8004080:	ed93 7b00 	vldr	d7, [r3]
 8004084:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004088:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8004130 <IVK+0x2648>
 800408c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004090:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8004138 <IVK+0x2650>
 8004094:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004098:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8004140 <IVK+0x2658>
 800409c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80040a0:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8004178 <IVK+0x2690>
 80040a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80040a8:	eeb0 0b47 	vmov.f64	d0, d7
 80040ac:	f013 f900 	bl	80172b0 <cos>
 80040b0:	eeb0 7b40 	vmov.f64	d7, d0
	                87600.0 *
 80040b4:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8004160 <IVK+0x2678>
 80040b8:	ee27 9b06 	vmul.f64	d9, d7, d6
	                         -0.73665) +
	                        1.52205) *
	                    sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80040bc:	f107 030c 	add.w	r3, r7, #12
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3308      	adds	r3, #8
 80040c4:	ed93 6b00 	vldr	d6, [r3]
 80040c8:	f107 030c 	add.w	r3, r7, #12
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3310      	adds	r3, #16
 80040d0:	ed93 7b00 	vldr	d7, [r3]
 80040d4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80040d8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80040dc:	f107 030c 	add.w	r3, r7, #12
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3318      	adds	r3, #24
 80040e4:	ed93 7b00 	vldr	d7, [r3]
 80040e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80040ec:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8004130 <IVK+0x2648>
 80040f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80040f4:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8004138 <IVK+0x2650>
 80040f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80040fc:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8004140 <IVK+0x2658>
 8004100:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004104:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8004178 <IVK+0x2690>
 8004108:	ee37 7b06 	vadd.f64	d7, d7, d6
 800410c:	eeb0 0b47 	vmov.f64	d0, d7
 8004110:	f013 f922 	bl	8017358 <sin>
 8004114:	eeb0 7b40 	vmov.f64	d7, d0
	                        1.52205) *
 8004118:	ee29 9b07 	vmul.f64	d9, d9, d7
	                         -0.73665) +
	                        1.52205) *
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 800411c:	f107 030c 	add.w	r3, r7, #12
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	3308      	adds	r3, #8
 8004124:	ed93 6b00 	vldr	d6, [r3]
 8004128:	f107 030c 	add.w	r3, r7, #12
 800412c:	e038      	b.n	80041a0 <IVK+0x26b8>
 800412e:	bf00      	nop
 8004130:	45a1cac1 	.word	0x45a1cac1
 8004134:	3ffaf3b6 	.word	0x3ffaf3b6
 8004138:	39581062 	.word	0x39581062
 800413c:	3fecc8b4 	.word	0x3fecc8b4
 8004140:	05532618 	.word	0x05532618
 8004144:	3fe792a3 	.word	0x3fe792a3
 8004148:	28f5c28f 	.word	0x28f5c28f
 800414c:	410b0efc 	.word	0x410b0efc
 8004150:	0664d3c0 	.word	0x0664d3c0
 8004154:	4143dbcd 	.word	0x4143dbcd
 8004158:	f5c28f5d 	.word	0xf5c28f5d
 800415c:	410738b0 	.word	0x410738b0
 8004160:	00000000 	.word	0x00000000
 8004164:	40f56300 	.word	0x40f56300
 8004168:	851eb852 	.word	0x851eb852
 800416c:	412f6457 	.word	0x412f6457
 8004170:	66666666 	.word	0x66666666
 8004174:	410e10a6 	.word	0x410e10a6
 8004178:	19ce075f 	.word	0x19ce075f
 800417c:	3ff85a51 	.word	0x3ff85a51
 8004180:	eaa8eb47 	.word	0xeaa8eb47
 8004184:	414610aa 	.word	0x414610aa
 8004188:	45a1cac1 	.word	0x45a1cac1
 800418c:	3ffaf3b6 	.word	0x3ffaf3b6
 8004190:	39581062 	.word	0x39581062
 8004194:	3fecc8b4 	.word	0x3fecc8b4
 8004198:	05532618 	.word	0x05532618
 800419c:	3fe792a3 	.word	0x3fe792a3
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3310      	adds	r3, #16
 80041a4:	ed93 7b00 	vldr	d7, [r3]
 80041a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80041ac:	ed1f 6b0a 	vldr	d6, [pc, #-40]	; 8004188 <IVK+0x26a0>
 80041b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80041b4:	ed1f 6b0a 	vldr	d6, [pc, #-40]	; 8004190 <IVK+0x26a8>
 80041b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80041bc:	eeb0 0b47 	vmov.f64	d0, d7
 80041c0:	f013 f876 	bl	80172b0 <cos>
 80041c4:	eeb0 7b40 	vmov.f64	d7, d0
	                        1.52205) *
 80041c8:	ee29 6b07 	vmul.f64	d6, d9, d7
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 80041cc:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80041d0:	ee26 7b07 	vmul.f64	d7, d6, d7
	                 d2) +
 80041d4:	ee38 8b07 	vadd.f64	d8, d8, d7
	               1.02865176E+6 *
	                   cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80041d8:	f107 030c 	add.w	r3, r7, #12
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	3308      	adds	r3, #8
 80041e0:	ed93 6b00 	vldr	d6, [r3]
 80041e4:	f107 030c 	add.w	r3, r7, #12
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3310      	adds	r3, #16
 80041ec:	ed93 7b00 	vldr	d7, [r3]
 80041f0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80041f4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80041f8:	f107 030c 	add.w	r3, r7, #12
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	3318      	adds	r3, #24
 8004200:	ed93 7b00 	vldr	d7, [r3]
 8004204:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004208:	ed1f 6b21 	vldr	d6, [pc, #-132]	; 8004188 <IVK+0x26a0>
 800420c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004210:	ed1f 6b21 	vldr	d6, [pc, #-132]	; 8004190 <IVK+0x26a8>
 8004214:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004218:	ed1f 6b21 	vldr	d6, [pc, #-132]	; 8004198 <IVK+0x26b0>
 800421c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004220:	ed1f 6b2b 	vldr	d6, [pc, #-172]	; 8004178 <IVK+0x2690>
 8004224:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004228:	eeb0 0b47 	vmov.f64	d0, d7
 800422c:	f013 f840 	bl	80172b0 <cos>
 8004230:	eeb0 7b40 	vmov.f64	d7, d0
	               1.02865176E+6 *
 8004234:	ed1f 6b34 	vldr	d6, [pc, #-208]	; 8004168 <IVK+0x2680>
 8004238:	ee27 9b06 	vmul.f64	d9, d7, d6
	                        -0.73665) +
	                       1.52205) *
	                   sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800423c:	f107 030c 	add.w	r3, r7, #12
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3308      	adds	r3, #8
 8004244:	ed93 6b00 	vldr	d6, [r3]
 8004248:	f107 030c 	add.w	r3, r7, #12
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3310      	adds	r3, #16
 8004250:	ed93 7b00 	vldr	d7, [r3]
 8004254:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004258:	ee36 6b07 	vadd.f64	d6, d6, d7
 800425c:	f107 030c 	add.w	r3, r7, #12
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	3318      	adds	r3, #24
 8004264:	ed93 7b00 	vldr	d7, [r3]
 8004268:	ee36 7b07 	vadd.f64	d7, d6, d7
 800426c:	ed1f 6b3a 	vldr	d6, [pc, #-232]	; 8004188 <IVK+0x26a0>
 8004270:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004274:	ed1f 6b3a 	vldr	d6, [pc, #-232]	; 8004190 <IVK+0x26a8>
 8004278:	ee37 7b46 	vsub.f64	d7, d7, d6
 800427c:	ed1f 6b3a 	vldr	d6, [pc, #-232]	; 8004198 <IVK+0x26b0>
 8004280:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004284:	ed1f 6b44 	vldr	d6, [pc, #-272]	; 8004178 <IVK+0x2690>
 8004288:	ee37 7b06 	vadd.f64	d7, d7, d6
 800428c:	eeb0 0b47 	vmov.f64	d0, d7
 8004290:	f013 f862 	bl	8017358 <sin>
 8004294:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 8004298:	ee29 9b07 	vmul.f64	d9, d9, d7
	                        -0.73665) +
	                       1.52205) *
	                   cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 800429c:	f107 030c 	add.w	r3, r7, #12
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3308      	adds	r3, #8
 80042a4:	ed93 7b00 	vldr	d7, [r3]
 80042a8:	ed1f 6b49 	vldr	d6, [pc, #-292]	; 8004188 <IVK+0x26a0>
 80042ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 80042b0:	eeb0 0b47 	vmov.f64	d0, d7
 80042b4:	f012 fffc 	bl	80172b0 <cos>
 80042b8:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 80042bc:	ee29 6b07 	vmul.f64	d6, d9, d7
	                   cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 80042c0:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80042c4:	ee26 7b07 	vmul.f64	d7, d6, d7
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 80042c8:	ee38 8b07 	vadd.f64	d8, d8, d7
	              246292.8 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80042cc:	f107 030c 	add.w	r3, r7, #12
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3308      	adds	r3, #8
 80042d4:	ed93 6b00 	vldr	d6, [r3]
 80042d8:	f107 030c 	add.w	r3, r7, #12
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	3310      	adds	r3, #16
 80042e0:	ed93 7b00 	vldr	d7, [r3]
 80042e4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80042e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80042ec:	f107 030c 	add.w	r3, r7, #12
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3318      	adds	r3, #24
 80042f4:	ed93 7b00 	vldr	d7, [r3]
 80042f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80042fc:	ed1f 6b5e 	vldr	d6, [pc, #-376]	; 8004188 <IVK+0x26a0>
 8004300:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004304:	ed1f 6b5e 	vldr	d6, [pc, #-376]	; 8004190 <IVK+0x26a8>
 8004308:	ee37 7b46 	vsub.f64	d7, d7, d6
 800430c:	ed1f 6b5e 	vldr	d6, [pc, #-376]	; 8004198 <IVK+0x26b0>
 8004310:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004314:	ed1f 6b68 	vldr	d6, [pc, #-416]	; 8004178 <IVK+0x2690>
 8004318:	ee37 7b06 	vadd.f64	d7, d7, d6
 800431c:	eeb0 0b47 	vmov.f64	d0, d7
 8004320:	f013 f81a 	bl	8017358 <sin>
 8004324:	eeb0 7b40 	vmov.f64	d7, d0
	              246292.8 *
 8004328:	ed1f 6b6f 	vldr	d6, [pc, #-444]	; 8004170 <IVK+0x2688>
 800432c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004330:	f107 030c 	add.w	r3, r7, #12
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3308      	adds	r3, #8
 8004338:	ed93 6b00 	vldr	d6, [r3]
 800433c:	f107 030c 	add.w	r3, r7, #12
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3310      	adds	r3, #16
 8004344:	ed93 7b00 	vldr	d7, [r3]
 8004348:	ee37 7b07 	vadd.f64	d7, d7, d7
 800434c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004350:	ed1f 6b73 	vldr	d6, [pc, #-460]	; 8004188 <IVK+0x26a0>
 8004354:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004358:	ed1f 6b73 	vldr	d6, [pc, #-460]	; 8004190 <IVK+0x26a8>
 800435c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004360:	ed1f 6b73 	vldr	d6, [pc, #-460]	; 8004198 <IVK+0x26b0>
 8004364:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004368:	eeb0 0b47 	vmov.f64	d0, d7
 800436c:	f012 ffa0 	bl	80172b0 <cos>
 8004370:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 8004374:	ee29 9b07 	vmul.f64	d9, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) -
 8004378:	f107 030c 	add.w	r3, r7, #12
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	3308      	adds	r3, #8
 8004380:	ed93 6b00 	vldr	d6, [r3]
 8004384:	f107 030c 	add.w	r3, r7, #12
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3310      	adds	r3, #16
 800438c:	ed93 7b00 	vldr	d7, [r3]
 8004390:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004394:	ed1f 6b84 	vldr	d6, [pc, #-528]	; 8004188 <IVK+0x26a0>
 8004398:	ee37 7b06 	vadd.f64	d7, d7, d6
 800439c:	ed1f 6b84 	vldr	d6, [pc, #-528]	; 8004190 <IVK+0x26a8>
 80043a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80043a4:	eeb0 0b47 	vmov.f64	d0, d7
 80043a8:	f012 ffd6 	bl	8017358 <sin>
 80043ac:	eeb0 7b40 	vmov.f64	d7, d0
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80043b0:	ee29 6b07 	vmul.f64	d6, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) -
 80043b4:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80043b8:	ee26 7b07 	vmul.f64	d7, d6, d7
	                   cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 80043bc:	ee38 8b07 	vadd.f64	d8, d8, d7
	             246292.8 *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80043c0:	f107 030c 	add.w	r3, r7, #12
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3308      	adds	r3, #8
 80043c8:	ed93 6b00 	vldr	d6, [r3]
 80043cc:	f107 030c 	add.w	r3, r7, #12
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3310      	adds	r3, #16
 80043d4:	ed93 7b00 	vldr	d7, [r3]
 80043d8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80043dc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80043e0:	f107 030c 	add.w	r3, r7, #12
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	3318      	adds	r3, #24
 80043e8:	ed93 7b00 	vldr	d7, [r3]
 80043ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80043f0:	ed1f 6b9b 	vldr	d6, [pc, #-620]	; 8004188 <IVK+0x26a0>
 80043f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80043f8:	ed1f 6b9b 	vldr	d6, [pc, #-620]	; 8004190 <IVK+0x26a8>
 80043fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004400:	ed1f 6b9b 	vldr	d6, [pc, #-620]	; 8004198 <IVK+0x26b0>
 8004404:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004408:	ed1f 6ba5 	vldr	d6, [pc, #-660]	; 8004178 <IVK+0x2690>
 800440c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004410:	eeb0 0b47 	vmov.f64	d0, d7
 8004414:	f012 ffa0 	bl	8017358 <sin>
 8004418:	eeb0 7b40 	vmov.f64	d7, d0
	             246292.8 *
 800441c:	ed1f 6bac 	vldr	d6, [pc, #-688]	; 8004170 <IVK+0x2688>
 8004420:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      -0.73665) +
	                     1.52205) *
	                 sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004424:	f107 030c 	add.w	r3, r7, #12
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3308      	adds	r3, #8
 800442c:	ed93 6b00 	vldr	d6, [r3]
 8004430:	f107 030c 	add.w	r3, r7, #12
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3310      	adds	r3, #16
 8004438:	ed93 7b00 	vldr	d7, [r3]
 800443c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004440:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004444:	ed1f 6bb0 	vldr	d6, [pc, #-704]	; 8004188 <IVK+0x26a0>
 8004448:	ee37 7b06 	vadd.f64	d7, d7, d6
 800444c:	ed1f 6bb0 	vldr	d6, [pc, #-704]	; 8004190 <IVK+0x26a8>
 8004450:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004454:	ed1f 6bb0 	vldr	d6, [pc, #-704]	; 8004198 <IVK+0x26b0>
 8004458:	ee37 7b46 	vsub.f64	d7, d7, d6
 800445c:	eeb0 0b47 	vmov.f64	d0, d7
 8004460:	f012 ff7a 	bl	8017358 <sin>
 8004464:	eeb0 7b40 	vmov.f64	d7, d0
	                     1.52205) *
 8004468:	ee29 9b07 	vmul.f64	d9, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 800446c:	f107 030c 	add.w	r3, r7, #12
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3308      	adds	r3, #8
 8004474:	ed93 6b00 	vldr	d6, [r3]
 8004478:	f107 030c 	add.w	r3, r7, #12
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3310      	adds	r3, #16
 8004480:	ed93 7b00 	vldr	d7, [r3]
 8004484:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004488:	ed1f 6bc1 	vldr	d6, [pc, #-772]	; 8004188 <IVK+0x26a0>
 800448c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004490:	ed1f 6bc1 	vldr	d6, [pc, #-772]	; 8004190 <IVK+0x26a8>
 8004494:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004498:	eeb0 0b47 	vmov.f64	d0, d7
 800449c:	f012 ff08 	bl	80172b0 <cos>
 80044a0:	eeb0 7b40 	vmov.f64	d7, d0
	                 sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80044a4:	ee29 6b07 	vmul.f64	d6, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 80044a8:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80044ac:	ee26 7b07 	vmul.f64	d7, d6, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) -
 80044b0:	ee38 8b47 	vsub.f64	d8, d8, d7
	            2.8921178332800004E+6 *
	                sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80044b4:	f107 030c 	add.w	r3, r7, #12
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3308      	adds	r3, #8
 80044bc:	ed93 6b00 	vldr	d6, [r3]
 80044c0:	f107 030c 	add.w	r3, r7, #12
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3310      	adds	r3, #16
 80044c8:	ed93 7b00 	vldr	d7, [r3]
 80044cc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80044d0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80044d4:	f107 030c 	add.w	r3, r7, #12
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3318      	adds	r3, #24
 80044dc:	ed93 7b00 	vldr	d7, [r3]
 80044e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80044e4:	ed1f 6bd8 	vldr	d6, [pc, #-864]	; 8004188 <IVK+0x26a0>
 80044e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80044ec:	ed1f 6bd8 	vldr	d6, [pc, #-864]	; 8004190 <IVK+0x26a8>
 80044f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80044f4:	ed1f 6bd8 	vldr	d6, [pc, #-864]	; 8004198 <IVK+0x26b0>
 80044f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80044fc:	ed1f 6be2 	vldr	d6, [pc, #-904]	; 8004178 <IVK+0x2690>
 8004500:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004504:	eeb0 0b47 	vmov.f64	d0, d7
 8004508:	f012 ff26 	bl	8017358 <sin>
 800450c:	eeb0 7b40 	vmov.f64	d7, d0
	            2.8921178332800004E+6 *
 8004510:	ed1f 6be5 	vldr	d6, [pc, #-916]	; 8004180 <IVK+0x2698>
 8004514:	ee27 9b06 	vmul.f64	d9, d7, d6
	                     -0.73665) +
	                    1.52205) *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004518:	f107 030c 	add.w	r3, r7, #12
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3308      	adds	r3, #8
 8004520:	ed93 6b00 	vldr	d6, [r3]
 8004524:	f107 030c 	add.w	r3, r7, #12
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3310      	adds	r3, #16
 800452c:	ed93 7b00 	vldr	d7, [r3]
 8004530:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004534:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004538:	ed1f 6bed 	vldr	d6, [pc, #-948]	; 8004188 <IVK+0x26a0>
 800453c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004540:	ed1f 6bed 	vldr	d6, [pc, #-948]	; 8004190 <IVK+0x26a8>
 8004544:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004548:	ed1f 6bed 	vldr	d6, [pc, #-948]	; 8004198 <IVK+0x26b0>
 800454c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004550:	eeb0 0b47 	vmov.f64	d0, d7
 8004554:	f012 feac 	bl	80172b0 <cos>
 8004558:	eeb0 7b40 	vmov.f64	d7, d0
	                    1.52205) *
 800455c:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(q[1] + 1.6845) * f_J_inv_tmp_tmp) -
 8004560:	f107 030c 	add.w	r3, r7, #12
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3308      	adds	r3, #8
 8004568:	ed93 7b00 	vldr	d7, [r3]
 800456c:	ed9f 6bee 	vldr	d6, [pc, #952]	; 8004928 <IVK+0x2e40>
 8004570:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004574:	eeb0 0b47 	vmov.f64	d0, d7
 8004578:	f012 feee 	bl	8017358 <sin>
 800457c:	eeb0 7b40 	vmov.f64	d7, d0
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004580:	ee29 6b07 	vmul.f64	d6, d9, d7
	                sin(q[1] + 1.6845) * f_J_inv_tmp_tmp) -
 8004584:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8004588:	ee26 7b07 	vmul.f64	d7, d6, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 800458c:	ee38 8b07 	vadd.f64	d8, d8, d7
	           2.8921178332800004E+6 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004590:	f107 030c 	add.w	r3, r7, #12
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3308      	adds	r3, #8
 8004598:	ed93 6b00 	vldr	d6, [r3]
 800459c:	f107 030c 	add.w	r3, r7, #12
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3310      	adds	r3, #16
 80045a4:	ed93 7b00 	vldr	d7, [r3]
 80045a8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80045ac:	ee36 6b07 	vadd.f64	d6, d6, d7
 80045b0:	f107 030c 	add.w	r3, r7, #12
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3318      	adds	r3, #24
 80045b8:	ed93 7b00 	vldr	d7, [r3]
 80045bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80045c0:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 8004928 <IVK+0x2e40>
 80045c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80045c8:	ed9f 6bed 	vldr	d6, [pc, #948]	; 8004980 <IVK+0x2e98>
 80045cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80045d0:	ed9f 6be5 	vldr	d6, [pc, #916]	; 8004968 <IVK+0x2e80>
 80045d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80045d8:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8004930 <IVK+0x2e48>
 80045dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80045e0:	eeb0 0b47 	vmov.f64	d0, d7
 80045e4:	f012 feb8 	bl	8017358 <sin>
 80045e8:	eeb0 7b40 	vmov.f64	d7, d0
	           2.8921178332800004E+6 *
 80045ec:	ed9f 6bd2 	vldr	d6, [pc, #840]	; 8004938 <IVK+0x2e50>
 80045f0:	ee27 9b06 	vmul.f64	d9, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80045f4:	f107 030c 	add.w	r3, r7, #12
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3308      	adds	r3, #8
 80045fc:	ed93 6b00 	vldr	d6, [r3]
 8004600:	f107 030c 	add.w	r3, r7, #12
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	3310      	adds	r3, #16
 8004608:	ed93 7b00 	vldr	d7, [r3]
 800460c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004610:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004614:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 8004928 <IVK+0x2e40>
 8004618:	ee37 7b06 	vadd.f64	d7, d7, d6
 800461c:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 8004980 <IVK+0x2e98>
 8004620:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004624:	ed9f 6bd0 	vldr	d6, [pc, #832]	; 8004968 <IVK+0x2e80>
 8004628:	ee37 7b46 	vsub.f64	d7, d7, d6
 800462c:	eeb0 0b47 	vmov.f64	d0, d7
 8004630:	f012 fe92 	bl	8017358 <sin>
 8004634:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 8004638:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 800463c:	f107 030c 	add.w	r3, r7, #12
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3308      	adds	r3, #8
 8004644:	ed93 7b00 	vldr	d7, [r3]
 8004648:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8004928 <IVK+0x2e40>
 800464c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004650:	eeb0 0b47 	vmov.f64	d0, d7
 8004654:	f012 fe2c 	bl	80172b0 <cos>
 8004658:	eeb0 7b40 	vmov.f64	d7, d0
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800465c:	ee29 6b07 	vmul.f64	d6, d9, d7
	               cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 8004660:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8004664:	ee26 7b07 	vmul.f64	d7, d6, d7
	                sin(q[1] + 1.6845) * f_J_inv_tmp_tmp) -
 8004668:	ee38 8b47 	vsub.f64	d8, d8, d7
	          211366.80000000002 *
	              sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800466c:	f107 030c 	add.w	r3, r7, #12
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3308      	adds	r3, #8
 8004674:	ed93 6b00 	vldr	d6, [r3]
 8004678:	f107 030c 	add.w	r3, r7, #12
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3310      	adds	r3, #16
 8004680:	ed93 7b00 	vldr	d7, [r3]
 8004684:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004688:	ee36 6b07 	vadd.f64	d6, d6, d7
 800468c:	f107 030c 	add.w	r3, r7, #12
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	3318      	adds	r3, #24
 8004694:	ed93 7b00 	vldr	d7, [r3]
 8004698:	ee36 7b07 	vadd.f64	d7, d6, d7
 800469c:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8004928 <IVK+0x2e40>
 80046a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80046a4:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8004980 <IVK+0x2e98>
 80046a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80046ac:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8004968 <IVK+0x2e80>
 80046b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80046b4:	ed9f 6b9e 	vldr	d6, [pc, #632]	; 8004930 <IVK+0x2e48>
 80046b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80046bc:	eeb0 0b47 	vmov.f64	d0, d7
 80046c0:	f012 fe4a 	bl	8017358 <sin>
 80046c4:	eeb0 7b40 	vmov.f64	d7, d0
	          211366.80000000002 *
 80046c8:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8004940 <IVK+0x2e58>
 80046cc:	ee27 9b06 	vmul.f64	d9, d7, d6
	                   -0.73665) +
	                  1.52205) *
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 80046d0:	f107 030c 	add.w	r3, r7, #12
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3308      	adds	r3, #8
 80046d8:	ed93 6b00 	vldr	d6, [r3]
 80046dc:	f107 030c 	add.w	r3, r7, #12
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3310      	adds	r3, #16
 80046e4:	ed93 7b00 	vldr	d7, [r3]
 80046e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80046ec:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 8004928 <IVK+0x2e40>
 80046f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80046f4:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8004980 <IVK+0x2e98>
 80046f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80046fc:	eeb0 0b47 	vmov.f64	d0, d7
 8004700:	f012 fdd6 	bl	80172b0 <cos>
 8004704:	eeb0 7b40 	vmov.f64	d7, d0
	                  1.52205) *
 8004708:	ee29 9b07 	vmul.f64	d9, d9, d7
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 800470c:	f107 030c 	add.w	r3, r7, #12
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3308      	adds	r3, #8
 8004714:	ed93 7b00 	vldr	d7, [r3]
 8004718:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8004928 <IVK+0x2e40>
 800471c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004720:	eeb0 0b47 	vmov.f64	d0, d7
 8004724:	f012 fe18 	bl	8017358 <sin>
 8004728:	eeb0 7b40 	vmov.f64	d7, d0
 800472c:	ee29 6b07 	vmul.f64	d6, d9, d7
 8004730:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8004734:	ee26 7b07 	vmul.f64	d7, d6, d7
	               cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 8004738:	ee38 8b07 	vadd.f64	d8, d8, d7
	              f_J_inv_tmp_tmp) -
	         211366.80000000002 *
	             sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800473c:	f107 030c 	add.w	r3, r7, #12
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3308      	adds	r3, #8
 8004744:	ed93 6b00 	vldr	d6, [r3]
 8004748:	f107 030c 	add.w	r3, r7, #12
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3310      	adds	r3, #16
 8004750:	ed93 7b00 	vldr	d7, [r3]
 8004754:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004758:	ee36 6b07 	vadd.f64	d6, d6, d7
 800475c:	f107 030c 	add.w	r3, r7, #12
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3318      	adds	r3, #24
 8004764:	ed93 7b00 	vldr	d7, [r3]
 8004768:	ee36 7b07 	vadd.f64	d7, d6, d7
 800476c:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8004928 <IVK+0x2e40>
 8004770:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004774:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8004980 <IVK+0x2e98>
 8004778:	ee37 7b46 	vsub.f64	d7, d7, d6
 800477c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8004968 <IVK+0x2e80>
 8004780:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004784:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8004930 <IVK+0x2e48>
 8004788:	ee37 7b06 	vadd.f64	d7, d7, d6
 800478c:	eeb0 0b47 	vmov.f64	d0, d7
 8004790:	f012 fde2 	bl	8017358 <sin>
 8004794:	eeb0 7b40 	vmov.f64	d7, d0
	         211366.80000000002 *
 8004798:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8004940 <IVK+0x2e58>
 800479c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                  -0.73665) +
	                 1.52205) *
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 80047a0:	f107 030c 	add.w	r3, r7, #12
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3308      	adds	r3, #8
 80047a8:	ed93 6b00 	vldr	d6, [r3]
 80047ac:	f107 030c 	add.w	r3, r7, #12
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3310      	adds	r3, #16
 80047b4:	ed93 7b00 	vldr	d7, [r3]
 80047b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80047bc:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8004928 <IVK+0x2e40>
 80047c0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80047c4:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8004980 <IVK+0x2e98>
 80047c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80047cc:	eeb0 0b47 	vmov.f64	d0, d7
 80047d0:	f012 fdc2 	bl	8017358 <sin>
 80047d4:	eeb0 7b40 	vmov.f64	d7, d0
	                 1.52205) *
 80047d8:	ee29 9b07 	vmul.f64	d9, d9, d7
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 80047dc:	f107 030c 	add.w	r3, r7, #12
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3308      	adds	r3, #8
 80047e4:	ed93 7b00 	vldr	d7, [r3]
 80047e8:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8004928 <IVK+0x2e40>
 80047ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80047f0:	eeb0 0b47 	vmov.f64	d0, d7
 80047f4:	f012 fd5c 	bl	80172b0 <cos>
 80047f8:	eeb0 7b40 	vmov.f64	d7, d0
 80047fc:	ee29 6b07 	vmul.f64	d6, d9, d7
 8004800:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8004804:	ee26 7b07 	vmul.f64	d7, d6, d7
	              f_J_inv_tmp_tmp) -
 8004808:	ee38 7b47 	vsub.f64	d7, d8, d7
	      -(4.0 *
 800480c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8004810:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004814:	eeb1 5b47 	vneg.f64	d5, d7
	             f_J_inv_tmp_tmp)) /
 8004818:	ed97 6b7a 	vldr	d6, [r7, #488]	; 0x1e8
 800481c:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[8] =
 8004820:	f107 0310 	add.w	r3, r7, #16
 8004824:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	      d;
	  d9 = 9.0 * d11;
 8004828:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 800482c:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8004830:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004834:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
	  dv[13] = -(40.0 * f_J_inv_tmp_tmp *
 8004838:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800483c:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8004958 <IVK+0x2e70>
 8004840:	ee27 8b06 	vmul.f64	d8, d7, d6
	             (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8004844:	f107 030c 	add.w	r3, r7, #12
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	3308      	adds	r3, #8
 800484c:	ed93 6b00 	vldr	d6, [r3]
 8004850:	f107 030c 	add.w	r3, r7, #12
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3310      	adds	r3, #16
 8004858:	ed93 7b00 	vldr	d7, [r3]
 800485c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004860:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8004928 <IVK+0x2e40>
 8004864:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004868:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8004980 <IVK+0x2e98>
 800486c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004870:	eeb0 0b47 	vmov.f64	d0, d7
 8004874:	f012 fd1c 	bl	80172b0 <cos>
 8004878:	eeb0 7b40 	vmov.f64	d7, d0
 800487c:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8004948 <IVK+0x2e60>
 8004880:	ee27 6b06 	vmul.f64	d6, d7, d6
	              704.556 * b_J_inv_tmp_tmp)) /
 8004884:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8004888:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8004950 <IVK+0x2e68>
 800488c:	ee27 7b05 	vmul.f64	d7, d7, d5
	             (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8004890:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[13] = -(40.0 * f_J_inv_tmp_tmp *
 8004894:	ee28 7b07 	vmul.f64	d7, d8, d7
 8004898:	eeb1 5b47 	vneg.f64	d5, d7
	              704.556 * b_J_inv_tmp_tmp)) /
 800489c:	ed97 6b50 	vldr	d6, [r7, #320]	; 0x140
 80048a0:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[13] = -(40.0 * f_J_inv_tmp_tmp *
 80048a4:	f107 0310 	add.w	r3, r7, #16
 80048a8:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	           d9;
	  dv[18] =
	      -(40.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 80048ac:	f107 030c 	add.w	r3, r7, #12
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3308      	adds	r3, #8
 80048b4:	ed93 6b00 	vldr	d6, [r3]
 80048b8:	f107 030c 	add.w	r3, r7, #12
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	3310      	adds	r3, #16
 80048c0:	ed93 7b00 	vldr	d7, [r3]
 80048c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80048c8:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8004928 <IVK+0x2e40>
 80048cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80048d0:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8004980 <IVK+0x2e98>
 80048d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80048d8:	eeb0 0b47 	vmov.f64	d0, d7
 80048dc:	f012 fce8 	bl	80172b0 <cos>
 80048e0:	eeb0 7b40 	vmov.f64	d7, d0
 80048e4:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8004948 <IVK+0x2e60>
 80048e8:	ee27 8b06 	vmul.f64	d8, d7, d6
 80048ec:	f107 030c 	add.w	r3, r7, #12
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	ed93 7b00 	vldr	d7, [r3]
 80048f6:	eeb0 0b47 	vmov.f64	d0, d7
 80048fa:	f012 fd2d 	bl	8017358 <sin>
 80048fe:	eeb0 7b40 	vmov.f64	d7, d0
 8004902:	ee28 8b07 	vmul.f64	d8, d8, d7
	                704.556 * cos(q[1] + 1.6845) * d_J_inv_tmp_tmp)) /
 8004906:	f107 030c 	add.w	r3, r7, #12
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3308      	adds	r3, #8
 800490e:	ed93 7b00 	vldr	d7, [r3]
 8004912:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8004928 <IVK+0x2e40>
 8004916:	ee37 7b06 	vadd.f64	d7, d7, d6
 800491a:	eeb0 0b47 	vmov.f64	d0, d7
 800491e:	f012 fcc7 	bl	80172b0 <cos>
 8004922:	eeb0 7b40 	vmov.f64	d7, d0
 8004926:	e033      	b.n	8004990 <IVK+0x2ea8>
 8004928:	45a1cac1 	.word	0x45a1cac1
 800492c:	3ffaf3b6 	.word	0x3ffaf3b6
 8004930:	19ce075f 	.word	0x19ce075f
 8004934:	3ff85a51 	.word	0x3ff85a51
 8004938:	eaa8eb47 	.word	0xeaa8eb47
 800493c:	414610aa 	.word	0x414610aa
 8004940:	66666667 	.word	0x66666667
 8004944:	4109cd36 	.word	0x4109cd36
 8004948:	00000000 	.word	0x00000000
 800494c:	404e0000 	.word	0x404e0000
 8004950:	b020c49c 	.word	0xb020c49c
 8004954:	40860472 	.word	0x40860472
 8004958:	00000000 	.word	0x00000000
 800495c:	40440000 	.word	0x40440000
 8004960:	28f5c28f 	.word	0x28f5c28f
 8004964:	410b0efc 	.word	0x410b0efc
 8004968:	05532618 	.word	0x05532618
 800496c:	3fe792a3 	.word	0x3fe792a3
 8004970:	0664d3c0 	.word	0x0664d3c0
 8004974:	4143dbcd 	.word	0x4143dbcd
 8004978:	45a1cac1 	.word	0x45a1cac1
 800497c:	3ffaf3b6 	.word	0x3ffaf3b6
 8004980:	39581062 	.word	0x39581062
 8004984:	3fecc8b4 	.word	0x3fecc8b4
 8004988:	f5c28f5d 	.word	0xf5c28f5d
 800498c:	410738b0 	.word	0x410738b0
 8004990:	ed1f 6b11 	vldr	d6, [pc, #-68]	; 8004950 <IVK+0x2e68>
 8004994:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004998:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800499c:	ee26 7b07 	vmul.f64	d7, d6, d7
	      -(40.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 80049a0:	ee38 7b07 	vadd.f64	d7, d8, d7
 80049a4:	ed1f 6b14 	vldr	d6, [pc, #-80]	; 8004958 <IVK+0x2e70>
 80049a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80049ac:	eeb1 5b47 	vneg.f64	d5, d7
	                704.556 * cos(q[1] + 1.6845) * d_J_inv_tmp_tmp)) /
 80049b0:	ed97 6b50 	vldr	d6, [r7, #320]	; 0x140
 80049b4:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[18] =
 80049b8:	f107 0310 	add.w	r3, r7, #16
 80049bc:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
	      d9;
	  dv[23] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 80049c0:	f107 030c 	add.w	r3, r7, #12
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3308      	adds	r3, #8
 80049c8:	ed93 6b00 	vldr	d6, [r3]
 80049cc:	f107 030c 	add.w	r3, r7, #12
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	3310      	adds	r3, #16
 80049d4:	ed93 7b00 	vldr	d7, [r3]
 80049d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80049dc:	ed1f 6b1a 	vldr	d6, [pc, #-104]	; 8004978 <IVK+0x2e90>
 80049e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80049e4:	ed1f 6b1a 	vldr	d6, [pc, #-104]	; 8004980 <IVK+0x2e98>
 80049e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80049ec:	eeb0 0b47 	vmov.f64	d0, d7
 80049f0:	f012 fcb2 	bl	8017358 <sin>
 80049f4:	eeb0 7b40 	vmov.f64	d7, d0
 80049f8:	ed1f 6b2d 	vldr	d6, [pc, #-180]	; 8004948 <IVK+0x2e60>
 80049fc:	ee27 6b06 	vmul.f64	d6, d7, d6
	                     704.556 * e_J_inv_tmp_tmp)) /
 8004a00:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8004a04:	ed1f 5b2e 	vldr	d5, [pc, #-184]	; 8004950 <IVK+0x2e68>
 8004a08:	ee27 7b05 	vmul.f64	d7, d7, d5
	  dv[23] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8004a0c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004a10:	ed1f 6b2f 	vldr	d6, [pc, #-188]	; 8004958 <IVK+0x2e70>
 8004a14:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004a18:	eeb1 5b47 	vneg.f64	d5, d7
	                     704.556 * e_J_inv_tmp_tmp)) /
 8004a1c:	ed97 6b50 	vldr	d6, [r7, #320]	; 0x140
 8004a20:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[23] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8004a24:	f107 0310 	add.w	r3, r7, #16
 8004a28:	ed83 7b2e 	vstr	d7, [r3, #184]	; 0xb8
	           d9;
	  dv[4] =
	      4.0 *
	      (((((((((((((((221663.52 *
	                         sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8004a2c:	f107 030c 	add.w	r3, r7, #12
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	3308      	adds	r3, #8
 8004a34:	ed93 6b00 	vldr	d6, [r3]
 8004a38:	f107 030c 	add.w	r3, r7, #12
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	3310      	adds	r3, #16
 8004a40:	ed93 7b00 	vldr	d7, [r3]
 8004a44:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004a48:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004a4c:	ed1f 6b36 	vldr	d6, [pc, #-216]	; 8004978 <IVK+0x2e90>
 8004a50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004a54:	ed1f 6b36 	vldr	d6, [pc, #-216]	; 8004980 <IVK+0x2e98>
 8004a58:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004a5c:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 8004968 <IVK+0x2e80>
 8004a60:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004a64:	eeb0 0b47 	vmov.f64	d0, d7
 8004a68:	f012 fc76 	bl	8017358 <sin>
 8004a6c:	eeb0 7b40 	vmov.f64	d7, d0
	      (((((((((((((((221663.52 *
 8004a70:	ed1f 6b45 	vldr	d6, [pc, #-276]	; 8004960 <IVK+0x2e78>
 8004a74:	ee27 8b06 	vmul.f64	d8, d7, d6
	                             -0.73665) *
	                         cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) -
 8004a78:	f107 030c 	add.w	r3, r7, #12
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3308      	adds	r3, #8
 8004a80:	ed93 6b00 	vldr	d6, [r3]
 8004a84:	f107 030c 	add.w	r3, r7, #12
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3310      	adds	r3, #16
 8004a8c:	ed93 7b00 	vldr	d7, [r3]
 8004a90:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004a94:	ed1f 6b48 	vldr	d6, [pc, #-288]	; 8004978 <IVK+0x2e90>
 8004a98:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004a9c:	ed1f 6b48 	vldr	d6, [pc, #-288]	; 8004980 <IVK+0x2e98>
 8004aa0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004aa4:	eeb0 0b47 	vmov.f64	d0, d7
 8004aa8:	f012 fc02 	bl	80172b0 <cos>
 8004aac:	eeb0 7b40 	vmov.f64	d7, d0
	                             -0.73665) *
 8004ab0:	ee28 8b07 	vmul.f64	d8, d8, d7
	                         cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) -
 8004ab4:	f107 030c 	add.w	r3, r7, #12
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	ed93 7b00 	vldr	d7, [r3]
 8004abe:	eeb0 0b47 	vmov.f64	d0, d7
 8004ac2:	f012 fbf5 	bl	80172b0 <cos>
 8004ac6:	eeb0 7b40 	vmov.f64	d7, d0
 8004aca:	ee28 8b07 	vmul.f64	d8, d8, d7
	                     221663.52 *
	                         cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8004ace:	f107 030c 	add.w	r3, r7, #12
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	ed93 6b00 	vldr	d6, [r3]
 8004ada:	f107 030c 	add.w	r3, r7, #12
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3310      	adds	r3, #16
 8004ae2:	ed93 7b00 	vldr	d7, [r3]
 8004ae6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004aea:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004aee:	ed1f 6b5e 	vldr	d6, [pc, #-376]	; 8004978 <IVK+0x2e90>
 8004af2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004af6:	ed1f 6b5e 	vldr	d6, [pc, #-376]	; 8004980 <IVK+0x2e98>
 8004afa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004afe:	ed1f 6b66 	vldr	d6, [pc, #-408]	; 8004968 <IVK+0x2e80>
 8004b02:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004b06:	eeb0 0b47 	vmov.f64	d0, d7
 8004b0a:	f012 fbd1 	bl	80172b0 <cos>
 8004b0e:	eeb0 7b40 	vmov.f64	d7, d0
	                     221663.52 *
 8004b12:	ed1f 6b6d 	vldr	d6, [pc, #-436]	; 8004960 <IVK+0x2e78>
 8004b16:	ee27 9b06 	vmul.f64	d9, d7, d6
	                             -0.73665) *
	                         sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 8004b1a:	f107 030c 	add.w	r3, r7, #12
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3308      	adds	r3, #8
 8004b22:	ed93 6b00 	vldr	d6, [r3]
 8004b26:	f107 030c 	add.w	r3, r7, #12
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3310      	adds	r3, #16
 8004b2e:	ed93 7b00 	vldr	d7, [r3]
 8004b32:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004b36:	ed1f 6b70 	vldr	d6, [pc, #-448]	; 8004978 <IVK+0x2e90>
 8004b3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004b3e:	ed1f 6b70 	vldr	d6, [pc, #-448]	; 8004980 <IVK+0x2e98>
 8004b42:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004b46:	eeb0 0b47 	vmov.f64	d0, d7
 8004b4a:	f012 fc05 	bl	8017358 <sin>
 8004b4e:	eeb0 7b40 	vmov.f64	d7, d0
	                             -0.73665) *
 8004b52:	ee29 9b07 	vmul.f64	d9, d9, d7
	                         sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 8004b56:	f107 030c 	add.w	r3, r7, #12
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	ed93 7b00 	vldr	d7, [r3]
 8004b60:	eeb0 0b47 	vmov.f64	d0, d7
 8004b64:	f012 fba4 	bl	80172b0 <cos>
 8004b68:	eeb0 7b40 	vmov.f64	d7, d0
 8004b6c:	ee29 7b07 	vmul.f64	d7, d9, d7
	                         cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) -
 8004b70:	ee38 8b47 	vsub.f64	d8, d8, d7
	                    2.6029060499520004E+6 *
	                        cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8004b74:	f107 030c 	add.w	r3, r7, #12
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3308      	adds	r3, #8
 8004b7c:	ed93 6b00 	vldr	d6, [r3]
 8004b80:	f107 030c 	add.w	r3, r7, #12
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3310      	adds	r3, #16
 8004b88:	ed93 7b00 	vldr	d7, [r3]
 8004b8c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004b90:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004b94:	ed1f 6b88 	vldr	d6, [pc, #-544]	; 8004978 <IVK+0x2e90>
 8004b98:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004b9c:	ed1f 6b88 	vldr	d6, [pc, #-544]	; 8004980 <IVK+0x2e98>
 8004ba0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004ba4:	ed1f 6b90 	vldr	d6, [pc, #-576]	; 8004968 <IVK+0x2e80>
 8004ba8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004bac:	eeb0 0b47 	vmov.f64	d0, d7
 8004bb0:	f012 fb7e 	bl	80172b0 <cos>
 8004bb4:	eeb0 7b40 	vmov.f64	d7, d0
	                    2.6029060499520004E+6 *
 8004bb8:	ed1f 6b93 	vldr	d6, [pc, #-588]	; 8004970 <IVK+0x2e88>
 8004bbc:	ee27 9b06 	vmul.f64	d9, d7, d6
	                            -0.73665) *
	                        sin(q[1] + 1.6845) * cos(q[0])) +
 8004bc0:	f107 030c 	add.w	r3, r7, #12
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3308      	adds	r3, #8
 8004bc8:	ed93 7b00 	vldr	d7, [r3]
 8004bcc:	ed1f 6b96 	vldr	d6, [pc, #-600]	; 8004978 <IVK+0x2e90>
 8004bd0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004bd4:	eeb0 0b47 	vmov.f64	d0, d7
 8004bd8:	f012 fbbe 	bl	8017358 <sin>
 8004bdc:	eeb0 7b40 	vmov.f64	d7, d0
	                            -0.73665) *
 8004be0:	ee29 9b07 	vmul.f64	d9, d9, d7
	                        sin(q[1] + 1.6845) * cos(q[0])) +
 8004be4:	f107 030c 	add.w	r3, r7, #12
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	ed93 7b00 	vldr	d7, [r3]
 8004bee:	eeb0 0b47 	vmov.f64	d0, d7
 8004bf2:	f012 fb5d 	bl	80172b0 <cos>
 8004bf6:	eeb0 7b40 	vmov.f64	d7, d0
 8004bfa:	ee29 7b07 	vmul.f64	d7, d9, d7
	                         sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 8004bfe:	ee38 8b47 	vsub.f64	d8, d8, d7
	                   2.6029060499520004E+6 *
	                       sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8004c02:	f107 030c 	add.w	r3, r7, #12
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3308      	adds	r3, #8
 8004c0a:	ed93 6b00 	vldr	d6, [r3]
 8004c0e:	f107 030c 	add.w	r3, r7, #12
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3310      	adds	r3, #16
 8004c16:	ed93 7b00 	vldr	d7, [r3]
 8004c1a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004c1e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004c22:	ed1f 6bab 	vldr	d6, [pc, #-684]	; 8004978 <IVK+0x2e90>
 8004c26:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004c2a:	ed1f 6bab 	vldr	d6, [pc, #-684]	; 8004980 <IVK+0x2e98>
 8004c2e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004c32:	ed1f 6bb3 	vldr	d6, [pc, #-716]	; 8004968 <IVK+0x2e80>
 8004c36:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004c3a:	eeb0 0b47 	vmov.f64	d0, d7
 8004c3e:	f012 fb8b 	bl	8017358 <sin>
 8004c42:	eeb0 7b40 	vmov.f64	d7, d0
	                   2.6029060499520004E+6 *
 8004c46:	ed1f 6bb6 	vldr	d6, [pc, #-728]	; 8004970 <IVK+0x2e88>
 8004c4a:	ee27 9b06 	vmul.f64	d9, d7, d6
	                           -0.73665) *
	                       cos(q[1] + 1.6845) * cos(q[0])) -
 8004c4e:	f107 030c 	add.w	r3, r7, #12
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3308      	adds	r3, #8
 8004c56:	ed93 7b00 	vldr	d7, [r3]
 8004c5a:	ed1f 6bb9 	vldr	d6, [pc, #-740]	; 8004978 <IVK+0x2e90>
 8004c5e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004c62:	eeb0 0b47 	vmov.f64	d0, d7
 8004c66:	f012 fb23 	bl	80172b0 <cos>
 8004c6a:	eeb0 7b40 	vmov.f64	d7, d0
	                           -0.73665) *
 8004c6e:	ee29 9b07 	vmul.f64	d9, d9, d7
	                       cos(q[1] + 1.6845) * cos(q[0])) -
 8004c72:	f107 030c 	add.w	r3, r7, #12
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	ed93 7b00 	vldr	d7, [r3]
 8004c7c:	eeb0 0b47 	vmov.f64	d0, d7
 8004c80:	f012 fb16 	bl	80172b0 <cos>
 8004c84:	eeb0 7b40 	vmov.f64	d7, d0
 8004c88:	ee29 7b07 	vmul.f64	d7, d9, d7
	                        sin(q[1] + 1.6845) * cos(q[0])) +
 8004c8c:	ee38 8b07 	vadd.f64	d8, d8, d7
	                  190230.12000000002 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004c90:	f107 030c 	add.w	r3, r7, #12
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3308      	adds	r3, #8
 8004c98:	ed93 6b00 	vldr	d6, [r3]
 8004c9c:	f107 030c 	add.w	r3, r7, #12
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3310      	adds	r3, #16
 8004ca4:	ed93 7b00 	vldr	d7, [r3]
 8004ca8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004cac:	ed1f 6bce 	vldr	d6, [pc, #-824]	; 8004978 <IVK+0x2e90>
 8004cb0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004cb4:	ed1f 6bce 	vldr	d6, [pc, #-824]	; 8004980 <IVK+0x2e98>
 8004cb8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004cbc:	eeb0 0b47 	vmov.f64	d0, d7
 8004cc0:	f012 faf6 	bl	80172b0 <cos>
 8004cc4:	eeb0 7b40 	vmov.f64	d7, d0
 8004cc8:	ed1f 6bd1 	vldr	d6, [pc, #-836]	; 8004988 <IVK+0x2ea0>
 8004ccc:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      sin(q[1] + 1.6845) * cos(q[0])) +
 8004cd0:	f107 030c 	add.w	r3, r7, #12
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	ed93 7b00 	vldr	d7, [r3]
 8004cdc:	ed1f 6bda 	vldr	d6, [pc, #-872]	; 8004978 <IVK+0x2e90>
 8004ce0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004ce4:	eeb0 0b47 	vmov.f64	d0, d7
 8004ce8:	f012 fb36 	bl	8017358 <sin>
 8004cec:	eeb0 7b40 	vmov.f64	d7, d0
	                  190230.12000000002 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004cf0:	ee29 9b07 	vmul.f64	d9, d9, d7
	                      sin(q[1] + 1.6845) * cos(q[0])) +
 8004cf4:	f107 030c 	add.w	r3, r7, #12
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	ed93 7b00 	vldr	d7, [r3]
 8004cfe:	eeb0 0b47 	vmov.f64	d0, d7
 8004d02:	f012 fad5 	bl	80172b0 <cos>
 8004d06:	eeb0 7b40 	vmov.f64	d7, d0
 8004d0a:	ee29 7b07 	vmul.f64	d7, d9, d7
	                       cos(q[1] + 1.6845) * cos(q[0])) -
 8004d0e:	ee38 8b47 	vsub.f64	d8, d8, d7
	                 190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004d12:	f107 030c 	add.w	r3, r7, #12
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3308      	adds	r3, #8
 8004d1a:	ed93 6b00 	vldr	d6, [r3]
 8004d1e:	f107 030c 	add.w	r3, r7, #12
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3310      	adds	r3, #16
 8004d26:	ed93 7b00 	vldr	d7, [r3]
 8004d2a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004d2e:	ed1f 6bee 	vldr	d6, [pc, #-952]	; 8004978 <IVK+0x2e90>
 8004d32:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004d36:	ed1f 6bee 	vldr	d6, [pc, #-952]	; 8004980 <IVK+0x2e98>
 8004d3a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004d3e:	eeb0 0b47 	vmov.f64	d0, d7
 8004d42:	f012 fb09 	bl	8017358 <sin>
 8004d46:	eeb0 7b40 	vmov.f64	d7, d0
 8004d4a:	ed1f 6bf1 	vldr	d6, [pc, #-964]	; 8004988 <IVK+0x2ea0>
 8004d4e:	ee27 9b06 	vmul.f64	d9, d7, d6
	                     cos(q[1] + 1.6845) * cos(q[0])) +
 8004d52:	f107 030c 	add.w	r3, r7, #12
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3308      	adds	r3, #8
 8004d5a:	ed93 7b00 	vldr	d7, [r3]
 8004d5e:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8005110 <IVK+0x3628>
 8004d62:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004d66:	eeb0 0b47 	vmov.f64	d0, d7
 8004d6a:	f012 faa1 	bl	80172b0 <cos>
 8004d6e:	eeb0 7b40 	vmov.f64	d7, d0
	                 190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004d72:	ee29 9b07 	vmul.f64	d9, d9, d7
	                     cos(q[1] + 1.6845) * cos(q[0])) +
 8004d76:	f107 030c 	add.w	r3, r7, #12
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	ed93 7b00 	vldr	d7, [r3]
 8004d80:	eeb0 0b47 	vmov.f64	d0, d7
 8004d84:	f012 fa94 	bl	80172b0 <cos>
 8004d88:	eeb0 7b40 	vmov.f64	d7, d0
 8004d8c:	ee29 7b07 	vmul.f64	d7, d9, d7
	                      sin(q[1] + 1.6845) * cos(q[0])) +
 8004d90:	ee38 6b07 	vadd.f64	d6, d8, d7
	                     cos(q[1] + 1.6845) * cos(q[0])) +
 8004d94:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 8004d98:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d16) +
 8004d9c:	ed97 7b40 	vldr	d7, [r7, #256]	; 0x100
 8004da0:	ee36 8b07 	vadd.f64	d8, d6, d7
	               d17) +
	              87600.0 *
	                  cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004da4:	f107 030c 	add.w	r3, r7, #12
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	3308      	adds	r3, #8
 8004dac:	ed93 6b00 	vldr	d6, [r3]
 8004db0:	f107 030c 	add.w	r3, r7, #12
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3310      	adds	r3, #16
 8004db8:	ed93 7b00 	vldr	d7, [r3]
 8004dbc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004dc0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004dc4:	f107 030c 	add.w	r3, r7, #12
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3318      	adds	r3, #24
 8004dcc:	ed93 7b00 	vldr	d7, [r3]
 8004dd0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004dd4:	ed9f 6bce 	vldr	d6, [pc, #824]	; 8005110 <IVK+0x3628>
 8004dd8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004ddc:	ed9f 6bdc 	vldr	d6, [pc, #880]	; 8005150 <IVK+0x3668>
 8004de0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004de4:	ed9f 6bd6 	vldr	d6, [pc, #856]	; 8005140 <IVK+0x3658>
 8004de8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004dec:	ed9f 6bd2 	vldr	d6, [pc, #840]	; 8005138 <IVK+0x3650>
 8004df0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004df4:	eeb0 0b47 	vmov.f64	d0, d7
 8004df8:	f012 fa5a 	bl	80172b0 <cos>
 8004dfc:	eeb0 7b40 	vmov.f64	d7, d0
	              87600.0 *
 8004e00:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 8005118 <IVK+0x3630>
 8004e04:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004e08:	f107 030c 	add.w	r3, r7, #12
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3308      	adds	r3, #8
 8004e10:	ed93 6b00 	vldr	d6, [r3]
 8004e14:	f107 030c 	add.w	r3, r7, #12
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3310      	adds	r3, #16
 8004e1c:	ed93 7b00 	vldr	d7, [r3]
 8004e20:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004e24:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004e28:	f107 030c 	add.w	r3, r7, #12
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3318      	adds	r3, #24
 8004e30:	ed93 7b00 	vldr	d7, [r3]
 8004e34:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004e38:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 8005110 <IVK+0x3628>
 8004e3c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e40:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8005150 <IVK+0x3668>
 8004e44:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004e48:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8005140 <IVK+0x3658>
 8004e4c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004e50:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8005138 <IVK+0x3650>
 8004e54:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e58:	eeb0 0b47 	vmov.f64	d0, d7
 8004e5c:	f012 fa7c 	bl	8017358 <sin>
 8004e60:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 8004e64:	ee29 9b07 	vmul.f64	d9, d9, d7
	                       -0.73665) +
	                      1.52205) *
	                  cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 8004e68:	f107 030c 	add.w	r3, r7, #12
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	3308      	adds	r3, #8
 8004e70:	ed93 6b00 	vldr	d6, [r3]
 8004e74:	f107 030c 	add.w	r3, r7, #12
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3310      	adds	r3, #16
 8004e7c:	ed93 7b00 	vldr	d7, [r3]
 8004e80:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004e84:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8005110 <IVK+0x3628>
 8004e88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e8c:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8005150 <IVK+0x3668>
 8004e90:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004e94:	eeb0 0b47 	vmov.f64	d0, d7
 8004e98:	f012 fa0a 	bl	80172b0 <cos>
 8004e9c:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 8004ea0:	ee29 9b07 	vmul.f64	d9, d9, d7
	                  cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 8004ea4:	f107 030c 	add.w	r3, r7, #12
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	ed93 7b00 	vldr	d7, [r3]
 8004eae:	eeb0 0b47 	vmov.f64	d0, d7
 8004eb2:	f012 fa51 	bl	8017358 <sin>
 8004eb6:	eeb0 7b40 	vmov.f64	d7, d0
 8004eba:	ee29 7b07 	vmul.f64	d7, d9, d7
	               d17) +
 8004ebe:	ee38 8b07 	vadd.f64	d8, d8, d7
	             1.02865176E+6 *
	                 cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004ec2:	f107 030c 	add.w	r3, r7, #12
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3308      	adds	r3, #8
 8004eca:	ed93 6b00 	vldr	d6, [r3]
 8004ece:	f107 030c 	add.w	r3, r7, #12
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3310      	adds	r3, #16
 8004ed6:	ed93 7b00 	vldr	d7, [r3]
 8004eda:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004ede:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004ee2:	f107 030c 	add.w	r3, r7, #12
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	3318      	adds	r3, #24
 8004eea:	ed93 7b00 	vldr	d7, [r3]
 8004eee:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004ef2:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8005110 <IVK+0x3628>
 8004ef6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004efa:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8005150 <IVK+0x3668>
 8004efe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004f02:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8005140 <IVK+0x3658>
 8004f06:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004f0a:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8005138 <IVK+0x3650>
 8004f0e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004f12:	eeb0 0b47 	vmov.f64	d0, d7
 8004f16:	f012 f9cb 	bl	80172b0 <cos>
 8004f1a:	eeb0 7b40 	vmov.f64	d7, d0
	             1.02865176E+6 *
 8004f1e:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8005120 <IVK+0x3638>
 8004f22:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      -0.73665) +
	                     1.52205) *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004f26:	f107 030c 	add.w	r3, r7, #12
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3308      	adds	r3, #8
 8004f2e:	ed93 6b00 	vldr	d6, [r3]
 8004f32:	f107 030c 	add.w	r3, r7, #12
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	3310      	adds	r3, #16
 8004f3a:	ed93 7b00 	vldr	d7, [r3]
 8004f3e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004f42:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004f46:	f107 030c 	add.w	r3, r7, #12
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	3318      	adds	r3, #24
 8004f4e:	ed93 7b00 	vldr	d7, [r3]
 8004f52:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f56:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8005110 <IVK+0x3628>
 8004f5a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004f5e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8005150 <IVK+0x3668>
 8004f62:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004f66:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8005140 <IVK+0x3658>
 8004f6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004f6e:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8005138 <IVK+0x3650>
 8004f72:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004f76:	eeb0 0b47 	vmov.f64	d0, d7
 8004f7a:	f012 f9ed 	bl	8017358 <sin>
 8004f7e:	eeb0 7b40 	vmov.f64	d7, d0
	                     1.52205) *
 8004f82:	ee29 9b07 	vmul.f64	d9, d9, d7
	                      -0.73665) +
	                     1.52205) *
	                 cos(q[1] + 1.6845) * sin(q[0])) +
 8004f86:	f107 030c 	add.w	r3, r7, #12
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	ed93 7b00 	vldr	d7, [r3]
 8004f92:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8005110 <IVK+0x3628>
 8004f96:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004f9a:	eeb0 0b47 	vmov.f64	d0, d7
 8004f9e:	f012 f987 	bl	80172b0 <cos>
 8004fa2:	eeb0 7b40 	vmov.f64	d7, d0
	                     1.52205) *
 8004fa6:	ee29 9b07 	vmul.f64	d9, d9, d7
	                 cos(q[1] + 1.6845) * sin(q[0])) +
 8004faa:	f107 030c 	add.w	r3, r7, #12
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	ed93 7b00 	vldr	d7, [r3]
 8004fb4:	eeb0 0b47 	vmov.f64	d0, d7
 8004fb8:	f012 f9ce 	bl	8017358 <sin>
 8004fbc:	eeb0 7b40 	vmov.f64	d7, d0
 8004fc0:	ee29 7b07 	vmul.f64	d7, d9, d7
	                  cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 8004fc4:	ee38 8b07 	vadd.f64	d8, d8, d7
	            246292.8 *
	                sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004fc8:	f107 030c 	add.w	r3, r7, #12
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	3308      	adds	r3, #8
 8004fd0:	ed93 6b00 	vldr	d6, [r3]
 8004fd4:	f107 030c 	add.w	r3, r7, #12
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3310      	adds	r3, #16
 8004fdc:	ed93 7b00 	vldr	d7, [r3]
 8004fe0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004fe4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004fe8:	f107 030c 	add.w	r3, r7, #12
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3318      	adds	r3, #24
 8004ff0:	ed93 7b00 	vldr	d7, [r3]
 8004ff4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004ff8:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8005110 <IVK+0x3628>
 8004ffc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005000:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8005150 <IVK+0x3668>
 8005004:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005008:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8005140 <IVK+0x3658>
 800500c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005010:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8005138 <IVK+0x3650>
 8005014:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005018:	eeb0 0b47 	vmov.f64	d0, d7
 800501c:	f012 f99c 	bl	8017358 <sin>
 8005020:	eeb0 7b40 	vmov.f64	d7, d0
	            246292.8 *
 8005024:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8005128 <IVK+0x3640>
 8005028:	ee27 9b06 	vmul.f64	d9, d7, d6
	                     -0.73665) +
	                    1.52205) *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800502c:	f107 030c 	add.w	r3, r7, #12
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3308      	adds	r3, #8
 8005034:	ed93 6b00 	vldr	d6, [r3]
 8005038:	f107 030c 	add.w	r3, r7, #12
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	3310      	adds	r3, #16
 8005040:	ed93 7b00 	vldr	d7, [r3]
 8005044:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005048:	ee36 7b07 	vadd.f64	d7, d6, d7
 800504c:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8005110 <IVK+0x3628>
 8005050:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005054:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8005150 <IVK+0x3668>
 8005058:	ee37 7b46 	vsub.f64	d7, d7, d6
 800505c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8005140 <IVK+0x3658>
 8005060:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005064:	eeb0 0b47 	vmov.f64	d0, d7
 8005068:	f012 f922 	bl	80172b0 <cos>
 800506c:	eeb0 7b40 	vmov.f64	d7, d0
	                    1.52205) *
 8005070:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) -
 8005074:	f107 030c 	add.w	r3, r7, #12
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3308      	adds	r3, #8
 800507c:	ed93 6b00 	vldr	d6, [r3]
 8005080:	f107 030c 	add.w	r3, r7, #12
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3310      	adds	r3, #16
 8005088:	ed93 7b00 	vldr	d7, [r3]
 800508c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005090:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8005110 <IVK+0x3628>
 8005094:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005098:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8005150 <IVK+0x3668>
 800509c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80050a0:	eeb0 0b47 	vmov.f64	d0, d7
 80050a4:	f012 f958 	bl	8017358 <sin>
 80050a8:	eeb0 7b40 	vmov.f64	d7, d0
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80050ac:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) -
 80050b0:	f107 030c 	add.w	r3, r7, #12
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	ed93 7b00 	vldr	d7, [r3]
 80050ba:	eeb0 0b47 	vmov.f64	d0, d7
 80050be:	f012 f94b 	bl	8017358 <sin>
 80050c2:	eeb0 7b40 	vmov.f64	d7, d0
 80050c6:	ee29 7b07 	vmul.f64	d7, d9, d7
	                 cos(q[1] + 1.6845) * sin(q[0])) +
 80050ca:	ee38 8b07 	vadd.f64	d8, d8, d7
	           246292.8 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80050ce:	f107 030c 	add.w	r3, r7, #12
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3308      	adds	r3, #8
 80050d6:	ed93 6b00 	vldr	d6, [r3]
 80050da:	f107 030c 	add.w	r3, r7, #12
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3310      	adds	r3, #16
 80050e2:	ed93 7b00 	vldr	d7, [r3]
 80050e6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80050ea:	ee36 6b07 	vadd.f64	d6, d6, d7
 80050ee:	f107 030c 	add.w	r3, r7, #12
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3318      	adds	r3, #24
 80050f6:	ed93 7b00 	vldr	d7, [r3]
 80050fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80050fe:	ed9f 6b04 	vldr	d6, [pc, #16]	; 8005110 <IVK+0x3628>
 8005102:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005106:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8005150 <IVK+0x3668>
 800510a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800510e:	e027      	b.n	8005160 <IVK+0x3678>
 8005110:	45a1cac1 	.word	0x45a1cac1
 8005114:	3ffaf3b6 	.word	0x3ffaf3b6
 8005118:	00000000 	.word	0x00000000
 800511c:	40f56300 	.word	0x40f56300
 8005120:	851eb852 	.word	0x851eb852
 8005124:	412f6457 	.word	0x412f6457
 8005128:	66666666 	.word	0x66666666
 800512c:	410e10a6 	.word	0x410e10a6
 8005130:	eaa8eb47 	.word	0xeaa8eb47
 8005134:	414610aa 	.word	0x414610aa
 8005138:	19ce075f 	.word	0x19ce075f
 800513c:	3ff85a51 	.word	0x3ff85a51
 8005140:	05532618 	.word	0x05532618
 8005144:	3fe792a3 	.word	0x3fe792a3
 8005148:	66666667 	.word	0x66666667
 800514c:	4109cd36 	.word	0x4109cd36
 8005150:	39581062 	.word	0x39581062
 8005154:	3fecc8b4 	.word	0x3fecc8b4
 8005158:	45a1cac1 	.word	0x45a1cac1
 800515c:	3ffaf3b6 	.word	0x3ffaf3b6
 8005160:	ed1f 6b09 	vldr	d6, [pc, #-36]	; 8005140 <IVK+0x3658>
 8005164:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005168:	ed1f 6b0d 	vldr	d6, [pc, #-52]	; 8005138 <IVK+0x3650>
 800516c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005170:	eeb0 0b47 	vmov.f64	d0, d7
 8005174:	f012 f8f0 	bl	8017358 <sin>
 8005178:	eeb0 7b40 	vmov.f64	d7, d0
	           246292.8 *
 800517c:	ed1f 6b16 	vldr	d6, [pc, #-88]	; 8005128 <IVK+0x3640>
 8005180:	ee27 9b06 	vmul.f64	d9, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005184:	f107 030c 	add.w	r3, r7, #12
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3308      	adds	r3, #8
 800518c:	ed93 6b00 	vldr	d6, [r3]
 8005190:	f107 030c 	add.w	r3, r7, #12
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3310      	adds	r3, #16
 8005198:	ed93 7b00 	vldr	d7, [r3]
 800519c:	ee37 7b07 	vadd.f64	d7, d7, d7
 80051a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051a4:	ed1f 6b14 	vldr	d6, [pc, #-80]	; 8005158 <IVK+0x3670>
 80051a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80051ac:	ed1f 6b18 	vldr	d6, [pc, #-96]	; 8005150 <IVK+0x3668>
 80051b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80051b4:	ed1f 6b1e 	vldr	d6, [pc, #-120]	; 8005140 <IVK+0x3658>
 80051b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80051bc:	eeb0 0b47 	vmov.f64	d0, d7
 80051c0:	f012 f8ca 	bl	8017358 <sin>
 80051c4:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 80051c8:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 80051cc:	f107 030c 	add.w	r3, r7, #12
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3308      	adds	r3, #8
 80051d4:	ed93 6b00 	vldr	d6, [r3]
 80051d8:	f107 030c 	add.w	r3, r7, #12
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3310      	adds	r3, #16
 80051e0:	ed93 7b00 	vldr	d7, [r3]
 80051e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051e8:	ed1f 6b25 	vldr	d6, [pc, #-148]	; 8005158 <IVK+0x3670>
 80051ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80051f0:	ed1f 6b29 	vldr	d6, [pc, #-164]	; 8005150 <IVK+0x3668>
 80051f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80051f8:	eeb0 0b47 	vmov.f64	d0, d7
 80051fc:	f012 f858 	bl	80172b0 <cos>
 8005200:	eeb0 7b40 	vmov.f64	d7, d0
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005204:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 8005208:	f107 030c 	add.w	r3, r7, #12
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	ed93 7b00 	vldr	d7, [r3]
 8005212:	eeb0 0b47 	vmov.f64	d0, d7
 8005216:	f012 f89f 	bl	8017358 <sin>
 800521a:	eeb0 7b40 	vmov.f64	d7, d0
 800521e:	ee29 7b07 	vmul.f64	d7, d9, d7
	                sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) -
 8005222:	ee38 8b47 	vsub.f64	d8, d8, d7
	          2.8921178332800004E+6 *
	              sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005226:	f107 030c 	add.w	r3, r7, #12
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3308      	adds	r3, #8
 800522e:	ed93 6b00 	vldr	d6, [r3]
 8005232:	f107 030c 	add.w	r3, r7, #12
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3310      	adds	r3, #16
 800523a:	ed93 7b00 	vldr	d7, [r3]
 800523e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005242:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005246:	f107 030c 	add.w	r3, r7, #12
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3318      	adds	r3, #24
 800524e:	ed93 7b00 	vldr	d7, [r3]
 8005252:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005256:	ed1f 6b40 	vldr	d6, [pc, #-256]	; 8005158 <IVK+0x3670>
 800525a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800525e:	ed1f 6b44 	vldr	d6, [pc, #-272]	; 8005150 <IVK+0x3668>
 8005262:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005266:	ed1f 6b4a 	vldr	d6, [pc, #-296]	; 8005140 <IVK+0x3658>
 800526a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800526e:	ed1f 6b4e 	vldr	d6, [pc, #-312]	; 8005138 <IVK+0x3650>
 8005272:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005276:	eeb0 0b47 	vmov.f64	d0, d7
 800527a:	f012 f86d 	bl	8017358 <sin>
 800527e:	eeb0 7b40 	vmov.f64	d7, d0
	          2.8921178332800004E+6 *
 8005282:	ed1f 6b55 	vldr	d6, [pc, #-340]	; 8005130 <IVK+0x3648>
 8005286:	ee27 9b06 	vmul.f64	d9, d7, d6
	                   -0.73665) +
	                  1.52205) *
	              cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800528a:	f107 030c 	add.w	r3, r7, #12
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3308      	adds	r3, #8
 8005292:	ed93 6b00 	vldr	d6, [r3]
 8005296:	f107 030c 	add.w	r3, r7, #12
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3310      	adds	r3, #16
 800529e:	ed93 7b00 	vldr	d7, [r3]
 80052a2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80052a6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80052aa:	ed1f 6b55 	vldr	d6, [pc, #-340]	; 8005158 <IVK+0x3670>
 80052ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80052b2:	ed1f 6b59 	vldr	d6, [pc, #-356]	; 8005150 <IVK+0x3668>
 80052b6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80052ba:	ed1f 6b5f 	vldr	d6, [pc, #-380]	; 8005140 <IVK+0x3658>
 80052be:	ee37 7b46 	vsub.f64	d7, d7, d6
 80052c2:	eeb0 0b47 	vmov.f64	d0, d7
 80052c6:	f011 fff3 	bl	80172b0 <cos>
 80052ca:	eeb0 7b40 	vmov.f64	d7, d0
	                  1.52205) *
 80052ce:	ee29 9b07 	vmul.f64	d9, d9, d7
	              sin(q[1] + 1.6845) * sin(q[0])) -
 80052d2:	f107 030c 	add.w	r3, r7, #12
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3308      	adds	r3, #8
 80052da:	ed93 7b00 	vldr	d7, [r3]
 80052de:	ed1f 6b62 	vldr	d6, [pc, #-392]	; 8005158 <IVK+0x3670>
 80052e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80052e6:	eeb0 0b47 	vmov.f64	d0, d7
 80052ea:	f012 f835 	bl	8017358 <sin>
 80052ee:	eeb0 7b40 	vmov.f64	d7, d0
	              cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80052f2:	ee29 9b07 	vmul.f64	d9, d9, d7
	              sin(q[1] + 1.6845) * sin(q[0])) -
 80052f6:	f107 030c 	add.w	r3, r7, #12
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	ed93 7b00 	vldr	d7, [r3]
 8005300:	eeb0 0b47 	vmov.f64	d0, d7
 8005304:	f012 f828 	bl	8017358 <sin>
 8005308:	eeb0 7b40 	vmov.f64	d7, d0
 800530c:	ee29 7b07 	vmul.f64	d7, d9, d7
	               cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 8005310:	ee38 8b07 	vadd.f64	d8, d8, d7
	         2.8921178332800004E+6 *
	             sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005314:	f107 030c 	add.w	r3, r7, #12
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3308      	adds	r3, #8
 800531c:	ed93 6b00 	vldr	d6, [r3]
 8005320:	f107 030c 	add.w	r3, r7, #12
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3310      	adds	r3, #16
 8005328:	ed93 7b00 	vldr	d7, [r3]
 800532c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005330:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005334:	f107 030c 	add.w	r3, r7, #12
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3318      	adds	r3, #24
 800533c:	ed93 7b00 	vldr	d7, [r3]
 8005340:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005344:	ed1f 6b7c 	vldr	d6, [pc, #-496]	; 8005158 <IVK+0x3670>
 8005348:	ee37 7b06 	vadd.f64	d7, d7, d6
 800534c:	ed1f 6b80 	vldr	d6, [pc, #-512]	; 8005150 <IVK+0x3668>
 8005350:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005354:	ed1f 6b86 	vldr	d6, [pc, #-536]	; 8005140 <IVK+0x3658>
 8005358:	ee37 7b46 	vsub.f64	d7, d7, d6
 800535c:	ed1f 6b8a 	vldr	d6, [pc, #-552]	; 8005138 <IVK+0x3650>
 8005360:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005364:	eeb0 0b47 	vmov.f64	d0, d7
 8005368:	f011 fff6 	bl	8017358 <sin>
 800536c:	eeb0 7b40 	vmov.f64	d7, d0
	         2.8921178332800004E+6 *
 8005370:	ed1f 6b91 	vldr	d6, [pc, #-580]	; 8005130 <IVK+0x3648>
 8005374:	ee27 9b06 	vmul.f64	d9, d7, d6
	                  -0.73665) +
	                 1.52205) *
	             sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005378:	f107 030c 	add.w	r3, r7, #12
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3308      	adds	r3, #8
 8005380:	ed93 6b00 	vldr	d6, [r3]
 8005384:	f107 030c 	add.w	r3, r7, #12
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3310      	adds	r3, #16
 800538c:	ed93 7b00 	vldr	d7, [r3]
 8005390:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005394:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005398:	ed1f 6b91 	vldr	d6, [pc, #-580]	; 8005158 <IVK+0x3670>
 800539c:	ee37 7b06 	vadd.f64	d7, d7, d6
 80053a0:	ed1f 6b95 	vldr	d6, [pc, #-596]	; 8005150 <IVK+0x3668>
 80053a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80053a8:	ed1f 6b9b 	vldr	d6, [pc, #-620]	; 8005140 <IVK+0x3658>
 80053ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80053b0:	eeb0 0b47 	vmov.f64	d0, d7
 80053b4:	f011 ffd0 	bl	8017358 <sin>
 80053b8:	eeb0 7b40 	vmov.f64	d7, d0
	                 1.52205) *
 80053bc:	ee29 9b07 	vmul.f64	d9, d9, d7
	             cos(q[1] + 1.6845) * sin(q[0])) +
 80053c0:	f107 030c 	add.w	r3, r7, #12
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3308      	adds	r3, #8
 80053c8:	ed93 7b00 	vldr	d7, [r3]
 80053cc:	ed1f 6b9e 	vldr	d6, [pc, #-632]	; 8005158 <IVK+0x3670>
 80053d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80053d4:	eeb0 0b47 	vmov.f64	d0, d7
 80053d8:	f011 ff6a 	bl	80172b0 <cos>
 80053dc:	eeb0 7b40 	vmov.f64	d7, d0
	             sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80053e0:	ee29 9b07 	vmul.f64	d9, d9, d7
	             cos(q[1] + 1.6845) * sin(q[0])) +
 80053e4:	f107 030c 	add.w	r3, r7, #12
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	ed93 7b00 	vldr	d7, [r3]
 80053ee:	eeb0 0b47 	vmov.f64	d0, d7
 80053f2:	f011 ffb1 	bl	8017358 <sin>
 80053f6:	eeb0 7b40 	vmov.f64	d7, d0
 80053fa:	ee29 7b07 	vmul.f64	d7, d9, d7
	              sin(q[1] + 1.6845) * sin(q[0])) -
 80053fe:	ee38 8b47 	vsub.f64	d8, d8, d7
	        211366.80000000002 *
	            sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005402:	f107 030c 	add.w	r3, r7, #12
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	3308      	adds	r3, #8
 800540a:	ed93 6b00 	vldr	d6, [r3]
 800540e:	f107 030c 	add.w	r3, r7, #12
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	3310      	adds	r3, #16
 8005416:	ed93 7b00 	vldr	d7, [r3]
 800541a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800541e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005422:	f107 030c 	add.w	r3, r7, #12
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3318      	adds	r3, #24
 800542a:	ed93 7b00 	vldr	d7, [r3]
 800542e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005432:	ed1f 6bb7 	vldr	d6, [pc, #-732]	; 8005158 <IVK+0x3670>
 8005436:	ee37 7b06 	vadd.f64	d7, d7, d6
 800543a:	ed1f 6bbb 	vldr	d6, [pc, #-748]	; 8005150 <IVK+0x3668>
 800543e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005442:	ed1f 6bc1 	vldr	d6, [pc, #-772]	; 8005140 <IVK+0x3658>
 8005446:	ee37 7b46 	vsub.f64	d7, d7, d6
 800544a:	ed1f 6bc5 	vldr	d6, [pc, #-788]	; 8005138 <IVK+0x3650>
 800544e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005452:	eeb0 0b47 	vmov.f64	d0, d7
 8005456:	f011 ff7f 	bl	8017358 <sin>
 800545a:	eeb0 7b40 	vmov.f64	d7, d0
	        211366.80000000002 *
 800545e:	ed1f 6bc6 	vldr	d6, [pc, #-792]	; 8005148 <IVK+0x3660>
 8005462:	ee27 9b06 	vmul.f64	d9, d7, d6
	                 -0.73665) +
	                1.52205) *
	            cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8005466:	f107 030c 	add.w	r3, r7, #12
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3308      	adds	r3, #8
 800546e:	ed93 6b00 	vldr	d6, [r3]
 8005472:	f107 030c 	add.w	r3, r7, #12
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3310      	adds	r3, #16
 800547a:	ed93 7b00 	vldr	d7, [r3]
 800547e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005482:	ed1f 6bcb 	vldr	d6, [pc, #-812]	; 8005158 <IVK+0x3670>
 8005486:	ee37 7b06 	vadd.f64	d7, d7, d6
 800548a:	ed1f 6bcf 	vldr	d6, [pc, #-828]	; 8005150 <IVK+0x3668>
 800548e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005492:	eeb0 0b47 	vmov.f64	d0, d7
 8005496:	f011 ff0b 	bl	80172b0 <cos>
 800549a:	eeb0 7b40 	vmov.f64	d7, d0
	                1.52205) *
 800549e:	ee29 9b07 	vmul.f64	d9, d9, d7
	            cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 80054a2:	f107 030c 	add.w	r3, r7, #12
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3308      	adds	r3, #8
 80054aa:	ed93 7b00 	vldr	d7, [r3]
 80054ae:	ed1f 6bd6 	vldr	d6, [pc, #-856]	; 8005158 <IVK+0x3670>
 80054b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80054b6:	eeb0 0b47 	vmov.f64	d0, d7
 80054ba:	f011 ff4d 	bl	8017358 <sin>
 80054be:	eeb0 7b40 	vmov.f64	d7, d0
 80054c2:	ee29 9b07 	vmul.f64	d9, d9, d7
	            sin(q[0])) -
 80054c6:	f107 030c 	add.w	r3, r7, #12
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	ed93 7b00 	vldr	d7, [r3]
 80054d0:	eeb0 0b47 	vmov.f64	d0, d7
 80054d4:	f011 ff40 	bl	8017358 <sin>
 80054d8:	eeb0 7b40 	vmov.f64	d7, d0
	            cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 80054dc:	ee29 7b07 	vmul.f64	d7, d9, d7
	             cos(q[1] + 1.6845) * sin(q[0])) +
 80054e0:	ee38 8b07 	vadd.f64	d8, d8, d7
	       211366.80000000002 *
	           sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80054e4:	f107 030c 	add.w	r3, r7, #12
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3308      	adds	r3, #8
 80054ec:	ed93 6b00 	vldr	d6, [r3]
 80054f0:	f107 030c 	add.w	r3, r7, #12
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	3310      	adds	r3, #16
 80054f8:	ed93 7b00 	vldr	d7, [r3]
 80054fc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005500:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005504:	f107 030c 	add.w	r3, r7, #12
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3318      	adds	r3, #24
 800550c:	ed93 7b00 	vldr	d7, [r3]
 8005510:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005514:	ed1f 6bf0 	vldr	d6, [pc, #-960]	; 8005158 <IVK+0x3670>
 8005518:	ee37 7b06 	vadd.f64	d7, d7, d6
 800551c:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 80058e0 <IVK+0x3df8>
 8005520:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005524:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 80058e8 <IVK+0x3e00>
 8005528:	ee37 7b46 	vsub.f64	d7, d7, d6
 800552c:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 80058f0 <IVK+0x3e08>
 8005530:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005534:	eeb0 0b47 	vmov.f64	d0, d7
 8005538:	f011 ff0e 	bl	8017358 <sin>
 800553c:	eeb0 7b40 	vmov.f64	d7, d0
	       211366.80000000002 *
 8005540:	ed9f 6bed 	vldr	d6, [pc, #948]	; 80058f8 <IVK+0x3e10>
 8005544:	ee27 9b06 	vmul.f64	d9, d7, d6
	                -0.73665) +
	               1.52205) *
	           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8005548:	f107 030c 	add.w	r3, r7, #12
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	3308      	adds	r3, #8
 8005550:	ed93 6b00 	vldr	d6, [r3]
 8005554:	f107 030c 	add.w	r3, r7, #12
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3310      	adds	r3, #16
 800555c:	ed93 7b00 	vldr	d7, [r3]
 8005560:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005564:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8005918 <IVK+0x3e30>
 8005568:	ee37 7b06 	vadd.f64	d7, d7, d6
 800556c:	ed9f 6bdc 	vldr	d6, [pc, #880]	; 80058e0 <IVK+0x3df8>
 8005570:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005574:	eeb0 0b47 	vmov.f64	d0, d7
 8005578:	f011 feee 	bl	8017358 <sin>
 800557c:	eeb0 7b40 	vmov.f64	d7, d0
	               1.52205) *
 8005580:	ee29 9b07 	vmul.f64	d9, d9, d7
	           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8005584:	f107 030c 	add.w	r3, r7, #12
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3308      	adds	r3, #8
 800558c:	ed93 7b00 	vldr	d7, [r3]
 8005590:	ed9f 6be1 	vldr	d6, [pc, #900]	; 8005918 <IVK+0x3e30>
 8005594:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005598:	eeb0 0b47 	vmov.f64	d0, d7
 800559c:	f011 fe88 	bl	80172b0 <cos>
 80055a0:	eeb0 7b40 	vmov.f64	d7, d0
 80055a4:	ee29 9b07 	vmul.f64	d9, d9, d7
	           sin(q[0])) /
 80055a8:	f107 030c 	add.w	r3, r7, #12
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	ed93 7b00 	vldr	d7, [r3]
 80055b2:	eeb0 0b47 	vmov.f64	d0, d7
 80055b6:	f011 fecf 	bl	8017358 <sin>
 80055ba:	eeb0 7b40 	vmov.f64	d7, d0
	           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 80055be:	ee29 7b07 	vmul.f64	d7, d9, d7
	            sin(q[0])) -
 80055c2:	ee38 7b47 	vsub.f64	d7, d8, d7
	      4.0 *
 80055c6:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80055ca:	ee27 5b06 	vmul.f64	d5, d7, d6
	           sin(q[0])) /
 80055ce:	ed97 6b7a 	vldr	d6, [r7, #488]	; 0x1e8
 80055d2:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[4] =
 80055d6:	f107 0310 	add.w	r3, r7, #16
 80055da:	ed83 7b08 	vstr	d7, [r3, #32]
	      d;
	  dv[9] =
	      -(4.0 *
	        (((((((((((((((221663.52 *
	                           cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 80055de:	f107 030c 	add.w	r3, r7, #12
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3308      	adds	r3, #8
 80055e6:	ed93 6b00 	vldr	d6, [r3]
 80055ea:	f107 030c 	add.w	r3, r7, #12
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3310      	adds	r3, #16
 80055f2:	ed93 7b00 	vldr	d7, [r3]
 80055f6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80055fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80055fe:	ed9f 6bc6 	vldr	d6, [pc, #792]	; 8005918 <IVK+0x3e30>
 8005602:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005606:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 80058e0 <IVK+0x3df8>
 800560a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800560e:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 80058e8 <IVK+0x3e00>
 8005612:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005616:	eeb0 0b47 	vmov.f64	d0, d7
 800561a:	f011 fe49 	bl	80172b0 <cos>
 800561e:	eeb0 7b40 	vmov.f64	d7, d0
	        (((((((((((((((221663.52 *
 8005622:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8005900 <IVK+0x3e18>
 8005626:	ee27 8b06 	vmul.f64	d8, d7, d6
	                               -0.73665) *
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) -
 800562a:	f107 030c 	add.w	r3, r7, #12
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3308      	adds	r3, #8
 8005632:	ed93 6b00 	vldr	d6, [r3]
 8005636:	f107 030c 	add.w	r3, r7, #12
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3310      	adds	r3, #16
 800563e:	ed93 7b00 	vldr	d7, [r3]
 8005642:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005646:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8005918 <IVK+0x3e30>
 800564a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800564e:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 80058e0 <IVK+0x3df8>
 8005652:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005656:	eeb0 0b47 	vmov.f64	d0, d7
 800565a:	f011 fe7d 	bl	8017358 <sin>
 800565e:	eeb0 7b40 	vmov.f64	d7, d0
	                               -0.73665) *
 8005662:	ee28 8b07 	vmul.f64	d8, d8, d7
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) -
 8005666:	f107 030c 	add.w	r3, r7, #12
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	ed93 7b00 	vldr	d7, [r3]
 8005670:	eeb0 0b47 	vmov.f64	d0, d7
 8005674:	f011 fe70 	bl	8017358 <sin>
 8005678:	eeb0 7b40 	vmov.f64	d7, d0
 800567c:	ee28 8b07 	vmul.f64	d8, d8, d7
	                       221663.52 *
	                           sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8005680:	f107 030c 	add.w	r3, r7, #12
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3308      	adds	r3, #8
 8005688:	ed93 6b00 	vldr	d6, [r3]
 800568c:	f107 030c 	add.w	r3, r7, #12
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3310      	adds	r3, #16
 8005694:	ed93 7b00 	vldr	d7, [r3]
 8005698:	ee37 7b07 	vadd.f64	d7, d7, d7
 800569c:	ee36 7b07 	vadd.f64	d7, d6, d7
 80056a0:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8005918 <IVK+0x3e30>
 80056a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80056a8:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 80058e0 <IVK+0x3df8>
 80056ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80056b0:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 80058e8 <IVK+0x3e00>
 80056b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80056b8:	eeb0 0b47 	vmov.f64	d0, d7
 80056bc:	f011 fe4c 	bl	8017358 <sin>
 80056c0:	eeb0 7b40 	vmov.f64	d7, d0
	                       221663.52 *
 80056c4:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 8005900 <IVK+0x3e18>
 80056c8:	ee27 9b06 	vmul.f64	d9, d7, d6
	                               -0.73665) *
	                           cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80056cc:	f107 030c 	add.w	r3, r7, #12
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3308      	adds	r3, #8
 80056d4:	ed93 6b00 	vldr	d6, [r3]
 80056d8:	f107 030c 	add.w	r3, r7, #12
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3310      	adds	r3, #16
 80056e0:	ed93 7b00 	vldr	d7, [r3]
 80056e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80056e8:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8005918 <IVK+0x3e30>
 80056ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80056f0:	ed9f 6b7b 	vldr	d6, [pc, #492]	; 80058e0 <IVK+0x3df8>
 80056f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80056f8:	eeb0 0b47 	vmov.f64	d0, d7
 80056fc:	f011 fdd8 	bl	80172b0 <cos>
 8005700:	eeb0 7b40 	vmov.f64	d7, d0
	                               -0.73665) *
 8005704:	ee29 9b07 	vmul.f64	d9, d9, d7
	                           sin(q[0])) +
 8005708:	f107 030c 	add.w	r3, r7, #12
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	ed93 7b00 	vldr	d7, [r3]
 8005712:	eeb0 0b47 	vmov.f64	d0, d7
 8005716:	f011 fe1f 	bl	8017358 <sin>
 800571a:	eeb0 7b40 	vmov.f64	d7, d0
	                           cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800571e:	ee29 7b07 	vmul.f64	d7, d9, d7
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) -
 8005722:	ee38 8b47 	vsub.f64	d8, d8, d7
	                      2.6029060499520004E+6 *
	                          cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8005726:	f107 030c 	add.w	r3, r7, #12
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3308      	adds	r3, #8
 800572e:	ed93 6b00 	vldr	d6, [r3]
 8005732:	f107 030c 	add.w	r3, r7, #12
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3310      	adds	r3, #16
 800573a:	ed93 7b00 	vldr	d7, [r3]
 800573e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005742:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005746:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8005918 <IVK+0x3e30>
 800574a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800574e:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80058e0 <IVK+0x3df8>
 8005752:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005756:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80058e8 <IVK+0x3e00>
 800575a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800575e:	eeb0 0b47 	vmov.f64	d0, d7
 8005762:	f011 fda5 	bl	80172b0 <cos>
 8005766:	eeb0 7b40 	vmov.f64	d7, d0
	                      2.6029060499520004E+6 *
 800576a:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8005908 <IVK+0x3e20>
 800576e:	ee27 9b06 	vmul.f64	d9, d7, d6
	                              -0.73665) *
	                          sin(q[1] + 1.6845) * sin(q[0])) -
 8005772:	f107 030c 	add.w	r3, r7, #12
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3308      	adds	r3, #8
 800577a:	ed93 7b00 	vldr	d7, [r3]
 800577e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8005918 <IVK+0x3e30>
 8005782:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005786:	eeb0 0b47 	vmov.f64	d0, d7
 800578a:	f011 fde5 	bl	8017358 <sin>
 800578e:	eeb0 7b40 	vmov.f64	d7, d0
	                              -0.73665) *
 8005792:	ee29 9b07 	vmul.f64	d9, d9, d7
	                          sin(q[1] + 1.6845) * sin(q[0])) -
 8005796:	f107 030c 	add.w	r3, r7, #12
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	ed93 7b00 	vldr	d7, [r3]
 80057a0:	eeb0 0b47 	vmov.f64	d0, d7
 80057a4:	f011 fdd8 	bl	8017358 <sin>
 80057a8:	eeb0 7b40 	vmov.f64	d7, d0
 80057ac:	ee29 7b07 	vmul.f64	d7, d9, d7
	                           sin(q[0])) +
 80057b0:	ee38 8b07 	vadd.f64	d8, d8, d7
	                     2.6029060499520004E+6 *
	                         sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 80057b4:	f107 030c 	add.w	r3, r7, #12
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3308      	adds	r3, #8
 80057bc:	ed93 6b00 	vldr	d6, [r3]
 80057c0:	f107 030c 	add.w	r3, r7, #12
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	3310      	adds	r3, #16
 80057c8:	ed93 7b00 	vldr	d7, [r3]
 80057cc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80057d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80057d4:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8005918 <IVK+0x3e30>
 80057d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80057dc:	ed9f 6b40 	vldr	d6, [pc, #256]	; 80058e0 <IVK+0x3df8>
 80057e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80057e4:	ed9f 6b40 	vldr	d6, [pc, #256]	; 80058e8 <IVK+0x3e00>
 80057e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80057ec:	eeb0 0b47 	vmov.f64	d0, d7
 80057f0:	f011 fdb2 	bl	8017358 <sin>
 80057f4:	eeb0 7b40 	vmov.f64	d7, d0
	                     2.6029060499520004E+6 *
 80057f8:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8005908 <IVK+0x3e20>
 80057fc:	ee27 9b06 	vmul.f64	d9, d7, d6
	                             -0.73665) *
	                         cos(q[1] + 1.6845) * sin(q[0])) +
 8005800:	f107 030c 	add.w	r3, r7, #12
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3308      	adds	r3, #8
 8005808:	ed93 7b00 	vldr	d7, [r3]
 800580c:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8005918 <IVK+0x3e30>
 8005810:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005814:	eeb0 0b47 	vmov.f64	d0, d7
 8005818:	f011 fd4a 	bl	80172b0 <cos>
 800581c:	eeb0 7b40 	vmov.f64	d7, d0
	                             -0.73665) *
 8005820:	ee29 9b07 	vmul.f64	d9, d9, d7
	                         cos(q[1] + 1.6845) * sin(q[0])) +
 8005824:	f107 030c 	add.w	r3, r7, #12
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	ed93 7b00 	vldr	d7, [r3]
 800582e:	eeb0 0b47 	vmov.f64	d0, d7
 8005832:	f011 fd91 	bl	8017358 <sin>
 8005836:	eeb0 7b40 	vmov.f64	d7, d0
 800583a:	ee29 7b07 	vmul.f64	d7, d9, d7
	                          sin(q[1] + 1.6845) * sin(q[0])) -
 800583e:	ee38 6b47 	vsub.f64	d6, d8, d7
	                         cos(q[1] + 1.6845) * sin(q[0])) +
 8005842:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8005846:	ee36 8b07 	vadd.f64	d8, d6, d7
	                    d1) +
	                   190230.12000000002 *
	                       cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800584a:	f107 030c 	add.w	r3, r7, #12
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3308      	adds	r3, #8
 8005852:	ed93 6b00 	vldr	d6, [r3]
 8005856:	f107 030c 	add.w	r3, r7, #12
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3310      	adds	r3, #16
 800585e:	ed93 7b00 	vldr	d7, [r3]
 8005862:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005866:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8005918 <IVK+0x3e30>
 800586a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800586e:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80058e0 <IVK+0x3df8>
 8005872:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005876:	eeb0 0b47 	vmov.f64	d0, d7
 800587a:	f011 fd19 	bl	80172b0 <cos>
 800587e:	eeb0 7b40 	vmov.f64	d7, d0
	                   190230.12000000002 *
 8005882:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8005910 <IVK+0x3e28>
 8005886:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       sin(q[1] + 1.6845) * sin(q[0])) -
 800588a:	f107 030c 	add.w	r3, r7, #12
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	3308      	adds	r3, #8
 8005892:	ed93 7b00 	vldr	d7, [r3]
 8005896:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8005918 <IVK+0x3e30>
 800589a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800589e:	eeb0 0b47 	vmov.f64	d0, d7
 80058a2:	f011 fd59 	bl	8017358 <sin>
 80058a6:	eeb0 7b40 	vmov.f64	d7, d0
	                       cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80058aa:	ee29 9b07 	vmul.f64	d9, d9, d7
	                       sin(q[1] + 1.6845) * sin(q[0])) -
 80058ae:	f107 030c 	add.w	r3, r7, #12
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	ed93 7b00 	vldr	d7, [r3]
 80058b8:	eeb0 0b47 	vmov.f64	d0, d7
 80058bc:	f011 fd4c 	bl	8017358 <sin>
 80058c0:	eeb0 7b40 	vmov.f64	d7, d0
 80058c4:	ee29 7b07 	vmul.f64	d7, d9, d7
	                    d1) +
 80058c8:	ee38 8b07 	vadd.f64	d8, d8, d7
	                  190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80058cc:	f107 030c 	add.w	r3, r7, #12
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3308      	adds	r3, #8
 80058d4:	ed93 6b00 	vldr	d6, [r3]
 80058d8:	e03e      	b.n	8005958 <IVK+0x3e70>
 80058da:	bf00      	nop
 80058dc:	f3af 8000 	nop.w
 80058e0:	39581062 	.word	0x39581062
 80058e4:	3fecc8b4 	.word	0x3fecc8b4
 80058e8:	05532618 	.word	0x05532618
 80058ec:	3fe792a3 	.word	0x3fe792a3
 80058f0:	19ce075f 	.word	0x19ce075f
 80058f4:	3ff85a51 	.word	0x3ff85a51
 80058f8:	66666667 	.word	0x66666667
 80058fc:	4109cd36 	.word	0x4109cd36
 8005900:	28f5c28f 	.word	0x28f5c28f
 8005904:	410b0efc 	.word	0x410b0efc
 8005908:	0664d3c0 	.word	0x0664d3c0
 800590c:	4143dbcd 	.word	0x4143dbcd
 8005910:	f5c28f5d 	.word	0xf5c28f5d
 8005914:	410738b0 	.word	0x410738b0
 8005918:	45a1cac1 	.word	0x45a1cac1
 800591c:	3ffaf3b6 	.word	0x3ffaf3b6
 8005920:	00000000 	.word	0x00000000
 8005924:	40f56300 	.word	0x40f56300
 8005928:	851eb852 	.word	0x851eb852
 800592c:	412f6457 	.word	0x412f6457
 8005930:	19ce075f 	.word	0x19ce075f
 8005934:	3ff85a51 	.word	0x3ff85a51
 8005938:	66666666 	.word	0x66666666
 800593c:	410e10a6 	.word	0x410e10a6
 8005940:	05532618 	.word	0x05532618
 8005944:	3fe792a3 	.word	0x3fe792a3
 8005948:	45a1cac1 	.word	0x45a1cac1
 800594c:	3ffaf3b6 	.word	0x3ffaf3b6
 8005950:	39581062 	.word	0x39581062
 8005954:	3fecc8b4 	.word	0x3fecc8b4
 8005958:	f107 030c 	add.w	r3, r7, #12
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3310      	adds	r3, #16
 8005960:	ed93 7b00 	vldr	d7, [r3]
 8005964:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005968:	ed1f 6b15 	vldr	d6, [pc, #-84]	; 8005918 <IVK+0x3e30>
 800596c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005970:	ed1f 6b09 	vldr	d6, [pc, #-36]	; 8005950 <IVK+0x3e68>
 8005974:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005978:	eeb0 0b47 	vmov.f64	d0, d7
 800597c:	f011 fcec 	bl	8017358 <sin>
 8005980:	eeb0 7b40 	vmov.f64	d7, d0
 8005984:	ed1f 6b1e 	vldr	d6, [pc, #-120]	; 8005910 <IVK+0x3e28>
 8005988:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      cos(q[1] + 1.6845) * sin(q[0])) +
 800598c:	f107 030c 	add.w	r3, r7, #12
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3308      	adds	r3, #8
 8005994:	ed93 7b00 	vldr	d7, [r3]
 8005998:	ed1f 6b21 	vldr	d6, [pc, #-132]	; 8005918 <IVK+0x3e30>
 800599c:	ee37 7b06 	vadd.f64	d7, d7, d6
 80059a0:	eeb0 0b47 	vmov.f64	d0, d7
 80059a4:	f011 fc84 	bl	80172b0 <cos>
 80059a8:	eeb0 7b40 	vmov.f64	d7, d0
	                  190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80059ac:	ee29 9b07 	vmul.f64	d9, d9, d7
	                      cos(q[1] + 1.6845) * sin(q[0])) +
 80059b0:	f107 030c 	add.w	r3, r7, #12
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	ed93 7b00 	vldr	d7, [r3]
 80059ba:	eeb0 0b47 	vmov.f64	d0, d7
 80059be:	f011 fccb 	bl	8017358 <sin>
 80059c2:	eeb0 7b40 	vmov.f64	d7, d0
 80059c6:	ee29 7b07 	vmul.f64	d7, d9, d7
	                       sin(q[1] + 1.6845) * sin(q[0])) -
 80059ca:	ee38 6b47 	vsub.f64	d6, d8, d7
	                      cos(q[1] + 1.6845) * sin(q[0])) +
 80059ce:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 80059d2:	ee36 8b07 	vadd.f64	d8, d6, d7
	                 d2) +
	                87600.0 *
	                    cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80059d6:	f107 030c 	add.w	r3, r7, #12
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3308      	adds	r3, #8
 80059de:	ed93 6b00 	vldr	d6, [r3]
 80059e2:	f107 030c 	add.w	r3, r7, #12
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3310      	adds	r3, #16
 80059ea:	ed93 7b00 	vldr	d7, [r3]
 80059ee:	ee37 7b07 	vadd.f64	d7, d7, d7
 80059f2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80059f6:	f107 030c 	add.w	r3, r7, #12
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3318      	adds	r3, #24
 80059fe:	ed93 7b00 	vldr	d7, [r3]
 8005a02:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a06:	ed1f 6b3c 	vldr	d6, [pc, #-240]	; 8005918 <IVK+0x3e30>
 8005a0a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005a0e:	ed1f 6b30 	vldr	d6, [pc, #-192]	; 8005950 <IVK+0x3e68>
 8005a12:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005a16:	ed1f 6b36 	vldr	d6, [pc, #-216]	; 8005940 <IVK+0x3e58>
 8005a1a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005a1e:	ed1f 6b3c 	vldr	d6, [pc, #-240]	; 8005930 <IVK+0x3e48>
 8005a22:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005a26:	eeb0 0b47 	vmov.f64	d0, d7
 8005a2a:	f011 fc41 	bl	80172b0 <cos>
 8005a2e:	eeb0 7b40 	vmov.f64	d7, d0
	                87600.0 *
 8005a32:	ed1f 6b45 	vldr	d6, [pc, #-276]	; 8005920 <IVK+0x3e38>
 8005a36:	ee27 9b06 	vmul.f64	d9, d7, d6
	                         -0.73665) +
	                        1.52205) *
	                    sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005a3a:	f107 030c 	add.w	r3, r7, #12
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3308      	adds	r3, #8
 8005a42:	ed93 6b00 	vldr	d6, [r3]
 8005a46:	f107 030c 	add.w	r3, r7, #12
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	3310      	adds	r3, #16
 8005a4e:	ed93 7b00 	vldr	d7, [r3]
 8005a52:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005a56:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005a5a:	f107 030c 	add.w	r3, r7, #12
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	3318      	adds	r3, #24
 8005a62:	ed93 7b00 	vldr	d7, [r3]
 8005a66:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a6a:	ed1f 6b49 	vldr	d6, [pc, #-292]	; 8005948 <IVK+0x3e60>
 8005a6e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005a72:	ed1f 6b49 	vldr	d6, [pc, #-292]	; 8005950 <IVK+0x3e68>
 8005a76:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005a7a:	ed1f 6b4f 	vldr	d6, [pc, #-316]	; 8005940 <IVK+0x3e58>
 8005a7e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005a82:	ed1f 6b55 	vldr	d6, [pc, #-340]	; 8005930 <IVK+0x3e48>
 8005a86:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005a8a:	eeb0 0b47 	vmov.f64	d0, d7
 8005a8e:	f011 fc63 	bl	8017358 <sin>
 8005a92:	eeb0 7b40 	vmov.f64	d7, d0
	                        1.52205) *
 8005a96:	ee29 9b07 	vmul.f64	d9, d9, d7
	                         -0.73665) +
	                        1.52205) *
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 8005a9a:	f107 030c 	add.w	r3, r7, #12
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3308      	adds	r3, #8
 8005aa2:	ed93 6b00 	vldr	d6, [r3]
 8005aa6:	f107 030c 	add.w	r3, r7, #12
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3310      	adds	r3, #16
 8005aae:	ed93 7b00 	vldr	d7, [r3]
 8005ab2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005ab6:	ed1f 6b5c 	vldr	d6, [pc, #-368]	; 8005948 <IVK+0x3e60>
 8005aba:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005abe:	ed1f 6b5c 	vldr	d6, [pc, #-368]	; 8005950 <IVK+0x3e68>
 8005ac2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005ac6:	eeb0 0b47 	vmov.f64	d0, d7
 8005aca:	f011 fbf1 	bl	80172b0 <cos>
 8005ace:	eeb0 7b40 	vmov.f64	d7, d0
	                        1.52205) *
 8005ad2:	ee29 9b07 	vmul.f64	d9, d9, d7
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 8005ad6:	f107 030c 	add.w	r3, r7, #12
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	ed93 7b00 	vldr	d7, [r3]
 8005ae0:	eeb0 0b47 	vmov.f64	d0, d7
 8005ae4:	f011 fbe4 	bl	80172b0 <cos>
 8005ae8:	eeb0 7b40 	vmov.f64	d7, d0
 8005aec:	ee29 7b07 	vmul.f64	d7, d9, d7
	                 d2) +
 8005af0:	ee38 8b07 	vadd.f64	d8, d8, d7
	               1.02865176E+6 *
	                   cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005af4:	f107 030c 	add.w	r3, r7, #12
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3308      	adds	r3, #8
 8005afc:	ed93 6b00 	vldr	d6, [r3]
 8005b00:	f107 030c 	add.w	r3, r7, #12
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	3310      	adds	r3, #16
 8005b08:	ed93 7b00 	vldr	d7, [r3]
 8005b0c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005b10:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005b14:	f107 030c 	add.w	r3, r7, #12
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3318      	adds	r3, #24
 8005b1c:	ed93 7b00 	vldr	d7, [r3]
 8005b20:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005b24:	ed1f 6b78 	vldr	d6, [pc, #-480]	; 8005948 <IVK+0x3e60>
 8005b28:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005b2c:	ed1f 6b78 	vldr	d6, [pc, #-480]	; 8005950 <IVK+0x3e68>
 8005b30:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005b34:	ed1f 6b7e 	vldr	d6, [pc, #-504]	; 8005940 <IVK+0x3e58>
 8005b38:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005b3c:	ed1f 6b84 	vldr	d6, [pc, #-528]	; 8005930 <IVK+0x3e48>
 8005b40:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005b44:	eeb0 0b47 	vmov.f64	d0, d7
 8005b48:	f011 fbb2 	bl	80172b0 <cos>
 8005b4c:	eeb0 7b40 	vmov.f64	d7, d0
	               1.02865176E+6 *
 8005b50:	ed1f 6b8b 	vldr	d6, [pc, #-556]	; 8005928 <IVK+0x3e40>
 8005b54:	ee27 9b06 	vmul.f64	d9, d7, d6
	                        -0.73665) +
	                       1.52205) *
	                   sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005b58:	f107 030c 	add.w	r3, r7, #12
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3308      	adds	r3, #8
 8005b60:	ed93 6b00 	vldr	d6, [r3]
 8005b64:	f107 030c 	add.w	r3, r7, #12
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3310      	adds	r3, #16
 8005b6c:	ed93 7b00 	vldr	d7, [r3]
 8005b70:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005b74:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005b78:	f107 030c 	add.w	r3, r7, #12
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	3318      	adds	r3, #24
 8005b80:	ed93 7b00 	vldr	d7, [r3]
 8005b84:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005b88:	ed1f 6b91 	vldr	d6, [pc, #-580]	; 8005948 <IVK+0x3e60>
 8005b8c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005b90:	ed1f 6b91 	vldr	d6, [pc, #-580]	; 8005950 <IVK+0x3e68>
 8005b94:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005b98:	ed1f 6b97 	vldr	d6, [pc, #-604]	; 8005940 <IVK+0x3e58>
 8005b9c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005ba0:	ed1f 6b9d 	vldr	d6, [pc, #-628]	; 8005930 <IVK+0x3e48>
 8005ba4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005ba8:	eeb0 0b47 	vmov.f64	d0, d7
 8005bac:	f011 fbd4 	bl	8017358 <sin>
 8005bb0:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 8005bb4:	ee29 9b07 	vmul.f64	d9, d9, d7
	                        -0.73665) +
	                       1.52205) *
	                   cos(q[1] + 1.6845) * cos(q[0])) +
 8005bb8:	f107 030c 	add.w	r3, r7, #12
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	ed93 7b00 	vldr	d7, [r3]
 8005bc4:	ed1f 6ba0 	vldr	d6, [pc, #-640]	; 8005948 <IVK+0x3e60>
 8005bc8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005bcc:	eeb0 0b47 	vmov.f64	d0, d7
 8005bd0:	f011 fb6e 	bl	80172b0 <cos>
 8005bd4:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 8005bd8:	ee29 9b07 	vmul.f64	d9, d9, d7
	                   cos(q[1] + 1.6845) * cos(q[0])) +
 8005bdc:	f107 030c 	add.w	r3, r7, #12
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	ed93 7b00 	vldr	d7, [r3]
 8005be6:	eeb0 0b47 	vmov.f64	d0, d7
 8005bea:	f011 fb61 	bl	80172b0 <cos>
 8005bee:	eeb0 7b40 	vmov.f64	d7, d0
 8005bf2:	ee29 7b07 	vmul.f64	d7, d9, d7
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 8005bf6:	ee38 8b07 	vadd.f64	d8, d8, d7
	              246292.8 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005bfa:	f107 030c 	add.w	r3, r7, #12
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3308      	adds	r3, #8
 8005c02:	ed93 6b00 	vldr	d6, [r3]
 8005c06:	f107 030c 	add.w	r3, r7, #12
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	3310      	adds	r3, #16
 8005c0e:	ed93 7b00 	vldr	d7, [r3]
 8005c12:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005c16:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005c1a:	f107 030c 	add.w	r3, r7, #12
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	3318      	adds	r3, #24
 8005c22:	ed93 7b00 	vldr	d7, [r3]
 8005c26:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005c2a:	ed1f 6bb9 	vldr	d6, [pc, #-740]	; 8005948 <IVK+0x3e60>
 8005c2e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005c32:	ed1f 6bb9 	vldr	d6, [pc, #-740]	; 8005950 <IVK+0x3e68>
 8005c36:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005c3a:	ed1f 6bbf 	vldr	d6, [pc, #-764]	; 8005940 <IVK+0x3e58>
 8005c3e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005c42:	ed1f 6bc5 	vldr	d6, [pc, #-788]	; 8005930 <IVK+0x3e48>
 8005c46:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005c4a:	eeb0 0b47 	vmov.f64	d0, d7
 8005c4e:	f011 fb83 	bl	8017358 <sin>
 8005c52:	eeb0 7b40 	vmov.f64	d7, d0
	              246292.8 *
 8005c56:	ed1f 6bc8 	vldr	d6, [pc, #-800]	; 8005938 <IVK+0x3e50>
 8005c5a:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005c5e:	f107 030c 	add.w	r3, r7, #12
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3308      	adds	r3, #8
 8005c66:	ed93 6b00 	vldr	d6, [r3]
 8005c6a:	f107 030c 	add.w	r3, r7, #12
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	3310      	adds	r3, #16
 8005c72:	ed93 7b00 	vldr	d7, [r3]
 8005c76:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005c7a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005c7e:	ed1f 6bce 	vldr	d6, [pc, #-824]	; 8005948 <IVK+0x3e60>
 8005c82:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005c86:	ed1f 6bce 	vldr	d6, [pc, #-824]	; 8005950 <IVK+0x3e68>
 8005c8a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005c8e:	ed1f 6bd4 	vldr	d6, [pc, #-848]	; 8005940 <IVK+0x3e58>
 8005c92:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005c96:	eeb0 0b47 	vmov.f64	d0, d7
 8005c9a:	f011 fb09 	bl	80172b0 <cos>
 8005c9e:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 8005ca2:	ee29 9b07 	vmul.f64	d9, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 8005ca6:	f107 030c 	add.w	r3, r7, #12
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3308      	adds	r3, #8
 8005cae:	ed93 6b00 	vldr	d6, [r3]
 8005cb2:	f107 030c 	add.w	r3, r7, #12
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3310      	adds	r3, #16
 8005cba:	ed93 7b00 	vldr	d7, [r3]
 8005cbe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005cc2:	ed1f 6bdf 	vldr	d6, [pc, #-892]	; 8005948 <IVK+0x3e60>
 8005cc6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005cca:	ed1f 6bdf 	vldr	d6, [pc, #-892]	; 8005950 <IVK+0x3e68>
 8005cce:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005cd2:	eeb0 0b47 	vmov.f64	d0, d7
 8005cd6:	f011 fb3f 	bl	8017358 <sin>
 8005cda:	eeb0 7b40 	vmov.f64	d7, d0
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005cde:	ee29 9b07 	vmul.f64	d9, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 8005ce2:	f107 030c 	add.w	r3, r7, #12
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	ed93 7b00 	vldr	d7, [r3]
 8005cec:	eeb0 0b47 	vmov.f64	d0, d7
 8005cf0:	f011 fade 	bl	80172b0 <cos>
 8005cf4:	eeb0 7b40 	vmov.f64	d7, d0
 8005cf8:	ee29 7b07 	vmul.f64	d7, d9, d7
	                   cos(q[1] + 1.6845) * cos(q[0])) +
 8005cfc:	ee38 8b07 	vadd.f64	d8, d8, d7
	             246292.8 *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005d00:	f107 030c 	add.w	r3, r7, #12
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	3308      	adds	r3, #8
 8005d08:	ed93 6b00 	vldr	d6, [r3]
 8005d0c:	f107 030c 	add.w	r3, r7, #12
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3310      	adds	r3, #16
 8005d14:	ed93 7b00 	vldr	d7, [r3]
 8005d18:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005d1c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005d20:	f107 030c 	add.w	r3, r7, #12
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3318      	adds	r3, #24
 8005d28:	ed93 7b00 	vldr	d7, [r3]
 8005d2c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005d30:	ed9f 6bef 	vldr	d6, [pc, #956]	; 80060f0 <IVK+0x4608>
 8005d34:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d38:	ed9f 6bef 	vldr	d6, [pc, #956]	; 80060f8 <IVK+0x4610>
 8005d3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005d40:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8006100 <IVK+0x4618>
 8005d44:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005d48:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8006108 <IVK+0x4620>
 8005d4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d50:	eeb0 0b47 	vmov.f64	d0, d7
 8005d54:	f011 fb00 	bl	8017358 <sin>
 8005d58:	eeb0 7b40 	vmov.f64	d7, d0
	             246292.8 *
 8005d5c:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8006110 <IVK+0x4628>
 8005d60:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      -0.73665) +
	                     1.52205) *
	                 sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005d64:	f107 030c 	add.w	r3, r7, #12
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3308      	adds	r3, #8
 8005d6c:	ed93 6b00 	vldr	d6, [r3]
 8005d70:	f107 030c 	add.w	r3, r7, #12
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	3310      	adds	r3, #16
 8005d78:	ed93 7b00 	vldr	d7, [r3]
 8005d7c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005d80:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005d84:	ed9f 6bda 	vldr	d6, [pc, #872]	; 80060f0 <IVK+0x4608>
 8005d88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d8c:	ed9f 6bda 	vldr	d6, [pc, #872]	; 80060f8 <IVK+0x4610>
 8005d90:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005d94:	ed9f 6bda 	vldr	d6, [pc, #872]	; 8006100 <IVK+0x4618>
 8005d98:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005d9c:	eeb0 0b47 	vmov.f64	d0, d7
 8005da0:	f011 fada 	bl	8017358 <sin>
 8005da4:	eeb0 7b40 	vmov.f64	d7, d0
	                     1.52205) *
 8005da8:	ee29 9b07 	vmul.f64	d9, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 8005dac:	f107 030c 	add.w	r3, r7, #12
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3308      	adds	r3, #8
 8005db4:	ed93 6b00 	vldr	d6, [r3]
 8005db8:	f107 030c 	add.w	r3, r7, #12
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3310      	adds	r3, #16
 8005dc0:	ed93 7b00 	vldr	d7, [r3]
 8005dc4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005dc8:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 80060f0 <IVK+0x4608>
 8005dcc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005dd0:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 80060f8 <IVK+0x4610>
 8005dd4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005dd8:	eeb0 0b47 	vmov.f64	d0, d7
 8005ddc:	f011 fa68 	bl	80172b0 <cos>
 8005de0:	eeb0 7b40 	vmov.f64	d7, d0
	                 sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005de4:	ee29 9b07 	vmul.f64	d9, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 8005de8:	f107 030c 	add.w	r3, r7, #12
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	ed93 7b00 	vldr	d7, [r3]
 8005df2:	eeb0 0b47 	vmov.f64	d0, d7
 8005df6:	f011 fa5b 	bl	80172b0 <cos>
 8005dfa:	eeb0 7b40 	vmov.f64	d7, d0
 8005dfe:	ee29 7b07 	vmul.f64	d7, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 8005e02:	ee38 8b47 	vsub.f64	d8, d8, d7
	            2.8921178332800004E+6 *
	                sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005e06:	f107 030c 	add.w	r3, r7, #12
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	ed93 6b00 	vldr	d6, [r3]
 8005e12:	f107 030c 	add.w	r3, r7, #12
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	3310      	adds	r3, #16
 8005e1a:	ed93 7b00 	vldr	d7, [r3]
 8005e1e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005e22:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005e26:	f107 030c 	add.w	r3, r7, #12
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	3318      	adds	r3, #24
 8005e2e:	ed93 7b00 	vldr	d7, [r3]
 8005e32:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005e36:	ed9f 6bae 	vldr	d6, [pc, #696]	; 80060f0 <IVK+0x4608>
 8005e3a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005e3e:	ed9f 6bae 	vldr	d6, [pc, #696]	; 80060f8 <IVK+0x4610>
 8005e42:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005e46:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8006100 <IVK+0x4618>
 8005e4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005e4e:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8006108 <IVK+0x4620>
 8005e52:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005e56:	eeb0 0b47 	vmov.f64	d0, d7
 8005e5a:	f011 fa7d 	bl	8017358 <sin>
 8005e5e:	eeb0 7b40 	vmov.f64	d7, d0
	            2.8921178332800004E+6 *
 8005e62:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8006118 <IVK+0x4630>
 8005e66:	ee27 9b06 	vmul.f64	d9, d7, d6
	                     -0.73665) +
	                    1.52205) *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005e6a:	f107 030c 	add.w	r3, r7, #12
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3308      	adds	r3, #8
 8005e72:	ed93 6b00 	vldr	d6, [r3]
 8005e76:	f107 030c 	add.w	r3, r7, #12
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	3310      	adds	r3, #16
 8005e7e:	ed93 7b00 	vldr	d7, [r3]
 8005e82:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005e86:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005e8a:	ed9f 6b99 	vldr	d6, [pc, #612]	; 80060f0 <IVK+0x4608>
 8005e8e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005e92:	ed9f 6b99 	vldr	d6, [pc, #612]	; 80060f8 <IVK+0x4610>
 8005e96:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005e9a:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8006100 <IVK+0x4618>
 8005e9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005ea2:	eeb0 0b47 	vmov.f64	d0, d7
 8005ea6:	f011 fa03 	bl	80172b0 <cos>
 8005eaa:	eeb0 7b40 	vmov.f64	d7, d0
	                    1.52205) *
 8005eae:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(q[1] + 1.6845) * cos(q[0])) -
 8005eb2:	f107 030c 	add.w	r3, r7, #12
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3308      	adds	r3, #8
 8005eba:	ed93 7b00 	vldr	d7, [r3]
 8005ebe:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 80060f0 <IVK+0x4608>
 8005ec2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005ec6:	eeb0 0b47 	vmov.f64	d0, d7
 8005eca:	f011 fa45 	bl	8017358 <sin>
 8005ece:	eeb0 7b40 	vmov.f64	d7, d0
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005ed2:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(q[1] + 1.6845) * cos(q[0])) -
 8005ed6:	f107 030c 	add.w	r3, r7, #12
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	ed93 7b00 	vldr	d7, [r3]
 8005ee0:	eeb0 0b47 	vmov.f64	d0, d7
 8005ee4:	f011 f9e4 	bl	80172b0 <cos>
 8005ee8:	eeb0 7b40 	vmov.f64	d7, d0
 8005eec:	ee29 7b07 	vmul.f64	d7, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 8005ef0:	ee38 8b07 	vadd.f64	d8, d8, d7
	           2.8921178332800004E+6 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005ef4:	f107 030c 	add.w	r3, r7, #12
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3308      	adds	r3, #8
 8005efc:	ed93 6b00 	vldr	d6, [r3]
 8005f00:	f107 030c 	add.w	r3, r7, #12
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3310      	adds	r3, #16
 8005f08:	ed93 7b00 	vldr	d7, [r3]
 8005f0c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005f10:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005f14:	f107 030c 	add.w	r3, r7, #12
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	3318      	adds	r3, #24
 8005f1c:	ed93 7b00 	vldr	d7, [r3]
 8005f20:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005f24:	ed9f 6b72 	vldr	d6, [pc, #456]	; 80060f0 <IVK+0x4608>
 8005f28:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f2c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 80060f8 <IVK+0x4610>
 8005f30:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005f34:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8006100 <IVK+0x4618>
 8005f38:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005f3c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8006108 <IVK+0x4620>
 8005f40:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f44:	eeb0 0b47 	vmov.f64	d0, d7
 8005f48:	f011 fa06 	bl	8017358 <sin>
 8005f4c:	eeb0 7b40 	vmov.f64	d7, d0
	           2.8921178332800004E+6 *
 8005f50:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8006118 <IVK+0x4630>
 8005f54:	ee27 9b06 	vmul.f64	d9, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005f58:	f107 030c 	add.w	r3, r7, #12
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3308      	adds	r3, #8
 8005f60:	ed93 6b00 	vldr	d6, [r3]
 8005f64:	f107 030c 	add.w	r3, r7, #12
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3310      	adds	r3, #16
 8005f6c:	ed93 7b00 	vldr	d7, [r3]
 8005f70:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005f74:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005f78:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 80060f0 <IVK+0x4608>
 8005f7c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f80:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 80060f8 <IVK+0x4610>
 8005f84:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005f88:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8006100 <IVK+0x4618>
 8005f8c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005f90:	eeb0 0b47 	vmov.f64	d0, d7
 8005f94:	f011 f9e0 	bl	8017358 <sin>
 8005f98:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 8005f9c:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(q[1] + 1.6845) * cos(q[0])) +
 8005fa0:	f107 030c 	add.w	r3, r7, #12
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	3308      	adds	r3, #8
 8005fa8:	ed93 7b00 	vldr	d7, [r3]
 8005fac:	ed9f 6b50 	vldr	d6, [pc, #320]	; 80060f0 <IVK+0x4608>
 8005fb0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005fb4:	eeb0 0b47 	vmov.f64	d0, d7
 8005fb8:	f011 f97a 	bl	80172b0 <cos>
 8005fbc:	eeb0 7b40 	vmov.f64	d7, d0
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005fc0:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(q[1] + 1.6845) * cos(q[0])) +
 8005fc4:	f107 030c 	add.w	r3, r7, #12
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	ed93 7b00 	vldr	d7, [r3]
 8005fce:	eeb0 0b47 	vmov.f64	d0, d7
 8005fd2:	f011 f96d 	bl	80172b0 <cos>
 8005fd6:	eeb0 7b40 	vmov.f64	d7, d0
 8005fda:	ee29 7b07 	vmul.f64	d7, d9, d7
	                sin(q[1] + 1.6845) * cos(q[0])) -
 8005fde:	ee38 8b47 	vsub.f64	d8, d8, d7
	          211366.80000000002 *
	              sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005fe2:	f107 030c 	add.w	r3, r7, #12
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	3308      	adds	r3, #8
 8005fea:	ed93 6b00 	vldr	d6, [r3]
 8005fee:	f107 030c 	add.w	r3, r7, #12
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3310      	adds	r3, #16
 8005ff6:	ed93 7b00 	vldr	d7, [r3]
 8005ffa:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005ffe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006002:	f107 030c 	add.w	r3, r7, #12
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3318      	adds	r3, #24
 800600a:	ed93 7b00 	vldr	d7, [r3]
 800600e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006012:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80060f0 <IVK+0x4608>
 8006016:	ee37 7b06 	vadd.f64	d7, d7, d6
 800601a:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80060f8 <IVK+0x4610>
 800601e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006022:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8006100 <IVK+0x4618>
 8006026:	ee37 7b46 	vsub.f64	d7, d7, d6
 800602a:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8006108 <IVK+0x4620>
 800602e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006032:	eeb0 0b47 	vmov.f64	d0, d7
 8006036:	f011 f98f 	bl	8017358 <sin>
 800603a:	eeb0 7b40 	vmov.f64	d7, d0
	          211366.80000000002 *
 800603e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8006130 <IVK+0x4648>
 8006042:	ee27 9b06 	vmul.f64	d9, d7, d6
	                   -0.73665) +
	                  1.52205) *
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8006046:	f107 030c 	add.w	r3, r7, #12
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3308      	adds	r3, #8
 800604e:	ed93 6b00 	vldr	d6, [r3]
 8006052:	f107 030c 	add.w	r3, r7, #12
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3310      	adds	r3, #16
 800605a:	ed93 7b00 	vldr	d7, [r3]
 800605e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006062:	ed9f 6b23 	vldr	d6, [pc, #140]	; 80060f0 <IVK+0x4608>
 8006066:	ee37 7b06 	vadd.f64	d7, d7, d6
 800606a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 80060f8 <IVK+0x4610>
 800606e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006072:	eeb0 0b47 	vmov.f64	d0, d7
 8006076:	f011 f91b 	bl	80172b0 <cos>
 800607a:	eeb0 7b40 	vmov.f64	d7, d0
	                  1.52205) *
 800607e:	ee29 9b07 	vmul.f64	d9, d9, d7
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8006082:	f107 030c 	add.w	r3, r7, #12
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	3308      	adds	r3, #8
 800608a:	ed93 7b00 	vldr	d7, [r3]
 800608e:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80060f0 <IVK+0x4608>
 8006092:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006096:	eeb0 0b47 	vmov.f64	d0, d7
 800609a:	f011 f95d 	bl	8017358 <sin>
 800609e:	eeb0 7b40 	vmov.f64	d7, d0
 80060a2:	ee29 9b07 	vmul.f64	d9, d9, d7
	              cos(q[0])) -
 80060a6:	f107 030c 	add.w	r3, r7, #12
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	ed93 7b00 	vldr	d7, [r3]
 80060b0:	eeb0 0b47 	vmov.f64	d0, d7
 80060b4:	f011 f8fc 	bl	80172b0 <cos>
 80060b8:	eeb0 7b40 	vmov.f64	d7, d0
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 80060bc:	ee29 7b07 	vmul.f64	d7, d9, d7
	               cos(q[1] + 1.6845) * cos(q[0])) +
 80060c0:	ee38 8b07 	vadd.f64	d8, d8, d7
	         211366.80000000002 *
	             sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80060c4:	f107 030c 	add.w	r3, r7, #12
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	3308      	adds	r3, #8
 80060cc:	ed93 6b00 	vldr	d6, [r3]
 80060d0:	f107 030c 	add.w	r3, r7, #12
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3310      	adds	r3, #16
 80060d8:	ed93 7b00 	vldr	d7, [r3]
 80060dc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80060e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80060e4:	f107 030c 	add.w	r3, r7, #12
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	e039      	b.n	8006160 <IVK+0x4678>
 80060ec:	f3af 8000 	nop.w
 80060f0:	45a1cac1 	.word	0x45a1cac1
 80060f4:	3ffaf3b6 	.word	0x3ffaf3b6
 80060f8:	39581062 	.word	0x39581062
 80060fc:	3fecc8b4 	.word	0x3fecc8b4
 8006100:	05532618 	.word	0x05532618
 8006104:	3fe792a3 	.word	0x3fe792a3
 8006108:	19ce075f 	.word	0x19ce075f
 800610c:	3ff85a51 	.word	0x3ff85a51
 8006110:	66666666 	.word	0x66666666
 8006114:	410e10a6 	.word	0x410e10a6
 8006118:	eaa8eb47 	.word	0xeaa8eb47
 800611c:	414610aa 	.word	0x414610aa
 8006120:	05532618 	.word	0x05532618
 8006124:	3fe792a3 	.word	0x3fe792a3
 8006128:	19ce075f 	.word	0x19ce075f
 800612c:	3ff85a51 	.word	0x3ff85a51
 8006130:	66666667 	.word	0x66666667
 8006134:	4109cd36 	.word	0x4109cd36
 8006138:	39581062 	.word	0x39581062
 800613c:	3fecc8b4 	.word	0x3fecc8b4
 8006140:	00000000 	.word	0x00000000
 8006144:	404e0000 	.word	0x404e0000
 8006148:	45a1cac1 	.word	0x45a1cac1
 800614c:	3ffaf3b6 	.word	0x3ffaf3b6
 8006150:	b020c49c 	.word	0xb020c49c
 8006154:	40860472 	.word	0x40860472
 8006158:	00000000 	.word	0x00000000
 800615c:	40440000 	.word	0x40440000
 8006160:	3318      	adds	r3, #24
 8006162:	ed93 7b00 	vldr	d7, [r3]
 8006166:	ee36 7b07 	vadd.f64	d7, d6, d7
 800616a:	ed1f 6b09 	vldr	d6, [pc, #-36]	; 8006148 <IVK+0x4660>
 800616e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006172:	ed1f 6b0f 	vldr	d6, [pc, #-60]	; 8006138 <IVK+0x4650>
 8006176:	ee37 7b46 	vsub.f64	d7, d7, d6
 800617a:	ed1f 6b17 	vldr	d6, [pc, #-92]	; 8006120 <IVK+0x4638>
 800617e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006182:	ed1f 6b17 	vldr	d6, [pc, #-92]	; 8006128 <IVK+0x4640>
 8006186:	ee37 7b06 	vadd.f64	d7, d7, d6
 800618a:	eeb0 0b47 	vmov.f64	d0, d7
 800618e:	f011 f8e3 	bl	8017358 <sin>
 8006192:	eeb0 7b40 	vmov.f64	d7, d0
	         211366.80000000002 *
 8006196:	ed1f 6b1a 	vldr	d6, [pc, #-104]	; 8006130 <IVK+0x4648>
 800619a:	ee27 9b06 	vmul.f64	d9, d7, d6
	                  -0.73665) +
	                 1.52205) *
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 800619e:	f107 030c 	add.w	r3, r7, #12
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3308      	adds	r3, #8
 80061a6:	ed93 6b00 	vldr	d6, [r3]
 80061aa:	f107 030c 	add.w	r3, r7, #12
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	3310      	adds	r3, #16
 80061b2:	ed93 7b00 	vldr	d7, [r3]
 80061b6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80061ba:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 8006148 <IVK+0x4660>
 80061be:	ee37 7b06 	vadd.f64	d7, d7, d6
 80061c2:	ed1f 6b23 	vldr	d6, [pc, #-140]	; 8006138 <IVK+0x4650>
 80061c6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80061ca:	eeb0 0b47 	vmov.f64	d0, d7
 80061ce:	f011 f8c3 	bl	8017358 <sin>
 80061d2:	eeb0 7b40 	vmov.f64	d7, d0
	                 1.52205) *
 80061d6:	ee29 9b07 	vmul.f64	d9, d9, d7
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 80061da:	f107 030c 	add.w	r3, r7, #12
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3308      	adds	r3, #8
 80061e2:	ed93 7b00 	vldr	d7, [r3]
 80061e6:	ed1f 6b28 	vldr	d6, [pc, #-160]	; 8006148 <IVK+0x4660>
 80061ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80061ee:	eeb0 0b47 	vmov.f64	d0, d7
 80061f2:	f011 f85d 	bl	80172b0 <cos>
 80061f6:	eeb0 7b40 	vmov.f64	d7, d0
 80061fa:	ee29 9b07 	vmul.f64	d9, d9, d7
	             cos(q[0]))) /
 80061fe:	f107 030c 	add.w	r3, r7, #12
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	ed93 7b00 	vldr	d7, [r3]
 8006208:	eeb0 0b47 	vmov.f64	d0, d7
 800620c:	f011 f850 	bl	80172b0 <cos>
 8006210:	eeb0 7b40 	vmov.f64	d7, d0
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8006214:	ee29 7b07 	vmul.f64	d7, d9, d7
	              cos(q[0])) -
 8006218:	ee38 7b47 	vsub.f64	d7, d8, d7
	      -(4.0 *
 800621c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8006220:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006224:	eeb1 5b47 	vneg.f64	d5, d7
	             cos(q[0]))) /
 8006228:	ed97 6b7a 	vldr	d6, [r7, #488]	; 0x1e8
 800622c:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[9] =
 8006230:	f107 0310 	add.w	r3, r7, #16
 8006234:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	      d;
	  dv[14] = -(40.0 * cos(q[0]) *
 8006238:	f107 030c 	add.w	r3, r7, #12
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	ed93 7b00 	vldr	d7, [r3]
 8006242:	eeb0 0b47 	vmov.f64	d0, d7
 8006246:	f011 f833 	bl	80172b0 <cos>
 800624a:	eeb0 7b40 	vmov.f64	d7, d0
 800624e:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 8006158 <IVK+0x4670>
 8006252:	ee27 8b06 	vmul.f64	d8, d7, d6
	             (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8006256:	f107 030c 	add.w	r3, r7, #12
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3308      	adds	r3, #8
 800625e:	ed93 6b00 	vldr	d6, [r3]
 8006262:	f107 030c 	add.w	r3, r7, #12
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3310      	adds	r3, #16
 800626a:	ed93 7b00 	vldr	d7, [r3]
 800626e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006272:	ed1f 6b4b 	vldr	d6, [pc, #-300]	; 8006148 <IVK+0x4660>
 8006276:	ee37 7b06 	vadd.f64	d7, d7, d6
 800627a:	ed1f 6b51 	vldr	d6, [pc, #-324]	; 8006138 <IVK+0x4650>
 800627e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006282:	eeb0 0b47 	vmov.f64	d0, d7
 8006286:	f011 f813 	bl	80172b0 <cos>
 800628a:	eeb0 7b40 	vmov.f64	d7, d0
 800628e:	ed1f 6b54 	vldr	d6, [pc, #-336]	; 8006140 <IVK+0x4658>
 8006292:	ee27 9b06 	vmul.f64	d9, d7, d6
	              704.556 * cos(q[1] + 1.6845))) /
 8006296:	f107 030c 	add.w	r3, r7, #12
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3308      	adds	r3, #8
 800629e:	ed93 7b00 	vldr	d7, [r3]
 80062a2:	ed1f 6b57 	vldr	d6, [pc, #-348]	; 8006148 <IVK+0x4660>
 80062a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80062aa:	eeb0 0b47 	vmov.f64	d0, d7
 80062ae:	f010 ffff 	bl	80172b0 <cos>
 80062b2:	eeb0 7b40 	vmov.f64	d7, d0
 80062b6:	ed1f 6b5a 	vldr	d6, [pc, #-360]	; 8006150 <IVK+0x4668>
 80062ba:	ee27 7b06 	vmul.f64	d7, d7, d6
	             (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) +
 80062be:	ee39 7b07 	vadd.f64	d7, d9, d7
	  dv[14] = -(40.0 * cos(q[0]) *
 80062c2:	ee28 7b07 	vmul.f64	d7, d8, d7
 80062c6:	eeb1 5b47 	vneg.f64	d5, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 80062ca:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80062ce:	ee27 6b07 	vmul.f64	d6, d7, d7
 80062d2:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80062d6:	ee26 6b07 	vmul.f64	d6, d6, d7
	                             d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80062da:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80062de:	ee27 4b07 	vmul.f64	d4, d7, d7
 80062e2:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 80062e6:	ee24 7b07 	vmul.f64	d7, d4, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 80062ea:	ee36 6b47 	vsub.f64	d6, d6, d7
	                            d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80062ee:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80062f2:	ee27 4b07 	vmul.f64	d4, d7, d7
 80062f6:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80062fa:	ee24 7b07 	vmul.f64	d7, d4, d7
	                             d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80062fe:	ee36 6b07 	vadd.f64	d6, d6, d7
	                           d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8006302:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8006306:	ee27 4b07 	vmul.f64	d4, d7, d7
 800630a:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 800630e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                            d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006312:	ee36 6b47 	vsub.f64	d6, d6, d7
	                          d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8006316:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800631a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800631e:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8006322:	ee24 7b07 	vmul.f64	d7, d4, d7
	                           d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8006326:	ee36 6b07 	vadd.f64	d6, d6, d7
	                         d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800632a:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800632e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006332:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8006336:	ee24 7b07 	vmul.f64	d7, d4, d7
	                          d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 800633a:	ee36 6b47 	vsub.f64	d6, d6, d7
	                        d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 800633e:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8006342:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006346:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 800634a:	ee24 7b07 	vmul.f64	d7, d4, d7
	                         d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800634e:	ee36 6b07 	vadd.f64	d6, d6, d7
	                       d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8006352:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8006356:	ee27 4b07 	vmul.f64	d4, d7, d7
 800635a:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 800635e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                        d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006362:	ee36 6b47 	vsub.f64	d6, d6, d7
	                      d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8006366:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800636a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800636e:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8006372:	ee24 7b07 	vmul.f64	d7, d4, d7
	                       d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8006376:	ee36 6b07 	vadd.f64	d6, d6, d7
	                     d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800637a:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800637e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006382:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8006386:	ee24 7b07 	vmul.f64	d7, d4, d7
	                      d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 800638a:	ee36 6b47 	vsub.f64	d6, d6, d7
	                    d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 800638e:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8006392:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006396:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 800639a:	ee24 7b07 	vmul.f64	d7, d4, d7
	                     d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800639e:	ee36 6b07 	vadd.f64	d6, d6, d7
	                   d8 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)));
 80063a2:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80063a6:	ee27 4b07 	vmul.f64	d4, d7, d7
 80063aa:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 80063ae:	ee24 7b07 	vmul.f64	d7, d4, d7
	                    d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80063b2:	ee36 7b47 	vsub.f64	d7, d6, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 80063b6:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 80063ba:	ee27 6b06 	vmul.f64	d6, d7, d6
	              704.556 * cos(q[1] + 1.6845))) /
 80063be:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[14] = -(40.0 * cos(q[0]) *
 80063c2:	f107 0310 	add.w	r3, r7, #16
 80063c6:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
	  dv[19] =
	      -(40.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 80063ca:	f107 030c 	add.w	r3, r7, #12
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	3308      	adds	r3, #8
 80063d2:	ed93 6b00 	vldr	d6, [r3]
 80063d6:	f107 030c 	add.w	r3, r7, #12
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	3310      	adds	r3, #16
 80063de:	ed93 7b00 	vldr	d7, [r3]
 80063e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80063e6:	ed1f 6ba8 	vldr	d6, [pc, #-672]	; 8006148 <IVK+0x4660>
 80063ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80063ee:	ed1f 6bae 	vldr	d6, [pc, #-696]	; 8006138 <IVK+0x4650>
 80063f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80063f6:	eeb0 0b47 	vmov.f64	d0, d7
 80063fa:	f010 ff59 	bl	80172b0 <cos>
 80063fe:	eeb0 7b40 	vmov.f64	d7, d0
 8006402:	ed1f 6bb1 	vldr	d6, [pc, #-708]	; 8006140 <IVK+0x4658>
 8006406:	ee27 8b06 	vmul.f64	d8, d7, d6
 800640a:	f107 030c 	add.w	r3, r7, #12
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	ed93 7b00 	vldr	d7, [r3]
 8006414:	eeb0 0b47 	vmov.f64	d0, d7
 8006418:	f010 ff9e 	bl	8017358 <sin>
 800641c:	eeb0 7b40 	vmov.f64	d7, d0
 8006420:	ee28 8b07 	vmul.f64	d8, d8, d7
	                704.556 * cos(q[1] + 1.6845) * sin(q[0]))) /
 8006424:	f107 030c 	add.w	r3, r7, #12
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3308      	adds	r3, #8
 800642c:	ed93 7b00 	vldr	d7, [r3]
 8006430:	ed1f 6bbb 	vldr	d6, [pc, #-748]	; 8006148 <IVK+0x4660>
 8006434:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006438:	eeb0 0b47 	vmov.f64	d0, d7
 800643c:	f010 ff38 	bl	80172b0 <cos>
 8006440:	eeb0 7b40 	vmov.f64	d7, d0
 8006444:	ed1f 6bbe 	vldr	d6, [pc, #-760]	; 8006150 <IVK+0x4668>
 8006448:	ee27 9b06 	vmul.f64	d9, d7, d6
 800644c:	f107 030c 	add.w	r3, r7, #12
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	ed93 7b00 	vldr	d7, [r3]
 8006456:	eeb0 0b47 	vmov.f64	d0, d7
 800645a:	f010 ff7d 	bl	8017358 <sin>
 800645e:	eeb0 7b40 	vmov.f64	d7, d0
 8006462:	ee29 7b07 	vmul.f64	d7, d9, d7
	      -(40.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 8006466:	ee38 7b07 	vadd.f64	d7, d8, d7
 800646a:	ed1f 6bc5 	vldr	d6, [pc, #-788]	; 8006158 <IVK+0x4670>
 800646e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006472:	eeb1 5b47 	vneg.f64	d5, d7
	      (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8006476:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800647a:	ee27 6b07 	vmul.f64	d6, d7, d7
 800647e:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8006482:	ee26 6b07 	vmul.f64	d6, d6, d7
	                        d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8006486:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800648a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800648e:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8006492:	ee24 7b07 	vmul.f64	d7, d4, d7
	      (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8006496:	ee36 6b47 	vsub.f64	d6, d6, d7
	                       d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 800649a:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800649e:	ee27 4b07 	vmul.f64	d4, d7, d7
 80064a2:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80064a6:	ee24 7b07 	vmul.f64	d7, d4, d7
	                        d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80064aa:	ee36 6b07 	vadd.f64	d6, d6, d7
	                      d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80064ae:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80064b2:	ee27 4b07 	vmul.f64	d4, d7, d7
 80064b6:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 80064ba:	ee24 7b07 	vmul.f64	d7, d4, d7
	                       d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80064be:	ee36 6b47 	vsub.f64	d6, d6, d7
	                     d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 80064c2:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80064c6:	ee27 4b07 	vmul.f64	d4, d7, d7
 80064ca:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 80064ce:	ee24 7b07 	vmul.f64	d7, d4, d7
	                      d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80064d2:	ee36 6b07 	vadd.f64	d6, d6, d7
	                    d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80064d6:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80064da:	ee27 4b07 	vmul.f64	d4, d7, d7
 80064de:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 80064e2:	ee24 7b07 	vmul.f64	d7, d4, d7
	                     d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 80064e6:	ee36 6b47 	vsub.f64	d6, d6, d7
	                   d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80064ea:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80064ee:	ee27 4b07 	vmul.f64	d4, d7, d7
 80064f2:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 80064f6:	ee24 7b07 	vmul.f64	d7, d4, d7
	                    d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80064fa:	ee36 6b07 	vadd.f64	d6, d6, d7
	                  d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80064fe:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8006502:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006506:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 800650a:	ee24 7b07 	vmul.f64	d7, d4, d7
	                   d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 800650e:	ee36 6b47 	vsub.f64	d6, d6, d7
	                 d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8006512:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8006516:	ee27 4b07 	vmul.f64	d4, d7, d7
 800651a:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 800651e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                  d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8006522:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8006526:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800652a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800652e:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8006532:	ee24 7b07 	vmul.f64	d7, d4, d7
	                 d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8006536:	ee36 6b47 	vsub.f64	d6, d6, d7
	               d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 800653a:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800653e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006542:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8006546:	ee24 7b07 	vmul.f64	d7, d4, d7
	                d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800654a:	ee36 6b07 	vadd.f64	d6, d6, d7
	              d8 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)));
 800654e:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8006552:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006556:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 800655a:	ee24 7b07 	vmul.f64	d7, d4, d7
	               d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 800655e:	ee36 7b47 	vsub.f64	d7, d6, d7
	      (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8006562:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8006566:	ee27 6b06 	vmul.f64	d6, d7, d6
	                704.556 * cos(q[1] + 1.6845) * sin(q[0]))) /
 800656a:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[19] =
 800656e:	f107 0310 	add.w	r3, r7, #16
 8006572:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
	  dv[24] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8006576:	f107 030c 	add.w	r3, r7, #12
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3308      	adds	r3, #8
 800657e:	ed93 6b00 	vldr	d6, [r3]
 8006582:	f107 030c 	add.w	r3, r7, #12
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3310      	adds	r3, #16
 800658a:	ed93 7b00 	vldr	d7, [r3]
 800658e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006592:	ed9f 6b83 	vldr	d6, [pc, #524]	; 80067a0 <IVK+0x4cb8>
 8006596:	ee37 7b06 	vadd.f64	d7, d7, d6
 800659a:	ed9f 6b83 	vldr	d6, [pc, #524]	; 80067a8 <IVK+0x4cc0>
 800659e:	ee37 7b46 	vsub.f64	d7, d7, d6
 80065a2:	eeb0 0b47 	vmov.f64	d0, d7
 80065a6:	f010 fed7 	bl	8017358 <sin>
 80065aa:	eeb0 7b40 	vmov.f64	d7, d0
 80065ae:	ed9f 6b80 	vldr	d6, [pc, #512]	; 80067b0 <IVK+0x4cc8>
 80065b2:	ee27 8b06 	vmul.f64	d8, d7, d6
	                     704.556 * sin(q[1] + 1.6845))) /
 80065b6:	f107 030c 	add.w	r3, r7, #12
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3308      	adds	r3, #8
 80065be:	ed93 7b00 	vldr	d7, [r3]
 80065c2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80067a0 <IVK+0x4cb8>
 80065c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80065ca:	eeb0 0b47 	vmov.f64	d0, d7
 80065ce:	f010 fec3 	bl	8017358 <sin>
 80065d2:	eeb0 7b40 	vmov.f64	d7, d0
 80065d6:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80067b8 <IVK+0x4cd0>
 80065da:	ee27 7b06 	vmul.f64	d7, d7, d6
	  dv[24] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 80065de:	ee38 7b07 	vadd.f64	d7, d8, d7
 80065e2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80067c0 <IVK+0x4cd8>
 80065e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80065ea:	eeb1 5b47 	vneg.f64	d5, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 80065ee:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80065f2:	ee27 6b07 	vmul.f64	d6, d7, d7
 80065f6:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80065fa:	ee26 6b07 	vmul.f64	d6, d6, d7
	                             d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80065fe:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8006602:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006606:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 800660a:	ee24 7b07 	vmul.f64	d7, d4, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 800660e:	ee36 6b47 	vsub.f64	d6, d6, d7
	                            d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006612:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8006616:	ee27 4b07 	vmul.f64	d4, d7, d7
 800661a:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800661e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                             d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8006622:	ee36 6b07 	vadd.f64	d6, d6, d7
	                           d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8006626:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800662a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800662e:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8006632:	ee24 7b07 	vmul.f64	d7, d4, d7
	                            d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006636:	ee36 6b47 	vsub.f64	d6, d6, d7
	                          d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 800663a:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800663e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006642:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8006646:	ee24 7b07 	vmul.f64	d7, d4, d7
	                           d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 800664a:	ee36 6b07 	vadd.f64	d6, d6, d7
	                         d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800664e:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8006652:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006656:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 800665a:	ee24 7b07 	vmul.f64	d7, d4, d7
	                          d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 800665e:	ee36 6b47 	vsub.f64	d6, d6, d7
	                        d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006662:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8006666:	ee27 4b07 	vmul.f64	d4, d7, d7
 800666a:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 800666e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                         d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8006672:	ee36 6b07 	vadd.f64	d6, d6, d7
	                       d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8006676:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800667a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800667e:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8006682:	ee24 7b07 	vmul.f64	d7, d4, d7
	                        d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006686:	ee36 6b47 	vsub.f64	d6, d6, d7
	                      d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 800668a:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800668e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006692:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8006696:	ee24 7b07 	vmul.f64	d7, d4, d7
	                       d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 800669a:	ee36 6b07 	vadd.f64	d6, d6, d7
	                     d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800669e:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80066a2:	ee27 4b07 	vmul.f64	d4, d7, d7
 80066a6:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 80066aa:	ee24 7b07 	vmul.f64	d7, d4, d7
	                      d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 80066ae:	ee36 6b47 	vsub.f64	d6, d6, d7
	                    d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80066b2:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80066b6:	ee27 4b07 	vmul.f64	d4, d7, d7
 80066ba:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 80066be:	ee24 7b07 	vmul.f64	d7, d4, d7
	                     d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80066c2:	ee36 6b07 	vadd.f64	d6, d6, d7
	                   d8 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)));
 80066c6:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80066ca:	ee27 4b07 	vmul.f64	d4, d7, d7
 80066ce:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 80066d2:	ee24 7b07 	vmul.f64	d7, d4, d7
	                    d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80066d6:	ee36 7b47 	vsub.f64	d7, d6, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 80066da:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 80066de:	ee27 6b06 	vmul.f64	d6, d7, d6
	                     704.556 * sin(q[1] + 1.6845))) /
 80066e2:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[24] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 80066e6:	f107 0310 	add.w	r3, r7, #16
 80066ea:	ed83 7b30 	vstr	d7, [r3, #192]	; 0xc0
	  for (i = 0; i < 5; i++) {
 80066ee:	2300      	movs	r3, #0
 80066f0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80066f4:	e040      	b.n	8006778 <IVK+0x4c90>
	    d = 0.0;
 80066f6:	f04f 0200 	mov.w	r2, #0
 80066fa:	f04f 0300 	mov.w	r3, #0
 80066fe:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
	    for (i1 = 0; i1 < 5; i1++) {
 8006702:	2300      	movs	r3, #0
 8006704:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006708:	e023      	b.n	8006752 <IVK+0x4c6a>
	      d += dv[i + 5 * i1] * x_dot[i1];
 800670a:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	441a      	add	r2, r3
 8006714:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006718:	4413      	add	r3, r2
 800671a:	f107 0210 	add.w	r2, r7, #16
 800671e:	00db      	lsls	r3, r3, #3
 8006720:	4413      	add	r3, r2
 8006722:	ed93 6b00 	vldr	d6, [r3]
 8006726:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800672a:	00db      	lsls	r3, r3, #3
 800672c:	f107 0208 	add.w	r2, r7, #8
 8006730:	6812      	ldr	r2, [r2, #0]
 8006732:	4413      	add	r3, r2
 8006734:	ed93 7b00 	vldr	d7, [r3]
 8006738:	ee26 7b07 	vmul.f64	d7, d6, d7
 800673c:	ed97 6b7a 	vldr	d6, [r7, #488]	; 0x1e8
 8006740:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006744:	ed87 7b7a 	vstr	d7, [r7, #488]	; 0x1e8
	    for (i1 = 0; i1 < 5; i1++) {
 8006748:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800674c:	3301      	adds	r3, #1
 800674e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8006752:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8006756:	2b04      	cmp	r3, #4
 8006758:	ddd7      	ble.n	800670a <IVK+0x4c22>
	    }
	    m_dot_temp[i] = d;
 800675a:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800675e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	18d1      	adds	r1, r2, r3
 8006766:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 800676a:	e9c1 2300 	strd	r2, r3, [r1]
	  for (i = 0; i < 5; i++) {
 800676e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006772:	3301      	adds	r3, #1
 8006774:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8006778:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800677c:	2b04      	cmp	r3, #4
 800677e:	ddba      	ble.n	80066f6 <IVK+0x4c0e>
	  }
	memcpy(m_dot, m_dot_temp, 40);
 8006780:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 8006784:	1d3b      	adds	r3, r7, #4
 8006786:	2228      	movs	r2, #40	; 0x28
 8006788:	6818      	ldr	r0, [r3, #0]
 800678a:	f00d fe4d 	bl	8014428 <memcpy>
}
 800678e:	bf00      	nop
 8006790:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 8006794:	46bd      	mov	sp, r7
 8006796:	ecbd 8b04 	vpop	{d8-d9}
 800679a:	bd80      	pop	{r7, pc}
 800679c:	f3af 8000 	nop.w
 80067a0:	45a1cac1 	.word	0x45a1cac1
 80067a4:	3ffaf3b6 	.word	0x3ffaf3b6
 80067a8:	39581062 	.word	0x39581062
 80067ac:	3fecc8b4 	.word	0x3fecc8b4
 80067b0:	00000000 	.word	0x00000000
 80067b4:	404e0000 	.word	0x404e0000
 80067b8:	b020c49c 	.word	0xb020c49c
 80067bc:	40860472 	.word	0x40860472
 80067c0:	00000000 	.word	0x00000000
 80067c4:	40440000 	.word	0x40440000

080067c8 <stepper_initialise>:
 */

#include <Library/Motor.h>

void stepper_initialise(Stepper_Motor *dev, TIM_HandleTypeDef *timHandle,
		uint32_t tim_channel, GPIO_TypeDef *dir_port, uint16_t dir_pin, uint8_t dir_mode) {
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
 80067d4:	603b      	str	r3, [r7, #0]

	/* Set struct parameters */
	dev->timHandle = timHandle;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	601a      	str	r2, [r3, #0]
	dev->tim_channel = tim_channel;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	605a      	str	r2, [r3, #4]
	dev->dir_port = dir_port;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	609a      	str	r2, [r3, #8]
	dev->dir_pin = dir_pin;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	8b3a      	ldrh	r2, [r7, #24]
 80067ec:	819a      	strh	r2, [r3, #12]
	/*
	 * dir mode set direction of stepper
	 */
	dev->dir_mode = dir_mode;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	7f3a      	ldrb	r2, [r7, #28]
 80067f2:	765a      	strb	r2, [r3, #25]
	HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6898      	ldr	r0, [r3, #8]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	899b      	ldrh	r3, [r3, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	4619      	mov	r1, r3
 8006800:	f006 fbae 	bl	800cf60 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(dev->timHandle, dev->tim_channel);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	4619      	mov	r1, r3
 800680e:	4610      	mov	r0, r2
 8006810:	f009 fdca 	bl	80103a8 <HAL_TIM_PWM_Start>
	dev->freq = 1;
 8006814:	68f9      	ldr	r1, [r7, #12]
 8006816:	f04f 0200 	mov.w	r2, #0
 800681a:	4b09      	ldr	r3, [pc, #36]	; (8006840 <stepper_initialise+0x78>)
 800681c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	stepper_set_speed(dev, 0);
 8006820:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8006838 <stepper_initialise+0x70>
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 f903 	bl	8006a30 <stepper_set_speed>
}
 800682a:	bf00      	nop
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	f3af 8000 	nop.w
	...
 8006840:	3ff00000 	.word	0x3ff00000

08006844 <servo_initialise>:

void servo_initialise(Servo_Motor *dev, TIM_HandleTypeDef *timHandle,uint32_t tim_channel) {
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
	/* Set struct parameters */
	dev->timHandle = timHandle;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	601a      	str	r2, [r3, #0]
	dev->tim_channel = tim_channel;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	605a      	str	r2, [r3, #4]
	HAL_TIM_PWM_Start(dev->timHandle, dev->tim_channel);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	4619      	mov	r1, r3
 8006866:	4610      	mov	r0, r2
 8006868:	f009 fd9e 	bl	80103a8 <HAL_TIM_PWM_Start>
	dev->degree = 0;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	721a      	strb	r2, [r3, #8]
	servo_set_degree(dev, 10);
 8006872:	210a      	movs	r1, #10
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f000 f897 	bl	80069a8 <servo_set_degree>
}
 800687a:	bf00      	nop
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	0000      	movs	r0, r0
 8006884:	0000      	movs	r0, r0
	...

08006888 <set_pwm>:

void set_pwm(TIM_HandleTypeDef *tim_pwm, uint32_t tim_channel, double freq,
		double duty_cycle) {
 8006888:	b480      	push	{r7}
 800688a:	b089      	sub	sp, #36	; 0x24
 800688c:	af00      	add	r7, sp, #0
 800688e:	6178      	str	r0, [r7, #20]
 8006890:	6139      	str	r1, [r7, #16]
 8006892:	ed87 0b02 	vstr	d0, [r7, #8]
 8006896:	ed87 1b00 	vstr	d1, [r7]

	 :param freq = frequency of pwm
	 :param duty_cycle is % duty cycle 0.0 - 1.0
	 :return: None
	 */
	if (freq > MAX_FREQUENCY){
 800689a:	ed97 7b02 	vldr	d7, [r7, #8]
 800689e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8006990 <set_pwm+0x108>
 80068a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80068a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068aa:	dd05      	ble.n	80068b8 <set_pwm+0x30>
		freq = MAX_FREQUENCY;
 80068ac:	a338      	add	r3, pc, #224	; (adr r3, 8006990 <set_pwm+0x108>)
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80068b6:	e00d      	b.n	80068d4 <set_pwm+0x4c>
	}
	else if ((freq * -1) > MAX_FREQUENCY){
 80068b8:	ed97 7b02 	vldr	d7, [r7, #8]
 80068bc:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8006998 <set_pwm+0x110>
 80068c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80068c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068c8:	d504      	bpl.n	80068d4 <set_pwm+0x4c>
		freq = MAX_FREQUENCY;
 80068ca:	a331      	add	r3, pc, #196	; (adr r3, 8006990 <set_pwm+0x108>)
 80068cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}
	uint16_t ARR_value = 50000 / freq; //500000 come from 275MHz/550
 80068d4:	ed9f 5b32 	vldr	d5, [pc, #200]	; 80069a0 <set_pwm+0x118>
 80068d8:	ed97 6b02 	vldr	d6, [r7, #8]
 80068dc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80068e0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80068e4:	ee17 3a90 	vmov	r3, s15
 80068e8:	83bb      	strh	r3, [r7, #28]
	uint16_t CCRx_value = (ARR_value * duty_cycle);
 80068ea:	8bbb      	ldrh	r3, [r7, #28]
 80068ec:	ee07 3a90 	vmov	s15, r3
 80068f0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80068f4:	ed97 7b00 	vldr	d7, [r7]
 80068f8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80068fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006900:	ee17 3a90 	vmov	r3, s15
 8006904:	83fb      	strh	r3, [r7, #30]
	if (duty_cycle == 1.0) {
 8006906:	ed97 7b00 	vldr	d7, [r7]
 800690a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800690e:	eeb4 7b46 	vcmp.f64	d7, d6
 8006912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006916:	d101      	bne.n	800691c <set_pwm+0x94>
		CCRx_value = 0;
 8006918:	2300      	movs	r3, #0
 800691a:	83fb      	strh	r3, [r7, #30]
	}
	__HAL_TIM_SET_AUTORELOAD(tim_pwm, ARR_value);
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	8bba      	ldrh	r2, [r7, #28]
 8006922:	62da      	str	r2, [r3, #44]	; 0x2c
 8006924:	8bba      	ldrh	r2, [r7, #28]
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d104      	bne.n	800693a <set_pwm+0xb2>
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	8bfa      	ldrh	r2, [r7, #30]
 8006936:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006938:	e023      	b.n	8006982 <set_pwm+0xfa>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	2b04      	cmp	r3, #4
 800693e:	d104      	bne.n	800694a <set_pwm+0xc2>
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	8bfb      	ldrh	r3, [r7, #30]
 8006946:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006948:	e01b      	b.n	8006982 <set_pwm+0xfa>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	2b08      	cmp	r3, #8
 800694e:	d104      	bne.n	800695a <set_pwm+0xd2>
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	8bfb      	ldrh	r3, [r7, #30]
 8006956:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8006958:	e013      	b.n	8006982 <set_pwm+0xfa>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	2b0c      	cmp	r3, #12
 800695e:	d104      	bne.n	800696a <set_pwm+0xe2>
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	8bfb      	ldrh	r3, [r7, #30]
 8006966:	6413      	str	r3, [r2, #64]	; 0x40
}
 8006968:	e00b      	b.n	8006982 <set_pwm+0xfa>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	2b10      	cmp	r3, #16
 800696e:	d104      	bne.n	800697a <set_pwm+0xf2>
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	8bfb      	ldrh	r3, [r7, #30]
 8006976:	6593      	str	r3, [r2, #88]	; 0x58
}
 8006978:	e003      	b.n	8006982 <set_pwm+0xfa>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	8bfb      	ldrh	r3, [r7, #30]
 8006980:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8006982:	bf00      	nop
 8006984:	3724      	adds	r7, #36	; 0x24
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	00000000 	.word	0x00000000
 8006994:	40d86a00 	.word	0x40d86a00
 8006998:	00000000 	.word	0x00000000
 800699c:	c0d86a00 	.word	0xc0d86a00
 80069a0:	00000000 	.word	0x00000000
 80069a4:	40e86a00 	.word	0x40e86a00

080069a8 <servo_set_degree>:

void servo_set_degree(Servo_Motor *dev, uint8_t degree) {
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	460b      	mov	r3, r1
 80069b2:	70fb      	strb	r3, [r7, #3]
	 servo_set_degree does set your servo to your given value.

	 :param degree is degree of servo motor (0-180)
	 :return: None
	 */
	if (degree != dev->degree) {
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	7a1b      	ldrb	r3, [r3, #8]
 80069b8:	78fa      	ldrb	r2, [r7, #3]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d026      	beq.n	8006a0c <servo_set_degree+0x64>
		if (degree > 180) {
 80069be:	78fb      	ldrb	r3, [r7, #3]
 80069c0:	2bb4      	cmp	r3, #180	; 0xb4
 80069c2:	d901      	bls.n	80069c8 <servo_set_degree+0x20>
			degree = 180.0;
 80069c4:	23b4      	movs	r3, #180	; 0xb4
 80069c6:	70fb      	strb	r3, [r7, #3]
		} else if (degree < 0) {
			degree = 0.0;
		}
		double cyc = 0.05 + ((degree / 180.0) * 0.05);
 80069c8:	78fb      	ldrb	r3, [r7, #3]
 80069ca:	ee07 3a90 	vmov	s15, r3
 80069ce:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80069d2:	ed9f 5b11 	vldr	d5, [pc, #68]	; 8006a18 <servo_set_degree+0x70>
 80069d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80069da:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8006a20 <servo_set_degree+0x78>
 80069de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80069e2:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8006a20 <servo_set_degree+0x78>
 80069e6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80069ea:	ed87 7b02 	vstr	d7, [r7, #8]
		set_pwm(dev->timHandle, dev->tim_channel, 50, cyc);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	ed97 1b02 	vldr	d1, [r7, #8]
 80069fa:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8006a28 <servo_set_degree+0x80>
 80069fe:	4619      	mov	r1, r3
 8006a00:	4610      	mov	r0, r2
 8006a02:	f7ff ff41 	bl	8006888 <set_pwm>
		dev->degree = degree;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	78fa      	ldrb	r2, [r7, #3]
 8006a0a:	721a      	strb	r2, [r3, #8]
	}
}
 8006a0c:	bf00      	nop
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	f3af 8000 	nop.w
 8006a18:	00000000 	.word	0x00000000
 8006a1c:	40668000 	.word	0x40668000
 8006a20:	9999999a 	.word	0x9999999a
 8006a24:	3fa99999 	.word	0x3fa99999
 8006a28:	00000000 	.word	0x00000000
 8006a2c:	40490000 	.word	0x40490000

08006a30 <stepper_set_speed>:

void stepper_set_speed(Stepper_Motor *dev, double freq) {
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	ed87 0b00 	vstr	d0, [r7]
	 stepper_set_speed does set your stepper to your given value.

	 :param freq can be -9999.9999 to 9999.9999. signed value use to set stepper direction.
	 :return: None
	 */
	if (freq != dev->freq) {
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	ed93 7b04 	vldr	d7, [r3, #16]
 8006a42:	ed97 6b00 	vldr	d6, [r7]
 8006a46:	eeb4 6b47 	vcmp.f64	d6, d7
 8006a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a4e:	d072      	beq.n	8006b36 <stepper_set_speed+0x106>
		if (freq > MIN_FREQUENCY) {
 8006a50:	ed97 7b00 	vldr	d7, [r7]
 8006a54:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006a58:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a60:	dd25      	ble.n	8006aae <stepper_set_speed+0x7e>
			if (dev->dir_mode == 0){
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	7e5b      	ldrb	r3, [r3, #25]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d108      	bne.n	8006a7c <stepper_set_speed+0x4c>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	6898      	ldr	r0, [r3, #8]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	899b      	ldrh	r3, [r3, #12]
 8006a72:	2200      	movs	r2, #0
 8006a74:	4619      	mov	r1, r3
 8006a76:	f006 fa73 	bl	800cf60 <HAL_GPIO_WritePin>
 8006a7a:	e00b      	b.n	8006a94 <stepper_set_speed+0x64>
			}
			else if (dev->dir_mode == 1){
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	7e5b      	ldrb	r3, [r3, #25]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d107      	bne.n	8006a94 <stepper_set_speed+0x64>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 1);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6898      	ldr	r0, [r3, #8]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	899b      	ldrh	r3, [r3, #12]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	4619      	mov	r1, r3
 8006a90:	f006 fa66 	bl	800cf60 <HAL_GPIO_WritePin>
			}
			set_pwm(dev->timHandle, dev->tim_channel, freq, 0.50);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8006aa0:	ed97 0b00 	vldr	d0, [r7]
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	f7ff feee 	bl	8006888 <set_pwm>
 8006aac:	e03e      	b.n	8006b2c <stepper_set_speed+0xfc>
		} else if (freq < (-1 * MIN_FREQUENCY)) {
 8006aae:	ed97 7b00 	vldr	d7, [r7]
 8006ab2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8006ab6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006abe:	d529      	bpl.n	8006b14 <stepper_set_speed+0xe4>
			if (dev->dir_mode == 0){
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	7e5b      	ldrb	r3, [r3, #25]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d108      	bne.n	8006ada <stepper_set_speed+0xaa>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 1);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6898      	ldr	r0, [r3, #8]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	899b      	ldrh	r3, [r3, #12]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	f006 fa44 	bl	800cf60 <HAL_GPIO_WritePin>
 8006ad8:	e00b      	b.n	8006af2 <stepper_set_speed+0xc2>
			}
			else if (dev->dir_mode == 1){
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	7e5b      	ldrb	r3, [r3, #25]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d107      	bne.n	8006af2 <stepper_set_speed+0xc2>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6898      	ldr	r0, [r3, #8]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	899b      	ldrh	r3, [r3, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	4619      	mov	r1, r3
 8006aee:	f006 fa37 	bl	800cf60 <HAL_GPIO_WritePin>
			}
			set_pwm(dev->timHandle, dev->tim_channel, (-1*freq), 0.50);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	ed97 7b00 	vldr	d7, [r7]
 8006afe:	eeb1 7b47 	vneg.f64	d7, d7
 8006b02:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8006b06:	eeb0 0b47 	vmov.f64	d0, d7
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	f7ff febb 	bl	8006888 <set_pwm>
 8006b12:	e00b      	b.n	8006b2c <stepper_set_speed+0xfc>
		} else {
			set_pwm(dev->timHandle, dev->tim_channel, 100, 1.0);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	eeb7 1b00 	vmov.f64	d1, #112	; 0x3f800000  1.0
 8006b20:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8006b40 <stepper_set_speed+0x110>
 8006b24:	4619      	mov	r1, r3
 8006b26:	4610      	mov	r0, r2
 8006b28:	f7ff feae 	bl	8006888 <set_pwm>
		}
		dev->freq = freq;
 8006b2c:	68f9      	ldr	r1, [r7, #12]
 8006b2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b32:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
}
 8006b36:	bf00      	nop
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	00000000 	.word	0x00000000
 8006b44:	40590000 	.word	0x40590000

08006b48 <PIDController_initialise>:
 *      Author: fame
 */
#include <Library/PID.h>

void PIDController_initialise(PIDController *pid, double Kp, double Ki,
		double Kd) {
 8006b48:	b480      	push	{r7}
 8006b4a:	b089      	sub	sp, #36	; 0x24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	61f8      	str	r0, [r7, #28]
 8006b50:	ed87 0b04 	vstr	d0, [r7, #16]
 8006b54:	ed87 1b02 	vstr	d1, [r7, #8]
 8006b58:	ed87 2b00 	vstr	d2, [r7]
	pid->Kp = Kp;
 8006b5c:	69f9      	ldr	r1, [r7, #28]
 8006b5e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006b62:	e9c1 2300 	strd	r2, r3, [r1]
	pid->Ki = Ki;
 8006b66:	69f9      	ldr	r1, [r7, #28]
 8006b68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b6c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pid->Kd = Kd;
 8006b70:	69f9      	ldr	r1, [r7, #28]
 8006b72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b76:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pid->out = 0;
 8006b7a:	69f9      	ldr	r1, [r7, #28]
 8006b7c:	f04f 0200 	mov.w	r2, #0
 8006b80:	f04f 0300 	mov.w	r3, #0
 8006b84:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
}
 8006b88:	bf00      	nop
 8006b8a:	3724      	adds	r7, #36	; 0x24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <PIDController_set_limit>:

void PIDController_set_limit(PIDController *pid, double int_lim, double out_lim) {
 8006b94:	b480      	push	{r7}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6178      	str	r0, [r7, #20]
 8006b9c:	ed87 0b02 	vstr	d0, [r7, #8]
 8006ba0:	ed87 1b00 	vstr	d1, [r7]
	if (out_lim != 0) {
 8006ba4:	ed97 7b00 	vldr	d7, [r7]
 8006ba8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bb0:	d00a      	beq.n	8006bc8 <PIDController_set_limit+0x34>
		pid->out_lim = out_lim;
 8006bb2:	6979      	ldr	r1, [r7, #20]
 8006bb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bb8:	e9c1 2306 	strd	r2, r3, [r1, #24]
		pid->out_lim_frag = 1;
 8006bbc:	6979      	ldr	r1, [r7, #20]
 8006bbe:	f04f 0200 	mov.w	r2, #0
 8006bc2:	4b0d      	ldr	r3, [pc, #52]	; (8006bf8 <PIDController_set_limit+0x64>)
 8006bc4:	e9c1 2308 	strd	r2, r3, [r1, #32]
	}
	if (int_lim != 0) {
 8006bc8:	ed97 7b02 	vldr	d7, [r7, #8]
 8006bcc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bd4:	d00a      	beq.n	8006bec <PIDController_set_limit+0x58>
		pid->int_lim = int_lim;
 8006bd6:	6979      	ldr	r1, [r7, #20]
 8006bd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bdc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		pid->int_lim_frag = 1;
 8006be0:	6979      	ldr	r1, [r7, #20]
 8006be2:	f04f 0200 	mov.w	r2, #0
 8006be6:	4b04      	ldr	r3, [pc, #16]	; (8006bf8 <PIDController_set_limit+0x64>)
 8006be8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	}
}
 8006bec:	bf00      	nop
 8006bee:	371c      	adds	r7, #28
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr
 8006bf8:	3ff00000 	.word	0x3ff00000

08006bfc <PIDController_update>:

double PIDController_update(PIDController *pid, double setpoint,
		double measurement) {
 8006bfc:	b480      	push	{r7}
 8006bfe:	b089      	sub	sp, #36	; 0x24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6178      	str	r0, [r7, #20]
 8006c04:	ed87 0b02 	vstr	d0, [r7, #8]
 8006c08:	ed87 1b00 	vstr	d1, [r7]
	double error = setpoint - measurement;
 8006c0c:	ed97 6b02 	vldr	d6, [r7, #8]
 8006c10:	ed97 7b00 	vldr	d7, [r7]
 8006c14:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006c18:	ed87 7b06 	vstr	d7, [r7, #24]
	/*
	 * P term
	 */
	pid->proportional_term = pid->Kp * error;
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	ed93 6b00 	vldr	d6, [r3]
 8006c22:	ed97 7b06 	vldr	d7, [r7, #24]
 8006c26:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

	/*
	 * I term
	 */
	pid->integrator += error;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8006c36:	ed97 7b06 	vldr	d7, [r7, #24]
 8006c3a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	pid->integral_term = pid->Ki * pid->integrator;
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	ed93 6b02 	vldr	d6, [r3, #8]
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8006c50:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	if (pid->int_lim_frag){
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8006c60:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c68:	d026      	beq.n	8006cb8 <PIDController_update+0xbc>
		if (pid->integral_term > pid->int_lim){
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8006c76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c7e:	dd06      	ble.n	8006c8e <PIDController_update+0x92>
			pid->integral_term = pid->int_lim;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006c86:	6979      	ldr	r1, [r7, #20]
 8006c88:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8006c8c:	e014      	b.n	8006cb8 <PIDController_update+0xbc>
		}
		else if (pid->integral_term < (-1*pid->int_lim)){
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8006c9a:	eeb1 7b47 	vneg.f64	d7, d7
 8006c9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ca6:	d507      	bpl.n	8006cb8 <PIDController_update+0xbc>
			pid->integral_term = (pid->int_lim * -1);
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8006cae:	eeb1 7b47 	vneg.f64	d7, d7
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
		}
	}
	/*
	 * D term
	 */
	pid->derivative_term = pid->Kd * (error - pid->prevError);
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	ed93 6b04 	vldr	d6, [r3, #16]
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8006cc4:	ed97 5b06 	vldr	d5, [r7, #24]
 8006cc8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006ccc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	pid->prevError = error;
 8006cd6:	6979      	ldr	r1, [r7, #20]
 8006cd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cdc:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	/*
	 * Calculate a final value
	 */
	pid->out = pid->proportional_term + pid->integral_term
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8006cec:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ pid->derivative_term;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8006cf6:	ee36 7b07 	vadd.f64	d7, d6, d7
	pid->out = pid->proportional_term + pid->integral_term
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
	if (pid->out_lim_frag){
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	ed93 7b08 	vldr	d7, [r3, #32]
 8006d06:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d0e:	d026      	beq.n	8006d5e <PIDController_update+0x162>
		if (pid->out > pid->out_lim){
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	ed93 7b06 	vldr	d7, [r3, #24]
 8006d1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d24:	dd06      	ble.n	8006d34 <PIDController_update+0x138>
			pid->out = pid->out_lim;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006d2c:	6979      	ldr	r1, [r7, #20]
 8006d2e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006d32:	e014      	b.n	8006d5e <PIDController_update+0x162>
		}
		else if (pid->out < (-1*pid->out_lim)){
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	ed93 7b06 	vldr	d7, [r3, #24]
 8006d40:	eeb1 7b47 	vneg.f64	d7, d7
 8006d44:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d4c:	d507      	bpl.n	8006d5e <PIDController_update+0x162>
			pid->out= (pid->out_lim * -1);
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	ed93 7b06 	vldr	d7, [r3, #24]
 8006d54:	eeb1 7b47 	vneg.f64	d7, d7
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
		}
	}
	return pid->out;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006d64:	ec43 2b17 	vmov	d7, r2, r3
}
 8006d68:	eeb0 0b47 	vmov.f64	d0, d7
 8006d6c:	3724      	adds	r7, #36	; 0x24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <Cascade_PIDController_update>:

double Cascade_PIDController_update(PIDController *position_pid,
		PIDController *velocity_pid, KalmanFilter *kalman_filter,
		double desired_position, double desired_velocity) {
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b08e      	sub	sp, #56	; 0x38
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	61f8      	str	r0, [r7, #28]
 8006d7e:	61b9      	str	r1, [r7, #24]
 8006d80:	617a      	str	r2, [r7, #20]
 8006d82:	ed87 0b02 	vstr	d0, [r7, #8]
 8006d86:	ed87 1b00 	vstr	d1, [r7]
	double velocity_command = PIDController_update(position_pid,
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	ed93 7b04 	vldr	d7, [r3, #16]
 8006d90:	eeb0 1b47 	vmov.f64	d1, d7
 8006d94:	ed97 0b02 	vldr	d0, [r7, #8]
 8006d98:	69f8      	ldr	r0, [r7, #28]
 8006d9a:	f7ff ff2f 	bl	8006bfc <PIDController_update>
 8006d9e:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
			desired_position, kalman_filter->x1);
	double velocity_error = velocity_command
			- kalman_filter->x2;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	ed93 7b06 	vldr	d7, [r3, #24]
	double velocity_error = velocity_command
 8006da8:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8006dac:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006db0:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	double out = PIDController_update(velocity_pid, velocity_error,
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	ed93 7b06 	vldr	d7, [r3, #24]
 8006dba:	eeb0 1b47 	vmov.f64	d1, d7
 8006dbe:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8006dc2:	69b8      	ldr	r0, [r7, #24]
 8006dc4:	f7ff ff1a 	bl	8006bfc <PIDController_update>
 8006dc8:	ed87 0b08 	vstr	d0, [r7, #32]
			kalman_filter->x2);
	return out;
 8006dcc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006dd0:	ec43 2b17 	vmov	d7, r2, r3
}
 8006dd4:	eeb0 0b47 	vmov.f64	d0, d7
 8006dd8:	3738      	adds	r7, #56	; 0x38
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <QuinticTrajectory_initialise>:
 *      Author: fame
 */

#include <Library/Trajectory.h>

void QuinticTrajectory_initialise(QuinticTrajectory *Traj, double time_step) {
 8006dde:	b480      	push	{r7}
 8006de0:	b085      	sub	sp, #20
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	60f8      	str	r0, [r7, #12]
 8006de6:	ed87 0b00 	vstr	d0, [r7]
	Traj->is_end = 1;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2201      	movs	r2, #1
 8006dee:	701a      	strb	r2, [r3, #0]
	Traj->c0 = 0;
 8006df0:	68f9      	ldr	r1, [r7, #12]
 8006df2:	f04f 0200 	mov.w	r2, #0
 8006df6:	f04f 0300 	mov.w	r3, #0
 8006dfa:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Traj->c1 = 0;
 8006dfe:	68f9      	ldr	r1, [r7, #12]
 8006e00:	f04f 0200 	mov.w	r2, #0
 8006e04:	f04f 0300 	mov.w	r3, #0
 8006e08:	e9c1 2308 	strd	r2, r3, [r1, #32]
	Traj->c2 = 0;
 8006e0c:	68f9      	ldr	r1, [r7, #12]
 8006e0e:	f04f 0200 	mov.w	r2, #0
 8006e12:	f04f 0300 	mov.w	r3, #0
 8006e16:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Traj->c3 = 0;
 8006e1a:	68f9      	ldr	r1, [r7, #12]
 8006e1c:	f04f 0200 	mov.w	r2, #0
 8006e20:	f04f 0300 	mov.w	r3, #0
 8006e24:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Traj->c4 = 0;
 8006e28:	68f9      	ldr	r1, [r7, #12]
 8006e2a:	f04f 0200 	mov.w	r2, #0
 8006e2e:	f04f 0300 	mov.w	r3, #0
 8006e32:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Traj->c5 = 0;
 8006e36:	68f9      	ldr	r1, [r7, #12]
 8006e38:	f04f 0200 	mov.w	r2, #0
 8006e3c:	f04f 0300 	mov.w	r3, #0
 8006e40:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	Traj->pos_out = 0;
 8006e44:	68f9      	ldr	r1, [r7, #12]
 8006e46:	f04f 0200 	mov.w	r2, #0
 8006e4a:	f04f 0300 	mov.w	r3, #0
 8006e4e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	Traj->vel_out = 0;
 8006e52:	68f9      	ldr	r1, [r7, #12]
 8006e54:	f04f 0200 	mov.w	r2, #0
 8006e58:	f04f 0300 	mov.w	r3, #0
 8006e5c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	Traj->current_time = 0;
 8006e60:	68f9      	ldr	r1, [r7, #12]
 8006e62:	f04f 0200 	mov.w	r2, #0
 8006e66:	f04f 0300 	mov.w	r3, #0
 8006e6a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	Traj->time_step = time_step;
 8006e6e:	68f9      	ldr	r1, [r7, #12]
 8006e70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e74:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Traj->time_max = 0;
 8006e78:	68f9      	ldr	r1, [r7, #12]
 8006e7a:	f04f 0200 	mov.w	r2, #0
 8006e7e:	f04f 0300 	mov.w	r3, #0
 8006e82:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8006e86:	bf00      	nop
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
	...

08006e94 <QuinticTrajectory_cal_and_set_coeff>:

void QuinticTrajectory_cal_and_set_coeff(QuinticTrajectory *Traj, double q0,
		double q1, double v0, double v1, double ac0, double ac1, double tf) {
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b0f6      	sub	sp, #472	; 0x1d8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006e9e:	6018      	str	r0, [r3, #0]
 8006ea0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006ea4:	ed83 0b00 	vstr	d0, [r3]
 8006ea8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006eac:	ed83 1b00 	vstr	d1, [r3]
 8006eb0:	f107 0320 	add.w	r3, r7, #32
 8006eb4:	ed83 2b00 	vstr	d2, [r3]
 8006eb8:	f107 0318 	add.w	r3, r7, #24
 8006ebc:	ed83 3b00 	vstr	d3, [r3]
 8006ec0:	f107 0310 	add.w	r3, r7, #16
 8006ec4:	ed83 4b00 	vstr	d4, [r3]
 8006ec8:	f107 0308 	add.w	r3, r7, #8
 8006ecc:	ed83 5b00 	vstr	d5, [r3]
 8006ed0:	463b      	mov	r3, r7
 8006ed2:	ed83 6b00 	vstr	d6, [r3]
	int jp1j;
	int k;
	int mmj_tmp;
	signed char ipiv[6];
	signed char i1;
	M[3] = 1.0;
 8006ed6:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006eda:	f04f 0200 	mov.w	r2, #0
 8006ede:	4bb6      	ldr	r3, [pc, #728]	; (80071b8 <QuinticTrajectory_cal_and_set_coeff+0x324>)
 8006ee0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	M[9] = tf;
 8006ee4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006ee8:	463b      	mov	r3, r7
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	smax = tf * tf;
 8006ef2:	463b      	mov	r3, r7
 8006ef4:	ed93 7b00 	vldr	d7, [r3]
 8006ef8:	ee27 7b07 	vmul.f64	d7, d7, d7
 8006efc:	ed87 7b74 	vstr	d7, [r7, #464]	; 0x1d0
	M[15] = smax;
 8006f00:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006f04:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8006f08:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	s = pow(tf, 3.0);
 8006f0c:	463b      	mov	r3, r7
 8006f0e:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8006f12:	ed93 0b00 	vldr	d0, [r3]
 8006f16:	f00f ff07 	bl	8016d28 <pow>
 8006f1a:	ed87 0b6c 	vstr	d0, [r7, #432]	; 0x1b0
	M[21] = s;
 8006f1e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006f22:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8006f26:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
	M_tmp = pow(tf, 4.0);
 8006f2a:	463b      	mov	r3, r7
 8006f2c:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8006f30:	ed93 0b00 	vldr	d0, [r3]
 8006f34:	f00f fef8 	bl	8016d28 <pow>
 8006f38:	ed87 0b6a 	vstr	d0, [r7, #424]	; 0x1a8
	M[27] = M_tmp;
 8006f3c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006f40:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8006f44:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
	M[33] = pow(tf, 5.0);
 8006f48:	463b      	mov	r3, r7
 8006f4a:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8006f4e:	ed93 0b00 	vldr	d0, [r3]
 8006f52:	f00f fee9 	bl	8016d28 <pow>
 8006f56:	eeb0 7b40 	vmov.f64	d7, d0
 8006f5a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006f5e:	ed83 7b42 	vstr	d7, [r3, #264]	; 0x108
	M[4] = 0.0;
 8006f62:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006f66:	f04f 0200 	mov.w	r2, #0
 8006f6a:	f04f 0300 	mov.w	r3, #0
 8006f6e:	e9c1 2308 	strd	r2, r3, [r1, #32]
	M[10] = 1.0;
 8006f72:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006f76:	f04f 0200 	mov.w	r2, #0
 8006f7a:	4b8f      	ldr	r3, [pc, #572]	; (80071b8 <QuinticTrajectory_cal_and_set_coeff+0x324>)
 8006f7c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	M[16] = 2.0 * tf;
 8006f80:	463b      	mov	r3, r7
 8006f82:	ed93 7b00 	vldr	d7, [r3]
 8006f86:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006f8a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006f8e:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
	M[22] = 3.0 * smax;
 8006f92:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8006f96:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8006f9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006f9e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006fa2:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
	M[28] = 4.0 * s;
 8006fa6:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8006faa:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8006fae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006fb2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006fb6:	ed83 7b38 	vstr	d7, [r3, #224]	; 0xe0
	M[34] = 5.0 * M_tmp;
 8006fba:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8006fbe:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 8006fc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006fc6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006fca:	ed83 7b44 	vstr	d7, [r3, #272]	; 0x110
	M[5] = 0.0;
 8006fce:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006fd2:	f04f 0200 	mov.w	r2, #0
 8006fd6:	f04f 0300 	mov.w	r3, #0
 8006fda:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	M[11] = 0.0;
 8006fde:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006fe2:	f04f 0200 	mov.w	r2, #0
 8006fe6:	f04f 0300 	mov.w	r3, #0
 8006fea:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	M[17] = 2.0;
 8006fee:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006ff2:	f04f 0200 	mov.w	r2, #0
 8006ff6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ffa:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	M[23] = 6.0 * tf;
 8006ffe:	463b      	mov	r3, r7
 8007000:	ed93 7b00 	vldr	d7, [r3]
 8007004:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8007008:	ee27 7b06 	vmul.f64	d7, d7, d6
 800700c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007010:	ed83 7b2e 	vstr	d7, [r3, #184]	; 0xb8
	M[29] = 12.0 * smax;
 8007014:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8007018:	eeb2 6b08 	vmov.f64	d6, #40	; 0x41400000  12.0
 800701c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007020:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007024:	ed83 7b3a 	vstr	d7, [r3, #232]	; 0xe8
	M[35] = 20.0 * s;
 8007028:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 800702c:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8007030:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007034:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8007038:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
	/*  */
	a[0] = q0;
 800703c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8007040:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007048:	e9c1 2300 	strd	r2, r3, [r1]
	a[1] = v0;
 800704c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8007050:	f107 0320 	add.w	r3, r7, #32
 8007054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007058:	e9c1 2302 	strd	r2, r3, [r1, #8]
	a[2] = ac0;
 800705c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8007060:	f107 0310 	add.w	r3, r7, #16
 8007064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007068:	e9c1 2304 	strd	r2, r3, [r1, #16]
	a[3] = q1;
 800706c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8007070:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007078:	e9c1 2306 	strd	r2, r3, [r1, #24]
	a[4] = v1;
 800707c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8007080:	f107 0318 	add.w	r3, r7, #24
 8007084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007088:	e9c1 2308 	strd	r2, r3, [r1, #32]
	a[5] = ac1;
 800708c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8007090:	f107 0308 	add.w	r3, r7, #8
 8007094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007098:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	for (i = 0; i < 6; i++) {
 800709c:	2300      	movs	r3, #0
 800709e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80070a2:	e055      	b.n	8007150 <QuinticTrajectory_cal_and_set_coeff+0x2bc>
		M[6 * i] = iv[i];
 80070a4:	4a45      	ldr	r2, [pc, #276]	; (80071bc <QuinticTrajectory_cal_and_set_coeff+0x328>)
 80070a6:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80070aa:	4413      	add	r3, r2
 80070ac:	f993 1000 	ldrsb.w	r1, [r3]
 80070b0:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 80070b4:	4613      	mov	r3, r2
 80070b6:	005b      	lsls	r3, r3, #1
 80070b8:	4413      	add	r3, r2
 80070ba:	005b      	lsls	r3, r3, #1
 80070bc:	ee07 1a90 	vmov	s15, r1
 80070c0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070c4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80070c8:	00db      	lsls	r3, r3, #3
 80070ca:	4413      	add	r3, r2
 80070cc:	ed83 7b00 	vstr	d7, [r3]
		M[6 * i + 1] = iv1[i];
 80070d0:	4a3b      	ldr	r2, [pc, #236]	; (80071c0 <QuinticTrajectory_cal_and_set_coeff+0x32c>)
 80070d2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80070d6:	4413      	add	r3, r2
 80070d8:	f993 1000 	ldrsb.w	r1, [r3]
 80070dc:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 80070e0:	4613      	mov	r3, r2
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	4413      	add	r3, r2
 80070e6:	005b      	lsls	r3, r3, #1
 80070e8:	3301      	adds	r3, #1
 80070ea:	ee07 1a90 	vmov	s15, r1
 80070ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80070f2:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	4413      	add	r3, r2
 80070fa:	ed83 7b00 	vstr	d7, [r3]
		M[6 * i + 2] = iv2[i];
 80070fe:	4a31      	ldr	r2, [pc, #196]	; (80071c4 <QuinticTrajectory_cal_and_set_coeff+0x330>)
 8007100:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007104:	4413      	add	r3, r2
 8007106:	f993 1000 	ldrsb.w	r1, [r3]
 800710a:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 800710e:	4613      	mov	r3, r2
 8007110:	005b      	lsls	r3, r3, #1
 8007112:	4413      	add	r3, r2
 8007114:	005b      	lsls	r3, r3, #1
 8007116:	3302      	adds	r3, #2
 8007118:	ee07 1a90 	vmov	s15, r1
 800711c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007120:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007124:	00db      	lsls	r3, r3, #3
 8007126:	4413      	add	r3, r2
 8007128:	ed83 7b00 	vstr	d7, [r3]
		ipiv[i] = (signed char) (i + 1);
 800712c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007130:	b2db      	uxtb	r3, r3
 8007132:	3301      	adds	r3, #1
 8007134:	b2db      	uxtb	r3, r3
 8007136:	b259      	sxtb	r1, r3
 8007138:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800713c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007140:	4413      	add	r3, r2
 8007142:	460a      	mov	r2, r1
 8007144:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 6; i++) {
 8007146:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800714a:	3301      	adds	r3, #1
 800714c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8007150:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007154:	2b05      	cmp	r3, #5
 8007156:	dda5      	ble.n	80070a4 <QuinticTrajectory_cal_and_set_coeff+0x210>
	}
	for (j = 0; j < 5; j++) {
 8007158:	2300      	movs	r3, #0
 800715a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800715e:	e1b8      	b.n	80074d2 <QuinticTrajectory_cal_and_set_coeff+0x63e>
		mmj_tmp = 4 - j;
 8007160:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007164:	f1c3 0304 	rsb	r3, r3, #4
 8007168:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
		b_tmp = j * 7;
 800716c:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8007170:	4613      	mov	r3, r2
 8007172:	00db      	lsls	r3, r3, #3
 8007174:	1a9b      	subs	r3, r3, r2
 8007176:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
		jp1j = b_tmp + 2;
 800717a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800717e:	3302      	adds	r3, #2
 8007180:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
		jA = 6 - j;
 8007184:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007188:	f1c3 0306 	rsb	r3, r3, #6
 800718c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
		b_a = 0;
 8007190:	2300      	movs	r3, #0
 8007192:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
		smax = fabs(M[b_tmp]);
 8007196:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800719a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800719e:	00db      	lsls	r3, r3, #3
 80071a0:	4413      	add	r3, r2
 80071a2:	ed93 7b00 	vldr	d7, [r3]
 80071a6:	eeb0 7bc7 	vabs.f64	d7, d7
 80071aa:	ed87 7b74 	vstr	d7, [r7, #464]	; 0x1d0
		for (k = 2; k <= jA; k++) {
 80071ae:	2302      	movs	r3, #2
 80071b0:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80071b4:	e02f      	b.n	8007216 <QuinticTrajectory_cal_and_set_coeff+0x382>
 80071b6:	bf00      	nop
 80071b8:	3ff00000 	.word	0x3ff00000
 80071bc:	080182f8 	.word	0x080182f8
 80071c0:	08018300 	.word	0x08018300
 80071c4:	08018308 	.word	0x08018308
			s = fabs(M[(b_tmp + k) - 1]);
 80071c8:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80071cc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80071d0:	4413      	add	r3, r2
 80071d2:	3b01      	subs	r3, #1
 80071d4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80071d8:	00db      	lsls	r3, r3, #3
 80071da:	4413      	add	r3, r2
 80071dc:	ed93 7b00 	vldr	d7, [r3]
 80071e0:	eeb0 7bc7 	vabs.f64	d7, d7
 80071e4:	ed87 7b6c 	vstr	d7, [r7, #432]	; 0x1b0
			if (s > smax) {
 80071e8:	ed97 6b6c 	vldr	d6, [r7, #432]	; 0x1b0
 80071ec:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 80071f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80071f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071f8:	dd08      	ble.n	800720c <QuinticTrajectory_cal_and_set_coeff+0x378>
				b_a = k - 1;
 80071fa:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80071fe:	3b01      	subs	r3, #1
 8007200:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
				smax = s;
 8007204:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8007208:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
		for (k = 2; k <= jA; k++) {
 800720c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8007210:	3301      	adds	r3, #1
 8007212:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8007216:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800721a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800721e:	429a      	cmp	r2, r3
 8007220:	ddd2      	ble.n	80071c8 <QuinticTrajectory_cal_and_set_coeff+0x334>
			}
		}
		if (M[b_tmp + b_a] != 0.0) {
 8007222:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8007226:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800722a:	4413      	add	r3, r2
 800722c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007230:	00db      	lsls	r3, r3, #3
 8007232:	4413      	add	r3, r2
 8007234:	ed93 7b00 	vldr	d7, [r3]
 8007238:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800723c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007240:	f000 8095 	beq.w	800736e <QuinticTrajectory_cal_and_set_coeff+0x4da>
			if (b_a != 0) {
 8007244:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007248:	2b00      	cmp	r3, #0
 800724a:	d05c      	beq.n	8007306 <QuinticTrajectory_cal_and_set_coeff+0x472>
				jA = j + b_a;
 800724c:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8007250:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007254:	4413      	add	r3, r2
 8007256:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
				ipiv[j] = (signed char) (jA + 1);
 800725a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800725e:	b2db      	uxtb	r3, r3
 8007260:	3301      	adds	r3, #1
 8007262:	b2db      	uxtb	r3, r3
 8007264:	b259      	sxtb	r1, r3
 8007266:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800726a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800726e:	4413      	add	r3, r2
 8007270:	460a      	mov	r2, r1
 8007272:	701a      	strb	r2, [r3, #0]
				for (k = 0; k < 6; k++) {
 8007274:	2300      	movs	r3, #0
 8007276:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800727a:	e040      	b.n	80072fe <QuinticTrajectory_cal_and_set_coeff+0x46a>
					b_a = j + k * 6;
 800727c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007280:	4613      	mov	r3, r2
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	4413      	add	r3, r2
 8007286:	005b      	lsls	r3, r3, #1
 8007288:	461a      	mov	r2, r3
 800728a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800728e:	4413      	add	r3, r2
 8007290:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
					smax = M[b_a];
 8007294:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007298:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	4413      	add	r3, r2
 80072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a4:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
					b_M_tmp = jA + k * 6;
 80072a8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80072ac:	4613      	mov	r3, r2
 80072ae:	005b      	lsls	r3, r3, #1
 80072b0:	4413      	add	r3, r2
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	461a      	mov	r2, r3
 80072b6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80072ba:	4413      	add	r3, r2
 80072bc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
					M[b_a] = M[b_M_tmp];
 80072c0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80072c4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80072c8:	00db      	lsls	r3, r3, #3
 80072ca:	4413      	add	r3, r2
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80072d4:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 80072d8:	00c9      	lsls	r1, r1, #3
 80072da:	4401      	add	r1, r0
 80072dc:	e9c1 2300 	strd	r2, r3, [r1]
					M[b_M_tmp] = smax;
 80072e0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80072e4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80072e8:	00db      	lsls	r3, r3, #3
 80072ea:	18d1      	adds	r1, r2, r3
 80072ec:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 80072f0:	e9c1 2300 	strd	r2, r3, [r1]
				for (k = 0; k < 6; k++) {
 80072f4:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80072f8:	3301      	adds	r3, #1
 80072fa:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80072fe:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8007302:	2b05      	cmp	r3, #5
 8007304:	ddba      	ble.n	800727c <QuinticTrajectory_cal_and_set_coeff+0x3e8>
				}
			}
			i = (b_tmp - j) + 6;
 8007306:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 800730a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	3306      	adds	r3, #6
 8007312:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
			for (b_a = jp1j; b_a <= i; b_a++) {
 8007316:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800731a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800731e:	e020      	b.n	8007362 <QuinticTrajectory_cal_and_set_coeff+0x4ce>
				M[b_a - 1] /= M[b_tmp];
 8007320:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007324:	3b01      	subs	r3, #1
 8007326:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800732a:	00db      	lsls	r3, r3, #3
 800732c:	4413      	add	r3, r2
 800732e:	ed93 5b00 	vldr	d5, [r3]
 8007332:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007336:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800733a:	00db      	lsls	r3, r3, #3
 800733c:	4413      	add	r3, r2
 800733e:	ed93 6b00 	vldr	d6, [r3]
 8007342:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007346:	3b01      	subs	r3, #1
 8007348:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800734c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007350:	00db      	lsls	r3, r3, #3
 8007352:	4413      	add	r3, r2
 8007354:	ed83 7b00 	vstr	d7, [r3]
			for (b_a = jp1j; b_a <= i; b_a++) {
 8007358:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800735c:	3301      	adds	r3, #1
 800735e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8007362:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8007366:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800736a:	429a      	cmp	r2, r3
 800736c:	ddd8      	ble.n	8007320 <QuinticTrajectory_cal_and_set_coeff+0x48c>
			}
		}
		jA = b_tmp;
 800736e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007372:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
		for (b_a = 0; b_a <= mmj_tmp; b_a++) {
 8007376:	2300      	movs	r3, #0
 8007378:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800737c:	e069      	b.n	8007452 <QuinticTrajectory_cal_and_set_coeff+0x5be>
			smax = M[(b_tmp + b_a * 6) + 6];
 800737e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8007382:	4613      	mov	r3, r2
 8007384:	005b      	lsls	r3, r3, #1
 8007386:	4413      	add	r3, r2
 8007388:	005b      	lsls	r3, r3, #1
 800738a:	461a      	mov	r2, r3
 800738c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007390:	4413      	add	r3, r2
 8007392:	3306      	adds	r3, #6
 8007394:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007398:	00db      	lsls	r3, r3, #3
 800739a:	4413      	add	r3, r2
 800739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a0:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
			if (smax != 0.0) {
 80073a4:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 80073a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80073ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073b0:	d045      	beq.n	800743e <QuinticTrajectory_cal_and_set_coeff+0x5aa>
				i = jA + 8;
 80073b2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80073b6:	3308      	adds	r3, #8
 80073b8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
				b_M_tmp = (jA - j) + 12;
 80073bc:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80073c0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	330c      	adds	r3, #12
 80073c8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
				for (jp1j = i; jp1j <= b_M_tmp; jp1j++) {
 80073cc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80073d0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80073d4:	e02d      	b.n	8007432 <QuinticTrajectory_cal_and_set_coeff+0x59e>
					M[jp1j - 1] += M[((b_tmp + jp1j) - jA) - 7] * -smax;
 80073d6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80073da:	3b01      	subs	r3, #1
 80073dc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	4413      	add	r3, r2
 80073e4:	ed93 6b00 	vldr	d6, [r3]
 80073e8:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80073ec:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80073f0:	441a      	add	r2, r3
 80073f2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	3b07      	subs	r3, #7
 80073fa:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	4413      	add	r3, r2
 8007402:	ed93 5b00 	vldr	d5, [r3]
 8007406:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 800740a:	eeb1 7b47 	vneg.f64	d7, d7
 800740e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007412:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8007416:	3b01      	subs	r3, #1
 8007418:	ee36 7b07 	vadd.f64	d7, d6, d7
 800741c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	4413      	add	r3, r2
 8007424:	ed83 7b00 	vstr	d7, [r3]
				for (jp1j = i; jp1j <= b_M_tmp; jp1j++) {
 8007428:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800742c:	3301      	adds	r3, #1
 800742e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007432:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8007436:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800743a:	429a      	cmp	r2, r3
 800743c:	ddcb      	ble.n	80073d6 <QuinticTrajectory_cal_and_set_coeff+0x542>
				}
			}
			jA += 6;
 800743e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007442:	3306      	adds	r3, #6
 8007444:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
		for (b_a = 0; b_a <= mmj_tmp; b_a++) {
 8007448:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800744c:	3301      	adds	r3, #1
 800744e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8007452:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8007456:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800745a:	429a      	cmp	r2, r3
 800745c:	dd8f      	ble.n	800737e <QuinticTrajectory_cal_and_set_coeff+0x4ea>
		}
		i1 = ipiv[j];
 800745e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007462:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007466:	4413      	add	r3, r2
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		if (i1 != j + 1) {
 800746e:	f997 219b 	ldrsb.w	r2, [r7, #411]	; 0x19b
 8007472:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007476:	3301      	adds	r3, #1
 8007478:	429a      	cmp	r2, r3
 800747a:	d025      	beq.n	80074c8 <QuinticTrajectory_cal_and_set_coeff+0x634>
			smax = a[j];
 800747c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007480:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007484:	00db      	lsls	r3, r3, #3
 8007486:	4413      	add	r3, r2
 8007488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748c:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
			a[j] = a[i1 - 1];
 8007490:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 8007494:	3b01      	subs	r3, #1
 8007496:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800749a:	00db      	lsls	r3, r3, #3
 800749c:	4413      	add	r3, r2
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80074a6:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 80074aa:	00c9      	lsls	r1, r1, #3
 80074ac:	4401      	add	r1, r0
 80074ae:	e9c1 2300 	strd	r2, r3, [r1]
			a[i1 - 1] = smax;
 80074b2:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 80074b6:	3b01      	subs	r3, #1
 80074b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80074bc:	00db      	lsls	r3, r3, #3
 80074be:	18d1      	adds	r1, r2, r3
 80074c0:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 80074c4:	e9c1 2300 	strd	r2, r3, [r1]
	for (j = 0; j < 5; j++) {
 80074c8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80074cc:	3301      	adds	r3, #1
 80074ce:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80074d2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	f77f ae42 	ble.w	8007160 <QuinticTrajectory_cal_and_set_coeff+0x2cc>
		}
	}
	for (k = 0; k < 6; k++) {
 80074dc:	2300      	movs	r3, #0
 80074de:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80074e2:	e056      	b.n	8007592 <QuinticTrajectory_cal_and_set_coeff+0x6fe>
		jA = 6 * k;
 80074e4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80074e8:	4613      	mov	r3, r2
 80074ea:	005b      	lsls	r3, r3, #1
 80074ec:	4413      	add	r3, r2
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
		if (a[k] != 0.0) {
 80074f4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80074f8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80074fc:	00db      	lsls	r3, r3, #3
 80074fe:	4413      	add	r3, r2
 8007500:	ed93 7b00 	vldr	d7, [r3]
 8007504:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800750c:	d03c      	beq.n	8007588 <QuinticTrajectory_cal_and_set_coeff+0x6f4>
			i = k + 2;
 800750e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8007512:	3302      	adds	r3, #2
 8007514:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
			for (b_a = i; b_a < 7; b_a++) {
 8007518:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800751c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8007520:	e02e      	b.n	8007580 <QuinticTrajectory_cal_and_set_coeff+0x6ec>
				a[b_a - 1] -= a[k] * M[(b_a + jA) - 1];
 8007522:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007526:	3b01      	subs	r3, #1
 8007528:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	4413      	add	r3, r2
 8007530:	ed93 6b00 	vldr	d6, [r3]
 8007534:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007538:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	4413      	add	r3, r2
 8007540:	ed93 5b00 	vldr	d5, [r3]
 8007544:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8007548:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800754c:	4413      	add	r3, r2
 800754e:	3b01      	subs	r3, #1
 8007550:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007554:	00db      	lsls	r3, r3, #3
 8007556:	4413      	add	r3, r2
 8007558:	ed93 7b00 	vldr	d7, [r3]
 800755c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007560:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007564:	3b01      	subs	r3, #1
 8007566:	ee36 7b47 	vsub.f64	d7, d6, d7
 800756a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	4413      	add	r3, r2
 8007572:	ed83 7b00 	vstr	d7, [r3]
			for (b_a = i; b_a < 7; b_a++) {
 8007576:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800757a:	3301      	adds	r3, #1
 800757c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8007580:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007584:	2b06      	cmp	r3, #6
 8007586:	ddcc      	ble.n	8007522 <QuinticTrajectory_cal_and_set_coeff+0x68e>
	for (k = 0; k < 6; k++) {
 8007588:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800758c:	3301      	adds	r3, #1
 800758e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8007592:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8007596:	2b05      	cmp	r3, #5
 8007598:	dda4      	ble.n	80074e4 <QuinticTrajectory_cal_and_set_coeff+0x650>
			}
		}
	}
	for (k = 5; k >= 0; k--) {
 800759a:	2305      	movs	r3, #5
 800759c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80075a0:	e06e      	b.n	8007680 <QuinticTrajectory_cal_and_set_coeff+0x7ec>
		jA = 6 * k;
 80075a2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80075a6:	4613      	mov	r3, r2
 80075a8:	005b      	lsls	r3, r3, #1
 80075aa:	4413      	add	r3, r2
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
		smax = a[k];
 80075b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80075b6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80075ba:	00db      	lsls	r3, r3, #3
 80075bc:	4413      	add	r3, r2
 80075be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c2:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
		if (smax != 0.0) {
 80075c6:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 80075ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80075ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d2:	d050      	beq.n	8007676 <QuinticTrajectory_cal_and_set_coeff+0x7e2>
			smax /= M[k + jA];
 80075d4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80075d8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80075dc:	4413      	add	r3, r2
 80075de:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	4413      	add	r3, r2
 80075e6:	ed93 6b00 	vldr	d6, [r3]
 80075ea:	ed97 5b74 	vldr	d5, [r7, #464]	; 0x1d0
 80075ee:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80075f2:	ed87 7b74 	vstr	d7, [r7, #464]	; 0x1d0
			a[k] = smax;
 80075f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80075fa:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80075fe:	00db      	lsls	r3, r3, #3
 8007600:	18d1      	adds	r1, r2, r3
 8007602:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8007606:	e9c1 2300 	strd	r2, r3, [r1]
			for (b_a = 0; b_a < k; b_a++) {
 800760a:	2300      	movs	r3, #0
 800760c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8007610:	e02b      	b.n	800766a <QuinticTrajectory_cal_and_set_coeff+0x7d6>
				a[b_a] -= a[k] * M[b_a + jA];
 8007612:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007616:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800761a:	00db      	lsls	r3, r3, #3
 800761c:	4413      	add	r3, r2
 800761e:	ed93 6b00 	vldr	d6, [r3]
 8007622:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007626:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800762a:	00db      	lsls	r3, r3, #3
 800762c:	4413      	add	r3, r2
 800762e:	ed93 5b00 	vldr	d5, [r3]
 8007632:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8007636:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800763a:	4413      	add	r3, r2
 800763c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007640:	00db      	lsls	r3, r3, #3
 8007642:	4413      	add	r3, r2
 8007644:	ed93 7b00 	vldr	d7, [r3]
 8007648:	ee25 7b07 	vmul.f64	d7, d5, d7
 800764c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007650:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007654:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007658:	00db      	lsls	r3, r3, #3
 800765a:	4413      	add	r3, r2
 800765c:	ed83 7b00 	vstr	d7, [r3]
			for (b_a = 0; b_a < k; b_a++) {
 8007660:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007664:	3301      	adds	r3, #1
 8007666:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 800766a:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800766e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8007672:	429a      	cmp	r2, r3
 8007674:	dbcd      	blt.n	8007612 <QuinticTrajectory_cal_and_set_coeff+0x77e>
	for (k = 5; k >= 0; k--) {
 8007676:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800767a:	3b01      	subs	r3, #1
 800767c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8007680:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8007684:	2b00      	cmp	r3, #0
 8007686:	da8c      	bge.n	80075a2 <QuinticTrajectory_cal_and_set_coeff+0x70e>
			}
		}
	}
	Traj->is_end = 0;
 8007688:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2200      	movs	r2, #0
 8007690:	701a      	strb	r2, [r3, #0]
	Traj->c0 = a[0];
 8007692:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800769a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800769e:	6809      	ldr	r1, [r1, #0]
 80076a0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Traj->c1 = a[1];
 80076a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80076a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80076ac:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80076b0:	6809      	ldr	r1, [r1, #0]
 80076b2:	e9c1 2308 	strd	r2, r3, [r1, #32]
	Traj->c2 = a[2];
 80076b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80076ba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80076be:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80076c2:	6809      	ldr	r1, [r1, #0]
 80076c4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Traj->c3 = a[3];
 80076c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80076cc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80076d0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80076d4:	6809      	ldr	r1, [r1, #0]
 80076d6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Traj->c4 = a[4];
 80076da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80076de:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80076e2:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80076e6:	6809      	ldr	r1, [r1, #0]
 80076e8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Traj->c5 = a[5];
 80076ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80076f0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80076f4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80076f8:	6809      	ldr	r1, [r1, #0]
 80076fa:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	Traj->current_time = 0;
 80076fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007702:	6819      	ldr	r1, [r3, #0]
 8007704:	f04f 0200 	mov.w	r2, #0
 8007708:	f04f 0300 	mov.w	r3, #0
 800770c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	Traj->time_max = tf;
 8007710:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007714:	6819      	ldr	r1, [r3, #0]
 8007716:	463b      	mov	r3, r7
 8007718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771c:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8007720:	bf00      	nop
 8007722:	f507 77ec 	add.w	r7, r7, #472	; 0x1d8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop

0800772c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b08c      	sub	sp, #48	; 0x30
 8007730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8007732:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007736:	2200      	movs	r2, #0
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	605a      	str	r2, [r3, #4]
 800773c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800773e:	463b      	mov	r3, r7
 8007740:	2224      	movs	r2, #36	; 0x24
 8007742:	2100      	movs	r1, #0
 8007744:	4618      	mov	r0, r3
 8007746:	f00c fe7d 	bl	8014444 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800774a:	4b31      	ldr	r3, [pc, #196]	; (8007810 <MX_ADC1_Init+0xe4>)
 800774c:	4a31      	ldr	r2, [pc, #196]	; (8007814 <MX_ADC1_Init+0xe8>)
 800774e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8007750:	4b2f      	ldr	r3, [pc, #188]	; (8007810 <MX_ADC1_Init+0xe4>)
 8007752:	2200      	movs	r2, #0
 8007754:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8007756:	4b2e      	ldr	r3, [pc, #184]	; (8007810 <MX_ADC1_Init+0xe4>)
 8007758:	2200      	movs	r2, #0
 800775a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800775c:	4b2c      	ldr	r3, [pc, #176]	; (8007810 <MX_ADC1_Init+0xe4>)
 800775e:	2200      	movs	r2, #0
 8007760:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007762:	4b2b      	ldr	r3, [pc, #172]	; (8007810 <MX_ADC1_Init+0xe4>)
 8007764:	2204      	movs	r2, #4
 8007766:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007768:	4b29      	ldr	r3, [pc, #164]	; (8007810 <MX_ADC1_Init+0xe4>)
 800776a:	2200      	movs	r2, #0
 800776c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800776e:	4b28      	ldr	r3, [pc, #160]	; (8007810 <MX_ADC1_Init+0xe4>)
 8007770:	2200      	movs	r2, #0
 8007772:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8007774:	4b26      	ldr	r3, [pc, #152]	; (8007810 <MX_ADC1_Init+0xe4>)
 8007776:	2201      	movs	r2, #1
 8007778:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800777a:	4b25      	ldr	r3, [pc, #148]	; (8007810 <MX_ADC1_Init+0xe4>)
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007782:	4b23      	ldr	r3, [pc, #140]	; (8007810 <MX_ADC1_Init+0xe4>)
 8007784:	2200      	movs	r2, #0
 8007786:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007788:	4b21      	ldr	r3, [pc, #132]	; (8007810 <MX_ADC1_Init+0xe4>)
 800778a:	2200      	movs	r2, #0
 800778c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800778e:	4b20      	ldr	r3, [pc, #128]	; (8007810 <MX_ADC1_Init+0xe4>)
 8007790:	2200      	movs	r2, #0
 8007792:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007794:	4b1e      	ldr	r3, [pc, #120]	; (8007810 <MX_ADC1_Init+0xe4>)
 8007796:	2200      	movs	r2, #0
 8007798:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800779a:	4b1d      	ldr	r3, [pc, #116]	; (8007810 <MX_ADC1_Init+0xe4>)
 800779c:	2200      	movs	r2, #0
 800779e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80077a0:	4b1b      	ldr	r3, [pc, #108]	; (8007810 <MX_ADC1_Init+0xe4>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80077a8:	4819      	ldr	r0, [pc, #100]	; (8007810 <MX_ADC1_Init+0xe4>)
 80077aa:	f003 f899 	bl	800a8e0 <HAL_ADC_Init>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80077b4:	f001 f8af 	bl	8008916 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80077b8:	2300      	movs	r3, #0
 80077ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80077bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077c0:	4619      	mov	r1, r3
 80077c2:	4813      	ldr	r0, [pc, #76]	; (8007810 <MX_ADC1_Init+0xe4>)
 80077c4:	f004 f8d2 	bl	800b96c <HAL_ADCEx_MultiModeConfigChannel>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80077ce:	f001 f8a2 	bl	8008916 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80077d2:	4b11      	ldr	r3, [pc, #68]	; (8007818 <MX_ADC1_Init+0xec>)
 80077d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80077d6:	2306      	movs	r3, #6
 80077d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80077da:	2300      	movs	r3, #0
 80077dc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80077de:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80077e2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80077e4:	2304      	movs	r3, #4
 80077e6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80077e8:	2300      	movs	r3, #0
 80077ea:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80077ec:	2300      	movs	r3, #0
 80077ee:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80077f2:	463b      	mov	r3, r7
 80077f4:	4619      	mov	r1, r3
 80077f6:	4806      	ldr	r0, [pc, #24]	; (8007810 <MX_ADC1_Init+0xe4>)
 80077f8:	f003 fa7a 	bl	800acf0 <HAL_ADC_ConfigChannel>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8007802:	f001 f888 	bl	8008916 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007806:	bf00      	nop
 8007808:	3730      	adds	r7, #48	; 0x30
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	24000400 	.word	0x24000400
 8007814:	40022000 	.word	0x40022000
 8007818:	2a000400 	.word	0x2a000400

0800781c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b08a      	sub	sp, #40	; 0x28
 8007820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007822:	1d3b      	adds	r3, r7, #4
 8007824:	2224      	movs	r2, #36	; 0x24
 8007826:	2100      	movs	r1, #0
 8007828:	4618      	mov	r0, r3
 800782a:	f00c fe0b 	bl	8014444 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 800782e:	4b30      	ldr	r3, [pc, #192]	; (80078f0 <MX_ADC3_Init+0xd4>)
 8007830:	4a30      	ldr	r2, [pc, #192]	; (80078f4 <MX_ADC3_Init+0xd8>)
 8007832:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8007834:	4b2e      	ldr	r3, [pc, #184]	; (80078f0 <MX_ADC3_Init+0xd4>)
 8007836:	2200      	movs	r2, #0
 8007838:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 800783a:	4b2d      	ldr	r3, [pc, #180]	; (80078f0 <MX_ADC3_Init+0xd4>)
 800783c:	2200      	movs	r2, #0
 800783e:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007840:	4b2b      	ldr	r3, [pc, #172]	; (80078f0 <MX_ADC3_Init+0xd4>)
 8007842:	2200      	movs	r2, #0
 8007844:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007846:	4b2a      	ldr	r3, [pc, #168]	; (80078f0 <MX_ADC3_Init+0xd4>)
 8007848:	2204      	movs	r2, #4
 800784a:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800784c:	4b28      	ldr	r3, [pc, #160]	; (80078f0 <MX_ADC3_Init+0xd4>)
 800784e:	2200      	movs	r2, #0
 8007850:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8007852:	4b27      	ldr	r3, [pc, #156]	; (80078f0 <MX_ADC3_Init+0xd4>)
 8007854:	2201      	movs	r2, #1
 8007856:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8007858:	4b25      	ldr	r3, [pc, #148]	; (80078f0 <MX_ADC3_Init+0xd4>)
 800785a:	2201      	movs	r2, #1
 800785c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800785e:	4b24      	ldr	r3, [pc, #144]	; (80078f0 <MX_ADC3_Init+0xd4>)
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007866:	4b22      	ldr	r3, [pc, #136]	; (80078f0 <MX_ADC3_Init+0xd4>)
 8007868:	2200      	movs	r2, #0
 800786a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800786c:	4b20      	ldr	r3, [pc, #128]	; (80078f0 <MX_ADC3_Init+0xd4>)
 800786e:	2200      	movs	r2, #0
 8007870:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8007872:	4b1f      	ldr	r3, [pc, #124]	; (80078f0 <MX_ADC3_Init+0xd4>)
 8007874:	2200      	movs	r2, #0
 8007876:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800787a:	4b1d      	ldr	r3, [pc, #116]	; (80078f0 <MX_ADC3_Init+0xd4>)
 800787c:	2200      	movs	r2, #0
 800787e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8007880:	4b1b      	ldr	r3, [pc, #108]	; (80078f0 <MX_ADC3_Init+0xd4>)
 8007882:	2200      	movs	r2, #0
 8007884:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8007886:	4b1a      	ldr	r3, [pc, #104]	; (80078f0 <MX_ADC3_Init+0xd4>)
 8007888:	2200      	movs	r2, #0
 800788a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800788c:	4b18      	ldr	r3, [pc, #96]	; (80078f0 <MX_ADC3_Init+0xd4>)
 800788e:	2200      	movs	r2, #0
 8007890:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8007892:	4b17      	ldr	r3, [pc, #92]	; (80078f0 <MX_ADC3_Init+0xd4>)
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800789a:	4815      	ldr	r0, [pc, #84]	; (80078f0 <MX_ADC3_Init+0xd4>)
 800789c:	f003 f820 	bl	800a8e0 <HAL_ADC_Init>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d001      	beq.n	80078aa <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80078a6:	f001 f836 	bl	8008916 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80078aa:	4b13      	ldr	r3, [pc, #76]	; (80078f8 <MX_ADC3_Init+0xdc>)
 80078ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80078ae:	2306      	movs	r3, #6
 80078b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_12CYCLES_5;
 80078b2:	2302      	movs	r3, #2
 80078b4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80078b6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80078ba:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80078bc:	2304      	movs	r3, #4
 80078be:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80078c0:	2300      	movs	r3, #0
 80078c2:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80078c4:	2300      	movs	r3, #0
 80078c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80078ca:	2300      	movs	r3, #0
 80078cc:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 80078ce:	2300      	movs	r3, #0
 80078d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80078d4:	1d3b      	adds	r3, r7, #4
 80078d6:	4619      	mov	r1, r3
 80078d8:	4805      	ldr	r0, [pc, #20]	; (80078f0 <MX_ADC3_Init+0xd4>)
 80078da:	f003 fa09 	bl	800acf0 <HAL_ADC_ConfigChannel>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d001      	beq.n	80078e8 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 80078e4:	f001 f817 	bl	8008916 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80078e8:	bf00      	nop
 80078ea:	3728      	adds	r7, #40	; 0x28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	24000470 	.word	0x24000470
 80078f4:	58026000 	.word	0x58026000
 80078f8:	c7520000 	.word	0xc7520000

080078fc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b08a      	sub	sp, #40	; 0x28
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007904:	f107 0314 	add.w	r3, r7, #20
 8007908:	2200      	movs	r2, #0
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	605a      	str	r2, [r3, #4]
 800790e:	609a      	str	r2, [r3, #8]
 8007910:	60da      	str	r2, [r3, #12]
 8007912:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a22      	ldr	r2, [pc, #136]	; (80079a4 <HAL_ADC_MspInit+0xa8>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d12a      	bne.n	8007974 <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800791e:	4b22      	ldr	r3, [pc, #136]	; (80079a8 <HAL_ADC_MspInit+0xac>)
 8007920:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007924:	4a20      	ldr	r2, [pc, #128]	; (80079a8 <HAL_ADC_MspInit+0xac>)
 8007926:	f043 0320 	orr.w	r3, r3, #32
 800792a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800792e:	4b1e      	ldr	r3, [pc, #120]	; (80079a8 <HAL_ADC_MspInit+0xac>)
 8007930:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007934:	f003 0320 	and.w	r3, r3, #32
 8007938:	613b      	str	r3, [r7, #16]
 800793a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800793c:	4b1a      	ldr	r3, [pc, #104]	; (80079a8 <HAL_ADC_MspInit+0xac>)
 800793e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007942:	4a19      	ldr	r2, [pc, #100]	; (80079a8 <HAL_ADC_MspInit+0xac>)
 8007944:	f043 0304 	orr.w	r3, r3, #4
 8007948:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800794c:	4b16      	ldr	r3, [pc, #88]	; (80079a8 <HAL_ADC_MspInit+0xac>)
 800794e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007952:	f003 0304 	and.w	r3, r3, #4
 8007956:	60fb      	str	r3, [r7, #12]
 8007958:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800795a:	2301      	movs	r3, #1
 800795c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800795e:	2303      	movs	r3, #3
 8007960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007962:	2300      	movs	r3, #0
 8007964:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007966:	f107 0314 	add.w	r3, r7, #20
 800796a:	4619      	mov	r1, r3
 800796c:	480f      	ldr	r0, [pc, #60]	; (80079ac <HAL_ADC_MspInit+0xb0>)
 800796e:	f005 f94f 	bl	800cc10 <HAL_GPIO_Init>
    __HAL_RCC_ADC3_CLK_ENABLE();
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8007972:	e013      	b.n	800799c <HAL_ADC_MspInit+0xa0>
  else if(adcHandle->Instance==ADC3)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a0d      	ldr	r2, [pc, #52]	; (80079b0 <HAL_ADC_MspInit+0xb4>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d10e      	bne.n	800799c <HAL_ADC_MspInit+0xa0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800797e:	4b0a      	ldr	r3, [pc, #40]	; (80079a8 <HAL_ADC_MspInit+0xac>)
 8007980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007984:	4a08      	ldr	r2, [pc, #32]	; (80079a8 <HAL_ADC_MspInit+0xac>)
 8007986:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800798a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800798e:	4b06      	ldr	r3, [pc, #24]	; (80079a8 <HAL_ADC_MspInit+0xac>)
 8007990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007994:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007998:	60bb      	str	r3, [r7, #8]
 800799a:	68bb      	ldr	r3, [r7, #8]
}
 800799c:	bf00      	nop
 800799e:	3728      	adds	r7, #40	; 0x28
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}
 80079a4:	40022000 	.word	0x40022000
 80079a8:	58024400 	.word	0x58024400
 80079ac:	58020800 	.word	0x58020800
 80079b0:	58026000 	.word	0x58026000

080079b4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80079b8:	4b12      	ldr	r3, [pc, #72]	; (8007a04 <MX_CRC_Init+0x50>)
 80079ba:	4a13      	ldr	r2, [pc, #76]	; (8007a08 <MX_CRC_Init+0x54>)
 80079bc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80079be:	4b11      	ldr	r3, [pc, #68]	; (8007a04 <MX_CRC_Init+0x50>)
 80079c0:	2201      	movs	r2, #1
 80079c2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80079c4:	4b0f      	ldr	r3, [pc, #60]	; (8007a04 <MX_CRC_Init+0x50>)
 80079c6:	2201      	movs	r2, #1
 80079c8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 80079ca:	4b0e      	ldr	r3, [pc, #56]	; (8007a04 <MX_CRC_Init+0x50>)
 80079cc:	221d      	movs	r2, #29
 80079ce:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 80079d0:	4b0c      	ldr	r3, [pc, #48]	; (8007a04 <MX_CRC_Init+0x50>)
 80079d2:	2210      	movs	r2, #16
 80079d4:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 80079d6:	4b0b      	ldr	r3, [pc, #44]	; (8007a04 <MX_CRC_Init+0x50>)
 80079d8:	22c4      	movs	r2, #196	; 0xc4
 80079da:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80079dc:	4b09      	ldr	r3, [pc, #36]	; (8007a04 <MX_CRC_Init+0x50>)
 80079de:	2200      	movs	r2, #0
 80079e0:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80079e2:	4b08      	ldr	r3, [pc, #32]	; (8007a04 <MX_CRC_Init+0x50>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80079e8:	4b06      	ldr	r3, [pc, #24]	; (8007a04 <MX_CRC_Init+0x50>)
 80079ea:	2201      	movs	r2, #1
 80079ec:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80079ee:	4805      	ldr	r0, [pc, #20]	; (8007a04 <MX_CRC_Init+0x50>)
 80079f0:	f004 f9ae 	bl	800bd50 <HAL_CRC_Init>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 80079fa:	f000 ff8c 	bl	8008916 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80079fe:	bf00      	nop
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	240004e0 	.word	0x240004e0
 8007a08:	58024c00 	.word	0x58024c00

08007a0c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a0b      	ldr	r2, [pc, #44]	; (8007a48 <HAL_CRC_MspInit+0x3c>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d10e      	bne.n	8007a3c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007a1e:	4b0b      	ldr	r3, [pc, #44]	; (8007a4c <HAL_CRC_MspInit+0x40>)
 8007a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a24:	4a09      	ldr	r2, [pc, #36]	; (8007a4c <HAL_CRC_MspInit+0x40>)
 8007a26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007a2e:	4b07      	ldr	r3, [pc, #28]	; (8007a4c <HAL_CRC_MspInit+0x40>)
 8007a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a38:	60fb      	str	r3, [r7, #12]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8007a3c:	bf00      	nop
 8007a3e:	3714      	adds	r7, #20
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	58024c00 	.word	0x58024c00
 8007a4c:	58024400 	.word	0x58024400

08007a50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b08c      	sub	sp, #48	; 0x30
 8007a54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a56:	f107 031c 	add.w	r3, r7, #28
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	601a      	str	r2, [r3, #0]
 8007a5e:	605a      	str	r2, [r3, #4]
 8007a60:	609a      	str	r2, [r3, #8]
 8007a62:	60da      	str	r2, [r3, #12]
 8007a64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007a66:	4b65      	ldr	r3, [pc, #404]	; (8007bfc <MX_GPIO_Init+0x1ac>)
 8007a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a6c:	4a63      	ldr	r2, [pc, #396]	; (8007bfc <MX_GPIO_Init+0x1ac>)
 8007a6e:	f043 0310 	orr.w	r3, r3, #16
 8007a72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007a76:	4b61      	ldr	r3, [pc, #388]	; (8007bfc <MX_GPIO_Init+0x1ac>)
 8007a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a7c:	f003 0310 	and.w	r3, r3, #16
 8007a80:	61bb      	str	r3, [r7, #24]
 8007a82:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a84:	4b5d      	ldr	r3, [pc, #372]	; (8007bfc <MX_GPIO_Init+0x1ac>)
 8007a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a8a:	4a5c      	ldr	r2, [pc, #368]	; (8007bfc <MX_GPIO_Init+0x1ac>)
 8007a8c:	f043 0304 	orr.w	r3, r3, #4
 8007a90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007a94:	4b59      	ldr	r3, [pc, #356]	; (8007bfc <MX_GPIO_Init+0x1ac>)
 8007a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a9a:	f003 0304 	and.w	r3, r3, #4
 8007a9e:	617b      	str	r3, [r7, #20]
 8007aa0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007aa2:	4b56      	ldr	r3, [pc, #344]	; (8007bfc <MX_GPIO_Init+0x1ac>)
 8007aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007aa8:	4a54      	ldr	r2, [pc, #336]	; (8007bfc <MX_GPIO_Init+0x1ac>)
 8007aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007ab2:	4b52      	ldr	r3, [pc, #328]	; (8007bfc <MX_GPIO_Init+0x1ac>)
 8007ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007abc:	613b      	str	r3, [r7, #16]
 8007abe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ac0:	4b4e      	ldr	r3, [pc, #312]	; (8007bfc <MX_GPIO_Init+0x1ac>)
 8007ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ac6:	4a4d      	ldr	r2, [pc, #308]	; (8007bfc <MX_GPIO_Init+0x1ac>)
 8007ac8:	f043 0301 	orr.w	r3, r3, #1
 8007acc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007ad0:	4b4a      	ldr	r3, [pc, #296]	; (8007bfc <MX_GPIO_Init+0x1ac>)
 8007ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	60fb      	str	r3, [r7, #12]
 8007adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ade:	4b47      	ldr	r3, [pc, #284]	; (8007bfc <MX_GPIO_Init+0x1ac>)
 8007ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ae4:	4a45      	ldr	r2, [pc, #276]	; (8007bfc <MX_GPIO_Init+0x1ac>)
 8007ae6:	f043 0302 	orr.w	r3, r3, #2
 8007aea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007aee:	4b43      	ldr	r3, [pc, #268]	; (8007bfc <MX_GPIO_Init+0x1ac>)
 8007af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007af4:	f003 0302 	and.w	r3, r3, #2
 8007af8:	60bb      	str	r3, [r7, #8]
 8007afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007afc:	4b3f      	ldr	r3, [pc, #252]	; (8007bfc <MX_GPIO_Init+0x1ac>)
 8007afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b02:	4a3e      	ldr	r2, [pc, #248]	; (8007bfc <MX_GPIO_Init+0x1ac>)
 8007b04:	f043 0308 	orr.w	r3, r3, #8
 8007b08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007b0c:	4b3b      	ldr	r3, [pc, #236]	; (8007bfc <MX_GPIO_Init+0x1ac>)
 8007b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b12:	f003 0308 	and.w	r3, r3, #8
 8007b16:	607b      	str	r3, [r7, #4]
 8007b18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	2118      	movs	r1, #24
 8007b1e:	4838      	ldr	r0, [pc, #224]	; (8007c00 <MX_GPIO_Init+0x1b0>)
 8007b20:	f005 fa1e 	bl	800cf60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR3_Pin|DIR4_Pin|DIR5_Pin|GPIO_PIN_8
 8007b24:	2200      	movs	r2, #0
 8007b26:	f44f 4163 	mov.w	r1, #58112	; 0xe300
 8007b2a:	4836      	ldr	r0, [pc, #216]	; (8007c04 <MX_GPIO_Init+0x1b4>)
 8007b2c:	f005 fa18 	bl	800cf60 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 8007b30:	2201      	movs	r2, #1
 8007b32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b36:	4832      	ldr	r0, [pc, #200]	; (8007c00 <MX_GPIO_Init+0x1b0>)
 8007b38:	f005 fa12 	bl	800cf60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f644 7111 	movw	r1, #20241	; 0x4f11
 8007b42:	4831      	ldr	r0, [pc, #196]	; (8007c08 <MX_GPIO_Init+0x1b8>)
 8007b44:	f005 fa0c 	bl	800cf60 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|SPI3_SS1_Pin|USART2_DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin, GPIO_PIN_RESET);
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 8007b4e:	482f      	ldr	r0, [pc, #188]	; (8007c0c <MX_GPIO_Init+0x1bc>)
 8007b50:	f005 fa06 	bl	800cf60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8007b54:	2200      	movs	r2, #0
 8007b56:	21f0      	movs	r1, #240	; 0xf0
 8007b58:	482d      	ldr	r0, [pc, #180]	; (8007c10 <MX_GPIO_Init+0x1c0>)
 8007b5a:	f005 fa01 	bl	800cf60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin|OE_Pin;
 8007b5e:	f44f 738c 	mov.w	r3, #280	; 0x118
 8007b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b64:	2301      	movs	r3, #1
 8007b66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007b70:	f107 031c 	add.w	r3, r7, #28
 8007b74:	4619      	mov	r1, r3
 8007b76:	4822      	ldr	r0, [pc, #136]	; (8007c00 <MX_GPIO_Init+0x1b0>)
 8007b78:	f005 f84a 	bl	800cc10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC8
                           PC9 */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|GPIO_PIN_8
 8007b7c:	f44f 4363 	mov.w	r3, #58112	; 0xe300
 8007b80:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b82:	2301      	movs	r3, #1
 8007b84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b86:	2300      	movs	r3, #0
 8007b88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007b8e:	f107 031c 	add.w	r3, r7, #28
 8007b92:	4619      	mov	r1, r3
 8007b94:	481b      	ldr	r0, [pc, #108]	; (8007c04 <MX_GPIO_Init+0x1b4>)
 8007b96:	f005 f83b 	bl	800cc10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD14 PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8007b9a:	f644 7311 	movw	r3, #20241	; 0x4f11
 8007b9e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|SPI3_SS1_Pin|USART2_DE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007bac:	f107 031c 	add.w	r3, r7, #28
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	4815      	ldr	r0, [pc, #84]	; (8007c08 <MX_GPIO_Init+0x1b8>)
 8007bb4:	f005 f82c 	bl	800cc10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin;
 8007bb8:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 8007bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007bca:	f107 031c 	add.w	r3, r7, #28
 8007bce:	4619      	mov	r1, r3
 8007bd0:	480e      	ldr	r0, [pc, #56]	; (8007c0c <MX_GPIO_Init+0x1bc>)
 8007bd2:	f005 f81d 	bl	800cc10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 8007bd6:	23f0      	movs	r3, #240	; 0xf0
 8007bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bde:	2300      	movs	r3, #0
 8007be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007be2:	2300      	movs	r3, #0
 8007be4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007be6:	f107 031c 	add.w	r3, r7, #28
 8007bea:	4619      	mov	r1, r3
 8007bec:	4808      	ldr	r0, [pc, #32]	; (8007c10 <MX_GPIO_Init+0x1c0>)
 8007bee:	f005 f80f 	bl	800cc10 <HAL_GPIO_Init>

}
 8007bf2:	bf00      	nop
 8007bf4:	3730      	adds	r7, #48	; 0x30
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	58024400 	.word	0x58024400
 8007c00:	58021000 	.word	0x58021000
 8007c04:	58020800 	.word	0x58020800
 8007c08:	58020c00 	.word	0x58020c00
 8007c0c:	58020000 	.word	0x58020000
 8007c10:	58020400 	.word	0x58020400
 8007c14:	00000000 	.word	0x00000000

08007c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007c18:	b5b0      	push	{r4, r5, r7, lr}
 8007c1a:	b0ea      	sub	sp, #424	; 0x1a8
 8007c1c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007c1e:	f002 fb87 	bl	800a330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007c22:	f000 fdd1 	bl	80087c8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8007c26:	f000 fe49 	bl	80088bc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007c2a:	f7ff ff11 	bl	8007a50 <MX_GPIO_Init>
  MX_ADC1_Init();
 8007c2e:	f7ff fd7d 	bl	800772c <MX_ADC1_Init>
  MX_ADC3_Init();
 8007c32:	f7ff fdf3 	bl	800781c <MX_ADC3_Init>
  MX_SPI3_Init();
 8007c36:	f000 fe73 	bl	8008920 <MX_SPI3_Init>
  MX_TIM1_Init();
 8007c3a:	f001 f8e7 	bl	8008e0c <MX_TIM1_Init>
  MX_TIM2_Init();
 8007c3e:	f001 f993 	bl	8008f68 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007c42:	f001 fa09 	bl	8009058 <MX_TIM3_Init>
  MX_TIM4_Init();
 8007c46:	f001 fa7f 	bl	8009148 <MX_TIM4_Init>
  MX_TIM12_Init();
 8007c4a:	f001 faf5 	bl	8009238 <MX_TIM12_Init>
  MX_TIM13_Init();
 8007c4e:	f001 fb57 	bl	8009300 <MX_TIM13_Init>
  MX_TIM14_Init();
 8007c52:	f001 fb79 	bl	8009348 <MX_TIM14_Init>
  MX_TIM15_Init();
 8007c56:	f001 fbc5 	bl	80093e4 <MX_TIM15_Init>
  MX_TIM16_Init();
 8007c5a:	f001 fc67 	bl	800952c <MX_TIM16_Init>
  MX_TIM17_Init();
 8007c5e:	f001 fcdf 	bl	8009620 <MX_TIM17_Init>
  MX_UART4_Init();
 8007c62:	f002 f8b9 	bl	8009dd8 <MX_UART4_Init>
  MX_UART5_Init();
 8007c66:	f002 f903 	bl	8009e70 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8007c6a:	f002 f94d 	bl	8009f08 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8007c6e:	f002 f997 	bl	8009fa0 <MX_USART3_UART_Init>
  MX_TIM23_Init();
 8007c72:	f001 fd51 	bl	8009718 <MX_TIM23_Init>
  MX_CRC_Init();
 8007c76:	f7ff fe9d 	bl	80079b4 <MX_CRC_Init>
  MX_TIM24_Init();
 8007c7a:	f001 fd9d 	bl	80097b8 <MX_TIM24_Init>
  /* USER CODE BEGIN 2 */
	ARMsProtocol_FUNC_Init();
 8007c7e:	f7f8 fe15 	bl	80008ac <ARMsProtocol_FUNC_Init>

	/*
	 * Servo Initialise
	 */
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, 1);
 8007c82:	2201      	movs	r2, #1
 8007c84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007c88:	48b1      	ldr	r0, [pc, #708]	; (8007f50 <main+0x338>)
 8007c8a:	f005 f969 	bl	800cf60 <HAL_GPIO_WritePin>
	servo_initialise(&servo_motor, &htim17, TIM_CHANNEL_1);
 8007c8e:	2200      	movs	r2, #0
 8007c90:	49b0      	ldr	r1, [pc, #704]	; (8007f54 <main+0x33c>)
 8007c92:	48b1      	ldr	r0, [pc, #708]	; (8007f58 <main+0x340>)
 8007c94:	f7fe fdd6 	bl	8006844 <servo_initialise>
	/*
	 * Encoder Initialise
	 */
	AMT21_initialise(&encoders[0], &huart2, 0x2C, USART2_DE_GPIO_Port,
 8007c98:	2310      	movs	r3, #16
 8007c9a:	9300      	str	r3, [sp, #0]
 8007c9c:	4baf      	ldr	r3, [pc, #700]	; (8007f5c <main+0x344>)
 8007c9e:	222c      	movs	r2, #44	; 0x2c
 8007ca0:	49af      	ldr	r1, [pc, #700]	; (8007f60 <main+0x348>)
 8007ca2:	48b0      	ldr	r0, [pc, #704]	; (8007f64 <main+0x34c>)
 8007ca4:	f7f8 fd08 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[1], &huart2, 0x70, USART2_DE_GPIO_Port,
 8007ca8:	2310      	movs	r3, #16
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	4bab      	ldr	r3, [pc, #684]	; (8007f5c <main+0x344>)
 8007cae:	2270      	movs	r2, #112	; 0x70
 8007cb0:	49ab      	ldr	r1, [pc, #684]	; (8007f60 <main+0x348>)
 8007cb2:	48ad      	ldr	r0, [pc, #692]	; (8007f68 <main+0x350>)
 8007cb4:	f7f8 fd00 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[2], &huart2, 0x54, USART2_DE_GPIO_Port,
 8007cb8:	2310      	movs	r3, #16
 8007cba:	9300      	str	r3, [sp, #0]
 8007cbc:	4ba7      	ldr	r3, [pc, #668]	; (8007f5c <main+0x344>)
 8007cbe:	2254      	movs	r2, #84	; 0x54
 8007cc0:	49a7      	ldr	r1, [pc, #668]	; (8007f60 <main+0x348>)
 8007cc2:	48aa      	ldr	r0, [pc, #680]	; (8007f6c <main+0x354>)
 8007cc4:	f7f8 fcf8 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[4], &huart2, 0xE8, USART2_DE_GPIO_Port,
 8007cc8:	2310      	movs	r3, #16
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	4ba3      	ldr	r3, [pc, #652]	; (8007f5c <main+0x344>)
 8007cce:	22e8      	movs	r2, #232	; 0xe8
 8007cd0:	49a3      	ldr	r1, [pc, #652]	; (8007f60 <main+0x348>)
 8007cd2:	48a7      	ldr	r0, [pc, #668]	; (8007f70 <main+0x358>)
 8007cd4:	f7f8 fcf0 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[3], &huart2, 0xB4, USART2_DE_GPIO_Port,
 8007cd8:	2310      	movs	r3, #16
 8007cda:	9300      	str	r3, [sp, #0]
 8007cdc:	4b9f      	ldr	r3, [pc, #636]	; (8007f5c <main+0x344>)
 8007cde:	22b4      	movs	r2, #180	; 0xb4
 8007ce0:	499f      	ldr	r1, [pc, #636]	; (8007f60 <main+0x348>)
 8007ce2:	48a4      	ldr	r0, [pc, #656]	; (8007f74 <main+0x35c>)
 8007ce4:	f7f8 fce8 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	/*
	 * Stepper Initialise
	 */
	stepper_initialise(&steppers[0], &htim1, TIM_CHANNEL_1, DIR1_GPIO_Port,
 8007ce8:	2301      	movs	r3, #1
 8007cea:	9301      	str	r3, [sp, #4]
 8007cec:	2308      	movs	r3, #8
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	4b97      	ldr	r3, [pc, #604]	; (8007f50 <main+0x338>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	49a0      	ldr	r1, [pc, #640]	; (8007f78 <main+0x360>)
 8007cf6:	48a1      	ldr	r0, [pc, #644]	; (8007f7c <main+0x364>)
 8007cf8:	f7fe fd66 	bl	80067c8 <stepper_initialise>
	DIR1_Pin, 1); //swap 0 -> 1
	stepper_initialise(&steppers[1], &htim2, TIM_CHANNEL_1, DIR2_GPIO_Port,
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	9301      	str	r3, [sp, #4]
 8007d00:	2310      	movs	r3, #16
 8007d02:	9300      	str	r3, [sp, #0]
 8007d04:	4b92      	ldr	r3, [pc, #584]	; (8007f50 <main+0x338>)
 8007d06:	2200      	movs	r2, #0
 8007d08:	499d      	ldr	r1, [pc, #628]	; (8007f80 <main+0x368>)
 8007d0a:	489e      	ldr	r0, [pc, #632]	; (8007f84 <main+0x36c>)
 8007d0c:	f7fe fd5c 	bl	80067c8 <stepper_initialise>
	DIR2_Pin, 1);
	stepper_initialise(&steppers[2], &htim3, TIM_CHANNEL_1, DIR3_GPIO_Port,
 8007d10:	2300      	movs	r3, #0
 8007d12:	9301      	str	r3, [sp, #4]
 8007d14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	4b9b      	ldr	r3, [pc, #620]	; (8007f88 <main+0x370>)
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	499b      	ldr	r1, [pc, #620]	; (8007f8c <main+0x374>)
 8007d20:	489b      	ldr	r0, [pc, #620]	; (8007f90 <main+0x378>)
 8007d22:	f7fe fd51 	bl	80067c8 <stepper_initialise>
	DIR3_Pin, 0); //swap 1 -> 0
	stepper_initialise(&steppers[4], &htim4, TIM_CHANNEL_1, DIR4_GPIO_Port,
 8007d26:	2300      	movs	r3, #0
 8007d28:	9301      	str	r3, [sp, #4]
 8007d2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	4b95      	ldr	r3, [pc, #596]	; (8007f88 <main+0x370>)
 8007d32:	2200      	movs	r2, #0
 8007d34:	4997      	ldr	r1, [pc, #604]	; (8007f94 <main+0x37c>)
 8007d36:	4898      	ldr	r0, [pc, #608]	; (8007f98 <main+0x380>)
 8007d38:	f7fe fd46 	bl	80067c8 <stepper_initialise>
	DIR4_Pin, 0);
	stepper_initialise(&steppers[3], &htim15, TIM_CHANNEL_1, DIR5_GPIO_Port,
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	9301      	str	r3, [sp, #4]
 8007d40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	4b90      	ldr	r3, [pc, #576]	; (8007f88 <main+0x370>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	4994      	ldr	r1, [pc, #592]	; (8007f9c <main+0x384>)
 8007d4c:	4894      	ldr	r0, [pc, #592]	; (8007fa0 <main+0x388>)
 8007d4e:	f7fe fd3b 	bl	80067c8 <stepper_initialise>
	DIR5_Pin, 1);
	/*
	 * Kalman Filter Initialise
	 */
	KalmanFilter_initialise(&kalman_filter[0], 0, 0, 1, 0, 0, 1, KALMAN_R,
 8007d52:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 8007d56:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8007f18 <main+0x300>
 8007d5a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8007d5e:	ed9f 4b70 	vldr	d4, [pc, #448]	; 8007f20 <main+0x308>
 8007d62:	ed9f 3b6f 	vldr	d3, [pc, #444]	; 8007f20 <main+0x308>
 8007d66:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007d6a:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 8007f20 <main+0x308>
 8007d6e:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 8007f20 <main+0x308>
 8007d72:	488c      	ldr	r0, [pc, #560]	; (8007fa4 <main+0x38c>)
 8007d74:	f7f9 fb68 	bl	8001448 <KalmanFilter_initialise>
	KALMAN_Q);
	KalmanFilter_initialise(&kalman_filter[1], 0, 0, 1, 0, 0, 1, KALMAN_R,
 8007d78:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 8007d7c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8007f18 <main+0x300>
 8007d80:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8007d84:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8007f20 <main+0x308>
 8007d88:	ed9f 3b65 	vldr	d3, [pc, #404]	; 8007f20 <main+0x308>
 8007d8c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007d90:	ed9f 1b63 	vldr	d1, [pc, #396]	; 8007f20 <main+0x308>
 8007d94:	ed9f 0b62 	vldr	d0, [pc, #392]	; 8007f20 <main+0x308>
 8007d98:	4883      	ldr	r0, [pc, #524]	; (8007fa8 <main+0x390>)
 8007d9a:	f7f9 fb55 	bl	8001448 <KalmanFilter_initialise>
	KALMAN_Q);
	KalmanFilter_initialise(&kalman_filter[2], 0, 0, 1, 0, 0, 1, KALMAN_R,
 8007d9e:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 8007da2:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8007f18 <main+0x300>
 8007da6:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8007daa:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 8007f20 <main+0x308>
 8007dae:	ed9f 3b5c 	vldr	d3, [pc, #368]	; 8007f20 <main+0x308>
 8007db2:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007db6:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 8007f20 <main+0x308>
 8007dba:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8007f20 <main+0x308>
 8007dbe:	487b      	ldr	r0, [pc, #492]	; (8007fac <main+0x394>)
 8007dc0:	f7f9 fb42 	bl	8001448 <KalmanFilter_initialise>
	KALMAN_Q);
	KalmanFilter_initialise(&kalman_filter[3], 0, 0, 1, 0, 0, 1, KALMAN_R,
 8007dc4:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 8007dc8:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8007f18 <main+0x300>
 8007dcc:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8007dd0:	ed9f 4b53 	vldr	d4, [pc, #332]	; 8007f20 <main+0x308>
 8007dd4:	ed9f 3b52 	vldr	d3, [pc, #328]	; 8007f20 <main+0x308>
 8007dd8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007ddc:	ed9f 1b50 	vldr	d1, [pc, #320]	; 8007f20 <main+0x308>
 8007de0:	ed9f 0b4f 	vldr	d0, [pc, #316]	; 8007f20 <main+0x308>
 8007de4:	4872      	ldr	r0, [pc, #456]	; (8007fb0 <main+0x398>)
 8007de6:	f7f9 fb2f 	bl	8001448 <KalmanFilter_initialise>
	KALMAN_Q);
	KalmanFilter_initialise(&kalman_filter[4], 0, 0, 1, 0, 0, 1, KALMAN_R,
 8007dea:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 8007dee:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8007f18 <main+0x300>
 8007df2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8007df6:	ed9f 4b4a 	vldr	d4, [pc, #296]	; 8007f20 <main+0x308>
 8007dfa:	ed9f 3b49 	vldr	d3, [pc, #292]	; 8007f20 <main+0x308>
 8007dfe:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007e02:	ed9f 1b47 	vldr	d1, [pc, #284]	; 8007f20 <main+0x308>
 8007e06:	ed9f 0b46 	vldr	d0, [pc, #280]	; 8007f20 <main+0x308>
 8007e0a:	486a      	ldr	r0, [pc, #424]	; (8007fb4 <main+0x39c>)
 8007e0c:	f7f9 fb1c 	bl	8001448 <KalmanFilter_initialise>
//	PIDController_initialise(&position_pid_controller[3], 40, 0, 0);
//	PIDController_initialise(&position_pid_controller[4], 40, 0, 0);
	/*
	 * Cascade Control
	 */
	PIDController_initialise(&position_pid_controller[0], 60, 0, 0); //120
 8007e10:	ed9f 2b43 	vldr	d2, [pc, #268]	; 8007f20 <main+0x308>
 8007e14:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8007f20 <main+0x308>
 8007e18:	ed9f 0b43 	vldr	d0, [pc, #268]	; 8007f28 <main+0x310>
 8007e1c:	4866      	ldr	r0, [pc, #408]	; (8007fb8 <main+0x3a0>)
 8007e1e:	f7fe fe93 	bl	8006b48 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[1], 15, 0, 0); //45
 8007e22:	ed9f 2b3f 	vldr	d2, [pc, #252]	; 8007f20 <main+0x308>
 8007e26:	ed9f 1b3e 	vldr	d1, [pc, #248]	; 8007f20 <main+0x308>
 8007e2a:	eeb2 0b0e 	vmov.f64	d0, #46	; 0x41700000  15.0
 8007e2e:	4863      	ldr	r0, [pc, #396]	; (8007fbc <main+0x3a4>)
 8007e30:	f7fe fe8a 	bl	8006b48 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[2], 15, 0, 0); // 40
 8007e34:	ed9f 2b3a 	vldr	d2, [pc, #232]	; 8007f20 <main+0x308>
 8007e38:	ed9f 1b39 	vldr	d1, [pc, #228]	; 8007f20 <main+0x308>
 8007e3c:	eeb2 0b0e 	vmov.f64	d0, #46	; 0x41700000  15.0
 8007e40:	485f      	ldr	r0, [pc, #380]	; (8007fc0 <main+0x3a8>)
 8007e42:	f7fe fe81 	bl	8006b48 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[3], 10, 0, 0); //25
 8007e46:	ed9f 2b36 	vldr	d2, [pc, #216]	; 8007f20 <main+0x308>
 8007e4a:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8007f20 <main+0x308>
 8007e4e:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8007e52:	485c      	ldr	r0, [pc, #368]	; (8007fc4 <main+0x3ac>)
 8007e54:	f7fe fe78 	bl	8006b48 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[4], 25, 0, 0); //25
 8007e58:	ed9f 2b31 	vldr	d2, [pc, #196]	; 8007f20 <main+0x308>
 8007e5c:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8007f20 <main+0x308>
 8007e60:	eeb3 0b09 	vmov.f64	d0, #57	; 0x41c80000  25.0
 8007e64:	4858      	ldr	r0, [pc, #352]	; (8007fc8 <main+0x3b0>)
 8007e66:	f7fe fe6f 	bl	8006b48 <PIDController_initialise>
	 * Velocity Pid Initialise
	 */
	/*
	 * Cascade Control
	 */
	PIDController_initialise(&velocity_pid_controller[0], 60, 0, 0); //100 0.05 . 80
 8007e6a:	ed9f 2b2d 	vldr	d2, [pc, #180]	; 8007f20 <main+0x308>
 8007e6e:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8007f20 <main+0x308>
 8007e72:	ed9f 0b2d 	vldr	d0, [pc, #180]	; 8007f28 <main+0x310>
 8007e76:	4855      	ldr	r0, [pc, #340]	; (8007fcc <main+0x3b4>)
 8007e78:	f7fe fe66 	bl	8006b48 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[1], 40, 0, 0); //60 0.05
 8007e7c:	ed9f 2b28 	vldr	d2, [pc, #160]	; 8007f20 <main+0x308>
 8007e80:	ed9f 1b27 	vldr	d1, [pc, #156]	; 8007f20 <main+0x308>
 8007e84:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8007f30 <main+0x318>
 8007e88:	4851      	ldr	r0, [pc, #324]	; (8007fd0 <main+0x3b8>)
 8007e8a:	f7fe fe5d 	bl	8006b48 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[2], 10, 0, 0); //10
 8007e8e:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8007f20 <main+0x308>
 8007e92:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007f20 <main+0x308>
 8007e96:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8007e9a:	484e      	ldr	r0, [pc, #312]	; (8007fd4 <main+0x3bc>)
 8007e9c:	f7fe fe54 	bl	8006b48 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[3], 5	, 0, 0); //1
 8007ea0:	ed9f 2b1f 	vldr	d2, [pc, #124]	; 8007f20 <main+0x308>
 8007ea4:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8007f20 <main+0x308>
 8007ea8:	eeb1 0b04 	vmov.f64	d0, #20	; 0x40a00000  5.0
 8007eac:	484a      	ldr	r0, [pc, #296]	; (8007fd8 <main+0x3c0>)
 8007eae:	f7fe fe4b 	bl	8006b48 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[4], 15, 0, 0); //1
 8007eb2:	ed9f 2b1b 	vldr	d2, [pc, #108]	; 8007f20 <main+0x308>
 8007eb6:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8007f20 <main+0x308>
 8007eba:	eeb2 0b0e 	vmov.f64	d0, #46	; 0x41700000  15.0
 8007ebe:	4847      	ldr	r0, [pc, #284]	; (8007fdc <main+0x3c4>)
 8007ec0:	f7fe fe42 	bl	8006b48 <PIDController_initialise>
	 *  40
	 *  10
	 *  7.5
	 *  7.5
	 */
	PIDController_set_limit(&velocity_pid_controller[0], 1000, 4000);
 8007ec4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8007f38 <main+0x320>
 8007ec8:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 8007f40 <main+0x328>
 8007ecc:	483f      	ldr	r0, [pc, #252]	; (8007fcc <main+0x3b4>)
 8007ece:	f7fe fe61 	bl	8006b94 <PIDController_set_limit>
	PIDController_set_limit(&velocity_pid_controller[1], 1000, 3000);
 8007ed2:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8007f48 <main+0x330>
 8007ed6:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007f40 <main+0x328>
 8007eda:	483d      	ldr	r0, [pc, #244]	; (8007fd0 <main+0x3b8>)
 8007edc:	f7fe fe5a 	bl	8006b94 <PIDController_set_limit>
	PIDController_set_limit(&velocity_pid_controller[2], 1000, 1000);
 8007ee0:	ed9f 1b17 	vldr	d1, [pc, #92]	; 8007f40 <main+0x328>
 8007ee4:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8007f40 <main+0x328>
 8007ee8:	483a      	ldr	r0, [pc, #232]	; (8007fd4 <main+0x3bc>)
 8007eea:	f7fe fe53 	bl	8006b94 <PIDController_set_limit>
	PIDController_set_limit(&velocity_pid_controller[3], 1000, 4000);
 8007eee:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8007f38 <main+0x320>
 8007ef2:	ed9f 0b13 	vldr	d0, [pc, #76]	; 8007f40 <main+0x328>
 8007ef6:	4838      	ldr	r0, [pc, #224]	; (8007fd8 <main+0x3c0>)
 8007ef8:	f7fe fe4c 	bl	8006b94 <PIDController_set_limit>
	PIDController_set_limit(&velocity_pid_controller[4], 1000, 4000);
 8007efc:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8007f38 <main+0x320>
 8007f00:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8007f40 <main+0x328>
 8007f04:	4835      	ldr	r0, [pc, #212]	; (8007fdc <main+0x3c4>)
 8007f06:	f7fe fe45 	bl	8006b94 <PIDController_set_limit>
	/*
	 * Quintic Trajectory Following Initialise
	 */
	for (int i = 0; i < 5; i++) {
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007f10:	e078      	b.n	8008004 <main+0x3ec>
 8007f12:	bf00      	nop
 8007f14:	f3af 8000 	nop.w
 8007f18:	47ae147b 	.word	0x47ae147b
 8007f1c:	3f847ae1 	.word	0x3f847ae1
	...
 8007f2c:	404e0000 	.word	0x404e0000
 8007f30:	00000000 	.word	0x00000000
 8007f34:	40440000 	.word	0x40440000
 8007f38:	00000000 	.word	0x00000000
 8007f3c:	40af4000 	.word	0x40af4000
 8007f40:	00000000 	.word	0x00000000
 8007f44:	408f4000 	.word	0x408f4000
 8007f48:	00000000 	.word	0x00000000
 8007f4c:	40a77000 	.word	0x40a77000
 8007f50:	58021000 	.word	0x58021000
 8007f54:	24000eb4 	.word	0x24000eb4
 8007f58:	24000788 	.word	0x24000788
 8007f5c:	58020c00 	.word	0x58020c00
 8007f60:	24001310 	.word	0x24001310
 8007f64:	24000794 	.word	0x24000794
 8007f68:	240007a8 	.word	0x240007a8
 8007f6c:	240007bc 	.word	0x240007bc
 8007f70:	240007e4 	.word	0x240007e4
 8007f74:	240007d0 	.word	0x240007d0
 8007f78:	24000f98 	.word	0x24000f98
 8007f7c:	240006e8 	.word	0x240006e8
 8007f80:	24000fe4 	.word	0x24000fe4
 8007f84:	24000708 	.word	0x24000708
 8007f88:	58020800 	.word	0x58020800
 8007f8c:	24000f00 	.word	0x24000f00
 8007f90:	24000728 	.word	0x24000728
 8007f94:	24000e1c 	.word	0x24000e1c
 8007f98:	24000768 	.word	0x24000768
 8007f9c:	24000e68 	.word	0x24000e68
 8007fa0:	24000748 	.word	0x24000748
 8007fa4:	24000a00 	.word	0x24000a00
 8007fa8:	24000a40 	.word	0x24000a40
 8007fac:	24000a80 	.word	0x24000a80
 8007fb0:	24000ac0 	.word	0x24000ac0
 8007fb4:	24000b00 	.word	0x24000b00
 8007fb8:	24000b40 	.word	0x24000b40
 8007fbc:	24000ba8 	.word	0x24000ba8
 8007fc0:	24000c10 	.word	0x24000c10
 8007fc4:	24000c78 	.word	0x24000c78
 8007fc8:	24000ce0 	.word	0x24000ce0
 8007fcc:	240007f8 	.word	0x240007f8
 8007fd0:	24000860 	.word	0x24000860
 8007fd4:	240008c8 	.word	0x240008c8
 8007fd8:	24000930 	.word	0x24000930
 8007fdc:	24000998 	.word	0x24000998
		QuinticTrajectory_initialise(&quintic_trajectory[i], 0.01);
 8007fe0:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	005b      	lsls	r3, r3, #1
 8007fe8:	4413      	add	r3, r2
 8007fea:	015b      	lsls	r3, r3, #5
 8007fec:	4a80      	ldr	r2, [pc, #512]	; (80081f0 <main+0x5d8>)
 8007fee:	4413      	add	r3, r2
 8007ff0:	ed9f 0b77 	vldr	d0, [pc, #476]	; 80081d0 <main+0x5b8>
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f7fe fef2 	bl	8006dde <QuinticTrajectory_initialise>
	for (int i = 0; i < 5; i++) {
 8007ffa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007ffe:	3301      	adds	r3, #1
 8008000:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8008004:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8008008:	2b04      	cmp	r3, #4
 800800a:	dde9      	ble.n	8007fe0 <main+0x3c8>
	}
	int8_t j_num = 0;
 800800c:	2300      	movs	r3, #0
 800800e:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
	uint32_t timestamp1 = 0;
 8008012:	2300      	movs	r3, #0
 8008014:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
	uint32_t timestamp2 = 0;
 8008018:	2300      	movs	r3, #0
 800801a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
	uint32_t timestamp3 = 0;
 800801e:	2300      	movs	r3, #0
 8008020:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	HAL_StatusTypeDef rep = HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
	int32_t encoder_unwrap_value[5] = { 0 };
 800802a:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800802e:	2200      	movs	r2, #0
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	605a      	str	r2, [r3, #4]
 8008034:	609a      	str	r2, [r3, #8]
 8008036:	60da      	str	r2, [r3, #12]
 8008038:	611a      	str	r2, [r3, #16]
	double q0[5] = {-2, 8, -10, 4, 4};
 800803a:	4b6e      	ldr	r3, [pc, #440]	; (80081f4 <main+0x5dc>)
 800803c:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8008040:	461d      	mov	r5, r3
 8008042:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800804a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800804e:	e884 0003 	stmia.w	r4, {r0, r1}
	double q1[5] = {2, -16, 8, -2.5, -2.5};
 8008052:	4b69      	ldr	r3, [pc, #420]	; (80081f8 <main+0x5e0>)
 8008054:	f107 04f8 	add.w	r4, r7, #248	; 0xf8
 8008058:	461d      	mov	r5, r3
 800805a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800805c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800805e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008062:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008066:	e884 0003 	stmia.w	r4, {r0, r1}
	double v0[5] = {0};
 800806a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800806e:	2228      	movs	r2, #40	; 0x28
 8008070:	2100      	movs	r1, #0
 8008072:	4618      	mov	r0, r3
 8008074:	f00c f9e6 	bl	8014444 <memset>
	double v1[5] = {0};
 8008078:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800807c:	2228      	movs	r2, #40	; 0x28
 800807e:	2100      	movs	r1, #0
 8008080:	4618      	mov	r0, r3
 8008082:	f00c f9df 	bl	8014444 <memset>
	double ac0[5] = {0};
 8008086:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800808a:	4618      	mov	r0, r3
 800808c:	2328      	movs	r3, #40	; 0x28
 800808e:	461a      	mov	r2, r3
 8008090:	2100      	movs	r1, #0
 8008092:	f00c f9d7 	bl	8014444 <memset>
	double ac1[5] = {0};
 8008096:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800809a:	4618      	mov	r0, r3
 800809c:	2328      	movs	r3, #40	; 0x28
 800809e:	461a      	mov	r2, r3
 80080a0:	2100      	movs	r1, #0
 80080a2:	f00c f9cf 	bl	8014444 <memset>
	double tf = 10;
 80080a6:	f04f 0200 	mov.w	r2, #0
 80080aa:	4b54      	ldr	r3, [pc, #336]	; (80081fc <main+0x5e4>)
 80080ac:	e9c7 2358 	strd	r2, r3, [r7, #352]	; 0x160
	int8_t traj_buf = 0;
 80080b0:	2300      	movs	r3, #0
 80080b2:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if ((delta_khe[0] != 0)||
 80080b6:	4b52      	ldr	r3, [pc, #328]	; (8008200 <main+0x5e8>)
 80080b8:	ed93 7b00 	vldr	d7, [r3]
 80080bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80080c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080c4:	d120      	bne.n	8008108 <main+0x4f0>
				(delta_khe[1] != 0)||
 80080c6:	4b4e      	ldr	r3, [pc, #312]	; (8008200 <main+0x5e8>)
 80080c8:	ed93 7b02 	vldr	d7, [r3, #8]
		if ((delta_khe[0] != 0)||
 80080cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80080d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080d4:	d118      	bne.n	8008108 <main+0x4f0>
				(delta_khe[2] != 0)||
 80080d6:	4b4a      	ldr	r3, [pc, #296]	; (8008200 <main+0x5e8>)
 80080d8:	ed93 7b04 	vldr	d7, [r3, #16]
				(delta_khe[1] != 0)||
 80080dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80080e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e4:	d110      	bne.n	8008108 <main+0x4f0>
				(delta_khe[3] != 0)||
 80080e6:	4b46      	ldr	r3, [pc, #280]	; (8008200 <main+0x5e8>)
 80080e8:	ed93 7b06 	vldr	d7, [r3, #24]
				(delta_khe[2] != 0)||
 80080ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80080f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080f4:	d108      	bne.n	8008108 <main+0x4f0>
				(delta_khe[4] != 0)){
 80080f6:	4b42      	ldr	r3, [pc, #264]	; (8008200 <main+0x5e8>)
 80080f8:	ed93 7b08 	vldr	d7, [r3, #32]
				(delta_khe[3] != 0)||
 80080fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008104:	f000 80ac 	beq.w	8008260 <main+0x648>
			/*
			 * Tai-Ban Cartesian Jog
			 */
			double joint_config[5] = {0};
 8008108:	f107 0308 	add.w	r3, r7, #8
 800810c:	4618      	mov	r0, r3
 800810e:	2328      	movs	r3, #40	; 0x28
 8008110:	461a      	mov	r2, r3
 8008112:	2100      	movs	r1, #0
 8008114:	f00c f996 	bl	8014444 <memset>
			double delta_q[5] = {0};
 8008118:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800811c:	4618      	mov	r0, r3
 800811e:	2328      	movs	r3, #40	; 0x28
 8008120:	461a      	mov	r2, r3
 8008122:	2100      	movs	r1, #0
 8008124:	f00c f98e 	bl	8014444 <memset>
			joint_config[0] = desired_position[0] * (9.0/25.0);
 8008128:	4b36      	ldr	r3, [pc, #216]	; (8008204 <main+0x5ec>)
 800812a:	ed93 7b00 	vldr	d7, [r3]
 800812e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 80081d8 <main+0x5c0>
 8008132:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008136:	f107 0308 	add.w	r3, r7, #8
 800813a:	ed83 7b00 	vstr	d7, [r3]
			joint_config[1] = desired_position[1] / 27.0;
 800813e:	4b31      	ldr	r3, [pc, #196]	; (8008204 <main+0x5ec>)
 8008140:	ed93 6b02 	vldr	d6, [r3, #8]
 8008144:	eeb3 5b0b 	vmov.f64	d5, #59	; 0x41d80000  27.0
 8008148:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800814c:	f107 0308 	add.w	r3, r7, #8
 8008150:	ed83 7b02 	vstr	d7, [r3, #8]
			joint_config[2] = asin(desired_position[2]/22.5);
 8008154:	4b2b      	ldr	r3, [pc, #172]	; (8008204 <main+0x5ec>)
 8008156:	ed93 7b04 	vldr	d7, [r3, #16]
 800815a:	ed9f 5b21 	vldr	d5, [pc, #132]	; 80081e0 <main+0x5c8>
 800815e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8008162:	eeb0 0b46 	vmov.f64	d0, d6
 8008166:	f00f f93f 	bl	80173e8 <asin>
 800816a:	eeb0 7b40 	vmov.f64	d7, d0
 800816e:	f107 0308 	add.w	r3, r7, #8
 8008172:	ed83 7b04 	vstr	d7, [r3, #16]
			joint_config[3] = (desired_position[3] + desired_position[4]) * 0.1125;
 8008176:	4b23      	ldr	r3, [pc, #140]	; (8008204 <main+0x5ec>)
 8008178:	ed93 6b06 	vldr	d6, [r3, #24]
 800817c:	4b21      	ldr	r3, [pc, #132]	; (8008204 <main+0x5ec>)
 800817e:	ed93 7b08 	vldr	d7, [r3, #32]
 8008182:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008186:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80081e8 <main+0x5d0>
 800818a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800818e:	f107 0308 	add.w	r3, r7, #8
 8008192:	ed83 7b06 	vstr	d7, [r3, #24]
			joint_config[4] = (desired_position[3] - desired_position[4])/8.0;
 8008196:	4b1b      	ldr	r3, [pc, #108]	; (8008204 <main+0x5ec>)
 8008198:	ed93 6b06 	vldr	d6, [r3, #24]
 800819c:	4b19      	ldr	r3, [pc, #100]	; (8008204 <main+0x5ec>)
 800819e:	ed93 7b08 	vldr	d7, [r3, #32]
 80081a2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80081a6:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 80081aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80081ae:	f107 0308 	add.w	r3, r7, #8
 80081b2:	ed83 7b08 	vstr	d7, [r3, #32]
			IVK(joint_config, delta_khe, delta_q);
 80081b6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80081ba:	f107 0308 	add.w	r3, r7, #8
 80081be:	4910      	ldr	r1, [pc, #64]	; (8008200 <main+0x5e8>)
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7f9 fc91 	bl	8001ae8 <IVK>
			for (int i = 0; i < 5; i++) {
 80081c6:	2300      	movs	r3, #0
 80081c8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80081cc:	e044      	b.n	8008258 <main+0x640>
 80081ce:	bf00      	nop
 80081d0:	47ae147b 	.word	0x47ae147b
 80081d4:	3f847ae1 	.word	0x3f847ae1
 80081d8:	70a3d70a 	.word	0x70a3d70a
 80081dc:	3fd70a3d 	.word	0x3fd70a3d
 80081e0:	00000000 	.word	0x00000000
 80081e4:	40368000 	.word	0x40368000
 80081e8:	cccccccd 	.word	0xcccccccd
 80081ec:	3fbccccc 	.word	0x3fbccccc
 80081f0:	24000508 	.word	0x24000508
 80081f4:	080182a8 	.word	0x080182a8
 80081f8:	080182d0 	.word	0x080182d0
 80081fc:	40240000 	.word	0x40240000
 8008200:	240002d0 	.word	0x240002d0
 8008204:	24000208 	.word	0x24000208
				delta_khe[i] = 0;
 8008208:	4abc      	ldr	r2, [pc, #752]	; (80084fc <main+0x8e4>)
 800820a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	18d1      	adds	r1, r2, r3
 8008212:	f04f 0200 	mov.w	r2, #0
 8008216:	f04f 0300 	mov.w	r3, #0
 800821a:	e9c1 2300 	strd	r2, r3, [r1]
				desired_position[i] += delta_q[i];
 800821e:	4ab8      	ldr	r2, [pc, #736]	; (8008500 <main+0x8e8>)
 8008220:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8008224:	00db      	lsls	r3, r3, #3
 8008226:	4413      	add	r3, r2
 8008228:	ed93 6b00 	vldr	d6, [r3]
 800822c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008230:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8008234:	00db      	lsls	r3, r3, #3
 8008236:	4413      	add	r3, r2
 8008238:	ed93 7b00 	vldr	d7, [r3]
 800823c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008240:	4aaf      	ldr	r2, [pc, #700]	; (8008500 <main+0x8e8>)
 8008242:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8008246:	00db      	lsls	r3, r3, #3
 8008248:	4413      	add	r3, r2
 800824a:	ed83 7b00 	vstr	d7, [r3]
			for (int i = 0; i < 5; i++) {
 800824e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8008252:	3301      	adds	r3, #1
 8008254:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8008258:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800825c:	2b04      	cmp	r3, #4
 800825e:	ddd3      	ble.n	8008208 <main+0x5f0>
			}
		}
		if (HAL_GetTick() - timestamp1 >= 10) {
 8008260:	f002 f8ec 	bl	800a43c <HAL_GetTick>
 8008264:	4602      	mov	r2, r0
 8008266:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	2b09      	cmp	r3, #9
 800826e:	d919      	bls.n	80082a4 <main+0x68c>
			/*
			 * UART
			 */
			timestamp1 = HAL_GetTick();
 8008270:	f002 f8e4 	bl	800a43c <HAL_GetTick>
 8008274:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
			ARMsProtocol_FUNC_Interface();
 8008278:	f7f8 fb42 	bl	8000900 <ARMsProtocol_FUNC_Interface>
			if (servo_flag){
 800827c:	4ba1      	ldr	r3, [pc, #644]	; (8008504 <main+0x8ec>)
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00f      	beq.n	80082a4 <main+0x68c>
				/*
				 * Set Servo Degree
				 */
				servo_set_degree(&servo_motor, servo_degree);
 8008284:	4ba0      	ldr	r3, [pc, #640]	; (8008508 <main+0x8f0>)
 8008286:	ed93 7b00 	vldr	d7, [r3]
 800828a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800828e:	edc7 7a01 	vstr	s15, [r7, #4]
 8008292:	793b      	ldrb	r3, [r7, #4]
 8008294:	b2db      	uxtb	r3, r3
 8008296:	4619      	mov	r1, r3
 8008298:	489c      	ldr	r0, [pc, #624]	; (800850c <main+0x8f4>)
 800829a:	f7fe fb85 	bl	80069a8 <servo_set_degree>
				servo_flag = 0;
 800829e:	4b99      	ldr	r3, [pc, #612]	; (8008504 <main+0x8ec>)
 80082a0:	2200      	movs	r2, #0
 80082a2:	701a      	strb	r2, [r3, #0]
			}
		}
		if (HAL_GetTick() - timestamp2 >= 2) {
 80082a4:	f002 f8ca 	bl	800a43c <HAL_GetTick>
 80082a8:	4602      	mov	r2, r0
 80082aa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80082ae:	1ad3      	subs	r3, r2, r3
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	f240 80b1 	bls.w	8008418 <main+0x800>
			/*
			 * Read Encoders
			 */
			timestamp2 = HAL_GetTick();
 80082b6:	f002 f8c1 	bl	800a43c <HAL_GetTick>
 80082ba:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
			rep = HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
			encoder_unwrap_value[j_num] = 0;
 80082c4:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 80082c8:	009b      	lsls	r3, r3, #2
 80082ca:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80082ce:	4413      	add	r3, r2
 80082d0:	2200      	movs	r2, #0
 80082d2:	f843 2c54 	str.w	r2, [r3, #-84]
			while (1) {
				AMT21_read_value(&(encoders[j_num]));
 80082d6:	f997 219b 	ldrsb.w	r2, [r7, #411]	; 0x19b
 80082da:	4613      	mov	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4413      	add	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4a8b      	ldr	r2, [pc, #556]	; (8008510 <main+0x8f8>)
 80082e4:	4413      	add	r3, r2
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7f8 fa0f 	bl	800070a <AMT21_read_value>
				rep = AMT21_check_value(&(encoders[j_num]));
 80082ec:	f997 219b 	ldrsb.w	r2, [r7, #411]	; 0x19b
 80082f0:	4613      	mov	r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4a85      	ldr	r2, [pc, #532]	; (8008510 <main+0x8f8>)
 80082fa:	4413      	add	r3, r2
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7f8 fa43 	bl	8000788 <AMT21_check_value>
 8008302:	4603      	mov	r3, r0
 8008304:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
				if (rep == HAL_OK) {
 8008308:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1e2      	bne.n	80082d6 <main+0x6be>
					encoder_unwrap_value[j_num] = AMT21_unwrap(
							(int32_t) encoders[j_num].position,
 8008310:	f997 219b 	ldrsb.w	r2, [r7, #411]	; 0x19b
 8008314:	497e      	ldr	r1, [pc, #504]	; (8008510 <main+0x8f8>)
 8008316:	4613      	mov	r3, r2
 8008318:	009b      	lsls	r3, r3, #2
 800831a:	4413      	add	r3, r2
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	440b      	add	r3, r1
 8008320:	330e      	adds	r3, #14
 8008322:	881b      	ldrh	r3, [r3, #0]
					encoder_unwrap_value[j_num] = AMT21_unwrap(
 8008324:	4618      	mov	r0, r3
							(int32_t) encoders[j_num].prev_position);
 8008326:	f997 219b 	ldrsb.w	r2, [r7, #411]	; 0x19b
 800832a:	4979      	ldr	r1, [pc, #484]	; (8008510 <main+0x8f8>)
 800832c:	4613      	mov	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4413      	add	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	440b      	add	r3, r1
 8008336:	3310      	adds	r3, #16
 8008338:	881b      	ldrh	r3, [r3, #0]
					encoder_unwrap_value[j_num] = AMT21_unwrap(
 800833a:	f997 419b 	ldrsb.w	r4, [r7, #411]	; 0x19b
 800833e:	4619      	mov	r1, r3
 8008340:	f7f8 fa84 	bl	800084c <AMT21_unwrap>
 8008344:	4602      	mov	r2, r0
 8008346:	00a3      	lsls	r3, r4, #2
 8008348:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 800834c:	440b      	add	r3, r1
 800834e:	f843 2c54 	str.w	r2, [r3, #-84]
					encoders[j_num].prev_position = encoders[j_num].position;
 8008352:	f997 119b 	ldrsb.w	r1, [r7, #411]	; 0x19b
 8008356:	f997 219b 	ldrsb.w	r2, [r7, #411]	; 0x19b
 800835a:	486d      	ldr	r0, [pc, #436]	; (8008510 <main+0x8f8>)
 800835c:	460b      	mov	r3, r1
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	440b      	add	r3, r1
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	4403      	add	r3, r0
 8008366:	330e      	adds	r3, #14
 8008368:	8818      	ldrh	r0, [r3, #0]
 800836a:	4969      	ldr	r1, [pc, #420]	; (8008510 <main+0x8f8>)
 800836c:	4613      	mov	r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	440b      	add	r3, r1
 8008376:	3310      	adds	r3, #16
 8008378:	4602      	mov	r2, r0
 800837a:	801a      	strh	r2, [r3, #0]
					break;
 800837c:	bf00      	nop
				}
			}
			if ((j_num == 0) | (j_num == 2) | (j_num == 3)) {
 800837e:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 8008382:	2b00      	cmp	r3, #0
 8008384:	bf0c      	ite	eq
 8008386:	2301      	moveq	r3, #1
 8008388:	2300      	movne	r3, #0
 800838a:	b2da      	uxtb	r2, r3
 800838c:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 8008390:	2b02      	cmp	r3, #2
 8008392:	bf0c      	ite	eq
 8008394:	2301      	moveq	r3, #1
 8008396:	2300      	movne	r3, #0
 8008398:	b2db      	uxtb	r3, r3
 800839a:	4313      	orrs	r3, r2
 800839c:	b2db      	uxtb	r3, r3
 800839e:	461a      	mov	r2, r3
 80083a0:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 80083a4:	2b03      	cmp	r3, #3
 80083a6:	bf0c      	ite	eq
 80083a8:	2301      	moveq	r3, #1
 80083aa:	2300      	movne	r3, #0
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	4313      	orrs	r3, r2
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d010      	beq.n	80083d6 <main+0x7be>
				encoder_unwrap_value[j_num] = encoder_unwrap_value[j_num] * -1;
 80083b4:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80083be:	4413      	add	r3, r2
 80083c0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80083c4:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 80083c8:	4252      	negs	r2, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	f507 71d0 	add.w	r1, r7, #416	; 0x1a0
 80083d0:	440b      	add	r3, r1
 80083d2:	f843 2c54 	str.w	r2, [r3, #-84]
			}
			encoder_config[j_num] = encoder_config[j_num]
 80083d6:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 80083da:	4a4e      	ldr	r2, [pc, #312]	; (8008514 <main+0x8fc>)
 80083dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
					+ encoder_unwrap_value[j_num];
 80083e0:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 80083ea:	4413      	add	r3, r2
 80083ec:	f853 2c54 	ldr.w	r2, [r3, #-84]
			encoder_config[j_num] = encoder_config[j_num]
 80083f0:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
					+ encoder_unwrap_value[j_num];
 80083f4:	440a      	add	r2, r1
			encoder_config[j_num] = encoder_config[j_num]
 80083f6:	4947      	ldr	r1, [pc, #284]	; (8008514 <main+0x8fc>)
 80083f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			j_num++;
 80083fc:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 8008400:	b2db      	uxtb	r3, r3
 8008402:	3301      	adds	r3, #1
 8008404:	b2db      	uxtb	r3, r3
 8008406:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
			if (j_num == 5) {
 800840a:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 800840e:	2b05      	cmp	r3, #5
 8008410:	d102      	bne.n	8008418 <main+0x800>
				j_num = 0;
 8008412:	2300      	movs	r3, #0
 8008414:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
			}
		}
		if (HAL_GetTick() - timestamp3 >= 10) {
 8008418:	f002 f810 	bl	800a43c <HAL_GetTick>
 800841c:	4602      	mov	r2, r0
 800841e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	2b09      	cmp	r3, #9
 8008426:	f67f ae46 	bls.w	80080b6 <main+0x49e>
			/*
			 * Control Loop
			 */
			timestamp3 = HAL_GetTick();
 800842a:	f002 f807 	bl	800a43c <HAL_GetTick>
 800842e:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
			if (quintic_trajectory[0].is_end) {
 8008432:	4b39      	ldr	r3, [pc, #228]	; (8008518 <main+0x900>)
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	f000 80bf 	beq.w	80085ba <main+0x9a2>
				if (traj_buf == 0) {
 800843c:	f997 318b 	ldrsb.w	r3, [r7, #395]	; 0x18b
 8008440:	2b00      	cmp	r3, #0
 8008442:	d153      	bne.n	80084ec <main+0x8d4>
					for (int i =0; i <5 ;i ++){
 8008444:	2300      	movs	r3, #0
 8008446:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800844a:	e047      	b.n	80084dc <main+0x8c4>
						QuinticTrajectory_cal_and_set_coeff(&(quintic_trajectory[i]), q0[i], q1[i], v0[i], v1[i], ac0[i], ac1[i], tf);
 800844c:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8008450:	4613      	mov	r3, r2
 8008452:	005b      	lsls	r3, r3, #1
 8008454:	4413      	add	r3, r2
 8008456:	015b      	lsls	r3, r3, #5
 8008458:	4a2f      	ldr	r2, [pc, #188]	; (8008518 <main+0x900>)
 800845a:	1899      	adds	r1, r3, r2
 800845c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8008460:	00db      	lsls	r3, r3, #3
 8008462:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8008466:	4413      	add	r3, r2
 8008468:	3b80      	subs	r3, #128	; 0x80
 800846a:	ed93 7b00 	vldr	d7, [r3]
 800846e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8008472:	00db      	lsls	r3, r3, #3
 8008474:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8008478:	4413      	add	r3, r2
 800847a:	3ba8      	subs	r3, #168	; 0xa8
 800847c:	ed93 1b00 	vldr	d1, [r3]
 8008480:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8008484:	00db      	lsls	r3, r3, #3
 8008486:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800848a:	4413      	add	r3, r2
 800848c:	3bd0      	subs	r3, #208	; 0xd0
 800848e:	ed93 2b00 	vldr	d2, [r3]
 8008492:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8008496:	00db      	lsls	r3, r3, #3
 8008498:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800849c:	4413      	add	r3, r2
 800849e:	3bf8      	subs	r3, #248	; 0xf8
 80084a0:	ed93 3b00 	vldr	d3, [r3]
 80084a4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80084a8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80084ac:	00db      	lsls	r3, r3, #3
 80084ae:	4413      	add	r3, r2
 80084b0:	ed93 4b00 	vldr	d4, [r3]
 80084b4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80084b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80084bc:	00db      	lsls	r3, r3, #3
 80084be:	4413      	add	r3, r2
 80084c0:	ed93 5b00 	vldr	d5, [r3]
 80084c4:	ed97 6b58 	vldr	d6, [r7, #352]	; 0x160
 80084c8:	eeb0 0b47 	vmov.f64	d0, d7
 80084cc:	4608      	mov	r0, r1
 80084ce:	f7fe fce1 	bl	8006e94 <QuinticTrajectory_cal_and_set_coeff>
					for (int i =0; i <5 ;i ++){
 80084d2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80084d6:	3301      	adds	r3, #1
 80084d8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80084dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80084e0:	2b04      	cmp	r3, #4
 80084e2:	ddb3      	ble.n	800844c <main+0x834>
					}
					traj_buf = 1;
 80084e4:	2301      	movs	r3, #1
 80084e6:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
 80084ea:	e066      	b.n	80085ba <main+0x9a2>
				} else if (traj_buf == 1) {
 80084ec:	f997 318b 	ldrsb.w	r3, [r7, #395]	; 0x18b
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d162      	bne.n	80085ba <main+0x9a2>
					for (int i =0; i <5 ;i ++){
 80084f4:	2300      	movs	r3, #0
 80084f6:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80084fa:	e057      	b.n	80085ac <main+0x994>
 80084fc:	240002d0 	.word	0x240002d0
 8008500:	24000208 	.word	0x24000208
 8008504:	24000230 	.word	0x24000230
 8008508:	24000238 	.word	0x24000238
 800850c:	24000788 	.word	0x24000788
 8008510:	24000794 	.word	0x24000794
 8008514:	24000240 	.word	0x24000240
 8008518:	24000508 	.word	0x24000508
						QuinticTrajectory_cal_and_set_coeff(&(quintic_trajectory[i]), q1[i], q0[i], v0[i], v1[i], ac0[i], ac1[i], tf);
 800851c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8008520:	4613      	mov	r3, r2
 8008522:	005b      	lsls	r3, r3, #1
 8008524:	4413      	add	r3, r2
 8008526:	015b      	lsls	r3, r3, #5
 8008528:	4a9d      	ldr	r2, [pc, #628]	; (80087a0 <main+0xb88>)
 800852a:	1899      	adds	r1, r3, r2
 800852c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8008530:	00db      	lsls	r3, r3, #3
 8008532:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8008536:	4413      	add	r3, r2
 8008538:	3ba8      	subs	r3, #168	; 0xa8
 800853a:	ed93 7b00 	vldr	d7, [r3]
 800853e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8008542:	00db      	lsls	r3, r3, #3
 8008544:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8008548:	4413      	add	r3, r2
 800854a:	3b80      	subs	r3, #128	; 0x80
 800854c:	ed93 1b00 	vldr	d1, [r3]
 8008550:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8008554:	00db      	lsls	r3, r3, #3
 8008556:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800855a:	4413      	add	r3, r2
 800855c:	3bd0      	subs	r3, #208	; 0xd0
 800855e:	ed93 2b00 	vldr	d2, [r3]
 8008562:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8008566:	00db      	lsls	r3, r3, #3
 8008568:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800856c:	4413      	add	r3, r2
 800856e:	3bf8      	subs	r3, #248	; 0xf8
 8008570:	ed93 3b00 	vldr	d3, [r3]
 8008574:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8008578:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800857c:	00db      	lsls	r3, r3, #3
 800857e:	4413      	add	r3, r2
 8008580:	ed93 4b00 	vldr	d4, [r3]
 8008584:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008588:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800858c:	00db      	lsls	r3, r3, #3
 800858e:	4413      	add	r3, r2
 8008590:	ed93 5b00 	vldr	d5, [r3]
 8008594:	ed97 6b58 	vldr	d6, [r7, #352]	; 0x160
 8008598:	eeb0 0b47 	vmov.f64	d0, d7
 800859c:	4608      	mov	r0, r1
 800859e:	f7fe fc79 	bl	8006e94 <QuinticTrajectory_cal_and_set_coeff>
					for (int i =0; i <5 ;i ++){
 80085a2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80085a6:	3301      	adds	r3, #1
 80085a8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80085ac:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80085b0:	2b04      	cmp	r3, #4
 80085b2:	ddb3      	ble.n	800851c <main+0x904>
					}
					traj_buf = 0;
 80085b4:	2300      	movs	r3, #0
 80085b6:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
				}
			}
			motor_config[0] = ((2 * M_PI * encoder_config[0]) / 16384.0)
 80085ba:	4b7a      	ldr	r3, [pc, #488]	; (80087a4 <main+0xb8c>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	ee07 3a90 	vmov	s15, r3
 80085c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80085c6:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8008780 <main+0xb68>
 80085ca:	ee27 6b06 	vmul.f64	d6, d7, d6
 80085ce:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 8008788 <main+0xb70>
 80085d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
					* (25.0 / 9.0);
 80085d6:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8008790 <main+0xb78>
 80085da:	ee27 7b06 	vmul.f64	d7, d7, d6
			motor_config[0] = ((2 * M_PI * encoder_config[0]) / 16384.0)
 80085de:	4b72      	ldr	r3, [pc, #456]	; (80087a8 <main+0xb90>)
 80085e0:	ed83 7b00 	vstr	d7, [r3]
			motor_config[1] = ((2 * M_PI * encoder_config[1]) / 16384.0) * 27.0;
 80085e4:	4b6f      	ldr	r3, [pc, #444]	; (80087a4 <main+0xb8c>)
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	ee07 3a90 	vmov	s15, r3
 80085ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80085f0:	ed9f 6b63 	vldr	d6, [pc, #396]	; 8008780 <main+0xb68>
 80085f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80085f8:	ed9f 5b63 	vldr	d5, [pc, #396]	; 8008788 <main+0xb70>
 80085fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008600:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8008604:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008608:	4b67      	ldr	r3, [pc, #412]	; (80087a8 <main+0xb90>)
 800860a:	ed83 7b02 	vstr	d7, [r3, #8]
			motor_config[2] = 22.5
					* sin((2 * M_PI * encoder_config[2]) / 16384.0);
 800860e:	4b65      	ldr	r3, [pc, #404]	; (80087a4 <main+0xb8c>)
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	ee07 3a90 	vmov	s15, r3
 8008616:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800861a:	ed9f 6b59 	vldr	d6, [pc, #356]	; 8008780 <main+0xb68>
 800861e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008622:	ed9f 5b59 	vldr	d5, [pc, #356]	; 8008788 <main+0xb70>
 8008626:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800862a:	eeb0 0b46 	vmov.f64	d0, d6
 800862e:	f00e fe93 	bl	8017358 <sin>
 8008632:	eeb0 7b40 	vmov.f64	d7, d0
 8008636:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8008798 <main+0xb80>
 800863a:	ee27 7b06 	vmul.f64	d7, d7, d6
			motor_config[2] = 22.5
 800863e:	4b5a      	ldr	r3, [pc, #360]	; (80087a8 <main+0xb90>)
 8008640:	ed83 7b04 	vstr	d7, [r3, #16]
			motor_config[3] = (2 * M_PI * encoder_config[3]) / 16384.0; //checked
 8008644:	4b57      	ldr	r3, [pc, #348]	; (80087a4 <main+0xb8c>)
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	ee07 3a90 	vmov	s15, r3
 800864c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008650:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8008780 <main+0xb68>
 8008654:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008658:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 8008788 <main+0xb70>
 800865c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008660:	4b51      	ldr	r3, [pc, #324]	; (80087a8 <main+0xb90>)
 8008662:	ed83 7b06 	vstr	d7, [r3, #24]
			motor_config[4] = (2 * M_PI * encoder_config[4]) / 16384.0; //checked
 8008666:	4b4f      	ldr	r3, [pc, #316]	; (80087a4 <main+0xb8c>)
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	ee07 3a90 	vmov	s15, r3
 800866e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008672:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8008780 <main+0xb68>
 8008676:	ee27 6b06 	vmul.f64	d6, d7, d6
 800867a:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8008788 <main+0xb70>
 800867e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008682:	4b49      	ldr	r3, [pc, #292]	; (80087a8 <main+0xb90>)
 8008684:	ed83 7b08 	vstr	d7, [r3, #32]
			/*
			 * Trajectory Update
			 */
			for (int i = 0; i <5; i++){
 8008688:	2300      	movs	r3, #0
 800868a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800868e:	e015      	b.n	80086bc <main+0xaa4>
//				QuinticTrajectory_update(&(quintic_trajectory[i]));
//				desired_position[i] = quintic_trajectory[i].pos_out;
//				desired_velocity[i] = quintic_trajectory[i].vel_out;
				KalmanFilter_Update(&(kalman_filter[i]), motor_config[i]);
 8008690:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8008694:	019b      	lsls	r3, r3, #6
 8008696:	4a45      	ldr	r2, [pc, #276]	; (80087ac <main+0xb94>)
 8008698:	441a      	add	r2, r3
 800869a:	4943      	ldr	r1, [pc, #268]	; (80087a8 <main+0xb90>)
 800869c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80086a0:	00db      	lsls	r3, r3, #3
 80086a2:	440b      	add	r3, r1
 80086a4:	ed93 7b00 	vldr	d7, [r3]
 80086a8:	eeb0 0b47 	vmov.f64	d0, d7
 80086ac:	4610      	mov	r0, r2
 80086ae:	f7f8 ff0f 	bl	80014d0 <KalmanFilter_Update>
			for (int i = 0; i <5; i++){
 80086b2:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80086b6:	3301      	adds	r3, #1
 80086b8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80086bc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80086c0:	2b04      	cmp	r3, #4
 80086c2:	dde5      	ble.n	8008690 <main+0xa78>
//				}
//			}
			/*
			 * Cascade Controller
			 */
			for (int i = 0	; i < 5; i++) {
 80086c4:	2300      	movs	r3, #0
 80086c6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80086ca:	e034      	b.n	8008736 <main+0xb1e>
				cascade_out[i] = Cascade_PIDController_update(&(position_pid_controller[i]),
 80086cc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80086d0:	2268      	movs	r2, #104	; 0x68
 80086d2:	fb02 f303 	mul.w	r3, r2, r3
 80086d6:	4a36      	ldr	r2, [pc, #216]	; (80087b0 <main+0xb98>)
 80086d8:	1898      	adds	r0, r3, r2
 80086da:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80086de:	2268      	movs	r2, #104	; 0x68
 80086e0:	fb02 f303 	mul.w	r3, r2, r3
 80086e4:	4a33      	ldr	r2, [pc, #204]	; (80087b4 <main+0xb9c>)
 80086e6:	1899      	adds	r1, r3, r2
 80086e8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80086ec:	019b      	lsls	r3, r3, #6
 80086ee:	4a2f      	ldr	r2, [pc, #188]	; (80087ac <main+0xb94>)
 80086f0:	441a      	add	r2, r3
 80086f2:	4c31      	ldr	r4, [pc, #196]	; (80087b8 <main+0xba0>)
 80086f4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80086f8:	00db      	lsls	r3, r3, #3
 80086fa:	4423      	add	r3, r4
 80086fc:	ed93 7b00 	vldr	d7, [r3]
 8008700:	4c2e      	ldr	r4, [pc, #184]	; (80087bc <main+0xba4>)
 8008702:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8008706:	00db      	lsls	r3, r3, #3
 8008708:	4423      	add	r3, r4
 800870a:	ed93 6b00 	vldr	d6, [r3]
 800870e:	eeb0 1b46 	vmov.f64	d1, d6
 8008712:	eeb0 0b47 	vmov.f64	d0, d7
 8008716:	f7fe fb2e 	bl	8006d76 <Cascade_PIDController_update>
 800871a:	eeb0 7b40 	vmov.f64	d7, d0
 800871e:	4a28      	ldr	r2, [pc, #160]	; (80087c0 <main+0xba8>)
 8008720:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8008724:	00db      	lsls	r3, r3, #3
 8008726:	4413      	add	r3, r2
 8008728:	ed83 7b00 	vstr	d7, [r3]
			for (int i = 0	; i < 5; i++) {
 800872c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8008730:	3301      	adds	r3, #1
 8008732:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8008736:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800873a:	2b04      	cmp	r3, #4
 800873c:	ddc6      	ble.n	80086cc <main+0xab4>
						&(velocity_pid_controller[i]),
						&(kalman_filter[i]), desired_position[i],
						desired_velocity[i]);
			}
			for (int i = 0; i < 5; i++) {
 800873e:	2300      	movs	r3, #0
 8008740:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8008744:	e015      	b.n	8008772 <main+0xb5a>
				stepper_set_speed(&steppers[i], cascade_out[i]);
 8008746:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800874a:	015b      	lsls	r3, r3, #5
 800874c:	4a1d      	ldr	r2, [pc, #116]	; (80087c4 <main+0xbac>)
 800874e:	441a      	add	r2, r3
 8008750:	491b      	ldr	r1, [pc, #108]	; (80087c0 <main+0xba8>)
 8008752:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8008756:	00db      	lsls	r3, r3, #3
 8008758:	440b      	add	r3, r1
 800875a:	ed93 7b00 	vldr	d7, [r3]
 800875e:	eeb0 0b47 	vmov.f64	d0, d7
 8008762:	4610      	mov	r0, r2
 8008764:	f7fe f964 	bl	8006a30 <stepper_set_speed>
			for (int i = 0; i < 5; i++) {
 8008768:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800876c:	3301      	adds	r3, #1
 800876e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8008772:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8008776:	2b04      	cmp	r3, #4
 8008778:	dde5      	ble.n	8008746 <main+0xb2e>
		if ((delta_khe[0] != 0)||
 800877a:	e49c      	b.n	80080b6 <main+0x49e>
 800877c:	f3af 8000 	nop.w
 8008780:	54442d18 	.word	0x54442d18
 8008784:	401921fb 	.word	0x401921fb
 8008788:	00000000 	.word	0x00000000
 800878c:	40d00000 	.word	0x40d00000
 8008790:	8e38e38e 	.word	0x8e38e38e
 8008794:	400638e3 	.word	0x400638e3
 8008798:	00000000 	.word	0x00000000
 800879c:	40368000 	.word	0x40368000
 80087a0:	24000508 	.word	0x24000508
 80087a4:	24000240 	.word	0x24000240
 80087a8:	240002a8 	.word	0x240002a8
 80087ac:	24000a00 	.word	0x24000a00
 80087b0:	24000b40 	.word	0x24000b40
 80087b4:	240007f8 	.word	0x240007f8
 80087b8:	24000208 	.word	0x24000208
 80087bc:	24000280 	.word	0x24000280
 80087c0:	24000258 	.word	0x24000258
 80087c4:	240006e8 	.word	0x240006e8

080087c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b09c      	sub	sp, #112	; 0x70
 80087cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80087ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087d2:	224c      	movs	r2, #76	; 0x4c
 80087d4:	2100      	movs	r1, #0
 80087d6:	4618      	mov	r0, r3
 80087d8:	f00b fe34 	bl	8014444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80087dc:	1d3b      	adds	r3, r7, #4
 80087de:	2220      	movs	r2, #32
 80087e0:	2100      	movs	r1, #0
 80087e2:	4618      	mov	r0, r3
 80087e4:	f00b fe2e 	bl	8014444 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80087e8:	2002      	movs	r0, #2
 80087ea:	f004 fbd3 	bl	800cf94 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80087ee:	2300      	movs	r3, #0
 80087f0:	603b      	str	r3, [r7, #0]
 80087f2:	4b30      	ldr	r3, [pc, #192]	; (80088b4 <SystemClock_Config+0xec>)
 80087f4:	699b      	ldr	r3, [r3, #24]
 80087f6:	4a2f      	ldr	r2, [pc, #188]	; (80088b4 <SystemClock_Config+0xec>)
 80087f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80087fc:	6193      	str	r3, [r2, #24]
 80087fe:	4b2d      	ldr	r3, [pc, #180]	; (80088b4 <SystemClock_Config+0xec>)
 8008800:	699b      	ldr	r3, [r3, #24]
 8008802:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008806:	603b      	str	r3, [r7, #0]
 8008808:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800880a:	bf00      	nop
 800880c:	4b29      	ldr	r3, [pc, #164]	; (80088b4 <SystemClock_Config+0xec>)
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008814:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008818:	d1f8      	bne.n	800880c <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800881a:	4b27      	ldr	r3, [pc, #156]	; (80088b8 <SystemClock_Config+0xf0>)
 800881c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800881e:	f023 0303 	bic.w	r3, r3, #3
 8008822:	4a25      	ldr	r2, [pc, #148]	; (80088b8 <SystemClock_Config+0xf0>)
 8008824:	f043 0302 	orr.w	r3, r3, #2
 8008828:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800882a:	2301      	movs	r3, #1
 800882c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800882e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008832:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008834:	2302      	movs	r3, #2
 8008836:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008838:	2302      	movs	r3, #2
 800883a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800883c:	2302      	movs	r3, #2
 800883e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8008840:	232c      	movs	r3, #44	; 0x2c
 8008842:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8008844:	2301      	movs	r3, #1
 8008846:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8008848:	2303      	movs	r3, #3
 800884a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800884c:	2302      	movs	r3, #2
 800884e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8008850:	230c      	movs	r3, #12
 8008852:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8008854:	2300      	movs	r3, #0
 8008856:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8008858:	2300      	movs	r3, #0
 800885a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800885c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008860:	4618      	mov	r0, r3
 8008862:	f004 fbd1 	bl	800d008 <HAL_RCC_OscConfig>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d001      	beq.n	8008870 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800886c:	f000 f853 	bl	8008916 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008870:	233f      	movs	r3, #63	; 0x3f
 8008872:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008874:	2303      	movs	r3, #3
 8008876:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8008878:	2300      	movs	r3, #0
 800887a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800887c:	2308      	movs	r3, #8
 800887e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8008880:	2340      	movs	r3, #64	; 0x40
 8008882:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8008884:	2340      	movs	r3, #64	; 0x40
 8008886:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8008888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800888c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800888e:	2340      	movs	r3, #64	; 0x40
 8008890:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8008892:	1d3b      	adds	r3, r7, #4
 8008894:	2103      	movs	r1, #3
 8008896:	4618      	mov	r0, r3
 8008898:	f004 ff62 	bl	800d760 <HAL_RCC_ClockConfig>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80088a2:	f000 f838 	bl	8008916 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80088a6:	f005 f911 	bl	800dacc <HAL_RCC_EnableCSS>
}
 80088aa:	bf00      	nop
 80088ac:	3770      	adds	r7, #112	; 0x70
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}
 80088b2:	bf00      	nop
 80088b4:	58024800 	.word	0x58024800
 80088b8:	58024400 	.word	0x58024400

080088bc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b0ae      	sub	sp, #184	; 0xb8
 80088c0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80088c2:	1d3b      	adds	r3, r7, #4
 80088c4:	22b4      	movs	r2, #180	; 0xb4
 80088c6:	2100      	movs	r1, #0
 80088c8:	4618      	mov	r0, r3
 80088ca:	f00b fdbb 	bl	8014444 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80088ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80088d2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80088d4:	2302      	movs	r3, #2
 80088d6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 80088d8:	230f      	movs	r3, #15
 80088da:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80088dc:	2302      	movs	r3, #2
 80088de:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80088e0:	2302      	movs	r3, #2
 80088e2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80088e4:	2302      	movs	r3, #2
 80088e6:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80088e8:	23c0      	movs	r3, #192	; 0xc0
 80088ea:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80088ec:	2300      	movs	r3, #0
 80088ee:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 80088f0:	f640 3386 	movw	r3, #2950	; 0xb86
 80088f4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80088f6:	2300      	movs	r3, #0
 80088f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80088fc:	1d3b      	adds	r3, r7, #4
 80088fe:	4618      	mov	r0, r3
 8008900:	f005 fae6 	bl	800ded0 <HAL_RCCEx_PeriphCLKConfig>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 800890a:	f000 f804 	bl	8008916 <Error_Handler>
  }
}
 800890e:	bf00      	nop
 8008910:	37b8      	adds	r7, #184	; 0xb8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008916:	b480      	push	{r7}
 8008918:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800891a:	b672      	cpsid	i
}
 800891c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800891e:	e7fe      	b.n	800891e <Error_Handler+0x8>

08008920 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8008924:	4b27      	ldr	r3, [pc, #156]	; (80089c4 <MX_SPI3_Init+0xa4>)
 8008926:	4a28      	ldr	r2, [pc, #160]	; (80089c8 <MX_SPI3_Init+0xa8>)
 8008928:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800892a:	4b26      	ldr	r3, [pc, #152]	; (80089c4 <MX_SPI3_Init+0xa4>)
 800892c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8008930:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008932:	4b24      	ldr	r3, [pc, #144]	; (80089c4 <MX_SPI3_Init+0xa4>)
 8008934:	2200      	movs	r2, #0
 8008936:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8008938:	4b22      	ldr	r3, [pc, #136]	; (80089c4 <MX_SPI3_Init+0xa4>)
 800893a:	2203      	movs	r2, #3
 800893c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800893e:	4b21      	ldr	r3, [pc, #132]	; (80089c4 <MX_SPI3_Init+0xa4>)
 8008940:	2200      	movs	r2, #0
 8008942:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008944:	4b1f      	ldr	r3, [pc, #124]	; (80089c4 <MX_SPI3_Init+0xa4>)
 8008946:	2200      	movs	r2, #0
 8008948:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800894a:	4b1e      	ldr	r3, [pc, #120]	; (80089c4 <MX_SPI3_Init+0xa4>)
 800894c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008950:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008952:	4b1c      	ldr	r3, [pc, #112]	; (80089c4 <MX_SPI3_Init+0xa4>)
 8008954:	2200      	movs	r2, #0
 8008956:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008958:	4b1a      	ldr	r3, [pc, #104]	; (80089c4 <MX_SPI3_Init+0xa4>)
 800895a:	2200      	movs	r2, #0
 800895c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800895e:	4b19      	ldr	r3, [pc, #100]	; (80089c4 <MX_SPI3_Init+0xa4>)
 8008960:	2200      	movs	r2, #0
 8008962:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008964:	4b17      	ldr	r3, [pc, #92]	; (80089c4 <MX_SPI3_Init+0xa4>)
 8008966:	2200      	movs	r2, #0
 8008968:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800896a:	4b16      	ldr	r3, [pc, #88]	; (80089c4 <MX_SPI3_Init+0xa4>)
 800896c:	2200      	movs	r2, #0
 800896e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008970:	4b14      	ldr	r3, [pc, #80]	; (80089c4 <MX_SPI3_Init+0xa4>)
 8008972:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008976:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8008978:	4b12      	ldr	r3, [pc, #72]	; (80089c4 <MX_SPI3_Init+0xa4>)
 800897a:	2200      	movs	r2, #0
 800897c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800897e:	4b11      	ldr	r3, [pc, #68]	; (80089c4 <MX_SPI3_Init+0xa4>)
 8008980:	2200      	movs	r2, #0
 8008982:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8008984:	4b0f      	ldr	r3, [pc, #60]	; (80089c4 <MX_SPI3_Init+0xa4>)
 8008986:	2200      	movs	r2, #0
 8008988:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800898a:	4b0e      	ldr	r3, [pc, #56]	; (80089c4 <MX_SPI3_Init+0xa4>)
 800898c:	2200      	movs	r2, #0
 800898e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8008990:	4b0c      	ldr	r3, [pc, #48]	; (80089c4 <MX_SPI3_Init+0xa4>)
 8008992:	2200      	movs	r2, #0
 8008994:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8008996:	4b0b      	ldr	r3, [pc, #44]	; (80089c4 <MX_SPI3_Init+0xa4>)
 8008998:	2200      	movs	r2, #0
 800899a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800899c:	4b09      	ldr	r3, [pc, #36]	; (80089c4 <MX_SPI3_Init+0xa4>)
 800899e:	2200      	movs	r2, #0
 80089a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80089a2:	4b08      	ldr	r3, [pc, #32]	; (80089c4 <MX_SPI3_Init+0xa4>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80089a8:	4b06      	ldr	r3, [pc, #24]	; (80089c4 <MX_SPI3_Init+0xa4>)
 80089aa:	2200      	movs	r2, #0
 80089ac:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80089ae:	4805      	ldr	r0, [pc, #20]	; (80089c4 <MX_SPI3_Init+0xa4>)
 80089b0:	f007 fb20 	bl	800fff4 <HAL_SPI_Init>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d001      	beq.n	80089be <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80089ba:	f7ff ffac 	bl	8008916 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80089be:	bf00      	nop
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	24000d48 	.word	0x24000d48
 80089c8:	40003c00 	.word	0x40003c00

080089cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b0b6      	sub	sp, #216	; 0xd8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80089d8:	2200      	movs	r2, #0
 80089da:	601a      	str	r2, [r3, #0]
 80089dc:	605a      	str	r2, [r3, #4]
 80089de:	609a      	str	r2, [r3, #8]
 80089e0:	60da      	str	r2, [r3, #12]
 80089e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80089e4:	f107 0310 	add.w	r3, r7, #16
 80089e8:	22b4      	movs	r2, #180	; 0xb4
 80089ea:	2100      	movs	r1, #0
 80089ec:	4618      	mov	r0, r3
 80089ee:	f00b fd29 	bl	8014444 <memset>
  if(spiHandle->Instance==SPI3)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a25      	ldr	r2, [pc, #148]	; (8008a8c <HAL_SPI_MspInit+0xc0>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d142      	bne.n	8008a82 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80089fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a00:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8008a02:	2300      	movs	r3, #0
 8008a04:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008a06:	f107 0310 	add.w	r3, r7, #16
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f005 fa60 	bl	800ded0 <HAL_RCCEx_PeriphCLKConfig>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8008a16:	f7ff ff7e 	bl	8008916 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008a1a:	4b1d      	ldr	r3, [pc, #116]	; (8008a90 <HAL_SPI_MspInit+0xc4>)
 8008a1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008a20:	4a1b      	ldr	r2, [pc, #108]	; (8008a90 <HAL_SPI_MspInit+0xc4>)
 8008a22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008a2a:	4b19      	ldr	r3, [pc, #100]	; (8008a90 <HAL_SPI_MspInit+0xc4>)
 8008a2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a34:	60fb      	str	r3, [r7, #12]
 8008a36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a38:	4b15      	ldr	r3, [pc, #84]	; (8008a90 <HAL_SPI_MspInit+0xc4>)
 8008a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a3e:	4a14      	ldr	r2, [pc, #80]	; (8008a90 <HAL_SPI_MspInit+0xc4>)
 8008a40:	f043 0304 	orr.w	r3, r3, #4
 8008a44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008a48:	4b11      	ldr	r3, [pc, #68]	; (8008a90 <HAL_SPI_MspInit+0xc4>)
 8008a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a4e:	f003 0304 	and.w	r3, r3, #4
 8008a52:	60bb      	str	r3, [r7, #8]
 8008a54:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8008a56:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008a5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a5e:	2302      	movs	r3, #2
 8008a60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a64:	2300      	movs	r3, #0
 8008a66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008a70:	2306      	movs	r3, #6
 8008a72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a76:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	4805      	ldr	r0, [pc, #20]	; (8008a94 <HAL_SPI_MspInit+0xc8>)
 8008a7e:	f004 f8c7 	bl	800cc10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8008a82:	bf00      	nop
 8008a84:	37d8      	adds	r7, #216	; 0xd8
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	40003c00 	.word	0x40003c00
 8008a90:	58024400 	.word	0x58024400
 8008a94:	58020800 	.word	0x58020800

08008a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a9e:	4b0a      	ldr	r3, [pc, #40]	; (8008ac8 <HAL_MspInit+0x30>)
 8008aa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008aa4:	4a08      	ldr	r2, [pc, #32]	; (8008ac8 <HAL_MspInit+0x30>)
 8008aa6:	f043 0302 	orr.w	r3, r3, #2
 8008aaa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008aae:	4b06      	ldr	r3, [pc, #24]	; (8008ac8 <HAL_MspInit+0x30>)
 8008ab0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008ab4:	f003 0302 	and.w	r3, r3, #2
 8008ab8:	607b      	str	r3, [r7, #4]
 8008aba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr
 8008ac8:	58024400 	.word	0x58024400

08008acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8008ad0:	f005 f9e2 	bl	800de98 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008ad4:	e7fe      	b.n	8008ad4 <NMI_Handler+0x8>

08008ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008ada:	e7fe      	b.n	8008ada <HardFault_Handler+0x4>

08008adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008adc:	b480      	push	{r7}
 8008ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008ae0:	e7fe      	b.n	8008ae0 <MemManage_Handler+0x4>

08008ae2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008ae6:	e7fe      	b.n	8008ae6 <BusFault_Handler+0x4>

08008ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008aec:	e7fe      	b.n	8008aec <UsageFault_Handler+0x4>

08008aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008aee:	b480      	push	{r7}
 8008af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008af2:	bf00      	nop
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008afc:	b480      	push	{r7}
 8008afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008b00:	bf00      	nop
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008b0a:	b480      	push	{r7}
 8008b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008b0e:	bf00      	nop
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008b1c:	f001 fc7a 	bl	800a414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008b20:	bf00      	nop
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008b28:	4802      	ldr	r0, [pc, #8]	; (8008b34 <USART3_IRQHandler+0x10>)
 8008b2a:	f008 ff99 	bl	8011a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8008b2e:	bf00      	nop
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	24001160 	.word	0x24001160

08008b38 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b082      	sub	sp, #8
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
	__HAL_UART_FLUSH_DRREGISTER(huart);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	699a      	ldr	r2, [r3, #24]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f042 0208 	orr.w	r2, r2, #8
 8008b4e:	619a      	str	r2, [r3, #24]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	699a      	ldr	r2, [r3, #24]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f042 0210 	orr.w	r2, r2, #16
 8008b5e:	619a      	str	r2, [r3, #24]
	ARMsProtocol_FUNC_Rx_Callback(huart);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f7f7 ffad 	bl	8000ac0 <ARMsProtocol_FUNC_Rx_Callback>
}
 8008b66:	bf00      	nop
 8008b68:	3708      	adds	r7, #8
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
	...

08008b70 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
	//__HAL_UART_FLUSH_DRREGISTER(huart);
	ARMsProtocol_Data.Tx_flag = 0;
 8008b78:	4b04      	ldr	r3, [pc, #16]	; (8008b8c <HAL_UART_TxCpltCallback+0x1c>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
}
 8008b80:	bf00      	nop
 8008b82:	370c      	adds	r7, #12
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr
 8008b8c:	24000310 	.word	0x24000310

08008b90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008b90:	b480      	push	{r7}
 8008b92:	af00      	add	r7, sp, #0
	return 1;
 8008b94:	2301      	movs	r3, #1
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <_kill>:

int _kill(int pid, int sig)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008baa:	f00b fc13 	bl	80143d4 <__errno>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2216      	movs	r2, #22
 8008bb2:	601a      	str	r2, [r3, #0]
	return -1;
 8008bb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3708      	adds	r7, #8
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <_exit>:

void _exit (int status)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f7ff ffe7 	bl	8008ba0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008bd2:	e7fe      	b.n	8008bd2 <_exit+0x12>

08008bd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008be0:	2300      	movs	r3, #0
 8008be2:	617b      	str	r3, [r7, #20]
 8008be4:	e00a      	b.n	8008bfc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008be6:	f3af 8000 	nop.w
 8008bea:	4601      	mov	r1, r0
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	1c5a      	adds	r2, r3, #1
 8008bf0:	60ba      	str	r2, [r7, #8]
 8008bf2:	b2ca      	uxtb	r2, r1
 8008bf4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	617b      	str	r3, [r7, #20]
 8008bfc:	697a      	ldr	r2, [r7, #20]
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	dbf0      	blt.n	8008be6 <_read+0x12>
	}

return len;
 8008c04:	687b      	ldr	r3, [r7, #4]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3718      	adds	r7, #24
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b086      	sub	sp, #24
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	60f8      	str	r0, [r7, #12]
 8008c16:	60b9      	str	r1, [r7, #8]
 8008c18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	617b      	str	r3, [r7, #20]
 8008c1e:	e009      	b.n	8008c34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	1c5a      	adds	r2, r3, #1
 8008c24:	60ba      	str	r2, [r7, #8]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	3301      	adds	r3, #1
 8008c32:	617b      	str	r3, [r7, #20]
 8008c34:	697a      	ldr	r2, [r7, #20]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	dbf1      	blt.n	8008c20 <_write+0x12>
	}
	return len;
 8008c3c:	687b      	ldr	r3, [r7, #4]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3718      	adds	r7, #24
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <_close>:

int _close(int file)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b083      	sub	sp, #12
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
	return -1;
 8008c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	370c      	adds	r7, #12
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr

08008c5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	b083      	sub	sp, #12
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
 8008c66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008c6e:	605a      	str	r2, [r3, #4]
	return 0;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	370c      	adds	r7, #12
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <_isatty>:

int _isatty(int file)
{
 8008c7e:	b480      	push	{r7}
 8008c80:	b083      	sub	sp, #12
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
	return 1;
 8008c86:	2301      	movs	r3, #1
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
	return 0;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr
	...

08008cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b086      	sub	sp, #24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008cb8:	4a14      	ldr	r2, [pc, #80]	; (8008d0c <_sbrk+0x5c>)
 8008cba:	4b15      	ldr	r3, [pc, #84]	; (8008d10 <_sbrk+0x60>)
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008cc4:	4b13      	ldr	r3, [pc, #76]	; (8008d14 <_sbrk+0x64>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d102      	bne.n	8008cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008ccc:	4b11      	ldr	r3, [pc, #68]	; (8008d14 <_sbrk+0x64>)
 8008cce:	4a12      	ldr	r2, [pc, #72]	; (8008d18 <_sbrk+0x68>)
 8008cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008cd2:	4b10      	ldr	r3, [pc, #64]	; (8008d14 <_sbrk+0x64>)
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4413      	add	r3, r2
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d207      	bcs.n	8008cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008ce0:	f00b fb78 	bl	80143d4 <__errno>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	220c      	movs	r2, #12
 8008ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008cea:	f04f 33ff 	mov.w	r3, #4294967295
 8008cee:	e009      	b.n	8008d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008cf0:	4b08      	ldr	r3, [pc, #32]	; (8008d14 <_sbrk+0x64>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008cf6:	4b07      	ldr	r3, [pc, #28]	; (8008d14 <_sbrk+0x64>)
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4413      	add	r3, r2
 8008cfe:	4a05      	ldr	r2, [pc, #20]	; (8008d14 <_sbrk+0x64>)
 8008d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008d02:	68fb      	ldr	r3, [r7, #12]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3718      	adds	r7, #24
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	24050000 	.word	0x24050000
 8008d10:	00000400 	.word	0x00000400
 8008d14:	240002f8 	.word	0x240002f8
 8008d18:	240013b8 	.word	0x240013b8

08008d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008d20:	4b32      	ldr	r3, [pc, #200]	; (8008dec <SystemInit+0xd0>)
 8008d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d26:	4a31      	ldr	r2, [pc, #196]	; (8008dec <SystemInit+0xd0>)
 8008d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008d30:	4b2f      	ldr	r3, [pc, #188]	; (8008df0 <SystemInit+0xd4>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 030f 	and.w	r3, r3, #15
 8008d38:	2b06      	cmp	r3, #6
 8008d3a:	d807      	bhi.n	8008d4c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008d3c:	4b2c      	ldr	r3, [pc, #176]	; (8008df0 <SystemInit+0xd4>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f023 030f 	bic.w	r3, r3, #15
 8008d44:	4a2a      	ldr	r2, [pc, #168]	; (8008df0 <SystemInit+0xd4>)
 8008d46:	f043 0307 	orr.w	r3, r3, #7
 8008d4a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008d4c:	4b29      	ldr	r3, [pc, #164]	; (8008df4 <SystemInit+0xd8>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a28      	ldr	r2, [pc, #160]	; (8008df4 <SystemInit+0xd8>)
 8008d52:	f043 0301 	orr.w	r3, r3, #1
 8008d56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008d58:	4b26      	ldr	r3, [pc, #152]	; (8008df4 <SystemInit+0xd8>)
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008d5e:	4b25      	ldr	r3, [pc, #148]	; (8008df4 <SystemInit+0xd8>)
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	4924      	ldr	r1, [pc, #144]	; (8008df4 <SystemInit+0xd8>)
 8008d64:	4b24      	ldr	r3, [pc, #144]	; (8008df8 <SystemInit+0xdc>)
 8008d66:	4013      	ands	r3, r2
 8008d68:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008d6a:	4b21      	ldr	r3, [pc, #132]	; (8008df0 <SystemInit+0xd4>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 0308 	and.w	r3, r3, #8
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d007      	beq.n	8008d86 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008d76:	4b1e      	ldr	r3, [pc, #120]	; (8008df0 <SystemInit+0xd4>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f023 030f 	bic.w	r3, r3, #15
 8008d7e:	4a1c      	ldr	r2, [pc, #112]	; (8008df0 <SystemInit+0xd4>)
 8008d80:	f043 0307 	orr.w	r3, r3, #7
 8008d84:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008d86:	4b1b      	ldr	r3, [pc, #108]	; (8008df4 <SystemInit+0xd8>)
 8008d88:	2200      	movs	r2, #0
 8008d8a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008d8c:	4b19      	ldr	r3, [pc, #100]	; (8008df4 <SystemInit+0xd8>)
 8008d8e:	2200      	movs	r2, #0
 8008d90:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008d92:	4b18      	ldr	r3, [pc, #96]	; (8008df4 <SystemInit+0xd8>)
 8008d94:	2200      	movs	r2, #0
 8008d96:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008d98:	4b16      	ldr	r3, [pc, #88]	; (8008df4 <SystemInit+0xd8>)
 8008d9a:	4a18      	ldr	r2, [pc, #96]	; (8008dfc <SystemInit+0xe0>)
 8008d9c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008d9e:	4b15      	ldr	r3, [pc, #84]	; (8008df4 <SystemInit+0xd8>)
 8008da0:	4a17      	ldr	r2, [pc, #92]	; (8008e00 <SystemInit+0xe4>)
 8008da2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008da4:	4b13      	ldr	r3, [pc, #76]	; (8008df4 <SystemInit+0xd8>)
 8008da6:	4a17      	ldr	r2, [pc, #92]	; (8008e04 <SystemInit+0xe8>)
 8008da8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008daa:	4b12      	ldr	r3, [pc, #72]	; (8008df4 <SystemInit+0xd8>)
 8008dac:	2200      	movs	r2, #0
 8008dae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008db0:	4b10      	ldr	r3, [pc, #64]	; (8008df4 <SystemInit+0xd8>)
 8008db2:	4a14      	ldr	r2, [pc, #80]	; (8008e04 <SystemInit+0xe8>)
 8008db4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008db6:	4b0f      	ldr	r3, [pc, #60]	; (8008df4 <SystemInit+0xd8>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008dbc:	4b0d      	ldr	r3, [pc, #52]	; (8008df4 <SystemInit+0xd8>)
 8008dbe:	4a11      	ldr	r2, [pc, #68]	; (8008e04 <SystemInit+0xe8>)
 8008dc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008dc2:	4b0c      	ldr	r3, [pc, #48]	; (8008df4 <SystemInit+0xd8>)
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008dc8:	4b0a      	ldr	r3, [pc, #40]	; (8008df4 <SystemInit+0xd8>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a09      	ldr	r2, [pc, #36]	; (8008df4 <SystemInit+0xd8>)
 8008dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008dd2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008dd4:	4b07      	ldr	r3, [pc, #28]	; (8008df4 <SystemInit+0xd8>)
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008dda:	4b0b      	ldr	r3, [pc, #44]	; (8008e08 <SystemInit+0xec>)
 8008ddc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8008de0:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8008de2:	bf00      	nop
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	e000ed00 	.word	0xe000ed00
 8008df0:	52002000 	.word	0x52002000
 8008df4:	58024400 	.word	0x58024400
 8008df8:	eaf6ed7f 	.word	0xeaf6ed7f
 8008dfc:	02020200 	.word	0x02020200
 8008e00:	01ff0000 	.word	0x01ff0000
 8008e04:	01010280 	.word	0x01010280
 8008e08:	52004000 	.word	0x52004000

08008e0c <MX_TIM1_Init>:
TIM_HandleTypeDef htim23;
TIM_HandleTypeDef htim24;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b09c      	sub	sp, #112	; 0x70
 8008e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008e12:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008e16:	2200      	movs	r2, #0
 8008e18:	601a      	str	r2, [r3, #0]
 8008e1a:	605a      	str	r2, [r3, #4]
 8008e1c:	609a      	str	r2, [r3, #8]
 8008e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008e20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008e24:	2200      	movs	r2, #0
 8008e26:	601a      	str	r2, [r3, #0]
 8008e28:	605a      	str	r2, [r3, #4]
 8008e2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008e2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008e30:	2200      	movs	r2, #0
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	605a      	str	r2, [r3, #4]
 8008e36:	609a      	str	r2, [r3, #8]
 8008e38:	60da      	str	r2, [r3, #12]
 8008e3a:	611a      	str	r2, [r3, #16]
 8008e3c:	615a      	str	r2, [r3, #20]
 8008e3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008e40:	1d3b      	adds	r3, r7, #4
 8008e42:	2234      	movs	r2, #52	; 0x34
 8008e44:	2100      	movs	r1, #0
 8008e46:	4618      	mov	r0, r3
 8008e48:	f00b fafc 	bl	8014444 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008e4c:	4b44      	ldr	r3, [pc, #272]	; (8008f60 <MX_TIM1_Init+0x154>)
 8008e4e:	4a45      	ldr	r2, [pc, #276]	; (8008f64 <MX_TIM1_Init+0x158>)
 8008e50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5500-1;
 8008e52:	4b43      	ldr	r3, [pc, #268]	; (8008f60 <MX_TIM1_Init+0x154>)
 8008e54:	f241 527b 	movw	r2, #5499	; 0x157b
 8008e58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e5a:	4b41      	ldr	r3, [pc, #260]	; (8008f60 <MX_TIM1_Init+0x154>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8008e60:	4b3f      	ldr	r3, [pc, #252]	; (8008f60 <MX_TIM1_Init+0x154>)
 8008e62:	f242 7210 	movw	r2, #10000	; 0x2710
 8008e66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008e68:	4b3d      	ldr	r3, [pc, #244]	; (8008f60 <MX_TIM1_Init+0x154>)
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008e6e:	4b3c      	ldr	r3, [pc, #240]	; (8008f60 <MX_TIM1_Init+0x154>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008e74:	4b3a      	ldr	r3, [pc, #232]	; (8008f60 <MX_TIM1_Init+0x154>)
 8008e76:	2280      	movs	r2, #128	; 0x80
 8008e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008e7a:	4839      	ldr	r0, [pc, #228]	; (8008f60 <MX_TIM1_Init+0x154>)
 8008e7c:	f007 f9db 	bl	8010236 <HAL_TIM_Base_Init>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d001      	beq.n	8008e8a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8008e86:	f7ff fd46 	bl	8008916 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008e8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e8e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008e90:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008e94:	4619      	mov	r1, r3
 8008e96:	4832      	ldr	r0, [pc, #200]	; (8008f60 <MX_TIM1_Init+0x154>)
 8008e98:	f007 fcb6 	bl	8010808 <HAL_TIM_ConfigClockSource>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8008ea2:	f7ff fd38 	bl	8008916 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008ea6:	482e      	ldr	r0, [pc, #184]	; (8008f60 <MX_TIM1_Init+0x154>)
 8008ea8:	f007 fa1c 	bl	80102e4 <HAL_TIM_PWM_Init>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d001      	beq.n	8008eb6 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8008eb2:	f7ff fd30 	bl	8008916 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008ec2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	4825      	ldr	r0, [pc, #148]	; (8008f60 <MX_TIM1_Init+0x154>)
 8008eca:	f008 f9d5 	bl	8011278 <HAL_TIMEx_MasterConfigSynchronization>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d001      	beq.n	8008ed8 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8008ed4:	f7ff fd1f 	bl	8008916 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008ed8:	2360      	movs	r3, #96	; 0x60
 8008eda:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8008edc:	2300      	movs	r3, #0
 8008ede:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008eec:	2300      	movs	r3, #0
 8008eee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008ef4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008ef8:	2200      	movs	r2, #0
 8008efa:	4619      	mov	r1, r3
 8008efc:	4818      	ldr	r0, [pc, #96]	; (8008f60 <MX_TIM1_Init+0x154>)
 8008efe:	f007 fb6f 	bl	80105e0 <HAL_TIM_PWM_ConfigChannel>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d001      	beq.n	8008f0c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8008f08:	f7ff fd05 	bl	8008916 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008f10:	2300      	movs	r3, #0
 8008f12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008f14:	2300      	movs	r3, #0
 8008f16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008f20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008f26:	2300      	movs	r3, #0
 8008f28:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008f2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f32:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008f34:	2300      	movs	r3, #0
 8008f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008f3c:	1d3b      	adds	r3, r7, #4
 8008f3e:	4619      	mov	r1, r3
 8008f40:	4807      	ldr	r0, [pc, #28]	; (8008f60 <MX_TIM1_Init+0x154>)
 8008f42:	f008 fa35 	bl	80113b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d001      	beq.n	8008f50 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8008f4c:	f7ff fce3 	bl	8008916 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8008f50:	4803      	ldr	r0, [pc, #12]	; (8008f60 <MX_TIM1_Init+0x154>)
 8008f52:	f000 fdc3 	bl	8009adc <HAL_TIM_MspPostInit>

}
 8008f56:	bf00      	nop
 8008f58:	3770      	adds	r7, #112	; 0x70
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	24000f98 	.word	0x24000f98
 8008f64:	40010000 	.word	0x40010000

08008f68 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b08e      	sub	sp, #56	; 0x38
 8008f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008f6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f72:	2200      	movs	r2, #0
 8008f74:	601a      	str	r2, [r3, #0]
 8008f76:	605a      	str	r2, [r3, #4]
 8008f78:	609a      	str	r2, [r3, #8]
 8008f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008f7c:	f107 031c 	add.w	r3, r7, #28
 8008f80:	2200      	movs	r2, #0
 8008f82:	601a      	str	r2, [r3, #0]
 8008f84:	605a      	str	r2, [r3, #4]
 8008f86:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008f88:	463b      	mov	r3, r7
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	601a      	str	r2, [r3, #0]
 8008f8e:	605a      	str	r2, [r3, #4]
 8008f90:	609a      	str	r2, [r3, #8]
 8008f92:	60da      	str	r2, [r3, #12]
 8008f94:	611a      	str	r2, [r3, #16]
 8008f96:	615a      	str	r2, [r3, #20]
 8008f98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008f9a:	4b2e      	ldr	r3, [pc, #184]	; (8009054 <MX_TIM2_Init+0xec>)
 8008f9c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008fa0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5500- 1;
 8008fa2:	4b2c      	ldr	r3, [pc, #176]	; (8009054 <MX_TIM2_Init+0xec>)
 8008fa4:	f241 527b 	movw	r2, #5499	; 0x157b
 8008fa8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008faa:	4b2a      	ldr	r3, [pc, #168]	; (8009054 <MX_TIM2_Init+0xec>)
 8008fac:	2200      	movs	r2, #0
 8008fae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8008fb0:	4b28      	ldr	r3, [pc, #160]	; (8009054 <MX_TIM2_Init+0xec>)
 8008fb2:	f242 7210 	movw	r2, #10000	; 0x2710
 8008fb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008fb8:	4b26      	ldr	r3, [pc, #152]	; (8009054 <MX_TIM2_Init+0xec>)
 8008fba:	2200      	movs	r2, #0
 8008fbc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008fbe:	4b25      	ldr	r3, [pc, #148]	; (8009054 <MX_TIM2_Init+0xec>)
 8008fc0:	2280      	movs	r2, #128	; 0x80
 8008fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008fc4:	4823      	ldr	r0, [pc, #140]	; (8009054 <MX_TIM2_Init+0xec>)
 8008fc6:	f007 f936 	bl	8010236 <HAL_TIM_Base_Init>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d001      	beq.n	8008fd4 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8008fd0:	f7ff fca1 	bl	8008916 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008fda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008fde:	4619      	mov	r1, r3
 8008fe0:	481c      	ldr	r0, [pc, #112]	; (8009054 <MX_TIM2_Init+0xec>)
 8008fe2:	f007 fc11 	bl	8010808 <HAL_TIM_ConfigClockSource>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d001      	beq.n	8008ff0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8008fec:	f7ff fc93 	bl	8008916 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008ff0:	4818      	ldr	r0, [pc, #96]	; (8009054 <MX_TIM2_Init+0xec>)
 8008ff2:	f007 f977 	bl	80102e4 <HAL_TIM_PWM_Init>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d001      	beq.n	8009000 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8008ffc:	f7ff fc8b 	bl	8008916 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009000:	2300      	movs	r3, #0
 8009002:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009004:	2300      	movs	r3, #0
 8009006:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009008:	f107 031c 	add.w	r3, r7, #28
 800900c:	4619      	mov	r1, r3
 800900e:	4811      	ldr	r0, [pc, #68]	; (8009054 <MX_TIM2_Init+0xec>)
 8009010:	f008 f932 	bl	8011278 <HAL_TIMEx_MasterConfigSynchronization>
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d001      	beq.n	800901e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800901a:	f7ff fc7c 	bl	8008916 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800901e:	2360      	movs	r3, #96	; 0x60
 8009020:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009022:	2300      	movs	r3, #0
 8009024:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009026:	2300      	movs	r3, #0
 8009028:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800902a:	2300      	movs	r3, #0
 800902c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800902e:	463b      	mov	r3, r7
 8009030:	2200      	movs	r2, #0
 8009032:	4619      	mov	r1, r3
 8009034:	4807      	ldr	r0, [pc, #28]	; (8009054 <MX_TIM2_Init+0xec>)
 8009036:	f007 fad3 	bl	80105e0 <HAL_TIM_PWM_ConfigChannel>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d001      	beq.n	8009044 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8009040:	f7ff fc69 	bl	8008916 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8009044:	4803      	ldr	r0, [pc, #12]	; (8009054 <MX_TIM2_Init+0xec>)
 8009046:	f000 fd49 	bl	8009adc <HAL_TIM_MspPostInit>

}
 800904a:	bf00      	nop
 800904c:	3738      	adds	r7, #56	; 0x38
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	24000fe4 	.word	0x24000fe4

08009058 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b08e      	sub	sp, #56	; 0x38
 800905c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800905e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009062:	2200      	movs	r2, #0
 8009064:	601a      	str	r2, [r3, #0]
 8009066:	605a      	str	r2, [r3, #4]
 8009068:	609a      	str	r2, [r3, #8]
 800906a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800906c:	f107 031c 	add.w	r3, r7, #28
 8009070:	2200      	movs	r2, #0
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	605a      	str	r2, [r3, #4]
 8009076:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009078:	463b      	mov	r3, r7
 800907a:	2200      	movs	r2, #0
 800907c:	601a      	str	r2, [r3, #0]
 800907e:	605a      	str	r2, [r3, #4]
 8009080:	609a      	str	r2, [r3, #8]
 8009082:	60da      	str	r2, [r3, #12]
 8009084:	611a      	str	r2, [r3, #16]
 8009086:	615a      	str	r2, [r3, #20]
 8009088:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800908a:	4b2d      	ldr	r3, [pc, #180]	; (8009140 <MX_TIM3_Init+0xe8>)
 800908c:	4a2d      	ldr	r2, [pc, #180]	; (8009144 <MX_TIM3_Init+0xec>)
 800908e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5500 - 1;
 8009090:	4b2b      	ldr	r3, [pc, #172]	; (8009140 <MX_TIM3_Init+0xe8>)
 8009092:	f241 527b 	movw	r2, #5499	; 0x157b
 8009096:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009098:	4b29      	ldr	r3, [pc, #164]	; (8009140 <MX_TIM3_Init+0xe8>)
 800909a:	2200      	movs	r2, #0
 800909c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800909e:	4b28      	ldr	r3, [pc, #160]	; (8009140 <MX_TIM3_Init+0xe8>)
 80090a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80090a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80090a6:	4b26      	ldr	r3, [pc, #152]	; (8009140 <MX_TIM3_Init+0xe8>)
 80090a8:	2200      	movs	r2, #0
 80090aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80090ac:	4b24      	ldr	r3, [pc, #144]	; (8009140 <MX_TIM3_Init+0xe8>)
 80090ae:	2280      	movs	r2, #128	; 0x80
 80090b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80090b2:	4823      	ldr	r0, [pc, #140]	; (8009140 <MX_TIM3_Init+0xe8>)
 80090b4:	f007 f8bf 	bl	8010236 <HAL_TIM_Base_Init>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d001      	beq.n	80090c2 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 80090be:	f7ff fc2a 	bl	8008916 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80090c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80090c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80090cc:	4619      	mov	r1, r3
 80090ce:	481c      	ldr	r0, [pc, #112]	; (8009140 <MX_TIM3_Init+0xe8>)
 80090d0:	f007 fb9a 	bl	8010808 <HAL_TIM_ConfigClockSource>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80090da:	f7ff fc1c 	bl	8008916 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80090de:	4818      	ldr	r0, [pc, #96]	; (8009140 <MX_TIM3_Init+0xe8>)
 80090e0:	f007 f900 	bl	80102e4 <HAL_TIM_PWM_Init>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d001      	beq.n	80090ee <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80090ea:	f7ff fc14 	bl	8008916 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80090ee:	2300      	movs	r3, #0
 80090f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80090f2:	2300      	movs	r3, #0
 80090f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80090f6:	f107 031c 	add.w	r3, r7, #28
 80090fa:	4619      	mov	r1, r3
 80090fc:	4810      	ldr	r0, [pc, #64]	; (8009140 <MX_TIM3_Init+0xe8>)
 80090fe:	f008 f8bb 	bl	8011278 <HAL_TIMEx_MasterConfigSynchronization>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d001      	beq.n	800910c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8009108:	f7ff fc05 	bl	8008916 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800910c:	2360      	movs	r3, #96	; 0x60
 800910e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009110:	2300      	movs	r3, #0
 8009112:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009114:	2300      	movs	r3, #0
 8009116:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009118:	2300      	movs	r3, #0
 800911a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800911c:	463b      	mov	r3, r7
 800911e:	2200      	movs	r2, #0
 8009120:	4619      	mov	r1, r3
 8009122:	4807      	ldr	r0, [pc, #28]	; (8009140 <MX_TIM3_Init+0xe8>)
 8009124:	f007 fa5c 	bl	80105e0 <HAL_TIM_PWM_ConfigChannel>
 8009128:	4603      	mov	r3, r0
 800912a:	2b00      	cmp	r3, #0
 800912c:	d001      	beq.n	8009132 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800912e:	f7ff fbf2 	bl	8008916 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8009132:	4803      	ldr	r0, [pc, #12]	; (8009140 <MX_TIM3_Init+0xe8>)
 8009134:	f000 fcd2 	bl	8009adc <HAL_TIM_MspPostInit>

}
 8009138:	bf00      	nop
 800913a:	3738      	adds	r7, #56	; 0x38
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	24000f00 	.word	0x24000f00
 8009144:	40000400 	.word	0x40000400

08009148 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b08e      	sub	sp, #56	; 0x38
 800914c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800914e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009152:	2200      	movs	r2, #0
 8009154:	601a      	str	r2, [r3, #0]
 8009156:	605a      	str	r2, [r3, #4]
 8009158:	609a      	str	r2, [r3, #8]
 800915a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800915c:	f107 031c 	add.w	r3, r7, #28
 8009160:	2200      	movs	r2, #0
 8009162:	601a      	str	r2, [r3, #0]
 8009164:	605a      	str	r2, [r3, #4]
 8009166:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009168:	463b      	mov	r3, r7
 800916a:	2200      	movs	r2, #0
 800916c:	601a      	str	r2, [r3, #0]
 800916e:	605a      	str	r2, [r3, #4]
 8009170:	609a      	str	r2, [r3, #8]
 8009172:	60da      	str	r2, [r3, #12]
 8009174:	611a      	str	r2, [r3, #16]
 8009176:	615a      	str	r2, [r3, #20]
 8009178:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800917a:	4b2d      	ldr	r3, [pc, #180]	; (8009230 <MX_TIM4_Init+0xe8>)
 800917c:	4a2d      	ldr	r2, [pc, #180]	; (8009234 <MX_TIM4_Init+0xec>)
 800917e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5500-1;
 8009180:	4b2b      	ldr	r3, [pc, #172]	; (8009230 <MX_TIM4_Init+0xe8>)
 8009182:	f241 527b 	movw	r2, #5499	; 0x157b
 8009186:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009188:	4b29      	ldr	r3, [pc, #164]	; (8009230 <MX_TIM4_Init+0xe8>)
 800918a:	2200      	movs	r2, #0
 800918c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 800918e:	4b28      	ldr	r3, [pc, #160]	; (8009230 <MX_TIM4_Init+0xe8>)
 8009190:	f242 7210 	movw	r2, #10000	; 0x2710
 8009194:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009196:	4b26      	ldr	r3, [pc, #152]	; (8009230 <MX_TIM4_Init+0xe8>)
 8009198:	2200      	movs	r2, #0
 800919a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800919c:	4b24      	ldr	r3, [pc, #144]	; (8009230 <MX_TIM4_Init+0xe8>)
 800919e:	2280      	movs	r2, #128	; 0x80
 80091a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80091a2:	4823      	ldr	r0, [pc, #140]	; (8009230 <MX_TIM4_Init+0xe8>)
 80091a4:	f007 f847 	bl	8010236 <HAL_TIM_Base_Init>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d001      	beq.n	80091b2 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 80091ae:	f7ff fbb2 	bl	8008916 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80091b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80091b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80091bc:	4619      	mov	r1, r3
 80091be:	481c      	ldr	r0, [pc, #112]	; (8009230 <MX_TIM4_Init+0xe8>)
 80091c0:	f007 fb22 	bl	8010808 <HAL_TIM_ConfigClockSource>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d001      	beq.n	80091ce <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80091ca:	f7ff fba4 	bl	8008916 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80091ce:	4818      	ldr	r0, [pc, #96]	; (8009230 <MX_TIM4_Init+0xe8>)
 80091d0:	f007 f888 	bl	80102e4 <HAL_TIM_PWM_Init>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d001      	beq.n	80091de <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80091da:	f7ff fb9c 	bl	8008916 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80091de:	2300      	movs	r3, #0
 80091e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80091e2:	2300      	movs	r3, #0
 80091e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80091e6:	f107 031c 	add.w	r3, r7, #28
 80091ea:	4619      	mov	r1, r3
 80091ec:	4810      	ldr	r0, [pc, #64]	; (8009230 <MX_TIM4_Init+0xe8>)
 80091ee:	f008 f843 	bl	8011278 <HAL_TIMEx_MasterConfigSynchronization>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d001      	beq.n	80091fc <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80091f8:	f7ff fb8d 	bl	8008916 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80091fc:	2360      	movs	r3, #96	; 0x60
 80091fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8009200:	2300      	movs	r3, #0
 8009202:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009204:	2300      	movs	r3, #0
 8009206:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009208:	2300      	movs	r3, #0
 800920a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800920c:	463b      	mov	r3, r7
 800920e:	2200      	movs	r2, #0
 8009210:	4619      	mov	r1, r3
 8009212:	4807      	ldr	r0, [pc, #28]	; (8009230 <MX_TIM4_Init+0xe8>)
 8009214:	f007 f9e4 	bl	80105e0 <HAL_TIM_PWM_ConfigChannel>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800921e:	f7ff fb7a 	bl	8008916 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8009222:	4803      	ldr	r0, [pc, #12]	; (8009230 <MX_TIM4_Init+0xe8>)
 8009224:	f000 fc5a 	bl	8009adc <HAL_TIM_MspPostInit>

}
 8009228:	bf00      	nop
 800922a:	3738      	adds	r7, #56	; 0x38
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	24000e1c 	.word	0x24000e1c
 8009234:	40000800 	.word	0x40000800

08009238 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08c      	sub	sp, #48	; 0x30
 800923c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800923e:	f107 0320 	add.w	r3, r7, #32
 8009242:	2200      	movs	r2, #0
 8009244:	601a      	str	r2, [r3, #0]
 8009246:	605a      	str	r2, [r3, #4]
 8009248:	609a      	str	r2, [r3, #8]
 800924a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800924c:	1d3b      	adds	r3, r7, #4
 800924e:	2200      	movs	r2, #0
 8009250:	601a      	str	r2, [r3, #0]
 8009252:	605a      	str	r2, [r3, #4]
 8009254:	609a      	str	r2, [r3, #8]
 8009256:	60da      	str	r2, [r3, #12]
 8009258:	611a      	str	r2, [r3, #16]
 800925a:	615a      	str	r2, [r3, #20]
 800925c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800925e:	4b26      	ldr	r3, [pc, #152]	; (80092f8 <MX_TIM12_Init+0xc0>)
 8009260:	4a26      	ldr	r2, [pc, #152]	; (80092fc <MX_TIM12_Init+0xc4>)
 8009262:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 550 - 1;
 8009264:	4b24      	ldr	r3, [pc, #144]	; (80092f8 <MX_TIM12_Init+0xc0>)
 8009266:	f240 2225 	movw	r2, #549	; 0x225
 800926a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800926c:	4b22      	ldr	r3, [pc, #136]	; (80092f8 <MX_TIM12_Init+0xc0>)
 800926e:	2200      	movs	r2, #0
 8009270:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1 - 1;
 8009272:	4b21      	ldr	r3, [pc, #132]	; (80092f8 <MX_TIM12_Init+0xc0>)
 8009274:	2200      	movs	r2, #0
 8009276:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009278:	4b1f      	ldr	r3, [pc, #124]	; (80092f8 <MX_TIM12_Init+0xc0>)
 800927a:	2200      	movs	r2, #0
 800927c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800927e:	4b1e      	ldr	r3, [pc, #120]	; (80092f8 <MX_TIM12_Init+0xc0>)
 8009280:	2280      	movs	r2, #128	; 0x80
 8009282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8009284:	481c      	ldr	r0, [pc, #112]	; (80092f8 <MX_TIM12_Init+0xc0>)
 8009286:	f006 ffd6 	bl	8010236 <HAL_TIM_Base_Init>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8009290:	f7ff fb41 	bl	8008916 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009298:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800929a:	f107 0320 	add.w	r3, r7, #32
 800929e:	4619      	mov	r1, r3
 80092a0:	4815      	ldr	r0, [pc, #84]	; (80092f8 <MX_TIM12_Init+0xc0>)
 80092a2:	f007 fab1 	bl	8010808 <HAL_TIM_ConfigClockSource>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d001      	beq.n	80092b0 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80092ac:	f7ff fb33 	bl	8008916 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80092b0:	4811      	ldr	r0, [pc, #68]	; (80092f8 <MX_TIM12_Init+0xc0>)
 80092b2:	f007 f817 	bl	80102e4 <HAL_TIM_PWM_Init>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d001      	beq.n	80092c0 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80092bc:	f7ff fb2b 	bl	8008916 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80092c0:	2360      	movs	r3, #96	; 0x60
 80092c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500 - 1;
 80092c4:	f240 13f3 	movw	r3, #499	; 0x1f3
 80092c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80092ca:	2300      	movs	r3, #0
 80092cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80092ce:	2300      	movs	r3, #0
 80092d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80092d2:	1d3b      	adds	r3, r7, #4
 80092d4:	2200      	movs	r2, #0
 80092d6:	4619      	mov	r1, r3
 80092d8:	4807      	ldr	r0, [pc, #28]	; (80092f8 <MX_TIM12_Init+0xc0>)
 80092da:	f007 f981 	bl	80105e0 <HAL_TIM_PWM_ConfigChannel>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d001      	beq.n	80092e8 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 80092e4:	f7ff fb17 	bl	8008916 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80092e8:	4803      	ldr	r0, [pc, #12]	; (80092f8 <MX_TIM12_Init+0xc0>)
 80092ea:	f000 fbf7 	bl	8009adc <HAL_TIM_MspPostInit>

}
 80092ee:	bf00      	nop
 80092f0:	3730      	adds	r7, #48	; 0x30
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	240010c8 	.word	0x240010c8
 80092fc:	40001800 	.word	0x40001800

08009300 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8009304:	4b0e      	ldr	r3, [pc, #56]	; (8009340 <MX_TIM13_Init+0x40>)
 8009306:	4a0f      	ldr	r2, [pc, #60]	; (8009344 <MX_TIM13_Init+0x44>)
 8009308:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550 - 1;
 800930a:	4b0d      	ldr	r3, [pc, #52]	; (8009340 <MX_TIM13_Init+0x40>)
 800930c:	f240 2225 	movw	r2, #549	; 0x225
 8009310:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009312:	4b0b      	ldr	r3, [pc, #44]	; (8009340 <MX_TIM13_Init+0x40>)
 8009314:	2200      	movs	r2, #0
 8009316:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1-1;
 8009318:	4b09      	ldr	r3, [pc, #36]	; (8009340 <MX_TIM13_Init+0x40>)
 800931a:	2200      	movs	r2, #0
 800931c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800931e:	4b08      	ldr	r3, [pc, #32]	; (8009340 <MX_TIM13_Init+0x40>)
 8009320:	2200      	movs	r2, #0
 8009322:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009324:	4b06      	ldr	r3, [pc, #24]	; (8009340 <MX_TIM13_Init+0x40>)
 8009326:	2280      	movs	r2, #128	; 0x80
 8009328:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800932a:	4805      	ldr	r0, [pc, #20]	; (8009340 <MX_TIM13_Init+0x40>)
 800932c:	f006 ff83 	bl	8010236 <HAL_TIM_Base_Init>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d001      	beq.n	800933a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8009336:	f7ff faee 	bl	8008916 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800933a:	bf00      	nop
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	24000f4c 	.word	0x24000f4c
 8009344:	40001c00 	.word	0x40001c00

08009348 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b088      	sub	sp, #32
 800934c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800934e:	1d3b      	adds	r3, r7, #4
 8009350:	2200      	movs	r2, #0
 8009352:	601a      	str	r2, [r3, #0]
 8009354:	605a      	str	r2, [r3, #4]
 8009356:	609a      	str	r2, [r3, #8]
 8009358:	60da      	str	r2, [r3, #12]
 800935a:	611a      	str	r2, [r3, #16]
 800935c:	615a      	str	r2, [r3, #20]
 800935e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8009360:	4b1e      	ldr	r3, [pc, #120]	; (80093dc <MX_TIM14_Init+0x94>)
 8009362:	4a1f      	ldr	r2, [pc, #124]	; (80093e0 <MX_TIM14_Init+0x98>)
 8009364:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 8009366:	4b1d      	ldr	r3, [pc, #116]	; (80093dc <MX_TIM14_Init+0x94>)
 8009368:	f240 2225 	movw	r2, #549	; 0x225
 800936c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800936e:	4b1b      	ldr	r3, [pc, #108]	; (80093dc <MX_TIM14_Init+0x94>)
 8009370:	2200      	movs	r2, #0
 8009372:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1-1;
 8009374:	4b19      	ldr	r3, [pc, #100]	; (80093dc <MX_TIM14_Init+0x94>)
 8009376:	2200      	movs	r2, #0
 8009378:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800937a:	4b18      	ldr	r3, [pc, #96]	; (80093dc <MX_TIM14_Init+0x94>)
 800937c:	2200      	movs	r2, #0
 800937e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009380:	4b16      	ldr	r3, [pc, #88]	; (80093dc <MX_TIM14_Init+0x94>)
 8009382:	2280      	movs	r2, #128	; 0x80
 8009384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8009386:	4815      	ldr	r0, [pc, #84]	; (80093dc <MX_TIM14_Init+0x94>)
 8009388:	f006 ff55 	bl	8010236 <HAL_TIM_Base_Init>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	d001      	beq.n	8009396 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8009392:	f7ff fac0 	bl	8008916 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8009396:	4811      	ldr	r0, [pc, #68]	; (80093dc <MX_TIM14_Init+0x94>)
 8009398:	f006 ffa4 	bl	80102e4 <HAL_TIM_PWM_Init>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80093a2:	f7ff fab8 	bl	8008916 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80093a6:	2360      	movs	r3, #96	; 0x60
 80093a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 80093aa:	f240 13f3 	movw	r3, #499	; 0x1f3
 80093ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80093b0:	2300      	movs	r3, #0
 80093b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80093b4:	2300      	movs	r3, #0
 80093b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80093b8:	1d3b      	adds	r3, r7, #4
 80093ba:	2200      	movs	r2, #0
 80093bc:	4619      	mov	r1, r3
 80093be:	4807      	ldr	r0, [pc, #28]	; (80093dc <MX_TIM14_Init+0x94>)
 80093c0:	f007 f90e 	bl	80105e0 <HAL_TIM_PWM_ConfigChannel>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 80093ca:	f7ff faa4 	bl	8008916 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80093ce:	4803      	ldr	r0, [pc, #12]	; (80093dc <MX_TIM14_Init+0x94>)
 80093d0:	f000 fb84 	bl	8009adc <HAL_TIM_MspPostInit>

}
 80093d4:	bf00      	nop
 80093d6:	3720      	adds	r7, #32
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}
 80093dc:	2400107c 	.word	0x2400107c
 80093e0:	40002000 	.word	0x40002000

080093e4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b09c      	sub	sp, #112	; 0x70
 80093e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80093ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80093ee:	2200      	movs	r2, #0
 80093f0:	601a      	str	r2, [r3, #0]
 80093f2:	605a      	str	r2, [r3, #4]
 80093f4:	609a      	str	r2, [r3, #8]
 80093f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80093f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80093fc:	2200      	movs	r2, #0
 80093fe:	601a      	str	r2, [r3, #0]
 8009400:	605a      	str	r2, [r3, #4]
 8009402:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009404:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009408:	2200      	movs	r2, #0
 800940a:	601a      	str	r2, [r3, #0]
 800940c:	605a      	str	r2, [r3, #4]
 800940e:	609a      	str	r2, [r3, #8]
 8009410:	60da      	str	r2, [r3, #12]
 8009412:	611a      	str	r2, [r3, #16]
 8009414:	615a      	str	r2, [r3, #20]
 8009416:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009418:	1d3b      	adds	r3, r7, #4
 800941a:	2234      	movs	r2, #52	; 0x34
 800941c:	2100      	movs	r1, #0
 800941e:	4618      	mov	r0, r3
 8009420:	f00b f810 	bl	8014444 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8009424:	4b3f      	ldr	r3, [pc, #252]	; (8009524 <MX_TIM15_Init+0x140>)
 8009426:	4a40      	ldr	r2, [pc, #256]	; (8009528 <MX_TIM15_Init+0x144>)
 8009428:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 550 - 1;
 800942a:	4b3e      	ldr	r3, [pc, #248]	; (8009524 <MX_TIM15_Init+0x140>)
 800942c:	f240 2225 	movw	r2, #549	; 0x225
 8009430:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009432:	4b3c      	ldr	r3, [pc, #240]	; (8009524 <MX_TIM15_Init+0x140>)
 8009434:	2200      	movs	r2, #0
 8009436:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10000;
 8009438:	4b3a      	ldr	r3, [pc, #232]	; (8009524 <MX_TIM15_Init+0x140>)
 800943a:	f242 7210 	movw	r2, #10000	; 0x2710
 800943e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009440:	4b38      	ldr	r3, [pc, #224]	; (8009524 <MX_TIM15_Init+0x140>)
 8009442:	2200      	movs	r2, #0
 8009444:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8009446:	4b37      	ldr	r3, [pc, #220]	; (8009524 <MX_TIM15_Init+0x140>)
 8009448:	2200      	movs	r2, #0
 800944a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800944c:	4b35      	ldr	r3, [pc, #212]	; (8009524 <MX_TIM15_Init+0x140>)
 800944e:	2280      	movs	r2, #128	; 0x80
 8009450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8009452:	4834      	ldr	r0, [pc, #208]	; (8009524 <MX_TIM15_Init+0x140>)
 8009454:	f006 feef 	bl	8010236 <HAL_TIM_Base_Init>
 8009458:	4603      	mov	r3, r0
 800945a:	2b00      	cmp	r3, #0
 800945c:	d001      	beq.n	8009462 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 800945e:	f7ff fa5a 	bl	8008916 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009466:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8009468:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800946c:	4619      	mov	r1, r3
 800946e:	482d      	ldr	r0, [pc, #180]	; (8009524 <MX_TIM15_Init+0x140>)
 8009470:	f007 f9ca 	bl	8010808 <HAL_TIM_ConfigClockSource>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d001      	beq.n	800947e <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 800947a:	f7ff fa4c 	bl	8008916 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800947e:	4829      	ldr	r0, [pc, #164]	; (8009524 <MX_TIM15_Init+0x140>)
 8009480:	f006 ff30 	bl	80102e4 <HAL_TIM_PWM_Init>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d001      	beq.n	800948e <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 800948a:	f7ff fa44 	bl	8008916 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800948e:	2300      	movs	r3, #0
 8009490:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009492:	2300      	movs	r3, #0
 8009494:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8009496:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800949a:	4619      	mov	r1, r3
 800949c:	4821      	ldr	r0, [pc, #132]	; (8009524 <MX_TIM15_Init+0x140>)
 800949e:	f007 feeb 	bl	8011278 <HAL_TIMEx_MasterConfigSynchronization>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d001      	beq.n	80094ac <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 80094a8:	f7ff fa35 	bl	8008916 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80094ac:	2360      	movs	r3, #96	; 0x60
 80094ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80094b0:	2300      	movs	r3, #0
 80094b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80094b4:	2300      	movs	r3, #0
 80094b6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80094b8:	2300      	movs	r3, #0
 80094ba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80094bc:	2300      	movs	r3, #0
 80094be:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80094c0:	2300      	movs	r3, #0
 80094c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80094c4:	2300      	movs	r3, #0
 80094c6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80094c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80094cc:	2200      	movs	r2, #0
 80094ce:	4619      	mov	r1, r3
 80094d0:	4814      	ldr	r0, [pc, #80]	; (8009524 <MX_TIM15_Init+0x140>)
 80094d2:	f007 f885 	bl	80105e0 <HAL_TIM_PWM_ConfigChannel>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d001      	beq.n	80094e0 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 80094dc:	f7ff fa1b 	bl	8008916 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80094e0:	2300      	movs	r3, #0
 80094e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80094e4:	2300      	movs	r3, #0
 80094e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80094e8:	2300      	movs	r3, #0
 80094ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80094ec:	2300      	movs	r3, #0
 80094ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80094f0:	2300      	movs	r3, #0
 80094f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80094f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80094f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80094fa:	2300      	movs	r3, #0
 80094fc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80094fe:	2300      	movs	r3, #0
 8009500:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8009502:	1d3b      	adds	r3, r7, #4
 8009504:	4619      	mov	r1, r3
 8009506:	4807      	ldr	r0, [pc, #28]	; (8009524 <MX_TIM15_Init+0x140>)
 8009508:	f007 ff52 	bl	80113b0 <HAL_TIMEx_ConfigBreakDeadTime>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d001      	beq.n	8009516 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8009512:	f7ff fa00 	bl	8008916 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8009516:	4803      	ldr	r0, [pc, #12]	; (8009524 <MX_TIM15_Init+0x140>)
 8009518:	f000 fae0 	bl	8009adc <HAL_TIM_MspPostInit>

}
 800951c:	bf00      	nop
 800951e:	3770      	adds	r7, #112	; 0x70
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	24000e68 	.word	0x24000e68
 8009528:	40014000 	.word	0x40014000

0800952c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b094      	sub	sp, #80	; 0x50
 8009530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8009532:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009536:	2200      	movs	r2, #0
 8009538:	601a      	str	r2, [r3, #0]
 800953a:	605a      	str	r2, [r3, #4]
 800953c:	609a      	str	r2, [r3, #8]
 800953e:	60da      	str	r2, [r3, #12]
 8009540:	611a      	str	r2, [r3, #16]
 8009542:	615a      	str	r2, [r3, #20]
 8009544:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009546:	463b      	mov	r3, r7
 8009548:	2234      	movs	r2, #52	; 0x34
 800954a:	2100      	movs	r1, #0
 800954c:	4618      	mov	r0, r3
 800954e:	f00a ff79 	bl	8014444 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8009552:	4b31      	ldr	r3, [pc, #196]	; (8009618 <MX_TIM16_Init+0xec>)
 8009554:	4a31      	ldr	r2, [pc, #196]	; (800961c <MX_TIM16_Init+0xf0>)
 8009556:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 8009558:	4b2f      	ldr	r3, [pc, #188]	; (8009618 <MX_TIM16_Init+0xec>)
 800955a:	f240 2225 	movw	r2, #549	; 0x225
 800955e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009560:	4b2d      	ldr	r3, [pc, #180]	; (8009618 <MX_TIM16_Init+0xec>)
 8009562:	2200      	movs	r2, #0
 8009564:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1-1;
 8009566:	4b2c      	ldr	r3, [pc, #176]	; (8009618 <MX_TIM16_Init+0xec>)
 8009568:	2200      	movs	r2, #0
 800956a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800956c:	4b2a      	ldr	r3, [pc, #168]	; (8009618 <MX_TIM16_Init+0xec>)
 800956e:	2200      	movs	r2, #0
 8009570:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8009572:	4b29      	ldr	r3, [pc, #164]	; (8009618 <MX_TIM16_Init+0xec>)
 8009574:	2200      	movs	r2, #0
 8009576:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009578:	4b27      	ldr	r3, [pc, #156]	; (8009618 <MX_TIM16_Init+0xec>)
 800957a:	2280      	movs	r2, #128	; 0x80
 800957c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800957e:	4826      	ldr	r0, [pc, #152]	; (8009618 <MX_TIM16_Init+0xec>)
 8009580:	f006 fe59 	bl	8010236 <HAL_TIM_Base_Init>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800958a:	f7ff f9c4 	bl	8008916 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800958e:	4822      	ldr	r0, [pc, #136]	; (8009618 <MX_TIM16_Init+0xec>)
 8009590:	f006 fea8 	bl	80102e4 <HAL_TIM_PWM_Init>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800959a:	f7ff f9bc 	bl	8008916 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800959e:	2360      	movs	r3, #96	; 0x60
 80095a0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 80095a2:	f240 13f3 	movw	r3, #499	; 0x1f3
 80095a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80095a8:	2300      	movs	r3, #0
 80095aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80095ac:	2300      	movs	r3, #0
 80095ae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80095b0:	2300      	movs	r3, #0
 80095b2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80095b4:	2300      	movs	r3, #0
 80095b6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80095b8:	2300      	movs	r3, #0
 80095ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80095bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80095c0:	2200      	movs	r2, #0
 80095c2:	4619      	mov	r1, r3
 80095c4:	4814      	ldr	r0, [pc, #80]	; (8009618 <MX_TIM16_Init+0xec>)
 80095c6:	f007 f80b 	bl	80105e0 <HAL_TIM_PWM_ConfigChannel>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d001      	beq.n	80095d4 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 80095d0:	f7ff f9a1 	bl	8008916 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80095d4:	2300      	movs	r3, #0
 80095d6:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80095d8:	2300      	movs	r3, #0
 80095da:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80095dc:	2300      	movs	r3, #0
 80095de:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80095e0:	2300      	movs	r3, #0
 80095e2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80095e4:	2300      	movs	r3, #0
 80095e6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80095e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80095ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80095ee:	2300      	movs	r3, #0
 80095f0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80095f2:	2300      	movs	r3, #0
 80095f4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80095f6:	463b      	mov	r3, r7
 80095f8:	4619      	mov	r1, r3
 80095fa:	4807      	ldr	r0, [pc, #28]	; (8009618 <MX_TIM16_Init+0xec>)
 80095fc:	f007 fed8 	bl	80113b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 8009606:	f7ff f986 	bl	8008916 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800960a:	4803      	ldr	r0, [pc, #12]	; (8009618 <MX_TIM16_Init+0xec>)
 800960c:	f000 fa66 	bl	8009adc <HAL_TIM_MspPostInit>

}
 8009610:	bf00      	nop
 8009612:	3750      	adds	r7, #80	; 0x50
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	24001114 	.word	0x24001114
 800961c:	40014400 	.word	0x40014400

08009620 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b094      	sub	sp, #80	; 0x50
 8009624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8009626:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800962a:	2200      	movs	r2, #0
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	605a      	str	r2, [r3, #4]
 8009630:	609a      	str	r2, [r3, #8]
 8009632:	60da      	str	r2, [r3, #12]
 8009634:	611a      	str	r2, [r3, #16]
 8009636:	615a      	str	r2, [r3, #20]
 8009638:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800963a:	463b      	mov	r3, r7
 800963c:	2234      	movs	r2, #52	; 0x34
 800963e:	2100      	movs	r1, #0
 8009640:	4618      	mov	r0, r3
 8009642:	f00a feff 	bl	8014444 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8009646:	4b32      	ldr	r3, [pc, #200]	; (8009710 <MX_TIM17_Init+0xf0>)
 8009648:	4a32      	ldr	r2, [pc, #200]	; (8009714 <MX_TIM17_Init+0xf4>)
 800964a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 5500-1;
 800964c:	4b30      	ldr	r3, [pc, #192]	; (8009710 <MX_TIM17_Init+0xf0>)
 800964e:	f241 527b 	movw	r2, #5499	; 0x157b
 8009652:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009654:	4b2e      	ldr	r3, [pc, #184]	; (8009710 <MX_TIM17_Init+0xf0>)
 8009656:	2200      	movs	r2, #0
 8009658:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 800965a:	4b2d      	ldr	r3, [pc, #180]	; (8009710 <MX_TIM17_Init+0xf0>)
 800965c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009660:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009662:	4b2b      	ldr	r3, [pc, #172]	; (8009710 <MX_TIM17_Init+0xf0>)
 8009664:	2200      	movs	r2, #0
 8009666:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8009668:	4b29      	ldr	r3, [pc, #164]	; (8009710 <MX_TIM17_Init+0xf0>)
 800966a:	2200      	movs	r2, #0
 800966c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800966e:	4b28      	ldr	r3, [pc, #160]	; (8009710 <MX_TIM17_Init+0xf0>)
 8009670:	2280      	movs	r2, #128	; 0x80
 8009672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8009674:	4826      	ldr	r0, [pc, #152]	; (8009710 <MX_TIM17_Init+0xf0>)
 8009676:	f006 fdde 	bl	8010236 <HAL_TIM_Base_Init>
 800967a:	4603      	mov	r3, r0
 800967c:	2b00      	cmp	r3, #0
 800967e:	d001      	beq.n	8009684 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8009680:	f7ff f949 	bl	8008916 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8009684:	4822      	ldr	r0, [pc, #136]	; (8009710 <MX_TIM17_Init+0xf0>)
 8009686:	f006 fe2d 	bl	80102e4 <HAL_TIM_PWM_Init>
 800968a:	4603      	mov	r3, r0
 800968c:	2b00      	cmp	r3, #0
 800968e:	d001      	beq.n	8009694 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8009690:	f7ff f941 	bl	8008916 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009694:	2360      	movs	r3, #96	; 0x60
 8009696:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8009698:	f240 13f3 	movw	r3, #499	; 0x1f3
 800969c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800969e:	2300      	movs	r3, #0
 80096a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80096a2:	2300      	movs	r3, #0
 80096a4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80096a6:	2300      	movs	r3, #0
 80096a8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80096aa:	2300      	movs	r3, #0
 80096ac:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80096ae:	2300      	movs	r3, #0
 80096b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80096b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80096b6:	2200      	movs	r2, #0
 80096b8:	4619      	mov	r1, r3
 80096ba:	4815      	ldr	r0, [pc, #84]	; (8009710 <MX_TIM17_Init+0xf0>)
 80096bc:	f006 ff90 	bl	80105e0 <HAL_TIM_PWM_ConfigChannel>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d001      	beq.n	80096ca <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 80096c6:	f7ff f926 	bl	8008916 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80096ca:	2300      	movs	r3, #0
 80096cc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80096ce:	2300      	movs	r3, #0
 80096d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80096d6:	2300      	movs	r3, #0
 80096d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80096da:	2300      	movs	r3, #0
 80096dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80096de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80096e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80096e4:	2300      	movs	r3, #0
 80096e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80096e8:	2300      	movs	r3, #0
 80096ea:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80096ec:	463b      	mov	r3, r7
 80096ee:	4619      	mov	r1, r3
 80096f0:	4807      	ldr	r0, [pc, #28]	; (8009710 <MX_TIM17_Init+0xf0>)
 80096f2:	f007 fe5d 	bl	80113b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d001      	beq.n	8009700 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 80096fc:	f7ff f90b 	bl	8008916 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8009700:	4803      	ldr	r0, [pc, #12]	; (8009710 <MX_TIM17_Init+0xf0>)
 8009702:	f000 f9eb 	bl	8009adc <HAL_TIM_MspPostInit>

}
 8009706:	bf00      	nop
 8009708:	3750      	adds	r7, #80	; 0x50
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	24000eb4 	.word	0x24000eb4
 8009714:	40014800 	.word	0x40014800

08009718 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b088      	sub	sp, #32
 800971c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800971e:	f107 0310 	add.w	r3, r7, #16
 8009722:	2200      	movs	r2, #0
 8009724:	601a      	str	r2, [r3, #0]
 8009726:	605a      	str	r2, [r3, #4]
 8009728:	609a      	str	r2, [r3, #8]
 800972a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800972c:	1d3b      	adds	r3, r7, #4
 800972e:	2200      	movs	r2, #0
 8009730:	601a      	str	r2, [r3, #0]
 8009732:	605a      	str	r2, [r3, #4]
 8009734:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8009736:	4b1e      	ldr	r3, [pc, #120]	; (80097b0 <MX_TIM23_Init+0x98>)
 8009738:	4a1e      	ldr	r2, [pc, #120]	; (80097b4 <MX_TIM23_Init+0x9c>)
 800973a:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 800973c:	4b1c      	ldr	r3, [pc, #112]	; (80097b0 <MX_TIM23_Init+0x98>)
 800973e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009742:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009744:	4b1a      	ldr	r3, [pc, #104]	; (80097b0 <MX_TIM23_Init+0x98>)
 8009746:	2200      	movs	r2, #0
 8009748:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 800974a:	4b19      	ldr	r3, [pc, #100]	; (80097b0 <MX_TIM23_Init+0x98>)
 800974c:	f04f 32ff 	mov.w	r2, #4294967295
 8009750:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009752:	4b17      	ldr	r3, [pc, #92]	; (80097b0 <MX_TIM23_Init+0x98>)
 8009754:	2200      	movs	r2, #0
 8009756:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009758:	4b15      	ldr	r3, [pc, #84]	; (80097b0 <MX_TIM23_Init+0x98>)
 800975a:	2200      	movs	r2, #0
 800975c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 800975e:	4814      	ldr	r0, [pc, #80]	; (80097b0 <MX_TIM23_Init+0x98>)
 8009760:	f006 fd69 	bl	8010236 <HAL_TIM_Base_Init>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 800976a:	f7ff f8d4 	bl	8008916 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800976e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009772:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8009774:	f107 0310 	add.w	r3, r7, #16
 8009778:	4619      	mov	r1, r3
 800977a:	480d      	ldr	r0, [pc, #52]	; (80097b0 <MX_TIM23_Init+0x98>)
 800977c:	f007 f844 	bl	8010808 <HAL_TIM_ConfigClockSource>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d001      	beq.n	800978a <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8009786:	f7ff f8c6 	bl	8008916 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800978a:	2300      	movs	r3, #0
 800978c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800978e:	2300      	movs	r3, #0
 8009790:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8009792:	1d3b      	adds	r3, r7, #4
 8009794:	4619      	mov	r1, r3
 8009796:	4806      	ldr	r0, [pc, #24]	; (80097b0 <MX_TIM23_Init+0x98>)
 8009798:	f007 fd6e 	bl	8011278 <HAL_TIMEx_MasterConfigSynchronization>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d001      	beq.n	80097a6 <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 80097a2:	f7ff f8b8 	bl	8008916 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80097a6:	bf00      	nop
 80097a8:	3720      	adds	r7, #32
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	24001030 	.word	0x24001030
 80097b4:	4000e000 	.word	0x4000e000

080097b8 <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b088      	sub	sp, #32
 80097bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80097be:	f107 0310 	add.w	r3, r7, #16
 80097c2:	2200      	movs	r2, #0
 80097c4:	601a      	str	r2, [r3, #0]
 80097c6:	605a      	str	r2, [r3, #4]
 80097c8:	609a      	str	r2, [r3, #8]
 80097ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80097cc:	1d3b      	adds	r3, r7, #4
 80097ce:	2200      	movs	r2, #0
 80097d0:	601a      	str	r2, [r3, #0]
 80097d2:	605a      	str	r2, [r3, #4]
 80097d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80097d6:	4b1d      	ldr	r3, [pc, #116]	; (800984c <MX_TIM24_Init+0x94>)
 80097d8:	4a1d      	ldr	r2, [pc, #116]	; (8009850 <MX_TIM24_Init+0x98>)
 80097da:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 80097dc:	4b1b      	ldr	r3, [pc, #108]	; (800984c <MX_TIM24_Init+0x94>)
 80097de:	2200      	movs	r2, #0
 80097e0:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80097e2:	4b1a      	ldr	r3, [pc, #104]	; (800984c <MX_TIM24_Init+0x94>)
 80097e4:	2200      	movs	r2, #0
 80097e6:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 80097e8:	4b18      	ldr	r3, [pc, #96]	; (800984c <MX_TIM24_Init+0x94>)
 80097ea:	f04f 32ff 	mov.w	r2, #4294967295
 80097ee:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80097f0:	4b16      	ldr	r3, [pc, #88]	; (800984c <MX_TIM24_Init+0x94>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80097f6:	4b15      	ldr	r3, [pc, #84]	; (800984c <MX_TIM24_Init+0x94>)
 80097f8:	2200      	movs	r2, #0
 80097fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 80097fc:	4813      	ldr	r0, [pc, #76]	; (800984c <MX_TIM24_Init+0x94>)
 80097fe:	f006 fd1a 	bl	8010236 <HAL_TIM_Base_Init>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <MX_TIM24_Init+0x54>
  {
    Error_Handler();
 8009808:	f7ff f885 	bl	8008916 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800980c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009810:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8009812:	f107 0310 	add.w	r3, r7, #16
 8009816:	4619      	mov	r1, r3
 8009818:	480c      	ldr	r0, [pc, #48]	; (800984c <MX_TIM24_Init+0x94>)
 800981a:	f006 fff5 	bl	8010808 <HAL_TIM_ConfigClockSource>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	d001      	beq.n	8009828 <MX_TIM24_Init+0x70>
  {
    Error_Handler();
 8009824:	f7ff f877 	bl	8008916 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009828:	2300      	movs	r3, #0
 800982a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800982c:	2300      	movs	r3, #0
 800982e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8009830:	1d3b      	adds	r3, r7, #4
 8009832:	4619      	mov	r1, r3
 8009834:	4805      	ldr	r0, [pc, #20]	; (800984c <MX_TIM24_Init+0x94>)
 8009836:	f007 fd1f 	bl	8011278 <HAL_TIMEx_MasterConfigSynchronization>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d001      	beq.n	8009844 <MX_TIM24_Init+0x8c>
  {
    Error_Handler();
 8009840:	f7ff f869 	bl	8008916 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8009844:	bf00      	nop
 8009846:	3720      	adds	r7, #32
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	24000dd0 	.word	0x24000dd0
 8009850:	4000e400 	.word	0x4000e400

08009854 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b094      	sub	sp, #80	; 0x50
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800985c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009860:	2200      	movs	r2, #0
 8009862:	601a      	str	r2, [r3, #0]
 8009864:	605a      	str	r2, [r3, #4]
 8009866:	609a      	str	r2, [r3, #8]
 8009868:	60da      	str	r2, [r3, #12]
 800986a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a8d      	ldr	r2, [pc, #564]	; (8009aa8 <HAL_TIM_Base_MspInit+0x254>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d10f      	bne.n	8009896 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009876:	4b8d      	ldr	r3, [pc, #564]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 8009878:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800987c:	4a8b      	ldr	r2, [pc, #556]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 800987e:	f043 0301 	orr.w	r3, r3, #1
 8009882:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009886:	4b89      	ldr	r3, [pc, #548]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 8009888:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800988c:	f003 0301 	and.w	r3, r3, #1
 8009890:	63bb      	str	r3, [r7, #56]	; 0x38
 8009892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_TIM24_CLK_ENABLE();
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 8009894:	e104      	b.n	8009aa0 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM2)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800989e:	d10f      	bne.n	80098c0 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80098a0:	4b82      	ldr	r3, [pc, #520]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 80098a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80098a6:	4a81      	ldr	r2, [pc, #516]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 80098a8:	f043 0301 	orr.w	r3, r3, #1
 80098ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80098b0:	4b7e      	ldr	r3, [pc, #504]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 80098b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80098b6:	f003 0301 	and.w	r3, r3, #1
 80098ba:	637b      	str	r3, [r7, #52]	; 0x34
 80098bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80098be:	e0ef      	b.n	8009aa0 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM3)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a7a      	ldr	r2, [pc, #488]	; (8009ab0 <HAL_TIM_Base_MspInit+0x25c>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d10f      	bne.n	80098ea <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80098ca:	4b78      	ldr	r3, [pc, #480]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 80098cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80098d0:	4a76      	ldr	r2, [pc, #472]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 80098d2:	f043 0302 	orr.w	r3, r3, #2
 80098d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80098da:	4b74      	ldr	r3, [pc, #464]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 80098dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80098e0:	f003 0302 	and.w	r3, r3, #2
 80098e4:	633b      	str	r3, [r7, #48]	; 0x30
 80098e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80098e8:	e0da      	b.n	8009aa0 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM4)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a71      	ldr	r2, [pc, #452]	; (8009ab4 <HAL_TIM_Base_MspInit+0x260>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d10f      	bne.n	8009914 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80098f4:	4b6d      	ldr	r3, [pc, #436]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 80098f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80098fa:	4a6c      	ldr	r2, [pc, #432]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 80098fc:	f043 0304 	orr.w	r3, r3, #4
 8009900:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009904:	4b69      	ldr	r3, [pc, #420]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 8009906:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800990a:	f003 0304 	and.w	r3, r3, #4
 800990e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009912:	e0c5      	b.n	8009aa0 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM12)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a67      	ldr	r2, [pc, #412]	; (8009ab8 <HAL_TIM_Base_MspInit+0x264>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d10f      	bne.n	800993e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800991e:	4b63      	ldr	r3, [pc, #396]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 8009920:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009924:	4a61      	ldr	r2, [pc, #388]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 8009926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800992a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800992e:	4b5f      	ldr	r3, [pc, #380]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 8009930:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009938:	62bb      	str	r3, [r7, #40]	; 0x28
 800993a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800993c:	e0b0      	b.n	8009aa0 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM13)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a5e      	ldr	r2, [pc, #376]	; (8009abc <HAL_TIM_Base_MspInit+0x268>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d10f      	bne.n	8009968 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8009948:	4b58      	ldr	r3, [pc, #352]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 800994a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800994e:	4a57      	ldr	r2, [pc, #348]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 8009950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009954:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009958:	4b54      	ldr	r3, [pc, #336]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 800995a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800995e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009962:	627b      	str	r3, [r7, #36]	; 0x24
 8009964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009966:	e09b      	b.n	8009aa0 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM14)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a54      	ldr	r2, [pc, #336]	; (8009ac0 <HAL_TIM_Base_MspInit+0x26c>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d10f      	bne.n	8009992 <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8009972:	4b4e      	ldr	r3, [pc, #312]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 8009974:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009978:	4a4c      	ldr	r2, [pc, #304]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 800997a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800997e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009982:	4b4a      	ldr	r3, [pc, #296]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 8009984:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800998c:	623b      	str	r3, [r7, #32]
 800998e:	6a3b      	ldr	r3, [r7, #32]
}
 8009990:	e086      	b.n	8009aa0 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM15)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a4b      	ldr	r2, [pc, #300]	; (8009ac4 <HAL_TIM_Base_MspInit+0x270>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d12e      	bne.n	80099fa <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800999c:	4b43      	ldr	r3, [pc, #268]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 800999e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80099a2:	4a42      	ldr	r2, [pc, #264]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 80099a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80099ac:	4b3f      	ldr	r3, [pc, #252]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 80099ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80099b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099b6:	61fb      	str	r3, [r7, #28]
 80099b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80099ba:	4b3c      	ldr	r3, [pc, #240]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 80099bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80099c0:	4a3a      	ldr	r2, [pc, #232]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 80099c2:	f043 0301 	orr.w	r3, r3, #1
 80099c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80099ca:	4b38      	ldr	r3, [pc, #224]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 80099cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80099d0:	f003 0301 	and.w	r3, r3, #1
 80099d4:	61bb      	str	r3, [r7, #24]
 80099d6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80099d8:	2308      	movs	r3, #8
 80099da:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099dc:	2302      	movs	r3, #2
 80099de:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099e0:	2300      	movs	r3, #0
 80099e2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099e4:	2300      	movs	r3, #0
 80099e6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80099e8:	2304      	movs	r3, #4
 80099ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80099f0:	4619      	mov	r1, r3
 80099f2:	4835      	ldr	r0, [pc, #212]	; (8009ac8 <HAL_TIM_Base_MspInit+0x274>)
 80099f4:	f003 f90c 	bl	800cc10 <HAL_GPIO_Init>
}
 80099f8:	e052      	b.n	8009aa0 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM16)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a33      	ldr	r2, [pc, #204]	; (8009acc <HAL_TIM_Base_MspInit+0x278>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d10f      	bne.n	8009a24 <HAL_TIM_Base_MspInit+0x1d0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8009a04:	4b29      	ldr	r3, [pc, #164]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 8009a06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a0a:	4a28      	ldr	r2, [pc, #160]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 8009a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a10:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009a14:	4b25      	ldr	r3, [pc, #148]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 8009a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a1e:	617b      	str	r3, [r7, #20]
 8009a20:	697b      	ldr	r3, [r7, #20]
}
 8009a22:	e03d      	b.n	8009aa0 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM17)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a29      	ldr	r2, [pc, #164]	; (8009ad0 <HAL_TIM_Base_MspInit+0x27c>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d10f      	bne.n	8009a4e <HAL_TIM_Base_MspInit+0x1fa>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8009a2e:	4b1f      	ldr	r3, [pc, #124]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 8009a30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a34:	4a1d      	ldr	r2, [pc, #116]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 8009a36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009a3e:	4b1b      	ldr	r3, [pc, #108]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 8009a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a48:	613b      	str	r3, [r7, #16]
 8009a4a:	693b      	ldr	r3, [r7, #16]
}
 8009a4c:	e028      	b.n	8009aa0 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM23)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a20      	ldr	r2, [pc, #128]	; (8009ad4 <HAL_TIM_Base_MspInit+0x280>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d10f      	bne.n	8009a78 <HAL_TIM_Base_MspInit+0x224>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8009a58:	4b14      	ldr	r3, [pc, #80]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 8009a5a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009a5e:	4a13      	ldr	r2, [pc, #76]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 8009a60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009a64:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8009a68:	4b10      	ldr	r3, [pc, #64]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 8009a6a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009a6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009a72:	60fb      	str	r3, [r7, #12]
 8009a74:	68fb      	ldr	r3, [r7, #12]
}
 8009a76:	e013      	b.n	8009aa0 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM24)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a16      	ldr	r2, [pc, #88]	; (8009ad8 <HAL_TIM_Base_MspInit+0x284>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d10e      	bne.n	8009aa0 <HAL_TIM_Base_MspInit+0x24c>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8009a82:	4b0a      	ldr	r3, [pc, #40]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 8009a84:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009a88:	4a08      	ldr	r2, [pc, #32]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 8009a8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009a8e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8009a92:	4b06      	ldr	r3, [pc, #24]	; (8009aac <HAL_TIM_Base_MspInit+0x258>)
 8009a94:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a9c:	60bb      	str	r3, [r7, #8]
 8009a9e:	68bb      	ldr	r3, [r7, #8]
}
 8009aa0:	bf00      	nop
 8009aa2:	3750      	adds	r7, #80	; 0x50
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	40010000 	.word	0x40010000
 8009aac:	58024400 	.word	0x58024400
 8009ab0:	40000400 	.word	0x40000400
 8009ab4:	40000800 	.word	0x40000800
 8009ab8:	40001800 	.word	0x40001800
 8009abc:	40001c00 	.word	0x40001c00
 8009ac0:	40002000 	.word	0x40002000
 8009ac4:	40014000 	.word	0x40014000
 8009ac8:	58020000 	.word	0x58020000
 8009acc:	40014400 	.word	0x40014400
 8009ad0:	40014800 	.word	0x40014800
 8009ad4:	4000e000 	.word	0x4000e000
 8009ad8:	4000e400 	.word	0x4000e400

08009adc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b090      	sub	sp, #64	; 0x40
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ae4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ae8:	2200      	movs	r2, #0
 8009aea:	601a      	str	r2, [r3, #0]
 8009aec:	605a      	str	r2, [r3, #4]
 8009aee:	609a      	str	r2, [r3, #8]
 8009af0:	60da      	str	r2, [r3, #12]
 8009af2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4aa9      	ldr	r2, [pc, #676]	; (8009da0 <HAL_TIM_MspPostInit+0x2c4>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d120      	bne.n	8009b40 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009afe:	4ba9      	ldr	r3, [pc, #676]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b04:	4aa7      	ldr	r2, [pc, #668]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009b06:	f043 0310 	orr.w	r3, r3, #16
 8009b0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009b0e:	4ba5      	ldr	r3, [pc, #660]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b14:	f003 0310 	and.w	r3, r3, #16
 8009b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009b1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b22:	2302      	movs	r3, #2
 8009b24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b26:	2300      	movs	r3, #0
 8009b28:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009b32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b36:	4619      	mov	r1, r3
 8009b38:	489b      	ldr	r0, [pc, #620]	; (8009da8 <HAL_TIM_MspPostInit+0x2cc>)
 8009b3a:	f003 f869 	bl	800cc10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8009b3e:	e12a      	b.n	8009d96 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM2)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b48:	d11f      	bne.n	8009b8a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b4a:	4b96      	ldr	r3, [pc, #600]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b50:	4a94      	ldr	r2, [pc, #592]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009b52:	f043 0301 	orr.w	r3, r3, #1
 8009b56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009b5a:	4b92      	ldr	r3, [pc, #584]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b60:	f003 0301 	and.w	r3, r3, #1
 8009b64:	627b      	str	r3, [r7, #36]	; 0x24
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b70:	2300      	movs	r3, #0
 8009b72:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b74:	2300      	movs	r3, #0
 8009b76:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b80:	4619      	mov	r1, r3
 8009b82:	488a      	ldr	r0, [pc, #552]	; (8009dac <HAL_TIM_MspPostInit+0x2d0>)
 8009b84:	f003 f844 	bl	800cc10 <HAL_GPIO_Init>
}
 8009b88:	e105      	b.n	8009d96 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM3)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a88      	ldr	r2, [pc, #544]	; (8009db0 <HAL_TIM_MspPostInit+0x2d4>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d11f      	bne.n	8009bd4 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009b94:	4b83      	ldr	r3, [pc, #524]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b9a:	4a82      	ldr	r2, [pc, #520]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009b9c:	f043 0304 	orr.w	r3, r3, #4
 8009ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009ba4:	4b7f      	ldr	r3, [pc, #508]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009baa:	f003 0304 	and.w	r3, r3, #4
 8009bae:	623b      	str	r3, [r7, #32]
 8009bb0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009bb2:	2340      	movs	r3, #64	; 0x40
 8009bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bb6:	2302      	movs	r3, #2
 8009bb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009bc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009bca:	4619      	mov	r1, r3
 8009bcc:	4879      	ldr	r0, [pc, #484]	; (8009db4 <HAL_TIM_MspPostInit+0x2d8>)
 8009bce:	f003 f81f 	bl	800cc10 <HAL_GPIO_Init>
}
 8009bd2:	e0e0      	b.n	8009d96 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM4)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a77      	ldr	r2, [pc, #476]	; (8009db8 <HAL_TIM_MspPostInit+0x2dc>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d120      	bne.n	8009c20 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009bde:	4b71      	ldr	r3, [pc, #452]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009be4:	4a6f      	ldr	r2, [pc, #444]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009be6:	f043 0308 	orr.w	r3, r3, #8
 8009bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009bee:	4b6d      	ldr	r3, [pc, #436]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009bf4:	f003 0308 	and.w	r3, r3, #8
 8009bf8:	61fb      	str	r3, [r7, #28]
 8009bfa:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8009bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c02:	2302      	movs	r3, #2
 8009c04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c06:	2300      	movs	r3, #0
 8009c08:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8009c0e:	2302      	movs	r3, #2
 8009c10:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009c12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c16:	4619      	mov	r1, r3
 8009c18:	4868      	ldr	r0, [pc, #416]	; (8009dbc <HAL_TIM_MspPostInit+0x2e0>)
 8009c1a:	f002 fff9 	bl	800cc10 <HAL_GPIO_Init>
}
 8009c1e:	e0ba      	b.n	8009d96 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM12)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a66      	ldr	r2, [pc, #408]	; (8009dc0 <HAL_TIM_MspPostInit+0x2e4>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d120      	bne.n	8009c6c <HAL_TIM_MspPostInit+0x190>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009c2a:	4b5e      	ldr	r3, [pc, #376]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c30:	4a5c      	ldr	r2, [pc, #368]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009c32:	f043 0302 	orr.w	r3, r3, #2
 8009c36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009c3a:	4b5a      	ldr	r3, [pc, #360]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c40:	f003 0302 	and.w	r3, r3, #2
 8009c44:	61bb      	str	r3, [r7, #24]
 8009c46:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8009c48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c4e:	2302      	movs	r3, #2
 8009c50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c52:	2300      	movs	r3, #0
 8009c54:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009c56:	2300      	movs	r3, #0
 8009c58:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8009c5a:	2302      	movs	r3, #2
 8009c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009c5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009c62:	4619      	mov	r1, r3
 8009c64:	4857      	ldr	r0, [pc, #348]	; (8009dc4 <HAL_TIM_MspPostInit+0x2e8>)
 8009c66:	f002 ffd3 	bl	800cc10 <HAL_GPIO_Init>
}
 8009c6a:	e094      	b.n	8009d96 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM14)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a55      	ldr	r2, [pc, #340]	; (8009dc8 <HAL_TIM_MspPostInit+0x2ec>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d11f      	bne.n	8009cb6 <HAL_TIM_MspPostInit+0x1da>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c76:	4b4b      	ldr	r3, [pc, #300]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c7c:	4a49      	ldr	r2, [pc, #292]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009c7e:	f043 0301 	orr.w	r3, r3, #1
 8009c82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009c86:	4b47      	ldr	r3, [pc, #284]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c8c:	f003 0301 	and.w	r3, r3, #1
 8009c90:	617b      	str	r3, [r7, #20]
 8009c92:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8009c94:	2380      	movs	r3, #128	; 0x80
 8009c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c98:	2302      	movs	r3, #2
 8009c9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8009ca4:	2309      	movs	r3, #9
 8009ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ca8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009cac:	4619      	mov	r1, r3
 8009cae:	483f      	ldr	r0, [pc, #252]	; (8009dac <HAL_TIM_MspPostInit+0x2d0>)
 8009cb0:	f002 ffae 	bl	800cc10 <HAL_GPIO_Init>
}
 8009cb4:	e06f      	b.n	8009d96 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM15)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a44      	ldr	r2, [pc, #272]	; (8009dcc <HAL_TIM_MspPostInit+0x2f0>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d11f      	bne.n	8009d00 <HAL_TIM_MspPostInit+0x224>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009cc0:	4b38      	ldr	r3, [pc, #224]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009cc6:	4a37      	ldr	r2, [pc, #220]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009cc8:	f043 0310 	orr.w	r3, r3, #16
 8009ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009cd0:	4b34      	ldr	r3, [pc, #208]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009cd6:	f003 0310 	and.w	r3, r3, #16
 8009cda:	613b      	str	r3, [r7, #16]
 8009cdc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8009cde:	2320      	movs	r3, #32
 8009ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ce2:	2302      	movs	r3, #2
 8009ce4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009cea:	2300      	movs	r3, #0
 8009cec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8009cee:	2304      	movs	r3, #4
 8009cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009cf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	482b      	ldr	r0, [pc, #172]	; (8009da8 <HAL_TIM_MspPostInit+0x2cc>)
 8009cfa:	f002 ff89 	bl	800cc10 <HAL_GPIO_Init>
}
 8009cfe:	e04a      	b.n	8009d96 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM16)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a32      	ldr	r2, [pc, #200]	; (8009dd0 <HAL_TIM_MspPostInit+0x2f4>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d120      	bne.n	8009d4c <HAL_TIM_MspPostInit+0x270>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009d0a:	4b26      	ldr	r3, [pc, #152]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d10:	4a24      	ldr	r2, [pc, #144]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009d12:	f043 0302 	orr.w	r3, r3, #2
 8009d16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009d1a:	4b22      	ldr	r3, [pc, #136]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d20:	f003 0302 	and.w	r3, r3, #2
 8009d24:	60fb      	str	r3, [r7, #12]
 8009d26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8009d28:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d2e:	2302      	movs	r3, #2
 8009d30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d32:	2300      	movs	r3, #0
 8009d34:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d36:	2300      	movs	r3, #0
 8009d38:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009d42:	4619      	mov	r1, r3
 8009d44:	481f      	ldr	r0, [pc, #124]	; (8009dc4 <HAL_TIM_MspPostInit+0x2e8>)
 8009d46:	f002 ff63 	bl	800cc10 <HAL_GPIO_Init>
}
 8009d4a:	e024      	b.n	8009d96 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM17)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	4a20      	ldr	r2, [pc, #128]	; (8009dd4 <HAL_TIM_MspPostInit+0x2f8>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d11f      	bne.n	8009d96 <HAL_TIM_MspPostInit+0x2ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009d56:	4b13      	ldr	r3, [pc, #76]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d5c:	4a11      	ldr	r2, [pc, #68]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009d5e:	f043 0302 	orr.w	r3, r3, #2
 8009d62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009d66:	4b0f      	ldr	r3, [pc, #60]	; (8009da4 <HAL_TIM_MspPostInit+0x2c8>)
 8009d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d6c:	f003 0302 	and.w	r3, r3, #2
 8009d70:	60bb      	str	r3, [r7, #8]
 8009d72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d7a:	2302      	movs	r3, #2
 8009d7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009d82:	2300      	movs	r3, #0
 8009d84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8009d86:	2301      	movs	r3, #1
 8009d88:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009d8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009d8e:	4619      	mov	r1, r3
 8009d90:	480c      	ldr	r0, [pc, #48]	; (8009dc4 <HAL_TIM_MspPostInit+0x2e8>)
 8009d92:	f002 ff3d 	bl	800cc10 <HAL_GPIO_Init>
}
 8009d96:	bf00      	nop
 8009d98:	3740      	adds	r7, #64	; 0x40
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	40010000 	.word	0x40010000
 8009da4:	58024400 	.word	0x58024400
 8009da8:	58021000 	.word	0x58021000
 8009dac:	58020000 	.word	0x58020000
 8009db0:	40000400 	.word	0x40000400
 8009db4:	58020800 	.word	0x58020800
 8009db8:	40000800 	.word	0x40000800
 8009dbc:	58020c00 	.word	0x58020c00
 8009dc0:	40001800 	.word	0x40001800
 8009dc4:	58020400 	.word	0x58020400
 8009dc8:	40002000 	.word	0x40002000
 8009dcc:	40014000 	.word	0x40014000
 8009dd0:	40014400 	.word	0x40014400
 8009dd4:	40014800 	.word	0x40014800

08009dd8 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8009ddc:	4b22      	ldr	r3, [pc, #136]	; (8009e68 <MX_UART4_Init+0x90>)
 8009dde:	4a23      	ldr	r2, [pc, #140]	; (8009e6c <MX_UART4_Init+0x94>)
 8009de0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8009de2:	4b21      	ldr	r3, [pc, #132]	; (8009e68 <MX_UART4_Init+0x90>)
 8009de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009de8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8009dea:	4b1f      	ldr	r3, [pc, #124]	; (8009e68 <MX_UART4_Init+0x90>)
 8009dec:	2200      	movs	r2, #0
 8009dee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8009df0:	4b1d      	ldr	r3, [pc, #116]	; (8009e68 <MX_UART4_Init+0x90>)
 8009df2:	2200      	movs	r2, #0
 8009df4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8009df6:	4b1c      	ldr	r3, [pc, #112]	; (8009e68 <MX_UART4_Init+0x90>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8009dfc:	4b1a      	ldr	r3, [pc, #104]	; (8009e68 <MX_UART4_Init+0x90>)
 8009dfe:	220c      	movs	r2, #12
 8009e00:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009e02:	4b19      	ldr	r3, [pc, #100]	; (8009e68 <MX_UART4_Init+0x90>)
 8009e04:	2200      	movs	r2, #0
 8009e06:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8009e08:	4b17      	ldr	r3, [pc, #92]	; (8009e68 <MX_UART4_Init+0x90>)
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009e0e:	4b16      	ldr	r3, [pc, #88]	; (8009e68 <MX_UART4_Init+0x90>)
 8009e10:	2200      	movs	r2, #0
 8009e12:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009e14:	4b14      	ldr	r3, [pc, #80]	; (8009e68 <MX_UART4_Init+0x90>)
 8009e16:	2200      	movs	r2, #0
 8009e18:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009e1a:	4b13      	ldr	r3, [pc, #76]	; (8009e68 <MX_UART4_Init+0x90>)
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8009e20:	4811      	ldr	r0, [pc, #68]	; (8009e68 <MX_UART4_Init+0x90>)
 8009e22:	f007 fb65 	bl	80114f0 <HAL_UART_Init>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d001      	beq.n	8009e30 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8009e2c:	f7fe fd73 	bl	8008916 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009e30:	2100      	movs	r1, #0
 8009e32:	480d      	ldr	r0, [pc, #52]	; (8009e68 <MX_UART4_Init+0x90>)
 8009e34:	f00a fa03 	bl	801423e <HAL_UARTEx_SetTxFifoThreshold>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d001      	beq.n	8009e42 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8009e3e:	f7fe fd6a 	bl	8008916 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009e42:	2100      	movs	r1, #0
 8009e44:	4808      	ldr	r0, [pc, #32]	; (8009e68 <MX_UART4_Init+0x90>)
 8009e46:	f00a fa38 	bl	80142ba <HAL_UARTEx_SetRxFifoThreshold>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d001      	beq.n	8009e54 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8009e50:	f7fe fd61 	bl	8008916 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8009e54:	4804      	ldr	r0, [pc, #16]	; (8009e68 <MX_UART4_Init+0x90>)
 8009e56:	f00a f9b9 	bl	80141cc <HAL_UARTEx_DisableFifoMode>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d001      	beq.n	8009e64 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8009e60:	f7fe fd59 	bl	8008916 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8009e64:	bf00      	nop
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	24001280 	.word	0x24001280
 8009e6c:	40004c00 	.word	0x40004c00

08009e70 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8009e74:	4b22      	ldr	r3, [pc, #136]	; (8009f00 <MX_UART5_Init+0x90>)
 8009e76:	4a23      	ldr	r2, [pc, #140]	; (8009f04 <MX_UART5_Init+0x94>)
 8009e78:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8009e7a:	4b21      	ldr	r3, [pc, #132]	; (8009f00 <MX_UART5_Init+0x90>)
 8009e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009e80:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8009e82:	4b1f      	ldr	r3, [pc, #124]	; (8009f00 <MX_UART5_Init+0x90>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8009e88:	4b1d      	ldr	r3, [pc, #116]	; (8009f00 <MX_UART5_Init+0x90>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8009e8e:	4b1c      	ldr	r3, [pc, #112]	; (8009f00 <MX_UART5_Init+0x90>)
 8009e90:	2200      	movs	r2, #0
 8009e92:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8009e94:	4b1a      	ldr	r3, [pc, #104]	; (8009f00 <MX_UART5_Init+0x90>)
 8009e96:	220c      	movs	r2, #12
 8009e98:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009e9a:	4b19      	ldr	r3, [pc, #100]	; (8009f00 <MX_UART5_Init+0x90>)
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8009ea0:	4b17      	ldr	r3, [pc, #92]	; (8009f00 <MX_UART5_Init+0x90>)
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009ea6:	4b16      	ldr	r3, [pc, #88]	; (8009f00 <MX_UART5_Init+0x90>)
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009eac:	4b14      	ldr	r3, [pc, #80]	; (8009f00 <MX_UART5_Init+0x90>)
 8009eae:	2200      	movs	r2, #0
 8009eb0:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009eb2:	4b13      	ldr	r3, [pc, #76]	; (8009f00 <MX_UART5_Init+0x90>)
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8009eb8:	4811      	ldr	r0, [pc, #68]	; (8009f00 <MX_UART5_Init+0x90>)
 8009eba:	f007 fb19 	bl	80114f0 <HAL_UART_Init>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8009ec4:	f7fe fd27 	bl	8008916 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009ec8:	2100      	movs	r1, #0
 8009eca:	480d      	ldr	r0, [pc, #52]	; (8009f00 <MX_UART5_Init+0x90>)
 8009ecc:	f00a f9b7 	bl	801423e <HAL_UARTEx_SetTxFifoThreshold>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d001      	beq.n	8009eda <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8009ed6:	f7fe fd1e 	bl	8008916 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009eda:	2100      	movs	r1, #0
 8009edc:	4808      	ldr	r0, [pc, #32]	; (8009f00 <MX_UART5_Init+0x90>)
 8009ede:	f00a f9ec 	bl	80142ba <HAL_UARTEx_SetRxFifoThreshold>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d001      	beq.n	8009eec <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8009ee8:	f7fe fd15 	bl	8008916 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8009eec:	4804      	ldr	r0, [pc, #16]	; (8009f00 <MX_UART5_Init+0x90>)
 8009eee:	f00a f96d 	bl	80141cc <HAL_UARTEx_DisableFifoMode>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d001      	beq.n	8009efc <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8009ef8:	f7fe fd0d 	bl	8008916 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8009efc:	bf00      	nop
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	240011f0 	.word	0x240011f0
 8009f04:	40005000 	.word	0x40005000

08009f08 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009f0c:	4b22      	ldr	r3, [pc, #136]	; (8009f98 <MX_USART2_UART_Init+0x90>)
 8009f0e:	4a23      	ldr	r2, [pc, #140]	; (8009f9c <MX_USART2_UART_Init+0x94>)
 8009f10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009f12:	4b21      	ldr	r3, [pc, #132]	; (8009f98 <MX_USART2_UART_Init+0x90>)
 8009f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009f18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009f1a:	4b1f      	ldr	r3, [pc, #124]	; (8009f98 <MX_USART2_UART_Init+0x90>)
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009f20:	4b1d      	ldr	r3, [pc, #116]	; (8009f98 <MX_USART2_UART_Init+0x90>)
 8009f22:	2200      	movs	r2, #0
 8009f24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009f26:	4b1c      	ldr	r3, [pc, #112]	; (8009f98 <MX_USART2_UART_Init+0x90>)
 8009f28:	2200      	movs	r2, #0
 8009f2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009f2c:	4b1a      	ldr	r3, [pc, #104]	; (8009f98 <MX_USART2_UART_Init+0x90>)
 8009f2e:	220c      	movs	r2, #12
 8009f30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009f32:	4b19      	ldr	r3, [pc, #100]	; (8009f98 <MX_USART2_UART_Init+0x90>)
 8009f34:	2200      	movs	r2, #0
 8009f36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009f38:	4b17      	ldr	r3, [pc, #92]	; (8009f98 <MX_USART2_UART_Init+0x90>)
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009f3e:	4b16      	ldr	r3, [pc, #88]	; (8009f98 <MX_USART2_UART_Init+0x90>)
 8009f40:	2200      	movs	r2, #0
 8009f42:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009f44:	4b14      	ldr	r3, [pc, #80]	; (8009f98 <MX_USART2_UART_Init+0x90>)
 8009f46:	2200      	movs	r2, #0
 8009f48:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009f4a:	4b13      	ldr	r3, [pc, #76]	; (8009f98 <MX_USART2_UART_Init+0x90>)
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009f50:	4811      	ldr	r0, [pc, #68]	; (8009f98 <MX_USART2_UART_Init+0x90>)
 8009f52:	f007 facd 	bl	80114f0 <HAL_UART_Init>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d001      	beq.n	8009f60 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8009f5c:	f7fe fcdb 	bl	8008916 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009f60:	2100      	movs	r1, #0
 8009f62:	480d      	ldr	r0, [pc, #52]	; (8009f98 <MX_USART2_UART_Init+0x90>)
 8009f64:	f00a f96b 	bl	801423e <HAL_UARTEx_SetTxFifoThreshold>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d001      	beq.n	8009f72 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8009f6e:	f7fe fcd2 	bl	8008916 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009f72:	2100      	movs	r1, #0
 8009f74:	4808      	ldr	r0, [pc, #32]	; (8009f98 <MX_USART2_UART_Init+0x90>)
 8009f76:	f00a f9a0 	bl	80142ba <HAL_UARTEx_SetRxFifoThreshold>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8009f80:	f7fe fcc9 	bl	8008916 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8009f84:	4804      	ldr	r0, [pc, #16]	; (8009f98 <MX_USART2_UART_Init+0x90>)
 8009f86:	f00a f921 	bl	80141cc <HAL_UARTEx_DisableFifoMode>
 8009f8a:	4603      	mov	r3, r0
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d001      	beq.n	8009f94 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8009f90:	f7fe fcc1 	bl	8008916 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009f94:	bf00      	nop
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	24001310 	.word	0x24001310
 8009f9c:	40004400 	.word	0x40004400

08009fa0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8009fa4:	4b22      	ldr	r3, [pc, #136]	; (800a030 <MX_USART3_UART_Init+0x90>)
 8009fa6:	4a23      	ldr	r2, [pc, #140]	; (800a034 <MX_USART3_UART_Init+0x94>)
 8009fa8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8009faa:	4b21      	ldr	r3, [pc, #132]	; (800a030 <MX_USART3_UART_Init+0x90>)
 8009fac:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8009fb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009fb2:	4b1f      	ldr	r3, [pc, #124]	; (800a030 <MX_USART3_UART_Init+0x90>)
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009fb8:	4b1d      	ldr	r3, [pc, #116]	; (800a030 <MX_USART3_UART_Init+0x90>)
 8009fba:	2200      	movs	r2, #0
 8009fbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009fbe:	4b1c      	ldr	r3, [pc, #112]	; (800a030 <MX_USART3_UART_Init+0x90>)
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009fc4:	4b1a      	ldr	r3, [pc, #104]	; (800a030 <MX_USART3_UART_Init+0x90>)
 8009fc6:	220c      	movs	r2, #12
 8009fc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009fca:	4b19      	ldr	r3, [pc, #100]	; (800a030 <MX_USART3_UART_Init+0x90>)
 8009fcc:	2200      	movs	r2, #0
 8009fce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009fd0:	4b17      	ldr	r3, [pc, #92]	; (800a030 <MX_USART3_UART_Init+0x90>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009fd6:	4b16      	ldr	r3, [pc, #88]	; (800a030 <MX_USART3_UART_Init+0x90>)
 8009fd8:	2200      	movs	r2, #0
 8009fda:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009fdc:	4b14      	ldr	r3, [pc, #80]	; (800a030 <MX_USART3_UART_Init+0x90>)
 8009fde:	2200      	movs	r2, #0
 8009fe0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009fe2:	4b13      	ldr	r3, [pc, #76]	; (800a030 <MX_USART3_UART_Init+0x90>)
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009fe8:	4811      	ldr	r0, [pc, #68]	; (800a030 <MX_USART3_UART_Init+0x90>)
 8009fea:	f007 fa81 	bl	80114f0 <HAL_UART_Init>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d001      	beq.n	8009ff8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8009ff4:	f7fe fc8f 	bl	8008916 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	480d      	ldr	r0, [pc, #52]	; (800a030 <MX_USART3_UART_Init+0x90>)
 8009ffc:	f00a f91f 	bl	801423e <HAL_UARTEx_SetTxFifoThreshold>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d001      	beq.n	800a00a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800a006:	f7fe fc86 	bl	8008916 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a00a:	2100      	movs	r1, #0
 800a00c:	4808      	ldr	r0, [pc, #32]	; (800a030 <MX_USART3_UART_Init+0x90>)
 800a00e:	f00a f954 	bl	80142ba <HAL_UARTEx_SetRxFifoThreshold>
 800a012:	4603      	mov	r3, r0
 800a014:	2b00      	cmp	r3, #0
 800a016:	d001      	beq.n	800a01c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800a018:	f7fe fc7d 	bl	8008916 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800a01c:	4804      	ldr	r0, [pc, #16]	; (800a030 <MX_USART3_UART_Init+0x90>)
 800a01e:	f00a f8d5 	bl	80141cc <HAL_UARTEx_DisableFifoMode>
 800a022:	4603      	mov	r3, r0
 800a024:	2b00      	cmp	r3, #0
 800a026:	d001      	beq.n	800a02c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800a028:	f7fe fc75 	bl	8008916 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800a02c:	bf00      	nop
 800a02e:	bd80      	pop	{r7, pc}
 800a030:	24001160 	.word	0x24001160
 800a034:	40004800 	.word	0x40004800

0800a038 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b0bc      	sub	sp, #240	; 0xf0
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a040:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800a044:	2200      	movs	r2, #0
 800a046:	601a      	str	r2, [r3, #0]
 800a048:	605a      	str	r2, [r3, #4]
 800a04a:	609a      	str	r2, [r3, #8]
 800a04c:	60da      	str	r2, [r3, #12]
 800a04e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a050:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a054:	22b4      	movs	r2, #180	; 0xb4
 800a056:	2100      	movs	r1, #0
 800a058:	4618      	mov	r0, r3
 800a05a:	f00a f9f3 	bl	8014444 <memset>
  if(uartHandle->Instance==UART4)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a96      	ldr	r2, [pc, #600]	; (800a2bc <HAL_UART_MspInit+0x284>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d143      	bne.n	800a0f0 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800a068:	2302      	movs	r3, #2
 800a06a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800a06c:	2300      	movs	r3, #0
 800a06e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a076:	4618      	mov	r0, r3
 800a078:	f003 ff2a 	bl	800ded0 <HAL_RCCEx_PeriphCLKConfig>
 800a07c:	4603      	mov	r3, r0
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d001      	beq.n	800a086 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800a082:	f7fe fc48 	bl	8008916 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800a086:	4b8e      	ldr	r3, [pc, #568]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a088:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a08c:	4a8c      	ldr	r2, [pc, #560]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a08e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a092:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a096:	4b8a      	ldr	r3, [pc, #552]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a098:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a09c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a0a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0a4:	4b86      	ldr	r3, [pc, #536]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a0a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a0aa:	4a85      	ldr	r2, [pc, #532]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a0ac:	f043 0301 	orr.w	r3, r3, #1
 800a0b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a0b4:	4b82      	ldr	r3, [pc, #520]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a0b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a0ba:	f003 0301 	and.w	r3, r3, #1
 800a0be:	623b      	str	r3, [r7, #32]
 800a0c0:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a0c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a0c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0ca:	2302      	movs	r3, #2
 800a0cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 800a0dc:	2306      	movs	r3, #6
 800a0de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	4876      	ldr	r0, [pc, #472]	; (800a2c4 <HAL_UART_MspInit+0x28c>)
 800a0ea:	f002 fd91 	bl	800cc10 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800a0ee:	e0e0      	b.n	800a2b2 <HAL_UART_MspInit+0x27a>
  else if(uartHandle->Instance==UART5)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a74      	ldr	r2, [pc, #464]	; (800a2c8 <HAL_UART_MspInit+0x290>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d143      	bne.n	800a182 <HAL_UART_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800a0fa:	2302      	movs	r3, #2
 800a0fc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800a0fe:	2300      	movs	r3, #0
 800a100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a104:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a108:	4618      	mov	r0, r3
 800a10a:	f003 fee1 	bl	800ded0 <HAL_RCCEx_PeriphCLKConfig>
 800a10e:	4603      	mov	r3, r0
 800a110:	2b00      	cmp	r3, #0
 800a112:	d001      	beq.n	800a118 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 800a114:	f7fe fbff 	bl	8008916 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800a118:	4b69      	ldr	r3, [pc, #420]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a11a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a11e:	4a68      	ldr	r2, [pc, #416]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a120:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a124:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a128:	4b65      	ldr	r3, [pc, #404]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a12a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a12e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a132:	61fb      	str	r3, [r7, #28]
 800a134:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a136:	4b62      	ldr	r3, [pc, #392]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a13c:	4a60      	ldr	r2, [pc, #384]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a13e:	f043 0302 	orr.w	r3, r3, #2
 800a142:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a146:	4b5e      	ldr	r3, [pc, #376]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a14c:	f003 0302 	and.w	r3, r3, #2
 800a150:	61bb      	str	r3, [r7, #24]
 800a152:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800a154:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800a158:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a15c:	2302      	movs	r3, #2
 800a15e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a162:	2300      	movs	r3, #0
 800a164:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a168:	2300      	movs	r3, #0
 800a16a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 800a16e:	230e      	movs	r3, #14
 800a170:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a174:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800a178:	4619      	mov	r1, r3
 800a17a:	4854      	ldr	r0, [pc, #336]	; (800a2cc <HAL_UART_MspInit+0x294>)
 800a17c:	f002 fd48 	bl	800cc10 <HAL_GPIO_Init>
}
 800a180:	e097      	b.n	800a2b2 <HAL_UART_MspInit+0x27a>
  else if(uartHandle->Instance==USART2)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a52      	ldr	r2, [pc, #328]	; (800a2d0 <HAL_UART_MspInit+0x298>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d142      	bne.n	800a212 <HAL_UART_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800a18c:	2302      	movs	r3, #2
 800a18e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800a190:	2300      	movs	r3, #0
 800a192:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a196:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a19a:	4618      	mov	r0, r3
 800a19c:	f003 fe98 	bl	800ded0 <HAL_RCCEx_PeriphCLKConfig>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d001      	beq.n	800a1aa <HAL_UART_MspInit+0x172>
      Error_Handler();
 800a1a6:	f7fe fbb6 	bl	8008916 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a1aa:	4b45      	ldr	r3, [pc, #276]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a1ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a1b0:	4a43      	ldr	r2, [pc, #268]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a1b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a1ba:	4b41      	ldr	r3, [pc, #260]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a1bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a1c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1c4:	617b      	str	r3, [r7, #20]
 800a1c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a1c8:	4b3d      	ldr	r3, [pc, #244]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a1ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a1ce:	4a3c      	ldr	r2, [pc, #240]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a1d0:	f043 0308 	orr.w	r3, r3, #8
 800a1d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a1d8:	4b39      	ldr	r3, [pc, #228]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a1da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a1de:	f003 0308 	and.w	r3, r3, #8
 800a1e2:	613b      	str	r3, [r7, #16]
 800a1e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800a1e6:	2360      	movs	r3, #96	; 0x60
 800a1e8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1ec:	2302      	movs	r3, #2
 800a1ee:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a1fe:	2307      	movs	r3, #7
 800a200:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a204:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800a208:	4619      	mov	r1, r3
 800a20a:	4832      	ldr	r0, [pc, #200]	; (800a2d4 <HAL_UART_MspInit+0x29c>)
 800a20c:	f002 fd00 	bl	800cc10 <HAL_GPIO_Init>
}
 800a210:	e04f      	b.n	800a2b2 <HAL_UART_MspInit+0x27a>
  else if(uartHandle->Instance==USART3)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a30      	ldr	r2, [pc, #192]	; (800a2d8 <HAL_UART_MspInit+0x2a0>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d14a      	bne.n	800a2b2 <HAL_UART_MspInit+0x27a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800a21c:	2302      	movs	r3, #2
 800a21e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800a220:	2300      	movs	r3, #0
 800a222:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a22a:	4618      	mov	r0, r3
 800a22c:	f003 fe50 	bl	800ded0 <HAL_RCCEx_PeriphCLKConfig>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d001      	beq.n	800a23a <HAL_UART_MspInit+0x202>
      Error_Handler();
 800a236:	f7fe fb6e 	bl	8008916 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a23a:	4b21      	ldr	r3, [pc, #132]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a23c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a240:	4a1f      	ldr	r2, [pc, #124]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a242:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a246:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800a24a:	4b1d      	ldr	r3, [pc, #116]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a24c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a250:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a254:	60fb      	str	r3, [r7, #12]
 800a256:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a258:	4b19      	ldr	r3, [pc, #100]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a25a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a25e:	4a18      	ldr	r2, [pc, #96]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a260:	f043 0302 	orr.w	r3, r3, #2
 800a264:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a268:	4b15      	ldr	r3, [pc, #84]	; (800a2c0 <HAL_UART_MspInit+0x288>)
 800a26a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a26e:	f003 0302 	and.w	r3, r3, #2
 800a272:	60bb      	str	r3, [r7, #8]
 800a274:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a276:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a27a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a27e:	2302      	movs	r3, #2
 800a280:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a284:	2300      	movs	r3, #0
 800a286:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a28a:	2300      	movs	r3, #0
 800a28c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a290:	2307      	movs	r3, #7
 800a292:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a296:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800a29a:	4619      	mov	r1, r3
 800a29c:	480b      	ldr	r0, [pc, #44]	; (800a2cc <HAL_UART_MspInit+0x294>)
 800a29e:	f002 fcb7 	bl	800cc10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	2027      	movs	r0, #39	; 0x27
 800a2a8:	f001 fd1d 	bl	800bce6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800a2ac:	2027      	movs	r0, #39	; 0x27
 800a2ae:	f001 fd34 	bl	800bd1a <HAL_NVIC_EnableIRQ>
}
 800a2b2:	bf00      	nop
 800a2b4:	37f0      	adds	r7, #240	; 0xf0
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	40004c00 	.word	0x40004c00
 800a2c0:	58024400 	.word	0x58024400
 800a2c4:	58020000 	.word	0x58020000
 800a2c8:	40005000 	.word	0x40005000
 800a2cc:	58020400 	.word	0x58020400
 800a2d0:	40004400 	.word	0x40004400
 800a2d4:	58020c00 	.word	0x58020c00
 800a2d8:	40004800 	.word	0x40004800

0800a2dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800a2dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a314 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800a2e0:	f7fe fd1c 	bl	8008d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a2e4:	480c      	ldr	r0, [pc, #48]	; (800a318 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a2e6:	490d      	ldr	r1, [pc, #52]	; (800a31c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a2e8:	4a0d      	ldr	r2, [pc, #52]	; (800a320 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a2ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a2ec:	e002      	b.n	800a2f4 <LoopCopyDataInit>

0800a2ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a2ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a2f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a2f2:	3304      	adds	r3, #4

0800a2f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a2f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a2f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a2f8:	d3f9      	bcc.n	800a2ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a2fa:	4a0a      	ldr	r2, [pc, #40]	; (800a324 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a2fc:	4c0a      	ldr	r4, [pc, #40]	; (800a328 <LoopFillZerobss+0x22>)
  movs r3, #0
 800a2fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a300:	e001      	b.n	800a306 <LoopFillZerobss>

0800a302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a304:	3204      	adds	r2, #4

0800a306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a308:	d3fb      	bcc.n	800a302 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a30a:	f00a f869 	bl	80143e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a30e:	f7fd fc83 	bl	8007c18 <main>
  bx  lr
 800a312:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a314:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800a318:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800a31c:	240001e4 	.word	0x240001e4
  ldr r2, =_sidata
 800a320:	0801a1d0 	.word	0x0801a1d0
  ldr r2, =_sbss
 800a324:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 800a328:	240013b4 	.word	0x240013b4

0800a32c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a32c:	e7fe      	b.n	800a32c <ADC3_IRQHandler>
	...

0800a330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a336:	2003      	movs	r0, #3
 800a338:	f001 fcca 	bl	800bcd0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a33c:	f003 fbd6 	bl	800daec <HAL_RCC_GetSysClockFreq>
 800a340:	4602      	mov	r2, r0
 800a342:	4b15      	ldr	r3, [pc, #84]	; (800a398 <HAL_Init+0x68>)
 800a344:	699b      	ldr	r3, [r3, #24]
 800a346:	0a1b      	lsrs	r3, r3, #8
 800a348:	f003 030f 	and.w	r3, r3, #15
 800a34c:	4913      	ldr	r1, [pc, #76]	; (800a39c <HAL_Init+0x6c>)
 800a34e:	5ccb      	ldrb	r3, [r1, r3]
 800a350:	f003 031f 	and.w	r3, r3, #31
 800a354:	fa22 f303 	lsr.w	r3, r2, r3
 800a358:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a35a:	4b0f      	ldr	r3, [pc, #60]	; (800a398 <HAL_Init+0x68>)
 800a35c:	699b      	ldr	r3, [r3, #24]
 800a35e:	f003 030f 	and.w	r3, r3, #15
 800a362:	4a0e      	ldr	r2, [pc, #56]	; (800a39c <HAL_Init+0x6c>)
 800a364:	5cd3      	ldrb	r3, [r2, r3]
 800a366:	f003 031f 	and.w	r3, r3, #31
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	fa22 f303 	lsr.w	r3, r2, r3
 800a370:	4a0b      	ldr	r2, [pc, #44]	; (800a3a0 <HAL_Init+0x70>)
 800a372:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a374:	4a0b      	ldr	r2, [pc, #44]	; (800a3a4 <HAL_Init+0x74>)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a37a:	2000      	movs	r0, #0
 800a37c:	f000 f814 	bl	800a3a8 <HAL_InitTick>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d001      	beq.n	800a38a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	e002      	b.n	800a390 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800a38a:	f7fe fb85 	bl	8008a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	58024400 	.word	0x58024400
 800a39c:	08018310 	.word	0x08018310
 800a3a0:	24000004 	.word	0x24000004
 800a3a4:	24000000 	.word	0x24000000

0800a3a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800a3b0:	4b15      	ldr	r3, [pc, #84]	; (800a408 <HAL_InitTick+0x60>)
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d101      	bne.n	800a3bc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e021      	b.n	800a400 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800a3bc:	4b13      	ldr	r3, [pc, #76]	; (800a40c <HAL_InitTick+0x64>)
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	4b11      	ldr	r3, [pc, #68]	; (800a408 <HAL_InitTick+0x60>)
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a3ca:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f001 fcaf 	bl	800bd36 <HAL_SYSTICK_Config>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d001      	beq.n	800a3e2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e00e      	b.n	800a400 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2b0f      	cmp	r3, #15
 800a3e6:	d80a      	bhi.n	800a3fe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	6879      	ldr	r1, [r7, #4]
 800a3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f0:	f001 fc79 	bl	800bce6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a3f4:	4a06      	ldr	r2, [pc, #24]	; (800a410 <HAL_InitTick+0x68>)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	e000      	b.n	800a400 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
}
 800a400:	4618      	mov	r0, r3
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}
 800a408:	2400000c 	.word	0x2400000c
 800a40c:	24000000 	.word	0x24000000
 800a410:	24000008 	.word	0x24000008

0800a414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a414:	b480      	push	{r7}
 800a416:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800a418:	4b06      	ldr	r3, [pc, #24]	; (800a434 <HAL_IncTick+0x20>)
 800a41a:	781b      	ldrb	r3, [r3, #0]
 800a41c:	461a      	mov	r2, r3
 800a41e:	4b06      	ldr	r3, [pc, #24]	; (800a438 <HAL_IncTick+0x24>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	4413      	add	r3, r2
 800a424:	4a04      	ldr	r2, [pc, #16]	; (800a438 <HAL_IncTick+0x24>)
 800a426:	6013      	str	r3, [r2, #0]
}
 800a428:	bf00      	nop
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr
 800a432:	bf00      	nop
 800a434:	2400000c 	.word	0x2400000c
 800a438:	240013a0 	.word	0x240013a0

0800a43c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a43c:	b480      	push	{r7}
 800a43e:	af00      	add	r7, sp, #0
  return uwTick;
 800a440:	4b03      	ldr	r3, [pc, #12]	; (800a450 <HAL_GetTick+0x14>)
 800a442:	681b      	ldr	r3, [r3, #0]
}
 800a444:	4618      	mov	r0, r3
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	240013a0 	.word	0x240013a0

0800a454 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	689b      	ldr	r3, [r3, #8]
 800a462:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	431a      	orrs	r2, r3
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	609a      	str	r2, [r3, #8]
}
 800a46e:	bf00      	nop
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	689b      	ldr	r3, [r3, #8]
 800a488:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	431a      	orrs	r2, r3
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	609a      	str	r2, [r3, #8]
}
 800a494:	bf00      	nop
 800a496:	370c      	adds	r7, #12
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	370c      	adds	r7, #12
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr

0800a4bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b087      	sub	sp, #28
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	607a      	str	r2, [r7, #4]
 800a4c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	3360      	adds	r3, #96	; 0x60
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	009b      	lsls	r3, r3, #2
 800a4d4:	4413      	add	r3, r2
 800a4d6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	4a10      	ldr	r2, [pc, #64]	; (800a51c <LL_ADC_SetOffset+0x60>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d10b      	bne.n	800a4f8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800a4f6:	e00b      	b.n	800a510 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	430b      	orrs	r3, r1
 800a50a:	431a      	orrs	r2, r3
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	601a      	str	r2, [r3, #0]
}
 800a510:	bf00      	nop
 800a512:	371c      	adds	r7, #28
 800a514:	46bd      	mov	sp, r7
 800a516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51a:	4770      	bx	lr
 800a51c:	58026000 	.word	0x58026000

0800a520 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	3360      	adds	r3, #96	; 0x60
 800a52e:	461a      	mov	r2, r3
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	4413      	add	r3, r2
 800a536:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800a540:	4618      	mov	r0, r3
 800a542:	3714      	adds	r7, #20
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	60f8      	str	r0, [r7, #12]
 800a554:	60b9      	str	r1, [r7, #8]
 800a556:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	f003 031f 	and.w	r3, r3, #31
 800a566:	6879      	ldr	r1, [r7, #4]
 800a568:	fa01 f303 	lsl.w	r3, r1, r3
 800a56c:	431a      	orrs	r2, r3
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	611a      	str	r2, [r3, #16]
}
 800a572:	bf00      	nop
 800a574:	3714      	adds	r7, #20
 800a576:	46bd      	mov	sp, r7
 800a578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57c:	4770      	bx	lr
	...

0800a580 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800a580:	b480      	push	{r7}
 800a582:	b087      	sub	sp, #28
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	4a0c      	ldr	r2, [pc, #48]	; (800a5c0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d00e      	beq.n	800a5b2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	3360      	adds	r3, #96	; 0x60
 800a598:	461a      	mov	r2, r3
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	4413      	add	r3, r2
 800a5a0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	431a      	orrs	r2, r3
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	601a      	str	r2, [r3, #0]
  }
}
 800a5b2:	bf00      	nop
 800a5b4:	371c      	adds	r7, #28
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	58026000 	.word	0x58026000

0800a5c4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b087      	sub	sp, #28
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	4a0c      	ldr	r2, [pc, #48]	; (800a604 <LL_ADC_SetOffsetSaturation+0x40>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d10e      	bne.n	800a5f6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	3360      	adds	r3, #96	; 0x60
 800a5dc:	461a      	mov	r2, r3
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	4413      	add	r3, r2
 800a5e4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	431a      	orrs	r2, r3
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800a5f6:	bf00      	nop
 800a5f8:	371c      	adds	r7, #28
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a600:	4770      	bx	lr
 800a602:	bf00      	nop
 800a604:	58026000 	.word	0x58026000

0800a608 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800a608:	b480      	push	{r7}
 800a60a:	b087      	sub	sp, #28
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	4a0c      	ldr	r2, [pc, #48]	; (800a648 <LL_ADC_SetOffsetSign+0x40>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d10e      	bne.n	800a63a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	3360      	adds	r3, #96	; 0x60
 800a620:	461a      	mov	r2, r3
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	4413      	add	r3, r2
 800a628:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	431a      	orrs	r2, r3
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800a63a:	bf00      	nop
 800a63c:	371c      	adds	r7, #28
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	58026000 	.word	0x58026000

0800a64c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b087      	sub	sp, #28
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	3360      	adds	r3, #96	; 0x60
 800a65c:	461a      	mov	r2, r3
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	009b      	lsls	r3, r3, #2
 800a662:	4413      	add	r3, r2
 800a664:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	4a0c      	ldr	r2, [pc, #48]	; (800a69c <LL_ADC_SetOffsetState+0x50>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d108      	bne.n	800a680 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	431a      	orrs	r2, r3
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800a67e:	e007      	b.n	800a690 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	431a      	orrs	r2, r3
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	601a      	str	r2, [r3, #0]
}
 800a690:	bf00      	nop
 800a692:	371c      	adds	r7, #28
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr
 800a69c:	58026000 	.word	0x58026000

0800a6a0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b087      	sub	sp, #28
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	3330      	adds	r3, #48	; 0x30
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	0a1b      	lsrs	r3, r3, #8
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	f003 030c 	and.w	r3, r3, #12
 800a6bc:	4413      	add	r3, r2
 800a6be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	f003 031f 	and.w	r3, r3, #31
 800a6ca:	211f      	movs	r1, #31
 800a6cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a6d0:	43db      	mvns	r3, r3
 800a6d2:	401a      	ands	r2, r3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	0e9b      	lsrs	r3, r3, #26
 800a6d8:	f003 011f 	and.w	r1, r3, #31
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	f003 031f 	and.w	r3, r3, #31
 800a6e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a6e6:	431a      	orrs	r2, r3
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800a6ec:	bf00      	nop
 800a6ee:	371c      	adds	r7, #28
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b087      	sub	sp, #28
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	3314      	adds	r3, #20
 800a708:	461a      	mov	r2, r3
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	0e5b      	lsrs	r3, r3, #25
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	f003 0304 	and.w	r3, r3, #4
 800a714:	4413      	add	r3, r2
 800a716:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	0d1b      	lsrs	r3, r3, #20
 800a720:	f003 031f 	and.w	r3, r3, #31
 800a724:	2107      	movs	r1, #7
 800a726:	fa01 f303 	lsl.w	r3, r1, r3
 800a72a:	43db      	mvns	r3, r3
 800a72c:	401a      	ands	r2, r3
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	0d1b      	lsrs	r3, r3, #20
 800a732:	f003 031f 	and.w	r3, r3, #31
 800a736:	6879      	ldr	r1, [r7, #4]
 800a738:	fa01 f303 	lsl.w	r3, r1, r3
 800a73c:	431a      	orrs	r2, r3
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800a742:	bf00      	nop
 800a744:	371c      	adds	r7, #28
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
	...

0800a750 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	4a1a      	ldr	r2, [pc, #104]	; (800a7c8 <LL_ADC_SetChannelSingleDiff+0x78>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d115      	bne.n	800a790 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a770:	43db      	mvns	r3, r3
 800a772:	401a      	ands	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f003 0318 	and.w	r3, r3, #24
 800a77a:	4914      	ldr	r1, [pc, #80]	; (800a7cc <LL_ADC_SetChannelSingleDiff+0x7c>)
 800a77c:	40d9      	lsrs	r1, r3
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	400b      	ands	r3, r1
 800a782:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a786:	431a      	orrs	r2, r3
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800a78e:	e014      	b.n	800a7ba <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a79c:	43db      	mvns	r3, r3
 800a79e:	401a      	ands	r2, r3
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f003 0318 	and.w	r3, r3, #24
 800a7a6:	4909      	ldr	r1, [pc, #36]	; (800a7cc <LL_ADC_SetChannelSingleDiff+0x7c>)
 800a7a8:	40d9      	lsrs	r1, r3
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	400b      	ands	r3, r1
 800a7ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7b2:	431a      	orrs	r2, r3
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800a7ba:	bf00      	nop
 800a7bc:	3714      	adds	r7, #20
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	58026000 	.word	0x58026000
 800a7cc:	000fffff 	.word	0x000fffff

0800a7d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b083      	sub	sp, #12
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	689a      	ldr	r2, [r3, #8]
 800a7dc:	4b04      	ldr	r3, [pc, #16]	; (800a7f0 <LL_ADC_DisableDeepPowerDown+0x20>)
 800a7de:	4013      	ands	r3, r2
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	6093      	str	r3, [r2, #8]
}
 800a7e4:	bf00      	nop
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr
 800a7f0:	5fffffc0 	.word	0x5fffffc0

0800a7f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a804:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a808:	d101      	bne.n	800a80e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800a80a:	2301      	movs	r3, #1
 800a80c:	e000      	b.n	800a810 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	689a      	ldr	r2, [r3, #8]
 800a828:	4b05      	ldr	r3, [pc, #20]	; (800a840 <LL_ADC_EnableInternalRegulator+0x24>)
 800a82a:	4013      	ands	r3, r2
 800a82c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800a834:	bf00      	nop
 800a836:	370c      	adds	r7, #12
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr
 800a840:	6fffffc0 	.word	0x6fffffc0

0800a844 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800a844:	b480      	push	{r7}
 800a846:	b083      	sub	sp, #12
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a854:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a858:	d101      	bne.n	800a85e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800a85a:	2301      	movs	r3, #1
 800a85c:	e000      	b.n	800a860 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800a85e:	2300      	movs	r3, #0
}
 800a860:	4618      	mov	r0, r3
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr

0800a86c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b083      	sub	sp, #12
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	689b      	ldr	r3, [r3, #8]
 800a878:	f003 0301 	and.w	r3, r3, #1
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d101      	bne.n	800a884 <LL_ADC_IsEnabled+0x18>
 800a880:	2301      	movs	r3, #1
 800a882:	e000      	b.n	800a886 <LL_ADC_IsEnabled+0x1a>
 800a884:	2300      	movs	r3, #0
}
 800a886:	4618      	mov	r0, r3
 800a888:	370c      	adds	r7, #12
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr

0800a892 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800a892:	b480      	push	{r7}
 800a894:	b083      	sub	sp, #12
 800a896:	af00      	add	r7, sp, #0
 800a898:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	f003 0304 	and.w	r3, r3, #4
 800a8a2:	2b04      	cmp	r3, #4
 800a8a4:	d101      	bne.n	800a8aa <LL_ADC_REG_IsConversionOngoing+0x18>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e000      	b.n	800a8ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a8aa:	2300      	movs	r3, #0
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	f003 0308 	and.w	r3, r3, #8
 800a8c8:	2b08      	cmp	r3, #8
 800a8ca:	d101      	bne.n	800a8d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e000      	b.n	800a8d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	370c      	adds	r7, #12
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr
	...

0800a8e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a8e0:	b590      	push	{r4, r7, lr}
 800a8e2:	b089      	sub	sp, #36	; 0x24
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d101      	bne.n	800a8fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e1ee      	b.n	800acd8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a904:	2b00      	cmp	r3, #0
 800a906:	d109      	bne.n	800a91c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f7fc fff7 	bl	80078fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4618      	mov	r0, r3
 800a922:	f7ff ff67 	bl	800a7f4 <LL_ADC_IsDeepPowerDownEnabled>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d004      	beq.n	800a936 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4618      	mov	r0, r3
 800a932:	f7ff ff4d 	bl	800a7d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7ff ff82 	bl	800a844 <LL_ADC_IsInternalRegulatorEnabled>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d114      	bne.n	800a970 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7ff ff66 	bl	800a81c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a950:	4b8e      	ldr	r3, [pc, #568]	; (800ab8c <HAL_ADC_Init+0x2ac>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	099b      	lsrs	r3, r3, #6
 800a956:	4a8e      	ldr	r2, [pc, #568]	; (800ab90 <HAL_ADC_Init+0x2b0>)
 800a958:	fba2 2303 	umull	r2, r3, r2, r3
 800a95c:	099b      	lsrs	r3, r3, #6
 800a95e:	3301      	adds	r3, #1
 800a960:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800a962:	e002      	b.n	800a96a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	3b01      	subs	r3, #1
 800a968:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d1f9      	bne.n	800a964 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4618      	mov	r0, r3
 800a976:	f7ff ff65 	bl	800a844 <LL_ADC_IsInternalRegulatorEnabled>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d10d      	bne.n	800a99c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a984:	f043 0210 	orr.w	r2, r3, #16
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a990:	f043 0201 	orr.w	r2, r3, #1
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7ff ff76 	bl	800a892 <LL_ADC_REG_IsConversionOngoing>
 800a9a6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9ac:	f003 0310 	and.w	r3, r3, #16
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	f040 8188 	bne.w	800acc6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f040 8184 	bne.w	800acc6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9c2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800a9c6:	f043 0202 	orr.w	r2, r3, #2
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7ff ff4a 	bl	800a86c <LL_ADC_IsEnabled>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d136      	bne.n	800aa4c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a6c      	ldr	r2, [pc, #432]	; (800ab94 <HAL_ADC_Init+0x2b4>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d004      	beq.n	800a9f2 <HAL_ADC_Init+0x112>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a6a      	ldr	r2, [pc, #424]	; (800ab98 <HAL_ADC_Init+0x2b8>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d10e      	bne.n	800aa10 <HAL_ADC_Init+0x130>
 800a9f2:	4868      	ldr	r0, [pc, #416]	; (800ab94 <HAL_ADC_Init+0x2b4>)
 800a9f4:	f7ff ff3a 	bl	800a86c <LL_ADC_IsEnabled>
 800a9f8:	4604      	mov	r4, r0
 800a9fa:	4867      	ldr	r0, [pc, #412]	; (800ab98 <HAL_ADC_Init+0x2b8>)
 800a9fc:	f7ff ff36 	bl	800a86c <LL_ADC_IsEnabled>
 800aa00:	4603      	mov	r3, r0
 800aa02:	4323      	orrs	r3, r4
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	bf0c      	ite	eq
 800aa08:	2301      	moveq	r3, #1
 800aa0a:	2300      	movne	r3, #0
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	e008      	b.n	800aa22 <HAL_ADC_Init+0x142>
 800aa10:	4862      	ldr	r0, [pc, #392]	; (800ab9c <HAL_ADC_Init+0x2bc>)
 800aa12:	f7ff ff2b 	bl	800a86c <LL_ADC_IsEnabled>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	bf0c      	ite	eq
 800aa1c:	2301      	moveq	r3, #1
 800aa1e:	2300      	movne	r3, #0
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d012      	beq.n	800aa4c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a5a      	ldr	r2, [pc, #360]	; (800ab94 <HAL_ADC_Init+0x2b4>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d004      	beq.n	800aa3a <HAL_ADC_Init+0x15a>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a58      	ldr	r2, [pc, #352]	; (800ab98 <HAL_ADC_Init+0x2b8>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d101      	bne.n	800aa3e <HAL_ADC_Init+0x15e>
 800aa3a:	4a59      	ldr	r2, [pc, #356]	; (800aba0 <HAL_ADC_Init+0x2c0>)
 800aa3c:	e000      	b.n	800aa40 <HAL_ADC_Init+0x160>
 800aa3e:	4a59      	ldr	r2, [pc, #356]	; (800aba4 <HAL_ADC_Init+0x2c4>)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	685b      	ldr	r3, [r3, #4]
 800aa44:	4619      	mov	r1, r3
 800aa46:	4610      	mov	r0, r2
 800aa48:	f7ff fd04 	bl	800a454 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a52      	ldr	r2, [pc, #328]	; (800ab9c <HAL_ADC_Init+0x2bc>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d129      	bne.n	800aaaa <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	7e5b      	ldrb	r3, [r3, #25]
 800aa5a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800aa60:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800aa66:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	2b08      	cmp	r3, #8
 800aa6e:	d013      	beq.n	800aa98 <HAL_ADC_Init+0x1b8>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	689b      	ldr	r3, [r3, #8]
 800aa74:	2b0c      	cmp	r3, #12
 800aa76:	d00d      	beq.n	800aa94 <HAL_ADC_Init+0x1b4>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	2b1c      	cmp	r3, #28
 800aa7e:	d007      	beq.n	800aa90 <HAL_ADC_Init+0x1b0>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	2b18      	cmp	r3, #24
 800aa86:	d101      	bne.n	800aa8c <HAL_ADC_Init+0x1ac>
 800aa88:	2318      	movs	r3, #24
 800aa8a:	e006      	b.n	800aa9a <HAL_ADC_Init+0x1ba>
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	e004      	b.n	800aa9a <HAL_ADC_Init+0x1ba>
 800aa90:	2310      	movs	r3, #16
 800aa92:	e002      	b.n	800aa9a <HAL_ADC_Init+0x1ba>
 800aa94:	2308      	movs	r3, #8
 800aa96:	e000      	b.n	800aa9a <HAL_ADC_Init+0x1ba>
 800aa98:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800aa9a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aaa2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	61bb      	str	r3, [r7, #24]
 800aaa8:	e00e      	b.n	800aac8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	7e5b      	ldrb	r3, [r3, #25]
 800aaae:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800aab4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800aaba:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aac2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800aac4:	4313      	orrs	r3, r2
 800aac6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d106      	bne.n	800aae0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad6:	3b01      	subs	r3, #1
 800aad8:	045b      	lsls	r3, r3, #17
 800aada:	69ba      	ldr	r2, [r7, #24]
 800aadc:	4313      	orrs	r3, r2
 800aade:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d009      	beq.n	800aafc <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaec:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaf4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800aaf6:	69ba      	ldr	r2, [r7, #24]
 800aaf8:	4313      	orrs	r3, r2
 800aafa:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a26      	ldr	r2, [pc, #152]	; (800ab9c <HAL_ADC_Init+0x2bc>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d115      	bne.n	800ab32 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	68da      	ldr	r2, [r3, #12]
 800ab0c:	4b26      	ldr	r3, [pc, #152]	; (800aba8 <HAL_ADC_Init+0x2c8>)
 800ab0e:	4013      	ands	r3, r2
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	6812      	ldr	r2, [r2, #0]
 800ab14:	69b9      	ldr	r1, [r7, #24]
 800ab16:	430b      	orrs	r3, r1
 800ab18:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	691b      	ldr	r3, [r3, #16]
 800ab20:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	430a      	orrs	r2, r1
 800ab2e:	611a      	str	r2, [r3, #16]
 800ab30:	e009      	b.n	800ab46 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	68da      	ldr	r2, [r3, #12]
 800ab38:	4b1c      	ldr	r3, [pc, #112]	; (800abac <HAL_ADC_Init+0x2cc>)
 800ab3a:	4013      	ands	r3, r2
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	6812      	ldr	r2, [r2, #0]
 800ab40:	69b9      	ldr	r1, [r7, #24]
 800ab42:	430b      	orrs	r3, r1
 800ab44:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	f7ff fea1 	bl	800a892 <LL_ADC_REG_IsConversionOngoing>
 800ab50:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4618      	mov	r0, r3
 800ab58:	f7ff feae 	bl	800a8b8 <LL_ADC_INJ_IsConversionOngoing>
 800ab5c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	f040 808e 	bne.w	800ac82 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	f040 808a 	bne.w	800ac82 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	4a0a      	ldr	r2, [pc, #40]	; (800ab9c <HAL_ADC_Init+0x2bc>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d11b      	bne.n	800abb0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	7e1b      	ldrb	r3, [r3, #24]
 800ab7c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ab84:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800ab86:	4313      	orrs	r3, r2
 800ab88:	61bb      	str	r3, [r7, #24]
 800ab8a:	e018      	b.n	800abbe <HAL_ADC_Init+0x2de>
 800ab8c:	24000000 	.word	0x24000000
 800ab90:	053e2d63 	.word	0x053e2d63
 800ab94:	40022000 	.word	0x40022000
 800ab98:	40022100 	.word	0x40022100
 800ab9c:	58026000 	.word	0x58026000
 800aba0:	40022300 	.word	0x40022300
 800aba4:	58026300 	.word	0x58026300
 800aba8:	fff04007 	.word	0xfff04007
 800abac:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	7e1b      	ldrb	r3, [r3, #24]
 800abb4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800abba:	4313      	orrs	r3, r2
 800abbc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68da      	ldr	r2, [r3, #12]
 800abc4:	4b46      	ldr	r3, [pc, #280]	; (800ace0 <HAL_ADC_Init+0x400>)
 800abc6:	4013      	ands	r3, r2
 800abc8:	687a      	ldr	r2, [r7, #4]
 800abca:	6812      	ldr	r2, [r2, #0]
 800abcc:	69b9      	ldr	r1, [r7, #24]
 800abce:	430b      	orrs	r3, r1
 800abd0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d137      	bne.n	800ac4c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abe0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a3f      	ldr	r2, [pc, #252]	; (800ace4 <HAL_ADC_Init+0x404>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d116      	bne.n	800ac1a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	691a      	ldr	r2, [r3, #16]
 800abf2:	4b3d      	ldr	r3, [pc, #244]	; (800ace8 <HAL_ADC_Init+0x408>)
 800abf4:	4013      	ands	r3, r2
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800abfe:	4311      	orrs	r1, r2
 800ac00:	687a      	ldr	r2, [r7, #4]
 800ac02:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ac04:	4311      	orrs	r1, r2
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ac0a:	430a      	orrs	r2, r1
 800ac0c:	431a      	orrs	r2, r3
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f042 0201 	orr.w	r2, r2, #1
 800ac16:	611a      	str	r2, [r3, #16]
 800ac18:	e020      	b.n	800ac5c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	691a      	ldr	r2, [r3, #16]
 800ac20:	4b32      	ldr	r3, [pc, #200]	; (800acec <HAL_ADC_Init+0x40c>)
 800ac22:	4013      	ands	r3, r2
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ac28:	3a01      	subs	r2, #1
 800ac2a:	0411      	lsls	r1, r2, #16
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800ac30:	4311      	orrs	r1, r2
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800ac36:	4311      	orrs	r1, r2
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ac3c:	430a      	orrs	r2, r1
 800ac3e:	431a      	orrs	r2, r3
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f042 0201 	orr.w	r2, r2, #1
 800ac48:	611a      	str	r2, [r3, #16]
 800ac4a:	e007      	b.n	800ac5c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	691a      	ldr	r2, [r3, #16]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f022 0201 	bic.w	r2, r2, #1
 800ac5a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	691b      	ldr	r3, [r3, #16]
 800ac62:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	430a      	orrs	r2, r1
 800ac70:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a1b      	ldr	r2, [pc, #108]	; (800ace4 <HAL_ADC_Init+0x404>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d002      	beq.n	800ac82 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 fd63 	bl	800b748 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d10c      	bne.n	800aca4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac90:	f023 010f 	bic.w	r1, r3, #15
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	69db      	ldr	r3, [r3, #28]
 800ac98:	1e5a      	subs	r2, r3, #1
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	430a      	orrs	r2, r1
 800aca0:	631a      	str	r2, [r3, #48]	; 0x30
 800aca2:	e007      	b.n	800acb4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f022 020f 	bic.w	r2, r2, #15
 800acb2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acb8:	f023 0303 	bic.w	r3, r3, #3
 800acbc:	f043 0201 	orr.w	r2, r3, #1
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	661a      	str	r2, [r3, #96]	; 0x60
 800acc4:	e007      	b.n	800acd6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acca:	f043 0210 	orr.w	r2, r3, #16
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800acd6:	7ffb      	ldrb	r3, [r7, #31]
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3724      	adds	r7, #36	; 0x24
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd90      	pop	{r4, r7, pc}
 800ace0:	ffffbffc 	.word	0xffffbffc
 800ace4:	58026000 	.word	0x58026000
 800ace8:	fc00f81f 	.word	0xfc00f81f
 800acec:	fc00f81e 	.word	0xfc00f81e

0800acf0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800acf0:	b590      	push	{r4, r7, lr}
 800acf2:	b0b9      	sub	sp, #228	; 0xe4
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800acfa:	2300      	movs	r3, #0
 800acfc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800ad00:	2300      	movs	r3, #0
 800ad02:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad0a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	68db      	ldr	r3, [r3, #12]
 800ad10:	4ab3      	ldr	r2, [pc, #716]	; (800afe0 <HAL_ADC_ConfigChannel+0x2f0>)
 800ad12:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d102      	bne.n	800ad24 <HAL_ADC_ConfigChannel+0x34>
 800ad1e:	2302      	movs	r3, #2
 800ad20:	f000 bcfa 	b.w	800b718 <HAL_ADC_ConfigChannel+0xa28>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f7ff fdae 	bl	800a892 <LL_ADC_REG_IsConversionOngoing>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	f040 84de 	bne.w	800b6fa <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4aa8      	ldr	r2, [pc, #672]	; (800afe4 <HAL_ADC_ConfigChannel+0x2f4>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d033      	beq.n	800adb0 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d108      	bne.n	800ad66 <HAL_ADC_ConfigChannel+0x76>
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	0e9b      	lsrs	r3, r3, #26
 800ad5a:	f003 031f 	and.w	r3, r3, #31
 800ad5e:	2201      	movs	r2, #1
 800ad60:	fa02 f303 	lsl.w	r3, r2, r3
 800ad64:	e01d      	b.n	800ada2 <HAL_ADC_ConfigChannel+0xb2>
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ad72:	fa93 f3a3 	rbit	r3, r3
 800ad76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800ad7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ad7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800ad82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d101      	bne.n	800ad8e <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800ad8a:	2320      	movs	r3, #32
 800ad8c:	e004      	b.n	800ad98 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800ad8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad92:	fab3 f383 	clz	r3, r3
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	f003 031f 	and.w	r3, r3, #31
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	fa02 f303 	lsl.w	r3, r2, r3
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	6812      	ldr	r2, [r2, #0]
 800ada6:	69d1      	ldr	r1, [r2, #28]
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	6812      	ldr	r2, [r2, #0]
 800adac:	430b      	orrs	r3, r1
 800adae:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6818      	ldr	r0, [r3, #0]
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	6859      	ldr	r1, [r3, #4]
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	461a      	mov	r2, r3
 800adbe:	f7ff fc6f 	bl	800a6a0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7ff fd63 	bl	800a892 <LL_ADC_REG_IsConversionOngoing>
 800adcc:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4618      	mov	r0, r3
 800add6:	f7ff fd6f 	bl	800a8b8 <LL_ADC_INJ_IsConversionOngoing>
 800adda:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800adde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f040 8270 	bne.w	800b2c8 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800ade8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800adec:	2b00      	cmp	r3, #0
 800adee:	f040 826b 	bne.w	800b2c8 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6818      	ldr	r0, [r3, #0]
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	6819      	ldr	r1, [r3, #0]
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	689b      	ldr	r3, [r3, #8]
 800adfe:	461a      	mov	r2, r3
 800ae00:	f7ff fc7a 	bl	800a6f8 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a76      	ldr	r2, [pc, #472]	; (800afe4 <HAL_ADC_ConfigChannel+0x2f4>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d10d      	bne.n	800ae2a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	695a      	ldr	r2, [r3, #20]
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	68db      	ldr	r3, [r3, #12]
 800ae18:	08db      	lsrs	r3, r3, #3
 800ae1a:	f003 0303 	and.w	r3, r3, #3
 800ae1e:	005b      	lsls	r3, r3, #1
 800ae20:	fa02 f303 	lsl.w	r3, r2, r3
 800ae24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ae28:	e032      	b.n	800ae90 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800ae2a:	4b6f      	ldr	r3, [pc, #444]	; (800afe8 <HAL_ADC_ConfigChannel+0x2f8>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ae32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae36:	d10b      	bne.n	800ae50 <HAL_ADC_ConfigChannel+0x160>
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	695a      	ldr	r2, [r3, #20]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	68db      	ldr	r3, [r3, #12]
 800ae42:	089b      	lsrs	r3, r3, #2
 800ae44:	f003 0307 	and.w	r3, r3, #7
 800ae48:	005b      	lsls	r3, r3, #1
 800ae4a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae4e:	e01d      	b.n	800ae8c <HAL_ADC_ConfigChannel+0x19c>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	68db      	ldr	r3, [r3, #12]
 800ae56:	f003 0310 	and.w	r3, r3, #16
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d10b      	bne.n	800ae76 <HAL_ADC_ConfigChannel+0x186>
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	695a      	ldr	r2, [r3, #20]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	68db      	ldr	r3, [r3, #12]
 800ae68:	089b      	lsrs	r3, r3, #2
 800ae6a:	f003 0307 	and.w	r3, r3, #7
 800ae6e:	005b      	lsls	r3, r3, #1
 800ae70:	fa02 f303 	lsl.w	r3, r2, r3
 800ae74:	e00a      	b.n	800ae8c <HAL_ADC_ConfigChannel+0x19c>
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	695a      	ldr	r2, [r3, #20]
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	089b      	lsrs	r3, r3, #2
 800ae82:	f003 0304 	and.w	r3, r3, #4
 800ae86:	005b      	lsls	r3, r3, #1
 800ae88:	fa02 f303 	lsl.w	r3, r2, r3
 800ae8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	2b04      	cmp	r3, #4
 800ae96:	d048      	beq.n	800af2a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6818      	ldr	r0, [r3, #0]
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	6919      	ldr	r1, [r3, #16]
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aea8:	f7ff fb08 	bl	800a4bc <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a4c      	ldr	r2, [pc, #304]	; (800afe4 <HAL_ADC_ConfigChannel+0x2f4>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d119      	bne.n	800aeea <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6818      	ldr	r0, [r3, #0]
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	6919      	ldr	r1, [r3, #16]
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	69db      	ldr	r3, [r3, #28]
 800aec2:	461a      	mov	r2, r3
 800aec4:	f7ff fba0 	bl	800a608 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6818      	ldr	r0, [r3, #0]
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	6919      	ldr	r1, [r3, #16]
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aed6:	2b01      	cmp	r3, #1
 800aed8:	d102      	bne.n	800aee0 <HAL_ADC_ConfigChannel+0x1f0>
 800aeda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aede:	e000      	b.n	800aee2 <HAL_ADC_ConfigChannel+0x1f2>
 800aee0:	2300      	movs	r3, #0
 800aee2:	461a      	mov	r2, r3
 800aee4:	f7ff fb6e 	bl	800a5c4 <LL_ADC_SetOffsetSaturation>
 800aee8:	e1ee      	b.n	800b2c8 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6818      	ldr	r0, [r3, #0]
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	6919      	ldr	r1, [r3, #16]
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800aef8:	2b01      	cmp	r3, #1
 800aefa:	d102      	bne.n	800af02 <HAL_ADC_ConfigChannel+0x212>
 800aefc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af00:	e000      	b.n	800af04 <HAL_ADC_ConfigChannel+0x214>
 800af02:	2300      	movs	r3, #0
 800af04:	461a      	mov	r2, r3
 800af06:	f7ff fb3b 	bl	800a580 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6818      	ldr	r0, [r3, #0]
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	6919      	ldr	r1, [r3, #16]
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	7e1b      	ldrb	r3, [r3, #24]
 800af16:	2b01      	cmp	r3, #1
 800af18:	d102      	bne.n	800af20 <HAL_ADC_ConfigChannel+0x230>
 800af1a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800af1e:	e000      	b.n	800af22 <HAL_ADC_ConfigChannel+0x232>
 800af20:	2300      	movs	r3, #0
 800af22:	461a      	mov	r2, r3
 800af24:	f7ff fb12 	bl	800a54c <LL_ADC_SetDataRightShift>
 800af28:	e1ce      	b.n	800b2c8 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4a2d      	ldr	r2, [pc, #180]	; (800afe4 <HAL_ADC_ConfigChannel+0x2f4>)
 800af30:	4293      	cmp	r3, r2
 800af32:	f040 8181 	bne.w	800b238 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2100      	movs	r1, #0
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7ff faef 	bl	800a520 <LL_ADC_GetOffsetChannel>
 800af42:	4603      	mov	r3, r0
 800af44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d10a      	bne.n	800af62 <HAL_ADC_ConfigChannel+0x272>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2100      	movs	r1, #0
 800af52:	4618      	mov	r0, r3
 800af54:	f7ff fae4 	bl	800a520 <LL_ADC_GetOffsetChannel>
 800af58:	4603      	mov	r3, r0
 800af5a:	0e9b      	lsrs	r3, r3, #26
 800af5c:	f003 021f 	and.w	r2, r3, #31
 800af60:	e01e      	b.n	800afa0 <HAL_ADC_ConfigChannel+0x2b0>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2100      	movs	r1, #0
 800af68:	4618      	mov	r0, r3
 800af6a:	f7ff fad9 	bl	800a520 <LL_ADC_GetOffsetChannel>
 800af6e:	4603      	mov	r3, r0
 800af70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800af78:	fa93 f3a3 	rbit	r3, r3
 800af7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 800af80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800af84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800af88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d101      	bne.n	800af94 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 800af90:	2320      	movs	r3, #32
 800af92:	e004      	b.n	800af9e <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 800af94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800af98:	fab3 f383 	clz	r3, r3
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	461a      	mov	r2, r3
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d105      	bne.n	800afb8 <HAL_ADC_ConfigChannel+0x2c8>
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	0e9b      	lsrs	r3, r3, #26
 800afb2:	f003 031f 	and.w	r3, r3, #31
 800afb6:	e01e      	b.n	800aff6 <HAL_ADC_ConfigChannel+0x306>
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800afc4:	fa93 f3a3 	rbit	r3, r3
 800afc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800afcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800afd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800afd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d107      	bne.n	800afec <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 800afdc:	2320      	movs	r3, #32
 800afde:	e00a      	b.n	800aff6 <HAL_ADC_ConfigChannel+0x306>
 800afe0:	47ff0000 	.word	0x47ff0000
 800afe4:	58026000 	.word	0x58026000
 800afe8:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 800afec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800aff0:	fab3 f383 	clz	r3, r3
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	429a      	cmp	r2, r3
 800aff8:	d106      	bne.n	800b008 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2200      	movs	r2, #0
 800b000:	2100      	movs	r1, #0
 800b002:	4618      	mov	r0, r3
 800b004:	f7ff fb22 	bl	800a64c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2101      	movs	r1, #1
 800b00e:	4618      	mov	r0, r3
 800b010:	f7ff fa86 	bl	800a520 <LL_ADC_GetOffsetChannel>
 800b014:	4603      	mov	r3, r0
 800b016:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d10a      	bne.n	800b034 <HAL_ADC_ConfigChannel+0x344>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2101      	movs	r1, #1
 800b024:	4618      	mov	r0, r3
 800b026:	f7ff fa7b 	bl	800a520 <LL_ADC_GetOffsetChannel>
 800b02a:	4603      	mov	r3, r0
 800b02c:	0e9b      	lsrs	r3, r3, #26
 800b02e:	f003 021f 	and.w	r2, r3, #31
 800b032:	e01e      	b.n	800b072 <HAL_ADC_ConfigChannel+0x382>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	2101      	movs	r1, #1
 800b03a:	4618      	mov	r0, r3
 800b03c:	f7ff fa70 	bl	800a520 <LL_ADC_GetOffsetChannel>
 800b040:	4603      	mov	r3, r0
 800b042:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b046:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b04a:	fa93 f3a3 	rbit	r3, r3
 800b04e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800b052:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b056:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800b05a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d101      	bne.n	800b066 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800b062:	2320      	movs	r3, #32
 800b064:	e004      	b.n	800b070 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800b066:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b06a:	fab3 f383 	clz	r3, r3
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	461a      	mov	r2, r3
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d105      	bne.n	800b08a <HAL_ADC_ConfigChannel+0x39a>
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	0e9b      	lsrs	r3, r3, #26
 800b084:	f003 031f 	and.w	r3, r3, #31
 800b088:	e018      	b.n	800b0bc <HAL_ADC_ConfigChannel+0x3cc>
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b092:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b096:	fa93 f3a3 	rbit	r3, r3
 800b09a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800b09e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b0a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800b0a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d101      	bne.n	800b0b2 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800b0ae:	2320      	movs	r3, #32
 800b0b0:	e004      	b.n	800b0bc <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800b0b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0b6:	fab3 f383 	clz	r3, r3
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d106      	bne.n	800b0ce <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	2101      	movs	r1, #1
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7ff fabf 	bl	800a64c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2102      	movs	r1, #2
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7ff fa23 	bl	800a520 <LL_ADC_GetOffsetChannel>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10a      	bne.n	800b0fa <HAL_ADC_ConfigChannel+0x40a>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2102      	movs	r1, #2
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7ff fa18 	bl	800a520 <LL_ADC_GetOffsetChannel>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	0e9b      	lsrs	r3, r3, #26
 800b0f4:	f003 021f 	and.w	r2, r3, #31
 800b0f8:	e01e      	b.n	800b138 <HAL_ADC_ConfigChannel+0x448>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2102      	movs	r1, #2
 800b100:	4618      	mov	r0, r3
 800b102:	f7ff fa0d 	bl	800a520 <LL_ADC_GetOffsetChannel>
 800b106:	4603      	mov	r3, r0
 800b108:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b10c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b110:	fa93 f3a3 	rbit	r3, r3
 800b114:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800b118:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b11c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800b120:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b124:	2b00      	cmp	r3, #0
 800b126:	d101      	bne.n	800b12c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800b128:	2320      	movs	r3, #32
 800b12a:	e004      	b.n	800b136 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800b12c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b130:	fab3 f383 	clz	r3, r3
 800b134:	b2db      	uxtb	r3, r3
 800b136:	461a      	mov	r2, r3
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b140:	2b00      	cmp	r3, #0
 800b142:	d105      	bne.n	800b150 <HAL_ADC_ConfigChannel+0x460>
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	0e9b      	lsrs	r3, r3, #26
 800b14a:	f003 031f 	and.w	r3, r3, #31
 800b14e:	e014      	b.n	800b17a <HAL_ADC_ConfigChannel+0x48a>
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b156:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b158:	fa93 f3a3 	rbit	r3, r3
 800b15c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800b15e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b160:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800b164:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d101      	bne.n	800b170 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 800b16c:	2320      	movs	r3, #32
 800b16e:	e004      	b.n	800b17a <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 800b170:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b174:	fab3 f383 	clz	r3, r3
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d106      	bne.n	800b18c <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	2200      	movs	r2, #0
 800b184:	2102      	movs	r1, #2
 800b186:	4618      	mov	r0, r3
 800b188:	f7ff fa60 	bl	800a64c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2103      	movs	r1, #3
 800b192:	4618      	mov	r0, r3
 800b194:	f7ff f9c4 	bl	800a520 <LL_ADC_GetOffsetChannel>
 800b198:	4603      	mov	r3, r0
 800b19a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d10a      	bne.n	800b1b8 <HAL_ADC_ConfigChannel+0x4c8>
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	2103      	movs	r1, #3
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f7ff f9b9 	bl	800a520 <LL_ADC_GetOffsetChannel>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	0e9b      	lsrs	r3, r3, #26
 800b1b2:	f003 021f 	and.w	r2, r3, #31
 800b1b6:	e017      	b.n	800b1e8 <HAL_ADC_ConfigChannel+0x4f8>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	2103      	movs	r1, #3
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7ff f9ae 	bl	800a520 <LL_ADC_GetOffsetChannel>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b1c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b1ca:	fa93 f3a3 	rbit	r3, r3
 800b1ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800b1d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1d2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800b1d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d101      	bne.n	800b1de <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800b1da:	2320      	movs	r3, #32
 800b1dc:	e003      	b.n	800b1e6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800b1de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1e0:	fab3 f383 	clz	r3, r3
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d105      	bne.n	800b200 <HAL_ADC_ConfigChannel+0x510>
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	0e9b      	lsrs	r3, r3, #26
 800b1fa:	f003 031f 	and.w	r3, r3, #31
 800b1fe:	e011      	b.n	800b224 <HAL_ADC_ConfigChannel+0x534>
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b206:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b208:	fa93 f3a3 	rbit	r3, r3
 800b20c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800b20e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b210:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800b212:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b214:	2b00      	cmp	r3, #0
 800b216:	d101      	bne.n	800b21c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 800b218:	2320      	movs	r3, #32
 800b21a:	e003      	b.n	800b224 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 800b21c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b21e:	fab3 f383 	clz	r3, r3
 800b222:	b2db      	uxtb	r3, r3
 800b224:	429a      	cmp	r2, r3
 800b226:	d14f      	bne.n	800b2c8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2200      	movs	r2, #0
 800b22e:	2103      	movs	r1, #3
 800b230:	4618      	mov	r0, r3
 800b232:	f7ff fa0b 	bl	800a64c <LL_ADC_SetOffsetState>
 800b236:	e047      	b.n	800b2c8 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b23e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	069b      	lsls	r3, r3, #26
 800b248:	429a      	cmp	r2, r3
 800b24a:	d107      	bne.n	800b25c <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800b25a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b262:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	069b      	lsls	r3, r3, #26
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d107      	bne.n	800b280 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800b27e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b286:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	069b      	lsls	r3, r3, #26
 800b290:	429a      	cmp	r2, r3
 800b292:	d107      	bne.n	800b2a4 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800b2a2:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	069b      	lsls	r3, r3, #26
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d107      	bne.n	800b2c8 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800b2c6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4618      	mov	r0, r3
 800b2ce:	f7ff facd 	bl	800a86c <LL_ADC_IsEnabled>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f040 8219 	bne.w	800b70c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6818      	ldr	r0, [r3, #0]
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	6819      	ldr	r1, [r3, #0]
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	68db      	ldr	r3, [r3, #12]
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	f7ff fa32 	bl	800a750 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	4aa1      	ldr	r2, [pc, #644]	; (800b578 <HAL_ADC_ConfigChannel+0x888>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	f040 812e 	bne.w	800b554 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b304:	2b00      	cmp	r3, #0
 800b306:	d10b      	bne.n	800b320 <HAL_ADC_ConfigChannel+0x630>
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	0e9b      	lsrs	r3, r3, #26
 800b30e:	3301      	adds	r3, #1
 800b310:	f003 031f 	and.w	r3, r3, #31
 800b314:	2b09      	cmp	r3, #9
 800b316:	bf94      	ite	ls
 800b318:	2301      	movls	r3, #1
 800b31a:	2300      	movhi	r3, #0
 800b31c:	b2db      	uxtb	r3, r3
 800b31e:	e019      	b.n	800b354 <HAL_ADC_ConfigChannel+0x664>
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b326:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b328:	fa93 f3a3 	rbit	r3, r3
 800b32c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800b32e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b330:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800b332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b334:	2b00      	cmp	r3, #0
 800b336:	d101      	bne.n	800b33c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800b338:	2320      	movs	r3, #32
 800b33a:	e003      	b.n	800b344 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 800b33c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b33e:	fab3 f383 	clz	r3, r3
 800b342:	b2db      	uxtb	r3, r3
 800b344:	3301      	adds	r3, #1
 800b346:	f003 031f 	and.w	r3, r3, #31
 800b34a:	2b09      	cmp	r3, #9
 800b34c:	bf94      	ite	ls
 800b34e:	2301      	movls	r3, #1
 800b350:	2300      	movhi	r3, #0
 800b352:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b354:	2b00      	cmp	r3, #0
 800b356:	d079      	beq.n	800b44c <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b360:	2b00      	cmp	r3, #0
 800b362:	d107      	bne.n	800b374 <HAL_ADC_ConfigChannel+0x684>
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	0e9b      	lsrs	r3, r3, #26
 800b36a:	3301      	adds	r3, #1
 800b36c:	069b      	lsls	r3, r3, #26
 800b36e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b372:	e015      	b.n	800b3a0 <HAL_ADC_ConfigChannel+0x6b0>
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b37a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b37c:	fa93 f3a3 	rbit	r3, r3
 800b380:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800b382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b384:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800b386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d101      	bne.n	800b390 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 800b38c:	2320      	movs	r3, #32
 800b38e:	e003      	b.n	800b398 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 800b390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b392:	fab3 f383 	clz	r3, r3
 800b396:	b2db      	uxtb	r3, r3
 800b398:	3301      	adds	r3, #1
 800b39a:	069b      	lsls	r3, r3, #26
 800b39c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d109      	bne.n	800b3c0 <HAL_ADC_ConfigChannel+0x6d0>
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	0e9b      	lsrs	r3, r3, #26
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	f003 031f 	and.w	r3, r3, #31
 800b3b8:	2101      	movs	r1, #1
 800b3ba:	fa01 f303 	lsl.w	r3, r1, r3
 800b3be:	e017      	b.n	800b3f0 <HAL_ADC_ConfigChannel+0x700>
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b3c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3c8:	fa93 f3a3 	rbit	r3, r3
 800b3cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800b3ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3d0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800b3d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d101      	bne.n	800b3dc <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 800b3d8:	2320      	movs	r3, #32
 800b3da:	e003      	b.n	800b3e4 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 800b3dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3de:	fab3 f383 	clz	r3, r3
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	f003 031f 	and.w	r3, r3, #31
 800b3ea:	2101      	movs	r1, #1
 800b3ec:	fa01 f303 	lsl.w	r3, r1, r3
 800b3f0:	ea42 0103 	orr.w	r1, r2, r3
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d10a      	bne.n	800b416 <HAL_ADC_ConfigChannel+0x726>
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	0e9b      	lsrs	r3, r3, #26
 800b406:	3301      	adds	r3, #1
 800b408:	f003 021f 	and.w	r2, r3, #31
 800b40c:	4613      	mov	r3, r2
 800b40e:	005b      	lsls	r3, r3, #1
 800b410:	4413      	add	r3, r2
 800b412:	051b      	lsls	r3, r3, #20
 800b414:	e018      	b.n	800b448 <HAL_ADC_ConfigChannel+0x758>
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b41c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b41e:	fa93 f3a3 	rbit	r3, r3
 800b422:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800b424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b426:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800b428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d101      	bne.n	800b432 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800b42e:	2320      	movs	r3, #32
 800b430:	e003      	b.n	800b43a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800b432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b434:	fab3 f383 	clz	r3, r3
 800b438:	b2db      	uxtb	r3, r3
 800b43a:	3301      	adds	r3, #1
 800b43c:	f003 021f 	and.w	r2, r3, #31
 800b440:	4613      	mov	r3, r2
 800b442:	005b      	lsls	r3, r3, #1
 800b444:	4413      	add	r3, r2
 800b446:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b448:	430b      	orrs	r3, r1
 800b44a:	e07e      	b.n	800b54a <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b454:	2b00      	cmp	r3, #0
 800b456:	d107      	bne.n	800b468 <HAL_ADC_ConfigChannel+0x778>
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	0e9b      	lsrs	r3, r3, #26
 800b45e:	3301      	adds	r3, #1
 800b460:	069b      	lsls	r3, r3, #26
 800b462:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b466:	e015      	b.n	800b494 <HAL_ADC_ConfigChannel+0x7a4>
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b470:	fa93 f3a3 	rbit	r3, r3
 800b474:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800b476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b478:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800b47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d101      	bne.n	800b484 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 800b480:	2320      	movs	r3, #32
 800b482:	e003      	b.n	800b48c <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 800b484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b486:	fab3 f383 	clz	r3, r3
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	3301      	adds	r3, #1
 800b48e:	069b      	lsls	r3, r3, #26
 800b490:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d109      	bne.n	800b4b4 <HAL_ADC_ConfigChannel+0x7c4>
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	0e9b      	lsrs	r3, r3, #26
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	f003 031f 	and.w	r3, r3, #31
 800b4ac:	2101      	movs	r1, #1
 800b4ae:	fa01 f303 	lsl.w	r3, r1, r3
 800b4b2:	e017      	b.n	800b4e4 <HAL_ADC_ConfigChannel+0x7f4>
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	fa93 f3a3 	rbit	r3, r3
 800b4c0:	61bb      	str	r3, [r7, #24]
  return result;
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800b4c6:	6a3b      	ldr	r3, [r7, #32]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d101      	bne.n	800b4d0 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 800b4cc:	2320      	movs	r3, #32
 800b4ce:	e003      	b.n	800b4d8 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 800b4d0:	6a3b      	ldr	r3, [r7, #32]
 800b4d2:	fab3 f383 	clz	r3, r3
 800b4d6:	b2db      	uxtb	r3, r3
 800b4d8:	3301      	adds	r3, #1
 800b4da:	f003 031f 	and.w	r3, r3, #31
 800b4de:	2101      	movs	r1, #1
 800b4e0:	fa01 f303 	lsl.w	r3, r1, r3
 800b4e4:	ea42 0103 	orr.w	r1, r2, r3
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d10d      	bne.n	800b510 <HAL_ADC_ConfigChannel+0x820>
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	0e9b      	lsrs	r3, r3, #26
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	f003 021f 	and.w	r2, r3, #31
 800b500:	4613      	mov	r3, r2
 800b502:	005b      	lsls	r3, r3, #1
 800b504:	4413      	add	r3, r2
 800b506:	3b1e      	subs	r3, #30
 800b508:	051b      	lsls	r3, r3, #20
 800b50a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b50e:	e01b      	b.n	800b548 <HAL_ADC_ConfigChannel+0x858>
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	fa93 f3a3 	rbit	r3, r3
 800b51c:	60fb      	str	r3, [r7, #12]
  return result;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d101      	bne.n	800b52c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 800b528:	2320      	movs	r3, #32
 800b52a:	e003      	b.n	800b534 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	fab3 f383 	clz	r3, r3
 800b532:	b2db      	uxtb	r3, r3
 800b534:	3301      	adds	r3, #1
 800b536:	f003 021f 	and.w	r2, r3, #31
 800b53a:	4613      	mov	r3, r2
 800b53c:	005b      	lsls	r3, r3, #1
 800b53e:	4413      	add	r3, r2
 800b540:	3b1e      	subs	r3, #30
 800b542:	051b      	lsls	r3, r3, #20
 800b544:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b548:	430b      	orrs	r3, r1
 800b54a:	683a      	ldr	r2, [r7, #0]
 800b54c:	6892      	ldr	r2, [r2, #8]
 800b54e:	4619      	mov	r1, r3
 800b550:	f7ff f8d2 	bl	800a6f8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	f280 80d7 	bge.w	800b70c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a06      	ldr	r2, [pc, #24]	; (800b57c <HAL_ADC_ConfigChannel+0x88c>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d004      	beq.n	800b572 <HAL_ADC_ConfigChannel+0x882>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a04      	ldr	r2, [pc, #16]	; (800b580 <HAL_ADC_ConfigChannel+0x890>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d10a      	bne.n	800b588 <HAL_ADC_ConfigChannel+0x898>
 800b572:	4b04      	ldr	r3, [pc, #16]	; (800b584 <HAL_ADC_ConfigChannel+0x894>)
 800b574:	e009      	b.n	800b58a <HAL_ADC_ConfigChannel+0x89a>
 800b576:	bf00      	nop
 800b578:	47ff0000 	.word	0x47ff0000
 800b57c:	40022000 	.word	0x40022000
 800b580:	40022100 	.word	0x40022100
 800b584:	40022300 	.word	0x40022300
 800b588:	4b65      	ldr	r3, [pc, #404]	; (800b720 <HAL_ADC_ConfigChannel+0xa30>)
 800b58a:	4618      	mov	r0, r3
 800b58c:	f7fe ff88 	bl	800a4a0 <LL_ADC_GetCommonPathInternalCh>
 800b590:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a62      	ldr	r2, [pc, #392]	; (800b724 <HAL_ADC_ConfigChannel+0xa34>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d004      	beq.n	800b5a8 <HAL_ADC_ConfigChannel+0x8b8>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4a61      	ldr	r2, [pc, #388]	; (800b728 <HAL_ADC_ConfigChannel+0xa38>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d10e      	bne.n	800b5c6 <HAL_ADC_ConfigChannel+0x8d6>
 800b5a8:	485e      	ldr	r0, [pc, #376]	; (800b724 <HAL_ADC_ConfigChannel+0xa34>)
 800b5aa:	f7ff f95f 	bl	800a86c <LL_ADC_IsEnabled>
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	485d      	ldr	r0, [pc, #372]	; (800b728 <HAL_ADC_ConfigChannel+0xa38>)
 800b5b2:	f7ff f95b 	bl	800a86c <LL_ADC_IsEnabled>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	4323      	orrs	r3, r4
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	bf0c      	ite	eq
 800b5be:	2301      	moveq	r3, #1
 800b5c0:	2300      	movne	r3, #0
 800b5c2:	b2db      	uxtb	r3, r3
 800b5c4:	e008      	b.n	800b5d8 <HAL_ADC_ConfigChannel+0x8e8>
 800b5c6:	4859      	ldr	r0, [pc, #356]	; (800b72c <HAL_ADC_ConfigChannel+0xa3c>)
 800b5c8:	f7ff f950 	bl	800a86c <LL_ADC_IsEnabled>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	bf0c      	ite	eq
 800b5d2:	2301      	moveq	r3, #1
 800b5d4:	2300      	movne	r3, #0
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f000 8084 	beq.w	800b6e6 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4a53      	ldr	r2, [pc, #332]	; (800b730 <HAL_ADC_ConfigChannel+0xa40>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d132      	bne.n	800b64e <HAL_ADC_ConfigChannel+0x95e>
 800b5e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b5ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d12c      	bne.n	800b64e <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4a4c      	ldr	r2, [pc, #304]	; (800b72c <HAL_ADC_ConfigChannel+0xa3c>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	f040 8086 	bne.w	800b70c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a47      	ldr	r2, [pc, #284]	; (800b724 <HAL_ADC_ConfigChannel+0xa34>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d004      	beq.n	800b614 <HAL_ADC_ConfigChannel+0x924>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a46      	ldr	r2, [pc, #280]	; (800b728 <HAL_ADC_ConfigChannel+0xa38>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d101      	bne.n	800b618 <HAL_ADC_ConfigChannel+0x928>
 800b614:	4a47      	ldr	r2, [pc, #284]	; (800b734 <HAL_ADC_ConfigChannel+0xa44>)
 800b616:	e000      	b.n	800b61a <HAL_ADC_ConfigChannel+0x92a>
 800b618:	4a41      	ldr	r2, [pc, #260]	; (800b720 <HAL_ADC_ConfigChannel+0xa30>)
 800b61a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b61e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b622:	4619      	mov	r1, r3
 800b624:	4610      	mov	r0, r2
 800b626:	f7fe ff28 	bl	800a47a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b62a:	4b43      	ldr	r3, [pc, #268]	; (800b738 <HAL_ADC_ConfigChannel+0xa48>)
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	099b      	lsrs	r3, r3, #6
 800b630:	4a42      	ldr	r2, [pc, #264]	; (800b73c <HAL_ADC_ConfigChannel+0xa4c>)
 800b632:	fba2 2303 	umull	r2, r3, r2, r3
 800b636:	099b      	lsrs	r3, r3, #6
 800b638:	3301      	adds	r3, #1
 800b63a:	005b      	lsls	r3, r3, #1
 800b63c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800b63e:	e002      	b.n	800b646 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	3b01      	subs	r3, #1
 800b644:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d1f9      	bne.n	800b640 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b64c:	e05e      	b.n	800b70c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4a3b      	ldr	r2, [pc, #236]	; (800b740 <HAL_ADC_ConfigChannel+0xa50>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d120      	bne.n	800b69a <HAL_ADC_ConfigChannel+0x9aa>
 800b658:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b65c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b660:	2b00      	cmp	r3, #0
 800b662:	d11a      	bne.n	800b69a <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4a30      	ldr	r2, [pc, #192]	; (800b72c <HAL_ADC_ConfigChannel+0xa3c>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d14e      	bne.n	800b70c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4a2c      	ldr	r2, [pc, #176]	; (800b724 <HAL_ADC_ConfigChannel+0xa34>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d004      	beq.n	800b682 <HAL_ADC_ConfigChannel+0x992>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4a2a      	ldr	r2, [pc, #168]	; (800b728 <HAL_ADC_ConfigChannel+0xa38>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d101      	bne.n	800b686 <HAL_ADC_ConfigChannel+0x996>
 800b682:	4a2c      	ldr	r2, [pc, #176]	; (800b734 <HAL_ADC_ConfigChannel+0xa44>)
 800b684:	e000      	b.n	800b688 <HAL_ADC_ConfigChannel+0x998>
 800b686:	4a26      	ldr	r2, [pc, #152]	; (800b720 <HAL_ADC_ConfigChannel+0xa30>)
 800b688:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b68c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b690:	4619      	mov	r1, r3
 800b692:	4610      	mov	r0, r2
 800b694:	f7fe fef1 	bl	800a47a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b698:	e038      	b.n	800b70c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a29      	ldr	r2, [pc, #164]	; (800b744 <HAL_ADC_ConfigChannel+0xa54>)
 800b6a0:	4293      	cmp	r3, r2
 800b6a2:	d133      	bne.n	800b70c <HAL_ADC_ConfigChannel+0xa1c>
 800b6a4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b6a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d12d      	bne.n	800b70c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4a1d      	ldr	r2, [pc, #116]	; (800b72c <HAL_ADC_ConfigChannel+0xa3c>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d128      	bne.n	800b70c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4a19      	ldr	r2, [pc, #100]	; (800b724 <HAL_ADC_ConfigChannel+0xa34>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d004      	beq.n	800b6ce <HAL_ADC_ConfigChannel+0x9de>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4a17      	ldr	r2, [pc, #92]	; (800b728 <HAL_ADC_ConfigChannel+0xa38>)
 800b6ca:	4293      	cmp	r3, r2
 800b6cc:	d101      	bne.n	800b6d2 <HAL_ADC_ConfigChannel+0x9e2>
 800b6ce:	4a19      	ldr	r2, [pc, #100]	; (800b734 <HAL_ADC_ConfigChannel+0xa44>)
 800b6d0:	e000      	b.n	800b6d4 <HAL_ADC_ConfigChannel+0x9e4>
 800b6d2:	4a13      	ldr	r2, [pc, #76]	; (800b720 <HAL_ADC_ConfigChannel+0xa30>)
 800b6d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b6d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b6dc:	4619      	mov	r1, r3
 800b6de:	4610      	mov	r0, r2
 800b6e0:	f7fe fecb 	bl	800a47a <LL_ADC_SetCommonPathInternalCh>
 800b6e4:	e012      	b.n	800b70c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6ea:	f043 0220 	orr.w	r2, r3, #32
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 800b6f8:	e008      	b.n	800b70c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b6fe:	f043 0220 	orr.w	r2, r3, #32
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800b714:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 800b718:	4618      	mov	r0, r3
 800b71a:	37e4      	adds	r7, #228	; 0xe4
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd90      	pop	{r4, r7, pc}
 800b720:	58026300 	.word	0x58026300
 800b724:	40022000 	.word	0x40022000
 800b728:	40022100 	.word	0x40022100
 800b72c:	58026000 	.word	0x58026000
 800b730:	c7520000 	.word	0xc7520000
 800b734:	40022300 	.word	0x40022300
 800b738:	24000000 	.word	0x24000000
 800b73c:	053e2d63 	.word	0x053e2d63
 800b740:	c3210000 	.word	0xc3210000
 800b744:	cb840000 	.word	0xcb840000

0800b748 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a6b      	ldr	r2, [pc, #428]	; (800b904 <ADC_ConfigureBoostMode+0x1bc>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d004      	beq.n	800b764 <ADC_ConfigureBoostMode+0x1c>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4a6a      	ldr	r2, [pc, #424]	; (800b908 <ADC_ConfigureBoostMode+0x1c0>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d109      	bne.n	800b778 <ADC_ConfigureBoostMode+0x30>
 800b764:	4b69      	ldr	r3, [pc, #420]	; (800b90c <ADC_ConfigureBoostMode+0x1c4>)
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	bf14      	ite	ne
 800b770:	2301      	movne	r3, #1
 800b772:	2300      	moveq	r3, #0
 800b774:	b2db      	uxtb	r3, r3
 800b776:	e008      	b.n	800b78a <ADC_ConfigureBoostMode+0x42>
 800b778:	4b65      	ldr	r3, [pc, #404]	; (800b910 <ADC_ConfigureBoostMode+0x1c8>)
 800b77a:	689b      	ldr	r3, [r3, #8]
 800b77c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b780:	2b00      	cmp	r3, #0
 800b782:	bf14      	ite	ne
 800b784:	2301      	movne	r3, #1
 800b786:	2300      	moveq	r3, #0
 800b788:	b2db      	uxtb	r3, r3
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d01c      	beq.n	800b7c8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800b78e:	f002 fb27 	bl	800dde0 <HAL_RCC_GetHCLKFreq>
 800b792:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b79c:	d010      	beq.n	800b7c0 <ADC_ConfigureBoostMode+0x78>
 800b79e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b7a2:	d871      	bhi.n	800b888 <ADC_ConfigureBoostMode+0x140>
 800b7a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7a8:	d002      	beq.n	800b7b0 <ADC_ConfigureBoostMode+0x68>
 800b7aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7ae:	d16b      	bne.n	800b888 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	0c1b      	lsrs	r3, r3, #16
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7bc:	60fb      	str	r3, [r7, #12]
        break;
 800b7be:	e066      	b.n	800b88e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	089b      	lsrs	r3, r3, #2
 800b7c4:	60fb      	str	r3, [r7, #12]
        break;
 800b7c6:	e062      	b.n	800b88e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800b7c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b7cc:	f003 fa7a 	bl	800ecc4 <HAL_RCCEx_GetPeriphCLKFreq>
 800b7d0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800b7da:	d051      	beq.n	800b880 <ADC_ConfigureBoostMode+0x138>
 800b7dc:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800b7e0:	d854      	bhi.n	800b88c <ADC_ConfigureBoostMode+0x144>
 800b7e2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800b7e6:	d047      	beq.n	800b878 <ADC_ConfigureBoostMode+0x130>
 800b7e8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800b7ec:	d84e      	bhi.n	800b88c <ADC_ConfigureBoostMode+0x144>
 800b7ee:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800b7f2:	d03d      	beq.n	800b870 <ADC_ConfigureBoostMode+0x128>
 800b7f4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800b7f8:	d848      	bhi.n	800b88c <ADC_ConfigureBoostMode+0x144>
 800b7fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7fe:	d033      	beq.n	800b868 <ADC_ConfigureBoostMode+0x120>
 800b800:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b804:	d842      	bhi.n	800b88c <ADC_ConfigureBoostMode+0x144>
 800b806:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800b80a:	d029      	beq.n	800b860 <ADC_ConfigureBoostMode+0x118>
 800b80c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800b810:	d83c      	bhi.n	800b88c <ADC_ConfigureBoostMode+0x144>
 800b812:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800b816:	d01a      	beq.n	800b84e <ADC_ConfigureBoostMode+0x106>
 800b818:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800b81c:	d836      	bhi.n	800b88c <ADC_ConfigureBoostMode+0x144>
 800b81e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800b822:	d014      	beq.n	800b84e <ADC_ConfigureBoostMode+0x106>
 800b824:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800b828:	d830      	bhi.n	800b88c <ADC_ConfigureBoostMode+0x144>
 800b82a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b82e:	d00e      	beq.n	800b84e <ADC_ConfigureBoostMode+0x106>
 800b830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b834:	d82a      	bhi.n	800b88c <ADC_ConfigureBoostMode+0x144>
 800b836:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b83a:	d008      	beq.n	800b84e <ADC_ConfigureBoostMode+0x106>
 800b83c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b840:	d824      	bhi.n	800b88c <ADC_ConfigureBoostMode+0x144>
 800b842:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b846:	d002      	beq.n	800b84e <ADC_ConfigureBoostMode+0x106>
 800b848:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b84c:	d11e      	bne.n	800b88c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	0c9b      	lsrs	r3, r3, #18
 800b854:	005b      	lsls	r3, r3, #1
 800b856:	68fa      	ldr	r2, [r7, #12]
 800b858:	fbb2 f3f3 	udiv	r3, r2, r3
 800b85c:	60fb      	str	r3, [r7, #12]
        break;
 800b85e:	e016      	b.n	800b88e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	091b      	lsrs	r3, r3, #4
 800b864:	60fb      	str	r3, [r7, #12]
        break;
 800b866:	e012      	b.n	800b88e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	095b      	lsrs	r3, r3, #5
 800b86c:	60fb      	str	r3, [r7, #12]
        break;
 800b86e:	e00e      	b.n	800b88e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	099b      	lsrs	r3, r3, #6
 800b874:	60fb      	str	r3, [r7, #12]
        break;
 800b876:	e00a      	b.n	800b88e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	09db      	lsrs	r3, r3, #7
 800b87c:	60fb      	str	r3, [r7, #12]
        break;
 800b87e:	e006      	b.n	800b88e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	0a1b      	lsrs	r3, r3, #8
 800b884:	60fb      	str	r3, [r7, #12]
        break;
 800b886:	e002      	b.n	800b88e <ADC_ConfigureBoostMode+0x146>
        break;
 800b888:	bf00      	nop
 800b88a:	e000      	b.n	800b88e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 800b88c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	085b      	lsrs	r3, r3, #1
 800b892:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	4a1f      	ldr	r2, [pc, #124]	; (800b914 <ADC_ConfigureBoostMode+0x1cc>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d808      	bhi.n	800b8ae <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	689a      	ldr	r2, [r3, #8]
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b8aa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800b8ac:	e025      	b.n	800b8fa <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	4a19      	ldr	r2, [pc, #100]	; (800b918 <ADC_ConfigureBoostMode+0x1d0>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d80a      	bhi.n	800b8cc <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b8c8:	609a      	str	r2, [r3, #8]
}
 800b8ca:	e016      	b.n	800b8fa <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	4a13      	ldr	r2, [pc, #76]	; (800b91c <ADC_ConfigureBoostMode+0x1d4>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d80a      	bhi.n	800b8ea <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8e6:	609a      	str	r2, [r3, #8]
}
 800b8e8:	e007      	b.n	800b8fa <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	689a      	ldr	r2, [r3, #8]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800b8f8:	609a      	str	r2, [r3, #8]
}
 800b8fa:	bf00      	nop
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	40022000 	.word	0x40022000
 800b908:	40022100 	.word	0x40022100
 800b90c:	40022300 	.word	0x40022300
 800b910:	58026300 	.word	0x58026300
 800b914:	005f5e10 	.word	0x005f5e10
 800b918:	00bebc20 	.word	0x00bebc20
 800b91c:	017d7840 	.word	0x017d7840

0800b920 <LL_ADC_IsEnabled>:
{
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	689b      	ldr	r3, [r3, #8]
 800b92c:	f003 0301 	and.w	r3, r3, #1
 800b930:	2b01      	cmp	r3, #1
 800b932:	d101      	bne.n	800b938 <LL_ADC_IsEnabled+0x18>
 800b934:	2301      	movs	r3, #1
 800b936:	e000      	b.n	800b93a <LL_ADC_IsEnabled+0x1a>
 800b938:	2300      	movs	r3, #0
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	370c      	adds	r7, #12
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr

0800b946 <LL_ADC_REG_IsConversionOngoing>:
{
 800b946:	b480      	push	{r7}
 800b948:	b083      	sub	sp, #12
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	f003 0304 	and.w	r3, r3, #4
 800b956:	2b04      	cmp	r3, #4
 800b958:	d101      	bne.n	800b95e <LL_ADC_REG_IsConversionOngoing+0x18>
 800b95a:	2301      	movs	r3, #1
 800b95c:	e000      	b.n	800b960 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	370c      	adds	r7, #12
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr

0800b96c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800b96c:	b590      	push	{r4, r7, lr}
 800b96e:	b0a3      	sub	sp, #140	; 0x8c
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b976:	2300      	movs	r3, #0
 800b978:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b982:	2b01      	cmp	r3, #1
 800b984:	d101      	bne.n	800b98a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800b986:	2302      	movs	r3, #2
 800b988:	e0c1      	b.n	800bb0e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2201      	movs	r2, #1
 800b98e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800b992:	2300      	movs	r3, #0
 800b994:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800b996:	2300      	movs	r3, #0
 800b998:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4a5e      	ldr	r2, [pc, #376]	; (800bb18 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d102      	bne.n	800b9aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800b9a4:	4b5d      	ldr	r3, [pc, #372]	; (800bb1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800b9a6:	60fb      	str	r3, [r7, #12]
 800b9a8:	e001      	b.n	800b9ae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d10b      	bne.n	800b9cc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9b8:	f043 0220 	orr.w	r2, r3, #32
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	e0a0      	b.n	800bb0e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7ff ffb9 	bl	800b946 <LL_ADC_REG_IsConversionOngoing>
 800b9d4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7ff ffb2 	bl	800b946 <LL_ADC_REG_IsConversionOngoing>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f040 8081 	bne.w	800baec <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800b9ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d17c      	bne.n	800baec <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a48      	ldr	r2, [pc, #288]	; (800bb18 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d004      	beq.n	800ba06 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4a46      	ldr	r2, [pc, #280]	; (800bb1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d101      	bne.n	800ba0a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800ba06:	4b46      	ldr	r3, [pc, #280]	; (800bb20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800ba08:	e000      	b.n	800ba0c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800ba0a:	4b46      	ldr	r3, [pc, #280]	; (800bb24 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800ba0c:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d039      	beq.n	800ba8a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800ba16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	431a      	orrs	r2, r3
 800ba24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ba26:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	4a3a      	ldr	r2, [pc, #232]	; (800bb18 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800ba2e:	4293      	cmp	r3, r2
 800ba30:	d004      	beq.n	800ba3c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a39      	ldr	r2, [pc, #228]	; (800bb1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d10e      	bne.n	800ba5a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800ba3c:	4836      	ldr	r0, [pc, #216]	; (800bb18 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800ba3e:	f7ff ff6f 	bl	800b920 <LL_ADC_IsEnabled>
 800ba42:	4604      	mov	r4, r0
 800ba44:	4835      	ldr	r0, [pc, #212]	; (800bb1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800ba46:	f7ff ff6b 	bl	800b920 <LL_ADC_IsEnabled>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	4323      	orrs	r3, r4
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	bf0c      	ite	eq
 800ba52:	2301      	moveq	r3, #1
 800ba54:	2300      	movne	r3, #0
 800ba56:	b2db      	uxtb	r3, r3
 800ba58:	e008      	b.n	800ba6c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800ba5a:	4833      	ldr	r0, [pc, #204]	; (800bb28 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800ba5c:	f7ff ff60 	bl	800b920 <LL_ADC_IsEnabled>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	bf0c      	ite	eq
 800ba66:	2301      	moveq	r3, #1
 800ba68:	2300      	movne	r3, #0
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d047      	beq.n	800bb00 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800ba70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ba72:	689a      	ldr	r2, [r3, #8]
 800ba74:	4b2d      	ldr	r3, [pc, #180]	; (800bb2c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800ba76:	4013      	ands	r3, r2
 800ba78:	683a      	ldr	r2, [r7, #0]
 800ba7a:	6811      	ldr	r1, [r2, #0]
 800ba7c:	683a      	ldr	r2, [r7, #0]
 800ba7e:	6892      	ldr	r2, [r2, #8]
 800ba80:	430a      	orrs	r2, r1
 800ba82:	431a      	orrs	r2, r3
 800ba84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ba86:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800ba88:	e03a      	b.n	800bb00 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800ba8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ba8c:	689b      	ldr	r3, [r3, #8]
 800ba8e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ba92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ba94:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a1f      	ldr	r2, [pc, #124]	; (800bb18 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d004      	beq.n	800baaa <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a1d      	ldr	r2, [pc, #116]	; (800bb1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d10e      	bne.n	800bac8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800baaa:	481b      	ldr	r0, [pc, #108]	; (800bb18 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800baac:	f7ff ff38 	bl	800b920 <LL_ADC_IsEnabled>
 800bab0:	4604      	mov	r4, r0
 800bab2:	481a      	ldr	r0, [pc, #104]	; (800bb1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800bab4:	f7ff ff34 	bl	800b920 <LL_ADC_IsEnabled>
 800bab8:	4603      	mov	r3, r0
 800baba:	4323      	orrs	r3, r4
 800babc:	2b00      	cmp	r3, #0
 800babe:	bf0c      	ite	eq
 800bac0:	2301      	moveq	r3, #1
 800bac2:	2300      	movne	r3, #0
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	e008      	b.n	800bada <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800bac8:	4817      	ldr	r0, [pc, #92]	; (800bb28 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800baca:	f7ff ff29 	bl	800b920 <LL_ADC_IsEnabled>
 800bace:	4603      	mov	r3, r0
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	bf0c      	ite	eq
 800bad4:	2301      	moveq	r3, #1
 800bad6:	2300      	movne	r3, #0
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	2b00      	cmp	r3, #0
 800badc:	d010      	beq.n	800bb00 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800bade:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bae0:	689a      	ldr	r2, [r3, #8]
 800bae2:	4b12      	ldr	r3, [pc, #72]	; (800bb2c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800bae4:	4013      	ands	r3, r2
 800bae6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bae8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800baea:	e009      	b.n	800bb00 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800baf0:	f043 0220 	orr.w	r2, r3, #32
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800baf8:	2301      	movs	r3, #1
 800bafa:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800bafe:	e000      	b.n	800bb02 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800bb00:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800bb0a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	378c      	adds	r7, #140	; 0x8c
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd90      	pop	{r4, r7, pc}
 800bb16:	bf00      	nop
 800bb18:	40022000 	.word	0x40022000
 800bb1c:	40022100 	.word	0x40022100
 800bb20:	40022300 	.word	0x40022300
 800bb24:	58026300 	.word	0x58026300
 800bb28:	58026000 	.word	0x58026000
 800bb2c:	fffff0e0 	.word	0xfffff0e0

0800bb30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f003 0307 	and.w	r3, r3, #7
 800bb3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bb40:	4b0b      	ldr	r3, [pc, #44]	; (800bb70 <__NVIC_SetPriorityGrouping+0x40>)
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bb46:	68ba      	ldr	r2, [r7, #8]
 800bb48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bb4c:	4013      	ands	r3, r2
 800bb4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800bb58:	4b06      	ldr	r3, [pc, #24]	; (800bb74 <__NVIC_SetPriorityGrouping+0x44>)
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bb5e:	4a04      	ldr	r2, [pc, #16]	; (800bb70 <__NVIC_SetPriorityGrouping+0x40>)
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	60d3      	str	r3, [r2, #12]
}
 800bb64:	bf00      	nop
 800bb66:	3714      	adds	r7, #20
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr
 800bb70:	e000ed00 	.word	0xe000ed00
 800bb74:	05fa0000 	.word	0x05fa0000

0800bb78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bb7c:	4b04      	ldr	r3, [pc, #16]	; (800bb90 <__NVIC_GetPriorityGrouping+0x18>)
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	0a1b      	lsrs	r3, r3, #8
 800bb82:	f003 0307 	and.w	r3, r3, #7
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr
 800bb90:	e000ed00 	.word	0xe000ed00

0800bb94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bb9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	db0b      	blt.n	800bbbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bba6:	88fb      	ldrh	r3, [r7, #6]
 800bba8:	f003 021f 	and.w	r2, r3, #31
 800bbac:	4907      	ldr	r1, [pc, #28]	; (800bbcc <__NVIC_EnableIRQ+0x38>)
 800bbae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bbb2:	095b      	lsrs	r3, r3, #5
 800bbb4:	2001      	movs	r0, #1
 800bbb6:	fa00 f202 	lsl.w	r2, r0, r2
 800bbba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800bbbe:	bf00      	nop
 800bbc0:	370c      	adds	r7, #12
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop
 800bbcc:	e000e100 	.word	0xe000e100

0800bbd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b083      	sub	sp, #12
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	6039      	str	r1, [r7, #0]
 800bbda:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800bbdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	db0a      	blt.n	800bbfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	b2da      	uxtb	r2, r3
 800bbe8:	490c      	ldr	r1, [pc, #48]	; (800bc1c <__NVIC_SetPriority+0x4c>)
 800bbea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bbee:	0112      	lsls	r2, r2, #4
 800bbf0:	b2d2      	uxtb	r2, r2
 800bbf2:	440b      	add	r3, r1
 800bbf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800bbf8:	e00a      	b.n	800bc10 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	b2da      	uxtb	r2, r3
 800bbfe:	4908      	ldr	r1, [pc, #32]	; (800bc20 <__NVIC_SetPriority+0x50>)
 800bc00:	88fb      	ldrh	r3, [r7, #6]
 800bc02:	f003 030f 	and.w	r3, r3, #15
 800bc06:	3b04      	subs	r3, #4
 800bc08:	0112      	lsls	r2, r2, #4
 800bc0a:	b2d2      	uxtb	r2, r2
 800bc0c:	440b      	add	r3, r1
 800bc0e:	761a      	strb	r2, [r3, #24]
}
 800bc10:	bf00      	nop
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr
 800bc1c:	e000e100 	.word	0xe000e100
 800bc20:	e000ed00 	.word	0xe000ed00

0800bc24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b089      	sub	sp, #36	; 0x24
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	60f8      	str	r0, [r7, #12]
 800bc2c:	60b9      	str	r1, [r7, #8]
 800bc2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f003 0307 	and.w	r3, r3, #7
 800bc36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	f1c3 0307 	rsb	r3, r3, #7
 800bc3e:	2b04      	cmp	r3, #4
 800bc40:	bf28      	it	cs
 800bc42:	2304      	movcs	r3, #4
 800bc44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800bc46:	69fb      	ldr	r3, [r7, #28]
 800bc48:	3304      	adds	r3, #4
 800bc4a:	2b06      	cmp	r3, #6
 800bc4c:	d902      	bls.n	800bc54 <NVIC_EncodePriority+0x30>
 800bc4e:	69fb      	ldr	r3, [r7, #28]
 800bc50:	3b03      	subs	r3, #3
 800bc52:	e000      	b.n	800bc56 <NVIC_EncodePriority+0x32>
 800bc54:	2300      	movs	r3, #0
 800bc56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bc58:	f04f 32ff 	mov.w	r2, #4294967295
 800bc5c:	69bb      	ldr	r3, [r7, #24]
 800bc5e:	fa02 f303 	lsl.w	r3, r2, r3
 800bc62:	43da      	mvns	r2, r3
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	401a      	ands	r2, r3
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800bc6c:	f04f 31ff 	mov.w	r1, #4294967295
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	fa01 f303 	lsl.w	r3, r1, r3
 800bc76:	43d9      	mvns	r1, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800bc7c:	4313      	orrs	r3, r2
         );
}
 800bc7e:	4618      	mov	r0, r3
 800bc80:	3724      	adds	r7, #36	; 0x24
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr
	...

0800bc8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b082      	sub	sp, #8
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	3b01      	subs	r3, #1
 800bc98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bc9c:	d301      	bcc.n	800bca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e00f      	b.n	800bcc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800bca2:	4a0a      	ldr	r2, [pc, #40]	; (800bccc <SysTick_Config+0x40>)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	3b01      	subs	r3, #1
 800bca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800bcaa:	210f      	movs	r1, #15
 800bcac:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb0:	f7ff ff8e 	bl	800bbd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800bcb4:	4b05      	ldr	r3, [pc, #20]	; (800bccc <SysTick_Config+0x40>)
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800bcba:	4b04      	ldr	r3, [pc, #16]	; (800bccc <SysTick_Config+0x40>)
 800bcbc:	2207      	movs	r2, #7
 800bcbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3708      	adds	r7, #8
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}
 800bcca:	bf00      	nop
 800bccc:	e000e010 	.word	0xe000e010

0800bcd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f7ff ff29 	bl	800bb30 <__NVIC_SetPriorityGrouping>
}
 800bcde:	bf00      	nop
 800bce0:	3708      	adds	r7, #8
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}

0800bce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bce6:	b580      	push	{r7, lr}
 800bce8:	b086      	sub	sp, #24
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	4603      	mov	r3, r0
 800bcee:	60b9      	str	r1, [r7, #8]
 800bcf0:	607a      	str	r2, [r7, #4]
 800bcf2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800bcf4:	f7ff ff40 	bl	800bb78 <__NVIC_GetPriorityGrouping>
 800bcf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	68b9      	ldr	r1, [r7, #8]
 800bcfe:	6978      	ldr	r0, [r7, #20]
 800bd00:	f7ff ff90 	bl	800bc24 <NVIC_EncodePriority>
 800bd04:	4602      	mov	r2, r0
 800bd06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bd0a:	4611      	mov	r1, r2
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7ff ff5f 	bl	800bbd0 <__NVIC_SetPriority>
}
 800bd12:	bf00      	nop
 800bd14:	3718      	adds	r7, #24
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b082      	sub	sp, #8
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	4603      	mov	r3, r0
 800bd22:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bd24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f7ff ff33 	bl	800bb94 <__NVIC_EnableIRQ>
}
 800bd2e:	bf00      	nop
 800bd30:	3708      	adds	r7, #8
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800bd36:	b580      	push	{r7, lr}
 800bd38:	b082      	sub	sp, #8
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f7ff ffa4 	bl	800bc8c <SysTick_Config>
 800bd44:	4603      	mov	r3, r0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3708      	adds	r7, #8
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
	...

0800bd50 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d101      	bne.n	800bd62 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	e054      	b.n	800be0c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	7f5b      	ldrb	r3, [r3, #29]
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d105      	bne.n	800bd78 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f7fb fe4a 	bl	8007a0c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2202      	movs	r2, #2
 800bd7c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	791b      	ldrb	r3, [r3, #4]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d10c      	bne.n	800bda0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	4a22      	ldr	r2, [pc, #136]	; (800be14 <HAL_CRC_Init+0xc4>)
 800bd8c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	689a      	ldr	r2, [r3, #8]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f022 0218 	bic.w	r2, r2, #24
 800bd9c:	609a      	str	r2, [r3, #8]
 800bd9e:	e00c      	b.n	800bdba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6899      	ldr	r1, [r3, #8]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	461a      	mov	r2, r3
 800bdaa:	6878      	ldr	r0, [r7, #4]
 800bdac:	f000 f948 	bl	800c040 <HAL_CRCEx_Polynomial_Set>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d001      	beq.n	800bdba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	e028      	b.n	800be0c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	795b      	ldrb	r3, [r3, #5]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d105      	bne.n	800bdce <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f04f 32ff 	mov.w	r2, #4294967295
 800bdca:	611a      	str	r2, [r3, #16]
 800bdcc:	e004      	b.n	800bdd8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	6912      	ldr	r2, [r2, #16]
 800bdd6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	689b      	ldr	r3, [r3, #8]
 800bdde:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	695a      	ldr	r2, [r3, #20]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	430a      	orrs	r2, r1
 800bdec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	689b      	ldr	r3, [r3, #8]
 800bdf4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	699a      	ldr	r2, [r3, #24]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	430a      	orrs	r2, r1
 800be02:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2201      	movs	r2, #1
 800be08:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3708      	adds	r7, #8
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	04c11db7 	.word	0x04c11db7

0800be18 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b086      	sub	sp, #24
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800be24:	2300      	movs	r3, #0
 800be26:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	2202      	movs	r2, #2
 800be2c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	689a      	ldr	r2, [r3, #8]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f042 0201 	orr.w	r2, r2, #1
 800be3c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	6a1b      	ldr	r3, [r3, #32]
 800be42:	2b03      	cmp	r3, #3
 800be44:	d006      	beq.n	800be54 <HAL_CRC_Calculate+0x3c>
 800be46:	2b03      	cmp	r3, #3
 800be48:	d829      	bhi.n	800be9e <HAL_CRC_Calculate+0x86>
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	d019      	beq.n	800be82 <HAL_CRC_Calculate+0x6a>
 800be4e:	2b02      	cmp	r3, #2
 800be50:	d01e      	beq.n	800be90 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800be52:	e024      	b.n	800be9e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800be54:	2300      	movs	r3, #0
 800be56:	617b      	str	r3, [r7, #20]
 800be58:	e00a      	b.n	800be70 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	68ba      	ldr	r2, [r7, #8]
 800be60:	441a      	add	r2, r3
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	6812      	ldr	r2, [r2, #0]
 800be68:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	3301      	adds	r3, #1
 800be6e:	617b      	str	r3, [r7, #20]
 800be70:	697a      	ldr	r2, [r7, #20]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	429a      	cmp	r2, r3
 800be76:	d3f0      	bcc.n	800be5a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	613b      	str	r3, [r7, #16]
      break;
 800be80:	e00e      	b.n	800bea0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	68b9      	ldr	r1, [r7, #8]
 800be86:	68f8      	ldr	r0, [r7, #12]
 800be88:	f000 f812 	bl	800beb0 <CRC_Handle_8>
 800be8c:	6138      	str	r0, [r7, #16]
      break;
 800be8e:	e007      	b.n	800bea0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	68b9      	ldr	r1, [r7, #8]
 800be94:	68f8      	ldr	r0, [r7, #12]
 800be96:	f000 f899 	bl	800bfcc <CRC_Handle_16>
 800be9a:	6138      	str	r0, [r7, #16]
      break;
 800be9c:	e000      	b.n	800bea0 <HAL_CRC_Calculate+0x88>
      break;
 800be9e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2201      	movs	r2, #1
 800bea4:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800bea6:	693b      	ldr	r3, [r7, #16]
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3718      	adds	r7, #24
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b089      	sub	sp, #36	; 0x24
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	60b9      	str	r1, [r7, #8]
 800beba:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800bebc:	2300      	movs	r3, #0
 800bebe:	61fb      	str	r3, [r7, #28]
 800bec0:	e023      	b.n	800bf0a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800bec2:	69fb      	ldr	r3, [r7, #28]
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	68ba      	ldr	r2, [r7, #8]
 800bec8:	4413      	add	r3, r2
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800bece:	69fb      	ldr	r3, [r7, #28]
 800bed0:	009b      	lsls	r3, r3, #2
 800bed2:	3301      	adds	r3, #1
 800bed4:	68b9      	ldr	r1, [r7, #8]
 800bed6:	440b      	add	r3, r1
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800bedc:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800bede:	69fb      	ldr	r3, [r7, #28]
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	3302      	adds	r3, #2
 800bee4:	68b9      	ldr	r1, [r7, #8]
 800bee6:	440b      	add	r3, r1
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800beec:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	009b      	lsls	r3, r3, #2
 800bef2:	3303      	adds	r3, #3
 800bef4:	68b9      	ldr	r1, [r7, #8]
 800bef6:	440b      	add	r3, r1
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800bf00:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800bf02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	3301      	adds	r3, #1
 800bf08:	61fb      	str	r3, [r7, #28]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	089b      	lsrs	r3, r3, #2
 800bf0e:	69fa      	ldr	r2, [r7, #28]
 800bf10:	429a      	cmp	r2, r3
 800bf12:	d3d6      	bcc.n	800bec2 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f003 0303 	and.w	r3, r3, #3
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d04d      	beq.n	800bfba <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f003 0303 	and.w	r3, r3, #3
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d107      	bne.n	800bf38 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	4413      	add	r3, r2
 800bf30:	68fa      	ldr	r2, [r7, #12]
 800bf32:	6812      	ldr	r2, [r2, #0]
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f003 0303 	and.w	r3, r3, #3
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	d116      	bne.n	800bf70 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800bf42:	69fb      	ldr	r3, [r7, #28]
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	68ba      	ldr	r2, [r7, #8]
 800bf48:	4413      	add	r3, r2
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	021b      	lsls	r3, r3, #8
 800bf4e:	b21a      	sxth	r2, r3
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	3301      	adds	r3, #1
 800bf56:	68b9      	ldr	r1, [r7, #8]
 800bf58:	440b      	add	r3, r1
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	b21b      	sxth	r3, r3
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	b21b      	sxth	r3, r3
 800bf62:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	8b7a      	ldrh	r2, [r7, #26]
 800bf6e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f003 0303 	and.w	r3, r3, #3
 800bf76:	2b03      	cmp	r3, #3
 800bf78:	d11f      	bne.n	800bfba <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800bf7a:	69fb      	ldr	r3, [r7, #28]
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	68ba      	ldr	r2, [r7, #8]
 800bf80:	4413      	add	r3, r2
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	021b      	lsls	r3, r3, #8
 800bf86:	b21a      	sxth	r2, r3
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	68b9      	ldr	r1, [r7, #8]
 800bf90:	440b      	add	r3, r1
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	b21b      	sxth	r3, r3
 800bf96:	4313      	orrs	r3, r2
 800bf98:	b21b      	sxth	r3, r3
 800bf9a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	8b7a      	ldrh	r2, [r7, #26]
 800bfa6:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800bfa8:	69fb      	ldr	r3, [r7, #28]
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	3302      	adds	r3, #2
 800bfae:	68ba      	ldr	r2, [r7, #8]
 800bfb0:	4413      	add	r3, r2
 800bfb2:	68fa      	ldr	r2, [r7, #12]
 800bfb4:	6812      	ldr	r2, [r2, #0]
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	681b      	ldr	r3, [r3, #0]
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3724      	adds	r7, #36	; 0x24
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr

0800bfcc <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800bfcc:	b480      	push	{r7}
 800bfce:	b087      	sub	sp, #28
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800bfd8:	2300      	movs	r3, #0
 800bfda:	617b      	str	r3, [r7, #20]
 800bfdc:	e013      	b.n	800c006 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	68ba      	ldr	r2, [r7, #8]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	881b      	ldrh	r3, [r3, #0]
 800bfe8:	041a      	lsls	r2, r3, #16
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	3302      	adds	r3, #2
 800bff0:	68b9      	ldr	r1, [r7, #8]
 800bff2:	440b      	add	r3, r1
 800bff4:	881b      	ldrh	r3, [r3, #0]
 800bff6:	4619      	mov	r1, r3
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	430a      	orrs	r2, r1
 800bffe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	3301      	adds	r3, #1
 800c004:	617b      	str	r3, [r7, #20]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	085b      	lsrs	r3, r3, #1
 800c00a:	697a      	ldr	r2, [r7, #20]
 800c00c:	429a      	cmp	r2, r3
 800c00e:	d3e6      	bcc.n	800bfde <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f003 0301 	and.w	r3, r3, #1
 800c016:	2b00      	cmp	r3, #0
 800c018:	d009      	beq.n	800c02e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	68ba      	ldr	r2, [r7, #8]
 800c026:	4413      	add	r3, r2
 800c028:	881a      	ldrh	r2, [r3, #0]
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	681b      	ldr	r3, [r3, #0]
}
 800c034:	4618      	mov	r0, r3
 800c036:	371c      	adds	r7, #28
 800c038:	46bd      	mov	sp, r7
 800c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c03e:	4770      	bx	lr

0800c040 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800c040:	b480      	push	{r7}
 800c042:	b087      	sub	sp, #28
 800c044:	af00      	add	r7, sp, #0
 800c046:	60f8      	str	r0, [r7, #12]
 800c048:	60b9      	str	r1, [r7, #8]
 800c04a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c04c:	2300      	movs	r3, #0
 800c04e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800c050:	231f      	movs	r3, #31
 800c052:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800c054:	bf00      	nop
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	1e5a      	subs	r2, r3, #1
 800c05a:	613a      	str	r2, [r7, #16]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d009      	beq.n	800c074 <HAL_CRCEx_Polynomial_Set+0x34>
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	f003 031f 	and.w	r3, r3, #31
 800c066:	68ba      	ldr	r2, [r7, #8]
 800c068:	fa22 f303 	lsr.w	r3, r2, r3
 800c06c:	f003 0301 	and.w	r3, r3, #1
 800c070:	2b00      	cmp	r3, #0
 800c072:	d0f0      	beq.n	800c056 <HAL_CRCEx_Polynomial_Set+0x16>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2b18      	cmp	r3, #24
 800c078:	d846      	bhi.n	800c108 <HAL_CRCEx_Polynomial_Set+0xc8>
 800c07a:	a201      	add	r2, pc, #4	; (adr r2, 800c080 <HAL_CRCEx_Polynomial_Set+0x40>)
 800c07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c080:	0800c10f 	.word	0x0800c10f
 800c084:	0800c109 	.word	0x0800c109
 800c088:	0800c109 	.word	0x0800c109
 800c08c:	0800c109 	.word	0x0800c109
 800c090:	0800c109 	.word	0x0800c109
 800c094:	0800c109 	.word	0x0800c109
 800c098:	0800c109 	.word	0x0800c109
 800c09c:	0800c109 	.word	0x0800c109
 800c0a0:	0800c0fd 	.word	0x0800c0fd
 800c0a4:	0800c109 	.word	0x0800c109
 800c0a8:	0800c109 	.word	0x0800c109
 800c0ac:	0800c109 	.word	0x0800c109
 800c0b0:	0800c109 	.word	0x0800c109
 800c0b4:	0800c109 	.word	0x0800c109
 800c0b8:	0800c109 	.word	0x0800c109
 800c0bc:	0800c109 	.word	0x0800c109
 800c0c0:	0800c0f1 	.word	0x0800c0f1
 800c0c4:	0800c109 	.word	0x0800c109
 800c0c8:	0800c109 	.word	0x0800c109
 800c0cc:	0800c109 	.word	0x0800c109
 800c0d0:	0800c109 	.word	0x0800c109
 800c0d4:	0800c109 	.word	0x0800c109
 800c0d8:	0800c109 	.word	0x0800c109
 800c0dc:	0800c109 	.word	0x0800c109
 800c0e0:	0800c0e5 	.word	0x0800c0e5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	2b06      	cmp	r3, #6
 800c0e8:	d913      	bls.n	800c112 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c0ee:	e010      	b.n	800c112 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	2b07      	cmp	r3, #7
 800c0f4:	d90f      	bls.n	800c116 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c0fa:	e00c      	b.n	800c116 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	2b0f      	cmp	r3, #15
 800c100:	d90b      	bls.n	800c11a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800c102:	2301      	movs	r3, #1
 800c104:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c106:	e008      	b.n	800c11a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800c108:	2301      	movs	r3, #1
 800c10a:	75fb      	strb	r3, [r7, #23]
      break;
 800c10c:	e006      	b.n	800c11c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c10e:	bf00      	nop
 800c110:	e004      	b.n	800c11c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c112:	bf00      	nop
 800c114:	e002      	b.n	800c11c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c116:	bf00      	nop
 800c118:	e000      	b.n	800c11c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800c11a:	bf00      	nop
  }
  if (status == HAL_OK)
 800c11c:	7dfb      	ldrb	r3, [r7, #23]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d10d      	bne.n	800c13e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	68ba      	ldr	r2, [r7, #8]
 800c128:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	689b      	ldr	r3, [r3, #8]
 800c130:	f023 0118 	bic.w	r1, r3, #24
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	430a      	orrs	r2, r1
 800c13c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800c13e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c140:	4618      	mov	r0, r3
 800c142:	371c      	adds	r7, #28
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b086      	sub	sp, #24
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800c154:	f7fe f972 	bl	800a43c <HAL_GetTick>
 800c158:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d101      	bne.n	800c164 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800c160:	2301      	movs	r3, #1
 800c162:	e2dc      	b.n	800c71e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	2b02      	cmp	r3, #2
 800c16e:	d008      	beq.n	800c182 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2280      	movs	r2, #128	; 0x80
 800c174:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2200      	movs	r2, #0
 800c17a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800c17e:	2301      	movs	r3, #1
 800c180:	e2cd      	b.n	800c71e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a76      	ldr	r2, [pc, #472]	; (800c360 <HAL_DMA_Abort+0x214>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d04a      	beq.n	800c222 <HAL_DMA_Abort+0xd6>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a74      	ldr	r2, [pc, #464]	; (800c364 <HAL_DMA_Abort+0x218>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d045      	beq.n	800c222 <HAL_DMA_Abort+0xd6>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4a73      	ldr	r2, [pc, #460]	; (800c368 <HAL_DMA_Abort+0x21c>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d040      	beq.n	800c222 <HAL_DMA_Abort+0xd6>
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4a71      	ldr	r2, [pc, #452]	; (800c36c <HAL_DMA_Abort+0x220>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d03b      	beq.n	800c222 <HAL_DMA_Abort+0xd6>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4a70      	ldr	r2, [pc, #448]	; (800c370 <HAL_DMA_Abort+0x224>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d036      	beq.n	800c222 <HAL_DMA_Abort+0xd6>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4a6e      	ldr	r2, [pc, #440]	; (800c374 <HAL_DMA_Abort+0x228>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d031      	beq.n	800c222 <HAL_DMA_Abort+0xd6>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4a6d      	ldr	r2, [pc, #436]	; (800c378 <HAL_DMA_Abort+0x22c>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d02c      	beq.n	800c222 <HAL_DMA_Abort+0xd6>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a6b      	ldr	r2, [pc, #428]	; (800c37c <HAL_DMA_Abort+0x230>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d027      	beq.n	800c222 <HAL_DMA_Abort+0xd6>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	4a6a      	ldr	r2, [pc, #424]	; (800c380 <HAL_DMA_Abort+0x234>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d022      	beq.n	800c222 <HAL_DMA_Abort+0xd6>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	4a68      	ldr	r2, [pc, #416]	; (800c384 <HAL_DMA_Abort+0x238>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d01d      	beq.n	800c222 <HAL_DMA_Abort+0xd6>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a67      	ldr	r2, [pc, #412]	; (800c388 <HAL_DMA_Abort+0x23c>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d018      	beq.n	800c222 <HAL_DMA_Abort+0xd6>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	4a65      	ldr	r2, [pc, #404]	; (800c38c <HAL_DMA_Abort+0x240>)
 800c1f6:	4293      	cmp	r3, r2
 800c1f8:	d013      	beq.n	800c222 <HAL_DMA_Abort+0xd6>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	4a64      	ldr	r2, [pc, #400]	; (800c390 <HAL_DMA_Abort+0x244>)
 800c200:	4293      	cmp	r3, r2
 800c202:	d00e      	beq.n	800c222 <HAL_DMA_Abort+0xd6>
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a62      	ldr	r2, [pc, #392]	; (800c394 <HAL_DMA_Abort+0x248>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d009      	beq.n	800c222 <HAL_DMA_Abort+0xd6>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4a61      	ldr	r2, [pc, #388]	; (800c398 <HAL_DMA_Abort+0x24c>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d004      	beq.n	800c222 <HAL_DMA_Abort+0xd6>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4a5f      	ldr	r2, [pc, #380]	; (800c39c <HAL_DMA_Abort+0x250>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d101      	bne.n	800c226 <HAL_DMA_Abort+0xda>
 800c222:	2301      	movs	r3, #1
 800c224:	e000      	b.n	800c228 <HAL_DMA_Abort+0xdc>
 800c226:	2300      	movs	r3, #0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d013      	beq.n	800c254 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f022 021e 	bic.w	r2, r2, #30
 800c23a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	695a      	ldr	r2, [r3, #20]
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c24a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	617b      	str	r3, [r7, #20]
 800c252:	e00a      	b.n	800c26a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f022 020e 	bic.w	r2, r2, #14
 800c262:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a3c      	ldr	r2, [pc, #240]	; (800c360 <HAL_DMA_Abort+0x214>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d072      	beq.n	800c35a <HAL_DMA_Abort+0x20e>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a3a      	ldr	r2, [pc, #232]	; (800c364 <HAL_DMA_Abort+0x218>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d06d      	beq.n	800c35a <HAL_DMA_Abort+0x20e>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a39      	ldr	r2, [pc, #228]	; (800c368 <HAL_DMA_Abort+0x21c>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d068      	beq.n	800c35a <HAL_DMA_Abort+0x20e>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a37      	ldr	r2, [pc, #220]	; (800c36c <HAL_DMA_Abort+0x220>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d063      	beq.n	800c35a <HAL_DMA_Abort+0x20e>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a36      	ldr	r2, [pc, #216]	; (800c370 <HAL_DMA_Abort+0x224>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d05e      	beq.n	800c35a <HAL_DMA_Abort+0x20e>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a34      	ldr	r2, [pc, #208]	; (800c374 <HAL_DMA_Abort+0x228>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d059      	beq.n	800c35a <HAL_DMA_Abort+0x20e>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a33      	ldr	r2, [pc, #204]	; (800c378 <HAL_DMA_Abort+0x22c>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d054      	beq.n	800c35a <HAL_DMA_Abort+0x20e>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a31      	ldr	r2, [pc, #196]	; (800c37c <HAL_DMA_Abort+0x230>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d04f      	beq.n	800c35a <HAL_DMA_Abort+0x20e>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a30      	ldr	r2, [pc, #192]	; (800c380 <HAL_DMA_Abort+0x234>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d04a      	beq.n	800c35a <HAL_DMA_Abort+0x20e>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a2e      	ldr	r2, [pc, #184]	; (800c384 <HAL_DMA_Abort+0x238>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d045      	beq.n	800c35a <HAL_DMA_Abort+0x20e>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4a2d      	ldr	r2, [pc, #180]	; (800c388 <HAL_DMA_Abort+0x23c>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d040      	beq.n	800c35a <HAL_DMA_Abort+0x20e>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a2b      	ldr	r2, [pc, #172]	; (800c38c <HAL_DMA_Abort+0x240>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d03b      	beq.n	800c35a <HAL_DMA_Abort+0x20e>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4a2a      	ldr	r2, [pc, #168]	; (800c390 <HAL_DMA_Abort+0x244>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d036      	beq.n	800c35a <HAL_DMA_Abort+0x20e>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4a28      	ldr	r2, [pc, #160]	; (800c394 <HAL_DMA_Abort+0x248>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d031      	beq.n	800c35a <HAL_DMA_Abort+0x20e>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4a27      	ldr	r2, [pc, #156]	; (800c398 <HAL_DMA_Abort+0x24c>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d02c      	beq.n	800c35a <HAL_DMA_Abort+0x20e>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4a25      	ldr	r2, [pc, #148]	; (800c39c <HAL_DMA_Abort+0x250>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d027      	beq.n	800c35a <HAL_DMA_Abort+0x20e>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	4a24      	ldr	r2, [pc, #144]	; (800c3a0 <HAL_DMA_Abort+0x254>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d022      	beq.n	800c35a <HAL_DMA_Abort+0x20e>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4a22      	ldr	r2, [pc, #136]	; (800c3a4 <HAL_DMA_Abort+0x258>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d01d      	beq.n	800c35a <HAL_DMA_Abort+0x20e>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	4a21      	ldr	r2, [pc, #132]	; (800c3a8 <HAL_DMA_Abort+0x25c>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d018      	beq.n	800c35a <HAL_DMA_Abort+0x20e>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a1f      	ldr	r2, [pc, #124]	; (800c3ac <HAL_DMA_Abort+0x260>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d013      	beq.n	800c35a <HAL_DMA_Abort+0x20e>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	4a1e      	ldr	r2, [pc, #120]	; (800c3b0 <HAL_DMA_Abort+0x264>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d00e      	beq.n	800c35a <HAL_DMA_Abort+0x20e>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	4a1c      	ldr	r2, [pc, #112]	; (800c3b4 <HAL_DMA_Abort+0x268>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d009      	beq.n	800c35a <HAL_DMA_Abort+0x20e>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a1b      	ldr	r2, [pc, #108]	; (800c3b8 <HAL_DMA_Abort+0x26c>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d004      	beq.n	800c35a <HAL_DMA_Abort+0x20e>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4a19      	ldr	r2, [pc, #100]	; (800c3bc <HAL_DMA_Abort+0x270>)
 800c356:	4293      	cmp	r3, r2
 800c358:	d132      	bne.n	800c3c0 <HAL_DMA_Abort+0x274>
 800c35a:	2301      	movs	r3, #1
 800c35c:	e031      	b.n	800c3c2 <HAL_DMA_Abort+0x276>
 800c35e:	bf00      	nop
 800c360:	40020010 	.word	0x40020010
 800c364:	40020028 	.word	0x40020028
 800c368:	40020040 	.word	0x40020040
 800c36c:	40020058 	.word	0x40020058
 800c370:	40020070 	.word	0x40020070
 800c374:	40020088 	.word	0x40020088
 800c378:	400200a0 	.word	0x400200a0
 800c37c:	400200b8 	.word	0x400200b8
 800c380:	40020410 	.word	0x40020410
 800c384:	40020428 	.word	0x40020428
 800c388:	40020440 	.word	0x40020440
 800c38c:	40020458 	.word	0x40020458
 800c390:	40020470 	.word	0x40020470
 800c394:	40020488 	.word	0x40020488
 800c398:	400204a0 	.word	0x400204a0
 800c39c:	400204b8 	.word	0x400204b8
 800c3a0:	58025408 	.word	0x58025408
 800c3a4:	5802541c 	.word	0x5802541c
 800c3a8:	58025430 	.word	0x58025430
 800c3ac:	58025444 	.word	0x58025444
 800c3b0:	58025458 	.word	0x58025458
 800c3b4:	5802546c 	.word	0x5802546c
 800c3b8:	58025480 	.word	0x58025480
 800c3bc:	58025494 	.word	0x58025494
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d007      	beq.n	800c3d6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c3d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c3d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4a6d      	ldr	r2, [pc, #436]	; (800c590 <HAL_DMA_Abort+0x444>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d04a      	beq.n	800c476 <HAL_DMA_Abort+0x32a>
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a6b      	ldr	r2, [pc, #428]	; (800c594 <HAL_DMA_Abort+0x448>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d045      	beq.n	800c476 <HAL_DMA_Abort+0x32a>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	4a6a      	ldr	r2, [pc, #424]	; (800c598 <HAL_DMA_Abort+0x44c>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d040      	beq.n	800c476 <HAL_DMA_Abort+0x32a>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4a68      	ldr	r2, [pc, #416]	; (800c59c <HAL_DMA_Abort+0x450>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d03b      	beq.n	800c476 <HAL_DMA_Abort+0x32a>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4a67      	ldr	r2, [pc, #412]	; (800c5a0 <HAL_DMA_Abort+0x454>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d036      	beq.n	800c476 <HAL_DMA_Abort+0x32a>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4a65      	ldr	r2, [pc, #404]	; (800c5a4 <HAL_DMA_Abort+0x458>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d031      	beq.n	800c476 <HAL_DMA_Abort+0x32a>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4a64      	ldr	r2, [pc, #400]	; (800c5a8 <HAL_DMA_Abort+0x45c>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d02c      	beq.n	800c476 <HAL_DMA_Abort+0x32a>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a62      	ldr	r2, [pc, #392]	; (800c5ac <HAL_DMA_Abort+0x460>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d027      	beq.n	800c476 <HAL_DMA_Abort+0x32a>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	4a61      	ldr	r2, [pc, #388]	; (800c5b0 <HAL_DMA_Abort+0x464>)
 800c42c:	4293      	cmp	r3, r2
 800c42e:	d022      	beq.n	800c476 <HAL_DMA_Abort+0x32a>
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4a5f      	ldr	r2, [pc, #380]	; (800c5b4 <HAL_DMA_Abort+0x468>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d01d      	beq.n	800c476 <HAL_DMA_Abort+0x32a>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4a5e      	ldr	r2, [pc, #376]	; (800c5b8 <HAL_DMA_Abort+0x46c>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d018      	beq.n	800c476 <HAL_DMA_Abort+0x32a>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4a5c      	ldr	r2, [pc, #368]	; (800c5bc <HAL_DMA_Abort+0x470>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d013      	beq.n	800c476 <HAL_DMA_Abort+0x32a>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4a5b      	ldr	r2, [pc, #364]	; (800c5c0 <HAL_DMA_Abort+0x474>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d00e      	beq.n	800c476 <HAL_DMA_Abort+0x32a>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a59      	ldr	r2, [pc, #356]	; (800c5c4 <HAL_DMA_Abort+0x478>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d009      	beq.n	800c476 <HAL_DMA_Abort+0x32a>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a58      	ldr	r2, [pc, #352]	; (800c5c8 <HAL_DMA_Abort+0x47c>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d004      	beq.n	800c476 <HAL_DMA_Abort+0x32a>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a56      	ldr	r2, [pc, #344]	; (800c5cc <HAL_DMA_Abort+0x480>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d108      	bne.n	800c488 <HAL_DMA_Abort+0x33c>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f022 0201 	bic.w	r2, r2, #1
 800c484:	601a      	str	r2, [r3, #0]
 800c486:	e007      	b.n	800c498 <HAL_DMA_Abort+0x34c>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	681a      	ldr	r2, [r3, #0]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f022 0201 	bic.w	r2, r2, #1
 800c496:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c498:	e013      	b.n	800c4c2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c49a:	f7fd ffcf 	bl	800a43c <HAL_GetTick>
 800c49e:	4602      	mov	r2, r0
 800c4a0:	693b      	ldr	r3, [r7, #16]
 800c4a2:	1ad3      	subs	r3, r2, r3
 800c4a4:	2b05      	cmp	r3, #5
 800c4a6:	d90c      	bls.n	800c4c2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2220      	movs	r2, #32
 800c4ac:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2203      	movs	r2, #3
 800c4b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	e12d      	b.n	800c71e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f003 0301 	and.w	r3, r3, #1
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d1e5      	bne.n	800c49a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a2f      	ldr	r2, [pc, #188]	; (800c590 <HAL_DMA_Abort+0x444>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d04a      	beq.n	800c56e <HAL_DMA_Abort+0x422>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a2d      	ldr	r2, [pc, #180]	; (800c594 <HAL_DMA_Abort+0x448>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d045      	beq.n	800c56e <HAL_DMA_Abort+0x422>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4a2c      	ldr	r2, [pc, #176]	; (800c598 <HAL_DMA_Abort+0x44c>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d040      	beq.n	800c56e <HAL_DMA_Abort+0x422>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a2a      	ldr	r2, [pc, #168]	; (800c59c <HAL_DMA_Abort+0x450>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d03b      	beq.n	800c56e <HAL_DMA_Abort+0x422>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4a29      	ldr	r2, [pc, #164]	; (800c5a0 <HAL_DMA_Abort+0x454>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d036      	beq.n	800c56e <HAL_DMA_Abort+0x422>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a27      	ldr	r2, [pc, #156]	; (800c5a4 <HAL_DMA_Abort+0x458>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d031      	beq.n	800c56e <HAL_DMA_Abort+0x422>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4a26      	ldr	r2, [pc, #152]	; (800c5a8 <HAL_DMA_Abort+0x45c>)
 800c510:	4293      	cmp	r3, r2
 800c512:	d02c      	beq.n	800c56e <HAL_DMA_Abort+0x422>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a24      	ldr	r2, [pc, #144]	; (800c5ac <HAL_DMA_Abort+0x460>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d027      	beq.n	800c56e <HAL_DMA_Abort+0x422>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4a23      	ldr	r2, [pc, #140]	; (800c5b0 <HAL_DMA_Abort+0x464>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d022      	beq.n	800c56e <HAL_DMA_Abort+0x422>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4a21      	ldr	r2, [pc, #132]	; (800c5b4 <HAL_DMA_Abort+0x468>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d01d      	beq.n	800c56e <HAL_DMA_Abort+0x422>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a20      	ldr	r2, [pc, #128]	; (800c5b8 <HAL_DMA_Abort+0x46c>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d018      	beq.n	800c56e <HAL_DMA_Abort+0x422>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a1e      	ldr	r2, [pc, #120]	; (800c5bc <HAL_DMA_Abort+0x470>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d013      	beq.n	800c56e <HAL_DMA_Abort+0x422>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4a1d      	ldr	r2, [pc, #116]	; (800c5c0 <HAL_DMA_Abort+0x474>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d00e      	beq.n	800c56e <HAL_DMA_Abort+0x422>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4a1b      	ldr	r2, [pc, #108]	; (800c5c4 <HAL_DMA_Abort+0x478>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d009      	beq.n	800c56e <HAL_DMA_Abort+0x422>
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	4a1a      	ldr	r2, [pc, #104]	; (800c5c8 <HAL_DMA_Abort+0x47c>)
 800c560:	4293      	cmp	r3, r2
 800c562:	d004      	beq.n	800c56e <HAL_DMA_Abort+0x422>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	4a18      	ldr	r2, [pc, #96]	; (800c5cc <HAL_DMA_Abort+0x480>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d101      	bne.n	800c572 <HAL_DMA_Abort+0x426>
 800c56e:	2301      	movs	r3, #1
 800c570:	e000      	b.n	800c574 <HAL_DMA_Abort+0x428>
 800c572:	2300      	movs	r3, #0
 800c574:	2b00      	cmp	r3, #0
 800c576:	d02b      	beq.n	800c5d0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c57c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c582:	f003 031f 	and.w	r3, r3, #31
 800c586:	223f      	movs	r2, #63	; 0x3f
 800c588:	409a      	lsls	r2, r3
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	609a      	str	r2, [r3, #8]
 800c58e:	e02a      	b.n	800c5e6 <HAL_DMA_Abort+0x49a>
 800c590:	40020010 	.word	0x40020010
 800c594:	40020028 	.word	0x40020028
 800c598:	40020040 	.word	0x40020040
 800c59c:	40020058 	.word	0x40020058
 800c5a0:	40020070 	.word	0x40020070
 800c5a4:	40020088 	.word	0x40020088
 800c5a8:	400200a0 	.word	0x400200a0
 800c5ac:	400200b8 	.word	0x400200b8
 800c5b0:	40020410 	.word	0x40020410
 800c5b4:	40020428 	.word	0x40020428
 800c5b8:	40020440 	.word	0x40020440
 800c5bc:	40020458 	.word	0x40020458
 800c5c0:	40020470 	.word	0x40020470
 800c5c4:	40020488 	.word	0x40020488
 800c5c8:	400204a0 	.word	0x400204a0
 800c5cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5d4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5da:	f003 031f 	and.w	r3, r3, #31
 800c5de:	2201      	movs	r2, #1
 800c5e0:	409a      	lsls	r2, r3
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4a4f      	ldr	r2, [pc, #316]	; (800c728 <HAL_DMA_Abort+0x5dc>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d072      	beq.n	800c6d6 <HAL_DMA_Abort+0x58a>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4a4d      	ldr	r2, [pc, #308]	; (800c72c <HAL_DMA_Abort+0x5e0>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d06d      	beq.n	800c6d6 <HAL_DMA_Abort+0x58a>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4a4c      	ldr	r2, [pc, #304]	; (800c730 <HAL_DMA_Abort+0x5e4>)
 800c600:	4293      	cmp	r3, r2
 800c602:	d068      	beq.n	800c6d6 <HAL_DMA_Abort+0x58a>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4a4a      	ldr	r2, [pc, #296]	; (800c734 <HAL_DMA_Abort+0x5e8>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d063      	beq.n	800c6d6 <HAL_DMA_Abort+0x58a>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4a49      	ldr	r2, [pc, #292]	; (800c738 <HAL_DMA_Abort+0x5ec>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d05e      	beq.n	800c6d6 <HAL_DMA_Abort+0x58a>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a47      	ldr	r2, [pc, #284]	; (800c73c <HAL_DMA_Abort+0x5f0>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d059      	beq.n	800c6d6 <HAL_DMA_Abort+0x58a>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a46      	ldr	r2, [pc, #280]	; (800c740 <HAL_DMA_Abort+0x5f4>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d054      	beq.n	800c6d6 <HAL_DMA_Abort+0x58a>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a44      	ldr	r2, [pc, #272]	; (800c744 <HAL_DMA_Abort+0x5f8>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d04f      	beq.n	800c6d6 <HAL_DMA_Abort+0x58a>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4a43      	ldr	r2, [pc, #268]	; (800c748 <HAL_DMA_Abort+0x5fc>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d04a      	beq.n	800c6d6 <HAL_DMA_Abort+0x58a>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4a41      	ldr	r2, [pc, #260]	; (800c74c <HAL_DMA_Abort+0x600>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d045      	beq.n	800c6d6 <HAL_DMA_Abort+0x58a>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4a40      	ldr	r2, [pc, #256]	; (800c750 <HAL_DMA_Abort+0x604>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d040      	beq.n	800c6d6 <HAL_DMA_Abort+0x58a>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	4a3e      	ldr	r2, [pc, #248]	; (800c754 <HAL_DMA_Abort+0x608>)
 800c65a:	4293      	cmp	r3, r2
 800c65c:	d03b      	beq.n	800c6d6 <HAL_DMA_Abort+0x58a>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	4a3d      	ldr	r2, [pc, #244]	; (800c758 <HAL_DMA_Abort+0x60c>)
 800c664:	4293      	cmp	r3, r2
 800c666:	d036      	beq.n	800c6d6 <HAL_DMA_Abort+0x58a>
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	4a3b      	ldr	r2, [pc, #236]	; (800c75c <HAL_DMA_Abort+0x610>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d031      	beq.n	800c6d6 <HAL_DMA_Abort+0x58a>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	4a3a      	ldr	r2, [pc, #232]	; (800c760 <HAL_DMA_Abort+0x614>)
 800c678:	4293      	cmp	r3, r2
 800c67a:	d02c      	beq.n	800c6d6 <HAL_DMA_Abort+0x58a>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4a38      	ldr	r2, [pc, #224]	; (800c764 <HAL_DMA_Abort+0x618>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d027      	beq.n	800c6d6 <HAL_DMA_Abort+0x58a>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a37      	ldr	r2, [pc, #220]	; (800c768 <HAL_DMA_Abort+0x61c>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d022      	beq.n	800c6d6 <HAL_DMA_Abort+0x58a>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4a35      	ldr	r2, [pc, #212]	; (800c76c <HAL_DMA_Abort+0x620>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d01d      	beq.n	800c6d6 <HAL_DMA_Abort+0x58a>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4a34      	ldr	r2, [pc, #208]	; (800c770 <HAL_DMA_Abort+0x624>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d018      	beq.n	800c6d6 <HAL_DMA_Abort+0x58a>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4a32      	ldr	r2, [pc, #200]	; (800c774 <HAL_DMA_Abort+0x628>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d013      	beq.n	800c6d6 <HAL_DMA_Abort+0x58a>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4a31      	ldr	r2, [pc, #196]	; (800c778 <HAL_DMA_Abort+0x62c>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d00e      	beq.n	800c6d6 <HAL_DMA_Abort+0x58a>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a2f      	ldr	r2, [pc, #188]	; (800c77c <HAL_DMA_Abort+0x630>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d009      	beq.n	800c6d6 <HAL_DMA_Abort+0x58a>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	4a2e      	ldr	r2, [pc, #184]	; (800c780 <HAL_DMA_Abort+0x634>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d004      	beq.n	800c6d6 <HAL_DMA_Abort+0x58a>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a2c      	ldr	r2, [pc, #176]	; (800c784 <HAL_DMA_Abort+0x638>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d101      	bne.n	800c6da <HAL_DMA_Abort+0x58e>
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	e000      	b.n	800c6dc <HAL_DMA_Abort+0x590>
 800c6da:	2300      	movs	r3, #0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d015      	beq.n	800c70c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c6e8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d00c      	beq.n	800c70c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c700:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c70a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2201      	movs	r2, #1
 800c710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2200      	movs	r2, #0
 800c718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800c71c:	2300      	movs	r3, #0
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3718      	adds	r7, #24
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	40020010 	.word	0x40020010
 800c72c:	40020028 	.word	0x40020028
 800c730:	40020040 	.word	0x40020040
 800c734:	40020058 	.word	0x40020058
 800c738:	40020070 	.word	0x40020070
 800c73c:	40020088 	.word	0x40020088
 800c740:	400200a0 	.word	0x400200a0
 800c744:	400200b8 	.word	0x400200b8
 800c748:	40020410 	.word	0x40020410
 800c74c:	40020428 	.word	0x40020428
 800c750:	40020440 	.word	0x40020440
 800c754:	40020458 	.word	0x40020458
 800c758:	40020470 	.word	0x40020470
 800c75c:	40020488 	.word	0x40020488
 800c760:	400204a0 	.word	0x400204a0
 800c764:	400204b8 	.word	0x400204b8
 800c768:	58025408 	.word	0x58025408
 800c76c:	5802541c 	.word	0x5802541c
 800c770:	58025430 	.word	0x58025430
 800c774:	58025444 	.word	0x58025444
 800c778:	58025458 	.word	0x58025458
 800c77c:	5802546c 	.word	0x5802546c
 800c780:	58025480 	.word	0x58025480
 800c784:	58025494 	.word	0x58025494

0800c788 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d101      	bne.n	800c79a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800c796:	2301      	movs	r3, #1
 800c798:	e205      	b.n	800cba6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c7a0:	b2db      	uxtb	r3, r3
 800c7a2:	2b02      	cmp	r3, #2
 800c7a4:	d004      	beq.n	800c7b0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2280      	movs	r2, #128	; 0x80
 800c7aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	e1fa      	b.n	800cba6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4a8c      	ldr	r2, [pc, #560]	; (800c9e8 <HAL_DMA_Abort_IT+0x260>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d04a      	beq.n	800c850 <HAL_DMA_Abort_IT+0xc8>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a8b      	ldr	r2, [pc, #556]	; (800c9ec <HAL_DMA_Abort_IT+0x264>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d045      	beq.n	800c850 <HAL_DMA_Abort_IT+0xc8>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	4a89      	ldr	r2, [pc, #548]	; (800c9f0 <HAL_DMA_Abort_IT+0x268>)
 800c7ca:	4293      	cmp	r3, r2
 800c7cc:	d040      	beq.n	800c850 <HAL_DMA_Abort_IT+0xc8>
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	4a88      	ldr	r2, [pc, #544]	; (800c9f4 <HAL_DMA_Abort_IT+0x26c>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d03b      	beq.n	800c850 <HAL_DMA_Abort_IT+0xc8>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4a86      	ldr	r2, [pc, #536]	; (800c9f8 <HAL_DMA_Abort_IT+0x270>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d036      	beq.n	800c850 <HAL_DMA_Abort_IT+0xc8>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4a85      	ldr	r2, [pc, #532]	; (800c9fc <HAL_DMA_Abort_IT+0x274>)
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d031      	beq.n	800c850 <HAL_DMA_Abort_IT+0xc8>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a83      	ldr	r2, [pc, #524]	; (800ca00 <HAL_DMA_Abort_IT+0x278>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d02c      	beq.n	800c850 <HAL_DMA_Abort_IT+0xc8>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a82      	ldr	r2, [pc, #520]	; (800ca04 <HAL_DMA_Abort_IT+0x27c>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d027      	beq.n	800c850 <HAL_DMA_Abort_IT+0xc8>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4a80      	ldr	r2, [pc, #512]	; (800ca08 <HAL_DMA_Abort_IT+0x280>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d022      	beq.n	800c850 <HAL_DMA_Abort_IT+0xc8>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a7f      	ldr	r2, [pc, #508]	; (800ca0c <HAL_DMA_Abort_IT+0x284>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d01d      	beq.n	800c850 <HAL_DMA_Abort_IT+0xc8>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a7d      	ldr	r2, [pc, #500]	; (800ca10 <HAL_DMA_Abort_IT+0x288>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d018      	beq.n	800c850 <HAL_DMA_Abort_IT+0xc8>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4a7c      	ldr	r2, [pc, #496]	; (800ca14 <HAL_DMA_Abort_IT+0x28c>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d013      	beq.n	800c850 <HAL_DMA_Abort_IT+0xc8>
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4a7a      	ldr	r2, [pc, #488]	; (800ca18 <HAL_DMA_Abort_IT+0x290>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d00e      	beq.n	800c850 <HAL_DMA_Abort_IT+0xc8>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4a79      	ldr	r2, [pc, #484]	; (800ca1c <HAL_DMA_Abort_IT+0x294>)
 800c838:	4293      	cmp	r3, r2
 800c83a:	d009      	beq.n	800c850 <HAL_DMA_Abort_IT+0xc8>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a77      	ldr	r2, [pc, #476]	; (800ca20 <HAL_DMA_Abort_IT+0x298>)
 800c842:	4293      	cmp	r3, r2
 800c844:	d004      	beq.n	800c850 <HAL_DMA_Abort_IT+0xc8>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4a76      	ldr	r2, [pc, #472]	; (800ca24 <HAL_DMA_Abort_IT+0x29c>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d101      	bne.n	800c854 <HAL_DMA_Abort_IT+0xcc>
 800c850:	2301      	movs	r3, #1
 800c852:	e000      	b.n	800c856 <HAL_DMA_Abort_IT+0xce>
 800c854:	2300      	movs	r3, #0
 800c856:	2b00      	cmp	r3, #0
 800c858:	d065      	beq.n	800c926 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2204      	movs	r2, #4
 800c85e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	4a60      	ldr	r2, [pc, #384]	; (800c9e8 <HAL_DMA_Abort_IT+0x260>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d04a      	beq.n	800c902 <HAL_DMA_Abort_IT+0x17a>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a5e      	ldr	r2, [pc, #376]	; (800c9ec <HAL_DMA_Abort_IT+0x264>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d045      	beq.n	800c902 <HAL_DMA_Abort_IT+0x17a>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4a5d      	ldr	r2, [pc, #372]	; (800c9f0 <HAL_DMA_Abort_IT+0x268>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d040      	beq.n	800c902 <HAL_DMA_Abort_IT+0x17a>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4a5b      	ldr	r2, [pc, #364]	; (800c9f4 <HAL_DMA_Abort_IT+0x26c>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d03b      	beq.n	800c902 <HAL_DMA_Abort_IT+0x17a>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	4a5a      	ldr	r2, [pc, #360]	; (800c9f8 <HAL_DMA_Abort_IT+0x270>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d036      	beq.n	800c902 <HAL_DMA_Abort_IT+0x17a>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	4a58      	ldr	r2, [pc, #352]	; (800c9fc <HAL_DMA_Abort_IT+0x274>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d031      	beq.n	800c902 <HAL_DMA_Abort_IT+0x17a>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4a57      	ldr	r2, [pc, #348]	; (800ca00 <HAL_DMA_Abort_IT+0x278>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d02c      	beq.n	800c902 <HAL_DMA_Abort_IT+0x17a>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4a55      	ldr	r2, [pc, #340]	; (800ca04 <HAL_DMA_Abort_IT+0x27c>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d027      	beq.n	800c902 <HAL_DMA_Abort_IT+0x17a>
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4a54      	ldr	r2, [pc, #336]	; (800ca08 <HAL_DMA_Abort_IT+0x280>)
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d022      	beq.n	800c902 <HAL_DMA_Abort_IT+0x17a>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4a52      	ldr	r2, [pc, #328]	; (800ca0c <HAL_DMA_Abort_IT+0x284>)
 800c8c2:	4293      	cmp	r3, r2
 800c8c4:	d01d      	beq.n	800c902 <HAL_DMA_Abort_IT+0x17a>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4a51      	ldr	r2, [pc, #324]	; (800ca10 <HAL_DMA_Abort_IT+0x288>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d018      	beq.n	800c902 <HAL_DMA_Abort_IT+0x17a>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	4a4f      	ldr	r2, [pc, #316]	; (800ca14 <HAL_DMA_Abort_IT+0x28c>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d013      	beq.n	800c902 <HAL_DMA_Abort_IT+0x17a>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4a4e      	ldr	r2, [pc, #312]	; (800ca18 <HAL_DMA_Abort_IT+0x290>)
 800c8e0:	4293      	cmp	r3, r2
 800c8e2:	d00e      	beq.n	800c902 <HAL_DMA_Abort_IT+0x17a>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a4c      	ldr	r2, [pc, #304]	; (800ca1c <HAL_DMA_Abort_IT+0x294>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d009      	beq.n	800c902 <HAL_DMA_Abort_IT+0x17a>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	4a4b      	ldr	r2, [pc, #300]	; (800ca20 <HAL_DMA_Abort_IT+0x298>)
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d004      	beq.n	800c902 <HAL_DMA_Abort_IT+0x17a>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	4a49      	ldr	r2, [pc, #292]	; (800ca24 <HAL_DMA_Abort_IT+0x29c>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d108      	bne.n	800c914 <HAL_DMA_Abort_IT+0x18c>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f022 0201 	bic.w	r2, r2, #1
 800c910:	601a      	str	r2, [r3, #0]
 800c912:	e147      	b.n	800cba4 <HAL_DMA_Abort_IT+0x41c>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	681a      	ldr	r2, [r3, #0]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f022 0201 	bic.w	r2, r2, #1
 800c922:	601a      	str	r2, [r3, #0]
 800c924:	e13e      	b.n	800cba4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f022 020e 	bic.w	r2, r2, #14
 800c934:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4a2b      	ldr	r2, [pc, #172]	; (800c9e8 <HAL_DMA_Abort_IT+0x260>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d04a      	beq.n	800c9d6 <HAL_DMA_Abort_IT+0x24e>
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	4a29      	ldr	r2, [pc, #164]	; (800c9ec <HAL_DMA_Abort_IT+0x264>)
 800c946:	4293      	cmp	r3, r2
 800c948:	d045      	beq.n	800c9d6 <HAL_DMA_Abort_IT+0x24e>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	4a28      	ldr	r2, [pc, #160]	; (800c9f0 <HAL_DMA_Abort_IT+0x268>)
 800c950:	4293      	cmp	r3, r2
 800c952:	d040      	beq.n	800c9d6 <HAL_DMA_Abort_IT+0x24e>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	4a26      	ldr	r2, [pc, #152]	; (800c9f4 <HAL_DMA_Abort_IT+0x26c>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d03b      	beq.n	800c9d6 <HAL_DMA_Abort_IT+0x24e>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	4a25      	ldr	r2, [pc, #148]	; (800c9f8 <HAL_DMA_Abort_IT+0x270>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d036      	beq.n	800c9d6 <HAL_DMA_Abort_IT+0x24e>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	4a23      	ldr	r2, [pc, #140]	; (800c9fc <HAL_DMA_Abort_IT+0x274>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d031      	beq.n	800c9d6 <HAL_DMA_Abort_IT+0x24e>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	4a22      	ldr	r2, [pc, #136]	; (800ca00 <HAL_DMA_Abort_IT+0x278>)
 800c978:	4293      	cmp	r3, r2
 800c97a:	d02c      	beq.n	800c9d6 <HAL_DMA_Abort_IT+0x24e>
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	4a20      	ldr	r2, [pc, #128]	; (800ca04 <HAL_DMA_Abort_IT+0x27c>)
 800c982:	4293      	cmp	r3, r2
 800c984:	d027      	beq.n	800c9d6 <HAL_DMA_Abort_IT+0x24e>
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	4a1f      	ldr	r2, [pc, #124]	; (800ca08 <HAL_DMA_Abort_IT+0x280>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d022      	beq.n	800c9d6 <HAL_DMA_Abort_IT+0x24e>
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a1d      	ldr	r2, [pc, #116]	; (800ca0c <HAL_DMA_Abort_IT+0x284>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d01d      	beq.n	800c9d6 <HAL_DMA_Abort_IT+0x24e>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4a1c      	ldr	r2, [pc, #112]	; (800ca10 <HAL_DMA_Abort_IT+0x288>)
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d018      	beq.n	800c9d6 <HAL_DMA_Abort_IT+0x24e>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4a1a      	ldr	r2, [pc, #104]	; (800ca14 <HAL_DMA_Abort_IT+0x28c>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d013      	beq.n	800c9d6 <HAL_DMA_Abort_IT+0x24e>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4a19      	ldr	r2, [pc, #100]	; (800ca18 <HAL_DMA_Abort_IT+0x290>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d00e      	beq.n	800c9d6 <HAL_DMA_Abort_IT+0x24e>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4a17      	ldr	r2, [pc, #92]	; (800ca1c <HAL_DMA_Abort_IT+0x294>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d009      	beq.n	800c9d6 <HAL_DMA_Abort_IT+0x24e>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4a16      	ldr	r2, [pc, #88]	; (800ca20 <HAL_DMA_Abort_IT+0x298>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d004      	beq.n	800c9d6 <HAL_DMA_Abort_IT+0x24e>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a14      	ldr	r2, [pc, #80]	; (800ca24 <HAL_DMA_Abort_IT+0x29c>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d128      	bne.n	800ca28 <HAL_DMA_Abort_IT+0x2a0>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f022 0201 	bic.w	r2, r2, #1
 800c9e4:	601a      	str	r2, [r3, #0]
 800c9e6:	e027      	b.n	800ca38 <HAL_DMA_Abort_IT+0x2b0>
 800c9e8:	40020010 	.word	0x40020010
 800c9ec:	40020028 	.word	0x40020028
 800c9f0:	40020040 	.word	0x40020040
 800c9f4:	40020058 	.word	0x40020058
 800c9f8:	40020070 	.word	0x40020070
 800c9fc:	40020088 	.word	0x40020088
 800ca00:	400200a0 	.word	0x400200a0
 800ca04:	400200b8 	.word	0x400200b8
 800ca08:	40020410 	.word	0x40020410
 800ca0c:	40020428 	.word	0x40020428
 800ca10:	40020440 	.word	0x40020440
 800ca14:	40020458 	.word	0x40020458
 800ca18:	40020470 	.word	0x40020470
 800ca1c:	40020488 	.word	0x40020488
 800ca20:	400204a0 	.word	0x400204a0
 800ca24:	400204b8 	.word	0x400204b8
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	681a      	ldr	r2, [r3, #0]
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f022 0201 	bic.w	r2, r2, #1
 800ca36:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a5c      	ldr	r2, [pc, #368]	; (800cbb0 <HAL_DMA_Abort_IT+0x428>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d072      	beq.n	800cb28 <HAL_DMA_Abort_IT+0x3a0>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4a5b      	ldr	r2, [pc, #364]	; (800cbb4 <HAL_DMA_Abort_IT+0x42c>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d06d      	beq.n	800cb28 <HAL_DMA_Abort_IT+0x3a0>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4a59      	ldr	r2, [pc, #356]	; (800cbb8 <HAL_DMA_Abort_IT+0x430>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d068      	beq.n	800cb28 <HAL_DMA_Abort_IT+0x3a0>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4a58      	ldr	r2, [pc, #352]	; (800cbbc <HAL_DMA_Abort_IT+0x434>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d063      	beq.n	800cb28 <HAL_DMA_Abort_IT+0x3a0>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a56      	ldr	r2, [pc, #344]	; (800cbc0 <HAL_DMA_Abort_IT+0x438>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d05e      	beq.n	800cb28 <HAL_DMA_Abort_IT+0x3a0>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a55      	ldr	r2, [pc, #340]	; (800cbc4 <HAL_DMA_Abort_IT+0x43c>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d059      	beq.n	800cb28 <HAL_DMA_Abort_IT+0x3a0>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	4a53      	ldr	r2, [pc, #332]	; (800cbc8 <HAL_DMA_Abort_IT+0x440>)
 800ca7a:	4293      	cmp	r3, r2
 800ca7c:	d054      	beq.n	800cb28 <HAL_DMA_Abort_IT+0x3a0>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4a52      	ldr	r2, [pc, #328]	; (800cbcc <HAL_DMA_Abort_IT+0x444>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d04f      	beq.n	800cb28 <HAL_DMA_Abort_IT+0x3a0>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4a50      	ldr	r2, [pc, #320]	; (800cbd0 <HAL_DMA_Abort_IT+0x448>)
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d04a      	beq.n	800cb28 <HAL_DMA_Abort_IT+0x3a0>
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	4a4f      	ldr	r2, [pc, #316]	; (800cbd4 <HAL_DMA_Abort_IT+0x44c>)
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	d045      	beq.n	800cb28 <HAL_DMA_Abort_IT+0x3a0>
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a4d      	ldr	r2, [pc, #308]	; (800cbd8 <HAL_DMA_Abort_IT+0x450>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d040      	beq.n	800cb28 <HAL_DMA_Abort_IT+0x3a0>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	4a4c      	ldr	r2, [pc, #304]	; (800cbdc <HAL_DMA_Abort_IT+0x454>)
 800caac:	4293      	cmp	r3, r2
 800caae:	d03b      	beq.n	800cb28 <HAL_DMA_Abort_IT+0x3a0>
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4a4a      	ldr	r2, [pc, #296]	; (800cbe0 <HAL_DMA_Abort_IT+0x458>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d036      	beq.n	800cb28 <HAL_DMA_Abort_IT+0x3a0>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	4a49      	ldr	r2, [pc, #292]	; (800cbe4 <HAL_DMA_Abort_IT+0x45c>)
 800cac0:	4293      	cmp	r3, r2
 800cac2:	d031      	beq.n	800cb28 <HAL_DMA_Abort_IT+0x3a0>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4a47      	ldr	r2, [pc, #284]	; (800cbe8 <HAL_DMA_Abort_IT+0x460>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d02c      	beq.n	800cb28 <HAL_DMA_Abort_IT+0x3a0>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	4a46      	ldr	r2, [pc, #280]	; (800cbec <HAL_DMA_Abort_IT+0x464>)
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d027      	beq.n	800cb28 <HAL_DMA_Abort_IT+0x3a0>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4a44      	ldr	r2, [pc, #272]	; (800cbf0 <HAL_DMA_Abort_IT+0x468>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d022      	beq.n	800cb28 <HAL_DMA_Abort_IT+0x3a0>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	4a43      	ldr	r2, [pc, #268]	; (800cbf4 <HAL_DMA_Abort_IT+0x46c>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d01d      	beq.n	800cb28 <HAL_DMA_Abort_IT+0x3a0>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4a41      	ldr	r2, [pc, #260]	; (800cbf8 <HAL_DMA_Abort_IT+0x470>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d018      	beq.n	800cb28 <HAL_DMA_Abort_IT+0x3a0>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4a40      	ldr	r2, [pc, #256]	; (800cbfc <HAL_DMA_Abort_IT+0x474>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d013      	beq.n	800cb28 <HAL_DMA_Abort_IT+0x3a0>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4a3e      	ldr	r2, [pc, #248]	; (800cc00 <HAL_DMA_Abort_IT+0x478>)
 800cb06:	4293      	cmp	r3, r2
 800cb08:	d00e      	beq.n	800cb28 <HAL_DMA_Abort_IT+0x3a0>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4a3d      	ldr	r2, [pc, #244]	; (800cc04 <HAL_DMA_Abort_IT+0x47c>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d009      	beq.n	800cb28 <HAL_DMA_Abort_IT+0x3a0>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4a3b      	ldr	r2, [pc, #236]	; (800cc08 <HAL_DMA_Abort_IT+0x480>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d004      	beq.n	800cb28 <HAL_DMA_Abort_IT+0x3a0>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	4a3a      	ldr	r2, [pc, #232]	; (800cc0c <HAL_DMA_Abort_IT+0x484>)
 800cb24:	4293      	cmp	r3, r2
 800cb26:	d101      	bne.n	800cb2c <HAL_DMA_Abort_IT+0x3a4>
 800cb28:	2301      	movs	r3, #1
 800cb2a:	e000      	b.n	800cb2e <HAL_DMA_Abort_IT+0x3a6>
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d028      	beq.n	800cb84 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cb40:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb46:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb4c:	f003 031f 	and.w	r3, r3, #31
 800cb50:	2201      	movs	r2, #1
 800cb52:	409a      	lsls	r2, r3
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cb5c:	687a      	ldr	r2, [r7, #4]
 800cb5e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800cb60:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d00c      	beq.n	800cb84 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb6e:	681a      	ldr	r2, [r3, #0]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cb78:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800cb82:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	2201      	movs	r2, #1
 800cb88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d003      	beq.n	800cba4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800cba4:	2300      	movs	r3, #0
}
 800cba6:	4618      	mov	r0, r3
 800cba8:	3710      	adds	r7, #16
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}
 800cbae:	bf00      	nop
 800cbb0:	40020010 	.word	0x40020010
 800cbb4:	40020028 	.word	0x40020028
 800cbb8:	40020040 	.word	0x40020040
 800cbbc:	40020058 	.word	0x40020058
 800cbc0:	40020070 	.word	0x40020070
 800cbc4:	40020088 	.word	0x40020088
 800cbc8:	400200a0 	.word	0x400200a0
 800cbcc:	400200b8 	.word	0x400200b8
 800cbd0:	40020410 	.word	0x40020410
 800cbd4:	40020428 	.word	0x40020428
 800cbd8:	40020440 	.word	0x40020440
 800cbdc:	40020458 	.word	0x40020458
 800cbe0:	40020470 	.word	0x40020470
 800cbe4:	40020488 	.word	0x40020488
 800cbe8:	400204a0 	.word	0x400204a0
 800cbec:	400204b8 	.word	0x400204b8
 800cbf0:	58025408 	.word	0x58025408
 800cbf4:	5802541c 	.word	0x5802541c
 800cbf8:	58025430 	.word	0x58025430
 800cbfc:	58025444 	.word	0x58025444
 800cc00:	58025458 	.word	0x58025458
 800cc04:	5802546c 	.word	0x5802546c
 800cc08:	58025480 	.word	0x58025480
 800cc0c:	58025494 	.word	0x58025494

0800cc10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b089      	sub	sp, #36	; 0x24
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800cc1e:	4b86      	ldr	r3, [pc, #536]	; (800ce38 <HAL_GPIO_Init+0x228>)
 800cc20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800cc22:	e18c      	b.n	800cf3e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	681a      	ldr	r2, [r3, #0]
 800cc28:	2101      	movs	r1, #1
 800cc2a:	69fb      	ldr	r3, [r7, #28]
 800cc2c:	fa01 f303 	lsl.w	r3, r1, r3
 800cc30:	4013      	ands	r3, r2
 800cc32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	f000 817e 	beq.w	800cf38 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	685b      	ldr	r3, [r3, #4]
 800cc40:	f003 0303 	and.w	r3, r3, #3
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d005      	beq.n	800cc54 <HAL_GPIO_Init+0x44>
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	f003 0303 	and.w	r3, r3, #3
 800cc50:	2b02      	cmp	r3, #2
 800cc52:	d130      	bne.n	800ccb6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	689b      	ldr	r3, [r3, #8]
 800cc58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800cc5a:	69fb      	ldr	r3, [r7, #28]
 800cc5c:	005b      	lsls	r3, r3, #1
 800cc5e:	2203      	movs	r2, #3
 800cc60:	fa02 f303 	lsl.w	r3, r2, r3
 800cc64:	43db      	mvns	r3, r3
 800cc66:	69ba      	ldr	r2, [r7, #24]
 800cc68:	4013      	ands	r3, r2
 800cc6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	68da      	ldr	r2, [r3, #12]
 800cc70:	69fb      	ldr	r3, [r7, #28]
 800cc72:	005b      	lsls	r3, r3, #1
 800cc74:	fa02 f303 	lsl.w	r3, r2, r3
 800cc78:	69ba      	ldr	r2, [r7, #24]
 800cc7a:	4313      	orrs	r3, r2
 800cc7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	69ba      	ldr	r2, [r7, #24]
 800cc82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	685b      	ldr	r3, [r3, #4]
 800cc88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	69fb      	ldr	r3, [r7, #28]
 800cc8e:	fa02 f303 	lsl.w	r3, r2, r3
 800cc92:	43db      	mvns	r3, r3
 800cc94:	69ba      	ldr	r2, [r7, #24]
 800cc96:	4013      	ands	r3, r2
 800cc98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	091b      	lsrs	r3, r3, #4
 800cca0:	f003 0201 	and.w	r2, r3, #1
 800cca4:	69fb      	ldr	r3, [r7, #28]
 800cca6:	fa02 f303 	lsl.w	r3, r2, r3
 800ccaa:	69ba      	ldr	r2, [r7, #24]
 800ccac:	4313      	orrs	r3, r2
 800ccae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	69ba      	ldr	r2, [r7, #24]
 800ccb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	f003 0303 	and.w	r3, r3, #3
 800ccbe:	2b03      	cmp	r3, #3
 800ccc0:	d017      	beq.n	800ccf2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	68db      	ldr	r3, [r3, #12]
 800ccc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ccc8:	69fb      	ldr	r3, [r7, #28]
 800ccca:	005b      	lsls	r3, r3, #1
 800cccc:	2203      	movs	r2, #3
 800ccce:	fa02 f303 	lsl.w	r3, r2, r3
 800ccd2:	43db      	mvns	r3, r3
 800ccd4:	69ba      	ldr	r2, [r7, #24]
 800ccd6:	4013      	ands	r3, r2
 800ccd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	689a      	ldr	r2, [r3, #8]
 800ccde:	69fb      	ldr	r3, [r7, #28]
 800cce0:	005b      	lsls	r3, r3, #1
 800cce2:	fa02 f303 	lsl.w	r3, r2, r3
 800cce6:	69ba      	ldr	r2, [r7, #24]
 800cce8:	4313      	orrs	r3, r2
 800ccea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	69ba      	ldr	r2, [r7, #24]
 800ccf0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	f003 0303 	and.w	r3, r3, #3
 800ccfa:	2b02      	cmp	r3, #2
 800ccfc:	d123      	bne.n	800cd46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ccfe:	69fb      	ldr	r3, [r7, #28]
 800cd00:	08da      	lsrs	r2, r3, #3
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	3208      	adds	r2, #8
 800cd06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	f003 0307 	and.w	r3, r3, #7
 800cd12:	009b      	lsls	r3, r3, #2
 800cd14:	220f      	movs	r2, #15
 800cd16:	fa02 f303 	lsl.w	r3, r2, r3
 800cd1a:	43db      	mvns	r3, r3
 800cd1c:	69ba      	ldr	r2, [r7, #24]
 800cd1e:	4013      	ands	r3, r2
 800cd20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	691a      	ldr	r2, [r3, #16]
 800cd26:	69fb      	ldr	r3, [r7, #28]
 800cd28:	f003 0307 	and.w	r3, r3, #7
 800cd2c:	009b      	lsls	r3, r3, #2
 800cd2e:	fa02 f303 	lsl.w	r3, r2, r3
 800cd32:	69ba      	ldr	r2, [r7, #24]
 800cd34:	4313      	orrs	r3, r2
 800cd36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	08da      	lsrs	r2, r3, #3
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	3208      	adds	r2, #8
 800cd40:	69b9      	ldr	r1, [r7, #24]
 800cd42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800cd4c:	69fb      	ldr	r3, [r7, #28]
 800cd4e:	005b      	lsls	r3, r3, #1
 800cd50:	2203      	movs	r2, #3
 800cd52:	fa02 f303 	lsl.w	r3, r2, r3
 800cd56:	43db      	mvns	r3, r3
 800cd58:	69ba      	ldr	r2, [r7, #24]
 800cd5a:	4013      	ands	r3, r2
 800cd5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	f003 0203 	and.w	r2, r3, #3
 800cd66:	69fb      	ldr	r3, [r7, #28]
 800cd68:	005b      	lsls	r3, r3, #1
 800cd6a:	fa02 f303 	lsl.w	r3, r2, r3
 800cd6e:	69ba      	ldr	r2, [r7, #24]
 800cd70:	4313      	orrs	r3, r2
 800cd72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	69ba      	ldr	r2, [r7, #24]
 800cd78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	f000 80d8 	beq.w	800cf38 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cd88:	4b2c      	ldr	r3, [pc, #176]	; (800ce3c <HAL_GPIO_Init+0x22c>)
 800cd8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cd8e:	4a2b      	ldr	r2, [pc, #172]	; (800ce3c <HAL_GPIO_Init+0x22c>)
 800cd90:	f043 0302 	orr.w	r3, r3, #2
 800cd94:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800cd98:	4b28      	ldr	r3, [pc, #160]	; (800ce3c <HAL_GPIO_Init+0x22c>)
 800cd9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cd9e:	f003 0302 	and.w	r3, r3, #2
 800cda2:	60fb      	str	r3, [r7, #12]
 800cda4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cda6:	4a26      	ldr	r2, [pc, #152]	; (800ce40 <HAL_GPIO_Init+0x230>)
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	089b      	lsrs	r3, r3, #2
 800cdac:	3302      	adds	r3, #2
 800cdae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cdb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800cdb4:	69fb      	ldr	r3, [r7, #28]
 800cdb6:	f003 0303 	and.w	r3, r3, #3
 800cdba:	009b      	lsls	r3, r3, #2
 800cdbc:	220f      	movs	r2, #15
 800cdbe:	fa02 f303 	lsl.w	r3, r2, r3
 800cdc2:	43db      	mvns	r3, r3
 800cdc4:	69ba      	ldr	r2, [r7, #24]
 800cdc6:	4013      	ands	r3, r2
 800cdc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	4a1d      	ldr	r2, [pc, #116]	; (800ce44 <HAL_GPIO_Init+0x234>)
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d04a      	beq.n	800ce68 <HAL_GPIO_Init+0x258>
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	4a1c      	ldr	r2, [pc, #112]	; (800ce48 <HAL_GPIO_Init+0x238>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d02b      	beq.n	800ce32 <HAL_GPIO_Init+0x222>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	4a1b      	ldr	r2, [pc, #108]	; (800ce4c <HAL_GPIO_Init+0x23c>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d025      	beq.n	800ce2e <HAL_GPIO_Init+0x21e>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	4a1a      	ldr	r2, [pc, #104]	; (800ce50 <HAL_GPIO_Init+0x240>)
 800cde6:	4293      	cmp	r3, r2
 800cde8:	d01f      	beq.n	800ce2a <HAL_GPIO_Init+0x21a>
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	4a19      	ldr	r2, [pc, #100]	; (800ce54 <HAL_GPIO_Init+0x244>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d019      	beq.n	800ce26 <HAL_GPIO_Init+0x216>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	4a18      	ldr	r2, [pc, #96]	; (800ce58 <HAL_GPIO_Init+0x248>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d013      	beq.n	800ce22 <HAL_GPIO_Init+0x212>
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	4a17      	ldr	r2, [pc, #92]	; (800ce5c <HAL_GPIO_Init+0x24c>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d00d      	beq.n	800ce1e <HAL_GPIO_Init+0x20e>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	4a16      	ldr	r2, [pc, #88]	; (800ce60 <HAL_GPIO_Init+0x250>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d007      	beq.n	800ce1a <HAL_GPIO_Init+0x20a>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	4a15      	ldr	r2, [pc, #84]	; (800ce64 <HAL_GPIO_Init+0x254>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d101      	bne.n	800ce16 <HAL_GPIO_Init+0x206>
 800ce12:	2309      	movs	r3, #9
 800ce14:	e029      	b.n	800ce6a <HAL_GPIO_Init+0x25a>
 800ce16:	230a      	movs	r3, #10
 800ce18:	e027      	b.n	800ce6a <HAL_GPIO_Init+0x25a>
 800ce1a:	2307      	movs	r3, #7
 800ce1c:	e025      	b.n	800ce6a <HAL_GPIO_Init+0x25a>
 800ce1e:	2306      	movs	r3, #6
 800ce20:	e023      	b.n	800ce6a <HAL_GPIO_Init+0x25a>
 800ce22:	2305      	movs	r3, #5
 800ce24:	e021      	b.n	800ce6a <HAL_GPIO_Init+0x25a>
 800ce26:	2304      	movs	r3, #4
 800ce28:	e01f      	b.n	800ce6a <HAL_GPIO_Init+0x25a>
 800ce2a:	2303      	movs	r3, #3
 800ce2c:	e01d      	b.n	800ce6a <HAL_GPIO_Init+0x25a>
 800ce2e:	2302      	movs	r3, #2
 800ce30:	e01b      	b.n	800ce6a <HAL_GPIO_Init+0x25a>
 800ce32:	2301      	movs	r3, #1
 800ce34:	e019      	b.n	800ce6a <HAL_GPIO_Init+0x25a>
 800ce36:	bf00      	nop
 800ce38:	58000080 	.word	0x58000080
 800ce3c:	58024400 	.word	0x58024400
 800ce40:	58000400 	.word	0x58000400
 800ce44:	58020000 	.word	0x58020000
 800ce48:	58020400 	.word	0x58020400
 800ce4c:	58020800 	.word	0x58020800
 800ce50:	58020c00 	.word	0x58020c00
 800ce54:	58021000 	.word	0x58021000
 800ce58:	58021400 	.word	0x58021400
 800ce5c:	58021800 	.word	0x58021800
 800ce60:	58021c00 	.word	0x58021c00
 800ce64:	58022400 	.word	0x58022400
 800ce68:	2300      	movs	r3, #0
 800ce6a:	69fa      	ldr	r2, [r7, #28]
 800ce6c:	f002 0203 	and.w	r2, r2, #3
 800ce70:	0092      	lsls	r2, r2, #2
 800ce72:	4093      	lsls	r3, r2
 800ce74:	69ba      	ldr	r2, [r7, #24]
 800ce76:	4313      	orrs	r3, r2
 800ce78:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ce7a:	4938      	ldr	r1, [pc, #224]	; (800cf5c <HAL_GPIO_Init+0x34c>)
 800ce7c:	69fb      	ldr	r3, [r7, #28]
 800ce7e:	089b      	lsrs	r3, r3, #2
 800ce80:	3302      	adds	r3, #2
 800ce82:	69ba      	ldr	r2, [r7, #24]
 800ce84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ce88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	43db      	mvns	r3, r3
 800ce94:	69ba      	ldr	r2, [r7, #24]
 800ce96:	4013      	ands	r3, r2
 800ce98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	685b      	ldr	r3, [r3, #4]
 800ce9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d003      	beq.n	800ceae <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800cea6:	69ba      	ldr	r2, [r7, #24]
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800ceae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800ceb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ceba:	685b      	ldr	r3, [r3, #4]
 800cebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	43db      	mvns	r3, r3
 800cec2:	69ba      	ldr	r2, [r7, #24]
 800cec4:	4013      	ands	r3, r2
 800cec6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d003      	beq.n	800cedc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800ced4:	69ba      	ldr	r2, [r7, #24]
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	4313      	orrs	r3, r2
 800ceda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800cedc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cee0:	69bb      	ldr	r3, [r7, #24]
 800cee2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	685b      	ldr	r3, [r3, #4]
 800cee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	43db      	mvns	r3, r3
 800ceee:	69ba      	ldr	r2, [r7, #24]
 800cef0:	4013      	ands	r3, r2
 800cef2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d003      	beq.n	800cf08 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800cf00:	69ba      	ldr	r2, [r7, #24]
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	4313      	orrs	r3, r2
 800cf06:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	69ba      	ldr	r2, [r7, #24]
 800cf0c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	43db      	mvns	r3, r3
 800cf18:	69ba      	ldr	r2, [r7, #24]
 800cf1a:	4013      	ands	r3, r2
 800cf1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	685b      	ldr	r3, [r3, #4]
 800cf22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d003      	beq.n	800cf32 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800cf2a:	69ba      	ldr	r2, [r7, #24]
 800cf2c:	693b      	ldr	r3, [r7, #16]
 800cf2e:	4313      	orrs	r3, r2
 800cf30:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	69ba      	ldr	r2, [r7, #24]
 800cf36:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800cf38:	69fb      	ldr	r3, [r7, #28]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	681a      	ldr	r2, [r3, #0]
 800cf42:	69fb      	ldr	r3, [r7, #28]
 800cf44:	fa22 f303 	lsr.w	r3, r2, r3
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f47f ae6b 	bne.w	800cc24 <HAL_GPIO_Init+0x14>
  }
}
 800cf4e:	bf00      	nop
 800cf50:	bf00      	nop
 800cf52:	3724      	adds	r7, #36	; 0x24
 800cf54:	46bd      	mov	sp, r7
 800cf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5a:	4770      	bx	lr
 800cf5c:	58000400 	.word	0x58000400

0800cf60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b083      	sub	sp, #12
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	460b      	mov	r3, r1
 800cf6a:	807b      	strh	r3, [r7, #2]
 800cf6c:	4613      	mov	r3, r2
 800cf6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800cf70:	787b      	ldrb	r3, [r7, #1]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d003      	beq.n	800cf7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cf76:	887a      	ldrh	r2, [r7, #2]
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800cf7c:	e003      	b.n	800cf86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800cf7e:	887b      	ldrh	r3, [r7, #2]
 800cf80:	041a      	lsls	r2, r3, #16
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	619a      	str	r2, [r3, #24]
}
 800cf86:	bf00      	nop
 800cf88:	370c      	adds	r7, #12
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr
	...

0800cf94 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800cf9c:	4b19      	ldr	r3, [pc, #100]	; (800d004 <HAL_PWREx_ConfigSupply+0x70>)
 800cf9e:	68db      	ldr	r3, [r3, #12]
 800cfa0:	f003 0304 	and.w	r3, r3, #4
 800cfa4:	2b04      	cmp	r3, #4
 800cfa6:	d00a      	beq.n	800cfbe <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800cfa8:	4b16      	ldr	r3, [pc, #88]	; (800d004 <HAL_PWREx_ConfigSupply+0x70>)
 800cfaa:	68db      	ldr	r3, [r3, #12]
 800cfac:	f003 0307 	and.w	r3, r3, #7
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d001      	beq.n	800cfba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	e01f      	b.n	800cffa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	e01d      	b.n	800cffa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800cfbe:	4b11      	ldr	r3, [pc, #68]	; (800d004 <HAL_PWREx_ConfigSupply+0x70>)
 800cfc0:	68db      	ldr	r3, [r3, #12]
 800cfc2:	f023 0207 	bic.w	r2, r3, #7
 800cfc6:	490f      	ldr	r1, [pc, #60]	; (800d004 <HAL_PWREx_ConfigSupply+0x70>)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	4313      	orrs	r3, r2
 800cfcc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800cfce:	f7fd fa35 	bl	800a43c <HAL_GetTick>
 800cfd2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800cfd4:	e009      	b.n	800cfea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800cfd6:	f7fd fa31 	bl	800a43c <HAL_GetTick>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	1ad3      	subs	r3, r2, r3
 800cfe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cfe4:	d901      	bls.n	800cfea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800cfe6:	2301      	movs	r3, #1
 800cfe8:	e007      	b.n	800cffa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800cfea:	4b06      	ldr	r3, [pc, #24]	; (800d004 <HAL_PWREx_ConfigSupply+0x70>)
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cff6:	d1ee      	bne.n	800cfd6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800cff8:	2300      	movs	r3, #0
}
 800cffa:	4618      	mov	r0, r3
 800cffc:	3710      	adds	r7, #16
 800cffe:	46bd      	mov	sp, r7
 800d000:	bd80      	pop	{r7, pc}
 800d002:	bf00      	nop
 800d004:	58024800 	.word	0x58024800

0800d008 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b08c      	sub	sp, #48	; 0x30
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d101      	bne.n	800d01a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d016:	2301      	movs	r3, #1
 800d018:	e397      	b.n	800d74a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f003 0301 	and.w	r3, r3, #1
 800d022:	2b00      	cmp	r3, #0
 800d024:	f000 8087 	beq.w	800d136 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d028:	4b9e      	ldr	r3, [pc, #632]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d02a:	691b      	ldr	r3, [r3, #16]
 800d02c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d030:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d032:	4b9c      	ldr	r3, [pc, #624]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d036:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800d038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d03a:	2b10      	cmp	r3, #16
 800d03c:	d007      	beq.n	800d04e <HAL_RCC_OscConfig+0x46>
 800d03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d040:	2b18      	cmp	r3, #24
 800d042:	d110      	bne.n	800d066 <HAL_RCC_OscConfig+0x5e>
 800d044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d046:	f003 0303 	and.w	r3, r3, #3
 800d04a:	2b02      	cmp	r3, #2
 800d04c:	d10b      	bne.n	800d066 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d04e:	4b95      	ldr	r3, [pc, #596]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d056:	2b00      	cmp	r3, #0
 800d058:	d06c      	beq.n	800d134 <HAL_RCC_OscConfig+0x12c>
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	685b      	ldr	r3, [r3, #4]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d168      	bne.n	800d134 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800d062:	2301      	movs	r3, #1
 800d064:	e371      	b.n	800d74a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	685b      	ldr	r3, [r3, #4]
 800d06a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d06e:	d106      	bne.n	800d07e <HAL_RCC_OscConfig+0x76>
 800d070:	4b8c      	ldr	r3, [pc, #560]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	4a8b      	ldr	r2, [pc, #556]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d07a:	6013      	str	r3, [r2, #0]
 800d07c:	e02e      	b.n	800d0dc <HAL_RCC_OscConfig+0xd4>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d10c      	bne.n	800d0a0 <HAL_RCC_OscConfig+0x98>
 800d086:	4b87      	ldr	r3, [pc, #540]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4a86      	ldr	r2, [pc, #536]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d08c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d090:	6013      	str	r3, [r2, #0]
 800d092:	4b84      	ldr	r3, [pc, #528]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	4a83      	ldr	r2, [pc, #524]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d09c:	6013      	str	r3, [r2, #0]
 800d09e:	e01d      	b.n	800d0dc <HAL_RCC_OscConfig+0xd4>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	685b      	ldr	r3, [r3, #4]
 800d0a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d0a8:	d10c      	bne.n	800d0c4 <HAL_RCC_OscConfig+0xbc>
 800d0aa:	4b7e      	ldr	r3, [pc, #504]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	4a7d      	ldr	r2, [pc, #500]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d0b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d0b4:	6013      	str	r3, [r2, #0]
 800d0b6:	4b7b      	ldr	r3, [pc, #492]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4a7a      	ldr	r2, [pc, #488]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d0bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d0c0:	6013      	str	r3, [r2, #0]
 800d0c2:	e00b      	b.n	800d0dc <HAL_RCC_OscConfig+0xd4>
 800d0c4:	4b77      	ldr	r3, [pc, #476]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4a76      	ldr	r2, [pc, #472]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d0ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d0ce:	6013      	str	r3, [r2, #0]
 800d0d0:	4b74      	ldr	r3, [pc, #464]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4a73      	ldr	r2, [pc, #460]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d0d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d0da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d013      	beq.n	800d10c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0e4:	f7fd f9aa 	bl	800a43c <HAL_GetTick>
 800d0e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d0ea:	e008      	b.n	800d0fe <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d0ec:	f7fd f9a6 	bl	800a43c <HAL_GetTick>
 800d0f0:	4602      	mov	r2, r0
 800d0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f4:	1ad3      	subs	r3, r2, r3
 800d0f6:	2b64      	cmp	r3, #100	; 0x64
 800d0f8:	d901      	bls.n	800d0fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800d0fa:	2303      	movs	r3, #3
 800d0fc:	e325      	b.n	800d74a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d0fe:	4b69      	ldr	r3, [pc, #420]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d106:	2b00      	cmp	r3, #0
 800d108:	d0f0      	beq.n	800d0ec <HAL_RCC_OscConfig+0xe4>
 800d10a:	e014      	b.n	800d136 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d10c:	f7fd f996 	bl	800a43c <HAL_GetTick>
 800d110:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d112:	e008      	b.n	800d126 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800d114:	f7fd f992 	bl	800a43c <HAL_GetTick>
 800d118:	4602      	mov	r2, r0
 800d11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11c:	1ad3      	subs	r3, r2, r3
 800d11e:	2b64      	cmp	r3, #100	; 0x64
 800d120:	d901      	bls.n	800d126 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800d122:	2303      	movs	r3, #3
 800d124:	e311      	b.n	800d74a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800d126:	4b5f      	ldr	r3, [pc, #380]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1f0      	bne.n	800d114 <HAL_RCC_OscConfig+0x10c>
 800d132:	e000      	b.n	800d136 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f003 0302 	and.w	r3, r3, #2
 800d13e:	2b00      	cmp	r3, #0
 800d140:	f000 808a 	beq.w	800d258 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d144:	4b57      	ldr	r3, [pc, #348]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d146:	691b      	ldr	r3, [r3, #16]
 800d148:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d14c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d14e:	4b55      	ldr	r3, [pc, #340]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d152:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800d154:	6a3b      	ldr	r3, [r7, #32]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d007      	beq.n	800d16a <HAL_RCC_OscConfig+0x162>
 800d15a:	6a3b      	ldr	r3, [r7, #32]
 800d15c:	2b18      	cmp	r3, #24
 800d15e:	d137      	bne.n	800d1d0 <HAL_RCC_OscConfig+0x1c8>
 800d160:	69fb      	ldr	r3, [r7, #28]
 800d162:	f003 0303 	and.w	r3, r3, #3
 800d166:	2b00      	cmp	r3, #0
 800d168:	d132      	bne.n	800d1d0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d16a:	4b4e      	ldr	r3, [pc, #312]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f003 0304 	and.w	r3, r3, #4
 800d172:	2b00      	cmp	r3, #0
 800d174:	d005      	beq.n	800d182 <HAL_RCC_OscConfig+0x17a>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	68db      	ldr	r3, [r3, #12]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d101      	bne.n	800d182 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d17e:	2301      	movs	r3, #1
 800d180:	e2e3      	b.n	800d74a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d182:	4b48      	ldr	r3, [pc, #288]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f023 0219 	bic.w	r2, r3, #25
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	68db      	ldr	r3, [r3, #12]
 800d18e:	4945      	ldr	r1, [pc, #276]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d190:	4313      	orrs	r3, r2
 800d192:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800d194:	f7fd f952 	bl	800a43c <HAL_GetTick>
 800d198:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d19a:	e008      	b.n	800d1ae <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d19c:	f7fd f94e 	bl	800a43c <HAL_GetTick>
 800d1a0:	4602      	mov	r2, r0
 800d1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a4:	1ad3      	subs	r3, r2, r3
 800d1a6:	2b02      	cmp	r3, #2
 800d1a8:	d901      	bls.n	800d1ae <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800d1aa:	2303      	movs	r3, #3
 800d1ac:	e2cd      	b.n	800d74a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d1ae:	4b3d      	ldr	r3, [pc, #244]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f003 0304 	and.w	r3, r3, #4
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d0f0      	beq.n	800d19c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d1ba:	4b3a      	ldr	r3, [pc, #232]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d1bc:	685b      	ldr	r3, [r3, #4]
 800d1be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	691b      	ldr	r3, [r3, #16]
 800d1c6:	061b      	lsls	r3, r3, #24
 800d1c8:	4936      	ldr	r1, [pc, #216]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d1ca:	4313      	orrs	r3, r2
 800d1cc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d1ce:	e043      	b.n	800d258 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	68db      	ldr	r3, [r3, #12]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d026      	beq.n	800d226 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800d1d8:	4b32      	ldr	r3, [pc, #200]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f023 0219 	bic.w	r2, r3, #25
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	68db      	ldr	r3, [r3, #12]
 800d1e4:	492f      	ldr	r1, [pc, #188]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1ea:	f7fd f927 	bl	800a43c <HAL_GetTick>
 800d1ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d1f0:	e008      	b.n	800d204 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d1f2:	f7fd f923 	bl	800a43c <HAL_GetTick>
 800d1f6:	4602      	mov	r2, r0
 800d1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fa:	1ad3      	subs	r3, r2, r3
 800d1fc:	2b02      	cmp	r3, #2
 800d1fe:	d901      	bls.n	800d204 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800d200:	2303      	movs	r3, #3
 800d202:	e2a2      	b.n	800d74a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d204:	4b27      	ldr	r3, [pc, #156]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	f003 0304 	and.w	r3, r3, #4
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d0f0      	beq.n	800d1f2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d210:	4b24      	ldr	r3, [pc, #144]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	691b      	ldr	r3, [r3, #16]
 800d21c:	061b      	lsls	r3, r3, #24
 800d21e:	4921      	ldr	r1, [pc, #132]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d220:	4313      	orrs	r3, r2
 800d222:	604b      	str	r3, [r1, #4]
 800d224:	e018      	b.n	800d258 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d226:	4b1f      	ldr	r3, [pc, #124]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	4a1e      	ldr	r2, [pc, #120]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d22c:	f023 0301 	bic.w	r3, r3, #1
 800d230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d232:	f7fd f903 	bl	800a43c <HAL_GetTick>
 800d236:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d238:	e008      	b.n	800d24c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800d23a:	f7fd f8ff 	bl	800a43c <HAL_GetTick>
 800d23e:	4602      	mov	r2, r0
 800d240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d242:	1ad3      	subs	r3, r2, r3
 800d244:	2b02      	cmp	r3, #2
 800d246:	d901      	bls.n	800d24c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 800d248:	2303      	movs	r3, #3
 800d24a:	e27e      	b.n	800d74a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800d24c:	4b15      	ldr	r3, [pc, #84]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f003 0304 	and.w	r3, r3, #4
 800d254:	2b00      	cmp	r3, #0
 800d256:	d1f0      	bne.n	800d23a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f003 0310 	and.w	r3, r3, #16
 800d260:	2b00      	cmp	r3, #0
 800d262:	d06d      	beq.n	800d340 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d264:	4b0f      	ldr	r3, [pc, #60]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d266:	691b      	ldr	r3, [r3, #16]
 800d268:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d26c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d26e:	4b0d      	ldr	r3, [pc, #52]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d272:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d274:	69bb      	ldr	r3, [r7, #24]
 800d276:	2b08      	cmp	r3, #8
 800d278:	d007      	beq.n	800d28a <HAL_RCC_OscConfig+0x282>
 800d27a:	69bb      	ldr	r3, [r7, #24]
 800d27c:	2b18      	cmp	r3, #24
 800d27e:	d11e      	bne.n	800d2be <HAL_RCC_OscConfig+0x2b6>
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	f003 0303 	and.w	r3, r3, #3
 800d286:	2b01      	cmp	r3, #1
 800d288:	d119      	bne.n	800d2be <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d28a:	4b06      	ldr	r3, [pc, #24]	; (800d2a4 <HAL_RCC_OscConfig+0x29c>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d292:	2b00      	cmp	r3, #0
 800d294:	d008      	beq.n	800d2a8 <HAL_RCC_OscConfig+0x2a0>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	69db      	ldr	r3, [r3, #28]
 800d29a:	2b80      	cmp	r3, #128	; 0x80
 800d29c:	d004      	beq.n	800d2a8 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800d29e:	2301      	movs	r3, #1
 800d2a0:	e253      	b.n	800d74a <HAL_RCC_OscConfig+0x742>
 800d2a2:	bf00      	nop
 800d2a4:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d2a8:	4ba3      	ldr	r3, [pc, #652]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d2aa:	68db      	ldr	r3, [r3, #12]
 800d2ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6a1b      	ldr	r3, [r3, #32]
 800d2b4:	061b      	lsls	r3, r3, #24
 800d2b6:	49a0      	ldr	r1, [pc, #640]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d2bc:	e040      	b.n	800d340 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	69db      	ldr	r3, [r3, #28]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d023      	beq.n	800d30e <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d2c6:	4b9c      	ldr	r3, [pc, #624]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	4a9b      	ldr	r2, [pc, #620]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2d2:	f7fd f8b3 	bl	800a43c <HAL_GetTick>
 800d2d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d2d8:	e008      	b.n	800d2ec <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800d2da:	f7fd f8af 	bl	800a43c <HAL_GetTick>
 800d2de:	4602      	mov	r2, r0
 800d2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2e2:	1ad3      	subs	r3, r2, r3
 800d2e4:	2b02      	cmp	r3, #2
 800d2e6:	d901      	bls.n	800d2ec <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 800d2e8:	2303      	movs	r3, #3
 800d2ea:	e22e      	b.n	800d74a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d2ec:	4b92      	ldr	r3, [pc, #584]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d0f0      	beq.n	800d2da <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d2f8:	4b8f      	ldr	r3, [pc, #572]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d2fa:	68db      	ldr	r3, [r3, #12]
 800d2fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6a1b      	ldr	r3, [r3, #32]
 800d304:	061b      	lsls	r3, r3, #24
 800d306:	498c      	ldr	r1, [pc, #560]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d308:	4313      	orrs	r3, r2
 800d30a:	60cb      	str	r3, [r1, #12]
 800d30c:	e018      	b.n	800d340 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d30e:	4b8a      	ldr	r3, [pc, #552]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	4a89      	ldr	r2, [pc, #548]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d314:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d318:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d31a:	f7fd f88f 	bl	800a43c <HAL_GetTick>
 800d31e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d320:	e008      	b.n	800d334 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800d322:	f7fd f88b 	bl	800a43c <HAL_GetTick>
 800d326:	4602      	mov	r2, r0
 800d328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d32a:	1ad3      	subs	r3, r2, r3
 800d32c:	2b02      	cmp	r3, #2
 800d32e:	d901      	bls.n	800d334 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800d330:	2303      	movs	r3, #3
 800d332:	e20a      	b.n	800d74a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d334:	4b80      	ldr	r3, [pc, #512]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d1f0      	bne.n	800d322 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f003 0308 	and.w	r3, r3, #8
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d036      	beq.n	800d3ba <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	695b      	ldr	r3, [r3, #20]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d019      	beq.n	800d388 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d354:	4b78      	ldr	r3, [pc, #480]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d358:	4a77      	ldr	r2, [pc, #476]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d35a:	f043 0301 	orr.w	r3, r3, #1
 800d35e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d360:	f7fd f86c 	bl	800a43c <HAL_GetTick>
 800d364:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d366:	e008      	b.n	800d37a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d368:	f7fd f868 	bl	800a43c <HAL_GetTick>
 800d36c:	4602      	mov	r2, r0
 800d36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d370:	1ad3      	subs	r3, r2, r3
 800d372:	2b02      	cmp	r3, #2
 800d374:	d901      	bls.n	800d37a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800d376:	2303      	movs	r3, #3
 800d378:	e1e7      	b.n	800d74a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d37a:	4b6f      	ldr	r3, [pc, #444]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d37c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d37e:	f003 0302 	and.w	r3, r3, #2
 800d382:	2b00      	cmp	r3, #0
 800d384:	d0f0      	beq.n	800d368 <HAL_RCC_OscConfig+0x360>
 800d386:	e018      	b.n	800d3ba <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d388:	4b6b      	ldr	r3, [pc, #428]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d38a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d38c:	4a6a      	ldr	r2, [pc, #424]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d38e:	f023 0301 	bic.w	r3, r3, #1
 800d392:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d394:	f7fd f852 	bl	800a43c <HAL_GetTick>
 800d398:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d39a:	e008      	b.n	800d3ae <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d39c:	f7fd f84e 	bl	800a43c <HAL_GetTick>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3a4:	1ad3      	subs	r3, r2, r3
 800d3a6:	2b02      	cmp	r3, #2
 800d3a8:	d901      	bls.n	800d3ae <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800d3aa:	2303      	movs	r3, #3
 800d3ac:	e1cd      	b.n	800d74a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d3ae:	4b62      	ldr	r3, [pc, #392]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d3b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d3b2:	f003 0302 	and.w	r3, r3, #2
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d1f0      	bne.n	800d39c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	f003 0320 	and.w	r3, r3, #32
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d036      	beq.n	800d434 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	699b      	ldr	r3, [r3, #24]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d019      	beq.n	800d402 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d3ce:	4b5a      	ldr	r3, [pc, #360]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	4a59      	ldr	r2, [pc, #356]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d3d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d3d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d3da:	f7fd f82f 	bl	800a43c <HAL_GetTick>
 800d3de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d3e0:	e008      	b.n	800d3f4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800d3e2:	f7fd f82b 	bl	800a43c <HAL_GetTick>
 800d3e6:	4602      	mov	r2, r0
 800d3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ea:	1ad3      	subs	r3, r2, r3
 800d3ec:	2b02      	cmp	r3, #2
 800d3ee:	d901      	bls.n	800d3f4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800d3f0:	2303      	movs	r3, #3
 800d3f2:	e1aa      	b.n	800d74a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d3f4:	4b50      	ldr	r3, [pc, #320]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d0f0      	beq.n	800d3e2 <HAL_RCC_OscConfig+0x3da>
 800d400:	e018      	b.n	800d434 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d402:	4b4d      	ldr	r3, [pc, #308]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	4a4c      	ldr	r2, [pc, #304]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d408:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d40c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d40e:	f7fd f815 	bl	800a43c <HAL_GetTick>
 800d412:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d414:	e008      	b.n	800d428 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800d416:	f7fd f811 	bl	800a43c <HAL_GetTick>
 800d41a:	4602      	mov	r2, r0
 800d41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41e:	1ad3      	subs	r3, r2, r3
 800d420:	2b02      	cmp	r3, #2
 800d422:	d901      	bls.n	800d428 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 800d424:	2303      	movs	r3, #3
 800d426:	e190      	b.n	800d74a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d428:	4b43      	ldr	r3, [pc, #268]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d430:	2b00      	cmp	r3, #0
 800d432:	d1f0      	bne.n	800d416 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f003 0304 	and.w	r3, r3, #4
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	f000 8085 	beq.w	800d54c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d442:	4b3e      	ldr	r3, [pc, #248]	; (800d53c <HAL_RCC_OscConfig+0x534>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	4a3d      	ldr	r2, [pc, #244]	; (800d53c <HAL_RCC_OscConfig+0x534>)
 800d448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d44c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d44e:	f7fc fff5 	bl	800a43c <HAL_GetTick>
 800d452:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d454:	e008      	b.n	800d468 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800d456:	f7fc fff1 	bl	800a43c <HAL_GetTick>
 800d45a:	4602      	mov	r2, r0
 800d45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d45e:	1ad3      	subs	r3, r2, r3
 800d460:	2b64      	cmp	r3, #100	; 0x64
 800d462:	d901      	bls.n	800d468 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 800d464:	2303      	movs	r3, #3
 800d466:	e170      	b.n	800d74a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d468:	4b34      	ldr	r3, [pc, #208]	; (800d53c <HAL_RCC_OscConfig+0x534>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d470:	2b00      	cmp	r3, #0
 800d472:	d0f0      	beq.n	800d456 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	689b      	ldr	r3, [r3, #8]
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d106      	bne.n	800d48a <HAL_RCC_OscConfig+0x482>
 800d47c:	4b2e      	ldr	r3, [pc, #184]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d47e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d480:	4a2d      	ldr	r2, [pc, #180]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d482:	f043 0301 	orr.w	r3, r3, #1
 800d486:	6713      	str	r3, [r2, #112]	; 0x70
 800d488:	e02d      	b.n	800d4e6 <HAL_RCC_OscConfig+0x4de>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	689b      	ldr	r3, [r3, #8]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d10c      	bne.n	800d4ac <HAL_RCC_OscConfig+0x4a4>
 800d492:	4b29      	ldr	r3, [pc, #164]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d496:	4a28      	ldr	r2, [pc, #160]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d498:	f023 0301 	bic.w	r3, r3, #1
 800d49c:	6713      	str	r3, [r2, #112]	; 0x70
 800d49e:	4b26      	ldr	r3, [pc, #152]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d4a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4a2:	4a25      	ldr	r2, [pc, #148]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d4a4:	f023 0304 	bic.w	r3, r3, #4
 800d4a8:	6713      	str	r3, [r2, #112]	; 0x70
 800d4aa:	e01c      	b.n	800d4e6 <HAL_RCC_OscConfig+0x4de>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	689b      	ldr	r3, [r3, #8]
 800d4b0:	2b05      	cmp	r3, #5
 800d4b2:	d10c      	bne.n	800d4ce <HAL_RCC_OscConfig+0x4c6>
 800d4b4:	4b20      	ldr	r3, [pc, #128]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d4b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4b8:	4a1f      	ldr	r2, [pc, #124]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d4ba:	f043 0304 	orr.w	r3, r3, #4
 800d4be:	6713      	str	r3, [r2, #112]	; 0x70
 800d4c0:	4b1d      	ldr	r3, [pc, #116]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d4c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4c4:	4a1c      	ldr	r2, [pc, #112]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d4c6:	f043 0301 	orr.w	r3, r3, #1
 800d4ca:	6713      	str	r3, [r2, #112]	; 0x70
 800d4cc:	e00b      	b.n	800d4e6 <HAL_RCC_OscConfig+0x4de>
 800d4ce:	4b1a      	ldr	r3, [pc, #104]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d4d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4d2:	4a19      	ldr	r2, [pc, #100]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d4d4:	f023 0301 	bic.w	r3, r3, #1
 800d4d8:	6713      	str	r3, [r2, #112]	; 0x70
 800d4da:	4b17      	ldr	r3, [pc, #92]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d4dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4de:	4a16      	ldr	r2, [pc, #88]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d4e0:	f023 0304 	bic.w	r3, r3, #4
 800d4e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	689b      	ldr	r3, [r3, #8]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d015      	beq.n	800d51a <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d4ee:	f7fc ffa5 	bl	800a43c <HAL_GetTick>
 800d4f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d4f4:	e00a      	b.n	800d50c <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d4f6:	f7fc ffa1 	bl	800a43c <HAL_GetTick>
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4fe:	1ad3      	subs	r3, r2, r3
 800d500:	f241 3288 	movw	r2, #5000	; 0x1388
 800d504:	4293      	cmp	r3, r2
 800d506:	d901      	bls.n	800d50c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800d508:	2303      	movs	r3, #3
 800d50a:	e11e      	b.n	800d74a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d50c:	4b0a      	ldr	r3, [pc, #40]	; (800d538 <HAL_RCC_OscConfig+0x530>)
 800d50e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d510:	f003 0302 	and.w	r3, r3, #2
 800d514:	2b00      	cmp	r3, #0
 800d516:	d0ee      	beq.n	800d4f6 <HAL_RCC_OscConfig+0x4ee>
 800d518:	e018      	b.n	800d54c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d51a:	f7fc ff8f 	bl	800a43c <HAL_GetTick>
 800d51e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d520:	e00e      	b.n	800d540 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d522:	f7fc ff8b 	bl	800a43c <HAL_GetTick>
 800d526:	4602      	mov	r2, r0
 800d528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52a:	1ad3      	subs	r3, r2, r3
 800d52c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d530:	4293      	cmp	r3, r2
 800d532:	d905      	bls.n	800d540 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800d534:	2303      	movs	r3, #3
 800d536:	e108      	b.n	800d74a <HAL_RCC_OscConfig+0x742>
 800d538:	58024400 	.word	0x58024400
 800d53c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d540:	4b84      	ldr	r3, [pc, #528]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d544:	f003 0302 	and.w	r3, r3, #2
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d1ea      	bne.n	800d522 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d550:	2b00      	cmp	r3, #0
 800d552:	f000 80f9 	beq.w	800d748 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d556:	4b7f      	ldr	r3, [pc, #508]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d558:	691b      	ldr	r3, [r3, #16]
 800d55a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d55e:	2b18      	cmp	r3, #24
 800d560:	f000 80b4 	beq.w	800d6cc <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d568:	2b02      	cmp	r3, #2
 800d56a:	f040 8095 	bne.w	800d698 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d56e:	4b79      	ldr	r3, [pc, #484]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	4a78      	ldr	r2, [pc, #480]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d574:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d57a:	f7fc ff5f 	bl	800a43c <HAL_GetTick>
 800d57e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d580:	e008      	b.n	800d594 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d582:	f7fc ff5b 	bl	800a43c <HAL_GetTick>
 800d586:	4602      	mov	r2, r0
 800d588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d58a:	1ad3      	subs	r3, r2, r3
 800d58c:	2b02      	cmp	r3, #2
 800d58e:	d901      	bls.n	800d594 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800d590:	2303      	movs	r3, #3
 800d592:	e0da      	b.n	800d74a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d594:	4b6f      	ldr	r3, [pc, #444]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d1f0      	bne.n	800d582 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d5a0:	4b6c      	ldr	r3, [pc, #432]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d5a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d5a4:	4b6c      	ldr	r3, [pc, #432]	; (800d758 <HAL_RCC_OscConfig+0x750>)
 800d5a6:	4013      	ands	r3, r2
 800d5a8:	687a      	ldr	r2, [r7, #4]
 800d5aa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d5ac:	687a      	ldr	r2, [r7, #4]
 800d5ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d5b0:	0112      	lsls	r2, r2, #4
 800d5b2:	430a      	orrs	r2, r1
 800d5b4:	4967      	ldr	r1, [pc, #412]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	628b      	str	r3, [r1, #40]	; 0x28
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5be:	3b01      	subs	r3, #1
 800d5c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5c8:	3b01      	subs	r3, #1
 800d5ca:	025b      	lsls	r3, r3, #9
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	431a      	orrs	r2, r3
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5d4:	3b01      	subs	r3, #1
 800d5d6:	041b      	lsls	r3, r3, #16
 800d5d8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d5dc:	431a      	orrs	r2, r3
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5e2:	3b01      	subs	r3, #1
 800d5e4:	061b      	lsls	r3, r3, #24
 800d5e6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d5ea:	495a      	ldr	r1, [pc, #360]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d5ec:	4313      	orrs	r3, r2
 800d5ee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800d5f0:	4b58      	ldr	r3, [pc, #352]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f4:	4a57      	ldr	r2, [pc, #348]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d5f6:	f023 0301 	bic.w	r3, r3, #1
 800d5fa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d5fc:	4b55      	ldr	r3, [pc, #340]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d5fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d600:	4b56      	ldr	r3, [pc, #344]	; (800d75c <HAL_RCC_OscConfig+0x754>)
 800d602:	4013      	ands	r3, r2
 800d604:	687a      	ldr	r2, [r7, #4]
 800d606:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d608:	00d2      	lsls	r2, r2, #3
 800d60a:	4952      	ldr	r1, [pc, #328]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d60c:	4313      	orrs	r3, r2
 800d60e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d610:	4b50      	ldr	r3, [pc, #320]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d614:	f023 020c 	bic.w	r2, r3, #12
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d61c:	494d      	ldr	r1, [pc, #308]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d61e:	4313      	orrs	r3, r2
 800d620:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d622:	4b4c      	ldr	r3, [pc, #304]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d626:	f023 0202 	bic.w	r2, r3, #2
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d62e:	4949      	ldr	r1, [pc, #292]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d630:	4313      	orrs	r3, r2
 800d632:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d634:	4b47      	ldr	r3, [pc, #284]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d638:	4a46      	ldr	r2, [pc, #280]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d63a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d63e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d640:	4b44      	ldr	r3, [pc, #272]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d644:	4a43      	ldr	r2, [pc, #268]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d64a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d64c:	4b41      	ldr	r3, [pc, #260]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d650:	4a40      	ldr	r2, [pc, #256]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d652:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d656:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800d658:	4b3e      	ldr	r3, [pc, #248]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d65c:	4a3d      	ldr	r2, [pc, #244]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d65e:	f043 0301 	orr.w	r3, r3, #1
 800d662:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d664:	4b3b      	ldr	r3, [pc, #236]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	4a3a      	ldr	r2, [pc, #232]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d66a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d66e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d670:	f7fc fee4 	bl	800a43c <HAL_GetTick>
 800d674:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d676:	e008      	b.n	800d68a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d678:	f7fc fee0 	bl	800a43c <HAL_GetTick>
 800d67c:	4602      	mov	r2, r0
 800d67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d680:	1ad3      	subs	r3, r2, r3
 800d682:	2b02      	cmp	r3, #2
 800d684:	d901      	bls.n	800d68a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800d686:	2303      	movs	r3, #3
 800d688:	e05f      	b.n	800d74a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d68a:	4b32      	ldr	r3, [pc, #200]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d692:	2b00      	cmp	r3, #0
 800d694:	d0f0      	beq.n	800d678 <HAL_RCC_OscConfig+0x670>
 800d696:	e057      	b.n	800d748 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d698:	4b2e      	ldr	r3, [pc, #184]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	4a2d      	ldr	r2, [pc, #180]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d69e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d6a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d6a4:	f7fc feca 	bl	800a43c <HAL_GetTick>
 800d6a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d6aa:	e008      	b.n	800d6be <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d6ac:	f7fc fec6 	bl	800a43c <HAL_GetTick>
 800d6b0:	4602      	mov	r2, r0
 800d6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b4:	1ad3      	subs	r3, r2, r3
 800d6b6:	2b02      	cmp	r3, #2
 800d6b8:	d901      	bls.n	800d6be <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800d6ba:	2303      	movs	r3, #3
 800d6bc:	e045      	b.n	800d74a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d6be:	4b25      	ldr	r3, [pc, #148]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d1f0      	bne.n	800d6ac <HAL_RCC_OscConfig+0x6a4>
 800d6ca:	e03d      	b.n	800d748 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d6cc:	4b21      	ldr	r3, [pc, #132]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d6ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d6d2:	4b20      	ldr	r3, [pc, #128]	; (800d754 <HAL_RCC_OscConfig+0x74c>)
 800d6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6d6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6dc:	2b01      	cmp	r3, #1
 800d6de:	d031      	beq.n	800d744 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	f003 0203 	and.w	r2, r3, #3
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d12a      	bne.n	800d744 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	091b      	lsrs	r3, r3, #4
 800d6f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d6fa:	429a      	cmp	r2, r3
 800d6fc:	d122      	bne.n	800d744 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d708:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d11a      	bne.n	800d744 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	0a5b      	lsrs	r3, r3, #9
 800d712:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d71a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d71c:	429a      	cmp	r2, r3
 800d71e:	d111      	bne.n	800d744 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	0c1b      	lsrs	r3, r3, #16
 800d724:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d72c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d72e:	429a      	cmp	r2, r3
 800d730:	d108      	bne.n	800d744 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	0e1b      	lsrs	r3, r3, #24
 800d736:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d73e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d740:	429a      	cmp	r2, r3
 800d742:	d001      	beq.n	800d748 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 800d744:	2301      	movs	r3, #1
 800d746:	e000      	b.n	800d74a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 800d748:	2300      	movs	r3, #0
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3730      	adds	r7, #48	; 0x30
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	58024400 	.word	0x58024400
 800d758:	fffffc0c 	.word	0xfffffc0c
 800d75c:	ffff0007 	.word	0xffff0007

0800d760 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b086      	sub	sp, #24
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d101      	bne.n	800d774 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d770:	2301      	movs	r3, #1
 800d772:	e19c      	b.n	800daae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d774:	4b8a      	ldr	r3, [pc, #552]	; (800d9a0 <HAL_RCC_ClockConfig+0x240>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f003 030f 	and.w	r3, r3, #15
 800d77c:	683a      	ldr	r2, [r7, #0]
 800d77e:	429a      	cmp	r2, r3
 800d780:	d910      	bls.n	800d7a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d782:	4b87      	ldr	r3, [pc, #540]	; (800d9a0 <HAL_RCC_ClockConfig+0x240>)
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f023 020f 	bic.w	r2, r3, #15
 800d78a:	4985      	ldr	r1, [pc, #532]	; (800d9a0 <HAL_RCC_ClockConfig+0x240>)
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	4313      	orrs	r3, r2
 800d790:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d792:	4b83      	ldr	r3, [pc, #524]	; (800d9a0 <HAL_RCC_ClockConfig+0x240>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f003 030f 	and.w	r3, r3, #15
 800d79a:	683a      	ldr	r2, [r7, #0]
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d001      	beq.n	800d7a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	e184      	b.n	800daae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f003 0304 	and.w	r3, r3, #4
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d010      	beq.n	800d7d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	691a      	ldr	r2, [r3, #16]
 800d7b4:	4b7b      	ldr	r3, [pc, #492]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d7b6:	699b      	ldr	r3, [r3, #24]
 800d7b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d908      	bls.n	800d7d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d7c0:	4b78      	ldr	r3, [pc, #480]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d7c2:	699b      	ldr	r3, [r3, #24]
 800d7c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	691b      	ldr	r3, [r3, #16]
 800d7cc:	4975      	ldr	r1, [pc, #468]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f003 0308 	and.w	r3, r3, #8
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d010      	beq.n	800d800 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	695a      	ldr	r2, [r3, #20]
 800d7e2:	4b70      	ldr	r3, [pc, #448]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d7e4:	69db      	ldr	r3, [r3, #28]
 800d7e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d908      	bls.n	800d800 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d7ee:	4b6d      	ldr	r3, [pc, #436]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d7f0:	69db      	ldr	r3, [r3, #28]
 800d7f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	695b      	ldr	r3, [r3, #20]
 800d7fa:	496a      	ldr	r1, [pc, #424]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d7fc:	4313      	orrs	r3, r2
 800d7fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f003 0310 	and.w	r3, r3, #16
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d010      	beq.n	800d82e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	699a      	ldr	r2, [r3, #24]
 800d810:	4b64      	ldr	r3, [pc, #400]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d812:	69db      	ldr	r3, [r3, #28]
 800d814:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d818:	429a      	cmp	r2, r3
 800d81a:	d908      	bls.n	800d82e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d81c:	4b61      	ldr	r3, [pc, #388]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d81e:	69db      	ldr	r3, [r3, #28]
 800d820:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	699b      	ldr	r3, [r3, #24]
 800d828:	495e      	ldr	r1, [pc, #376]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d82a:	4313      	orrs	r3, r2
 800d82c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	f003 0320 	and.w	r3, r3, #32
 800d836:	2b00      	cmp	r3, #0
 800d838:	d010      	beq.n	800d85c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	69da      	ldr	r2, [r3, #28]
 800d83e:	4b59      	ldr	r3, [pc, #356]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d840:	6a1b      	ldr	r3, [r3, #32]
 800d842:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d846:	429a      	cmp	r2, r3
 800d848:	d908      	bls.n	800d85c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800d84a:	4b56      	ldr	r3, [pc, #344]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d84c:	6a1b      	ldr	r3, [r3, #32]
 800d84e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	69db      	ldr	r3, [r3, #28]
 800d856:	4953      	ldr	r1, [pc, #332]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d858:	4313      	orrs	r3, r2
 800d85a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	f003 0302 	and.w	r3, r3, #2
 800d864:	2b00      	cmp	r3, #0
 800d866:	d010      	beq.n	800d88a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	68da      	ldr	r2, [r3, #12]
 800d86c:	4b4d      	ldr	r3, [pc, #308]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d86e:	699b      	ldr	r3, [r3, #24]
 800d870:	f003 030f 	and.w	r3, r3, #15
 800d874:	429a      	cmp	r2, r3
 800d876:	d908      	bls.n	800d88a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d878:	4b4a      	ldr	r3, [pc, #296]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d87a:	699b      	ldr	r3, [r3, #24]
 800d87c:	f023 020f 	bic.w	r2, r3, #15
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	68db      	ldr	r3, [r3, #12]
 800d884:	4947      	ldr	r1, [pc, #284]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d886:	4313      	orrs	r3, r2
 800d888:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f003 0301 	and.w	r3, r3, #1
 800d892:	2b00      	cmp	r3, #0
 800d894:	d055      	beq.n	800d942 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d896:	4b43      	ldr	r3, [pc, #268]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d898:	699b      	ldr	r3, [r3, #24]
 800d89a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	689b      	ldr	r3, [r3, #8]
 800d8a2:	4940      	ldr	r1, [pc, #256]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d8a4:	4313      	orrs	r3, r2
 800d8a6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	2b02      	cmp	r3, #2
 800d8ae:	d107      	bne.n	800d8c0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d8b0:	4b3c      	ldr	r3, [pc, #240]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d121      	bne.n	800d900 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800d8bc:	2301      	movs	r3, #1
 800d8be:	e0f6      	b.n	800daae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	685b      	ldr	r3, [r3, #4]
 800d8c4:	2b03      	cmp	r3, #3
 800d8c6:	d107      	bne.n	800d8d8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d8c8:	4b36      	ldr	r3, [pc, #216]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d115      	bne.n	800d900 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	e0ea      	b.n	800daae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	2b01      	cmp	r3, #1
 800d8de:	d107      	bne.n	800d8f0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d8e0:	4b30      	ldr	r3, [pc, #192]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d109      	bne.n	800d900 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800d8ec:	2301      	movs	r3, #1
 800d8ee:	e0de      	b.n	800daae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d8f0:	4b2c      	ldr	r3, [pc, #176]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f003 0304 	and.w	r3, r3, #4
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d101      	bne.n	800d900 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	e0d6      	b.n	800daae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d900:	4b28      	ldr	r3, [pc, #160]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d902:	691b      	ldr	r3, [r3, #16]
 800d904:	f023 0207 	bic.w	r2, r3, #7
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	4925      	ldr	r1, [pc, #148]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d90e:	4313      	orrs	r3, r2
 800d910:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d912:	f7fc fd93 	bl	800a43c <HAL_GetTick>
 800d916:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d918:	e00a      	b.n	800d930 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d91a:	f7fc fd8f 	bl	800a43c <HAL_GetTick>
 800d91e:	4602      	mov	r2, r0
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	1ad3      	subs	r3, r2, r3
 800d924:	f241 3288 	movw	r2, #5000	; 0x1388
 800d928:	4293      	cmp	r3, r2
 800d92a:	d901      	bls.n	800d930 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800d92c:	2303      	movs	r3, #3
 800d92e:	e0be      	b.n	800daae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d930:	4b1c      	ldr	r3, [pc, #112]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d932:	691b      	ldr	r3, [r3, #16]
 800d934:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	685b      	ldr	r3, [r3, #4]
 800d93c:	00db      	lsls	r3, r3, #3
 800d93e:	429a      	cmp	r2, r3
 800d940:	d1eb      	bne.n	800d91a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	f003 0302 	and.w	r3, r3, #2
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d010      	beq.n	800d970 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	68da      	ldr	r2, [r3, #12]
 800d952:	4b14      	ldr	r3, [pc, #80]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d954:	699b      	ldr	r3, [r3, #24]
 800d956:	f003 030f 	and.w	r3, r3, #15
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d208      	bcs.n	800d970 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d95e:	4b11      	ldr	r3, [pc, #68]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d960:	699b      	ldr	r3, [r3, #24]
 800d962:	f023 020f 	bic.w	r2, r3, #15
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	68db      	ldr	r3, [r3, #12]
 800d96a:	490e      	ldr	r1, [pc, #56]	; (800d9a4 <HAL_RCC_ClockConfig+0x244>)
 800d96c:	4313      	orrs	r3, r2
 800d96e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d970:	4b0b      	ldr	r3, [pc, #44]	; (800d9a0 <HAL_RCC_ClockConfig+0x240>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f003 030f 	and.w	r3, r3, #15
 800d978:	683a      	ldr	r2, [r7, #0]
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d214      	bcs.n	800d9a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d97e:	4b08      	ldr	r3, [pc, #32]	; (800d9a0 <HAL_RCC_ClockConfig+0x240>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f023 020f 	bic.w	r2, r3, #15
 800d986:	4906      	ldr	r1, [pc, #24]	; (800d9a0 <HAL_RCC_ClockConfig+0x240>)
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	4313      	orrs	r3, r2
 800d98c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d98e:	4b04      	ldr	r3, [pc, #16]	; (800d9a0 <HAL_RCC_ClockConfig+0x240>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	f003 030f 	and.w	r3, r3, #15
 800d996:	683a      	ldr	r2, [r7, #0]
 800d998:	429a      	cmp	r2, r3
 800d99a:	d005      	beq.n	800d9a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d99c:	2301      	movs	r3, #1
 800d99e:	e086      	b.n	800daae <HAL_RCC_ClockConfig+0x34e>
 800d9a0:	52002000 	.word	0x52002000
 800d9a4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	f003 0304 	and.w	r3, r3, #4
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d010      	beq.n	800d9d6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	691a      	ldr	r2, [r3, #16]
 800d9b8:	4b3f      	ldr	r3, [pc, #252]	; (800dab8 <HAL_RCC_ClockConfig+0x358>)
 800d9ba:	699b      	ldr	r3, [r3, #24]
 800d9bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d208      	bcs.n	800d9d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d9c4:	4b3c      	ldr	r3, [pc, #240]	; (800dab8 <HAL_RCC_ClockConfig+0x358>)
 800d9c6:	699b      	ldr	r3, [r3, #24]
 800d9c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	691b      	ldr	r3, [r3, #16]
 800d9d0:	4939      	ldr	r1, [pc, #228]	; (800dab8 <HAL_RCC_ClockConfig+0x358>)
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f003 0308 	and.w	r3, r3, #8
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d010      	beq.n	800da04 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	695a      	ldr	r2, [r3, #20]
 800d9e6:	4b34      	ldr	r3, [pc, #208]	; (800dab8 <HAL_RCC_ClockConfig+0x358>)
 800d9e8:	69db      	ldr	r3, [r3, #28]
 800d9ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d9ee:	429a      	cmp	r2, r3
 800d9f0:	d208      	bcs.n	800da04 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d9f2:	4b31      	ldr	r3, [pc, #196]	; (800dab8 <HAL_RCC_ClockConfig+0x358>)
 800d9f4:	69db      	ldr	r3, [r3, #28]
 800d9f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	695b      	ldr	r3, [r3, #20]
 800d9fe:	492e      	ldr	r1, [pc, #184]	; (800dab8 <HAL_RCC_ClockConfig+0x358>)
 800da00:	4313      	orrs	r3, r2
 800da02:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	f003 0310 	and.w	r3, r3, #16
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d010      	beq.n	800da32 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	699a      	ldr	r2, [r3, #24]
 800da14:	4b28      	ldr	r3, [pc, #160]	; (800dab8 <HAL_RCC_ClockConfig+0x358>)
 800da16:	69db      	ldr	r3, [r3, #28]
 800da18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d208      	bcs.n	800da32 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800da20:	4b25      	ldr	r3, [pc, #148]	; (800dab8 <HAL_RCC_ClockConfig+0x358>)
 800da22:	69db      	ldr	r3, [r3, #28]
 800da24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	699b      	ldr	r3, [r3, #24]
 800da2c:	4922      	ldr	r1, [pc, #136]	; (800dab8 <HAL_RCC_ClockConfig+0x358>)
 800da2e:	4313      	orrs	r3, r2
 800da30:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	f003 0320 	and.w	r3, r3, #32
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d010      	beq.n	800da60 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	69da      	ldr	r2, [r3, #28]
 800da42:	4b1d      	ldr	r3, [pc, #116]	; (800dab8 <HAL_RCC_ClockConfig+0x358>)
 800da44:	6a1b      	ldr	r3, [r3, #32]
 800da46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d208      	bcs.n	800da60 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800da4e:	4b1a      	ldr	r3, [pc, #104]	; (800dab8 <HAL_RCC_ClockConfig+0x358>)
 800da50:	6a1b      	ldr	r3, [r3, #32]
 800da52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	69db      	ldr	r3, [r3, #28]
 800da5a:	4917      	ldr	r1, [pc, #92]	; (800dab8 <HAL_RCC_ClockConfig+0x358>)
 800da5c:	4313      	orrs	r3, r2
 800da5e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800da60:	f000 f844 	bl	800daec <HAL_RCC_GetSysClockFreq>
 800da64:	4602      	mov	r2, r0
 800da66:	4b14      	ldr	r3, [pc, #80]	; (800dab8 <HAL_RCC_ClockConfig+0x358>)
 800da68:	699b      	ldr	r3, [r3, #24]
 800da6a:	0a1b      	lsrs	r3, r3, #8
 800da6c:	f003 030f 	and.w	r3, r3, #15
 800da70:	4912      	ldr	r1, [pc, #72]	; (800dabc <HAL_RCC_ClockConfig+0x35c>)
 800da72:	5ccb      	ldrb	r3, [r1, r3]
 800da74:	f003 031f 	and.w	r3, r3, #31
 800da78:	fa22 f303 	lsr.w	r3, r2, r3
 800da7c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800da7e:	4b0e      	ldr	r3, [pc, #56]	; (800dab8 <HAL_RCC_ClockConfig+0x358>)
 800da80:	699b      	ldr	r3, [r3, #24]
 800da82:	f003 030f 	and.w	r3, r3, #15
 800da86:	4a0d      	ldr	r2, [pc, #52]	; (800dabc <HAL_RCC_ClockConfig+0x35c>)
 800da88:	5cd3      	ldrb	r3, [r2, r3]
 800da8a:	f003 031f 	and.w	r3, r3, #31
 800da8e:	693a      	ldr	r2, [r7, #16]
 800da90:	fa22 f303 	lsr.w	r3, r2, r3
 800da94:	4a0a      	ldr	r2, [pc, #40]	; (800dac0 <HAL_RCC_ClockConfig+0x360>)
 800da96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800da98:	4a0a      	ldr	r2, [pc, #40]	; (800dac4 <HAL_RCC_ClockConfig+0x364>)
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800da9e:	4b0a      	ldr	r3, [pc, #40]	; (800dac8 <HAL_RCC_ClockConfig+0x368>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	4618      	mov	r0, r3
 800daa4:	f7fc fc80 	bl	800a3a8 <HAL_InitTick>
 800daa8:	4603      	mov	r3, r0
 800daaa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800daac:	7bfb      	ldrb	r3, [r7, #15]
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3718      	adds	r7, #24
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop
 800dab8:	58024400 	.word	0x58024400
 800dabc:	08018310 	.word	0x08018310
 800dac0:	24000004 	.word	0x24000004
 800dac4:	24000000 	.word	0x24000000
 800dac8:	24000008 	.word	0x24000008

0800dacc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800dacc:	b480      	push	{r7}
 800dace:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800dad0:	4b05      	ldr	r3, [pc, #20]	; (800dae8 <HAL_RCC_EnableCSS+0x1c>)
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	4a04      	ldr	r2, [pc, #16]	; (800dae8 <HAL_RCC_EnableCSS+0x1c>)
 800dad6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dada:	6013      	str	r3, [r2, #0]
}
 800dadc:	bf00      	nop
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr
 800dae6:	bf00      	nop
 800dae8:	58024400 	.word	0x58024400

0800daec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800daec:	b480      	push	{r7}
 800daee:	b089      	sub	sp, #36	; 0x24
 800daf0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800daf2:	4bb3      	ldr	r3, [pc, #716]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800daf4:	691b      	ldr	r3, [r3, #16]
 800daf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dafa:	2b18      	cmp	r3, #24
 800dafc:	f200 8155 	bhi.w	800ddaa <HAL_RCC_GetSysClockFreq+0x2be>
 800db00:	a201      	add	r2, pc, #4	; (adr r2, 800db08 <HAL_RCC_GetSysClockFreq+0x1c>)
 800db02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db06:	bf00      	nop
 800db08:	0800db6d 	.word	0x0800db6d
 800db0c:	0800ddab 	.word	0x0800ddab
 800db10:	0800ddab 	.word	0x0800ddab
 800db14:	0800ddab 	.word	0x0800ddab
 800db18:	0800ddab 	.word	0x0800ddab
 800db1c:	0800ddab 	.word	0x0800ddab
 800db20:	0800ddab 	.word	0x0800ddab
 800db24:	0800ddab 	.word	0x0800ddab
 800db28:	0800db93 	.word	0x0800db93
 800db2c:	0800ddab 	.word	0x0800ddab
 800db30:	0800ddab 	.word	0x0800ddab
 800db34:	0800ddab 	.word	0x0800ddab
 800db38:	0800ddab 	.word	0x0800ddab
 800db3c:	0800ddab 	.word	0x0800ddab
 800db40:	0800ddab 	.word	0x0800ddab
 800db44:	0800ddab 	.word	0x0800ddab
 800db48:	0800db99 	.word	0x0800db99
 800db4c:	0800ddab 	.word	0x0800ddab
 800db50:	0800ddab 	.word	0x0800ddab
 800db54:	0800ddab 	.word	0x0800ddab
 800db58:	0800ddab 	.word	0x0800ddab
 800db5c:	0800ddab 	.word	0x0800ddab
 800db60:	0800ddab 	.word	0x0800ddab
 800db64:	0800ddab 	.word	0x0800ddab
 800db68:	0800db9f 	.word	0x0800db9f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db6c:	4b94      	ldr	r3, [pc, #592]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	f003 0320 	and.w	r3, r3, #32
 800db74:	2b00      	cmp	r3, #0
 800db76:	d009      	beq.n	800db8c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800db78:	4b91      	ldr	r3, [pc, #580]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	08db      	lsrs	r3, r3, #3
 800db7e:	f003 0303 	and.w	r3, r3, #3
 800db82:	4a90      	ldr	r2, [pc, #576]	; (800ddc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800db84:	fa22 f303 	lsr.w	r3, r2, r3
 800db88:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800db8a:	e111      	b.n	800ddb0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800db8c:	4b8d      	ldr	r3, [pc, #564]	; (800ddc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800db8e:	61bb      	str	r3, [r7, #24]
    break;
 800db90:	e10e      	b.n	800ddb0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800db92:	4b8d      	ldr	r3, [pc, #564]	; (800ddc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800db94:	61bb      	str	r3, [r7, #24]
    break;
 800db96:	e10b      	b.n	800ddb0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800db98:	4b8c      	ldr	r3, [pc, #560]	; (800ddcc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800db9a:	61bb      	str	r3, [r7, #24]
    break;
 800db9c:	e108      	b.n	800ddb0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800db9e:	4b88      	ldr	r3, [pc, #544]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dba2:	f003 0303 	and.w	r3, r3, #3
 800dba6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800dba8:	4b85      	ldr	r3, [pc, #532]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dbaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbac:	091b      	lsrs	r3, r3, #4
 800dbae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbb2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800dbb4:	4b82      	ldr	r3, [pc, #520]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbb8:	f003 0301 	and.w	r3, r3, #1
 800dbbc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800dbbe:	4b80      	ldr	r3, [pc, #512]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dbc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbc2:	08db      	lsrs	r3, r3, #3
 800dbc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dbc8:	68fa      	ldr	r2, [r7, #12]
 800dbca:	fb02 f303 	mul.w	r3, r2, r3
 800dbce:	ee07 3a90 	vmov	s15, r3
 800dbd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbd6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	f000 80e1 	beq.w	800dda4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	2b02      	cmp	r3, #2
 800dbe6:	f000 8083 	beq.w	800dcf0 <HAL_RCC_GetSysClockFreq+0x204>
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	2b02      	cmp	r3, #2
 800dbee:	f200 80a1 	bhi.w	800dd34 <HAL_RCC_GetSysClockFreq+0x248>
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d003      	beq.n	800dc00 <HAL_RCC_GetSysClockFreq+0x114>
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	2b01      	cmp	r3, #1
 800dbfc:	d056      	beq.n	800dcac <HAL_RCC_GetSysClockFreq+0x1c0>
 800dbfe:	e099      	b.n	800dd34 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc00:	4b6f      	ldr	r3, [pc, #444]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	f003 0320 	and.w	r3, r3, #32
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d02d      	beq.n	800dc68 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800dc0c:	4b6c      	ldr	r3, [pc, #432]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	08db      	lsrs	r3, r3, #3
 800dc12:	f003 0303 	and.w	r3, r3, #3
 800dc16:	4a6b      	ldr	r2, [pc, #428]	; (800ddc4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800dc18:	fa22 f303 	lsr.w	r3, r2, r3
 800dc1c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	ee07 3a90 	vmov	s15, r3
 800dc24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	ee07 3a90 	vmov	s15, r3
 800dc2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc36:	4b62      	ldr	r3, [pc, #392]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dc38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc3e:	ee07 3a90 	vmov	s15, r3
 800dc42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc46:	ed97 6a02 	vldr	s12, [r7, #8]
 800dc4a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ddd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dc4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800dc66:	e087      	b.n	800dd78 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	ee07 3a90 	vmov	s15, r3
 800dc6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc72:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ddd4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800dc76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc7a:	4b51      	ldr	r3, [pc, #324]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dc7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc82:	ee07 3a90 	vmov	s15, r3
 800dc86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc8a:	ed97 6a02 	vldr	s12, [r7, #8]
 800dc8e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ddd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dc92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dca6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dcaa:	e065      	b.n	800dd78 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	ee07 3a90 	vmov	s15, r3
 800dcb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcb6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ddd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800dcba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcbe:	4b40      	ldr	r3, [pc, #256]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dcc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcc6:	ee07 3a90 	vmov	s15, r3
 800dcca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcce:	ed97 6a02 	vldr	s12, [r7, #8]
 800dcd2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ddd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dcd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dcda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dcde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dcee:	e043      	b.n	800dd78 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	ee07 3a90 	vmov	s15, r3
 800dcf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcfa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800dddc <HAL_RCC_GetSysClockFreq+0x2f0>
 800dcfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd02:	4b2f      	ldr	r3, [pc, #188]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd0a:	ee07 3a90 	vmov	s15, r3
 800dd0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd12:	ed97 6a02 	vldr	s12, [r7, #8]
 800dd16:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ddd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dd1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd32:	e021      	b.n	800dd78 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800dd34:	693b      	ldr	r3, [r7, #16]
 800dd36:	ee07 3a90 	vmov	s15, r3
 800dd3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd3e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ddd8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800dd42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd46:	4b1e      	ldr	r3, [pc, #120]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd4e:	ee07 3a90 	vmov	s15, r3
 800dd52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd56:	ed97 6a02 	vldr	s12, [r7, #8]
 800dd5a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ddd0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800dd5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd76:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800dd78:	4b11      	ldr	r3, [pc, #68]	; (800ddc0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dd7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd7c:	0a5b      	lsrs	r3, r3, #9
 800dd7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd82:	3301      	adds	r3, #1
 800dd84:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	ee07 3a90 	vmov	s15, r3
 800dd8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800dd90:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd9c:	ee17 3a90 	vmov	r3, s15
 800dda0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800dda2:	e005      	b.n	800ddb0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800dda4:	2300      	movs	r3, #0
 800dda6:	61bb      	str	r3, [r7, #24]
    break;
 800dda8:	e002      	b.n	800ddb0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800ddaa:	4b07      	ldr	r3, [pc, #28]	; (800ddc8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ddac:	61bb      	str	r3, [r7, #24]
    break;
 800ddae:	bf00      	nop
  }

  return sysclockfreq;
 800ddb0:	69bb      	ldr	r3, [r7, #24]
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3724      	adds	r7, #36	; 0x24
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbc:	4770      	bx	lr
 800ddbe:	bf00      	nop
 800ddc0:	58024400 	.word	0x58024400
 800ddc4:	03d09000 	.word	0x03d09000
 800ddc8:	003d0900 	.word	0x003d0900
 800ddcc:	017d7840 	.word	0x017d7840
 800ddd0:	46000000 	.word	0x46000000
 800ddd4:	4c742400 	.word	0x4c742400
 800ddd8:	4a742400 	.word	0x4a742400
 800dddc:	4bbebc20 	.word	0x4bbebc20

0800dde0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b082      	sub	sp, #8
 800dde4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800dde6:	f7ff fe81 	bl	800daec <HAL_RCC_GetSysClockFreq>
 800ddea:	4602      	mov	r2, r0
 800ddec:	4b10      	ldr	r3, [pc, #64]	; (800de30 <HAL_RCC_GetHCLKFreq+0x50>)
 800ddee:	699b      	ldr	r3, [r3, #24]
 800ddf0:	0a1b      	lsrs	r3, r3, #8
 800ddf2:	f003 030f 	and.w	r3, r3, #15
 800ddf6:	490f      	ldr	r1, [pc, #60]	; (800de34 <HAL_RCC_GetHCLKFreq+0x54>)
 800ddf8:	5ccb      	ldrb	r3, [r1, r3]
 800ddfa:	f003 031f 	and.w	r3, r3, #31
 800ddfe:	fa22 f303 	lsr.w	r3, r2, r3
 800de02:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800de04:	4b0a      	ldr	r3, [pc, #40]	; (800de30 <HAL_RCC_GetHCLKFreq+0x50>)
 800de06:	699b      	ldr	r3, [r3, #24]
 800de08:	f003 030f 	and.w	r3, r3, #15
 800de0c:	4a09      	ldr	r2, [pc, #36]	; (800de34 <HAL_RCC_GetHCLKFreq+0x54>)
 800de0e:	5cd3      	ldrb	r3, [r2, r3]
 800de10:	f003 031f 	and.w	r3, r3, #31
 800de14:	687a      	ldr	r2, [r7, #4]
 800de16:	fa22 f303 	lsr.w	r3, r2, r3
 800de1a:	4a07      	ldr	r2, [pc, #28]	; (800de38 <HAL_RCC_GetHCLKFreq+0x58>)
 800de1c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800de1e:	4a07      	ldr	r2, [pc, #28]	; (800de3c <HAL_RCC_GetHCLKFreq+0x5c>)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800de24:	4b04      	ldr	r3, [pc, #16]	; (800de38 <HAL_RCC_GetHCLKFreq+0x58>)
 800de26:	681b      	ldr	r3, [r3, #0]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3708      	adds	r7, #8
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	58024400 	.word	0x58024400
 800de34:	08018310 	.word	0x08018310
 800de38:	24000004 	.word	0x24000004
 800de3c:	24000000 	.word	0x24000000

0800de40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800de44:	f7ff ffcc 	bl	800dde0 <HAL_RCC_GetHCLKFreq>
 800de48:	4602      	mov	r2, r0
 800de4a:	4b06      	ldr	r3, [pc, #24]	; (800de64 <HAL_RCC_GetPCLK1Freq+0x24>)
 800de4c:	69db      	ldr	r3, [r3, #28]
 800de4e:	091b      	lsrs	r3, r3, #4
 800de50:	f003 0307 	and.w	r3, r3, #7
 800de54:	4904      	ldr	r1, [pc, #16]	; (800de68 <HAL_RCC_GetPCLK1Freq+0x28>)
 800de56:	5ccb      	ldrb	r3, [r1, r3]
 800de58:	f003 031f 	and.w	r3, r3, #31
 800de5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800de60:	4618      	mov	r0, r3
 800de62:	bd80      	pop	{r7, pc}
 800de64:	58024400 	.word	0x58024400
 800de68:	08018310 	.word	0x08018310

0800de6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800de70:	f7ff ffb6 	bl	800dde0 <HAL_RCC_GetHCLKFreq>
 800de74:	4602      	mov	r2, r0
 800de76:	4b06      	ldr	r3, [pc, #24]	; (800de90 <HAL_RCC_GetPCLK2Freq+0x24>)
 800de78:	69db      	ldr	r3, [r3, #28]
 800de7a:	0a1b      	lsrs	r3, r3, #8
 800de7c:	f003 0307 	and.w	r3, r3, #7
 800de80:	4904      	ldr	r1, [pc, #16]	; (800de94 <HAL_RCC_GetPCLK2Freq+0x28>)
 800de82:	5ccb      	ldrb	r3, [r1, r3]
 800de84:	f003 031f 	and.w	r3, r3, #31
 800de88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	58024400 	.word	0x58024400
 800de94:	08018310 	.word	0x08018310

0800de98 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800de9c:	4b07      	ldr	r3, [pc, #28]	; (800debc <HAL_RCC_NMI_IRQHandler+0x24>)
 800de9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dea8:	d105      	bne.n	800deb6 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800deaa:	f000 f809 	bl	800dec0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800deae:	4b03      	ldr	r3, [pc, #12]	; (800debc <HAL_RCC_NMI_IRQHandler+0x24>)
 800deb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800deb4:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800deb6:	bf00      	nop
 800deb8:	bd80      	pop	{r7, pc}
 800deba:	bf00      	nop
 800debc:	58024400 	.word	0x58024400

0800dec0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 800dec0:	b480      	push	{r7}
 800dec2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 800dec4:	bf00      	nop
 800dec6:	46bd      	mov	sp, r7
 800dec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800decc:	4770      	bx	lr
	...

0800ded0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b086      	sub	sp, #24
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ded8:	2300      	movs	r3, #0
 800deda:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800dedc:	2300      	movs	r3, #0
 800dede:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d03f      	beq.n	800df6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800def0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800def4:	d02a      	beq.n	800df4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800def6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800defa:	d824      	bhi.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800defc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800df00:	d018      	beq.n	800df34 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800df02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800df06:	d81e      	bhi.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d003      	beq.n	800df14 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800df0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df10:	d007      	beq.n	800df22 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800df12:	e018      	b.n	800df46 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df14:	4bab      	ldr	r3, [pc, #684]	; (800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800df16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df18:	4aaa      	ldr	r2, [pc, #680]	; (800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800df1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800df1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800df20:	e015      	b.n	800df4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	3304      	adds	r3, #4
 800df26:	2102      	movs	r1, #2
 800df28:	4618      	mov	r0, r3
 800df2a:	f001 feff 	bl	800fd2c <RCCEx_PLL2_Config>
 800df2e:	4603      	mov	r3, r0
 800df30:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800df32:	e00c      	b.n	800df4e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	3324      	adds	r3, #36	; 0x24
 800df38:	2102      	movs	r1, #2
 800df3a:	4618      	mov	r0, r3
 800df3c:	f001 ffa8 	bl	800fe90 <RCCEx_PLL3_Config>
 800df40:	4603      	mov	r3, r0
 800df42:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800df44:	e003      	b.n	800df4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800df46:	2301      	movs	r3, #1
 800df48:	75fb      	strb	r3, [r7, #23]
      break;
 800df4a:	e000      	b.n	800df4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800df4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800df4e:	7dfb      	ldrb	r3, [r7, #23]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d109      	bne.n	800df68 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800df54:	4b9b      	ldr	r3, [pc, #620]	; (800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800df56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df60:	4998      	ldr	r1, [pc, #608]	; (800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800df62:	4313      	orrs	r3, r2
 800df64:	650b      	str	r3, [r1, #80]	; 0x50
 800df66:	e001      	b.n	800df6c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df68:	7dfb      	ldrb	r3, [r7, #23]
 800df6a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df74:	2b00      	cmp	r3, #0
 800df76:	d03d      	beq.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df7c:	2b04      	cmp	r3, #4
 800df7e:	d826      	bhi.n	800dfce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800df80:	a201      	add	r2, pc, #4	; (adr r2, 800df88 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800df82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df86:	bf00      	nop
 800df88:	0800df9d 	.word	0x0800df9d
 800df8c:	0800dfab 	.word	0x0800dfab
 800df90:	0800dfbd 	.word	0x0800dfbd
 800df94:	0800dfd5 	.word	0x0800dfd5
 800df98:	0800dfd5 	.word	0x0800dfd5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df9c:	4b89      	ldr	r3, [pc, #548]	; (800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800df9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfa0:	4a88      	ldr	r2, [pc, #544]	; (800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dfa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dfa6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800dfa8:	e015      	b.n	800dfd6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	3304      	adds	r3, #4
 800dfae:	2100      	movs	r1, #0
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	f001 febb 	bl	800fd2c <RCCEx_PLL2_Config>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800dfba:	e00c      	b.n	800dfd6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	3324      	adds	r3, #36	; 0x24
 800dfc0:	2100      	movs	r1, #0
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f001 ff64 	bl	800fe90 <RCCEx_PLL3_Config>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800dfcc:	e003      	b.n	800dfd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800dfce:	2301      	movs	r3, #1
 800dfd0:	75fb      	strb	r3, [r7, #23]
      break;
 800dfd2:	e000      	b.n	800dfd6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800dfd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dfd6:	7dfb      	ldrb	r3, [r7, #23]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d109      	bne.n	800dff0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dfdc:	4b79      	ldr	r3, [pc, #484]	; (800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dfde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfe0:	f023 0207 	bic.w	r2, r3, #7
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfe8:	4976      	ldr	r1, [pc, #472]	; (800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dfea:	4313      	orrs	r3, r2
 800dfec:	650b      	str	r3, [r1, #80]	; 0x50
 800dfee:	e001      	b.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dff0:	7dfb      	ldrb	r3, [r7, #23]
 800dff2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d051      	beq.n	800e0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e006:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800e00a:	d036      	beq.n	800e07a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800e00c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800e010:	d830      	bhi.n	800e074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e012:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e016:	d032      	beq.n	800e07e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800e018:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e01c:	d82a      	bhi.n	800e074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e01e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e022:	d02e      	beq.n	800e082 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800e024:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800e028:	d824      	bhi.n	800e074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e02a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e02e:	d018      	beq.n	800e062 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800e030:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e034:	d81e      	bhi.n	800e074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800e036:	2b00      	cmp	r3, #0
 800e038:	d003      	beq.n	800e042 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800e03a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e03e:	d007      	beq.n	800e050 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800e040:	e018      	b.n	800e074 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e042:	4b60      	ldr	r3, [pc, #384]	; (800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e046:	4a5f      	ldr	r2, [pc, #380]	; (800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e04c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e04e:	e019      	b.n	800e084 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	3304      	adds	r3, #4
 800e054:	2100      	movs	r1, #0
 800e056:	4618      	mov	r0, r3
 800e058:	f001 fe68 	bl	800fd2c <RCCEx_PLL2_Config>
 800e05c:	4603      	mov	r3, r0
 800e05e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800e060:	e010      	b.n	800e084 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	3324      	adds	r3, #36	; 0x24
 800e066:	2100      	movs	r1, #0
 800e068:	4618      	mov	r0, r3
 800e06a:	f001 ff11 	bl	800fe90 <RCCEx_PLL3_Config>
 800e06e:	4603      	mov	r3, r0
 800e070:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e072:	e007      	b.n	800e084 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800e074:	2301      	movs	r3, #1
 800e076:	75fb      	strb	r3, [r7, #23]
      break;
 800e078:	e004      	b.n	800e084 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800e07a:	bf00      	nop
 800e07c:	e002      	b.n	800e084 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800e07e:	bf00      	nop
 800e080:	e000      	b.n	800e084 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800e082:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e084:	7dfb      	ldrb	r3, [r7, #23]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d10a      	bne.n	800e0a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800e08a:	4b4e      	ldr	r3, [pc, #312]	; (800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e08c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e08e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800e098:	494a      	ldr	r1, [pc, #296]	; (800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e09a:	4313      	orrs	r3, r2
 800e09c:	658b      	str	r3, [r1, #88]	; 0x58
 800e09e:	e001      	b.n	800e0a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0a0:	7dfb      	ldrb	r3, [r7, #23]
 800e0a2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d051      	beq.n	800e154 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e0b6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800e0ba:	d036      	beq.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800e0bc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800e0c0:	d830      	bhi.n	800e124 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e0c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e0c6:	d032      	beq.n	800e12e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800e0c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e0cc:	d82a      	bhi.n	800e124 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e0ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e0d2:	d02e      	beq.n	800e132 <HAL_RCCEx_PeriphCLKConfig+0x262>
 800e0d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800e0d8:	d824      	bhi.n	800e124 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e0da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e0de:	d018      	beq.n	800e112 <HAL_RCCEx_PeriphCLKConfig+0x242>
 800e0e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e0e4:	d81e      	bhi.n	800e124 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d003      	beq.n	800e0f2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800e0ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e0ee:	d007      	beq.n	800e100 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800e0f0:	e018      	b.n	800e124 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e0f2:	4b34      	ldr	r3, [pc, #208]	; (800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0f6:	4a33      	ldr	r2, [pc, #204]	; (800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e0f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e0fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e0fe:	e019      	b.n	800e134 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	3304      	adds	r3, #4
 800e104:	2100      	movs	r1, #0
 800e106:	4618      	mov	r0, r3
 800e108:	f001 fe10 	bl	800fd2c <RCCEx_PLL2_Config>
 800e10c:	4603      	mov	r3, r0
 800e10e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800e110:	e010      	b.n	800e134 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	3324      	adds	r3, #36	; 0x24
 800e116:	2100      	movs	r1, #0
 800e118:	4618      	mov	r0, r3
 800e11a:	f001 feb9 	bl	800fe90 <RCCEx_PLL3_Config>
 800e11e:	4603      	mov	r3, r0
 800e120:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800e122:	e007      	b.n	800e134 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800e124:	2301      	movs	r3, #1
 800e126:	75fb      	strb	r3, [r7, #23]
      break;
 800e128:	e004      	b.n	800e134 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800e12a:	bf00      	nop
 800e12c:	e002      	b.n	800e134 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800e12e:	bf00      	nop
 800e130:	e000      	b.n	800e134 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800e132:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e134:	7dfb      	ldrb	r3, [r7, #23]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d10a      	bne.n	800e150 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800e13a:	4b22      	ldr	r3, [pc, #136]	; (800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e13c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e13e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e148:	491e      	ldr	r1, [pc, #120]	; (800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e14a:	4313      	orrs	r3, r2
 800e14c:	658b      	str	r3, [r1, #88]	; 0x58
 800e14e:	e001      	b.n	800e154 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e150:	7dfb      	ldrb	r3, [r7, #23]
 800e152:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d035      	beq.n	800e1cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e164:	2b30      	cmp	r3, #48	; 0x30
 800e166:	d01c      	beq.n	800e1a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800e168:	2b30      	cmp	r3, #48	; 0x30
 800e16a:	d817      	bhi.n	800e19c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800e16c:	2b20      	cmp	r3, #32
 800e16e:	d00c      	beq.n	800e18a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800e170:	2b20      	cmp	r3, #32
 800e172:	d813      	bhi.n	800e19c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800e174:	2b00      	cmp	r3, #0
 800e176:	d016      	beq.n	800e1a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800e178:	2b10      	cmp	r3, #16
 800e17a:	d10f      	bne.n	800e19c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e17c:	4b11      	ldr	r3, [pc, #68]	; (800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e180:	4a10      	ldr	r2, [pc, #64]	; (800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e186:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800e188:	e00e      	b.n	800e1a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	3304      	adds	r3, #4
 800e18e:	2102      	movs	r1, #2
 800e190:	4618      	mov	r0, r3
 800e192:	f001 fdcb 	bl	800fd2c <RCCEx_PLL2_Config>
 800e196:	4603      	mov	r3, r0
 800e198:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800e19a:	e005      	b.n	800e1a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800e19c:	2301      	movs	r3, #1
 800e19e:	75fb      	strb	r3, [r7, #23]
      break;
 800e1a0:	e002      	b.n	800e1a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800e1a2:	bf00      	nop
 800e1a4:	e000      	b.n	800e1a8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800e1a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e1a8:	7dfb      	ldrb	r3, [r7, #23]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d10c      	bne.n	800e1c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800e1ae:	4b05      	ldr	r3, [pc, #20]	; (800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e1b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1ba:	4902      	ldr	r1, [pc, #8]	; (800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800e1bc:	4313      	orrs	r3, r2
 800e1be:	64cb      	str	r3, [r1, #76]	; 0x4c
 800e1c0:	e004      	b.n	800e1cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800e1c2:	bf00      	nop
 800e1c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1c8:	7dfb      	ldrb	r3, [r7, #23]
 800e1ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d047      	beq.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e1dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e1e0:	d030      	beq.n	800e244 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800e1e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e1e6:	d82a      	bhi.n	800e23e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800e1e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e1ec:	d02c      	beq.n	800e248 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800e1ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e1f2:	d824      	bhi.n	800e23e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800e1f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e1f8:	d018      	beq.n	800e22c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800e1fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e1fe:	d81e      	bhi.n	800e23e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800e200:	2b00      	cmp	r3, #0
 800e202:	d003      	beq.n	800e20c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800e204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e208:	d007      	beq.n	800e21a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800e20a:	e018      	b.n	800e23e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e20c:	4bac      	ldr	r3, [pc, #688]	; (800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e210:	4aab      	ldr	r2, [pc, #684]	; (800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e216:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800e218:	e017      	b.n	800e24a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	3304      	adds	r3, #4
 800e21e:	2100      	movs	r1, #0
 800e220:	4618      	mov	r0, r3
 800e222:	f001 fd83 	bl	800fd2c <RCCEx_PLL2_Config>
 800e226:	4603      	mov	r3, r0
 800e228:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800e22a:	e00e      	b.n	800e24a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	3324      	adds	r3, #36	; 0x24
 800e230:	2100      	movs	r1, #0
 800e232:	4618      	mov	r0, r3
 800e234:	f001 fe2c 	bl	800fe90 <RCCEx_PLL3_Config>
 800e238:	4603      	mov	r3, r0
 800e23a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800e23c:	e005      	b.n	800e24a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e23e:	2301      	movs	r3, #1
 800e240:	75fb      	strb	r3, [r7, #23]
      break;
 800e242:	e002      	b.n	800e24a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800e244:	bf00      	nop
 800e246:	e000      	b.n	800e24a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800e248:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e24a:	7dfb      	ldrb	r3, [r7, #23]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d109      	bne.n	800e264 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e250:	4b9b      	ldr	r3, [pc, #620]	; (800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e254:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e25c:	4998      	ldr	r1, [pc, #608]	; (800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e25e:	4313      	orrs	r3, r2
 800e260:	650b      	str	r3, [r1, #80]	; 0x50
 800e262:	e001      	b.n	800e268 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e264:	7dfb      	ldrb	r3, [r7, #23]
 800e266:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e270:	2b00      	cmp	r3, #0
 800e272:	d049      	beq.n	800e308 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e27c:	d02e      	beq.n	800e2dc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800e27e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e282:	d828      	bhi.n	800e2d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e284:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e288:	d02a      	beq.n	800e2e0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800e28a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e28e:	d822      	bhi.n	800e2d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e290:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e294:	d026      	beq.n	800e2e4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800e296:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e29a:	d81c      	bhi.n	800e2d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e29c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e2a0:	d010      	beq.n	800e2c4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800e2a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e2a6:	d816      	bhi.n	800e2d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d01d      	beq.n	800e2e8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800e2ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2b0:	d111      	bne.n	800e2d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	3304      	adds	r3, #4
 800e2b6:	2101      	movs	r1, #1
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f001 fd37 	bl	800fd2c <RCCEx_PLL2_Config>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800e2c2:	e012      	b.n	800e2ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	3324      	adds	r3, #36	; 0x24
 800e2c8:	2101      	movs	r1, #1
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f001 fde0 	bl	800fe90 <RCCEx_PLL3_Config>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800e2d4:	e009      	b.n	800e2ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	75fb      	strb	r3, [r7, #23]
      break;
 800e2da:	e006      	b.n	800e2ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e2dc:	bf00      	nop
 800e2de:	e004      	b.n	800e2ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e2e0:	bf00      	nop
 800e2e2:	e002      	b.n	800e2ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e2e4:	bf00      	nop
 800e2e6:	e000      	b.n	800e2ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e2e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e2ea:	7dfb      	ldrb	r3, [r7, #23]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d109      	bne.n	800e304 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e2f0:	4b73      	ldr	r3, [pc, #460]	; (800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e2f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2f4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2fc:	4970      	ldr	r1, [pc, #448]	; (800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e2fe:	4313      	orrs	r3, r2
 800e300:	650b      	str	r3, [r1, #80]	; 0x50
 800e302:	e001      	b.n	800e308 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e304:	7dfb      	ldrb	r3, [r7, #23]
 800e306:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e310:	2b00      	cmp	r3, #0
 800e312:	d04b      	beq.n	800e3ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e31a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e31e:	d02e      	beq.n	800e37e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800e320:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e324:	d828      	bhi.n	800e378 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e32a:	d02a      	beq.n	800e382 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800e32c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e330:	d822      	bhi.n	800e378 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e332:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e336:	d026      	beq.n	800e386 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800e338:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e33c:	d81c      	bhi.n	800e378 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e33e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e342:	d010      	beq.n	800e366 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800e344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e348:	d816      	bhi.n	800e378 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d01d      	beq.n	800e38a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800e34e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e352:	d111      	bne.n	800e378 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	3304      	adds	r3, #4
 800e358:	2101      	movs	r1, #1
 800e35a:	4618      	mov	r0, r3
 800e35c:	f001 fce6 	bl	800fd2c <RCCEx_PLL2_Config>
 800e360:	4603      	mov	r3, r0
 800e362:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800e364:	e012      	b.n	800e38c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	3324      	adds	r3, #36	; 0x24
 800e36a:	2101      	movs	r1, #1
 800e36c:	4618      	mov	r0, r3
 800e36e:	f001 fd8f 	bl	800fe90 <RCCEx_PLL3_Config>
 800e372:	4603      	mov	r3, r0
 800e374:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800e376:	e009      	b.n	800e38c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800e378:	2301      	movs	r3, #1
 800e37a:	75fb      	strb	r3, [r7, #23]
      break;
 800e37c:	e006      	b.n	800e38c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e37e:	bf00      	nop
 800e380:	e004      	b.n	800e38c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e382:	bf00      	nop
 800e384:	e002      	b.n	800e38c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e386:	bf00      	nop
 800e388:	e000      	b.n	800e38c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e38a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e38c:	7dfb      	ldrb	r3, [r7, #23]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d10a      	bne.n	800e3a8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e392:	4b4b      	ldr	r3, [pc, #300]	; (800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e396:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e3a0:	4947      	ldr	r1, [pc, #284]	; (800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e3a2:	4313      	orrs	r3, r2
 800e3a4:	658b      	str	r3, [r1, #88]	; 0x58
 800e3a6:	e001      	b.n	800e3ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3a8:	7dfb      	ldrb	r3, [r7, #23]
 800e3aa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d02f      	beq.n	800e418 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e3c0:	d00e      	beq.n	800e3e0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800e3c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e3c6:	d814      	bhi.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d015      	beq.n	800e3f8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800e3cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e3d0:	d10f      	bne.n	800e3f2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e3d2:	4b3b      	ldr	r3, [pc, #236]	; (800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3d6:	4a3a      	ldr	r2, [pc, #232]	; (800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e3d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e3dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800e3de:	e00c      	b.n	800e3fa <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	3304      	adds	r3, #4
 800e3e4:	2101      	movs	r1, #1
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f001 fca0 	bl	800fd2c <RCCEx_PLL2_Config>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800e3f0:	e003      	b.n	800e3fa <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	75fb      	strb	r3, [r7, #23]
      break;
 800e3f6:	e000      	b.n	800e3fa <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800e3f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e3fa:	7dfb      	ldrb	r3, [r7, #23]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d109      	bne.n	800e414 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e400:	4b2f      	ldr	r3, [pc, #188]	; (800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e404:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e40c:	492c      	ldr	r1, [pc, #176]	; (800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e40e:	4313      	orrs	r3, r2
 800e410:	650b      	str	r3, [r1, #80]	; 0x50
 800e412:	e001      	b.n	800e418 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e414:	7dfb      	ldrb	r3, [r7, #23]
 800e416:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e420:	2b00      	cmp	r3, #0
 800e422:	d032      	beq.n	800e48a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e428:	2b03      	cmp	r3, #3
 800e42a:	d81b      	bhi.n	800e464 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800e42c:	a201      	add	r2, pc, #4	; (adr r2, 800e434 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800e42e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e432:	bf00      	nop
 800e434:	0800e46b 	.word	0x0800e46b
 800e438:	0800e445 	.word	0x0800e445
 800e43c:	0800e453 	.word	0x0800e453
 800e440:	0800e46b 	.word	0x0800e46b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e444:	4b1e      	ldr	r3, [pc, #120]	; (800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e448:	4a1d      	ldr	r2, [pc, #116]	; (800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e44a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e44e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800e450:	e00c      	b.n	800e46c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	3304      	adds	r3, #4
 800e456:	2102      	movs	r1, #2
 800e458:	4618      	mov	r0, r3
 800e45a:	f001 fc67 	bl	800fd2c <RCCEx_PLL2_Config>
 800e45e:	4603      	mov	r3, r0
 800e460:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800e462:	e003      	b.n	800e46c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800e464:	2301      	movs	r3, #1
 800e466:	75fb      	strb	r3, [r7, #23]
      break;
 800e468:	e000      	b.n	800e46c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800e46a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e46c:	7dfb      	ldrb	r3, [r7, #23]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d109      	bne.n	800e486 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e472:	4b13      	ldr	r3, [pc, #76]	; (800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e476:	f023 0203 	bic.w	r2, r3, #3
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e47e:	4910      	ldr	r1, [pc, #64]	; (800e4c0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e480:	4313      	orrs	r3, r2
 800e482:	64cb      	str	r3, [r1, #76]	; 0x4c
 800e484:	e001      	b.n	800e48a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e486:	7dfb      	ldrb	r3, [r7, #23]
 800e488:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e492:	2b00      	cmp	r3, #0
 800e494:	f000 808a 	beq.w	800e5ac <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e498:	4b0a      	ldr	r3, [pc, #40]	; (800e4c4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	4a09      	ldr	r2, [pc, #36]	; (800e4c4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800e49e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e4a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e4a4:	f7fb ffca 	bl	800a43c <HAL_GetTick>
 800e4a8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e4aa:	e00d      	b.n	800e4c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e4ac:	f7fb ffc6 	bl	800a43c <HAL_GetTick>
 800e4b0:	4602      	mov	r2, r0
 800e4b2:	693b      	ldr	r3, [r7, #16]
 800e4b4:	1ad3      	subs	r3, r2, r3
 800e4b6:	2b64      	cmp	r3, #100	; 0x64
 800e4b8:	d906      	bls.n	800e4c8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800e4ba:	2303      	movs	r3, #3
 800e4bc:	75fb      	strb	r3, [r7, #23]
        break;
 800e4be:	e009      	b.n	800e4d4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800e4c0:	58024400 	.word	0x58024400
 800e4c4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e4c8:	4bb9      	ldr	r3, [pc, #740]	; (800e7b0 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d0eb      	beq.n	800e4ac <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800e4d4:	7dfb      	ldrb	r3, [r7, #23]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d166      	bne.n	800e5a8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e4da:	4bb6      	ldr	r3, [pc, #728]	; (800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e4dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e4e4:	4053      	eors	r3, r2
 800e4e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d013      	beq.n	800e516 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e4ee:	4bb1      	ldr	r3, [pc, #708]	; (800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e4f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e4f6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e4f8:	4bae      	ldr	r3, [pc, #696]	; (800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e4fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4fc:	4aad      	ldr	r2, [pc, #692]	; (800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e4fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e502:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e504:	4bab      	ldr	r3, [pc, #684]	; (800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e508:	4aaa      	ldr	r2, [pc, #680]	; (800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e50a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e50e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e510:	4aa8      	ldr	r2, [pc, #672]	; (800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e51c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e520:	d115      	bne.n	800e54e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e522:	f7fb ff8b 	bl	800a43c <HAL_GetTick>
 800e526:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e528:	e00b      	b.n	800e542 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e52a:	f7fb ff87 	bl	800a43c <HAL_GetTick>
 800e52e:	4602      	mov	r2, r0
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	1ad3      	subs	r3, r2, r3
 800e534:	f241 3288 	movw	r2, #5000	; 0x1388
 800e538:	4293      	cmp	r3, r2
 800e53a:	d902      	bls.n	800e542 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800e53c:	2303      	movs	r3, #3
 800e53e:	75fb      	strb	r3, [r7, #23]
            break;
 800e540:	e005      	b.n	800e54e <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e542:	4b9c      	ldr	r3, [pc, #624]	; (800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e546:	f003 0302 	and.w	r3, r3, #2
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d0ed      	beq.n	800e52a <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800e54e:	7dfb      	ldrb	r3, [r7, #23]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d126      	bne.n	800e5a2 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e55a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e55e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e562:	d10d      	bne.n	800e580 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800e564:	4b93      	ldr	r3, [pc, #588]	; (800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e566:	691b      	ldr	r3, [r3, #16]
 800e568:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e572:	0919      	lsrs	r1, r3, #4
 800e574:	4b90      	ldr	r3, [pc, #576]	; (800e7b8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800e576:	400b      	ands	r3, r1
 800e578:	498e      	ldr	r1, [pc, #568]	; (800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e57a:	4313      	orrs	r3, r2
 800e57c:	610b      	str	r3, [r1, #16]
 800e57e:	e005      	b.n	800e58c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800e580:	4b8c      	ldr	r3, [pc, #560]	; (800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e582:	691b      	ldr	r3, [r3, #16]
 800e584:	4a8b      	ldr	r2, [pc, #556]	; (800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e586:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e58a:	6113      	str	r3, [r2, #16]
 800e58c:	4b89      	ldr	r3, [pc, #548]	; (800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e58e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e59a:	4986      	ldr	r1, [pc, #536]	; (800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e59c:	4313      	orrs	r3, r2
 800e59e:	670b      	str	r3, [r1, #112]	; 0x70
 800e5a0:	e004      	b.n	800e5ac <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e5a2:	7dfb      	ldrb	r3, [r7, #23]
 800e5a4:	75bb      	strb	r3, [r7, #22]
 800e5a6:	e001      	b.n	800e5ac <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e5a8:	7dfb      	ldrb	r3, [r7, #23]
 800e5aa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	f003 0301 	and.w	r3, r3, #1
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d07e      	beq.n	800e6b6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5bc:	2b28      	cmp	r3, #40	; 0x28
 800e5be:	d867      	bhi.n	800e690 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800e5c0:	a201      	add	r2, pc, #4	; (adr r2, 800e5c8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800e5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c6:	bf00      	nop
 800e5c8:	0800e697 	.word	0x0800e697
 800e5cc:	0800e691 	.word	0x0800e691
 800e5d0:	0800e691 	.word	0x0800e691
 800e5d4:	0800e691 	.word	0x0800e691
 800e5d8:	0800e691 	.word	0x0800e691
 800e5dc:	0800e691 	.word	0x0800e691
 800e5e0:	0800e691 	.word	0x0800e691
 800e5e4:	0800e691 	.word	0x0800e691
 800e5e8:	0800e66d 	.word	0x0800e66d
 800e5ec:	0800e691 	.word	0x0800e691
 800e5f0:	0800e691 	.word	0x0800e691
 800e5f4:	0800e691 	.word	0x0800e691
 800e5f8:	0800e691 	.word	0x0800e691
 800e5fc:	0800e691 	.word	0x0800e691
 800e600:	0800e691 	.word	0x0800e691
 800e604:	0800e691 	.word	0x0800e691
 800e608:	0800e67f 	.word	0x0800e67f
 800e60c:	0800e691 	.word	0x0800e691
 800e610:	0800e691 	.word	0x0800e691
 800e614:	0800e691 	.word	0x0800e691
 800e618:	0800e691 	.word	0x0800e691
 800e61c:	0800e691 	.word	0x0800e691
 800e620:	0800e691 	.word	0x0800e691
 800e624:	0800e691 	.word	0x0800e691
 800e628:	0800e697 	.word	0x0800e697
 800e62c:	0800e691 	.word	0x0800e691
 800e630:	0800e691 	.word	0x0800e691
 800e634:	0800e691 	.word	0x0800e691
 800e638:	0800e691 	.word	0x0800e691
 800e63c:	0800e691 	.word	0x0800e691
 800e640:	0800e691 	.word	0x0800e691
 800e644:	0800e691 	.word	0x0800e691
 800e648:	0800e697 	.word	0x0800e697
 800e64c:	0800e691 	.word	0x0800e691
 800e650:	0800e691 	.word	0x0800e691
 800e654:	0800e691 	.word	0x0800e691
 800e658:	0800e691 	.word	0x0800e691
 800e65c:	0800e691 	.word	0x0800e691
 800e660:	0800e691 	.word	0x0800e691
 800e664:	0800e691 	.word	0x0800e691
 800e668:	0800e697 	.word	0x0800e697
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	3304      	adds	r3, #4
 800e670:	2101      	movs	r1, #1
 800e672:	4618      	mov	r0, r3
 800e674:	f001 fb5a 	bl	800fd2c <RCCEx_PLL2_Config>
 800e678:	4603      	mov	r3, r0
 800e67a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800e67c:	e00c      	b.n	800e698 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	3324      	adds	r3, #36	; 0x24
 800e682:	2101      	movs	r1, #1
 800e684:	4618      	mov	r0, r3
 800e686:	f001 fc03 	bl	800fe90 <RCCEx_PLL3_Config>
 800e68a:	4603      	mov	r3, r0
 800e68c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800e68e:	e003      	b.n	800e698 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e690:	2301      	movs	r3, #1
 800e692:	75fb      	strb	r3, [r7, #23]
      break;
 800e694:	e000      	b.n	800e698 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800e696:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e698:	7dfb      	ldrb	r3, [r7, #23]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d109      	bne.n	800e6b2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e69e:	4b45      	ldr	r3, [pc, #276]	; (800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e6a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6a2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6aa:	4942      	ldr	r1, [pc, #264]	; (800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e6ac:	4313      	orrs	r3, r2
 800e6ae:	654b      	str	r3, [r1, #84]	; 0x54
 800e6b0:	e001      	b.n	800e6b6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6b2:	7dfb      	ldrb	r3, [r7, #23]
 800e6b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f003 0302 	and.w	r3, r3, #2
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d037      	beq.n	800e732 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6c6:	2b05      	cmp	r3, #5
 800e6c8:	d820      	bhi.n	800e70c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800e6ca:	a201      	add	r2, pc, #4	; (adr r2, 800e6d0 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800e6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6d0:	0800e713 	.word	0x0800e713
 800e6d4:	0800e6e9 	.word	0x0800e6e9
 800e6d8:	0800e6fb 	.word	0x0800e6fb
 800e6dc:	0800e713 	.word	0x0800e713
 800e6e0:	0800e713 	.word	0x0800e713
 800e6e4:	0800e713 	.word	0x0800e713
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	3304      	adds	r3, #4
 800e6ec:	2101      	movs	r1, #1
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f001 fb1c 	bl	800fd2c <RCCEx_PLL2_Config>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800e6f8:	e00c      	b.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	3324      	adds	r3, #36	; 0x24
 800e6fe:	2101      	movs	r1, #1
 800e700:	4618      	mov	r0, r3
 800e702:	f001 fbc5 	bl	800fe90 <RCCEx_PLL3_Config>
 800e706:	4603      	mov	r3, r0
 800e708:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800e70a:	e003      	b.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e70c:	2301      	movs	r3, #1
 800e70e:	75fb      	strb	r3, [r7, #23]
      break;
 800e710:	e000      	b.n	800e714 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800e712:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e714:	7dfb      	ldrb	r3, [r7, #23]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d109      	bne.n	800e72e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e71a:	4b26      	ldr	r3, [pc, #152]	; (800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e71c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e71e:	f023 0207 	bic.w	r2, r3, #7
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e726:	4923      	ldr	r1, [pc, #140]	; (800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e728:	4313      	orrs	r3, r2
 800e72a:	654b      	str	r3, [r1, #84]	; 0x54
 800e72c:	e001      	b.n	800e732 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e72e:	7dfb      	ldrb	r3, [r7, #23]
 800e730:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f003 0304 	and.w	r3, r3, #4
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d040      	beq.n	800e7c0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e744:	2b05      	cmp	r3, #5
 800e746:	d821      	bhi.n	800e78c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800e748:	a201      	add	r2, pc, #4	; (adr r2, 800e750 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800e74a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e74e:	bf00      	nop
 800e750:	0800e793 	.word	0x0800e793
 800e754:	0800e769 	.word	0x0800e769
 800e758:	0800e77b 	.word	0x0800e77b
 800e75c:	0800e793 	.word	0x0800e793
 800e760:	0800e793 	.word	0x0800e793
 800e764:	0800e793 	.word	0x0800e793
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	3304      	adds	r3, #4
 800e76c:	2101      	movs	r1, #1
 800e76e:	4618      	mov	r0, r3
 800e770:	f001 fadc 	bl	800fd2c <RCCEx_PLL2_Config>
 800e774:	4603      	mov	r3, r0
 800e776:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800e778:	e00c      	b.n	800e794 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	3324      	adds	r3, #36	; 0x24
 800e77e:	2101      	movs	r1, #1
 800e780:	4618      	mov	r0, r3
 800e782:	f001 fb85 	bl	800fe90 <RCCEx_PLL3_Config>
 800e786:	4603      	mov	r3, r0
 800e788:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800e78a:	e003      	b.n	800e794 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e78c:	2301      	movs	r3, #1
 800e78e:	75fb      	strb	r3, [r7, #23]
      break;
 800e790:	e000      	b.n	800e794 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800e792:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e794:	7dfb      	ldrb	r3, [r7, #23]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d110      	bne.n	800e7bc <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e79a:	4b06      	ldr	r3, [pc, #24]	; (800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e79c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e79e:	f023 0207 	bic.w	r2, r3, #7
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7a8:	4902      	ldr	r1, [pc, #8]	; (800e7b4 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e7aa:	4313      	orrs	r3, r2
 800e7ac:	658b      	str	r3, [r1, #88]	; 0x58
 800e7ae:	e007      	b.n	800e7c0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800e7b0:	58024800 	.word	0x58024800
 800e7b4:	58024400 	.word	0x58024400
 800e7b8:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e7bc:	7dfb      	ldrb	r3, [r7, #23]
 800e7be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	f003 0320 	and.w	r3, r3, #32
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d04b      	beq.n	800e864 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e7d6:	d02e      	beq.n	800e836 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800e7d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e7dc:	d828      	bhi.n	800e830 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800e7de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7e2:	d02a      	beq.n	800e83a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800e7e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e7e8:	d822      	bhi.n	800e830 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800e7ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e7ee:	d026      	beq.n	800e83e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800e7f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e7f4:	d81c      	bhi.n	800e830 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800e7f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e7fa:	d010      	beq.n	800e81e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800e7fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e800:	d816      	bhi.n	800e830 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800e802:	2b00      	cmp	r3, #0
 800e804:	d01d      	beq.n	800e842 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800e806:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e80a:	d111      	bne.n	800e830 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	3304      	adds	r3, #4
 800e810:	2100      	movs	r1, #0
 800e812:	4618      	mov	r0, r3
 800e814:	f001 fa8a 	bl	800fd2c <RCCEx_PLL2_Config>
 800e818:	4603      	mov	r3, r0
 800e81a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800e81c:	e012      	b.n	800e844 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	3324      	adds	r3, #36	; 0x24
 800e822:	2102      	movs	r1, #2
 800e824:	4618      	mov	r0, r3
 800e826:	f001 fb33 	bl	800fe90 <RCCEx_PLL3_Config>
 800e82a:	4603      	mov	r3, r0
 800e82c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800e82e:	e009      	b.n	800e844 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e830:	2301      	movs	r3, #1
 800e832:	75fb      	strb	r3, [r7, #23]
      break;
 800e834:	e006      	b.n	800e844 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800e836:	bf00      	nop
 800e838:	e004      	b.n	800e844 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800e83a:	bf00      	nop
 800e83c:	e002      	b.n	800e844 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800e83e:	bf00      	nop
 800e840:	e000      	b.n	800e844 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800e842:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e844:	7dfb      	ldrb	r3, [r7, #23]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d10a      	bne.n	800e860 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e84a:	4bb2      	ldr	r3, [pc, #712]	; (800eb14 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e84c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e84e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e858:	49ae      	ldr	r1, [pc, #696]	; (800eb14 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e85a:	4313      	orrs	r3, r2
 800e85c:	654b      	str	r3, [r1, #84]	; 0x54
 800e85e:	e001      	b.n	800e864 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e860:	7dfb      	ldrb	r3, [r7, #23]
 800e862:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d04b      	beq.n	800e908 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e876:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e87a:	d02e      	beq.n	800e8da <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800e87c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e880:	d828      	bhi.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800e882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e886:	d02a      	beq.n	800e8de <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800e888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e88c:	d822      	bhi.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800e88e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e892:	d026      	beq.n	800e8e2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800e894:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e898:	d81c      	bhi.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800e89a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e89e:	d010      	beq.n	800e8c2 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800e8a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e8a4:	d816      	bhi.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d01d      	beq.n	800e8e6 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800e8aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8ae:	d111      	bne.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	3304      	adds	r3, #4
 800e8b4:	2100      	movs	r1, #0
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f001 fa38 	bl	800fd2c <RCCEx_PLL2_Config>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800e8c0:	e012      	b.n	800e8e8 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	3324      	adds	r3, #36	; 0x24
 800e8c6:	2102      	movs	r1, #2
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	f001 fae1 	bl	800fe90 <RCCEx_PLL3_Config>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800e8d2:	e009      	b.n	800e8e8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	75fb      	strb	r3, [r7, #23]
      break;
 800e8d8:	e006      	b.n	800e8e8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800e8da:	bf00      	nop
 800e8dc:	e004      	b.n	800e8e8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800e8de:	bf00      	nop
 800e8e0:	e002      	b.n	800e8e8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800e8e2:	bf00      	nop
 800e8e4:	e000      	b.n	800e8e8 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800e8e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e8e8:	7dfb      	ldrb	r3, [r7, #23]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d10a      	bne.n	800e904 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e8ee:	4b89      	ldr	r3, [pc, #548]	; (800eb14 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e8f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e8f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e8fc:	4985      	ldr	r1, [pc, #532]	; (800eb14 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e8fe:	4313      	orrs	r3, r2
 800e900:	658b      	str	r3, [r1, #88]	; 0x58
 800e902:	e001      	b.n	800e908 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e904:	7dfb      	ldrb	r3, [r7, #23]
 800e906:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e910:	2b00      	cmp	r3, #0
 800e912:	d04b      	beq.n	800e9ac <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e91a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e91e:	d02e      	beq.n	800e97e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800e920:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e924:	d828      	bhi.n	800e978 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800e926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e92a:	d02a      	beq.n	800e982 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800e92c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e930:	d822      	bhi.n	800e978 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800e932:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e936:	d026      	beq.n	800e986 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800e938:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e93c:	d81c      	bhi.n	800e978 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800e93e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e942:	d010      	beq.n	800e966 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800e944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e948:	d816      	bhi.n	800e978 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d01d      	beq.n	800e98a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800e94e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e952:	d111      	bne.n	800e978 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	3304      	adds	r3, #4
 800e958:	2100      	movs	r1, #0
 800e95a:	4618      	mov	r0, r3
 800e95c:	f001 f9e6 	bl	800fd2c <RCCEx_PLL2_Config>
 800e960:	4603      	mov	r3, r0
 800e962:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800e964:	e012      	b.n	800e98c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	3324      	adds	r3, #36	; 0x24
 800e96a:	2102      	movs	r1, #2
 800e96c:	4618      	mov	r0, r3
 800e96e:	f001 fa8f 	bl	800fe90 <RCCEx_PLL3_Config>
 800e972:	4603      	mov	r3, r0
 800e974:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800e976:	e009      	b.n	800e98c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e978:	2301      	movs	r3, #1
 800e97a:	75fb      	strb	r3, [r7, #23]
      break;
 800e97c:	e006      	b.n	800e98c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800e97e:	bf00      	nop
 800e980:	e004      	b.n	800e98c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800e982:	bf00      	nop
 800e984:	e002      	b.n	800e98c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800e986:	bf00      	nop
 800e988:	e000      	b.n	800e98c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800e98a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e98c:	7dfb      	ldrb	r3, [r7, #23]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d10a      	bne.n	800e9a8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e992:	4b60      	ldr	r3, [pc, #384]	; (800eb14 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e996:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e9a0:	495c      	ldr	r1, [pc, #368]	; (800eb14 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e9a2:	4313      	orrs	r3, r2
 800e9a4:	658b      	str	r3, [r1, #88]	; 0x58
 800e9a6:	e001      	b.n	800e9ac <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9a8:	7dfb      	ldrb	r3, [r7, #23]
 800e9aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	f003 0308 	and.w	r3, r3, #8
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d018      	beq.n	800e9ea <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e9c0:	d10a      	bne.n	800e9d8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	3324      	adds	r3, #36	; 0x24
 800e9c6:	2102      	movs	r1, #2
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f001 fa61 	bl	800fe90 <RCCEx_PLL3_Config>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d001      	beq.n	800e9d8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800e9d8:	4b4e      	ldr	r3, [pc, #312]	; (800eb14 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e9da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9e4:	494b      	ldr	r1, [pc, #300]	; (800eb14 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e9e6:	4313      	orrs	r3, r2
 800e9e8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	f003 0310 	and.w	r3, r3, #16
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d01a      	beq.n	800ea2c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea00:	d10a      	bne.n	800ea18 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	3324      	adds	r3, #36	; 0x24
 800ea06:	2102      	movs	r1, #2
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f001 fa41 	bl	800fe90 <RCCEx_PLL3_Config>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d001      	beq.n	800ea18 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800ea14:	2301      	movs	r3, #1
 800ea16:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ea18:	4b3e      	ldr	r3, [pc, #248]	; (800eb14 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ea1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea26:	493b      	ldr	r1, [pc, #236]	; (800eb14 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ea28:	4313      	orrs	r3, r2
 800ea2a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d034      	beq.n	800eaa2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ea3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ea42:	d01d      	beq.n	800ea80 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800ea44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ea48:	d817      	bhi.n	800ea7a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d003      	beq.n	800ea56 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800ea4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea52:	d009      	beq.n	800ea68 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ea54:	e011      	b.n	800ea7a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	3304      	adds	r3, #4
 800ea5a:	2100      	movs	r1, #0
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f001 f965 	bl	800fd2c <RCCEx_PLL2_Config>
 800ea62:	4603      	mov	r3, r0
 800ea64:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ea66:	e00c      	b.n	800ea82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	3324      	adds	r3, #36	; 0x24
 800ea6c:	2102      	movs	r1, #2
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f001 fa0e 	bl	800fe90 <RCCEx_PLL3_Config>
 800ea74:	4603      	mov	r3, r0
 800ea76:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ea78:	e003      	b.n	800ea82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	75fb      	strb	r3, [r7, #23]
      break;
 800ea7e:	e000      	b.n	800ea82 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800ea80:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ea82:	7dfb      	ldrb	r3, [r7, #23]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d10a      	bne.n	800ea9e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ea88:	4b22      	ldr	r3, [pc, #136]	; (800eb14 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ea8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ea96:	491f      	ldr	r1, [pc, #124]	; (800eb14 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ea98:	4313      	orrs	r3, r2
 800ea9a:	658b      	str	r3, [r1, #88]	; 0x58
 800ea9c:	e001      	b.n	800eaa2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ea9e:	7dfb      	ldrb	r3, [r7, #23]
 800eaa0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d036      	beq.n	800eb1c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eab4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eab8:	d01c      	beq.n	800eaf4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800eaba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800eabe:	d816      	bhi.n	800eaee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800eac0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eac4:	d003      	beq.n	800eace <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800eac6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eaca:	d007      	beq.n	800eadc <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800eacc:	e00f      	b.n	800eaee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eace:	4b11      	ldr	r3, [pc, #68]	; (800eb14 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ead0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ead2:	4a10      	ldr	r2, [pc, #64]	; (800eb14 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ead4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ead8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800eada:	e00c      	b.n	800eaf6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	3324      	adds	r3, #36	; 0x24
 800eae0:	2101      	movs	r1, #1
 800eae2:	4618      	mov	r0, r3
 800eae4:	f001 f9d4 	bl	800fe90 <RCCEx_PLL3_Config>
 800eae8:	4603      	mov	r3, r0
 800eaea:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800eaec:	e003      	b.n	800eaf6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800eaee:	2301      	movs	r3, #1
 800eaf0:	75fb      	strb	r3, [r7, #23]
      break;
 800eaf2:	e000      	b.n	800eaf6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800eaf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800eaf6:	7dfb      	ldrb	r3, [r7, #23]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d10d      	bne.n	800eb18 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800eafc:	4b05      	ldr	r3, [pc, #20]	; (800eb14 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800eafe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eb0a:	4902      	ldr	r1, [pc, #8]	; (800eb14 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800eb0c:	4313      	orrs	r3, r2
 800eb0e:	654b      	str	r3, [r1, #84]	; 0x54
 800eb10:	e004      	b.n	800eb1c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800eb12:	bf00      	nop
 800eb14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb18:	7dfb      	ldrb	r3, [r7, #23]
 800eb1a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d029      	beq.n	800eb7c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d003      	beq.n	800eb38 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800eb30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb34:	d007      	beq.n	800eb46 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800eb36:	e00f      	b.n	800eb58 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800eb38:	4b61      	ldr	r3, [pc, #388]	; (800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800eb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb3c:	4a60      	ldr	r2, [pc, #384]	; (800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800eb3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eb42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800eb44:	e00b      	b.n	800eb5e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	3304      	adds	r3, #4
 800eb4a:	2102      	movs	r1, #2
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f001 f8ed 	bl	800fd2c <RCCEx_PLL2_Config>
 800eb52:	4603      	mov	r3, r0
 800eb54:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800eb56:	e002      	b.n	800eb5e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800eb58:	2301      	movs	r3, #1
 800eb5a:	75fb      	strb	r3, [r7, #23]
      break;
 800eb5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800eb5e:	7dfb      	ldrb	r3, [r7, #23]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d109      	bne.n	800eb78 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800eb64:	4b56      	ldr	r3, [pc, #344]	; (800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800eb66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb70:	4953      	ldr	r1, [pc, #332]	; (800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800eb72:	4313      	orrs	r3, r2
 800eb74:	64cb      	str	r3, [r1, #76]	; 0x4c
 800eb76:	e001      	b.n	800eb7c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800eb78:	7dfb      	ldrb	r3, [r7, #23]
 800eb7a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d00a      	beq.n	800eb9e <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	3324      	adds	r3, #36	; 0x24
 800eb8c:	2102      	movs	r1, #2
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f001 f97e 	bl	800fe90 <RCCEx_PLL3_Config>
 800eb94:	4603      	mov	r3, r0
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d001      	beq.n	800eb9e <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d030      	beq.n	800ec0c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ebb2:	d017      	beq.n	800ebe4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800ebb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ebb8:	d811      	bhi.n	800ebde <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800ebba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ebbe:	d013      	beq.n	800ebe8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800ebc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ebc4:	d80b      	bhi.n	800ebde <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d010      	beq.n	800ebec <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800ebca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ebce:	d106      	bne.n	800ebde <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ebd0:	4b3b      	ldr	r3, [pc, #236]	; (800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ebd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebd4:	4a3a      	ldr	r2, [pc, #232]	; (800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ebd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ebda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800ebdc:	e007      	b.n	800ebee <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ebde:	2301      	movs	r3, #1
 800ebe0:	75fb      	strb	r3, [r7, #23]
      break;
 800ebe2:	e004      	b.n	800ebee <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800ebe4:	bf00      	nop
 800ebe6:	e002      	b.n	800ebee <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800ebe8:	bf00      	nop
 800ebea:	e000      	b.n	800ebee <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800ebec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ebee:	7dfb      	ldrb	r3, [r7, #23]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d109      	bne.n	800ec08 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ebf4:	4b32      	ldr	r3, [pc, #200]	; (800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ebf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec00:	492f      	ldr	r1, [pc, #188]	; (800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ec02:	4313      	orrs	r3, r2
 800ec04:	654b      	str	r3, [r1, #84]	; 0x54
 800ec06:	e001      	b.n	800ec0c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ec08:	7dfb      	ldrb	r3, [r7, #23]
 800ec0a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d008      	beq.n	800ec2a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ec18:	4b29      	ldr	r3, [pc, #164]	; (800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ec1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec24:	4926      	ldr	r1, [pc, #152]	; (800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ec26:	4313      	orrs	r3, r2
 800ec28:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d008      	beq.n	800ec48 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ec36:	4b22      	ldr	r3, [pc, #136]	; (800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ec38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec3a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec42:	491f      	ldr	r1, [pc, #124]	; (800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ec44:	4313      	orrs	r3, r2
 800ec46:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d00d      	beq.n	800ec70 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ec54:	4b1a      	ldr	r3, [pc, #104]	; (800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ec56:	691b      	ldr	r3, [r3, #16]
 800ec58:	4a19      	ldr	r2, [pc, #100]	; (800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ec5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ec5e:	6113      	str	r3, [r2, #16]
 800ec60:	4b17      	ldr	r3, [pc, #92]	; (800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ec62:	691a      	ldr	r2, [r3, #16]
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ec6a:	4915      	ldr	r1, [pc, #84]	; (800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ec6c:	4313      	orrs	r3, r2
 800ec6e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	da08      	bge.n	800ec8a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ec78:	4b11      	ldr	r3, [pc, #68]	; (800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ec7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec7c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec84:	490e      	ldr	r1, [pc, #56]	; (800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ec86:	4313      	orrs	r3, r2
 800ec88:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d009      	beq.n	800ecaa <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ec96:	4b0a      	ldr	r3, [pc, #40]	; (800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ec98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eca4:	4906      	ldr	r1, [pc, #24]	; (800ecc0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800eca6:	4313      	orrs	r3, r2
 800eca8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800ecaa:	7dbb      	ldrb	r3, [r7, #22]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d101      	bne.n	800ecb4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	e000      	b.n	800ecb6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800ecb4:	2301      	movs	r3, #1
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3718      	adds	r7, #24
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
 800ecbe:	bf00      	nop
 800ecc0:	58024400 	.word	0x58024400

0800ecc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b090      	sub	sp, #64	; 0x40
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecd2:	f040 8089 	bne.w	800ede8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800ecd6:	4b95      	ldr	r3, [pc, #596]	; (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ecd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ecda:	f003 0307 	and.w	r3, r3, #7
 800ecde:	633b      	str	r3, [r7, #48]	; 0x30
 800ece0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece2:	2b04      	cmp	r3, #4
 800ece4:	d87d      	bhi.n	800ede2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800ece6:	a201      	add	r2, pc, #4	; (adr r2, 800ecec <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800ece8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecec:	0800ed01 	.word	0x0800ed01
 800ecf0:	0800ed25 	.word	0x0800ed25
 800ecf4:	0800ed49 	.word	0x0800ed49
 800ecf8:	0800eddd 	.word	0x0800eddd
 800ecfc:	0800ed6d 	.word	0x0800ed6d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ed00:	4b8a      	ldr	r3, [pc, #552]	; (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ed0c:	d107      	bne.n	800ed1e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ed0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed12:	4618      	mov	r0, r3
 800ed14:	f000 feb8 	bl	800fa88 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800ed18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed1a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ed1c:	e3ed      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ed22:	e3ea      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ed24:	4b81      	ldr	r3, [pc, #516]	; (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ed2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ed30:	d107      	bne.n	800ed42 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed32:	f107 0318 	add.w	r3, r7, #24
 800ed36:	4618      	mov	r0, r3
 800ed38:	f000 fbfe 	bl	800f538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ed3c:	69bb      	ldr	r3, [r7, #24]
 800ed3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ed40:	e3db      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ed42:	2300      	movs	r3, #0
 800ed44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ed46:	e3d8      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ed48:	4b78      	ldr	r3, [pc, #480]	; (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ed50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ed54:	d107      	bne.n	800ed66 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ed56:	f107 030c 	add.w	r3, r7, #12
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	f000 fd40 	bl	800f7e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ed64:	e3c9      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ed66:	2300      	movs	r3, #0
 800ed68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ed6a:	e3c6      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ed6c:	4b6f      	ldr	r3, [pc, #444]	; (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ed6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ed74:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ed76:	4b6d      	ldr	r3, [pc, #436]	; (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	f003 0304 	and.w	r3, r3, #4
 800ed7e:	2b04      	cmp	r3, #4
 800ed80:	d10c      	bne.n	800ed9c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800ed82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d109      	bne.n	800ed9c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ed88:	4b68      	ldr	r3, [pc, #416]	; (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	08db      	lsrs	r3, r3, #3
 800ed8e:	f003 0303 	and.w	r3, r3, #3
 800ed92:	4a67      	ldr	r2, [pc, #412]	; (800ef30 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800ed94:	fa22 f303 	lsr.w	r3, r2, r3
 800ed98:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed9a:	e01e      	b.n	800edda <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ed9c:	4b63      	ldr	r3, [pc, #396]	; (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eda4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eda8:	d106      	bne.n	800edb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800edaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800edb0:	d102      	bne.n	800edb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800edb2:	4b60      	ldr	r3, [pc, #384]	; (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800edb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800edb6:	e010      	b.n	800edda <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800edb8:	4b5c      	ldr	r3, [pc, #368]	; (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800edc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800edc4:	d106      	bne.n	800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800edc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800edcc:	d102      	bne.n	800edd4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800edce:	4b5a      	ldr	r3, [pc, #360]	; (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800edd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800edd2:	e002      	b.n	800edda <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800edd4:	2300      	movs	r3, #0
 800edd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800edd8:	e38f      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800edda:	e38e      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800eddc:	4b57      	ldr	r3, [pc, #348]	; (800ef3c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800edde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ede0:	e38b      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800ede2:	2300      	movs	r3, #0
 800ede4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ede6:	e388      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800edee:	f040 80a7 	bne.w	800ef40 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800edf2:	4b4e      	ldr	r3, [pc, #312]	; (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800edf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800edf6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800edfa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800edfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ee02:	d054      	beq.n	800eeae <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800ee04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ee0a:	f200 808b 	bhi.w	800ef24 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800ee0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ee14:	f000 8083 	beq.w	800ef1e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ee18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee1a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ee1e:	f200 8081 	bhi.w	800ef24 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800ee22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee28:	d02f      	beq.n	800ee8a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800ee2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ee30:	d878      	bhi.n	800ef24 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800ee32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d004      	beq.n	800ee42 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800ee38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ee3e:	d012      	beq.n	800ee66 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800ee40:	e070      	b.n	800ef24 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ee42:	4b3a      	ldr	r3, [pc, #232]	; (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ee4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ee4e:	d107      	bne.n	800ee60 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ee50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee54:	4618      	mov	r0, r3
 800ee56:	f000 fe17 	bl	800fa88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ee5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee5c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ee5e:	e34c      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ee60:	2300      	movs	r3, #0
 800ee62:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ee64:	e349      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ee66:	4b31      	ldr	r3, [pc, #196]	; (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ee6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ee72:	d107      	bne.n	800ee84 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee74:	f107 0318 	add.w	r3, r7, #24
 800ee78:	4618      	mov	r0, r3
 800ee7a:	f000 fb5d 	bl	800f538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ee7e:	69bb      	ldr	r3, [r7, #24]
 800ee80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ee82:	e33a      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ee84:	2300      	movs	r3, #0
 800ee86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ee88:	e337      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ee8a:	4b28      	ldr	r3, [pc, #160]	; (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ee92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ee96:	d107      	bne.n	800eea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee98:	f107 030c 	add.w	r3, r7, #12
 800ee9c:	4618      	mov	r0, r3
 800ee9e:	f000 fc9f 	bl	800f7e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800eea6:	e328      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800eeac:	e325      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800eeae:	4b1f      	ldr	r3, [pc, #124]	; (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800eeb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eeb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800eeb6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800eeb8:	4b1c      	ldr	r3, [pc, #112]	; (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	f003 0304 	and.w	r3, r3, #4
 800eec0:	2b04      	cmp	r3, #4
 800eec2:	d10c      	bne.n	800eede <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800eec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d109      	bne.n	800eede <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800eeca:	4b18      	ldr	r3, [pc, #96]	; (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	08db      	lsrs	r3, r3, #3
 800eed0:	f003 0303 	and.w	r3, r3, #3
 800eed4:	4a16      	ldr	r2, [pc, #88]	; (800ef30 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800eed6:	fa22 f303 	lsr.w	r3, r2, r3
 800eeda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eedc:	e01e      	b.n	800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800eede:	4b13      	ldr	r3, [pc, #76]	; (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eee6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eeea:	d106      	bne.n	800eefa <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800eeec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eef2:	d102      	bne.n	800eefa <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800eef4:	4b0f      	ldr	r3, [pc, #60]	; (800ef34 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eef8:	e010      	b.n	800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800eefa:	4b0c      	ldr	r3, [pc, #48]	; (800ef2c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ef06:	d106      	bne.n	800ef16 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800ef08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ef0e:	d102      	bne.n	800ef16 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ef10:	4b09      	ldr	r3, [pc, #36]	; (800ef38 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800ef12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef14:	e002      	b.n	800ef1c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ef16:	2300      	movs	r3, #0
 800ef18:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ef1a:	e2ee      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800ef1c:	e2ed      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ef1e:	4b07      	ldr	r3, [pc, #28]	; (800ef3c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ef20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ef22:	e2ea      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800ef24:	2300      	movs	r3, #0
 800ef26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ef28:	e2e7      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800ef2a:	bf00      	nop
 800ef2c:	58024400 	.word	0x58024400
 800ef30:	03d09000 	.word	0x03d09000
 800ef34:	003d0900 	.word	0x003d0900
 800ef38:	017d7840 	.word	0x017d7840
 800ef3c:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ef46:	f040 809c 	bne.w	800f082 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800ef4a:	4b9e      	ldr	r3, [pc, #632]	; (800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ef4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef4e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ef52:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ef54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ef5a:	d054      	beq.n	800f006 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ef5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ef62:	f200 808b 	bhi.w	800f07c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800ef66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef68:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ef6c:	f000 8083 	beq.w	800f076 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ef70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ef76:	f200 8081 	bhi.w	800f07c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800ef7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ef80:	d02f      	beq.n	800efe2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ef82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ef88:	d878      	bhi.n	800f07c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800ef8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d004      	beq.n	800ef9a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800ef90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ef96:	d012      	beq.n	800efbe <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ef98:	e070      	b.n	800f07c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ef9a:	4b8a      	ldr	r3, [pc, #552]	; (800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800efa2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800efa6:	d107      	bne.n	800efb8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800efa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800efac:	4618      	mov	r0, r3
 800efae:	f000 fd6b 	bl	800fa88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800efb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efb4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800efb6:	e2a0      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800efb8:	2300      	movs	r3, #0
 800efba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800efbc:	e29d      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800efbe:	4b81      	ldr	r3, [pc, #516]	; (800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800efc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800efca:	d107      	bne.n	800efdc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800efcc:	f107 0318 	add.w	r3, r7, #24
 800efd0:	4618      	mov	r0, r3
 800efd2:	f000 fab1 	bl	800f538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800efd6:	69bb      	ldr	r3, [r7, #24]
 800efd8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800efda:	e28e      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800efdc:	2300      	movs	r3, #0
 800efde:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800efe0:	e28b      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800efe2:	4b78      	ldr	r3, [pc, #480]	; (800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800efe4:	681b      	ldr	r3, [r3, #0]
 800efe6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800efea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800efee:	d107      	bne.n	800f000 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eff0:	f107 030c 	add.w	r3, r7, #12
 800eff4:	4618      	mov	r0, r3
 800eff6:	f000 fbf3 	bl	800f7e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800effe:	e27c      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800f000:	2300      	movs	r3, #0
 800f002:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f004:	e279      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f006:	4b6f      	ldr	r3, [pc, #444]	; (800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f00a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f00e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f010:	4b6c      	ldr	r3, [pc, #432]	; (800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	f003 0304 	and.w	r3, r3, #4
 800f018:	2b04      	cmp	r3, #4
 800f01a:	d10c      	bne.n	800f036 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800f01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d109      	bne.n	800f036 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f022:	4b68      	ldr	r3, [pc, #416]	; (800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	08db      	lsrs	r3, r3, #3
 800f028:	f003 0303 	and.w	r3, r3, #3
 800f02c:	4a66      	ldr	r2, [pc, #408]	; (800f1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800f02e:	fa22 f303 	lsr.w	r3, r2, r3
 800f032:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f034:	e01e      	b.n	800f074 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f036:	4b63      	ldr	r3, [pc, #396]	; (800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f03e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f042:	d106      	bne.n	800f052 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800f044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f046:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f04a:	d102      	bne.n	800f052 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f04c:	4b5f      	ldr	r3, [pc, #380]	; (800f1cc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800f04e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f050:	e010      	b.n	800f074 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f052:	4b5c      	ldr	r3, [pc, #368]	; (800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f05a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f05e:	d106      	bne.n	800f06e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800f060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f066:	d102      	bne.n	800f06e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f068:	4b59      	ldr	r3, [pc, #356]	; (800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800f06a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f06c:	e002      	b.n	800f074 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f06e:	2300      	movs	r3, #0
 800f070:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f072:	e242      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800f074:	e241      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800f076:	4b57      	ldr	r3, [pc, #348]	; (800f1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800f078:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f07a:	e23e      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800f07c:	2300      	movs	r3, #0
 800f07e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f080:	e23b      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f088:	f040 80a6 	bne.w	800f1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800f08c:	4b4d      	ldr	r3, [pc, #308]	; (800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f08e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f090:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800f094:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f098:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f09c:	d054      	beq.n	800f148 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800f09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f0a4:	f200 808b 	bhi.w	800f1be <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800f0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f0ae:	f000 8083 	beq.w	800f1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800f0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f0b8:	f200 8081 	bhi.w	800f1be <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800f0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f0c2:	d02f      	beq.n	800f124 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800f0c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f0ca:	d878      	bhi.n	800f1be <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800f0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d004      	beq.n	800f0dc <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800f0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0d8:	d012      	beq.n	800f100 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800f0da:	e070      	b.n	800f1be <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f0dc:	4b39      	ldr	r3, [pc, #228]	; (800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f0e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f0e8:	d107      	bne.n	800f0fa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f0ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f000 fcca 	bl	800fa88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f0f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f0f8:	e1ff      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f0fe:	e1fc      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f100:	4b30      	ldr	r3, [pc, #192]	; (800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f108:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f10c:	d107      	bne.n	800f11e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f10e:	f107 0318 	add.w	r3, r7, #24
 800f112:	4618      	mov	r0, r3
 800f114:	f000 fa10 	bl	800f538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f118:	69bb      	ldr	r3, [r7, #24]
 800f11a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f11c:	e1ed      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800f11e:	2300      	movs	r3, #0
 800f120:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f122:	e1ea      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f124:	4b27      	ldr	r3, [pc, #156]	; (800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f12c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f130:	d107      	bne.n	800f142 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f132:	f107 030c 	add.w	r3, r7, #12
 800f136:	4618      	mov	r0, r3
 800f138:	f000 fb52 	bl	800f7e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f140:	e1db      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800f142:	2300      	movs	r3, #0
 800f144:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f146:	e1d8      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f148:	4b1e      	ldr	r3, [pc, #120]	; (800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f14a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f14c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f150:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f152:	4b1c      	ldr	r3, [pc, #112]	; (800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f003 0304 	and.w	r3, r3, #4
 800f15a:	2b04      	cmp	r3, #4
 800f15c:	d10c      	bne.n	800f178 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800f15e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f160:	2b00      	cmp	r3, #0
 800f162:	d109      	bne.n	800f178 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f164:	4b17      	ldr	r3, [pc, #92]	; (800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	08db      	lsrs	r3, r3, #3
 800f16a:	f003 0303 	and.w	r3, r3, #3
 800f16e:	4a16      	ldr	r2, [pc, #88]	; (800f1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800f170:	fa22 f303 	lsr.w	r3, r2, r3
 800f174:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f176:	e01e      	b.n	800f1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f178:	4b12      	ldr	r3, [pc, #72]	; (800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f184:	d106      	bne.n	800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800f186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f188:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f18c:	d102      	bne.n	800f194 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f18e:	4b0f      	ldr	r3, [pc, #60]	; (800f1cc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800f190:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f192:	e010      	b.n	800f1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f194:	4b0b      	ldr	r3, [pc, #44]	; (800f1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f19c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f1a0:	d106      	bne.n	800f1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800f1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f1a8:	d102      	bne.n	800f1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f1aa:	4b09      	ldr	r3, [pc, #36]	; (800f1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800f1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f1ae:	e002      	b.n	800f1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f1b4:	e1a1      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800f1b6:	e1a0      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800f1b8:	4b06      	ldr	r3, [pc, #24]	; (800f1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800f1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f1bc:	e19d      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f1c2:	e19a      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800f1c4:	58024400 	.word	0x58024400
 800f1c8:	03d09000 	.word	0x03d09000
 800f1cc:	003d0900 	.word	0x003d0900
 800f1d0:	017d7840 	.word	0x017d7840
 800f1d4:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f1de:	d173      	bne.n	800f2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800f1e0:	4b9a      	ldr	r3, [pc, #616]	; (800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f1e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f1e8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f1f0:	d02f      	beq.n	800f252 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800f1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f1f8:	d863      	bhi.n	800f2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800f1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d004      	beq.n	800f20a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800f200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f202:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f206:	d012      	beq.n	800f22e <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800f208:	e05b      	b.n	800f2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f20a:	4b90      	ldr	r3, [pc, #576]	; (800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f216:	d107      	bne.n	800f228 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f218:	f107 0318 	add.w	r3, r7, #24
 800f21c:	4618      	mov	r0, r3
 800f21e:	f000 f98b 	bl	800f538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800f222:	69bb      	ldr	r3, [r7, #24]
 800f224:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f226:	e168      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800f228:	2300      	movs	r3, #0
 800f22a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f22c:	e165      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f22e:	4b87      	ldr	r3, [pc, #540]	; (800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f23a:	d107      	bne.n	800f24c <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f23c:	f107 030c 	add.w	r3, r7, #12
 800f240:	4618      	mov	r0, r3
 800f242:	f000 facd 	bl	800f7e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f24a:	e156      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800f24c:	2300      	movs	r3, #0
 800f24e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f250:	e153      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f252:	4b7e      	ldr	r3, [pc, #504]	; (800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f256:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f25a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f25c:	4b7b      	ldr	r3, [pc, #492]	; (800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	f003 0304 	and.w	r3, r3, #4
 800f264:	2b04      	cmp	r3, #4
 800f266:	d10c      	bne.n	800f282 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 800f268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d109      	bne.n	800f282 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f26e:	4b77      	ldr	r3, [pc, #476]	; (800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	08db      	lsrs	r3, r3, #3
 800f274:	f003 0303 	and.w	r3, r3, #3
 800f278:	4a75      	ldr	r2, [pc, #468]	; (800f450 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f27a:	fa22 f303 	lsr.w	r3, r2, r3
 800f27e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f280:	e01e      	b.n	800f2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f282:	4b72      	ldr	r3, [pc, #456]	; (800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f28a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f28e:	d106      	bne.n	800f29e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800f290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f296:	d102      	bne.n	800f29e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f298:	4b6e      	ldr	r3, [pc, #440]	; (800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800f29a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f29c:	e010      	b.n	800f2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f29e:	4b6b      	ldr	r3, [pc, #428]	; (800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f2a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f2aa:	d106      	bne.n	800f2ba <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800f2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f2b2:	d102      	bne.n	800f2ba <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f2b4:	4b68      	ldr	r3, [pc, #416]	; (800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800f2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f2b8:	e002      	b.n	800f2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f2be:	e11c      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800f2c0:	e11b      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f2c6:	e118      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2ce:	d133      	bne.n	800f338 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800f2d0:	4b5e      	ldr	r3, [pc, #376]	; (800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f2d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f2d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f2d8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d004      	beq.n	800f2ea <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800f2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2e6:	d012      	beq.n	800f30e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800f2e8:	e023      	b.n	800f332 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f2ea:	4b58      	ldr	r3, [pc, #352]	; (800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f2f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f2f6:	d107      	bne.n	800f308 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f2f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f000 fbc3 	bl	800fa88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f304:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f306:	e0f8      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f308:	2300      	movs	r3, #0
 800f30a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f30c:	e0f5      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f30e:	4b4f      	ldr	r3, [pc, #316]	; (800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f316:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f31a:	d107      	bne.n	800f32c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f31c:	f107 0318 	add.w	r3, r7, #24
 800f320:	4618      	mov	r0, r3
 800f322:	f000 f909 	bl	800f538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f326:	6a3b      	ldr	r3, [r7, #32]
 800f328:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f32a:	e0e6      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f32c:	2300      	movs	r3, #0
 800f32e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f330:	e0e3      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800f332:	2300      	movs	r3, #0
 800f334:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f336:	e0e0      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f33e:	f040 808d 	bne.w	800f45c <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800f342:	4b42      	ldr	r3, [pc, #264]	; (800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f346:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800f34a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f34e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f352:	d06b      	beq.n	800f42c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800f354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f35a:	d874      	bhi.n	800f446 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800f35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f35e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f362:	d056      	beq.n	800f412 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800f364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f36a:	d86c      	bhi.n	800f446 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800f36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f36e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f372:	d03b      	beq.n	800f3ec <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800f374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f376:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f37a:	d864      	bhi.n	800f446 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800f37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f37e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f382:	d021      	beq.n	800f3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800f384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f38a:	d85c      	bhi.n	800f446 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800f38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d004      	beq.n	800f39c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800f392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f394:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f398:	d004      	beq.n	800f3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800f39a:	e054      	b.n	800f446 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800f39c:	f000 f8b6 	bl	800f50c <HAL_RCCEx_GetD3PCLK1Freq>
 800f3a0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800f3a2:	e0aa      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f3a4:	4b29      	ldr	r3, [pc, #164]	; (800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f3ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f3b0:	d107      	bne.n	800f3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f3b2:	f107 0318 	add.w	r3, r7, #24
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	f000 f8be 	bl	800f538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f3bc:	69fb      	ldr	r3, [r7, #28]
 800f3be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f3c0:	e09b      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f3c6:	e098      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f3c8:	4b20      	ldr	r3, [pc, #128]	; (800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f3d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f3d4:	d107      	bne.n	800f3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f3d6:	f107 030c 	add.w	r3, r7, #12
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f000 fa00 	bl	800f7e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f3e0:	693b      	ldr	r3, [r7, #16]
 800f3e2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f3e4:	e089      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f3ea:	e086      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f3ec:	4b17      	ldr	r3, [pc, #92]	; (800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	f003 0304 	and.w	r3, r3, #4
 800f3f4:	2b04      	cmp	r3, #4
 800f3f6:	d109      	bne.n	800f40c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f3f8:	4b14      	ldr	r3, [pc, #80]	; (800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	08db      	lsrs	r3, r3, #3
 800f3fe:	f003 0303 	and.w	r3, r3, #3
 800f402:	4a13      	ldr	r2, [pc, #76]	; (800f450 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f404:	fa22 f303 	lsr.w	r3, r2, r3
 800f408:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f40a:	e076      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f40c:	2300      	movs	r3, #0
 800f40e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f410:	e073      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f412:	4b0e      	ldr	r3, [pc, #56]	; (800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f41a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f41e:	d102      	bne.n	800f426 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 800f420:	4b0c      	ldr	r3, [pc, #48]	; (800f454 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800f422:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f424:	e069      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800f426:	2300      	movs	r3, #0
 800f428:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f42a:	e066      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f42c:	4b07      	ldr	r3, [pc, #28]	; (800f44c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f434:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f438:	d102      	bne.n	800f440 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800f43a:	4b07      	ldr	r3, [pc, #28]	; (800f458 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800f43c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f43e:	e05c      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f440:	2300      	movs	r3, #0
 800f442:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f444:	e059      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800f446:	2300      	movs	r3, #0
 800f448:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f44a:	e056      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800f44c:	58024400 	.word	0x58024400
 800f450:	03d09000 	.word	0x03d09000
 800f454:	003d0900 	.word	0x003d0900
 800f458:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f462:	d148      	bne.n	800f4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800f464:	4b27      	ldr	r3, [pc, #156]	; (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f468:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f46c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f474:	d02a      	beq.n	800f4cc <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800f476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f47c:	d838      	bhi.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800f47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f480:	2b00      	cmp	r3, #0
 800f482:	d004      	beq.n	800f48e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800f484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f486:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f48a:	d00d      	beq.n	800f4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800f48c:	e030      	b.n	800f4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f48e:	4b1d      	ldr	r3, [pc, #116]	; (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f496:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f49a:	d102      	bne.n	800f4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800f49c:	4b1a      	ldr	r3, [pc, #104]	; (800f508 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800f49e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f4a0:	e02b      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f4a6:	e028      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f4a8:	4b16      	ldr	r3, [pc, #88]	; (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f4b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f4b4:	d107      	bne.n	800f4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f4b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f000 fae4 	bl	800fa88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f4c4:	e019      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f4ca:	e016      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f4cc:	4b0d      	ldr	r3, [pc, #52]	; (800f504 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f4d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f4d8:	d107      	bne.n	800f4ea <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f4da:	f107 0318 	add.w	r3, r7, #24
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f000 f82a 	bl	800f538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f4e4:	69fb      	ldr	r3, [r7, #28]
 800f4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f4e8:	e007      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f4ee:	e004      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800f4f0:	2300      	movs	r3, #0
 800f4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f4f4:	e001      	b.n	800f4fa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800f4fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	3740      	adds	r7, #64	; 0x40
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}
 800f504:	58024400 	.word	0x58024400
 800f508:	017d7840 	.word	0x017d7840

0800f50c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800f510:	f7fe fc66 	bl	800dde0 <HAL_RCC_GetHCLKFreq>
 800f514:	4602      	mov	r2, r0
 800f516:	4b06      	ldr	r3, [pc, #24]	; (800f530 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f518:	6a1b      	ldr	r3, [r3, #32]
 800f51a:	091b      	lsrs	r3, r3, #4
 800f51c:	f003 0307 	and.w	r3, r3, #7
 800f520:	4904      	ldr	r1, [pc, #16]	; (800f534 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f522:	5ccb      	ldrb	r3, [r1, r3]
 800f524:	f003 031f 	and.w	r3, r3, #31
 800f528:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	bd80      	pop	{r7, pc}
 800f530:	58024400 	.word	0x58024400
 800f534:	08018310 	.word	0x08018310

0800f538 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800f538:	b480      	push	{r7}
 800f53a:	b089      	sub	sp, #36	; 0x24
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f540:	4ba1      	ldr	r3, [pc, #644]	; (800f7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f544:	f003 0303 	and.w	r3, r3, #3
 800f548:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800f54a:	4b9f      	ldr	r3, [pc, #636]	; (800f7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f54c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f54e:	0b1b      	lsrs	r3, r3, #12
 800f550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f554:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f556:	4b9c      	ldr	r3, [pc, #624]	; (800f7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f55a:	091b      	lsrs	r3, r3, #4
 800f55c:	f003 0301 	and.w	r3, r3, #1
 800f560:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800f562:	4b99      	ldr	r3, [pc, #612]	; (800f7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f566:	08db      	lsrs	r3, r3, #3
 800f568:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f56c:	693a      	ldr	r2, [r7, #16]
 800f56e:	fb02 f303 	mul.w	r3, r2, r3
 800f572:	ee07 3a90 	vmov	s15, r3
 800f576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f57a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f57e:	697b      	ldr	r3, [r7, #20]
 800f580:	2b00      	cmp	r3, #0
 800f582:	f000 8111 	beq.w	800f7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f586:	69bb      	ldr	r3, [r7, #24]
 800f588:	2b02      	cmp	r3, #2
 800f58a:	f000 8083 	beq.w	800f694 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f58e:	69bb      	ldr	r3, [r7, #24]
 800f590:	2b02      	cmp	r3, #2
 800f592:	f200 80a1 	bhi.w	800f6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f596:	69bb      	ldr	r3, [r7, #24]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d003      	beq.n	800f5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f59c:	69bb      	ldr	r3, [r7, #24]
 800f59e:	2b01      	cmp	r3, #1
 800f5a0:	d056      	beq.n	800f650 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f5a2:	e099      	b.n	800f6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f5a4:	4b88      	ldr	r3, [pc, #544]	; (800f7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	f003 0320 	and.w	r3, r3, #32
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d02d      	beq.n	800f60c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f5b0:	4b85      	ldr	r3, [pc, #532]	; (800f7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	08db      	lsrs	r3, r3, #3
 800f5b6:	f003 0303 	and.w	r3, r3, #3
 800f5ba:	4a84      	ldr	r2, [pc, #528]	; (800f7cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f5bc:	fa22 f303 	lsr.w	r3, r2, r3
 800f5c0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	ee07 3a90 	vmov	s15, r3
 800f5c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	ee07 3a90 	vmov	s15, r3
 800f5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f5d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f5da:	4b7b      	ldr	r3, [pc, #492]	; (800f7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5e2:	ee07 3a90 	vmov	s15, r3
 800f5e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f5ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800f5ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 800f7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f5f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f5f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f5fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f5fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f602:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f606:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800f60a:	e087      	b.n	800f71c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f60c:	697b      	ldr	r3, [r7, #20]
 800f60e:	ee07 3a90 	vmov	s15, r3
 800f612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f616:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f7d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f61a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f61e:	4b6a      	ldr	r3, [pc, #424]	; (800f7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f626:	ee07 3a90 	vmov	s15, r3
 800f62a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f62e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f632:	eddf 5a67 	vldr	s11, [pc, #412]	; 800f7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f63a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f63e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f64a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f64e:	e065      	b.n	800f71c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	ee07 3a90 	vmov	s15, r3
 800f656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f65a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f65e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f662:	4b59      	ldr	r3, [pc, #356]	; (800f7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f66a:	ee07 3a90 	vmov	s15, r3
 800f66e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f672:	ed97 6a03 	vldr	s12, [r7, #12]
 800f676:	eddf 5a56 	vldr	s11, [pc, #344]	; 800f7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f67a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f67e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f68a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f68e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f692:	e043      	b.n	800f71c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	ee07 3a90 	vmov	s15, r3
 800f69a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f69e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800f7dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f6a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f6a6:	4b48      	ldr	r3, [pc, #288]	; (800f7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6ae:	ee07 3a90 	vmov	s15, r3
 800f6b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800f6ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f6be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f6c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f6c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f6ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f6ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f6d6:	e021      	b.n	800f71c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	ee07 3a90 	vmov	s15, r3
 800f6de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f6e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f6ea:	4b37      	ldr	r3, [pc, #220]	; (800f7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6f2:	ee07 3a90 	vmov	s15, r3
 800f6f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800f6fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 800f7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f70a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f70e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f712:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f716:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f71a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800f71c:	4b2a      	ldr	r3, [pc, #168]	; (800f7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f720:	0a5b      	lsrs	r3, r3, #9
 800f722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f726:	ee07 3a90 	vmov	s15, r3
 800f72a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f72e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f732:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f736:	edd7 6a07 	vldr	s13, [r7, #28]
 800f73a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f73e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f742:	ee17 2a90 	vmov	r2, s15
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800f74a:	4b1f      	ldr	r3, [pc, #124]	; (800f7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f74e:	0c1b      	lsrs	r3, r3, #16
 800f750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f754:	ee07 3a90 	vmov	s15, r3
 800f758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f75c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f760:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f764:	edd7 6a07 	vldr	s13, [r7, #28]
 800f768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f76c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f770:	ee17 2a90 	vmov	r2, s15
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800f778:	4b13      	ldr	r3, [pc, #76]	; (800f7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f77c:	0e1b      	lsrs	r3, r3, #24
 800f77e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f782:	ee07 3a90 	vmov	s15, r3
 800f786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f78a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f78e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f792:	edd7 6a07 	vldr	s13, [r7, #28]
 800f796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f79a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f79e:	ee17 2a90 	vmov	r2, s15
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f7a6:	e008      	b.n	800f7ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	609a      	str	r2, [r3, #8]
}
 800f7ba:	bf00      	nop
 800f7bc:	3724      	adds	r7, #36	; 0x24
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c4:	4770      	bx	lr
 800f7c6:	bf00      	nop
 800f7c8:	58024400 	.word	0x58024400
 800f7cc:	03d09000 	.word	0x03d09000
 800f7d0:	46000000 	.word	0x46000000
 800f7d4:	4c742400 	.word	0x4c742400
 800f7d8:	4a742400 	.word	0x4a742400
 800f7dc:	4bbebc20 	.word	0x4bbebc20

0800f7e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800f7e0:	b480      	push	{r7}
 800f7e2:	b089      	sub	sp, #36	; 0x24
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f7e8:	4ba1      	ldr	r3, [pc, #644]	; (800fa70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f7ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7ec:	f003 0303 	and.w	r3, r3, #3
 800f7f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800f7f2:	4b9f      	ldr	r3, [pc, #636]	; (800fa70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f7f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7f6:	0d1b      	lsrs	r3, r3, #20
 800f7f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f7fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f7fe:	4b9c      	ldr	r3, [pc, #624]	; (800fa70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f802:	0a1b      	lsrs	r3, r3, #8
 800f804:	f003 0301 	and.w	r3, r3, #1
 800f808:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800f80a:	4b99      	ldr	r3, [pc, #612]	; (800fa70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f80c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f80e:	08db      	lsrs	r3, r3, #3
 800f810:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f814:	693a      	ldr	r2, [r7, #16]
 800f816:	fb02 f303 	mul.w	r3, r2, r3
 800f81a:	ee07 3a90 	vmov	s15, r3
 800f81e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f822:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	f000 8111 	beq.w	800fa50 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f82e:	69bb      	ldr	r3, [r7, #24]
 800f830:	2b02      	cmp	r3, #2
 800f832:	f000 8083 	beq.w	800f93c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f836:	69bb      	ldr	r3, [r7, #24]
 800f838:	2b02      	cmp	r3, #2
 800f83a:	f200 80a1 	bhi.w	800f980 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f83e:	69bb      	ldr	r3, [r7, #24]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d003      	beq.n	800f84c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f844:	69bb      	ldr	r3, [r7, #24]
 800f846:	2b01      	cmp	r3, #1
 800f848:	d056      	beq.n	800f8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f84a:	e099      	b.n	800f980 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f84c:	4b88      	ldr	r3, [pc, #544]	; (800fa70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	f003 0320 	and.w	r3, r3, #32
 800f854:	2b00      	cmp	r3, #0
 800f856:	d02d      	beq.n	800f8b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f858:	4b85      	ldr	r3, [pc, #532]	; (800fa70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	08db      	lsrs	r3, r3, #3
 800f85e:	f003 0303 	and.w	r3, r3, #3
 800f862:	4a84      	ldr	r2, [pc, #528]	; (800fa74 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f864:	fa22 f303 	lsr.w	r3, r2, r3
 800f868:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	ee07 3a90 	vmov	s15, r3
 800f870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	ee07 3a90 	vmov	s15, r3
 800f87a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f87e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f882:	4b7b      	ldr	r3, [pc, #492]	; (800fa70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f88a:	ee07 3a90 	vmov	s15, r3
 800f88e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f892:	ed97 6a03 	vldr	s12, [r7, #12]
 800f896:	eddf 5a78 	vldr	s11, [pc, #480]	; 800fa78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f89a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f89e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f8a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f8a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f8aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800f8b2:	e087      	b.n	800f9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	ee07 3a90 	vmov	s15, r3
 800f8ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800fa7c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f8c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f8c6:	4b6a      	ldr	r3, [pc, #424]	; (800fa70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8ce:	ee07 3a90 	vmov	s15, r3
 800f8d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f8d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800f8da:	eddf 5a67 	vldr	s11, [pc, #412]	; 800fa78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f8de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f8e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f8e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f8ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f8ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f8f6:	e065      	b.n	800f9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	ee07 3a90 	vmov	s15, r3
 800f8fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f902:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800fa80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f90a:	4b59      	ldr	r3, [pc, #356]	; (800fa70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f90e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f912:	ee07 3a90 	vmov	s15, r3
 800f916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f91a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f91e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800fa78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f92a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f92e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f932:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f936:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f93a:	e043      	b.n	800f9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	ee07 3a90 	vmov	s15, r3
 800f942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f946:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800fa84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800f94a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f94e:	4b48      	ldr	r3, [pc, #288]	; (800fa70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f956:	ee07 3a90 	vmov	s15, r3
 800f95a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f95e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f962:	eddf 5a45 	vldr	s11, [pc, #276]	; 800fa78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f96a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f96e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f97a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f97e:	e021      	b.n	800f9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	ee07 3a90 	vmov	s15, r3
 800f986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f98a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800fa80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f98e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f992:	4b37      	ldr	r3, [pc, #220]	; (800fa70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f99a:	ee07 3a90 	vmov	s15, r3
 800f99e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f9a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800f9a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800fa78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f9aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f9ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f9b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f9b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f9ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f9c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800f9c4:	4b2a      	ldr	r3, [pc, #168]	; (800fa70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9c8:	0a5b      	lsrs	r3, r3, #9
 800f9ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9ce:	ee07 3a90 	vmov	s15, r3
 800f9d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f9da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f9de:	edd7 6a07 	vldr	s13, [r7, #28]
 800f9e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f9e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f9ea:	ee17 2a90 	vmov	r2, s15
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800f9f2:	4b1f      	ldr	r3, [pc, #124]	; (800fa70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9f6:	0c1b      	lsrs	r3, r3, #16
 800f9f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9fc:	ee07 3a90 	vmov	s15, r3
 800fa00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fa08:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fa0c:	edd7 6a07 	vldr	s13, [r7, #28]
 800fa10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fa14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa18:	ee17 2a90 	vmov	r2, s15
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800fa20:	4b13      	ldr	r3, [pc, #76]	; (800fa70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800fa22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa24:	0e1b      	lsrs	r3, r3, #24
 800fa26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa2a:	ee07 3a90 	vmov	s15, r3
 800fa2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fa36:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fa3a:	edd7 6a07 	vldr	s13, [r7, #28]
 800fa3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fa42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa46:	ee17 2a90 	vmov	r2, s15
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800fa4e:	e008      	b.n	800fa62 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	2200      	movs	r2, #0
 800fa54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	2200      	movs	r2, #0
 800fa5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2200      	movs	r2, #0
 800fa60:	609a      	str	r2, [r3, #8]
}
 800fa62:	bf00      	nop
 800fa64:	3724      	adds	r7, #36	; 0x24
 800fa66:	46bd      	mov	sp, r7
 800fa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6c:	4770      	bx	lr
 800fa6e:	bf00      	nop
 800fa70:	58024400 	.word	0x58024400
 800fa74:	03d09000 	.word	0x03d09000
 800fa78:	46000000 	.word	0x46000000
 800fa7c:	4c742400 	.word	0x4c742400
 800fa80:	4a742400 	.word	0x4a742400
 800fa84:	4bbebc20 	.word	0x4bbebc20

0800fa88 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800fa88:	b480      	push	{r7}
 800fa8a:	b089      	sub	sp, #36	; 0x24
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fa90:	4ba0      	ldr	r3, [pc, #640]	; (800fd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fa92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa94:	f003 0303 	and.w	r3, r3, #3
 800fa98:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800fa9a:	4b9e      	ldr	r3, [pc, #632]	; (800fd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fa9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa9e:	091b      	lsrs	r3, r3, #4
 800faa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800faa4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800faa6:	4b9b      	ldr	r3, [pc, #620]	; (800fd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800faa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800faaa:	f003 0301 	and.w	r3, r3, #1
 800faae:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800fab0:	4b98      	ldr	r3, [pc, #608]	; (800fd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fab4:	08db      	lsrs	r3, r3, #3
 800fab6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800faba:	693a      	ldr	r2, [r7, #16]
 800fabc:	fb02 f303 	mul.w	r3, r2, r3
 800fac0:	ee07 3a90 	vmov	s15, r3
 800fac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fac8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800facc:	697b      	ldr	r3, [r7, #20]
 800face:	2b00      	cmp	r3, #0
 800fad0:	f000 8111 	beq.w	800fcf6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800fad4:	69bb      	ldr	r3, [r7, #24]
 800fad6:	2b02      	cmp	r3, #2
 800fad8:	f000 8083 	beq.w	800fbe2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800fadc:	69bb      	ldr	r3, [r7, #24]
 800fade:	2b02      	cmp	r3, #2
 800fae0:	f200 80a1 	bhi.w	800fc26 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800fae4:	69bb      	ldr	r3, [r7, #24]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d003      	beq.n	800faf2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800faea:	69bb      	ldr	r3, [r7, #24]
 800faec:	2b01      	cmp	r3, #1
 800faee:	d056      	beq.n	800fb9e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800faf0:	e099      	b.n	800fc26 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800faf2:	4b88      	ldr	r3, [pc, #544]	; (800fd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	f003 0320 	and.w	r3, r3, #32
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d02d      	beq.n	800fb5a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800fafe:	4b85      	ldr	r3, [pc, #532]	; (800fd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	08db      	lsrs	r3, r3, #3
 800fb04:	f003 0303 	and.w	r3, r3, #3
 800fb08:	4a83      	ldr	r2, [pc, #524]	; (800fd18 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800fb0a:	fa22 f303 	lsr.w	r3, r2, r3
 800fb0e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fb10:	68bb      	ldr	r3, [r7, #8]
 800fb12:	ee07 3a90 	vmov	s15, r3
 800fb16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	ee07 3a90 	vmov	s15, r3
 800fb20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb28:	4b7a      	ldr	r3, [pc, #488]	; (800fd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fb2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb30:	ee07 3a90 	vmov	s15, r3
 800fb34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb38:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb3c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800fd1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fb40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fb4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb54:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800fb58:	e087      	b.n	800fc6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	ee07 3a90 	vmov	s15, r3
 800fb60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fb64:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800fd20 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fb68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fb6c:	4b69      	ldr	r3, [pc, #420]	; (800fd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fb6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb74:	ee07 3a90 	vmov	s15, r3
 800fb78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fb7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800fb80:	eddf 5a66 	vldr	s11, [pc, #408]	; 800fd1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fb84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fb88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fb8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fb90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fb9c:	e065      	b.n	800fc6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fb9e:	697b      	ldr	r3, [r7, #20]
 800fba0:	ee07 3a90 	vmov	s15, r3
 800fba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fba8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800fd24 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800fbac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fbb0:	4b58      	ldr	r3, [pc, #352]	; (800fd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fbb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbb8:	ee07 3a90 	vmov	s15, r3
 800fbbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fbc0:	ed97 6a03 	vldr	s12, [r7, #12]
 800fbc4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800fd1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fbc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fbcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fbd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fbd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fbd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbdc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fbe0:	e043      	b.n	800fc6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	ee07 3a90 	vmov	s15, r3
 800fbe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800fd28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800fbf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fbf4:	4b47      	ldr	r3, [pc, #284]	; (800fd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fbf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbfc:	ee07 3a90 	vmov	s15, r3
 800fc00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc04:	ed97 6a03 	vldr	s12, [r7, #12]
 800fc08:	eddf 5a44 	vldr	s11, [pc, #272]	; 800fd1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fc0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fc18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc20:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fc24:	e021      	b.n	800fc6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	ee07 3a90 	vmov	s15, r3
 800fc2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc30:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800fd20 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800fc34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fc38:	4b36      	ldr	r3, [pc, #216]	; (800fd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc40:	ee07 3a90 	vmov	s15, r3
 800fc44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fc48:	ed97 6a03 	vldr	s12, [r7, #12]
 800fc4c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800fd1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fc50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fc54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fc58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fc5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fc60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc64:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fc68:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800fc6a:	4b2a      	ldr	r3, [pc, #168]	; (800fd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc6e:	0a5b      	lsrs	r3, r3, #9
 800fc70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fc74:	ee07 3a90 	vmov	s15, r3
 800fc78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fc7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fc80:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fc84:	edd7 6a07 	vldr	s13, [r7, #28]
 800fc88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fc90:	ee17 2a90 	vmov	r2, s15
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800fc98:	4b1e      	ldr	r3, [pc, #120]	; (800fd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fc9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc9c:	0c1b      	lsrs	r3, r3, #16
 800fc9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fca2:	ee07 3a90 	vmov	s15, r3
 800fca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fcaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fcae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fcb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800fcb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fcba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fcbe:	ee17 2a90 	vmov	r2, s15
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800fcc6:	4b13      	ldr	r3, [pc, #76]	; (800fd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fcc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcca:	0e1b      	lsrs	r3, r3, #24
 800fccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcd0:	ee07 3a90 	vmov	s15, r3
 800fcd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fcd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fcdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fce0:	edd7 6a07 	vldr	s13, [r7, #28]
 800fce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fcec:	ee17 2a90 	vmov	r2, s15
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800fcf4:	e008      	b.n	800fd08 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2200      	movs	r2, #0
 800fd00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	2200      	movs	r2, #0
 800fd06:	609a      	str	r2, [r3, #8]
}
 800fd08:	bf00      	nop
 800fd0a:	3724      	adds	r7, #36	; 0x24
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd12:	4770      	bx	lr
 800fd14:	58024400 	.word	0x58024400
 800fd18:	03d09000 	.word	0x03d09000
 800fd1c:	46000000 	.word	0x46000000
 800fd20:	4c742400 	.word	0x4c742400
 800fd24:	4a742400 	.word	0x4a742400
 800fd28:	4bbebc20 	.word	0x4bbebc20

0800fd2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b084      	sub	sp, #16
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fd36:	2300      	movs	r3, #0
 800fd38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fd3a:	4b53      	ldr	r3, [pc, #332]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fd3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd3e:	f003 0303 	and.w	r3, r3, #3
 800fd42:	2b03      	cmp	r3, #3
 800fd44:	d101      	bne.n	800fd4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800fd46:	2301      	movs	r3, #1
 800fd48:	e099      	b.n	800fe7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800fd4a:	4b4f      	ldr	r3, [pc, #316]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	4a4e      	ldr	r2, [pc, #312]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fd50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fd54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fd56:	f7fa fb71 	bl	800a43c <HAL_GetTick>
 800fd5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fd5c:	e008      	b.n	800fd70 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800fd5e:	f7fa fb6d 	bl	800a43c <HAL_GetTick>
 800fd62:	4602      	mov	r2, r0
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	1ad3      	subs	r3, r2, r3
 800fd68:	2b02      	cmp	r3, #2
 800fd6a:	d901      	bls.n	800fd70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fd6c:	2303      	movs	r3, #3
 800fd6e:	e086      	b.n	800fe7e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fd70:	4b45      	ldr	r3, [pc, #276]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d1f0      	bne.n	800fd5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800fd7c:	4b42      	ldr	r3, [pc, #264]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fd7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	031b      	lsls	r3, r3, #12
 800fd8a:	493f      	ldr	r1, [pc, #252]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fd8c:	4313      	orrs	r3, r2
 800fd8e:	628b      	str	r3, [r1, #40]	; 0x28
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	685b      	ldr	r3, [r3, #4]
 800fd94:	3b01      	subs	r3, #1
 800fd96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	689b      	ldr	r3, [r3, #8]
 800fd9e:	3b01      	subs	r3, #1
 800fda0:	025b      	lsls	r3, r3, #9
 800fda2:	b29b      	uxth	r3, r3
 800fda4:	431a      	orrs	r2, r3
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	68db      	ldr	r3, [r3, #12]
 800fdaa:	3b01      	subs	r3, #1
 800fdac:	041b      	lsls	r3, r3, #16
 800fdae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800fdb2:	431a      	orrs	r2, r3
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	691b      	ldr	r3, [r3, #16]
 800fdb8:	3b01      	subs	r3, #1
 800fdba:	061b      	lsls	r3, r3, #24
 800fdbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800fdc0:	4931      	ldr	r1, [pc, #196]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fdc2:	4313      	orrs	r3, r2
 800fdc4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800fdc6:	4b30      	ldr	r3, [pc, #192]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fdc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	695b      	ldr	r3, [r3, #20]
 800fdd2:	492d      	ldr	r1, [pc, #180]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fdd4:	4313      	orrs	r3, r2
 800fdd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800fdd8:	4b2b      	ldr	r3, [pc, #172]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fdda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fddc:	f023 0220 	bic.w	r2, r3, #32
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	699b      	ldr	r3, [r3, #24]
 800fde4:	4928      	ldr	r1, [pc, #160]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fde6:	4313      	orrs	r3, r2
 800fde8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800fdea:	4b27      	ldr	r3, [pc, #156]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fdec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdee:	4a26      	ldr	r2, [pc, #152]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fdf0:	f023 0310 	bic.w	r3, r3, #16
 800fdf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800fdf6:	4b24      	ldr	r3, [pc, #144]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fdf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fdfa:	4b24      	ldr	r3, [pc, #144]	; (800fe8c <RCCEx_PLL2_Config+0x160>)
 800fdfc:	4013      	ands	r3, r2
 800fdfe:	687a      	ldr	r2, [r7, #4]
 800fe00:	69d2      	ldr	r2, [r2, #28]
 800fe02:	00d2      	lsls	r2, r2, #3
 800fe04:	4920      	ldr	r1, [pc, #128]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fe06:	4313      	orrs	r3, r2
 800fe08:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800fe0a:	4b1f      	ldr	r3, [pc, #124]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fe0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe0e:	4a1e      	ldr	r2, [pc, #120]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fe10:	f043 0310 	orr.w	r3, r3, #16
 800fe14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d106      	bne.n	800fe2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800fe1c:	4b1a      	ldr	r3, [pc, #104]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fe1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe20:	4a19      	ldr	r2, [pc, #100]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fe22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fe26:	62d3      	str	r3, [r2, #44]	; 0x2c
 800fe28:	e00f      	b.n	800fe4a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	2b01      	cmp	r3, #1
 800fe2e:	d106      	bne.n	800fe3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800fe30:	4b15      	ldr	r3, [pc, #84]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fe32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe34:	4a14      	ldr	r2, [pc, #80]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fe36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fe3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800fe3c:	e005      	b.n	800fe4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800fe3e:	4b12      	ldr	r3, [pc, #72]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fe40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe42:	4a11      	ldr	r2, [pc, #68]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fe44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fe48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800fe4a:	4b0f      	ldr	r3, [pc, #60]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	4a0e      	ldr	r2, [pc, #56]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fe50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fe54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fe56:	f7fa faf1 	bl	800a43c <HAL_GetTick>
 800fe5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fe5c:	e008      	b.n	800fe70 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800fe5e:	f7fa faed 	bl	800a43c <HAL_GetTick>
 800fe62:	4602      	mov	r2, r0
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	1ad3      	subs	r3, r2, r3
 800fe68:	2b02      	cmp	r3, #2
 800fe6a:	d901      	bls.n	800fe70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800fe6c:	2303      	movs	r3, #3
 800fe6e:	e006      	b.n	800fe7e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fe70:	4b05      	ldr	r3, [pc, #20]	; (800fe88 <RCCEx_PLL2_Config+0x15c>)
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d0f0      	beq.n	800fe5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800fe7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3710      	adds	r7, #16
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop
 800fe88:	58024400 	.word	0x58024400
 800fe8c:	ffff0007 	.word	0xffff0007

0800fe90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b084      	sub	sp, #16
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
 800fe98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fe9e:	4b53      	ldr	r3, [pc, #332]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800fea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fea2:	f003 0303 	and.w	r3, r3, #3
 800fea6:	2b03      	cmp	r3, #3
 800fea8:	d101      	bne.n	800feae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800feaa:	2301      	movs	r3, #1
 800feac:	e099      	b.n	800ffe2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800feae:	4b4f      	ldr	r3, [pc, #316]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	4a4e      	ldr	r2, [pc, #312]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800feb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800feb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800feba:	f7fa fabf 	bl	800a43c <HAL_GetTick>
 800febe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fec0:	e008      	b.n	800fed4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800fec2:	f7fa fabb 	bl	800a43c <HAL_GetTick>
 800fec6:	4602      	mov	r2, r0
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	1ad3      	subs	r3, r2, r3
 800fecc:	2b02      	cmp	r3, #2
 800fece:	d901      	bls.n	800fed4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fed0:	2303      	movs	r3, #3
 800fed2:	e086      	b.n	800ffe2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fed4:	4b45      	ldr	r3, [pc, #276]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d1f0      	bne.n	800fec2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800fee0:	4b42      	ldr	r3, [pc, #264]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800fee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fee4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	051b      	lsls	r3, r3, #20
 800feee:	493f      	ldr	r1, [pc, #252]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800fef0:	4313      	orrs	r3, r2
 800fef2:	628b      	str	r3, [r1, #40]	; 0x28
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	685b      	ldr	r3, [r3, #4]
 800fef8:	3b01      	subs	r3, #1
 800fefa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	689b      	ldr	r3, [r3, #8]
 800ff02:	3b01      	subs	r3, #1
 800ff04:	025b      	lsls	r3, r3, #9
 800ff06:	b29b      	uxth	r3, r3
 800ff08:	431a      	orrs	r2, r3
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	68db      	ldr	r3, [r3, #12]
 800ff0e:	3b01      	subs	r3, #1
 800ff10:	041b      	lsls	r3, r3, #16
 800ff12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ff16:	431a      	orrs	r2, r3
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	691b      	ldr	r3, [r3, #16]
 800ff1c:	3b01      	subs	r3, #1
 800ff1e:	061b      	lsls	r3, r3, #24
 800ff20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ff24:	4931      	ldr	r1, [pc, #196]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800ff26:	4313      	orrs	r3, r2
 800ff28:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ff2a:	4b30      	ldr	r3, [pc, #192]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800ff2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	695b      	ldr	r3, [r3, #20]
 800ff36:	492d      	ldr	r1, [pc, #180]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800ff38:	4313      	orrs	r3, r2
 800ff3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ff3c:	4b2b      	ldr	r3, [pc, #172]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800ff3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff40:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	699b      	ldr	r3, [r3, #24]
 800ff48:	4928      	ldr	r1, [pc, #160]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800ff4a:	4313      	orrs	r3, r2
 800ff4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ff4e:	4b27      	ldr	r3, [pc, #156]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800ff50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff52:	4a26      	ldr	r2, [pc, #152]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800ff54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ff58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ff5a:	4b24      	ldr	r3, [pc, #144]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800ff5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ff5e:	4b24      	ldr	r3, [pc, #144]	; (800fff0 <RCCEx_PLL3_Config+0x160>)
 800ff60:	4013      	ands	r3, r2
 800ff62:	687a      	ldr	r2, [r7, #4]
 800ff64:	69d2      	ldr	r2, [r2, #28]
 800ff66:	00d2      	lsls	r2, r2, #3
 800ff68:	4920      	ldr	r1, [pc, #128]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800ff6a:	4313      	orrs	r3, r2
 800ff6c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ff6e:	4b1f      	ldr	r3, [pc, #124]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800ff70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff72:	4a1e      	ldr	r2, [pc, #120]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800ff74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ff78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ff7a:	683b      	ldr	r3, [r7, #0]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d106      	bne.n	800ff8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ff80:	4b1a      	ldr	r3, [pc, #104]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800ff82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff84:	4a19      	ldr	r2, [pc, #100]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800ff86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ff8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ff8c:	e00f      	b.n	800ffae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	2b01      	cmp	r3, #1
 800ff92:	d106      	bne.n	800ffa2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ff94:	4b15      	ldr	r3, [pc, #84]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800ff96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff98:	4a14      	ldr	r2, [pc, #80]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800ff9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ff9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ffa0:	e005      	b.n	800ffae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ffa2:	4b12      	ldr	r3, [pc, #72]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800ffa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffa6:	4a11      	ldr	r2, [pc, #68]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800ffa8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ffac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ffae:	4b0f      	ldr	r3, [pc, #60]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	4a0e      	ldr	r2, [pc, #56]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800ffb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ffb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ffba:	f7fa fa3f 	bl	800a43c <HAL_GetTick>
 800ffbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ffc0:	e008      	b.n	800ffd4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ffc2:	f7fa fa3b 	bl	800a43c <HAL_GetTick>
 800ffc6:	4602      	mov	r2, r0
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	1ad3      	subs	r3, r2, r3
 800ffcc:	2b02      	cmp	r3, #2
 800ffce:	d901      	bls.n	800ffd4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ffd0:	2303      	movs	r3, #3
 800ffd2:	e006      	b.n	800ffe2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ffd4:	4b05      	ldr	r3, [pc, #20]	; (800ffec <RCCEx_PLL3_Config+0x15c>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d0f0      	beq.n	800ffc2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ffe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	3710      	adds	r7, #16
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}
 800ffea:	bf00      	nop
 800ffec:	58024400 	.word	0x58024400
 800fff0:	ffff0007 	.word	0xffff0007

0800fff4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b084      	sub	sp, #16
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d101      	bne.n	8010006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010002:	2301      	movs	r3, #1
 8010004:	e0f1      	b.n	80101ea <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2200      	movs	r2, #0
 801000a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	4a78      	ldr	r2, [pc, #480]	; (80101f4 <HAL_SPI_Init+0x200>)
 8010012:	4293      	cmp	r3, r2
 8010014:	d00f      	beq.n	8010036 <HAL_SPI_Init+0x42>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	4a77      	ldr	r2, [pc, #476]	; (80101f8 <HAL_SPI_Init+0x204>)
 801001c:	4293      	cmp	r3, r2
 801001e:	d00a      	beq.n	8010036 <HAL_SPI_Init+0x42>
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	4a75      	ldr	r2, [pc, #468]	; (80101fc <HAL_SPI_Init+0x208>)
 8010026:	4293      	cmp	r3, r2
 8010028:	d005      	beq.n	8010036 <HAL_SPI_Init+0x42>
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	68db      	ldr	r3, [r3, #12]
 801002e:	2b0f      	cmp	r3, #15
 8010030:	d901      	bls.n	8010036 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8010032:	2301      	movs	r3, #1
 8010034:	e0d9      	b.n	80101ea <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8010036:	6878      	ldr	r0, [r7, #4]
 8010038:	f000 f8e2 	bl	8010200 <SPI_GetPacketSize>
 801003c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	4a6c      	ldr	r2, [pc, #432]	; (80101f4 <HAL_SPI_Init+0x200>)
 8010044:	4293      	cmp	r3, r2
 8010046:	d00c      	beq.n	8010062 <HAL_SPI_Init+0x6e>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	4a6a      	ldr	r2, [pc, #424]	; (80101f8 <HAL_SPI_Init+0x204>)
 801004e:	4293      	cmp	r3, r2
 8010050:	d007      	beq.n	8010062 <HAL_SPI_Init+0x6e>
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	4a69      	ldr	r2, [pc, #420]	; (80101fc <HAL_SPI_Init+0x208>)
 8010058:	4293      	cmp	r3, r2
 801005a:	d002      	beq.n	8010062 <HAL_SPI_Init+0x6e>
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	2b08      	cmp	r3, #8
 8010060:	d811      	bhi.n	8010086 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8010066:	4a63      	ldr	r2, [pc, #396]	; (80101f4 <HAL_SPI_Init+0x200>)
 8010068:	4293      	cmp	r3, r2
 801006a:	d009      	beq.n	8010080 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	4a61      	ldr	r2, [pc, #388]	; (80101f8 <HAL_SPI_Init+0x204>)
 8010072:	4293      	cmp	r3, r2
 8010074:	d004      	beq.n	8010080 <HAL_SPI_Init+0x8c>
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	4a60      	ldr	r2, [pc, #384]	; (80101fc <HAL_SPI_Init+0x208>)
 801007c:	4293      	cmp	r3, r2
 801007e:	d104      	bne.n	801008a <HAL_SPI_Init+0x96>
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	2b10      	cmp	r3, #16
 8010084:	d901      	bls.n	801008a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8010086:	2301      	movs	r3, #1
 8010088:	e0af      	b.n	80101ea <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010090:	b2db      	uxtb	r3, r3
 8010092:	2b00      	cmp	r3, #0
 8010094:	d106      	bne.n	80100a4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2200      	movs	r2, #0
 801009a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f7f8 fc94 	bl	80089cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2202      	movs	r2, #2
 80100a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	681a      	ldr	r2, [r3, #0]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	f022 0201 	bic.w	r2, r2, #1
 80100ba:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	689b      	ldr	r3, [r3, #8]
 80100c2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80100c6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	699b      	ldr	r3, [r3, #24]
 80100cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80100d0:	d119      	bne.n	8010106 <HAL_SPI_Init+0x112>
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	685b      	ldr	r3, [r3, #4]
 80100d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80100da:	d103      	bne.n	80100e4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d008      	beq.n	80100f6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d10c      	bne.n	8010106 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80100f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80100f4:	d107      	bne.n	8010106 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	681a      	ldr	r2, [r3, #0]
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8010104:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	69da      	ldr	r2, [r3, #28]
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801010e:	431a      	orrs	r2, r3
 8010110:	68bb      	ldr	r3, [r7, #8]
 8010112:	431a      	orrs	r2, r3
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010118:	ea42 0103 	orr.w	r1, r2, r3
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	68da      	ldr	r2, [r3, #12]
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	430a      	orrs	r2, r1
 8010126:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010130:	431a      	orrs	r2, r3
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010136:	431a      	orrs	r2, r3
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	699b      	ldr	r3, [r3, #24]
 801013c:	431a      	orrs	r2, r3
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	691b      	ldr	r3, [r3, #16]
 8010142:	431a      	orrs	r2, r3
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	695b      	ldr	r3, [r3, #20]
 8010148:	431a      	orrs	r2, r3
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6a1b      	ldr	r3, [r3, #32]
 801014e:	431a      	orrs	r2, r3
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	431a      	orrs	r2, r3
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801015a:	431a      	orrs	r2, r3
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	689b      	ldr	r3, [r3, #8]
 8010160:	431a      	orrs	r2, r3
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010166:	ea42 0103 	orr.w	r1, r2, r3
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	430a      	orrs	r2, r1
 8010174:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	685b      	ldr	r3, [r3, #4]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d113      	bne.n	80101a6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	689b      	ldr	r3, [r3, #8]
 8010184:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010190:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	689b      	ldr	r3, [r3, #8]
 8010198:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80101a4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	f022 0201 	bic.w	r2, r2, #1
 80101b4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	685b      	ldr	r3, [r3, #4]
 80101ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d00a      	beq.n	80101d8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	68db      	ldr	r3, [r3, #12]
 80101c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	430a      	orrs	r2, r1
 80101d6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	2200      	movs	r2, #0
 80101dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	2201      	movs	r2, #1
 80101e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80101e8:	2300      	movs	r3, #0
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	3710      	adds	r7, #16
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}
 80101f2:	bf00      	nop
 80101f4:	40013000 	.word	0x40013000
 80101f8:	40003800 	.word	0x40003800
 80101fc:	40003c00 	.word	0x40003c00

08010200 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8010200:	b480      	push	{r7}
 8010202:	b085      	sub	sp, #20
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801020c:	095b      	lsrs	r3, r3, #5
 801020e:	3301      	adds	r3, #1
 8010210:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	68db      	ldr	r3, [r3, #12]
 8010216:	3301      	adds	r3, #1
 8010218:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801021a:	68bb      	ldr	r3, [r7, #8]
 801021c:	3307      	adds	r3, #7
 801021e:	08db      	lsrs	r3, r3, #3
 8010220:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010222:	68bb      	ldr	r3, [r7, #8]
 8010224:	68fa      	ldr	r2, [r7, #12]
 8010226:	fb02 f303 	mul.w	r3, r2, r3
}
 801022a:	4618      	mov	r0, r3
 801022c:	3714      	adds	r7, #20
 801022e:	46bd      	mov	sp, r7
 8010230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010234:	4770      	bx	lr

08010236 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010236:	b580      	push	{r7, lr}
 8010238:	b082      	sub	sp, #8
 801023a:	af00      	add	r7, sp, #0
 801023c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d101      	bne.n	8010248 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010244:	2301      	movs	r3, #1
 8010246:	e049      	b.n	80102dc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801024e:	b2db      	uxtb	r3, r3
 8010250:	2b00      	cmp	r3, #0
 8010252:	d106      	bne.n	8010262 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	2200      	movs	r2, #0
 8010258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801025c:	6878      	ldr	r0, [r7, #4]
 801025e:	f7f9 faf9 	bl	8009854 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	2202      	movs	r2, #2
 8010266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681a      	ldr	r2, [r3, #0]
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	3304      	adds	r3, #4
 8010272:	4619      	mov	r1, r3
 8010274:	4610      	mov	r0, r2
 8010276:	f000 fbbf 	bl	80109f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2201      	movs	r2, #1
 801027e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	2201      	movs	r2, #1
 8010286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2201      	movs	r2, #1
 801028e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	2201      	movs	r2, #1
 8010296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2201      	movs	r2, #1
 801029e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2201      	movs	r2, #1
 80102a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2201      	movs	r2, #1
 80102ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2201      	movs	r2, #1
 80102b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2201      	movs	r2, #1
 80102be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2201      	movs	r2, #1
 80102c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2201      	movs	r2, #1
 80102ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2201      	movs	r2, #1
 80102d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80102da:	2300      	movs	r3, #0
}
 80102dc:	4618      	mov	r0, r3
 80102de:	3708      	adds	r7, #8
 80102e0:	46bd      	mov	sp, r7
 80102e2:	bd80      	pop	{r7, pc}

080102e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b082      	sub	sp, #8
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d101      	bne.n	80102f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80102f2:	2301      	movs	r3, #1
 80102f4:	e049      	b.n	801038a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80102fc:	b2db      	uxtb	r3, r3
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d106      	bne.n	8010310 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2200      	movs	r2, #0
 8010306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f000 f841 	bl	8010392 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2202      	movs	r2, #2
 8010314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681a      	ldr	r2, [r3, #0]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	3304      	adds	r3, #4
 8010320:	4619      	mov	r1, r3
 8010322:	4610      	mov	r0, r2
 8010324:	f000 fb68 	bl	80109f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2201      	movs	r2, #1
 801032c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2201      	movs	r2, #1
 8010334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	2201      	movs	r2, #1
 801033c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2201      	movs	r2, #1
 8010344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2201      	movs	r2, #1
 801034c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2201      	movs	r2, #1
 8010354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2201      	movs	r2, #1
 801035c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2201      	movs	r2, #1
 8010364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2201      	movs	r2, #1
 801036c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2201      	movs	r2, #1
 8010374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2201      	movs	r2, #1
 801037c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2201      	movs	r2, #1
 8010384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010388:	2300      	movs	r3, #0
}
 801038a:	4618      	mov	r0, r3
 801038c:	3708      	adds	r7, #8
 801038e:	46bd      	mov	sp, r7
 8010390:	bd80      	pop	{r7, pc}

08010392 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8010392:	b480      	push	{r7}
 8010394:	b083      	sub	sp, #12
 8010396:	af00      	add	r7, sp, #0
 8010398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801039a:	bf00      	nop
 801039c:	370c      	adds	r7, #12
 801039e:	46bd      	mov	sp, r7
 80103a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a4:	4770      	bx	lr
	...

080103a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b084      	sub	sp, #16
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d109      	bne.n	80103cc <HAL_TIM_PWM_Start+0x24>
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80103be:	b2db      	uxtb	r3, r3
 80103c0:	2b01      	cmp	r3, #1
 80103c2:	bf14      	ite	ne
 80103c4:	2301      	movne	r3, #1
 80103c6:	2300      	moveq	r3, #0
 80103c8:	b2db      	uxtb	r3, r3
 80103ca:	e03c      	b.n	8010446 <HAL_TIM_PWM_Start+0x9e>
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	2b04      	cmp	r3, #4
 80103d0:	d109      	bne.n	80103e6 <HAL_TIM_PWM_Start+0x3e>
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80103d8:	b2db      	uxtb	r3, r3
 80103da:	2b01      	cmp	r3, #1
 80103dc:	bf14      	ite	ne
 80103de:	2301      	movne	r3, #1
 80103e0:	2300      	moveq	r3, #0
 80103e2:	b2db      	uxtb	r3, r3
 80103e4:	e02f      	b.n	8010446 <HAL_TIM_PWM_Start+0x9e>
 80103e6:	683b      	ldr	r3, [r7, #0]
 80103e8:	2b08      	cmp	r3, #8
 80103ea:	d109      	bne.n	8010400 <HAL_TIM_PWM_Start+0x58>
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80103f2:	b2db      	uxtb	r3, r3
 80103f4:	2b01      	cmp	r3, #1
 80103f6:	bf14      	ite	ne
 80103f8:	2301      	movne	r3, #1
 80103fa:	2300      	moveq	r3, #0
 80103fc:	b2db      	uxtb	r3, r3
 80103fe:	e022      	b.n	8010446 <HAL_TIM_PWM_Start+0x9e>
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	2b0c      	cmp	r3, #12
 8010404:	d109      	bne.n	801041a <HAL_TIM_PWM_Start+0x72>
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801040c:	b2db      	uxtb	r3, r3
 801040e:	2b01      	cmp	r3, #1
 8010410:	bf14      	ite	ne
 8010412:	2301      	movne	r3, #1
 8010414:	2300      	moveq	r3, #0
 8010416:	b2db      	uxtb	r3, r3
 8010418:	e015      	b.n	8010446 <HAL_TIM_PWM_Start+0x9e>
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	2b10      	cmp	r3, #16
 801041e:	d109      	bne.n	8010434 <HAL_TIM_PWM_Start+0x8c>
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010426:	b2db      	uxtb	r3, r3
 8010428:	2b01      	cmp	r3, #1
 801042a:	bf14      	ite	ne
 801042c:	2301      	movne	r3, #1
 801042e:	2300      	moveq	r3, #0
 8010430:	b2db      	uxtb	r3, r3
 8010432:	e008      	b.n	8010446 <HAL_TIM_PWM_Start+0x9e>
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801043a:	b2db      	uxtb	r3, r3
 801043c:	2b01      	cmp	r3, #1
 801043e:	bf14      	ite	ne
 8010440:	2301      	movne	r3, #1
 8010442:	2300      	moveq	r3, #0
 8010444:	b2db      	uxtb	r3, r3
 8010446:	2b00      	cmp	r3, #0
 8010448:	d001      	beq.n	801044e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801044a:	2301      	movs	r3, #1
 801044c:	e0ab      	b.n	80105a6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d104      	bne.n	801045e <HAL_TIM_PWM_Start+0xb6>
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2202      	movs	r2, #2
 8010458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801045c:	e023      	b.n	80104a6 <HAL_TIM_PWM_Start+0xfe>
 801045e:	683b      	ldr	r3, [r7, #0]
 8010460:	2b04      	cmp	r3, #4
 8010462:	d104      	bne.n	801046e <HAL_TIM_PWM_Start+0xc6>
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2202      	movs	r2, #2
 8010468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801046c:	e01b      	b.n	80104a6 <HAL_TIM_PWM_Start+0xfe>
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	2b08      	cmp	r3, #8
 8010472:	d104      	bne.n	801047e <HAL_TIM_PWM_Start+0xd6>
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	2202      	movs	r2, #2
 8010478:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801047c:	e013      	b.n	80104a6 <HAL_TIM_PWM_Start+0xfe>
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	2b0c      	cmp	r3, #12
 8010482:	d104      	bne.n	801048e <HAL_TIM_PWM_Start+0xe6>
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2202      	movs	r2, #2
 8010488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801048c:	e00b      	b.n	80104a6 <HAL_TIM_PWM_Start+0xfe>
 801048e:	683b      	ldr	r3, [r7, #0]
 8010490:	2b10      	cmp	r3, #16
 8010492:	d104      	bne.n	801049e <HAL_TIM_PWM_Start+0xf6>
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2202      	movs	r2, #2
 8010498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801049c:	e003      	b.n	80104a6 <HAL_TIM_PWM_Start+0xfe>
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	2202      	movs	r2, #2
 80104a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	2201      	movs	r2, #1
 80104ac:	6839      	ldr	r1, [r7, #0]
 80104ae:	4618      	mov	r0, r3
 80104b0:	f000 febc 	bl	801122c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	4a3d      	ldr	r2, [pc, #244]	; (80105b0 <HAL_TIM_PWM_Start+0x208>)
 80104ba:	4293      	cmp	r3, r2
 80104bc:	d013      	beq.n	80104e6 <HAL_TIM_PWM_Start+0x13e>
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	4a3c      	ldr	r2, [pc, #240]	; (80105b4 <HAL_TIM_PWM_Start+0x20c>)
 80104c4:	4293      	cmp	r3, r2
 80104c6:	d00e      	beq.n	80104e6 <HAL_TIM_PWM_Start+0x13e>
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	4a3a      	ldr	r2, [pc, #232]	; (80105b8 <HAL_TIM_PWM_Start+0x210>)
 80104ce:	4293      	cmp	r3, r2
 80104d0:	d009      	beq.n	80104e6 <HAL_TIM_PWM_Start+0x13e>
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	4a39      	ldr	r2, [pc, #228]	; (80105bc <HAL_TIM_PWM_Start+0x214>)
 80104d8:	4293      	cmp	r3, r2
 80104da:	d004      	beq.n	80104e6 <HAL_TIM_PWM_Start+0x13e>
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	4a37      	ldr	r2, [pc, #220]	; (80105c0 <HAL_TIM_PWM_Start+0x218>)
 80104e2:	4293      	cmp	r3, r2
 80104e4:	d101      	bne.n	80104ea <HAL_TIM_PWM_Start+0x142>
 80104e6:	2301      	movs	r3, #1
 80104e8:	e000      	b.n	80104ec <HAL_TIM_PWM_Start+0x144>
 80104ea:	2300      	movs	r3, #0
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d007      	beq.n	8010500 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80104fe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	4a2a      	ldr	r2, [pc, #168]	; (80105b0 <HAL_TIM_PWM_Start+0x208>)
 8010506:	4293      	cmp	r3, r2
 8010508:	d02c      	beq.n	8010564 <HAL_TIM_PWM_Start+0x1bc>
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010512:	d027      	beq.n	8010564 <HAL_TIM_PWM_Start+0x1bc>
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	4a2a      	ldr	r2, [pc, #168]	; (80105c4 <HAL_TIM_PWM_Start+0x21c>)
 801051a:	4293      	cmp	r3, r2
 801051c:	d022      	beq.n	8010564 <HAL_TIM_PWM_Start+0x1bc>
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	4a29      	ldr	r2, [pc, #164]	; (80105c8 <HAL_TIM_PWM_Start+0x220>)
 8010524:	4293      	cmp	r3, r2
 8010526:	d01d      	beq.n	8010564 <HAL_TIM_PWM_Start+0x1bc>
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	4a27      	ldr	r2, [pc, #156]	; (80105cc <HAL_TIM_PWM_Start+0x224>)
 801052e:	4293      	cmp	r3, r2
 8010530:	d018      	beq.n	8010564 <HAL_TIM_PWM_Start+0x1bc>
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	4a1f      	ldr	r2, [pc, #124]	; (80105b4 <HAL_TIM_PWM_Start+0x20c>)
 8010538:	4293      	cmp	r3, r2
 801053a:	d013      	beq.n	8010564 <HAL_TIM_PWM_Start+0x1bc>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	4a23      	ldr	r2, [pc, #140]	; (80105d0 <HAL_TIM_PWM_Start+0x228>)
 8010542:	4293      	cmp	r3, r2
 8010544:	d00e      	beq.n	8010564 <HAL_TIM_PWM_Start+0x1bc>
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	4a1b      	ldr	r2, [pc, #108]	; (80105b8 <HAL_TIM_PWM_Start+0x210>)
 801054c:	4293      	cmp	r3, r2
 801054e:	d009      	beq.n	8010564 <HAL_TIM_PWM_Start+0x1bc>
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	4a1f      	ldr	r2, [pc, #124]	; (80105d4 <HAL_TIM_PWM_Start+0x22c>)
 8010556:	4293      	cmp	r3, r2
 8010558:	d004      	beq.n	8010564 <HAL_TIM_PWM_Start+0x1bc>
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	4a1e      	ldr	r2, [pc, #120]	; (80105d8 <HAL_TIM_PWM_Start+0x230>)
 8010560:	4293      	cmp	r3, r2
 8010562:	d115      	bne.n	8010590 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	689a      	ldr	r2, [r3, #8]
 801056a:	4b1c      	ldr	r3, [pc, #112]	; (80105dc <HAL_TIM_PWM_Start+0x234>)
 801056c:	4013      	ands	r3, r2
 801056e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	2b06      	cmp	r3, #6
 8010574:	d015      	beq.n	80105a2 <HAL_TIM_PWM_Start+0x1fa>
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801057c:	d011      	beq.n	80105a2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	681a      	ldr	r2, [r3, #0]
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	f042 0201 	orr.w	r2, r2, #1
 801058c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801058e:	e008      	b.n	80105a2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	681a      	ldr	r2, [r3, #0]
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	f042 0201 	orr.w	r2, r2, #1
 801059e:	601a      	str	r2, [r3, #0]
 80105a0:	e000      	b.n	80105a4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80105a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80105a4:	2300      	movs	r3, #0
}
 80105a6:	4618      	mov	r0, r3
 80105a8:	3710      	adds	r7, #16
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}
 80105ae:	bf00      	nop
 80105b0:	40010000 	.word	0x40010000
 80105b4:	40010400 	.word	0x40010400
 80105b8:	40014000 	.word	0x40014000
 80105bc:	40014400 	.word	0x40014400
 80105c0:	40014800 	.word	0x40014800
 80105c4:	40000400 	.word	0x40000400
 80105c8:	40000800 	.word	0x40000800
 80105cc:	40000c00 	.word	0x40000c00
 80105d0:	40001800 	.word	0x40001800
 80105d4:	4000e000 	.word	0x4000e000
 80105d8:	4000e400 	.word	0x4000e400
 80105dc:	00010007 	.word	0x00010007

080105e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b086      	sub	sp, #24
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	60f8      	str	r0, [r7, #12]
 80105e8:	60b9      	str	r1, [r7, #8]
 80105ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80105ec:	2300      	movs	r3, #0
 80105ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80105f6:	2b01      	cmp	r3, #1
 80105f8:	d101      	bne.n	80105fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80105fa:	2302      	movs	r3, #2
 80105fc:	e0ff      	b.n	80107fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	2201      	movs	r2, #1
 8010602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2b14      	cmp	r3, #20
 801060a:	f200 80f0 	bhi.w	80107ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 801060e:	a201      	add	r2, pc, #4	; (adr r2, 8010614 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010614:	08010669 	.word	0x08010669
 8010618:	080107ef 	.word	0x080107ef
 801061c:	080107ef 	.word	0x080107ef
 8010620:	080107ef 	.word	0x080107ef
 8010624:	080106a9 	.word	0x080106a9
 8010628:	080107ef 	.word	0x080107ef
 801062c:	080107ef 	.word	0x080107ef
 8010630:	080107ef 	.word	0x080107ef
 8010634:	080106eb 	.word	0x080106eb
 8010638:	080107ef 	.word	0x080107ef
 801063c:	080107ef 	.word	0x080107ef
 8010640:	080107ef 	.word	0x080107ef
 8010644:	0801072b 	.word	0x0801072b
 8010648:	080107ef 	.word	0x080107ef
 801064c:	080107ef 	.word	0x080107ef
 8010650:	080107ef 	.word	0x080107ef
 8010654:	0801076d 	.word	0x0801076d
 8010658:	080107ef 	.word	0x080107ef
 801065c:	080107ef 	.word	0x080107ef
 8010660:	080107ef 	.word	0x080107ef
 8010664:	080107ad 	.word	0x080107ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	68b9      	ldr	r1, [r7, #8]
 801066e:	4618      	mov	r0, r3
 8010670:	f000 fa68 	bl	8010b44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	699a      	ldr	r2, [r3, #24]
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	f042 0208 	orr.w	r2, r2, #8
 8010682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	699a      	ldr	r2, [r3, #24]
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	f022 0204 	bic.w	r2, r2, #4
 8010692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	6999      	ldr	r1, [r3, #24]
 801069a:	68bb      	ldr	r3, [r7, #8]
 801069c:	691a      	ldr	r2, [r3, #16]
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	430a      	orrs	r2, r1
 80106a4:	619a      	str	r2, [r3, #24]
      break;
 80106a6:	e0a5      	b.n	80107f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	68b9      	ldr	r1, [r7, #8]
 80106ae:	4618      	mov	r0, r3
 80106b0:	f000 fad8 	bl	8010c64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	699a      	ldr	r2, [r3, #24]
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80106c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	699a      	ldr	r2, [r3, #24]
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80106d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	6999      	ldr	r1, [r3, #24]
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	691b      	ldr	r3, [r3, #16]
 80106de:	021a      	lsls	r2, r3, #8
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	430a      	orrs	r2, r1
 80106e6:	619a      	str	r2, [r3, #24]
      break;
 80106e8:	e084      	b.n	80107f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	68b9      	ldr	r1, [r7, #8]
 80106f0:	4618      	mov	r0, r3
 80106f2:	f000 fb41 	bl	8010d78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	69da      	ldr	r2, [r3, #28]
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	f042 0208 	orr.w	r2, r2, #8
 8010704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	69da      	ldr	r2, [r3, #28]
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	f022 0204 	bic.w	r2, r2, #4
 8010714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	69d9      	ldr	r1, [r3, #28]
 801071c:	68bb      	ldr	r3, [r7, #8]
 801071e:	691a      	ldr	r2, [r3, #16]
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	430a      	orrs	r2, r1
 8010726:	61da      	str	r2, [r3, #28]
      break;
 8010728:	e064      	b.n	80107f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	68b9      	ldr	r1, [r7, #8]
 8010730:	4618      	mov	r0, r3
 8010732:	f000 fba9 	bl	8010e88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	69da      	ldr	r2, [r3, #28]
 801073c:	68fb      	ldr	r3, [r7, #12]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	69da      	ldr	r2, [r3, #28]
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	69d9      	ldr	r1, [r3, #28]
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	691b      	ldr	r3, [r3, #16]
 8010760:	021a      	lsls	r2, r3, #8
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	430a      	orrs	r2, r1
 8010768:	61da      	str	r2, [r3, #28]
      break;
 801076a:	e043      	b.n	80107f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	68b9      	ldr	r1, [r7, #8]
 8010772:	4618      	mov	r0, r3
 8010774:	f000 fbf2 	bl	8010f5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	f042 0208 	orr.w	r2, r2, #8
 8010786:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	f022 0204 	bic.w	r2, r2, #4
 8010796:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	691a      	ldr	r2, [r3, #16]
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	430a      	orrs	r2, r1
 80107a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80107aa:	e023      	b.n	80107f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	68b9      	ldr	r1, [r7, #8]
 80107b2:	4618      	mov	r0, r3
 80107b4:	f000 fc36 	bl	8011024 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80107c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80107d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80107de:	68bb      	ldr	r3, [r7, #8]
 80107e0:	691b      	ldr	r3, [r3, #16]
 80107e2:	021a      	lsls	r2, r3, #8
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	430a      	orrs	r2, r1
 80107ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80107ec:	e002      	b.n	80107f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80107ee:	2301      	movs	r3, #1
 80107f0:	75fb      	strb	r3, [r7, #23]
      break;
 80107f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	2200      	movs	r2, #0
 80107f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80107fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80107fe:	4618      	mov	r0, r3
 8010800:	3718      	adds	r7, #24
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}
 8010806:	bf00      	nop

08010808 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b084      	sub	sp, #16
 801080c:	af00      	add	r7, sp, #0
 801080e:	6078      	str	r0, [r7, #4]
 8010810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010812:	2300      	movs	r3, #0
 8010814:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801081c:	2b01      	cmp	r3, #1
 801081e:	d101      	bne.n	8010824 <HAL_TIM_ConfigClockSource+0x1c>
 8010820:	2302      	movs	r3, #2
 8010822:	e0dc      	b.n	80109de <HAL_TIM_ConfigClockSource+0x1d6>
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2201      	movs	r2, #1
 8010828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2202      	movs	r2, #2
 8010830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	689b      	ldr	r3, [r3, #8]
 801083a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801083c:	68ba      	ldr	r2, [r7, #8]
 801083e:	4b6a      	ldr	r3, [pc, #424]	; (80109e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8010840:	4013      	ands	r3, r2
 8010842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801084a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	68ba      	ldr	r2, [r7, #8]
 8010852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	4a64      	ldr	r2, [pc, #400]	; (80109ec <HAL_TIM_ConfigClockSource+0x1e4>)
 801085a:	4293      	cmp	r3, r2
 801085c:	f000 80a9 	beq.w	80109b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8010860:	4a62      	ldr	r2, [pc, #392]	; (80109ec <HAL_TIM_ConfigClockSource+0x1e4>)
 8010862:	4293      	cmp	r3, r2
 8010864:	f200 80ae 	bhi.w	80109c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8010868:	4a61      	ldr	r2, [pc, #388]	; (80109f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 801086a:	4293      	cmp	r3, r2
 801086c:	f000 80a1 	beq.w	80109b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8010870:	4a5f      	ldr	r2, [pc, #380]	; (80109f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8010872:	4293      	cmp	r3, r2
 8010874:	f200 80a6 	bhi.w	80109c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8010878:	4a5e      	ldr	r2, [pc, #376]	; (80109f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 801087a:	4293      	cmp	r3, r2
 801087c:	f000 8099 	beq.w	80109b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8010880:	4a5c      	ldr	r2, [pc, #368]	; (80109f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8010882:	4293      	cmp	r3, r2
 8010884:	f200 809e 	bhi.w	80109c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8010888:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801088c:	f000 8091 	beq.w	80109b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8010890:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010894:	f200 8096 	bhi.w	80109c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8010898:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801089c:	f000 8089 	beq.w	80109b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80108a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80108a4:	f200 808e 	bhi.w	80109c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80108a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80108ac:	d03e      	beq.n	801092c <HAL_TIM_ConfigClockSource+0x124>
 80108ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80108b2:	f200 8087 	bhi.w	80109c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80108b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80108ba:	f000 8086 	beq.w	80109ca <HAL_TIM_ConfigClockSource+0x1c2>
 80108be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80108c2:	d87f      	bhi.n	80109c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80108c4:	2b70      	cmp	r3, #112	; 0x70
 80108c6:	d01a      	beq.n	80108fe <HAL_TIM_ConfigClockSource+0xf6>
 80108c8:	2b70      	cmp	r3, #112	; 0x70
 80108ca:	d87b      	bhi.n	80109c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80108cc:	2b60      	cmp	r3, #96	; 0x60
 80108ce:	d050      	beq.n	8010972 <HAL_TIM_ConfigClockSource+0x16a>
 80108d0:	2b60      	cmp	r3, #96	; 0x60
 80108d2:	d877      	bhi.n	80109c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80108d4:	2b50      	cmp	r3, #80	; 0x50
 80108d6:	d03c      	beq.n	8010952 <HAL_TIM_ConfigClockSource+0x14a>
 80108d8:	2b50      	cmp	r3, #80	; 0x50
 80108da:	d873      	bhi.n	80109c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80108dc:	2b40      	cmp	r3, #64	; 0x40
 80108de:	d058      	beq.n	8010992 <HAL_TIM_ConfigClockSource+0x18a>
 80108e0:	2b40      	cmp	r3, #64	; 0x40
 80108e2:	d86f      	bhi.n	80109c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80108e4:	2b30      	cmp	r3, #48	; 0x30
 80108e6:	d064      	beq.n	80109b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80108e8:	2b30      	cmp	r3, #48	; 0x30
 80108ea:	d86b      	bhi.n	80109c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80108ec:	2b20      	cmp	r3, #32
 80108ee:	d060      	beq.n	80109b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80108f0:	2b20      	cmp	r3, #32
 80108f2:	d867      	bhi.n	80109c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d05c      	beq.n	80109b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80108f8:	2b10      	cmp	r3, #16
 80108fa:	d05a      	beq.n	80109b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80108fc:	e062      	b.n	80109c4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6818      	ldr	r0, [r3, #0]
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	6899      	ldr	r1, [r3, #8]
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	685a      	ldr	r2, [r3, #4]
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	68db      	ldr	r3, [r3, #12]
 801090e:	f000 fc6d 	bl	80111ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	689b      	ldr	r3, [r3, #8]
 8010918:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010920:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	68ba      	ldr	r2, [r7, #8]
 8010928:	609a      	str	r2, [r3, #8]
      break;
 801092a:	e04f      	b.n	80109cc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	6818      	ldr	r0, [r3, #0]
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	6899      	ldr	r1, [r3, #8]
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	685a      	ldr	r2, [r3, #4]
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	68db      	ldr	r3, [r3, #12]
 801093c:	f000 fc56 	bl	80111ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	689a      	ldr	r2, [r3, #8]
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801094e:	609a      	str	r2, [r3, #8]
      break;
 8010950:	e03c      	b.n	80109cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	6818      	ldr	r0, [r3, #0]
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	6859      	ldr	r1, [r3, #4]
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	68db      	ldr	r3, [r3, #12]
 801095e:	461a      	mov	r2, r3
 8010960:	f000 fbc6 	bl	80110f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	2150      	movs	r1, #80	; 0x50
 801096a:	4618      	mov	r0, r3
 801096c:	f000 fc20 	bl	80111b0 <TIM_ITRx_SetConfig>
      break;
 8010970:	e02c      	b.n	80109cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6818      	ldr	r0, [r3, #0]
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	6859      	ldr	r1, [r3, #4]
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	68db      	ldr	r3, [r3, #12]
 801097e:	461a      	mov	r2, r3
 8010980:	f000 fbe5 	bl	801114e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	2160      	movs	r1, #96	; 0x60
 801098a:	4618      	mov	r0, r3
 801098c:	f000 fc10 	bl	80111b0 <TIM_ITRx_SetConfig>
      break;
 8010990:	e01c      	b.n	80109cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	6818      	ldr	r0, [r3, #0]
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	6859      	ldr	r1, [r3, #4]
 801099a:	683b      	ldr	r3, [r7, #0]
 801099c:	68db      	ldr	r3, [r3, #12]
 801099e:	461a      	mov	r2, r3
 80109a0:	f000 fba6 	bl	80110f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	2140      	movs	r1, #64	; 0x40
 80109aa:	4618      	mov	r0, r3
 80109ac:	f000 fc00 	bl	80111b0 <TIM_ITRx_SetConfig>
      break;
 80109b0:	e00c      	b.n	80109cc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681a      	ldr	r2, [r3, #0]
 80109b6:	683b      	ldr	r3, [r7, #0]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	4619      	mov	r1, r3
 80109bc:	4610      	mov	r0, r2
 80109be:	f000 fbf7 	bl	80111b0 <TIM_ITRx_SetConfig>
      break;
 80109c2:	e003      	b.n	80109cc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80109c4:	2301      	movs	r3, #1
 80109c6:	73fb      	strb	r3, [r7, #15]
      break;
 80109c8:	e000      	b.n	80109cc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80109ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2201      	movs	r2, #1
 80109d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2200      	movs	r2, #0
 80109d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80109dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80109de:	4618      	mov	r0, r3
 80109e0:	3710      	adds	r7, #16
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}
 80109e6:	bf00      	nop
 80109e8:	ffceff88 	.word	0xffceff88
 80109ec:	00100040 	.word	0x00100040
 80109f0:	00100030 	.word	0x00100030
 80109f4:	00100020 	.word	0x00100020

080109f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80109f8:	b480      	push	{r7}
 80109fa:	b085      	sub	sp, #20
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
 8010a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	4a44      	ldr	r2, [pc, #272]	; (8010b1c <TIM_Base_SetConfig+0x124>)
 8010a0c:	4293      	cmp	r3, r2
 8010a0e:	d013      	beq.n	8010a38 <TIM_Base_SetConfig+0x40>
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a16:	d00f      	beq.n	8010a38 <TIM_Base_SetConfig+0x40>
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	4a41      	ldr	r2, [pc, #260]	; (8010b20 <TIM_Base_SetConfig+0x128>)
 8010a1c:	4293      	cmp	r3, r2
 8010a1e:	d00b      	beq.n	8010a38 <TIM_Base_SetConfig+0x40>
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	4a40      	ldr	r2, [pc, #256]	; (8010b24 <TIM_Base_SetConfig+0x12c>)
 8010a24:	4293      	cmp	r3, r2
 8010a26:	d007      	beq.n	8010a38 <TIM_Base_SetConfig+0x40>
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	4a3f      	ldr	r2, [pc, #252]	; (8010b28 <TIM_Base_SetConfig+0x130>)
 8010a2c:	4293      	cmp	r3, r2
 8010a2e:	d003      	beq.n	8010a38 <TIM_Base_SetConfig+0x40>
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	4a3e      	ldr	r2, [pc, #248]	; (8010b2c <TIM_Base_SetConfig+0x134>)
 8010a34:	4293      	cmp	r3, r2
 8010a36:	d108      	bne.n	8010a4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	685b      	ldr	r3, [r3, #4]
 8010a44:	68fa      	ldr	r2, [r7, #12]
 8010a46:	4313      	orrs	r3, r2
 8010a48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	4a33      	ldr	r2, [pc, #204]	; (8010b1c <TIM_Base_SetConfig+0x124>)
 8010a4e:	4293      	cmp	r3, r2
 8010a50:	d027      	beq.n	8010aa2 <TIM_Base_SetConfig+0xaa>
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a58:	d023      	beq.n	8010aa2 <TIM_Base_SetConfig+0xaa>
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	4a30      	ldr	r2, [pc, #192]	; (8010b20 <TIM_Base_SetConfig+0x128>)
 8010a5e:	4293      	cmp	r3, r2
 8010a60:	d01f      	beq.n	8010aa2 <TIM_Base_SetConfig+0xaa>
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	4a2f      	ldr	r2, [pc, #188]	; (8010b24 <TIM_Base_SetConfig+0x12c>)
 8010a66:	4293      	cmp	r3, r2
 8010a68:	d01b      	beq.n	8010aa2 <TIM_Base_SetConfig+0xaa>
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	4a2e      	ldr	r2, [pc, #184]	; (8010b28 <TIM_Base_SetConfig+0x130>)
 8010a6e:	4293      	cmp	r3, r2
 8010a70:	d017      	beq.n	8010aa2 <TIM_Base_SetConfig+0xaa>
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	4a2d      	ldr	r2, [pc, #180]	; (8010b2c <TIM_Base_SetConfig+0x134>)
 8010a76:	4293      	cmp	r3, r2
 8010a78:	d013      	beq.n	8010aa2 <TIM_Base_SetConfig+0xaa>
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	4a2c      	ldr	r2, [pc, #176]	; (8010b30 <TIM_Base_SetConfig+0x138>)
 8010a7e:	4293      	cmp	r3, r2
 8010a80:	d00f      	beq.n	8010aa2 <TIM_Base_SetConfig+0xaa>
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	4a2b      	ldr	r2, [pc, #172]	; (8010b34 <TIM_Base_SetConfig+0x13c>)
 8010a86:	4293      	cmp	r3, r2
 8010a88:	d00b      	beq.n	8010aa2 <TIM_Base_SetConfig+0xaa>
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	4a2a      	ldr	r2, [pc, #168]	; (8010b38 <TIM_Base_SetConfig+0x140>)
 8010a8e:	4293      	cmp	r3, r2
 8010a90:	d007      	beq.n	8010aa2 <TIM_Base_SetConfig+0xaa>
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	4a29      	ldr	r2, [pc, #164]	; (8010b3c <TIM_Base_SetConfig+0x144>)
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d003      	beq.n	8010aa2 <TIM_Base_SetConfig+0xaa>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	4a28      	ldr	r2, [pc, #160]	; (8010b40 <TIM_Base_SetConfig+0x148>)
 8010a9e:	4293      	cmp	r3, r2
 8010aa0:	d108      	bne.n	8010ab4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010aaa:	683b      	ldr	r3, [r7, #0]
 8010aac:	68db      	ldr	r3, [r3, #12]
 8010aae:	68fa      	ldr	r2, [r7, #12]
 8010ab0:	4313      	orrs	r3, r2
 8010ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	695b      	ldr	r3, [r3, #20]
 8010abe:	4313      	orrs	r3, r2
 8010ac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	68fa      	ldr	r2, [r7, #12]
 8010ac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010ac8:	683b      	ldr	r3, [r7, #0]
 8010aca:	689a      	ldr	r2, [r3, #8]
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	681a      	ldr	r2, [r3, #0]
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	4a10      	ldr	r2, [pc, #64]	; (8010b1c <TIM_Base_SetConfig+0x124>)
 8010adc:	4293      	cmp	r3, r2
 8010ade:	d00f      	beq.n	8010b00 <TIM_Base_SetConfig+0x108>
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	4a12      	ldr	r2, [pc, #72]	; (8010b2c <TIM_Base_SetConfig+0x134>)
 8010ae4:	4293      	cmp	r3, r2
 8010ae6:	d00b      	beq.n	8010b00 <TIM_Base_SetConfig+0x108>
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	4a11      	ldr	r2, [pc, #68]	; (8010b30 <TIM_Base_SetConfig+0x138>)
 8010aec:	4293      	cmp	r3, r2
 8010aee:	d007      	beq.n	8010b00 <TIM_Base_SetConfig+0x108>
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	4a10      	ldr	r2, [pc, #64]	; (8010b34 <TIM_Base_SetConfig+0x13c>)
 8010af4:	4293      	cmp	r3, r2
 8010af6:	d003      	beq.n	8010b00 <TIM_Base_SetConfig+0x108>
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	4a0f      	ldr	r2, [pc, #60]	; (8010b38 <TIM_Base_SetConfig+0x140>)
 8010afc:	4293      	cmp	r3, r2
 8010afe:	d103      	bne.n	8010b08 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	691a      	ldr	r2, [r3, #16]
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2201      	movs	r2, #1
 8010b0c:	615a      	str	r2, [r3, #20]
}
 8010b0e:	bf00      	nop
 8010b10:	3714      	adds	r7, #20
 8010b12:	46bd      	mov	sp, r7
 8010b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b18:	4770      	bx	lr
 8010b1a:	bf00      	nop
 8010b1c:	40010000 	.word	0x40010000
 8010b20:	40000400 	.word	0x40000400
 8010b24:	40000800 	.word	0x40000800
 8010b28:	40000c00 	.word	0x40000c00
 8010b2c:	40010400 	.word	0x40010400
 8010b30:	40014000 	.word	0x40014000
 8010b34:	40014400 	.word	0x40014400
 8010b38:	40014800 	.word	0x40014800
 8010b3c:	4000e000 	.word	0x4000e000
 8010b40:	4000e400 	.word	0x4000e400

08010b44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010b44:	b480      	push	{r7}
 8010b46:	b087      	sub	sp, #28
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6a1b      	ldr	r3, [r3, #32]
 8010b52:	f023 0201 	bic.w	r2, r3, #1
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	6a1b      	ldr	r3, [r3, #32]
 8010b5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	685b      	ldr	r3, [r3, #4]
 8010b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	699b      	ldr	r3, [r3, #24]
 8010b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010b6c:	68fa      	ldr	r2, [r7, #12]
 8010b6e:	4b37      	ldr	r3, [pc, #220]	; (8010c4c <TIM_OC1_SetConfig+0x108>)
 8010b70:	4013      	ands	r3, r2
 8010b72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	f023 0303 	bic.w	r3, r3, #3
 8010b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	68fa      	ldr	r2, [r7, #12]
 8010b82:	4313      	orrs	r3, r2
 8010b84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010b86:	697b      	ldr	r3, [r7, #20]
 8010b88:	f023 0302 	bic.w	r3, r3, #2
 8010b8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	689b      	ldr	r3, [r3, #8]
 8010b92:	697a      	ldr	r2, [r7, #20]
 8010b94:	4313      	orrs	r3, r2
 8010b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	4a2d      	ldr	r2, [pc, #180]	; (8010c50 <TIM_OC1_SetConfig+0x10c>)
 8010b9c:	4293      	cmp	r3, r2
 8010b9e:	d00f      	beq.n	8010bc0 <TIM_OC1_SetConfig+0x7c>
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	4a2c      	ldr	r2, [pc, #176]	; (8010c54 <TIM_OC1_SetConfig+0x110>)
 8010ba4:	4293      	cmp	r3, r2
 8010ba6:	d00b      	beq.n	8010bc0 <TIM_OC1_SetConfig+0x7c>
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	4a2b      	ldr	r2, [pc, #172]	; (8010c58 <TIM_OC1_SetConfig+0x114>)
 8010bac:	4293      	cmp	r3, r2
 8010bae:	d007      	beq.n	8010bc0 <TIM_OC1_SetConfig+0x7c>
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	4a2a      	ldr	r2, [pc, #168]	; (8010c5c <TIM_OC1_SetConfig+0x118>)
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	d003      	beq.n	8010bc0 <TIM_OC1_SetConfig+0x7c>
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	4a29      	ldr	r2, [pc, #164]	; (8010c60 <TIM_OC1_SetConfig+0x11c>)
 8010bbc:	4293      	cmp	r3, r2
 8010bbe:	d10c      	bne.n	8010bda <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	f023 0308 	bic.w	r3, r3, #8
 8010bc6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010bc8:	683b      	ldr	r3, [r7, #0]
 8010bca:	68db      	ldr	r3, [r3, #12]
 8010bcc:	697a      	ldr	r2, [r7, #20]
 8010bce:	4313      	orrs	r3, r2
 8010bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	f023 0304 	bic.w	r3, r3, #4
 8010bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	4a1c      	ldr	r2, [pc, #112]	; (8010c50 <TIM_OC1_SetConfig+0x10c>)
 8010bde:	4293      	cmp	r3, r2
 8010be0:	d00f      	beq.n	8010c02 <TIM_OC1_SetConfig+0xbe>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	4a1b      	ldr	r2, [pc, #108]	; (8010c54 <TIM_OC1_SetConfig+0x110>)
 8010be6:	4293      	cmp	r3, r2
 8010be8:	d00b      	beq.n	8010c02 <TIM_OC1_SetConfig+0xbe>
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	4a1a      	ldr	r2, [pc, #104]	; (8010c58 <TIM_OC1_SetConfig+0x114>)
 8010bee:	4293      	cmp	r3, r2
 8010bf0:	d007      	beq.n	8010c02 <TIM_OC1_SetConfig+0xbe>
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	4a19      	ldr	r2, [pc, #100]	; (8010c5c <TIM_OC1_SetConfig+0x118>)
 8010bf6:	4293      	cmp	r3, r2
 8010bf8:	d003      	beq.n	8010c02 <TIM_OC1_SetConfig+0xbe>
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	4a18      	ldr	r2, [pc, #96]	; (8010c60 <TIM_OC1_SetConfig+0x11c>)
 8010bfe:	4293      	cmp	r3, r2
 8010c00:	d111      	bne.n	8010c26 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010c02:	693b      	ldr	r3, [r7, #16]
 8010c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010c0a:	693b      	ldr	r3, [r7, #16]
 8010c0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010c12:	683b      	ldr	r3, [r7, #0]
 8010c14:	695b      	ldr	r3, [r3, #20]
 8010c16:	693a      	ldr	r2, [r7, #16]
 8010c18:	4313      	orrs	r3, r2
 8010c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010c1c:	683b      	ldr	r3, [r7, #0]
 8010c1e:	699b      	ldr	r3, [r3, #24]
 8010c20:	693a      	ldr	r2, [r7, #16]
 8010c22:	4313      	orrs	r3, r2
 8010c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	693a      	ldr	r2, [r7, #16]
 8010c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	68fa      	ldr	r2, [r7, #12]
 8010c30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	685a      	ldr	r2, [r3, #4]
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	697a      	ldr	r2, [r7, #20]
 8010c3e:	621a      	str	r2, [r3, #32]
}
 8010c40:	bf00      	nop
 8010c42:	371c      	adds	r7, #28
 8010c44:	46bd      	mov	sp, r7
 8010c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4a:	4770      	bx	lr
 8010c4c:	fffeff8f 	.word	0xfffeff8f
 8010c50:	40010000 	.word	0x40010000
 8010c54:	40010400 	.word	0x40010400
 8010c58:	40014000 	.word	0x40014000
 8010c5c:	40014400 	.word	0x40014400
 8010c60:	40014800 	.word	0x40014800

08010c64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010c64:	b480      	push	{r7}
 8010c66:	b087      	sub	sp, #28
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
 8010c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	6a1b      	ldr	r3, [r3, #32]
 8010c72:	f023 0210 	bic.w	r2, r3, #16
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	6a1b      	ldr	r3, [r3, #32]
 8010c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	685b      	ldr	r3, [r3, #4]
 8010c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	699b      	ldr	r3, [r3, #24]
 8010c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010c8c:	68fa      	ldr	r2, [r7, #12]
 8010c8e:	4b34      	ldr	r3, [pc, #208]	; (8010d60 <TIM_OC2_SetConfig+0xfc>)
 8010c90:	4013      	ands	r3, r2
 8010c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010c9c:	683b      	ldr	r3, [r7, #0]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	021b      	lsls	r3, r3, #8
 8010ca2:	68fa      	ldr	r2, [r7, #12]
 8010ca4:	4313      	orrs	r3, r2
 8010ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	f023 0320 	bic.w	r3, r3, #32
 8010cae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	689b      	ldr	r3, [r3, #8]
 8010cb4:	011b      	lsls	r3, r3, #4
 8010cb6:	697a      	ldr	r2, [r7, #20]
 8010cb8:	4313      	orrs	r3, r2
 8010cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	4a29      	ldr	r2, [pc, #164]	; (8010d64 <TIM_OC2_SetConfig+0x100>)
 8010cc0:	4293      	cmp	r3, r2
 8010cc2:	d003      	beq.n	8010ccc <TIM_OC2_SetConfig+0x68>
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	4a28      	ldr	r2, [pc, #160]	; (8010d68 <TIM_OC2_SetConfig+0x104>)
 8010cc8:	4293      	cmp	r3, r2
 8010cca:	d10d      	bne.n	8010ce8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010cd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	68db      	ldr	r3, [r3, #12]
 8010cd8:	011b      	lsls	r3, r3, #4
 8010cda:	697a      	ldr	r2, [r7, #20]
 8010cdc:	4313      	orrs	r3, r2
 8010cde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010ce0:	697b      	ldr	r3, [r7, #20]
 8010ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ce6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	4a1e      	ldr	r2, [pc, #120]	; (8010d64 <TIM_OC2_SetConfig+0x100>)
 8010cec:	4293      	cmp	r3, r2
 8010cee:	d00f      	beq.n	8010d10 <TIM_OC2_SetConfig+0xac>
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	4a1d      	ldr	r2, [pc, #116]	; (8010d68 <TIM_OC2_SetConfig+0x104>)
 8010cf4:	4293      	cmp	r3, r2
 8010cf6:	d00b      	beq.n	8010d10 <TIM_OC2_SetConfig+0xac>
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	4a1c      	ldr	r2, [pc, #112]	; (8010d6c <TIM_OC2_SetConfig+0x108>)
 8010cfc:	4293      	cmp	r3, r2
 8010cfe:	d007      	beq.n	8010d10 <TIM_OC2_SetConfig+0xac>
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	4a1b      	ldr	r2, [pc, #108]	; (8010d70 <TIM_OC2_SetConfig+0x10c>)
 8010d04:	4293      	cmp	r3, r2
 8010d06:	d003      	beq.n	8010d10 <TIM_OC2_SetConfig+0xac>
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	4a1a      	ldr	r2, [pc, #104]	; (8010d74 <TIM_OC2_SetConfig+0x110>)
 8010d0c:	4293      	cmp	r3, r2
 8010d0e:	d113      	bne.n	8010d38 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010d10:	693b      	ldr	r3, [r7, #16]
 8010d12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010d16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010d18:	693b      	ldr	r3, [r7, #16]
 8010d1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010d1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	695b      	ldr	r3, [r3, #20]
 8010d24:	009b      	lsls	r3, r3, #2
 8010d26:	693a      	ldr	r2, [r7, #16]
 8010d28:	4313      	orrs	r3, r2
 8010d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	699b      	ldr	r3, [r3, #24]
 8010d30:	009b      	lsls	r3, r3, #2
 8010d32:	693a      	ldr	r2, [r7, #16]
 8010d34:	4313      	orrs	r3, r2
 8010d36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	693a      	ldr	r2, [r7, #16]
 8010d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	68fa      	ldr	r2, [r7, #12]
 8010d42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010d44:	683b      	ldr	r3, [r7, #0]
 8010d46:	685a      	ldr	r2, [r3, #4]
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	697a      	ldr	r2, [r7, #20]
 8010d50:	621a      	str	r2, [r3, #32]
}
 8010d52:	bf00      	nop
 8010d54:	371c      	adds	r7, #28
 8010d56:	46bd      	mov	sp, r7
 8010d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5c:	4770      	bx	lr
 8010d5e:	bf00      	nop
 8010d60:	feff8fff 	.word	0xfeff8fff
 8010d64:	40010000 	.word	0x40010000
 8010d68:	40010400 	.word	0x40010400
 8010d6c:	40014000 	.word	0x40014000
 8010d70:	40014400 	.word	0x40014400
 8010d74:	40014800 	.word	0x40014800

08010d78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010d78:	b480      	push	{r7}
 8010d7a:	b087      	sub	sp, #28
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
 8010d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	6a1b      	ldr	r3, [r3, #32]
 8010d86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	6a1b      	ldr	r3, [r3, #32]
 8010d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	685b      	ldr	r3, [r3, #4]
 8010d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	69db      	ldr	r3, [r3, #28]
 8010d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010da0:	68fa      	ldr	r2, [r7, #12]
 8010da2:	4b33      	ldr	r3, [pc, #204]	; (8010e70 <TIM_OC3_SetConfig+0xf8>)
 8010da4:	4013      	ands	r3, r2
 8010da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	f023 0303 	bic.w	r3, r3, #3
 8010dae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010db0:	683b      	ldr	r3, [r7, #0]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	68fa      	ldr	r2, [r7, #12]
 8010db6:	4313      	orrs	r3, r2
 8010db8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010dc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010dc2:	683b      	ldr	r3, [r7, #0]
 8010dc4:	689b      	ldr	r3, [r3, #8]
 8010dc6:	021b      	lsls	r3, r3, #8
 8010dc8:	697a      	ldr	r2, [r7, #20]
 8010dca:	4313      	orrs	r3, r2
 8010dcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	4a28      	ldr	r2, [pc, #160]	; (8010e74 <TIM_OC3_SetConfig+0xfc>)
 8010dd2:	4293      	cmp	r3, r2
 8010dd4:	d003      	beq.n	8010dde <TIM_OC3_SetConfig+0x66>
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	4a27      	ldr	r2, [pc, #156]	; (8010e78 <TIM_OC3_SetConfig+0x100>)
 8010dda:	4293      	cmp	r3, r2
 8010ddc:	d10d      	bne.n	8010dfa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010de4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	68db      	ldr	r3, [r3, #12]
 8010dea:	021b      	lsls	r3, r3, #8
 8010dec:	697a      	ldr	r2, [r7, #20]
 8010dee:	4313      	orrs	r3, r2
 8010df0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010df2:	697b      	ldr	r3, [r7, #20]
 8010df4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010df8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	4a1d      	ldr	r2, [pc, #116]	; (8010e74 <TIM_OC3_SetConfig+0xfc>)
 8010dfe:	4293      	cmp	r3, r2
 8010e00:	d00f      	beq.n	8010e22 <TIM_OC3_SetConfig+0xaa>
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	4a1c      	ldr	r2, [pc, #112]	; (8010e78 <TIM_OC3_SetConfig+0x100>)
 8010e06:	4293      	cmp	r3, r2
 8010e08:	d00b      	beq.n	8010e22 <TIM_OC3_SetConfig+0xaa>
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	4a1b      	ldr	r2, [pc, #108]	; (8010e7c <TIM_OC3_SetConfig+0x104>)
 8010e0e:	4293      	cmp	r3, r2
 8010e10:	d007      	beq.n	8010e22 <TIM_OC3_SetConfig+0xaa>
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	4a1a      	ldr	r2, [pc, #104]	; (8010e80 <TIM_OC3_SetConfig+0x108>)
 8010e16:	4293      	cmp	r3, r2
 8010e18:	d003      	beq.n	8010e22 <TIM_OC3_SetConfig+0xaa>
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	4a19      	ldr	r2, [pc, #100]	; (8010e84 <TIM_OC3_SetConfig+0x10c>)
 8010e1e:	4293      	cmp	r3, r2
 8010e20:	d113      	bne.n	8010e4a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010e22:	693b      	ldr	r3, [r7, #16]
 8010e24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010e2a:	693b      	ldr	r3, [r7, #16]
 8010e2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	695b      	ldr	r3, [r3, #20]
 8010e36:	011b      	lsls	r3, r3, #4
 8010e38:	693a      	ldr	r2, [r7, #16]
 8010e3a:	4313      	orrs	r3, r2
 8010e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010e3e:	683b      	ldr	r3, [r7, #0]
 8010e40:	699b      	ldr	r3, [r3, #24]
 8010e42:	011b      	lsls	r3, r3, #4
 8010e44:	693a      	ldr	r2, [r7, #16]
 8010e46:	4313      	orrs	r3, r2
 8010e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	693a      	ldr	r2, [r7, #16]
 8010e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	68fa      	ldr	r2, [r7, #12]
 8010e54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010e56:	683b      	ldr	r3, [r7, #0]
 8010e58:	685a      	ldr	r2, [r3, #4]
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	697a      	ldr	r2, [r7, #20]
 8010e62:	621a      	str	r2, [r3, #32]
}
 8010e64:	bf00      	nop
 8010e66:	371c      	adds	r7, #28
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6e:	4770      	bx	lr
 8010e70:	fffeff8f 	.word	0xfffeff8f
 8010e74:	40010000 	.word	0x40010000
 8010e78:	40010400 	.word	0x40010400
 8010e7c:	40014000 	.word	0x40014000
 8010e80:	40014400 	.word	0x40014400
 8010e84:	40014800 	.word	0x40014800

08010e88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010e88:	b480      	push	{r7}
 8010e8a:	b087      	sub	sp, #28
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
 8010e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	6a1b      	ldr	r3, [r3, #32]
 8010e96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	6a1b      	ldr	r3, [r3, #32]
 8010ea2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	685b      	ldr	r3, [r3, #4]
 8010ea8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	69db      	ldr	r3, [r3, #28]
 8010eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010eb0:	68fa      	ldr	r2, [r7, #12]
 8010eb2:	4b24      	ldr	r3, [pc, #144]	; (8010f44 <TIM_OC4_SetConfig+0xbc>)
 8010eb4:	4013      	ands	r3, r2
 8010eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	021b      	lsls	r3, r3, #8
 8010ec6:	68fa      	ldr	r2, [r7, #12]
 8010ec8:	4313      	orrs	r3, r2
 8010eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010ecc:	693b      	ldr	r3, [r7, #16]
 8010ece:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010ed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	689b      	ldr	r3, [r3, #8]
 8010ed8:	031b      	lsls	r3, r3, #12
 8010eda:	693a      	ldr	r2, [r7, #16]
 8010edc:	4313      	orrs	r3, r2
 8010ede:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	4a19      	ldr	r2, [pc, #100]	; (8010f48 <TIM_OC4_SetConfig+0xc0>)
 8010ee4:	4293      	cmp	r3, r2
 8010ee6:	d00f      	beq.n	8010f08 <TIM_OC4_SetConfig+0x80>
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	4a18      	ldr	r2, [pc, #96]	; (8010f4c <TIM_OC4_SetConfig+0xc4>)
 8010eec:	4293      	cmp	r3, r2
 8010eee:	d00b      	beq.n	8010f08 <TIM_OC4_SetConfig+0x80>
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	4a17      	ldr	r2, [pc, #92]	; (8010f50 <TIM_OC4_SetConfig+0xc8>)
 8010ef4:	4293      	cmp	r3, r2
 8010ef6:	d007      	beq.n	8010f08 <TIM_OC4_SetConfig+0x80>
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	4a16      	ldr	r2, [pc, #88]	; (8010f54 <TIM_OC4_SetConfig+0xcc>)
 8010efc:	4293      	cmp	r3, r2
 8010efe:	d003      	beq.n	8010f08 <TIM_OC4_SetConfig+0x80>
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	4a15      	ldr	r2, [pc, #84]	; (8010f58 <TIM_OC4_SetConfig+0xd0>)
 8010f04:	4293      	cmp	r3, r2
 8010f06:	d109      	bne.n	8010f1c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010f0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	695b      	ldr	r3, [r3, #20]
 8010f14:	019b      	lsls	r3, r3, #6
 8010f16:	697a      	ldr	r2, [r7, #20]
 8010f18:	4313      	orrs	r3, r2
 8010f1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	697a      	ldr	r2, [r7, #20]
 8010f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	68fa      	ldr	r2, [r7, #12]
 8010f26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	685a      	ldr	r2, [r3, #4]
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	693a      	ldr	r2, [r7, #16]
 8010f34:	621a      	str	r2, [r3, #32]
}
 8010f36:	bf00      	nop
 8010f38:	371c      	adds	r7, #28
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f40:	4770      	bx	lr
 8010f42:	bf00      	nop
 8010f44:	feff8fff 	.word	0xfeff8fff
 8010f48:	40010000 	.word	0x40010000
 8010f4c:	40010400 	.word	0x40010400
 8010f50:	40014000 	.word	0x40014000
 8010f54:	40014400 	.word	0x40014400
 8010f58:	40014800 	.word	0x40014800

08010f5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010f5c:	b480      	push	{r7}
 8010f5e:	b087      	sub	sp, #28
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	6078      	str	r0, [r7, #4]
 8010f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	6a1b      	ldr	r3, [r3, #32]
 8010f6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	6a1b      	ldr	r3, [r3, #32]
 8010f76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	685b      	ldr	r3, [r3, #4]
 8010f7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010f84:	68fa      	ldr	r2, [r7, #12]
 8010f86:	4b21      	ldr	r3, [pc, #132]	; (801100c <TIM_OC5_SetConfig+0xb0>)
 8010f88:	4013      	ands	r3, r2
 8010f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	68fa      	ldr	r2, [r7, #12]
 8010f92:	4313      	orrs	r3, r2
 8010f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010f96:	693b      	ldr	r3, [r7, #16]
 8010f98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010f9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010f9e:	683b      	ldr	r3, [r7, #0]
 8010fa0:	689b      	ldr	r3, [r3, #8]
 8010fa2:	041b      	lsls	r3, r3, #16
 8010fa4:	693a      	ldr	r2, [r7, #16]
 8010fa6:	4313      	orrs	r3, r2
 8010fa8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	4a18      	ldr	r2, [pc, #96]	; (8011010 <TIM_OC5_SetConfig+0xb4>)
 8010fae:	4293      	cmp	r3, r2
 8010fb0:	d00f      	beq.n	8010fd2 <TIM_OC5_SetConfig+0x76>
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	4a17      	ldr	r2, [pc, #92]	; (8011014 <TIM_OC5_SetConfig+0xb8>)
 8010fb6:	4293      	cmp	r3, r2
 8010fb8:	d00b      	beq.n	8010fd2 <TIM_OC5_SetConfig+0x76>
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	4a16      	ldr	r2, [pc, #88]	; (8011018 <TIM_OC5_SetConfig+0xbc>)
 8010fbe:	4293      	cmp	r3, r2
 8010fc0:	d007      	beq.n	8010fd2 <TIM_OC5_SetConfig+0x76>
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	4a15      	ldr	r2, [pc, #84]	; (801101c <TIM_OC5_SetConfig+0xc0>)
 8010fc6:	4293      	cmp	r3, r2
 8010fc8:	d003      	beq.n	8010fd2 <TIM_OC5_SetConfig+0x76>
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	4a14      	ldr	r2, [pc, #80]	; (8011020 <TIM_OC5_SetConfig+0xc4>)
 8010fce:	4293      	cmp	r3, r2
 8010fd0:	d109      	bne.n	8010fe6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010fd2:	697b      	ldr	r3, [r7, #20]
 8010fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010fd8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	695b      	ldr	r3, [r3, #20]
 8010fde:	021b      	lsls	r3, r3, #8
 8010fe0:	697a      	ldr	r2, [r7, #20]
 8010fe2:	4313      	orrs	r3, r2
 8010fe4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	697a      	ldr	r2, [r7, #20]
 8010fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	68fa      	ldr	r2, [r7, #12]
 8010ff0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	685a      	ldr	r2, [r3, #4]
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	693a      	ldr	r2, [r7, #16]
 8010ffe:	621a      	str	r2, [r3, #32]
}
 8011000:	bf00      	nop
 8011002:	371c      	adds	r7, #28
 8011004:	46bd      	mov	sp, r7
 8011006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801100a:	4770      	bx	lr
 801100c:	fffeff8f 	.word	0xfffeff8f
 8011010:	40010000 	.word	0x40010000
 8011014:	40010400 	.word	0x40010400
 8011018:	40014000 	.word	0x40014000
 801101c:	40014400 	.word	0x40014400
 8011020:	40014800 	.word	0x40014800

08011024 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8011024:	b480      	push	{r7}
 8011026:	b087      	sub	sp, #28
 8011028:	af00      	add	r7, sp, #0
 801102a:	6078      	str	r0, [r7, #4]
 801102c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	6a1b      	ldr	r3, [r3, #32]
 8011032:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	6a1b      	ldr	r3, [r3, #32]
 801103e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	685b      	ldr	r3, [r3, #4]
 8011044:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801104a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801104c:	68fa      	ldr	r2, [r7, #12]
 801104e:	4b22      	ldr	r3, [pc, #136]	; (80110d8 <TIM_OC6_SetConfig+0xb4>)
 8011050:	4013      	ands	r3, r2
 8011052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	021b      	lsls	r3, r3, #8
 801105a:	68fa      	ldr	r2, [r7, #12]
 801105c:	4313      	orrs	r3, r2
 801105e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011060:	693b      	ldr	r3, [r7, #16]
 8011062:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011066:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011068:	683b      	ldr	r3, [r7, #0]
 801106a:	689b      	ldr	r3, [r3, #8]
 801106c:	051b      	lsls	r3, r3, #20
 801106e:	693a      	ldr	r2, [r7, #16]
 8011070:	4313      	orrs	r3, r2
 8011072:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	4a19      	ldr	r2, [pc, #100]	; (80110dc <TIM_OC6_SetConfig+0xb8>)
 8011078:	4293      	cmp	r3, r2
 801107a:	d00f      	beq.n	801109c <TIM_OC6_SetConfig+0x78>
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	4a18      	ldr	r2, [pc, #96]	; (80110e0 <TIM_OC6_SetConfig+0xbc>)
 8011080:	4293      	cmp	r3, r2
 8011082:	d00b      	beq.n	801109c <TIM_OC6_SetConfig+0x78>
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	4a17      	ldr	r2, [pc, #92]	; (80110e4 <TIM_OC6_SetConfig+0xc0>)
 8011088:	4293      	cmp	r3, r2
 801108a:	d007      	beq.n	801109c <TIM_OC6_SetConfig+0x78>
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	4a16      	ldr	r2, [pc, #88]	; (80110e8 <TIM_OC6_SetConfig+0xc4>)
 8011090:	4293      	cmp	r3, r2
 8011092:	d003      	beq.n	801109c <TIM_OC6_SetConfig+0x78>
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	4a15      	ldr	r2, [pc, #84]	; (80110ec <TIM_OC6_SetConfig+0xc8>)
 8011098:	4293      	cmp	r3, r2
 801109a:	d109      	bne.n	80110b0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801109c:	697b      	ldr	r3, [r7, #20]
 801109e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80110a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	695b      	ldr	r3, [r3, #20]
 80110a8:	029b      	lsls	r3, r3, #10
 80110aa:	697a      	ldr	r2, [r7, #20]
 80110ac:	4313      	orrs	r3, r2
 80110ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	697a      	ldr	r2, [r7, #20]
 80110b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	68fa      	ldr	r2, [r7, #12]
 80110ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	685a      	ldr	r2, [r3, #4]
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	693a      	ldr	r2, [r7, #16]
 80110c8:	621a      	str	r2, [r3, #32]
}
 80110ca:	bf00      	nop
 80110cc:	371c      	adds	r7, #28
 80110ce:	46bd      	mov	sp, r7
 80110d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d4:	4770      	bx	lr
 80110d6:	bf00      	nop
 80110d8:	feff8fff 	.word	0xfeff8fff
 80110dc:	40010000 	.word	0x40010000
 80110e0:	40010400 	.word	0x40010400
 80110e4:	40014000 	.word	0x40014000
 80110e8:	40014400 	.word	0x40014400
 80110ec:	40014800 	.word	0x40014800

080110f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80110f0:	b480      	push	{r7}
 80110f2:	b087      	sub	sp, #28
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	60f8      	str	r0, [r7, #12]
 80110f8:	60b9      	str	r1, [r7, #8]
 80110fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	6a1b      	ldr	r3, [r3, #32]
 8011100:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	6a1b      	ldr	r3, [r3, #32]
 8011106:	f023 0201 	bic.w	r2, r3, #1
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	699b      	ldr	r3, [r3, #24]
 8011112:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8011114:	693b      	ldr	r3, [r7, #16]
 8011116:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801111a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	011b      	lsls	r3, r3, #4
 8011120:	693a      	ldr	r2, [r7, #16]
 8011122:	4313      	orrs	r3, r2
 8011124:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	f023 030a 	bic.w	r3, r3, #10
 801112c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801112e:	697a      	ldr	r2, [r7, #20]
 8011130:	68bb      	ldr	r3, [r7, #8]
 8011132:	4313      	orrs	r3, r2
 8011134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	693a      	ldr	r2, [r7, #16]
 801113a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	697a      	ldr	r2, [r7, #20]
 8011140:	621a      	str	r2, [r3, #32]
}
 8011142:	bf00      	nop
 8011144:	371c      	adds	r7, #28
 8011146:	46bd      	mov	sp, r7
 8011148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801114c:	4770      	bx	lr

0801114e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801114e:	b480      	push	{r7}
 8011150:	b087      	sub	sp, #28
 8011152:	af00      	add	r7, sp, #0
 8011154:	60f8      	str	r0, [r7, #12]
 8011156:	60b9      	str	r1, [r7, #8]
 8011158:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	6a1b      	ldr	r3, [r3, #32]
 801115e:	f023 0210 	bic.w	r2, r3, #16
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	699b      	ldr	r3, [r3, #24]
 801116a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	6a1b      	ldr	r3, [r3, #32]
 8011170:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8011172:	697b      	ldr	r3, [r7, #20]
 8011174:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011178:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	031b      	lsls	r3, r3, #12
 801117e:	697a      	ldr	r2, [r7, #20]
 8011180:	4313      	orrs	r3, r2
 8011182:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011184:	693b      	ldr	r3, [r7, #16]
 8011186:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 801118a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	011b      	lsls	r3, r3, #4
 8011190:	693a      	ldr	r2, [r7, #16]
 8011192:	4313      	orrs	r3, r2
 8011194:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	697a      	ldr	r2, [r7, #20]
 801119a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	693a      	ldr	r2, [r7, #16]
 80111a0:	621a      	str	r2, [r3, #32]
}
 80111a2:	bf00      	nop
 80111a4:	371c      	adds	r7, #28
 80111a6:	46bd      	mov	sp, r7
 80111a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ac:	4770      	bx	lr
	...

080111b0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80111b0:	b480      	push	{r7}
 80111b2:	b085      	sub	sp, #20
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	689b      	ldr	r3, [r3, #8]
 80111be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80111c0:	68fa      	ldr	r2, [r7, #12]
 80111c2:	4b09      	ldr	r3, [pc, #36]	; (80111e8 <TIM_ITRx_SetConfig+0x38>)
 80111c4:	4013      	ands	r3, r2
 80111c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80111c8:	683a      	ldr	r2, [r7, #0]
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	4313      	orrs	r3, r2
 80111ce:	f043 0307 	orr.w	r3, r3, #7
 80111d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	68fa      	ldr	r2, [r7, #12]
 80111d8:	609a      	str	r2, [r3, #8]
}
 80111da:	bf00      	nop
 80111dc:	3714      	adds	r7, #20
 80111de:	46bd      	mov	sp, r7
 80111e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e4:	4770      	bx	lr
 80111e6:	bf00      	nop
 80111e8:	ffcfff8f 	.word	0xffcfff8f

080111ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80111ec:	b480      	push	{r7}
 80111ee:	b087      	sub	sp, #28
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	60f8      	str	r0, [r7, #12]
 80111f4:	60b9      	str	r1, [r7, #8]
 80111f6:	607a      	str	r2, [r7, #4]
 80111f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	689b      	ldr	r3, [r3, #8]
 80111fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011200:	697b      	ldr	r3, [r7, #20]
 8011202:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8011206:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	021a      	lsls	r2, r3, #8
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	431a      	orrs	r2, r3
 8011210:	68bb      	ldr	r3, [r7, #8]
 8011212:	4313      	orrs	r3, r2
 8011214:	697a      	ldr	r2, [r7, #20]
 8011216:	4313      	orrs	r3, r2
 8011218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	697a      	ldr	r2, [r7, #20]
 801121e:	609a      	str	r2, [r3, #8]
}
 8011220:	bf00      	nop
 8011222:	371c      	adds	r7, #28
 8011224:	46bd      	mov	sp, r7
 8011226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122a:	4770      	bx	lr

0801122c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801122c:	b480      	push	{r7}
 801122e:	b087      	sub	sp, #28
 8011230:	af00      	add	r7, sp, #0
 8011232:	60f8      	str	r0, [r7, #12]
 8011234:	60b9      	str	r1, [r7, #8]
 8011236:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011238:	68bb      	ldr	r3, [r7, #8]
 801123a:	f003 031f 	and.w	r3, r3, #31
 801123e:	2201      	movs	r2, #1
 8011240:	fa02 f303 	lsl.w	r3, r2, r3
 8011244:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	6a1a      	ldr	r2, [r3, #32]
 801124a:	697b      	ldr	r3, [r7, #20]
 801124c:	43db      	mvns	r3, r3
 801124e:	401a      	ands	r2, r3
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	6a1a      	ldr	r2, [r3, #32]
 8011258:	68bb      	ldr	r3, [r7, #8]
 801125a:	f003 031f 	and.w	r3, r3, #31
 801125e:	6879      	ldr	r1, [r7, #4]
 8011260:	fa01 f303 	lsl.w	r3, r1, r3
 8011264:	431a      	orrs	r2, r3
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	621a      	str	r2, [r3, #32]
}
 801126a:	bf00      	nop
 801126c:	371c      	adds	r7, #28
 801126e:	46bd      	mov	sp, r7
 8011270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011274:	4770      	bx	lr
	...

08011278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011278:	b480      	push	{r7}
 801127a:	b085      	sub	sp, #20
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
 8011280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011288:	2b01      	cmp	r3, #1
 801128a:	d101      	bne.n	8011290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801128c:	2302      	movs	r3, #2
 801128e:	e077      	b.n	8011380 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	2201      	movs	r2, #1
 8011294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	2202      	movs	r2, #2
 801129c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	685b      	ldr	r3, [r3, #4]
 80112a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	689b      	ldr	r3, [r3, #8]
 80112ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	4a35      	ldr	r2, [pc, #212]	; (801138c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80112b6:	4293      	cmp	r3, r2
 80112b8:	d004      	beq.n	80112c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	4a34      	ldr	r2, [pc, #208]	; (8011390 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80112c0:	4293      	cmp	r3, r2
 80112c2:	d108      	bne.n	80112d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80112ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	685b      	ldr	r3, [r3, #4]
 80112d0:	68fa      	ldr	r2, [r7, #12]
 80112d2:	4313      	orrs	r3, r2
 80112d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80112dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80112de:	683b      	ldr	r3, [r7, #0]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	68fa      	ldr	r2, [r7, #12]
 80112e4:	4313      	orrs	r3, r2
 80112e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	68fa      	ldr	r2, [r7, #12]
 80112ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	4a25      	ldr	r2, [pc, #148]	; (801138c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80112f6:	4293      	cmp	r3, r2
 80112f8:	d02c      	beq.n	8011354 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011302:	d027      	beq.n	8011354 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	4a22      	ldr	r2, [pc, #136]	; (8011394 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801130a:	4293      	cmp	r3, r2
 801130c:	d022      	beq.n	8011354 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	4a21      	ldr	r2, [pc, #132]	; (8011398 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8011314:	4293      	cmp	r3, r2
 8011316:	d01d      	beq.n	8011354 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	4a1f      	ldr	r2, [pc, #124]	; (801139c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 801131e:	4293      	cmp	r3, r2
 8011320:	d018      	beq.n	8011354 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	4a1a      	ldr	r2, [pc, #104]	; (8011390 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011328:	4293      	cmp	r3, r2
 801132a:	d013      	beq.n	8011354 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	4a1b      	ldr	r2, [pc, #108]	; (80113a0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8011332:	4293      	cmp	r3, r2
 8011334:	d00e      	beq.n	8011354 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	4a1a      	ldr	r2, [pc, #104]	; (80113a4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 801133c:	4293      	cmp	r3, r2
 801133e:	d009      	beq.n	8011354 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	4a18      	ldr	r2, [pc, #96]	; (80113a8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8011346:	4293      	cmp	r3, r2
 8011348:	d004      	beq.n	8011354 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	4a17      	ldr	r2, [pc, #92]	; (80113ac <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011350:	4293      	cmp	r3, r2
 8011352:	d10c      	bne.n	801136e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011354:	68bb      	ldr	r3, [r7, #8]
 8011356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801135a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	689b      	ldr	r3, [r3, #8]
 8011360:	68ba      	ldr	r2, [r7, #8]
 8011362:	4313      	orrs	r3, r2
 8011364:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	68ba      	ldr	r2, [r7, #8]
 801136c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2201      	movs	r2, #1
 8011372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	2200      	movs	r2, #0
 801137a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801137e:	2300      	movs	r3, #0
}
 8011380:	4618      	mov	r0, r3
 8011382:	3714      	adds	r7, #20
 8011384:	46bd      	mov	sp, r7
 8011386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138a:	4770      	bx	lr
 801138c:	40010000 	.word	0x40010000
 8011390:	40010400 	.word	0x40010400
 8011394:	40000400 	.word	0x40000400
 8011398:	40000800 	.word	0x40000800
 801139c:	40000c00 	.word	0x40000c00
 80113a0:	40001800 	.word	0x40001800
 80113a4:	40014000 	.word	0x40014000
 80113a8:	4000e000 	.word	0x4000e000
 80113ac:	4000e400 	.word	0x4000e400

080113b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80113b0:	b480      	push	{r7}
 80113b2:	b085      	sub	sp, #20
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80113ba:	2300      	movs	r3, #0
 80113bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80113c4:	2b01      	cmp	r3, #1
 80113c6:	d101      	bne.n	80113cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80113c8:	2302      	movs	r3, #2
 80113ca:	e087      	b.n	80114dc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	2201      	movs	r2, #1
 80113d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	68db      	ldr	r3, [r3, #12]
 80113de:	4313      	orrs	r3, r2
 80113e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80113e8:	683b      	ldr	r3, [r7, #0]
 80113ea:	689b      	ldr	r3, [r3, #8]
 80113ec:	4313      	orrs	r3, r2
 80113ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	685b      	ldr	r3, [r3, #4]
 80113fa:	4313      	orrs	r3, r2
 80113fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011404:	683b      	ldr	r3, [r7, #0]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	4313      	orrs	r3, r2
 801140a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011412:	683b      	ldr	r3, [r7, #0]
 8011414:	691b      	ldr	r3, [r3, #16]
 8011416:	4313      	orrs	r3, r2
 8011418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	695b      	ldr	r3, [r3, #20]
 8011424:	4313      	orrs	r3, r2
 8011426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011432:	4313      	orrs	r3, r2
 8011434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	699b      	ldr	r3, [r3, #24]
 8011440:	041b      	lsls	r3, r3, #16
 8011442:	4313      	orrs	r3, r2
 8011444:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	4a27      	ldr	r2, [pc, #156]	; (80114e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801144c:	4293      	cmp	r3, r2
 801144e:	d004      	beq.n	801145a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	4a25      	ldr	r2, [pc, #148]	; (80114ec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8011456:	4293      	cmp	r3, r2
 8011458:	d106      	bne.n	8011468 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8011460:	683b      	ldr	r3, [r7, #0]
 8011462:	69db      	ldr	r3, [r3, #28]
 8011464:	4313      	orrs	r3, r2
 8011466:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	4a1e      	ldr	r2, [pc, #120]	; (80114e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801146e:	4293      	cmp	r3, r2
 8011470:	d004      	beq.n	801147c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	4a1d      	ldr	r2, [pc, #116]	; (80114ec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8011478:	4293      	cmp	r3, r2
 801147a:	d126      	bne.n	80114ca <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8011482:	683b      	ldr	r3, [r7, #0]
 8011484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011486:	051b      	lsls	r3, r3, #20
 8011488:	4313      	orrs	r3, r2
 801148a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	6a1b      	ldr	r3, [r3, #32]
 8011496:	4313      	orrs	r3, r2
 8011498:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114a4:	4313      	orrs	r3, r2
 80114a6:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	4a0e      	ldr	r2, [pc, #56]	; (80114e8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80114ae:	4293      	cmp	r3, r2
 80114b0:	d004      	beq.n	80114bc <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	4a0d      	ldr	r2, [pc, #52]	; (80114ec <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80114b8:	4293      	cmp	r3, r2
 80114ba:	d106      	bne.n	80114ca <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80114c2:	683b      	ldr	r3, [r7, #0]
 80114c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114c6:	4313      	orrs	r3, r2
 80114c8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	68fa      	ldr	r2, [r7, #12]
 80114d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2200      	movs	r2, #0
 80114d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80114da:	2300      	movs	r3, #0
}
 80114dc:	4618      	mov	r0, r3
 80114de:	3714      	adds	r7, #20
 80114e0:	46bd      	mov	sp, r7
 80114e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e6:	4770      	bx	lr
 80114e8:	40010000 	.word	0x40010000
 80114ec:	40010400 	.word	0x40010400

080114f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b082      	sub	sp, #8
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d101      	bne.n	8011502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80114fe:	2301      	movs	r3, #1
 8011500:	e042      	b.n	8011588 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011508:	2b00      	cmp	r3, #0
 801150a:	d106      	bne.n	801151a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	2200      	movs	r2, #0
 8011510:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011514:	6878      	ldr	r0, [r7, #4]
 8011516:	f7f8 fd8f 	bl	800a038 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	2224      	movs	r2, #36	; 0x24
 801151e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	681a      	ldr	r2, [r3, #0]
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	f022 0201 	bic.w	r2, r2, #1
 8011530:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011532:	6878      	ldr	r0, [r7, #4]
 8011534:	f000 fe48 	bl	80121c8 <UART_SetConfig>
 8011538:	4603      	mov	r3, r0
 801153a:	2b01      	cmp	r3, #1
 801153c:	d101      	bne.n	8011542 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801153e:	2301      	movs	r3, #1
 8011540:	e022      	b.n	8011588 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011546:	2b00      	cmp	r3, #0
 8011548:	d002      	beq.n	8011550 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801154a:	6878      	ldr	r0, [r7, #4]
 801154c:	f001 fc9a 	bl	8012e84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	685a      	ldr	r2, [r3, #4]
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801155e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	689a      	ldr	r2, [r3, #8]
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801156e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	681a      	ldr	r2, [r3, #0]
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	f042 0201 	orr.w	r2, r2, #1
 801157e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011580:	6878      	ldr	r0, [r7, #4]
 8011582:	f001 fd21 	bl	8012fc8 <UART_CheckIdleState>
 8011586:	4603      	mov	r3, r0
}
 8011588:	4618      	mov	r0, r3
 801158a:	3708      	adds	r7, #8
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}

08011590 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b08a      	sub	sp, #40	; 0x28
 8011594:	af02      	add	r7, sp, #8
 8011596:	60f8      	str	r0, [r7, #12]
 8011598:	60b9      	str	r1, [r7, #8]
 801159a:	603b      	str	r3, [r7, #0]
 801159c:	4613      	mov	r3, r2
 801159e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80115a6:	2b20      	cmp	r3, #32
 80115a8:	f040 8083 	bne.w	80116b2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80115ac:	68bb      	ldr	r3, [r7, #8]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d002      	beq.n	80115b8 <HAL_UART_Transmit+0x28>
 80115b2:	88fb      	ldrh	r3, [r7, #6]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d101      	bne.n	80115bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80115b8:	2301      	movs	r3, #1
 80115ba:	e07b      	b.n	80116b4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80115c2:	2b01      	cmp	r3, #1
 80115c4:	d101      	bne.n	80115ca <HAL_UART_Transmit+0x3a>
 80115c6:	2302      	movs	r3, #2
 80115c8:	e074      	b.n	80116b4 <HAL_UART_Transmit+0x124>
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	2201      	movs	r2, #1
 80115ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	2200      	movs	r2, #0
 80115d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	2221      	movs	r2, #33	; 0x21
 80115de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80115e2:	f7f8 ff2b 	bl	800a43c <HAL_GetTick>
 80115e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	88fa      	ldrh	r2, [r7, #6]
 80115ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	88fa      	ldrh	r2, [r7, #6]
 80115f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	689b      	ldr	r3, [r3, #8]
 80115fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011600:	d108      	bne.n	8011614 <HAL_UART_Transmit+0x84>
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	691b      	ldr	r3, [r3, #16]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d104      	bne.n	8011614 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 801160a:	2300      	movs	r3, #0
 801160c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	61bb      	str	r3, [r7, #24]
 8011612:	e003      	b.n	801161c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011618:	2300      	movs	r3, #0
 801161a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	2200      	movs	r2, #0
 8011620:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8011624:	e02c      	b.n	8011680 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	9300      	str	r3, [sp, #0]
 801162a:	697b      	ldr	r3, [r7, #20]
 801162c:	2200      	movs	r2, #0
 801162e:	2180      	movs	r1, #128	; 0x80
 8011630:	68f8      	ldr	r0, [r7, #12]
 8011632:	f001 fd14 	bl	801305e <UART_WaitOnFlagUntilTimeout>
 8011636:	4603      	mov	r3, r0
 8011638:	2b00      	cmp	r3, #0
 801163a:	d001      	beq.n	8011640 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 801163c:	2303      	movs	r3, #3
 801163e:	e039      	b.n	80116b4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8011640:	69fb      	ldr	r3, [r7, #28]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d10b      	bne.n	801165e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011646:	69bb      	ldr	r3, [r7, #24]
 8011648:	881b      	ldrh	r3, [r3, #0]
 801164a:	461a      	mov	r2, r3
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011654:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8011656:	69bb      	ldr	r3, [r7, #24]
 8011658:	3302      	adds	r3, #2
 801165a:	61bb      	str	r3, [r7, #24]
 801165c:	e007      	b.n	801166e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801165e:	69fb      	ldr	r3, [r7, #28]
 8011660:	781a      	ldrb	r2, [r3, #0]
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8011668:	69fb      	ldr	r3, [r7, #28]
 801166a:	3301      	adds	r3, #1
 801166c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011674:	b29b      	uxth	r3, r3
 8011676:	3b01      	subs	r3, #1
 8011678:	b29a      	uxth	r2, r3
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011686:	b29b      	uxth	r3, r3
 8011688:	2b00      	cmp	r3, #0
 801168a:	d1cc      	bne.n	8011626 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801168c:	683b      	ldr	r3, [r7, #0]
 801168e:	9300      	str	r3, [sp, #0]
 8011690:	697b      	ldr	r3, [r7, #20]
 8011692:	2200      	movs	r2, #0
 8011694:	2140      	movs	r1, #64	; 0x40
 8011696:	68f8      	ldr	r0, [r7, #12]
 8011698:	f001 fce1 	bl	801305e <UART_WaitOnFlagUntilTimeout>
 801169c:	4603      	mov	r3, r0
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d001      	beq.n	80116a6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80116a2:	2303      	movs	r3, #3
 80116a4:	e006      	b.n	80116b4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	2220      	movs	r2, #32
 80116aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80116ae:	2300      	movs	r3, #0
 80116b0:	e000      	b.n	80116b4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80116b2:	2302      	movs	r3, #2
  }
}
 80116b4:	4618      	mov	r0, r3
 80116b6:	3720      	adds	r7, #32
 80116b8:	46bd      	mov	sp, r7
 80116ba:	bd80      	pop	{r7, pc}

080116bc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b08a      	sub	sp, #40	; 0x28
 80116c0:	af02      	add	r7, sp, #8
 80116c2:	60f8      	str	r0, [r7, #12]
 80116c4:	60b9      	str	r1, [r7, #8]
 80116c6:	603b      	str	r3, [r7, #0]
 80116c8:	4613      	mov	r3, r2
 80116ca:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80116d2:	2b20      	cmp	r3, #32
 80116d4:	f040 80c0 	bne.w	8011858 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d002      	beq.n	80116e4 <HAL_UART_Receive+0x28>
 80116de:	88fb      	ldrh	r3, [r7, #6]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d101      	bne.n	80116e8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80116e4:	2301      	movs	r3, #1
 80116e6:	e0b8      	b.n	801185a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80116ee:	2b01      	cmp	r3, #1
 80116f0:	d101      	bne.n	80116f6 <HAL_UART_Receive+0x3a>
 80116f2:	2302      	movs	r3, #2
 80116f4:	e0b1      	b.n	801185a <HAL_UART_Receive+0x19e>
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	2201      	movs	r2, #1
 80116fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	2200      	movs	r2, #0
 8011702:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	2222      	movs	r2, #34	; 0x22
 801170a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	2200      	movs	r2, #0
 8011712:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011714:	f7f8 fe92 	bl	800a43c <HAL_GetTick>
 8011718:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	88fa      	ldrh	r2, [r7, #6]
 801171e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	88fa      	ldrh	r2, [r7, #6]
 8011726:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	689b      	ldr	r3, [r3, #8]
 801172e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011732:	d10e      	bne.n	8011752 <HAL_UART_Receive+0x96>
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	691b      	ldr	r3, [r3, #16]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d105      	bne.n	8011748 <HAL_UART_Receive+0x8c>
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8011742:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011746:	e02d      	b.n	80117a4 <HAL_UART_Receive+0xe8>
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	22ff      	movs	r2, #255	; 0xff
 801174c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011750:	e028      	b.n	80117a4 <HAL_UART_Receive+0xe8>
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	689b      	ldr	r3, [r3, #8]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d10d      	bne.n	8011776 <HAL_UART_Receive+0xba>
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	691b      	ldr	r3, [r3, #16]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d104      	bne.n	801176c <HAL_UART_Receive+0xb0>
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	22ff      	movs	r2, #255	; 0xff
 8011766:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801176a:	e01b      	b.n	80117a4 <HAL_UART_Receive+0xe8>
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	227f      	movs	r2, #127	; 0x7f
 8011770:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011774:	e016      	b.n	80117a4 <HAL_UART_Receive+0xe8>
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	689b      	ldr	r3, [r3, #8]
 801177a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801177e:	d10d      	bne.n	801179c <HAL_UART_Receive+0xe0>
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	691b      	ldr	r3, [r3, #16]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d104      	bne.n	8011792 <HAL_UART_Receive+0xd6>
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	227f      	movs	r2, #127	; 0x7f
 801178c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011790:	e008      	b.n	80117a4 <HAL_UART_Receive+0xe8>
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	223f      	movs	r2, #63	; 0x3f
 8011796:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801179a:	e003      	b.n	80117a4 <HAL_UART_Receive+0xe8>
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	2200      	movs	r2, #0
 80117a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80117aa:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	689b      	ldr	r3, [r3, #8]
 80117b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80117b4:	d108      	bne.n	80117c8 <HAL_UART_Receive+0x10c>
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	691b      	ldr	r3, [r3, #16]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d104      	bne.n	80117c8 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 80117be:	2300      	movs	r3, #0
 80117c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80117c2:	68bb      	ldr	r3, [r7, #8]
 80117c4:	61bb      	str	r3, [r7, #24]
 80117c6:	e003      	b.n	80117d0 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80117cc:	2300      	movs	r3, #0
 80117ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	2200      	movs	r2, #0
 80117d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80117d8:	e032      	b.n	8011840 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80117da:	683b      	ldr	r3, [r7, #0]
 80117dc:	9300      	str	r3, [sp, #0]
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	2200      	movs	r2, #0
 80117e2:	2120      	movs	r1, #32
 80117e4:	68f8      	ldr	r0, [r7, #12]
 80117e6:	f001 fc3a 	bl	801305e <UART_WaitOnFlagUntilTimeout>
 80117ea:	4603      	mov	r3, r0
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d001      	beq.n	80117f4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80117f0:	2303      	movs	r3, #3
 80117f2:	e032      	b.n	801185a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80117f4:	69fb      	ldr	r3, [r7, #28]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d10c      	bne.n	8011814 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011800:	b29a      	uxth	r2, r3
 8011802:	8a7b      	ldrh	r3, [r7, #18]
 8011804:	4013      	ands	r3, r2
 8011806:	b29a      	uxth	r2, r3
 8011808:	69bb      	ldr	r3, [r7, #24]
 801180a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 801180c:	69bb      	ldr	r3, [r7, #24]
 801180e:	3302      	adds	r3, #2
 8011810:	61bb      	str	r3, [r7, #24]
 8011812:	e00c      	b.n	801182e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801181a:	b2da      	uxtb	r2, r3
 801181c:	8a7b      	ldrh	r3, [r7, #18]
 801181e:	b2db      	uxtb	r3, r3
 8011820:	4013      	ands	r3, r2
 8011822:	b2da      	uxtb	r2, r3
 8011824:	69fb      	ldr	r3, [r7, #28]
 8011826:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8011828:	69fb      	ldr	r3, [r7, #28]
 801182a:	3301      	adds	r3, #1
 801182c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011834:	b29b      	uxth	r3, r3
 8011836:	3b01      	subs	r3, #1
 8011838:	b29a      	uxth	r2, r3
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011846:	b29b      	uxth	r3, r3
 8011848:	2b00      	cmp	r3, #0
 801184a:	d1c6      	bne.n	80117da <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	2220      	movs	r2, #32
 8011850:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8011854:	2300      	movs	r3, #0
 8011856:	e000      	b.n	801185a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8011858:	2302      	movs	r3, #2
  }
}
 801185a:	4618      	mov	r0, r3
 801185c:	3720      	adds	r7, #32
 801185e:	46bd      	mov	sp, r7
 8011860:	bd80      	pop	{r7, pc}
	...

08011864 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8011864:	b480      	push	{r7}
 8011866:	b091      	sub	sp, #68	; 0x44
 8011868:	af00      	add	r7, sp, #0
 801186a:	60f8      	str	r0, [r7, #12]
 801186c:	60b9      	str	r1, [r7, #8]
 801186e:	4613      	mov	r3, r2
 8011870:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011878:	2b20      	cmp	r3, #32
 801187a:	f040 808c 	bne.w	8011996 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 801187e:	68bb      	ldr	r3, [r7, #8]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d002      	beq.n	801188a <HAL_UART_Transmit_IT+0x26>
 8011884:	88fb      	ldrh	r3, [r7, #6]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d101      	bne.n	801188e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 801188a:	2301      	movs	r3, #1
 801188c:	e084      	b.n	8011998 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011894:	2b01      	cmp	r3, #1
 8011896:	d101      	bne.n	801189c <HAL_UART_Transmit_IT+0x38>
 8011898:	2302      	movs	r3, #2
 801189a:	e07d      	b.n	8011998 <HAL_UART_Transmit_IT+0x134>
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	2201      	movs	r2, #1
 80118a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	68ba      	ldr	r2, [r7, #8]
 80118a8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	88fa      	ldrh	r2, [r7, #6]
 80118ae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	88fa      	ldrh	r2, [r7, #6]
 80118b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	2200      	movs	r2, #0
 80118be:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	2200      	movs	r2, #0
 80118c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	2221      	movs	r2, #33	; 0x21
 80118cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80118d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80118d8:	d12e      	bne.n	8011938 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	689b      	ldr	r3, [r3, #8]
 80118de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80118e2:	d107      	bne.n	80118f4 <HAL_UART_Transmit_IT+0x90>
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	691b      	ldr	r3, [r3, #16]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d103      	bne.n	80118f4 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	4a2d      	ldr	r2, [pc, #180]	; (80119a4 <HAL_UART_Transmit_IT+0x140>)
 80118f0:	675a      	str	r2, [r3, #116]	; 0x74
 80118f2:	e002      	b.n	80118fa <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	4a2c      	ldr	r2, [pc, #176]	; (80119a8 <HAL_UART_Transmit_IT+0x144>)
 80118f8:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	2200      	movs	r2, #0
 80118fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	3308      	adds	r3, #8
 8011908:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801190a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801190c:	e853 3f00 	ldrex	r3, [r3]
 8011910:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011914:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011918:	63bb      	str	r3, [r7, #56]	; 0x38
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	3308      	adds	r3, #8
 8011920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011922:	637a      	str	r2, [r7, #52]	; 0x34
 8011924:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011926:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801192a:	e841 2300 	strex	r3, r2, [r1]
 801192e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011932:	2b00      	cmp	r3, #0
 8011934:	d1e5      	bne.n	8011902 <HAL_UART_Transmit_IT+0x9e>
 8011936:	e02c      	b.n	8011992 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	689b      	ldr	r3, [r3, #8]
 801193c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011940:	d107      	bne.n	8011952 <HAL_UART_Transmit_IT+0xee>
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	691b      	ldr	r3, [r3, #16]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d103      	bne.n	8011952 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	4a17      	ldr	r2, [pc, #92]	; (80119ac <HAL_UART_Transmit_IT+0x148>)
 801194e:	675a      	str	r2, [r3, #116]	; 0x74
 8011950:	e002      	b.n	8011958 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	4a16      	ldr	r2, [pc, #88]	; (80119b0 <HAL_UART_Transmit_IT+0x14c>)
 8011956:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	2200      	movs	r2, #0
 801195c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011966:	697b      	ldr	r3, [r7, #20]
 8011968:	e853 3f00 	ldrex	r3, [r3]
 801196c:	613b      	str	r3, [r7, #16]
   return(result);
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	461a      	mov	r2, r3
 801197c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801197e:	623b      	str	r3, [r7, #32]
 8011980:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011982:	69f9      	ldr	r1, [r7, #28]
 8011984:	6a3a      	ldr	r2, [r7, #32]
 8011986:	e841 2300 	strex	r3, r2, [r1]
 801198a:	61bb      	str	r3, [r7, #24]
   return(result);
 801198c:	69bb      	ldr	r3, [r7, #24]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d1e6      	bne.n	8011960 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8011992:	2300      	movs	r3, #0
 8011994:	e000      	b.n	8011998 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8011996:	2302      	movs	r3, #2
  }
}
 8011998:	4618      	mov	r0, r3
 801199a:	3744      	adds	r7, #68	; 0x44
 801199c:	46bd      	mov	sp, r7
 801199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a2:	4770      	bx	lr
 80119a4:	08013797 	.word	0x08013797
 80119a8:	080136b7 	.word	0x080136b7
 80119ac:	080135f5 	.word	0x080135f5
 80119b0:	0801353d 	.word	0x0801353d

080119b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b08a      	sub	sp, #40	; 0x28
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	60f8      	str	r0, [r7, #12]
 80119bc:	60b9      	str	r1, [r7, #8]
 80119be:	4613      	mov	r3, r2
 80119c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80119c8:	2b20      	cmp	r3, #32
 80119ca:	d142      	bne.n	8011a52 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d002      	beq.n	80119d8 <HAL_UART_Receive_IT+0x24>
 80119d2:	88fb      	ldrh	r3, [r7, #6]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d101      	bne.n	80119dc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80119d8:	2301      	movs	r3, #1
 80119da:	e03b      	b.n	8011a54 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80119e2:	2b01      	cmp	r3, #1
 80119e4:	d101      	bne.n	80119ea <HAL_UART_Receive_IT+0x36>
 80119e6:	2302      	movs	r3, #2
 80119e8:	e034      	b.n	8011a54 <HAL_UART_Receive_IT+0xa0>
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	2201      	movs	r2, #1
 80119ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	2200      	movs	r2, #0
 80119f6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	4a17      	ldr	r2, [pc, #92]	; (8011a5c <HAL_UART_Receive_IT+0xa8>)
 80119fe:	4293      	cmp	r3, r2
 8011a00:	d01f      	beq.n	8011a42 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	685b      	ldr	r3, [r3, #4]
 8011a08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d018      	beq.n	8011a42 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a16:	697b      	ldr	r3, [r7, #20]
 8011a18:	e853 3f00 	ldrex	r3, [r3]
 8011a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8011a1e:	693b      	ldr	r3, [r7, #16]
 8011a20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011a24:	627b      	str	r3, [r7, #36]	; 0x24
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	461a      	mov	r2, r3
 8011a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a2e:	623b      	str	r3, [r7, #32]
 8011a30:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a32:	69f9      	ldr	r1, [r7, #28]
 8011a34:	6a3a      	ldr	r2, [r7, #32]
 8011a36:	e841 2300 	strex	r3, r2, [r1]
 8011a3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8011a3c:	69bb      	ldr	r3, [r7, #24]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d1e6      	bne.n	8011a10 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8011a42:	88fb      	ldrh	r3, [r7, #6]
 8011a44:	461a      	mov	r2, r3
 8011a46:	68b9      	ldr	r1, [r7, #8]
 8011a48:	68f8      	ldr	r0, [r7, #12]
 8011a4a:	f001 fbd1 	bl	80131f0 <UART_Start_Receive_IT>
 8011a4e:	4603      	mov	r3, r0
 8011a50:	e000      	b.n	8011a54 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8011a52:	2302      	movs	r3, #2
  }
}
 8011a54:	4618      	mov	r0, r3
 8011a56:	3728      	adds	r7, #40	; 0x28
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	bd80      	pop	{r7, pc}
 8011a5c:	58000c00 	.word	0x58000c00

08011a60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b0ba      	sub	sp, #232	; 0xe8
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	69db      	ldr	r3, [r3, #28]
 8011a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	689b      	ldr	r3, [r3, #8]
 8011a82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011a86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8011a8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8011a8e:	4013      	ands	r3, r2
 8011a90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8011a94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d11b      	bne.n	8011ad4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011aa0:	f003 0320 	and.w	r3, r3, #32
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d015      	beq.n	8011ad4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011aac:	f003 0320 	and.w	r3, r3, #32
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d105      	bne.n	8011ac0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d009      	beq.n	8011ad4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	f000 835a 	beq.w	801217e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ace:	6878      	ldr	r0, [r7, #4]
 8011ad0:	4798      	blx	r3
      }
      return;
 8011ad2:	e354      	b.n	801217e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8011ad4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	f000 811f 	beq.w	8011d1c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8011ade:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8011ae2:	4b8b      	ldr	r3, [pc, #556]	; (8011d10 <HAL_UART_IRQHandler+0x2b0>)
 8011ae4:	4013      	ands	r3, r2
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d106      	bne.n	8011af8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8011aea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8011aee:	4b89      	ldr	r3, [pc, #548]	; (8011d14 <HAL_UART_IRQHandler+0x2b4>)
 8011af0:	4013      	ands	r3, r2
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	f000 8112 	beq.w	8011d1c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011af8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011afc:	f003 0301 	and.w	r3, r3, #1
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d011      	beq.n	8011b28 <HAL_UART_IRQHandler+0xc8>
 8011b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d00b      	beq.n	8011b28 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	2201      	movs	r2, #1
 8011b16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b1e:	f043 0201 	orr.w	r2, r3, #1
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011b2c:	f003 0302 	and.w	r3, r3, #2
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d011      	beq.n	8011b58 <HAL_UART_IRQHandler+0xf8>
 8011b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011b38:	f003 0301 	and.w	r3, r3, #1
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d00b      	beq.n	8011b58 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	2202      	movs	r2, #2
 8011b46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b4e:	f043 0204 	orr.w	r2, r3, #4
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011b5c:	f003 0304 	and.w	r3, r3, #4
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d011      	beq.n	8011b88 <HAL_UART_IRQHandler+0x128>
 8011b64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011b68:	f003 0301 	and.w	r3, r3, #1
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d00b      	beq.n	8011b88 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	2204      	movs	r2, #4
 8011b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b7e:	f043 0202 	orr.w	r2, r3, #2
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011b8c:	f003 0308 	and.w	r3, r3, #8
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d017      	beq.n	8011bc4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011b98:	f003 0320 	and.w	r3, r3, #32
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d105      	bne.n	8011bac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8011ba0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8011ba4:	4b5a      	ldr	r3, [pc, #360]	; (8011d10 <HAL_UART_IRQHandler+0x2b0>)
 8011ba6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d00b      	beq.n	8011bc4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	2208      	movs	r2, #8
 8011bb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011bba:	f043 0208 	orr.w	r2, r3, #8
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d012      	beq.n	8011bf6 <HAL_UART_IRQHandler+0x196>
 8011bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011bd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d00c      	beq.n	8011bf6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011be4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011bec:	f043 0220 	orr.w	r2, r3, #32
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	f000 82c0 	beq.w	8012182 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011c06:	f003 0320 	and.w	r3, r3, #32
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d013      	beq.n	8011c36 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011c12:	f003 0320 	and.w	r3, r3, #32
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d105      	bne.n	8011c26 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d007      	beq.n	8011c36 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d003      	beq.n	8011c36 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c32:	6878      	ldr	r0, [r7, #4]
 8011c34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	689b      	ldr	r3, [r3, #8]
 8011c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c4a:	2b40      	cmp	r3, #64	; 0x40
 8011c4c:	d005      	beq.n	8011c5a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011c52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d04f      	beq.n	8011cfa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011c5a:	6878      	ldr	r0, [r7, #4]
 8011c5c:	f001 fbf2 	bl	8013444 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	689b      	ldr	r3, [r3, #8]
 8011c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c6a:	2b40      	cmp	r3, #64	; 0x40
 8011c6c:	d141      	bne.n	8011cf2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	3308      	adds	r3, #8
 8011c74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011c7c:	e853 3f00 	ldrex	r3, [r3]
 8011c80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8011c84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011c8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	3308      	adds	r3, #8
 8011c96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8011c9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8011c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ca2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8011ca6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011caa:	e841 2300 	strex	r3, r2, [r1]
 8011cae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8011cb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d1d9      	bne.n	8011c6e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d013      	beq.n	8011cea <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011cc6:	4a14      	ldr	r2, [pc, #80]	; (8011d18 <HAL_UART_IRQHandler+0x2b8>)
 8011cc8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f7fa fd5a 	bl	800c788 <HAL_DMA_Abort_IT>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d017      	beq.n	8011d0a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ce0:	687a      	ldr	r2, [r7, #4]
 8011ce2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8011ce4:	4610      	mov	r0, r2
 8011ce6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011ce8:	e00f      	b.n	8011d0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011cea:	6878      	ldr	r0, [r7, #4]
 8011cec:	f000 fa56 	bl	801219c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011cf0:	e00b      	b.n	8011d0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f000 fa52 	bl	801219c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011cf8:	e007      	b.n	8011d0a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011cfa:	6878      	ldr	r0, [r7, #4]
 8011cfc:	f000 fa4e 	bl	801219c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	2200      	movs	r2, #0
 8011d04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8011d08:	e23b      	b.n	8012182 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d0a:	bf00      	nop
    return;
 8011d0c:	e239      	b.n	8012182 <HAL_UART_IRQHandler+0x722>
 8011d0e:	bf00      	nop
 8011d10:	10000001 	.word	0x10000001
 8011d14:	04000120 	.word	0x04000120
 8011d18:	08013511 	.word	0x08013511

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d20:	2b01      	cmp	r3, #1
 8011d22:	f040 81ce 	bne.w	80120c2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8011d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011d2a:	f003 0310 	and.w	r3, r3, #16
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	f000 81c7 	beq.w	80120c2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011d38:	f003 0310 	and.w	r3, r3, #16
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	f000 81c0 	beq.w	80120c2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	2210      	movs	r2, #16
 8011d48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	689b      	ldr	r3, [r3, #8]
 8011d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d54:	2b40      	cmp	r3, #64	; 0x40
 8011d56:	f040 813b 	bne.w	8011fd0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	4a8b      	ldr	r2, [pc, #556]	; (8011f90 <HAL_UART_IRQHandler+0x530>)
 8011d62:	4293      	cmp	r3, r2
 8011d64:	d059      	beq.n	8011e1a <HAL_UART_IRQHandler+0x3ba>
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	4a89      	ldr	r2, [pc, #548]	; (8011f94 <HAL_UART_IRQHandler+0x534>)
 8011d6e:	4293      	cmp	r3, r2
 8011d70:	d053      	beq.n	8011e1a <HAL_UART_IRQHandler+0x3ba>
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	4a87      	ldr	r2, [pc, #540]	; (8011f98 <HAL_UART_IRQHandler+0x538>)
 8011d7a:	4293      	cmp	r3, r2
 8011d7c:	d04d      	beq.n	8011e1a <HAL_UART_IRQHandler+0x3ba>
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	4a85      	ldr	r2, [pc, #532]	; (8011f9c <HAL_UART_IRQHandler+0x53c>)
 8011d86:	4293      	cmp	r3, r2
 8011d88:	d047      	beq.n	8011e1a <HAL_UART_IRQHandler+0x3ba>
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	4a83      	ldr	r2, [pc, #524]	; (8011fa0 <HAL_UART_IRQHandler+0x540>)
 8011d92:	4293      	cmp	r3, r2
 8011d94:	d041      	beq.n	8011e1a <HAL_UART_IRQHandler+0x3ba>
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	4a81      	ldr	r2, [pc, #516]	; (8011fa4 <HAL_UART_IRQHandler+0x544>)
 8011d9e:	4293      	cmp	r3, r2
 8011da0:	d03b      	beq.n	8011e1a <HAL_UART_IRQHandler+0x3ba>
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	4a7f      	ldr	r2, [pc, #508]	; (8011fa8 <HAL_UART_IRQHandler+0x548>)
 8011daa:	4293      	cmp	r3, r2
 8011dac:	d035      	beq.n	8011e1a <HAL_UART_IRQHandler+0x3ba>
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	4a7d      	ldr	r2, [pc, #500]	; (8011fac <HAL_UART_IRQHandler+0x54c>)
 8011db6:	4293      	cmp	r3, r2
 8011db8:	d02f      	beq.n	8011e1a <HAL_UART_IRQHandler+0x3ba>
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	4a7b      	ldr	r2, [pc, #492]	; (8011fb0 <HAL_UART_IRQHandler+0x550>)
 8011dc2:	4293      	cmp	r3, r2
 8011dc4:	d029      	beq.n	8011e1a <HAL_UART_IRQHandler+0x3ba>
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	4a79      	ldr	r2, [pc, #484]	; (8011fb4 <HAL_UART_IRQHandler+0x554>)
 8011dce:	4293      	cmp	r3, r2
 8011dd0:	d023      	beq.n	8011e1a <HAL_UART_IRQHandler+0x3ba>
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	4a77      	ldr	r2, [pc, #476]	; (8011fb8 <HAL_UART_IRQHandler+0x558>)
 8011dda:	4293      	cmp	r3, r2
 8011ddc:	d01d      	beq.n	8011e1a <HAL_UART_IRQHandler+0x3ba>
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	4a75      	ldr	r2, [pc, #468]	; (8011fbc <HAL_UART_IRQHandler+0x55c>)
 8011de6:	4293      	cmp	r3, r2
 8011de8:	d017      	beq.n	8011e1a <HAL_UART_IRQHandler+0x3ba>
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	4a73      	ldr	r2, [pc, #460]	; (8011fc0 <HAL_UART_IRQHandler+0x560>)
 8011df2:	4293      	cmp	r3, r2
 8011df4:	d011      	beq.n	8011e1a <HAL_UART_IRQHandler+0x3ba>
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	4a71      	ldr	r2, [pc, #452]	; (8011fc4 <HAL_UART_IRQHandler+0x564>)
 8011dfe:	4293      	cmp	r3, r2
 8011e00:	d00b      	beq.n	8011e1a <HAL_UART_IRQHandler+0x3ba>
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	4a6f      	ldr	r2, [pc, #444]	; (8011fc8 <HAL_UART_IRQHandler+0x568>)
 8011e0a:	4293      	cmp	r3, r2
 8011e0c:	d005      	beq.n	8011e1a <HAL_UART_IRQHandler+0x3ba>
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	4a6d      	ldr	r2, [pc, #436]	; (8011fcc <HAL_UART_IRQHandler+0x56c>)
 8011e16:	4293      	cmp	r3, r2
 8011e18:	d105      	bne.n	8011e26 <HAL_UART_IRQHandler+0x3c6>
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	685b      	ldr	r3, [r3, #4]
 8011e22:	b29b      	uxth	r3, r3
 8011e24:	e004      	b.n	8011e30 <HAL_UART_IRQHandler+0x3d0>
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	685b      	ldr	r3, [r3, #4]
 8011e2e:	b29b      	uxth	r3, r3
 8011e30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8011e34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	f000 81a4 	beq.w	8012186 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011e44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011e48:	429a      	cmp	r2, r3
 8011e4a:	f080 819c 	bcs.w	8012186 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011e54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e5c:	69db      	ldr	r3, [r3, #28]
 8011e5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e62:	f000 8086 	beq.w	8011f72 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011e72:	e853 3f00 	ldrex	r3, [r3]
 8011e76:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8011e7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011e7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011e82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	461a      	mov	r2, r3
 8011e8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011e90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011e94:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e98:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011e9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011ea0:	e841 2300 	strex	r3, r2, [r1]
 8011ea4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8011ea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d1da      	bne.n	8011e66 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	3308      	adds	r3, #8
 8011eb6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011eb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011eba:	e853 3f00 	ldrex	r3, [r3]
 8011ebe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011ec0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011ec2:	f023 0301 	bic.w	r3, r3, #1
 8011ec6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	3308      	adds	r3, #8
 8011ed0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011ed4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8011ed8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011eda:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011edc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011ee0:	e841 2300 	strex	r3, r2, [r1]
 8011ee4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011ee6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d1e1      	bne.n	8011eb0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	3308      	adds	r3, #8
 8011ef2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ef4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011ef6:	e853 3f00 	ldrex	r3, [r3]
 8011efa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011f02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	3308      	adds	r3, #8
 8011f0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8011f10:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011f12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f14:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011f16:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011f18:	e841 2300 	strex	r3, r2, [r1]
 8011f1c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011f1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d1e3      	bne.n	8011eec <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2220      	movs	r2, #32
 8011f28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	2200      	movs	r2, #0
 8011f30:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f3a:	e853 3f00 	ldrex	r3, [r3]
 8011f3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f42:	f023 0310 	bic.w	r3, r3, #16
 8011f46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	461a      	mov	r2, r3
 8011f50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011f54:	65bb      	str	r3, [r7, #88]	; 0x58
 8011f56:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011f5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011f5c:	e841 2300 	strex	r3, r2, [r1]
 8011f60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d1e4      	bne.n	8011f32 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f7fa f8ed 	bl	800c14c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011f7e:	b29b      	uxth	r3, r3
 8011f80:	1ad3      	subs	r3, r2, r3
 8011f82:	b29b      	uxth	r3, r3
 8011f84:	4619      	mov	r1, r3
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f000 f912 	bl	80121b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011f8c:	e0fb      	b.n	8012186 <HAL_UART_IRQHandler+0x726>
 8011f8e:	bf00      	nop
 8011f90:	40020010 	.word	0x40020010
 8011f94:	40020028 	.word	0x40020028
 8011f98:	40020040 	.word	0x40020040
 8011f9c:	40020058 	.word	0x40020058
 8011fa0:	40020070 	.word	0x40020070
 8011fa4:	40020088 	.word	0x40020088
 8011fa8:	400200a0 	.word	0x400200a0
 8011fac:	400200b8 	.word	0x400200b8
 8011fb0:	40020410 	.word	0x40020410
 8011fb4:	40020428 	.word	0x40020428
 8011fb8:	40020440 	.word	0x40020440
 8011fbc:	40020458 	.word	0x40020458
 8011fc0:	40020470 	.word	0x40020470
 8011fc4:	40020488 	.word	0x40020488
 8011fc8:	400204a0 	.word	0x400204a0
 8011fcc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011fdc:	b29b      	uxth	r3, r3
 8011fde:	1ad3      	subs	r3, r2, r3
 8011fe0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011fea:	b29b      	uxth	r3, r3
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	f000 80cc 	beq.w	801218a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8011ff2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	f000 80c7 	beq.w	801218a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	681b      	ldr	r3, [r3, #0]
 8012000:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012004:	e853 3f00 	ldrex	r3, [r3]
 8012008:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801200a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801200c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012010:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	461a      	mov	r2, r3
 801201a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801201e:	647b      	str	r3, [r7, #68]	; 0x44
 8012020:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012022:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012024:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012026:	e841 2300 	strex	r3, r2, [r1]
 801202a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801202c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801202e:	2b00      	cmp	r3, #0
 8012030:	d1e4      	bne.n	8011ffc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	3308      	adds	r3, #8
 8012038:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801203c:	e853 3f00 	ldrex	r3, [r3]
 8012040:	623b      	str	r3, [r7, #32]
   return(result);
 8012042:	6a3a      	ldr	r2, [r7, #32]
 8012044:	4b54      	ldr	r3, [pc, #336]	; (8012198 <HAL_UART_IRQHandler+0x738>)
 8012046:	4013      	ands	r3, r2
 8012048:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	3308      	adds	r3, #8
 8012052:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8012056:	633a      	str	r2, [r7, #48]	; 0x30
 8012058:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801205a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801205c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801205e:	e841 2300 	strex	r3, r2, [r1]
 8012062:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012066:	2b00      	cmp	r3, #0
 8012068:	d1e3      	bne.n	8012032 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2220      	movs	r2, #32
 801206e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2200      	movs	r2, #0
 8012076:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	2200      	movs	r2, #0
 801207c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012084:	693b      	ldr	r3, [r7, #16]
 8012086:	e853 3f00 	ldrex	r3, [r3]
 801208a:	60fb      	str	r3, [r7, #12]
   return(result);
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	f023 0310 	bic.w	r3, r3, #16
 8012092:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	461a      	mov	r2, r3
 801209c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80120a0:	61fb      	str	r3, [r7, #28]
 80120a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120a4:	69b9      	ldr	r1, [r7, #24]
 80120a6:	69fa      	ldr	r2, [r7, #28]
 80120a8:	e841 2300 	strex	r3, r2, [r1]
 80120ac:	617b      	str	r3, [r7, #20]
   return(result);
 80120ae:	697b      	ldr	r3, [r7, #20]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d1e4      	bne.n	801207e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80120b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80120b8:	4619      	mov	r1, r3
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f000 f878 	bl	80121b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80120c0:	e063      	b.n	801218a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80120c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80120c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d00e      	beq.n	80120ec <HAL_UART_IRQHandler+0x68c>
 80120ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80120d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d008      	beq.n	80120ec <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80120e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	f002 f853 	bl	8014190 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80120ea:	e051      	b.n	8012190 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80120ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80120f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d014      	beq.n	8012122 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80120f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80120fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012100:	2b00      	cmp	r3, #0
 8012102:	d105      	bne.n	8012110 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8012104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012108:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801210c:	2b00      	cmp	r3, #0
 801210e:	d008      	beq.n	8012122 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012114:	2b00      	cmp	r3, #0
 8012116:	d03a      	beq.n	801218e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801211c:	6878      	ldr	r0, [r7, #4]
 801211e:	4798      	blx	r3
    }
    return;
 8012120:	e035      	b.n	801218e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8012122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801212a:	2b00      	cmp	r3, #0
 801212c:	d009      	beq.n	8012142 <HAL_UART_IRQHandler+0x6e2>
 801212e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012136:	2b00      	cmp	r3, #0
 8012138:	d003      	beq.n	8012142 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 801213a:	6878      	ldr	r0, [r7, #4]
 801213c:	f001 fba0 	bl	8013880 <UART_EndTransmit_IT>
    return;
 8012140:	e026      	b.n	8012190 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8012142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012146:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801214a:	2b00      	cmp	r3, #0
 801214c:	d009      	beq.n	8012162 <HAL_UART_IRQHandler+0x702>
 801214e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012152:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012156:	2b00      	cmp	r3, #0
 8012158:	d003      	beq.n	8012162 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801215a:	6878      	ldr	r0, [r7, #4]
 801215c:	f002 f82c 	bl	80141b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012160:	e016      	b.n	8012190 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012166:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801216a:	2b00      	cmp	r3, #0
 801216c:	d010      	beq.n	8012190 <HAL_UART_IRQHandler+0x730>
 801216e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012172:	2b00      	cmp	r3, #0
 8012174:	da0c      	bge.n	8012190 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8012176:	6878      	ldr	r0, [r7, #4]
 8012178:	f002 f814 	bl	80141a4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801217c:	e008      	b.n	8012190 <HAL_UART_IRQHandler+0x730>
      return;
 801217e:	bf00      	nop
 8012180:	e006      	b.n	8012190 <HAL_UART_IRQHandler+0x730>
    return;
 8012182:	bf00      	nop
 8012184:	e004      	b.n	8012190 <HAL_UART_IRQHandler+0x730>
      return;
 8012186:	bf00      	nop
 8012188:	e002      	b.n	8012190 <HAL_UART_IRQHandler+0x730>
      return;
 801218a:	bf00      	nop
 801218c:	e000      	b.n	8012190 <HAL_UART_IRQHandler+0x730>
    return;
 801218e:	bf00      	nop
  }
}
 8012190:	37e8      	adds	r7, #232	; 0xe8
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}
 8012196:	bf00      	nop
 8012198:	effffffe 	.word	0xeffffffe

0801219c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801219c:	b480      	push	{r7}
 801219e:	b083      	sub	sp, #12
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80121a4:	bf00      	nop
 80121a6:	370c      	adds	r7, #12
 80121a8:	46bd      	mov	sp, r7
 80121aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ae:	4770      	bx	lr

080121b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80121b0:	b480      	push	{r7}
 80121b2:	b083      	sub	sp, #12
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	6078      	str	r0, [r7, #4]
 80121b8:	460b      	mov	r3, r1
 80121ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80121bc:	bf00      	nop
 80121be:	370c      	adds	r7, #12
 80121c0:	46bd      	mov	sp, r7
 80121c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c6:	4770      	bx	lr

080121c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80121c8:	b5b0      	push	{r4, r5, r7, lr}
 80121ca:	b08e      	sub	sp, #56	; 0x38
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80121d0:	2300      	movs	r3, #0
 80121d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	689a      	ldr	r2, [r3, #8]
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	691b      	ldr	r3, [r3, #16]
 80121de:	431a      	orrs	r2, r3
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	695b      	ldr	r3, [r3, #20]
 80121e4:	431a      	orrs	r2, r3
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	69db      	ldr	r3, [r3, #28]
 80121ea:	4313      	orrs	r3, r2
 80121ec:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	681a      	ldr	r2, [r3, #0]
 80121f4:	4bbf      	ldr	r3, [pc, #764]	; (80124f4 <UART_SetConfig+0x32c>)
 80121f6:	4013      	ands	r3, r2
 80121f8:	687a      	ldr	r2, [r7, #4]
 80121fa:	6812      	ldr	r2, [r2, #0]
 80121fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80121fe:	430b      	orrs	r3, r1
 8012200:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	685b      	ldr	r3, [r3, #4]
 8012208:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	68da      	ldr	r2, [r3, #12]
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	430a      	orrs	r2, r1
 8012216:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	699b      	ldr	r3, [r3, #24]
 801221c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	4ab5      	ldr	r2, [pc, #724]	; (80124f8 <UART_SetConfig+0x330>)
 8012224:	4293      	cmp	r3, r2
 8012226:	d004      	beq.n	8012232 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	6a1b      	ldr	r3, [r3, #32]
 801222c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801222e:	4313      	orrs	r3, r2
 8012230:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	689a      	ldr	r2, [r3, #8]
 8012238:	4bb0      	ldr	r3, [pc, #704]	; (80124fc <UART_SetConfig+0x334>)
 801223a:	4013      	ands	r3, r2
 801223c:	687a      	ldr	r2, [r7, #4]
 801223e:	6812      	ldr	r2, [r2, #0]
 8012240:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012242:	430b      	orrs	r3, r1
 8012244:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801224c:	f023 010f 	bic.w	r1, r3, #15
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	430a      	orrs	r2, r1
 801225a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	4aa7      	ldr	r2, [pc, #668]	; (8012500 <UART_SetConfig+0x338>)
 8012262:	4293      	cmp	r3, r2
 8012264:	d176      	bne.n	8012354 <UART_SetConfig+0x18c>
 8012266:	4ba7      	ldr	r3, [pc, #668]	; (8012504 <UART_SetConfig+0x33c>)
 8012268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801226a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801226e:	2b28      	cmp	r3, #40	; 0x28
 8012270:	d86c      	bhi.n	801234c <UART_SetConfig+0x184>
 8012272:	a201      	add	r2, pc, #4	; (adr r2, 8012278 <UART_SetConfig+0xb0>)
 8012274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012278:	0801231d 	.word	0x0801231d
 801227c:	0801234d 	.word	0x0801234d
 8012280:	0801234d 	.word	0x0801234d
 8012284:	0801234d 	.word	0x0801234d
 8012288:	0801234d 	.word	0x0801234d
 801228c:	0801234d 	.word	0x0801234d
 8012290:	0801234d 	.word	0x0801234d
 8012294:	0801234d 	.word	0x0801234d
 8012298:	08012325 	.word	0x08012325
 801229c:	0801234d 	.word	0x0801234d
 80122a0:	0801234d 	.word	0x0801234d
 80122a4:	0801234d 	.word	0x0801234d
 80122a8:	0801234d 	.word	0x0801234d
 80122ac:	0801234d 	.word	0x0801234d
 80122b0:	0801234d 	.word	0x0801234d
 80122b4:	0801234d 	.word	0x0801234d
 80122b8:	0801232d 	.word	0x0801232d
 80122bc:	0801234d 	.word	0x0801234d
 80122c0:	0801234d 	.word	0x0801234d
 80122c4:	0801234d 	.word	0x0801234d
 80122c8:	0801234d 	.word	0x0801234d
 80122cc:	0801234d 	.word	0x0801234d
 80122d0:	0801234d 	.word	0x0801234d
 80122d4:	0801234d 	.word	0x0801234d
 80122d8:	08012335 	.word	0x08012335
 80122dc:	0801234d 	.word	0x0801234d
 80122e0:	0801234d 	.word	0x0801234d
 80122e4:	0801234d 	.word	0x0801234d
 80122e8:	0801234d 	.word	0x0801234d
 80122ec:	0801234d 	.word	0x0801234d
 80122f0:	0801234d 	.word	0x0801234d
 80122f4:	0801234d 	.word	0x0801234d
 80122f8:	0801233d 	.word	0x0801233d
 80122fc:	0801234d 	.word	0x0801234d
 8012300:	0801234d 	.word	0x0801234d
 8012304:	0801234d 	.word	0x0801234d
 8012308:	0801234d 	.word	0x0801234d
 801230c:	0801234d 	.word	0x0801234d
 8012310:	0801234d 	.word	0x0801234d
 8012314:	0801234d 	.word	0x0801234d
 8012318:	08012345 	.word	0x08012345
 801231c:	2301      	movs	r3, #1
 801231e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012322:	e326      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012324:	2304      	movs	r3, #4
 8012326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801232a:	e322      	b.n	8012972 <UART_SetConfig+0x7aa>
 801232c:	2308      	movs	r3, #8
 801232e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012332:	e31e      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012334:	2310      	movs	r3, #16
 8012336:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801233a:	e31a      	b.n	8012972 <UART_SetConfig+0x7aa>
 801233c:	2320      	movs	r3, #32
 801233e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012342:	e316      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012344:	2340      	movs	r3, #64	; 0x40
 8012346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801234a:	e312      	b.n	8012972 <UART_SetConfig+0x7aa>
 801234c:	2380      	movs	r3, #128	; 0x80
 801234e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012352:	e30e      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	4a6b      	ldr	r2, [pc, #428]	; (8012508 <UART_SetConfig+0x340>)
 801235a:	4293      	cmp	r3, r2
 801235c:	d130      	bne.n	80123c0 <UART_SetConfig+0x1f8>
 801235e:	4b69      	ldr	r3, [pc, #420]	; (8012504 <UART_SetConfig+0x33c>)
 8012360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012362:	f003 0307 	and.w	r3, r3, #7
 8012366:	2b05      	cmp	r3, #5
 8012368:	d826      	bhi.n	80123b8 <UART_SetConfig+0x1f0>
 801236a:	a201      	add	r2, pc, #4	; (adr r2, 8012370 <UART_SetConfig+0x1a8>)
 801236c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012370:	08012389 	.word	0x08012389
 8012374:	08012391 	.word	0x08012391
 8012378:	08012399 	.word	0x08012399
 801237c:	080123a1 	.word	0x080123a1
 8012380:	080123a9 	.word	0x080123a9
 8012384:	080123b1 	.word	0x080123b1
 8012388:	2300      	movs	r3, #0
 801238a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801238e:	e2f0      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012390:	2304      	movs	r3, #4
 8012392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012396:	e2ec      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012398:	2308      	movs	r3, #8
 801239a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801239e:	e2e8      	b.n	8012972 <UART_SetConfig+0x7aa>
 80123a0:	2310      	movs	r3, #16
 80123a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80123a6:	e2e4      	b.n	8012972 <UART_SetConfig+0x7aa>
 80123a8:	2320      	movs	r3, #32
 80123aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80123ae:	e2e0      	b.n	8012972 <UART_SetConfig+0x7aa>
 80123b0:	2340      	movs	r3, #64	; 0x40
 80123b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80123b6:	e2dc      	b.n	8012972 <UART_SetConfig+0x7aa>
 80123b8:	2380      	movs	r3, #128	; 0x80
 80123ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80123be:	e2d8      	b.n	8012972 <UART_SetConfig+0x7aa>
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	4a51      	ldr	r2, [pc, #324]	; (801250c <UART_SetConfig+0x344>)
 80123c6:	4293      	cmp	r3, r2
 80123c8:	d130      	bne.n	801242c <UART_SetConfig+0x264>
 80123ca:	4b4e      	ldr	r3, [pc, #312]	; (8012504 <UART_SetConfig+0x33c>)
 80123cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80123ce:	f003 0307 	and.w	r3, r3, #7
 80123d2:	2b05      	cmp	r3, #5
 80123d4:	d826      	bhi.n	8012424 <UART_SetConfig+0x25c>
 80123d6:	a201      	add	r2, pc, #4	; (adr r2, 80123dc <UART_SetConfig+0x214>)
 80123d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123dc:	080123f5 	.word	0x080123f5
 80123e0:	080123fd 	.word	0x080123fd
 80123e4:	08012405 	.word	0x08012405
 80123e8:	0801240d 	.word	0x0801240d
 80123ec:	08012415 	.word	0x08012415
 80123f0:	0801241d 	.word	0x0801241d
 80123f4:	2300      	movs	r3, #0
 80123f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80123fa:	e2ba      	b.n	8012972 <UART_SetConfig+0x7aa>
 80123fc:	2304      	movs	r3, #4
 80123fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012402:	e2b6      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012404:	2308      	movs	r3, #8
 8012406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801240a:	e2b2      	b.n	8012972 <UART_SetConfig+0x7aa>
 801240c:	2310      	movs	r3, #16
 801240e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012412:	e2ae      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012414:	2320      	movs	r3, #32
 8012416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801241a:	e2aa      	b.n	8012972 <UART_SetConfig+0x7aa>
 801241c:	2340      	movs	r3, #64	; 0x40
 801241e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012422:	e2a6      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012424:	2380      	movs	r3, #128	; 0x80
 8012426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801242a:	e2a2      	b.n	8012972 <UART_SetConfig+0x7aa>
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	4a37      	ldr	r2, [pc, #220]	; (8012510 <UART_SetConfig+0x348>)
 8012432:	4293      	cmp	r3, r2
 8012434:	d130      	bne.n	8012498 <UART_SetConfig+0x2d0>
 8012436:	4b33      	ldr	r3, [pc, #204]	; (8012504 <UART_SetConfig+0x33c>)
 8012438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801243a:	f003 0307 	and.w	r3, r3, #7
 801243e:	2b05      	cmp	r3, #5
 8012440:	d826      	bhi.n	8012490 <UART_SetConfig+0x2c8>
 8012442:	a201      	add	r2, pc, #4	; (adr r2, 8012448 <UART_SetConfig+0x280>)
 8012444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012448:	08012461 	.word	0x08012461
 801244c:	08012469 	.word	0x08012469
 8012450:	08012471 	.word	0x08012471
 8012454:	08012479 	.word	0x08012479
 8012458:	08012481 	.word	0x08012481
 801245c:	08012489 	.word	0x08012489
 8012460:	2300      	movs	r3, #0
 8012462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012466:	e284      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012468:	2304      	movs	r3, #4
 801246a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801246e:	e280      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012470:	2308      	movs	r3, #8
 8012472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012476:	e27c      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012478:	2310      	movs	r3, #16
 801247a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801247e:	e278      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012480:	2320      	movs	r3, #32
 8012482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012486:	e274      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012488:	2340      	movs	r3, #64	; 0x40
 801248a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801248e:	e270      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012490:	2380      	movs	r3, #128	; 0x80
 8012492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012496:	e26c      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	4a1d      	ldr	r2, [pc, #116]	; (8012514 <UART_SetConfig+0x34c>)
 801249e:	4293      	cmp	r3, r2
 80124a0:	d142      	bne.n	8012528 <UART_SetConfig+0x360>
 80124a2:	4b18      	ldr	r3, [pc, #96]	; (8012504 <UART_SetConfig+0x33c>)
 80124a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80124a6:	f003 0307 	and.w	r3, r3, #7
 80124aa:	2b05      	cmp	r3, #5
 80124ac:	d838      	bhi.n	8012520 <UART_SetConfig+0x358>
 80124ae:	a201      	add	r2, pc, #4	; (adr r2, 80124b4 <UART_SetConfig+0x2ec>)
 80124b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124b4:	080124cd 	.word	0x080124cd
 80124b8:	080124d5 	.word	0x080124d5
 80124bc:	080124dd 	.word	0x080124dd
 80124c0:	080124e5 	.word	0x080124e5
 80124c4:	080124ed 	.word	0x080124ed
 80124c8:	08012519 	.word	0x08012519
 80124cc:	2300      	movs	r3, #0
 80124ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80124d2:	e24e      	b.n	8012972 <UART_SetConfig+0x7aa>
 80124d4:	2304      	movs	r3, #4
 80124d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80124da:	e24a      	b.n	8012972 <UART_SetConfig+0x7aa>
 80124dc:	2308      	movs	r3, #8
 80124de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80124e2:	e246      	b.n	8012972 <UART_SetConfig+0x7aa>
 80124e4:	2310      	movs	r3, #16
 80124e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80124ea:	e242      	b.n	8012972 <UART_SetConfig+0x7aa>
 80124ec:	2320      	movs	r3, #32
 80124ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80124f2:	e23e      	b.n	8012972 <UART_SetConfig+0x7aa>
 80124f4:	cfff69f3 	.word	0xcfff69f3
 80124f8:	58000c00 	.word	0x58000c00
 80124fc:	11fff4ff 	.word	0x11fff4ff
 8012500:	40011000 	.word	0x40011000
 8012504:	58024400 	.word	0x58024400
 8012508:	40004400 	.word	0x40004400
 801250c:	40004800 	.word	0x40004800
 8012510:	40004c00 	.word	0x40004c00
 8012514:	40005000 	.word	0x40005000
 8012518:	2340      	movs	r3, #64	; 0x40
 801251a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801251e:	e228      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012520:	2380      	movs	r3, #128	; 0x80
 8012522:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012526:	e224      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	4ab1      	ldr	r2, [pc, #708]	; (80127f4 <UART_SetConfig+0x62c>)
 801252e:	4293      	cmp	r3, r2
 8012530:	d176      	bne.n	8012620 <UART_SetConfig+0x458>
 8012532:	4bb1      	ldr	r3, [pc, #708]	; (80127f8 <UART_SetConfig+0x630>)
 8012534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801253a:	2b28      	cmp	r3, #40	; 0x28
 801253c:	d86c      	bhi.n	8012618 <UART_SetConfig+0x450>
 801253e:	a201      	add	r2, pc, #4	; (adr r2, 8012544 <UART_SetConfig+0x37c>)
 8012540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012544:	080125e9 	.word	0x080125e9
 8012548:	08012619 	.word	0x08012619
 801254c:	08012619 	.word	0x08012619
 8012550:	08012619 	.word	0x08012619
 8012554:	08012619 	.word	0x08012619
 8012558:	08012619 	.word	0x08012619
 801255c:	08012619 	.word	0x08012619
 8012560:	08012619 	.word	0x08012619
 8012564:	080125f1 	.word	0x080125f1
 8012568:	08012619 	.word	0x08012619
 801256c:	08012619 	.word	0x08012619
 8012570:	08012619 	.word	0x08012619
 8012574:	08012619 	.word	0x08012619
 8012578:	08012619 	.word	0x08012619
 801257c:	08012619 	.word	0x08012619
 8012580:	08012619 	.word	0x08012619
 8012584:	080125f9 	.word	0x080125f9
 8012588:	08012619 	.word	0x08012619
 801258c:	08012619 	.word	0x08012619
 8012590:	08012619 	.word	0x08012619
 8012594:	08012619 	.word	0x08012619
 8012598:	08012619 	.word	0x08012619
 801259c:	08012619 	.word	0x08012619
 80125a0:	08012619 	.word	0x08012619
 80125a4:	08012601 	.word	0x08012601
 80125a8:	08012619 	.word	0x08012619
 80125ac:	08012619 	.word	0x08012619
 80125b0:	08012619 	.word	0x08012619
 80125b4:	08012619 	.word	0x08012619
 80125b8:	08012619 	.word	0x08012619
 80125bc:	08012619 	.word	0x08012619
 80125c0:	08012619 	.word	0x08012619
 80125c4:	08012609 	.word	0x08012609
 80125c8:	08012619 	.word	0x08012619
 80125cc:	08012619 	.word	0x08012619
 80125d0:	08012619 	.word	0x08012619
 80125d4:	08012619 	.word	0x08012619
 80125d8:	08012619 	.word	0x08012619
 80125dc:	08012619 	.word	0x08012619
 80125e0:	08012619 	.word	0x08012619
 80125e4:	08012611 	.word	0x08012611
 80125e8:	2301      	movs	r3, #1
 80125ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80125ee:	e1c0      	b.n	8012972 <UART_SetConfig+0x7aa>
 80125f0:	2304      	movs	r3, #4
 80125f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80125f6:	e1bc      	b.n	8012972 <UART_SetConfig+0x7aa>
 80125f8:	2308      	movs	r3, #8
 80125fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80125fe:	e1b8      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012600:	2310      	movs	r3, #16
 8012602:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012606:	e1b4      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012608:	2320      	movs	r3, #32
 801260a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801260e:	e1b0      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012610:	2340      	movs	r3, #64	; 0x40
 8012612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012616:	e1ac      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012618:	2380      	movs	r3, #128	; 0x80
 801261a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801261e:	e1a8      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	4a75      	ldr	r2, [pc, #468]	; (80127fc <UART_SetConfig+0x634>)
 8012626:	4293      	cmp	r3, r2
 8012628:	d130      	bne.n	801268c <UART_SetConfig+0x4c4>
 801262a:	4b73      	ldr	r3, [pc, #460]	; (80127f8 <UART_SetConfig+0x630>)
 801262c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801262e:	f003 0307 	and.w	r3, r3, #7
 8012632:	2b05      	cmp	r3, #5
 8012634:	d826      	bhi.n	8012684 <UART_SetConfig+0x4bc>
 8012636:	a201      	add	r2, pc, #4	; (adr r2, 801263c <UART_SetConfig+0x474>)
 8012638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801263c:	08012655 	.word	0x08012655
 8012640:	0801265d 	.word	0x0801265d
 8012644:	08012665 	.word	0x08012665
 8012648:	0801266d 	.word	0x0801266d
 801264c:	08012675 	.word	0x08012675
 8012650:	0801267d 	.word	0x0801267d
 8012654:	2300      	movs	r3, #0
 8012656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801265a:	e18a      	b.n	8012972 <UART_SetConfig+0x7aa>
 801265c:	2304      	movs	r3, #4
 801265e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012662:	e186      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012664:	2308      	movs	r3, #8
 8012666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801266a:	e182      	b.n	8012972 <UART_SetConfig+0x7aa>
 801266c:	2310      	movs	r3, #16
 801266e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012672:	e17e      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012674:	2320      	movs	r3, #32
 8012676:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801267a:	e17a      	b.n	8012972 <UART_SetConfig+0x7aa>
 801267c:	2340      	movs	r3, #64	; 0x40
 801267e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012682:	e176      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012684:	2380      	movs	r3, #128	; 0x80
 8012686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801268a:	e172      	b.n	8012972 <UART_SetConfig+0x7aa>
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	4a5b      	ldr	r2, [pc, #364]	; (8012800 <UART_SetConfig+0x638>)
 8012692:	4293      	cmp	r3, r2
 8012694:	d130      	bne.n	80126f8 <UART_SetConfig+0x530>
 8012696:	4b58      	ldr	r3, [pc, #352]	; (80127f8 <UART_SetConfig+0x630>)
 8012698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801269a:	f003 0307 	and.w	r3, r3, #7
 801269e:	2b05      	cmp	r3, #5
 80126a0:	d826      	bhi.n	80126f0 <UART_SetConfig+0x528>
 80126a2:	a201      	add	r2, pc, #4	; (adr r2, 80126a8 <UART_SetConfig+0x4e0>)
 80126a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126a8:	080126c1 	.word	0x080126c1
 80126ac:	080126c9 	.word	0x080126c9
 80126b0:	080126d1 	.word	0x080126d1
 80126b4:	080126d9 	.word	0x080126d9
 80126b8:	080126e1 	.word	0x080126e1
 80126bc:	080126e9 	.word	0x080126e9
 80126c0:	2300      	movs	r3, #0
 80126c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80126c6:	e154      	b.n	8012972 <UART_SetConfig+0x7aa>
 80126c8:	2304      	movs	r3, #4
 80126ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80126ce:	e150      	b.n	8012972 <UART_SetConfig+0x7aa>
 80126d0:	2308      	movs	r3, #8
 80126d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80126d6:	e14c      	b.n	8012972 <UART_SetConfig+0x7aa>
 80126d8:	2310      	movs	r3, #16
 80126da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80126de:	e148      	b.n	8012972 <UART_SetConfig+0x7aa>
 80126e0:	2320      	movs	r3, #32
 80126e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80126e6:	e144      	b.n	8012972 <UART_SetConfig+0x7aa>
 80126e8:	2340      	movs	r3, #64	; 0x40
 80126ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80126ee:	e140      	b.n	8012972 <UART_SetConfig+0x7aa>
 80126f0:	2380      	movs	r3, #128	; 0x80
 80126f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80126f6:	e13c      	b.n	8012972 <UART_SetConfig+0x7aa>
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	4a41      	ldr	r2, [pc, #260]	; (8012804 <UART_SetConfig+0x63c>)
 80126fe:	4293      	cmp	r3, r2
 8012700:	f040 8082 	bne.w	8012808 <UART_SetConfig+0x640>
 8012704:	4b3c      	ldr	r3, [pc, #240]	; (80127f8 <UART_SetConfig+0x630>)
 8012706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012708:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801270c:	2b28      	cmp	r3, #40	; 0x28
 801270e:	d86d      	bhi.n	80127ec <UART_SetConfig+0x624>
 8012710:	a201      	add	r2, pc, #4	; (adr r2, 8012718 <UART_SetConfig+0x550>)
 8012712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012716:	bf00      	nop
 8012718:	080127bd 	.word	0x080127bd
 801271c:	080127ed 	.word	0x080127ed
 8012720:	080127ed 	.word	0x080127ed
 8012724:	080127ed 	.word	0x080127ed
 8012728:	080127ed 	.word	0x080127ed
 801272c:	080127ed 	.word	0x080127ed
 8012730:	080127ed 	.word	0x080127ed
 8012734:	080127ed 	.word	0x080127ed
 8012738:	080127c5 	.word	0x080127c5
 801273c:	080127ed 	.word	0x080127ed
 8012740:	080127ed 	.word	0x080127ed
 8012744:	080127ed 	.word	0x080127ed
 8012748:	080127ed 	.word	0x080127ed
 801274c:	080127ed 	.word	0x080127ed
 8012750:	080127ed 	.word	0x080127ed
 8012754:	080127ed 	.word	0x080127ed
 8012758:	080127cd 	.word	0x080127cd
 801275c:	080127ed 	.word	0x080127ed
 8012760:	080127ed 	.word	0x080127ed
 8012764:	080127ed 	.word	0x080127ed
 8012768:	080127ed 	.word	0x080127ed
 801276c:	080127ed 	.word	0x080127ed
 8012770:	080127ed 	.word	0x080127ed
 8012774:	080127ed 	.word	0x080127ed
 8012778:	080127d5 	.word	0x080127d5
 801277c:	080127ed 	.word	0x080127ed
 8012780:	080127ed 	.word	0x080127ed
 8012784:	080127ed 	.word	0x080127ed
 8012788:	080127ed 	.word	0x080127ed
 801278c:	080127ed 	.word	0x080127ed
 8012790:	080127ed 	.word	0x080127ed
 8012794:	080127ed 	.word	0x080127ed
 8012798:	080127dd 	.word	0x080127dd
 801279c:	080127ed 	.word	0x080127ed
 80127a0:	080127ed 	.word	0x080127ed
 80127a4:	080127ed 	.word	0x080127ed
 80127a8:	080127ed 	.word	0x080127ed
 80127ac:	080127ed 	.word	0x080127ed
 80127b0:	080127ed 	.word	0x080127ed
 80127b4:	080127ed 	.word	0x080127ed
 80127b8:	080127e5 	.word	0x080127e5
 80127bc:	2301      	movs	r3, #1
 80127be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80127c2:	e0d6      	b.n	8012972 <UART_SetConfig+0x7aa>
 80127c4:	2304      	movs	r3, #4
 80127c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80127ca:	e0d2      	b.n	8012972 <UART_SetConfig+0x7aa>
 80127cc:	2308      	movs	r3, #8
 80127ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80127d2:	e0ce      	b.n	8012972 <UART_SetConfig+0x7aa>
 80127d4:	2310      	movs	r3, #16
 80127d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80127da:	e0ca      	b.n	8012972 <UART_SetConfig+0x7aa>
 80127dc:	2320      	movs	r3, #32
 80127de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80127e2:	e0c6      	b.n	8012972 <UART_SetConfig+0x7aa>
 80127e4:	2340      	movs	r3, #64	; 0x40
 80127e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80127ea:	e0c2      	b.n	8012972 <UART_SetConfig+0x7aa>
 80127ec:	2380      	movs	r3, #128	; 0x80
 80127ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80127f2:	e0be      	b.n	8012972 <UART_SetConfig+0x7aa>
 80127f4:	40011400 	.word	0x40011400
 80127f8:	58024400 	.word	0x58024400
 80127fc:	40007800 	.word	0x40007800
 8012800:	40007c00 	.word	0x40007c00
 8012804:	40011800 	.word	0x40011800
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	4aad      	ldr	r2, [pc, #692]	; (8012ac4 <UART_SetConfig+0x8fc>)
 801280e:	4293      	cmp	r3, r2
 8012810:	d176      	bne.n	8012900 <UART_SetConfig+0x738>
 8012812:	4bad      	ldr	r3, [pc, #692]	; (8012ac8 <UART_SetConfig+0x900>)
 8012814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012816:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801281a:	2b28      	cmp	r3, #40	; 0x28
 801281c:	d86c      	bhi.n	80128f8 <UART_SetConfig+0x730>
 801281e:	a201      	add	r2, pc, #4	; (adr r2, 8012824 <UART_SetConfig+0x65c>)
 8012820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012824:	080128c9 	.word	0x080128c9
 8012828:	080128f9 	.word	0x080128f9
 801282c:	080128f9 	.word	0x080128f9
 8012830:	080128f9 	.word	0x080128f9
 8012834:	080128f9 	.word	0x080128f9
 8012838:	080128f9 	.word	0x080128f9
 801283c:	080128f9 	.word	0x080128f9
 8012840:	080128f9 	.word	0x080128f9
 8012844:	080128d1 	.word	0x080128d1
 8012848:	080128f9 	.word	0x080128f9
 801284c:	080128f9 	.word	0x080128f9
 8012850:	080128f9 	.word	0x080128f9
 8012854:	080128f9 	.word	0x080128f9
 8012858:	080128f9 	.word	0x080128f9
 801285c:	080128f9 	.word	0x080128f9
 8012860:	080128f9 	.word	0x080128f9
 8012864:	080128d9 	.word	0x080128d9
 8012868:	080128f9 	.word	0x080128f9
 801286c:	080128f9 	.word	0x080128f9
 8012870:	080128f9 	.word	0x080128f9
 8012874:	080128f9 	.word	0x080128f9
 8012878:	080128f9 	.word	0x080128f9
 801287c:	080128f9 	.word	0x080128f9
 8012880:	080128f9 	.word	0x080128f9
 8012884:	080128e1 	.word	0x080128e1
 8012888:	080128f9 	.word	0x080128f9
 801288c:	080128f9 	.word	0x080128f9
 8012890:	080128f9 	.word	0x080128f9
 8012894:	080128f9 	.word	0x080128f9
 8012898:	080128f9 	.word	0x080128f9
 801289c:	080128f9 	.word	0x080128f9
 80128a0:	080128f9 	.word	0x080128f9
 80128a4:	080128e9 	.word	0x080128e9
 80128a8:	080128f9 	.word	0x080128f9
 80128ac:	080128f9 	.word	0x080128f9
 80128b0:	080128f9 	.word	0x080128f9
 80128b4:	080128f9 	.word	0x080128f9
 80128b8:	080128f9 	.word	0x080128f9
 80128bc:	080128f9 	.word	0x080128f9
 80128c0:	080128f9 	.word	0x080128f9
 80128c4:	080128f1 	.word	0x080128f1
 80128c8:	2301      	movs	r3, #1
 80128ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80128ce:	e050      	b.n	8012972 <UART_SetConfig+0x7aa>
 80128d0:	2304      	movs	r3, #4
 80128d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80128d6:	e04c      	b.n	8012972 <UART_SetConfig+0x7aa>
 80128d8:	2308      	movs	r3, #8
 80128da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80128de:	e048      	b.n	8012972 <UART_SetConfig+0x7aa>
 80128e0:	2310      	movs	r3, #16
 80128e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80128e6:	e044      	b.n	8012972 <UART_SetConfig+0x7aa>
 80128e8:	2320      	movs	r3, #32
 80128ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80128ee:	e040      	b.n	8012972 <UART_SetConfig+0x7aa>
 80128f0:	2340      	movs	r3, #64	; 0x40
 80128f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80128f6:	e03c      	b.n	8012972 <UART_SetConfig+0x7aa>
 80128f8:	2380      	movs	r3, #128	; 0x80
 80128fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80128fe:	e038      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	4a71      	ldr	r2, [pc, #452]	; (8012acc <UART_SetConfig+0x904>)
 8012906:	4293      	cmp	r3, r2
 8012908:	d130      	bne.n	801296c <UART_SetConfig+0x7a4>
 801290a:	4b6f      	ldr	r3, [pc, #444]	; (8012ac8 <UART_SetConfig+0x900>)
 801290c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801290e:	f003 0307 	and.w	r3, r3, #7
 8012912:	2b05      	cmp	r3, #5
 8012914:	d826      	bhi.n	8012964 <UART_SetConfig+0x79c>
 8012916:	a201      	add	r2, pc, #4	; (adr r2, 801291c <UART_SetConfig+0x754>)
 8012918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801291c:	08012935 	.word	0x08012935
 8012920:	0801293d 	.word	0x0801293d
 8012924:	08012945 	.word	0x08012945
 8012928:	0801294d 	.word	0x0801294d
 801292c:	08012955 	.word	0x08012955
 8012930:	0801295d 	.word	0x0801295d
 8012934:	2302      	movs	r3, #2
 8012936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801293a:	e01a      	b.n	8012972 <UART_SetConfig+0x7aa>
 801293c:	2304      	movs	r3, #4
 801293e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012942:	e016      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012944:	2308      	movs	r3, #8
 8012946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801294a:	e012      	b.n	8012972 <UART_SetConfig+0x7aa>
 801294c:	2310      	movs	r3, #16
 801294e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012952:	e00e      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012954:	2320      	movs	r3, #32
 8012956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801295a:	e00a      	b.n	8012972 <UART_SetConfig+0x7aa>
 801295c:	2340      	movs	r3, #64	; 0x40
 801295e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012962:	e006      	b.n	8012972 <UART_SetConfig+0x7aa>
 8012964:	2380      	movs	r3, #128	; 0x80
 8012966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801296a:	e002      	b.n	8012972 <UART_SetConfig+0x7aa>
 801296c:	2380      	movs	r3, #128	; 0x80
 801296e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	4a55      	ldr	r2, [pc, #340]	; (8012acc <UART_SetConfig+0x904>)
 8012978:	4293      	cmp	r3, r2
 801297a:	f040 80f0 	bne.w	8012b5e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801297e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012982:	2b20      	cmp	r3, #32
 8012984:	dc46      	bgt.n	8012a14 <UART_SetConfig+0x84c>
 8012986:	2b02      	cmp	r3, #2
 8012988:	db75      	blt.n	8012a76 <UART_SetConfig+0x8ae>
 801298a:	3b02      	subs	r3, #2
 801298c:	2b1e      	cmp	r3, #30
 801298e:	d872      	bhi.n	8012a76 <UART_SetConfig+0x8ae>
 8012990:	a201      	add	r2, pc, #4	; (adr r2, 8012998 <UART_SetConfig+0x7d0>)
 8012992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012996:	bf00      	nop
 8012998:	08012a1b 	.word	0x08012a1b
 801299c:	08012a77 	.word	0x08012a77
 80129a0:	08012a23 	.word	0x08012a23
 80129a4:	08012a77 	.word	0x08012a77
 80129a8:	08012a77 	.word	0x08012a77
 80129ac:	08012a77 	.word	0x08012a77
 80129b0:	08012a33 	.word	0x08012a33
 80129b4:	08012a77 	.word	0x08012a77
 80129b8:	08012a77 	.word	0x08012a77
 80129bc:	08012a77 	.word	0x08012a77
 80129c0:	08012a77 	.word	0x08012a77
 80129c4:	08012a77 	.word	0x08012a77
 80129c8:	08012a77 	.word	0x08012a77
 80129cc:	08012a77 	.word	0x08012a77
 80129d0:	08012a43 	.word	0x08012a43
 80129d4:	08012a77 	.word	0x08012a77
 80129d8:	08012a77 	.word	0x08012a77
 80129dc:	08012a77 	.word	0x08012a77
 80129e0:	08012a77 	.word	0x08012a77
 80129e4:	08012a77 	.word	0x08012a77
 80129e8:	08012a77 	.word	0x08012a77
 80129ec:	08012a77 	.word	0x08012a77
 80129f0:	08012a77 	.word	0x08012a77
 80129f4:	08012a77 	.word	0x08012a77
 80129f8:	08012a77 	.word	0x08012a77
 80129fc:	08012a77 	.word	0x08012a77
 8012a00:	08012a77 	.word	0x08012a77
 8012a04:	08012a77 	.word	0x08012a77
 8012a08:	08012a77 	.word	0x08012a77
 8012a0c:	08012a77 	.word	0x08012a77
 8012a10:	08012a69 	.word	0x08012a69
 8012a14:	2b40      	cmp	r3, #64	; 0x40
 8012a16:	d02a      	beq.n	8012a6e <UART_SetConfig+0x8a6>
 8012a18:	e02d      	b.n	8012a76 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8012a1a:	f7fc fd77 	bl	800f50c <HAL_RCCEx_GetD3PCLK1Freq>
 8012a1e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8012a20:	e02f      	b.n	8012a82 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012a22:	f107 0314 	add.w	r3, r7, #20
 8012a26:	4618      	mov	r0, r3
 8012a28:	f7fc fd86 	bl	800f538 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012a2c:	69bb      	ldr	r3, [r7, #24]
 8012a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012a30:	e027      	b.n	8012a82 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012a32:	f107 0308 	add.w	r3, r7, #8
 8012a36:	4618      	mov	r0, r3
 8012a38:	f7fc fed2 	bl	800f7e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012a40:	e01f      	b.n	8012a82 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012a42:	4b21      	ldr	r3, [pc, #132]	; (8012ac8 <UART_SetConfig+0x900>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	f003 0320 	and.w	r3, r3, #32
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d009      	beq.n	8012a62 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012a4e:	4b1e      	ldr	r3, [pc, #120]	; (8012ac8 <UART_SetConfig+0x900>)
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	08db      	lsrs	r3, r3, #3
 8012a54:	f003 0303 	and.w	r3, r3, #3
 8012a58:	4a1d      	ldr	r2, [pc, #116]	; (8012ad0 <UART_SetConfig+0x908>)
 8012a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8012a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012a60:	e00f      	b.n	8012a82 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8012a62:	4b1b      	ldr	r3, [pc, #108]	; (8012ad0 <UART_SetConfig+0x908>)
 8012a64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012a66:	e00c      	b.n	8012a82 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012a68:	4b1a      	ldr	r3, [pc, #104]	; (8012ad4 <UART_SetConfig+0x90c>)
 8012a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012a6c:	e009      	b.n	8012a82 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012a72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012a74:	e005      	b.n	8012a82 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8012a76:	2300      	movs	r3, #0
 8012a78:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8012a7a:	2301      	movs	r3, #1
 8012a7c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8012a80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	f000 81e6 	beq.w	8012e56 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a8e:	4a12      	ldr	r2, [pc, #72]	; (8012ad8 <UART_SetConfig+0x910>)
 8012a90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012a94:	461a      	mov	r2, r3
 8012a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a98:	fbb3 f3f2 	udiv	r3, r3, r2
 8012a9c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	685a      	ldr	r2, [r3, #4]
 8012aa2:	4613      	mov	r3, r2
 8012aa4:	005b      	lsls	r3, r3, #1
 8012aa6:	4413      	add	r3, r2
 8012aa8:	6a3a      	ldr	r2, [r7, #32]
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d305      	bcc.n	8012aba <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	685b      	ldr	r3, [r3, #4]
 8012ab2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012ab4:	6a3a      	ldr	r2, [r7, #32]
 8012ab6:	429a      	cmp	r2, r3
 8012ab8:	d910      	bls.n	8012adc <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8012aba:	2301      	movs	r3, #1
 8012abc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8012ac0:	e1c9      	b.n	8012e56 <UART_SetConfig+0xc8e>
 8012ac2:	bf00      	nop
 8012ac4:	40011c00 	.word	0x40011c00
 8012ac8:	58024400 	.word	0x58024400
 8012acc:	58000c00 	.word	0x58000c00
 8012ad0:	03d09000 	.word	0x03d09000
 8012ad4:	003d0900 	.word	0x003d0900
 8012ad8:	08018320 	.word	0x08018320
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f04f 0100 	mov.w	r1, #0
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ae8:	4ac1      	ldr	r2, [pc, #772]	; (8012df0 <UART_SetConfig+0xc28>)
 8012aea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012aee:	b29a      	uxth	r2, r3
 8012af0:	f04f 0300 	mov.w	r3, #0
 8012af4:	f7ed fc64 	bl	80003c0 <__aeabi_uldivmod>
 8012af8:	4602      	mov	r2, r0
 8012afa:	460b      	mov	r3, r1
 8012afc:	4610      	mov	r0, r2
 8012afe:	4619      	mov	r1, r3
 8012b00:	f04f 0200 	mov.w	r2, #0
 8012b04:	f04f 0300 	mov.w	r3, #0
 8012b08:	020b      	lsls	r3, r1, #8
 8012b0a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012b0e:	0202      	lsls	r2, r0, #8
 8012b10:	6879      	ldr	r1, [r7, #4]
 8012b12:	6849      	ldr	r1, [r1, #4]
 8012b14:	0849      	lsrs	r1, r1, #1
 8012b16:	4608      	mov	r0, r1
 8012b18:	f04f 0100 	mov.w	r1, #0
 8012b1c:	1814      	adds	r4, r2, r0
 8012b1e:	eb43 0501 	adc.w	r5, r3, r1
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	685b      	ldr	r3, [r3, #4]
 8012b26:	461a      	mov	r2, r3
 8012b28:	f04f 0300 	mov.w	r3, #0
 8012b2c:	4620      	mov	r0, r4
 8012b2e:	4629      	mov	r1, r5
 8012b30:	f7ed fc46 	bl	80003c0 <__aeabi_uldivmod>
 8012b34:	4602      	mov	r2, r0
 8012b36:	460b      	mov	r3, r1
 8012b38:	4613      	mov	r3, r2
 8012b3a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012b42:	d308      	bcc.n	8012b56 <UART_SetConfig+0x98e>
 8012b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012b4a:	d204      	bcs.n	8012b56 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b52:	60da      	str	r2, [r3, #12]
 8012b54:	e17f      	b.n	8012e56 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8012b56:	2301      	movs	r3, #1
 8012b58:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8012b5c:	e17b      	b.n	8012e56 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	69db      	ldr	r3, [r3, #28]
 8012b62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012b66:	f040 80bd 	bne.w	8012ce4 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8012b6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012b6e:	2b20      	cmp	r3, #32
 8012b70:	dc48      	bgt.n	8012c04 <UART_SetConfig+0xa3c>
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	db7b      	blt.n	8012c6e <UART_SetConfig+0xaa6>
 8012b76:	2b20      	cmp	r3, #32
 8012b78:	d879      	bhi.n	8012c6e <UART_SetConfig+0xaa6>
 8012b7a:	a201      	add	r2, pc, #4	; (adr r2, 8012b80 <UART_SetConfig+0x9b8>)
 8012b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b80:	08012c0b 	.word	0x08012c0b
 8012b84:	08012c13 	.word	0x08012c13
 8012b88:	08012c6f 	.word	0x08012c6f
 8012b8c:	08012c6f 	.word	0x08012c6f
 8012b90:	08012c1b 	.word	0x08012c1b
 8012b94:	08012c6f 	.word	0x08012c6f
 8012b98:	08012c6f 	.word	0x08012c6f
 8012b9c:	08012c6f 	.word	0x08012c6f
 8012ba0:	08012c2b 	.word	0x08012c2b
 8012ba4:	08012c6f 	.word	0x08012c6f
 8012ba8:	08012c6f 	.word	0x08012c6f
 8012bac:	08012c6f 	.word	0x08012c6f
 8012bb0:	08012c6f 	.word	0x08012c6f
 8012bb4:	08012c6f 	.word	0x08012c6f
 8012bb8:	08012c6f 	.word	0x08012c6f
 8012bbc:	08012c6f 	.word	0x08012c6f
 8012bc0:	08012c3b 	.word	0x08012c3b
 8012bc4:	08012c6f 	.word	0x08012c6f
 8012bc8:	08012c6f 	.word	0x08012c6f
 8012bcc:	08012c6f 	.word	0x08012c6f
 8012bd0:	08012c6f 	.word	0x08012c6f
 8012bd4:	08012c6f 	.word	0x08012c6f
 8012bd8:	08012c6f 	.word	0x08012c6f
 8012bdc:	08012c6f 	.word	0x08012c6f
 8012be0:	08012c6f 	.word	0x08012c6f
 8012be4:	08012c6f 	.word	0x08012c6f
 8012be8:	08012c6f 	.word	0x08012c6f
 8012bec:	08012c6f 	.word	0x08012c6f
 8012bf0:	08012c6f 	.word	0x08012c6f
 8012bf4:	08012c6f 	.word	0x08012c6f
 8012bf8:	08012c6f 	.word	0x08012c6f
 8012bfc:	08012c6f 	.word	0x08012c6f
 8012c00:	08012c61 	.word	0x08012c61
 8012c04:	2b40      	cmp	r3, #64	; 0x40
 8012c06:	d02e      	beq.n	8012c66 <UART_SetConfig+0xa9e>
 8012c08:	e031      	b.n	8012c6e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012c0a:	f7fb f919 	bl	800de40 <HAL_RCC_GetPCLK1Freq>
 8012c0e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8012c10:	e033      	b.n	8012c7a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012c12:	f7fb f92b 	bl	800de6c <HAL_RCC_GetPCLK2Freq>
 8012c16:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8012c18:	e02f      	b.n	8012c7a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012c1a:	f107 0314 	add.w	r3, r7, #20
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f7fc fc8a 	bl	800f538 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012c24:	69bb      	ldr	r3, [r7, #24]
 8012c26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012c28:	e027      	b.n	8012c7a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012c2a:	f107 0308 	add.w	r3, r7, #8
 8012c2e:	4618      	mov	r0, r3
 8012c30:	f7fc fdd6 	bl	800f7e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012c38:	e01f      	b.n	8012c7a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012c3a:	4b6e      	ldr	r3, [pc, #440]	; (8012df4 <UART_SetConfig+0xc2c>)
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	f003 0320 	and.w	r3, r3, #32
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d009      	beq.n	8012c5a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012c46:	4b6b      	ldr	r3, [pc, #428]	; (8012df4 <UART_SetConfig+0xc2c>)
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	08db      	lsrs	r3, r3, #3
 8012c4c:	f003 0303 	and.w	r3, r3, #3
 8012c50:	4a69      	ldr	r2, [pc, #420]	; (8012df8 <UART_SetConfig+0xc30>)
 8012c52:	fa22 f303 	lsr.w	r3, r2, r3
 8012c56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012c58:	e00f      	b.n	8012c7a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8012c5a:	4b67      	ldr	r3, [pc, #412]	; (8012df8 <UART_SetConfig+0xc30>)
 8012c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012c5e:	e00c      	b.n	8012c7a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012c60:	4b66      	ldr	r3, [pc, #408]	; (8012dfc <UART_SetConfig+0xc34>)
 8012c62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012c64:	e009      	b.n	8012c7a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012c6c:	e005      	b.n	8012c7a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8012c6e:	2300      	movs	r3, #0
 8012c70:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8012c72:	2301      	movs	r3, #1
 8012c74:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8012c78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	f000 80ea 	beq.w	8012e56 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c86:	4a5a      	ldr	r2, [pc, #360]	; (8012df0 <UART_SetConfig+0xc28>)
 8012c88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012c8c:	461a      	mov	r2, r3
 8012c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c90:	fbb3 f3f2 	udiv	r3, r3, r2
 8012c94:	005a      	lsls	r2, r3, #1
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	685b      	ldr	r3, [r3, #4]
 8012c9a:	085b      	lsrs	r3, r3, #1
 8012c9c:	441a      	add	r2, r3
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	685b      	ldr	r3, [r3, #4]
 8012ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8012ca6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012caa:	2b0f      	cmp	r3, #15
 8012cac:	d916      	bls.n	8012cdc <UART_SetConfig+0xb14>
 8012cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012cb4:	d212      	bcs.n	8012cdc <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cb8:	b29b      	uxth	r3, r3
 8012cba:	f023 030f 	bic.w	r3, r3, #15
 8012cbe:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc2:	085b      	lsrs	r3, r3, #1
 8012cc4:	b29b      	uxth	r3, r3
 8012cc6:	f003 0307 	and.w	r3, r3, #7
 8012cca:	b29a      	uxth	r2, r3
 8012ccc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012cce:	4313      	orrs	r3, r2
 8012cd0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012cd8:	60da      	str	r2, [r3, #12]
 8012cda:	e0bc      	b.n	8012e56 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8012cdc:	2301      	movs	r3, #1
 8012cde:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8012ce2:	e0b8      	b.n	8012e56 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012ce4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012ce8:	2b20      	cmp	r3, #32
 8012cea:	dc4b      	bgt.n	8012d84 <UART_SetConfig+0xbbc>
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	f2c0 8087 	blt.w	8012e00 <UART_SetConfig+0xc38>
 8012cf2:	2b20      	cmp	r3, #32
 8012cf4:	f200 8084 	bhi.w	8012e00 <UART_SetConfig+0xc38>
 8012cf8:	a201      	add	r2, pc, #4	; (adr r2, 8012d00 <UART_SetConfig+0xb38>)
 8012cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cfe:	bf00      	nop
 8012d00:	08012d8b 	.word	0x08012d8b
 8012d04:	08012d93 	.word	0x08012d93
 8012d08:	08012e01 	.word	0x08012e01
 8012d0c:	08012e01 	.word	0x08012e01
 8012d10:	08012d9b 	.word	0x08012d9b
 8012d14:	08012e01 	.word	0x08012e01
 8012d18:	08012e01 	.word	0x08012e01
 8012d1c:	08012e01 	.word	0x08012e01
 8012d20:	08012dab 	.word	0x08012dab
 8012d24:	08012e01 	.word	0x08012e01
 8012d28:	08012e01 	.word	0x08012e01
 8012d2c:	08012e01 	.word	0x08012e01
 8012d30:	08012e01 	.word	0x08012e01
 8012d34:	08012e01 	.word	0x08012e01
 8012d38:	08012e01 	.word	0x08012e01
 8012d3c:	08012e01 	.word	0x08012e01
 8012d40:	08012dbb 	.word	0x08012dbb
 8012d44:	08012e01 	.word	0x08012e01
 8012d48:	08012e01 	.word	0x08012e01
 8012d4c:	08012e01 	.word	0x08012e01
 8012d50:	08012e01 	.word	0x08012e01
 8012d54:	08012e01 	.word	0x08012e01
 8012d58:	08012e01 	.word	0x08012e01
 8012d5c:	08012e01 	.word	0x08012e01
 8012d60:	08012e01 	.word	0x08012e01
 8012d64:	08012e01 	.word	0x08012e01
 8012d68:	08012e01 	.word	0x08012e01
 8012d6c:	08012e01 	.word	0x08012e01
 8012d70:	08012e01 	.word	0x08012e01
 8012d74:	08012e01 	.word	0x08012e01
 8012d78:	08012e01 	.word	0x08012e01
 8012d7c:	08012e01 	.word	0x08012e01
 8012d80:	08012de1 	.word	0x08012de1
 8012d84:	2b40      	cmp	r3, #64	; 0x40
 8012d86:	d02e      	beq.n	8012de6 <UART_SetConfig+0xc1e>
 8012d88:	e03a      	b.n	8012e00 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012d8a:	f7fb f859 	bl	800de40 <HAL_RCC_GetPCLK1Freq>
 8012d8e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8012d90:	e03c      	b.n	8012e0c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012d92:	f7fb f86b 	bl	800de6c <HAL_RCC_GetPCLK2Freq>
 8012d96:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8012d98:	e038      	b.n	8012e0c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012d9a:	f107 0314 	add.w	r3, r7, #20
 8012d9e:	4618      	mov	r0, r3
 8012da0:	f7fc fbca 	bl	800f538 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012da4:	69bb      	ldr	r3, [r7, #24]
 8012da6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012da8:	e030      	b.n	8012e0c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012daa:	f107 0308 	add.w	r3, r7, #8
 8012dae:	4618      	mov	r0, r3
 8012db0:	f7fc fd16 	bl	800f7e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012db8:	e028      	b.n	8012e0c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012dba:	4b0e      	ldr	r3, [pc, #56]	; (8012df4 <UART_SetConfig+0xc2c>)
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	f003 0320 	and.w	r3, r3, #32
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d009      	beq.n	8012dda <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012dc6:	4b0b      	ldr	r3, [pc, #44]	; (8012df4 <UART_SetConfig+0xc2c>)
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	08db      	lsrs	r3, r3, #3
 8012dcc:	f003 0303 	and.w	r3, r3, #3
 8012dd0:	4a09      	ldr	r2, [pc, #36]	; (8012df8 <UART_SetConfig+0xc30>)
 8012dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8012dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012dd8:	e018      	b.n	8012e0c <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8012dda:	4b07      	ldr	r3, [pc, #28]	; (8012df8 <UART_SetConfig+0xc30>)
 8012ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012dde:	e015      	b.n	8012e0c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012de0:	4b06      	ldr	r3, [pc, #24]	; (8012dfc <UART_SetConfig+0xc34>)
 8012de2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012de4:	e012      	b.n	8012e0c <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012dea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012dec:	e00e      	b.n	8012e0c <UART_SetConfig+0xc44>
 8012dee:	bf00      	nop
 8012df0:	08018320 	.word	0x08018320
 8012df4:	58024400 	.word	0x58024400
 8012df8:	03d09000 	.word	0x03d09000
 8012dfc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8012e00:	2300      	movs	r3, #0
 8012e02:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8012e04:	2301      	movs	r3, #1
 8012e06:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8012e0a:	bf00      	nop
    }

    if (pclk != 0U)
 8012e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d021      	beq.n	8012e56 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e16:	4a1a      	ldr	r2, [pc, #104]	; (8012e80 <UART_SetConfig+0xcb8>)
 8012e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012e1c:	461a      	mov	r2, r3
 8012e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e20:	fbb3 f2f2 	udiv	r2, r3, r2
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	685b      	ldr	r3, [r3, #4]
 8012e28:	085b      	lsrs	r3, r3, #1
 8012e2a:	441a      	add	r2, r3
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	685b      	ldr	r3, [r3, #4]
 8012e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e34:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e38:	2b0f      	cmp	r3, #15
 8012e3a:	d909      	bls.n	8012e50 <UART_SetConfig+0xc88>
 8012e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012e42:	d205      	bcs.n	8012e50 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e46:	b29a      	uxth	r2, r3
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	60da      	str	r2, [r3, #12]
 8012e4e:	e002      	b.n	8012e56 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8012e50:	2301      	movs	r3, #1
 8012e52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	2201      	movs	r2, #1
 8012e5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	2201      	movs	r2, #1
 8012e62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	2200      	movs	r2, #0
 8012e6a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	2200      	movs	r2, #0
 8012e70:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8012e72:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8012e76:	4618      	mov	r0, r3
 8012e78:	3738      	adds	r7, #56	; 0x38
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8012e7e:	bf00      	nop
 8012e80:	08018320 	.word	0x08018320

08012e84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012e84:	b480      	push	{r7}
 8012e86:	b083      	sub	sp, #12
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e90:	f003 0301 	and.w	r3, r3, #1
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d00a      	beq.n	8012eae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	685b      	ldr	r3, [r3, #4]
 8012e9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	430a      	orrs	r2, r1
 8012eac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012eb2:	f003 0302 	and.w	r3, r3, #2
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d00a      	beq.n	8012ed0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	685b      	ldr	r3, [r3, #4]
 8012ec0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	430a      	orrs	r2, r1
 8012ece:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ed4:	f003 0304 	and.w	r3, r3, #4
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d00a      	beq.n	8012ef2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	685b      	ldr	r3, [r3, #4]
 8012ee2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	430a      	orrs	r2, r1
 8012ef0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ef6:	f003 0308 	and.w	r3, r3, #8
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d00a      	beq.n	8012f14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	685b      	ldr	r3, [r3, #4]
 8012f04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	430a      	orrs	r2, r1
 8012f12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f18:	f003 0310 	and.w	r3, r3, #16
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d00a      	beq.n	8012f36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	689b      	ldr	r3, [r3, #8]
 8012f26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	430a      	orrs	r2, r1
 8012f34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f3a:	f003 0320 	and.w	r3, r3, #32
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d00a      	beq.n	8012f58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	689b      	ldr	r3, [r3, #8]
 8012f48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	430a      	orrs	r2, r1
 8012f56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d01a      	beq.n	8012f9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	685b      	ldr	r3, [r3, #4]
 8012f6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	430a      	orrs	r2, r1
 8012f78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012f82:	d10a      	bne.n	8012f9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	685b      	ldr	r3, [r3, #4]
 8012f8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	430a      	orrs	r2, r1
 8012f98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d00a      	beq.n	8012fbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	685b      	ldr	r3, [r3, #4]
 8012fac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	430a      	orrs	r2, r1
 8012fba:	605a      	str	r2, [r3, #4]
  }
}
 8012fbc:	bf00      	nop
 8012fbe:	370c      	adds	r7, #12
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc6:	4770      	bx	lr

08012fc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	b086      	sub	sp, #24
 8012fcc:	af02      	add	r7, sp, #8
 8012fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	2200      	movs	r2, #0
 8012fd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012fd8:	f7f7 fa30 	bl	800a43c <HAL_GetTick>
 8012fdc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	f003 0308 	and.w	r3, r3, #8
 8012fe8:	2b08      	cmp	r3, #8
 8012fea:	d10e      	bne.n	801300a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012fec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012ff0:	9300      	str	r3, [sp, #0]
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	2200      	movs	r2, #0
 8012ff6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012ffa:	6878      	ldr	r0, [r7, #4]
 8012ffc:	f000 f82f 	bl	801305e <UART_WaitOnFlagUntilTimeout>
 8013000:	4603      	mov	r3, r0
 8013002:	2b00      	cmp	r3, #0
 8013004:	d001      	beq.n	801300a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013006:	2303      	movs	r3, #3
 8013008:	e025      	b.n	8013056 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	f003 0304 	and.w	r3, r3, #4
 8013014:	2b04      	cmp	r3, #4
 8013016:	d10e      	bne.n	8013036 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013018:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801301c:	9300      	str	r3, [sp, #0]
 801301e:	68fb      	ldr	r3, [r7, #12]
 8013020:	2200      	movs	r2, #0
 8013022:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013026:	6878      	ldr	r0, [r7, #4]
 8013028:	f000 f819 	bl	801305e <UART_WaitOnFlagUntilTimeout>
 801302c:	4603      	mov	r3, r0
 801302e:	2b00      	cmp	r3, #0
 8013030:	d001      	beq.n	8013036 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013032:	2303      	movs	r3, #3
 8013034:	e00f      	b.n	8013056 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	2220      	movs	r2, #32
 801303a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2220      	movs	r2, #32
 8013042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	2200      	movs	r2, #0
 801304a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	2200      	movs	r2, #0
 8013050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013054:	2300      	movs	r3, #0
}
 8013056:	4618      	mov	r0, r3
 8013058:	3710      	adds	r7, #16
 801305a:	46bd      	mov	sp, r7
 801305c:	bd80      	pop	{r7, pc}

0801305e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801305e:	b580      	push	{r7, lr}
 8013060:	b09c      	sub	sp, #112	; 0x70
 8013062:	af00      	add	r7, sp, #0
 8013064:	60f8      	str	r0, [r7, #12]
 8013066:	60b9      	str	r1, [r7, #8]
 8013068:	603b      	str	r3, [r7, #0]
 801306a:	4613      	mov	r3, r2
 801306c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801306e:	e0a9      	b.n	80131c4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013076:	f000 80a5 	beq.w	80131c4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801307a:	f7f7 f9df 	bl	800a43c <HAL_GetTick>
 801307e:	4602      	mov	r2, r0
 8013080:	683b      	ldr	r3, [r7, #0]
 8013082:	1ad3      	subs	r3, r2, r3
 8013084:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013086:	429a      	cmp	r2, r3
 8013088:	d302      	bcc.n	8013090 <UART_WaitOnFlagUntilTimeout+0x32>
 801308a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801308c:	2b00      	cmp	r3, #0
 801308e:	d140      	bne.n	8013112 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013096:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013098:	e853 3f00 	ldrex	r3, [r3]
 801309c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801309e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80130a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80130a4:	667b      	str	r3, [r7, #100]	; 0x64
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	461a      	mov	r2, r3
 80130ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80130ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80130b0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80130b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80130b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80130b6:	e841 2300 	strex	r3, r2, [r1]
 80130ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80130bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d1e6      	bne.n	8013090 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	3308      	adds	r3, #8
 80130c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80130ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130cc:	e853 3f00 	ldrex	r3, [r3]
 80130d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80130d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130d4:	f023 0301 	bic.w	r3, r3, #1
 80130d8:	663b      	str	r3, [r7, #96]	; 0x60
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	3308      	adds	r3, #8
 80130e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80130e2:	64ba      	str	r2, [r7, #72]	; 0x48
 80130e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80130e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80130e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80130ea:	e841 2300 	strex	r3, r2, [r1]
 80130ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80130f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d1e5      	bne.n	80130c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	2220      	movs	r2, #32
 80130fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	2220      	movs	r2, #32
 8013102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	2200      	movs	r2, #0
 801310a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801310e:	2303      	movs	r3, #3
 8013110:	e069      	b.n	80131e6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013112:	68fb      	ldr	r3, [r7, #12]
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	f003 0304 	and.w	r3, r3, #4
 801311c:	2b00      	cmp	r3, #0
 801311e:	d051      	beq.n	80131c4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	69db      	ldr	r3, [r3, #28]
 8013126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801312a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801312e:	d149      	bne.n	80131c4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013138:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013142:	e853 3f00 	ldrex	r3, [r3]
 8013146:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801314a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801314e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	461a      	mov	r2, r3
 8013156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013158:	637b      	str	r3, [r7, #52]	; 0x34
 801315a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801315c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801315e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013160:	e841 2300 	strex	r3, r2, [r1]
 8013164:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8013166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013168:	2b00      	cmp	r3, #0
 801316a:	d1e6      	bne.n	801313a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	3308      	adds	r3, #8
 8013172:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013174:	697b      	ldr	r3, [r7, #20]
 8013176:	e853 3f00 	ldrex	r3, [r3]
 801317a:	613b      	str	r3, [r7, #16]
   return(result);
 801317c:	693b      	ldr	r3, [r7, #16]
 801317e:	f023 0301 	bic.w	r3, r3, #1
 8013182:	66bb      	str	r3, [r7, #104]	; 0x68
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	3308      	adds	r3, #8
 801318a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801318c:	623a      	str	r2, [r7, #32]
 801318e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013190:	69f9      	ldr	r1, [r7, #28]
 8013192:	6a3a      	ldr	r2, [r7, #32]
 8013194:	e841 2300 	strex	r3, r2, [r1]
 8013198:	61bb      	str	r3, [r7, #24]
   return(result);
 801319a:	69bb      	ldr	r3, [r7, #24]
 801319c:	2b00      	cmp	r3, #0
 801319e:	d1e5      	bne.n	801316c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	2220      	movs	r2, #32
 80131a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	2220      	movs	r2, #32
 80131ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	2220      	movs	r2, #32
 80131b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	2200      	movs	r2, #0
 80131bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80131c0:	2303      	movs	r3, #3
 80131c2:	e010      	b.n	80131e6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	69da      	ldr	r2, [r3, #28]
 80131ca:	68bb      	ldr	r3, [r7, #8]
 80131cc:	4013      	ands	r3, r2
 80131ce:	68ba      	ldr	r2, [r7, #8]
 80131d0:	429a      	cmp	r2, r3
 80131d2:	bf0c      	ite	eq
 80131d4:	2301      	moveq	r3, #1
 80131d6:	2300      	movne	r3, #0
 80131d8:	b2db      	uxtb	r3, r3
 80131da:	461a      	mov	r2, r3
 80131dc:	79fb      	ldrb	r3, [r7, #7]
 80131de:	429a      	cmp	r2, r3
 80131e0:	f43f af46 	beq.w	8013070 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80131e4:	2300      	movs	r3, #0
}
 80131e6:	4618      	mov	r0, r3
 80131e8:	3770      	adds	r7, #112	; 0x70
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bd80      	pop	{r7, pc}
	...

080131f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80131f0:	b480      	push	{r7}
 80131f2:	b0a3      	sub	sp, #140	; 0x8c
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	60f8      	str	r0, [r7, #12]
 80131f8:	60b9      	str	r1, [r7, #8]
 80131fa:	4613      	mov	r3, r2
 80131fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	68ba      	ldr	r2, [r7, #8]
 8013202:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	88fa      	ldrh	r2, [r7, #6]
 8013208:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	88fa      	ldrh	r2, [r7, #6]
 8013210:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	2200      	movs	r2, #0
 8013218:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	689b      	ldr	r3, [r3, #8]
 801321e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013222:	d10e      	bne.n	8013242 <UART_Start_Receive_IT+0x52>
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	691b      	ldr	r3, [r3, #16]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d105      	bne.n	8013238 <UART_Start_Receive_IT+0x48>
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8013232:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013236:	e02d      	b.n	8013294 <UART_Start_Receive_IT+0xa4>
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	22ff      	movs	r2, #255	; 0xff
 801323c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013240:	e028      	b.n	8013294 <UART_Start_Receive_IT+0xa4>
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	689b      	ldr	r3, [r3, #8]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d10d      	bne.n	8013266 <UART_Start_Receive_IT+0x76>
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	691b      	ldr	r3, [r3, #16]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d104      	bne.n	801325c <UART_Start_Receive_IT+0x6c>
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	22ff      	movs	r2, #255	; 0xff
 8013256:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801325a:	e01b      	b.n	8013294 <UART_Start_Receive_IT+0xa4>
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	227f      	movs	r2, #127	; 0x7f
 8013260:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013264:	e016      	b.n	8013294 <UART_Start_Receive_IT+0xa4>
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	689b      	ldr	r3, [r3, #8]
 801326a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801326e:	d10d      	bne.n	801328c <UART_Start_Receive_IT+0x9c>
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	691b      	ldr	r3, [r3, #16]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d104      	bne.n	8013282 <UART_Start_Receive_IT+0x92>
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	227f      	movs	r2, #127	; 0x7f
 801327c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013280:	e008      	b.n	8013294 <UART_Start_Receive_IT+0xa4>
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	223f      	movs	r2, #63	; 0x3f
 8013286:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801328a:	e003      	b.n	8013294 <UART_Start_Receive_IT+0xa4>
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	2200      	movs	r2, #0
 8013290:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	2200      	movs	r2, #0
 8013298:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	2222      	movs	r2, #34	; 0x22
 80132a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	3308      	adds	r3, #8
 80132aa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80132ae:	e853 3f00 	ldrex	r3, [r3]
 80132b2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80132b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80132b6:	f043 0301 	orr.w	r3, r3, #1
 80132ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	3308      	adds	r3, #8
 80132c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80132c8:	673a      	str	r2, [r7, #112]	; 0x70
 80132ca:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80132cc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80132ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80132d0:	e841 2300 	strex	r3, r2, [r1]
 80132d4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80132d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d1e3      	bne.n	80132a4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80132e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80132e4:	d153      	bne.n	801338e <UART_Start_Receive_IT+0x19e>
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80132ec:	88fa      	ldrh	r2, [r7, #6]
 80132ee:	429a      	cmp	r2, r3
 80132f0:	d34d      	bcc.n	801338e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	689b      	ldr	r3, [r3, #8]
 80132f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80132fa:	d107      	bne.n	801330c <UART_Start_Receive_IT+0x11c>
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	691b      	ldr	r3, [r3, #16]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d103      	bne.n	801330c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	4a4b      	ldr	r2, [pc, #300]	; (8013434 <UART_Start_Receive_IT+0x244>)
 8013308:	671a      	str	r2, [r3, #112]	; 0x70
 801330a:	e002      	b.n	8013312 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	4a4a      	ldr	r2, [pc, #296]	; (8013438 <UART_Start_Receive_IT+0x248>)
 8013310:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	2200      	movs	r2, #0
 8013316:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	691b      	ldr	r3, [r3, #16]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d01a      	beq.n	8013358 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801332a:	e853 3f00 	ldrex	r3, [r3]
 801332e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013336:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	461a      	mov	r2, r3
 8013340:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013344:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013346:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013348:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801334a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801334c:	e841 2300 	strex	r3, r2, [r1]
 8013350:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8013352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013354:	2b00      	cmp	r3, #0
 8013356:	d1e4      	bne.n	8013322 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	3308      	adds	r3, #8
 801335e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013362:	e853 3f00 	ldrex	r3, [r3]
 8013366:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801336a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801336e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	3308      	adds	r3, #8
 8013376:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013378:	64ba      	str	r2, [r7, #72]	; 0x48
 801337a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801337c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801337e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013380:	e841 2300 	strex	r3, r2, [r1]
 8013384:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013388:	2b00      	cmp	r3, #0
 801338a:	d1e5      	bne.n	8013358 <UART_Start_Receive_IT+0x168>
 801338c:	e04a      	b.n	8013424 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	689b      	ldr	r3, [r3, #8]
 8013392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013396:	d107      	bne.n	80133a8 <UART_Start_Receive_IT+0x1b8>
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	691b      	ldr	r3, [r3, #16]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d103      	bne.n	80133a8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	4a26      	ldr	r2, [pc, #152]	; (801343c <UART_Start_Receive_IT+0x24c>)
 80133a4:	671a      	str	r2, [r3, #112]	; 0x70
 80133a6:	e002      	b.n	80133ae <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	4a25      	ldr	r2, [pc, #148]	; (8013440 <UART_Start_Receive_IT+0x250>)
 80133ac:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	2200      	movs	r2, #0
 80133b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	691b      	ldr	r3, [r3, #16]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d019      	beq.n	80133f2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80133be:	68fb      	ldr	r3, [r7, #12]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c6:	e853 3f00 	ldrex	r3, [r3]
 80133ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80133cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ce:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80133d2:	677b      	str	r3, [r7, #116]	; 0x74
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	461a      	mov	r2, r3
 80133da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80133dc:	637b      	str	r3, [r7, #52]	; 0x34
 80133de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80133e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80133e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80133e4:	e841 2300 	strex	r3, r2, [r1]
 80133e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80133ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d1e6      	bne.n	80133be <UART_Start_Receive_IT+0x1ce>
 80133f0:	e018      	b.n	8013424 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133f8:	697b      	ldr	r3, [r7, #20]
 80133fa:	e853 3f00 	ldrex	r3, [r3]
 80133fe:	613b      	str	r3, [r7, #16]
   return(result);
 8013400:	693b      	ldr	r3, [r7, #16]
 8013402:	f043 0320 	orr.w	r3, r3, #32
 8013406:	67bb      	str	r3, [r7, #120]	; 0x78
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	461a      	mov	r2, r3
 801340e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013410:	623b      	str	r3, [r7, #32]
 8013412:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013414:	69f9      	ldr	r1, [r7, #28]
 8013416:	6a3a      	ldr	r2, [r7, #32]
 8013418:	e841 2300 	strex	r3, r2, [r1]
 801341c:	61bb      	str	r3, [r7, #24]
   return(result);
 801341e:	69bb      	ldr	r3, [r7, #24]
 8013420:	2b00      	cmp	r3, #0
 8013422:	d1e6      	bne.n	80133f2 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8013424:	2300      	movs	r3, #0
}
 8013426:	4618      	mov	r0, r3
 8013428:	378c      	adds	r7, #140	; 0x8c
 801342a:	46bd      	mov	sp, r7
 801342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013430:	4770      	bx	lr
 8013432:	bf00      	nop
 8013434:	08013e91 	.word	0x08013e91
 8013438:	08013b99 	.word	0x08013b99
 801343c:	08013a37 	.word	0x08013a37
 8013440:	080138d7 	.word	0x080138d7

08013444 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013444:	b480      	push	{r7}
 8013446:	b095      	sub	sp, #84	; 0x54
 8013448:	af00      	add	r7, sp, #0
 801344a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013454:	e853 3f00 	ldrex	r3, [r3]
 8013458:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801345a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801345c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013460:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	461a      	mov	r2, r3
 8013468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801346a:	643b      	str	r3, [r7, #64]	; 0x40
 801346c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801346e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013470:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013472:	e841 2300 	strex	r3, r2, [r1]
 8013476:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801347a:	2b00      	cmp	r3, #0
 801347c:	d1e6      	bne.n	801344c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	3308      	adds	r3, #8
 8013484:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013486:	6a3b      	ldr	r3, [r7, #32]
 8013488:	e853 3f00 	ldrex	r3, [r3]
 801348c:	61fb      	str	r3, [r7, #28]
   return(result);
 801348e:	69fa      	ldr	r2, [r7, #28]
 8013490:	4b1e      	ldr	r3, [pc, #120]	; (801350c <UART_EndRxTransfer+0xc8>)
 8013492:	4013      	ands	r3, r2
 8013494:	64bb      	str	r3, [r7, #72]	; 0x48
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	3308      	adds	r3, #8
 801349c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801349e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80134a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80134a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134a6:	e841 2300 	strex	r3, r2, [r1]
 80134aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80134ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d1e5      	bne.n	801347e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134b6:	2b01      	cmp	r3, #1
 80134b8:	d118      	bne.n	80134ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	e853 3f00 	ldrex	r3, [r3]
 80134c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80134c8:	68bb      	ldr	r3, [r7, #8]
 80134ca:	f023 0310 	bic.w	r3, r3, #16
 80134ce:	647b      	str	r3, [r7, #68]	; 0x44
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	461a      	mov	r2, r3
 80134d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134d8:	61bb      	str	r3, [r7, #24]
 80134da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134dc:	6979      	ldr	r1, [r7, #20]
 80134de:	69ba      	ldr	r2, [r7, #24]
 80134e0:	e841 2300 	strex	r3, r2, [r1]
 80134e4:	613b      	str	r3, [r7, #16]
   return(result);
 80134e6:	693b      	ldr	r3, [r7, #16]
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d1e6      	bne.n	80134ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	2220      	movs	r2, #32
 80134f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	2200      	movs	r2, #0
 80134f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	2200      	movs	r2, #0
 80134fe:	671a      	str	r2, [r3, #112]	; 0x70
}
 8013500:	bf00      	nop
 8013502:	3754      	adds	r7, #84	; 0x54
 8013504:	46bd      	mov	sp, r7
 8013506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350a:	4770      	bx	lr
 801350c:	effffffe 	.word	0xeffffffe

08013510 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b084      	sub	sp, #16
 8013514:	af00      	add	r7, sp, #0
 8013516:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801351c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801351e:	68fb      	ldr	r3, [r7, #12]
 8013520:	2200      	movs	r2, #0
 8013522:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	2200      	movs	r2, #0
 801352a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801352e:	68f8      	ldr	r0, [r7, #12]
 8013530:	f7fe fe34 	bl	801219c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013534:	bf00      	nop
 8013536:	3710      	adds	r7, #16
 8013538:	46bd      	mov	sp, r7
 801353a:	bd80      	pop	{r7, pc}

0801353c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 801353c:	b480      	push	{r7}
 801353e:	b08f      	sub	sp, #60	; 0x3c
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801354a:	2b21      	cmp	r3, #33	; 0x21
 801354c:	d14c      	bne.n	80135e8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013554:	b29b      	uxth	r3, r3
 8013556:	2b00      	cmp	r3, #0
 8013558:	d132      	bne.n	80135c0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013560:	6a3b      	ldr	r3, [r7, #32]
 8013562:	e853 3f00 	ldrex	r3, [r3]
 8013566:	61fb      	str	r3, [r7, #28]
   return(result);
 8013568:	69fb      	ldr	r3, [r7, #28]
 801356a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801356e:	637b      	str	r3, [r7, #52]	; 0x34
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	461a      	mov	r2, r3
 8013576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013578:	62fb      	str	r3, [r7, #44]	; 0x2c
 801357a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801357c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801357e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013580:	e841 2300 	strex	r3, r2, [r1]
 8013584:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013588:	2b00      	cmp	r3, #0
 801358a:	d1e6      	bne.n	801355a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	e853 3f00 	ldrex	r3, [r3]
 8013598:	60bb      	str	r3, [r7, #8]
   return(result);
 801359a:	68bb      	ldr	r3, [r7, #8]
 801359c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80135a0:	633b      	str	r3, [r7, #48]	; 0x30
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	461a      	mov	r2, r3
 80135a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135aa:	61bb      	str	r3, [r7, #24]
 80135ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135ae:	6979      	ldr	r1, [r7, #20]
 80135b0:	69ba      	ldr	r2, [r7, #24]
 80135b2:	e841 2300 	strex	r3, r2, [r1]
 80135b6:	613b      	str	r3, [r7, #16]
   return(result);
 80135b8:	693b      	ldr	r3, [r7, #16]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d1e6      	bne.n	801358c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80135be:	e013      	b.n	80135e8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135c4:	781a      	ldrb	r2, [r3, #0]
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135d0:	1c5a      	adds	r2, r3, #1
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80135dc:	b29b      	uxth	r3, r3
 80135de:	3b01      	subs	r3, #1
 80135e0:	b29a      	uxth	r2, r3
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80135e8:	bf00      	nop
 80135ea:	373c      	adds	r7, #60	; 0x3c
 80135ec:	46bd      	mov	sp, r7
 80135ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f2:	4770      	bx	lr

080135f4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80135f4:	b480      	push	{r7}
 80135f6:	b091      	sub	sp, #68	; 0x44
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013602:	2b21      	cmp	r3, #33	; 0x21
 8013604:	d151      	bne.n	80136aa <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801360c:	b29b      	uxth	r3, r3
 801360e:	2b00      	cmp	r3, #0
 8013610:	d132      	bne.n	8013678 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801361a:	e853 3f00 	ldrex	r3, [r3]
 801361e:	623b      	str	r3, [r7, #32]
   return(result);
 8013620:	6a3b      	ldr	r3, [r7, #32]
 8013622:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013626:	63bb      	str	r3, [r7, #56]	; 0x38
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	461a      	mov	r2, r3
 801362e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013630:	633b      	str	r3, [r7, #48]	; 0x30
 8013632:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013634:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013638:	e841 2300 	strex	r3, r2, [r1]
 801363c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801363e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013640:	2b00      	cmp	r3, #0
 8013642:	d1e6      	bne.n	8013612 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801364a:	693b      	ldr	r3, [r7, #16]
 801364c:	e853 3f00 	ldrex	r3, [r3]
 8013650:	60fb      	str	r3, [r7, #12]
   return(result);
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013658:	637b      	str	r3, [r7, #52]	; 0x34
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	461a      	mov	r2, r3
 8013660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013662:	61fb      	str	r3, [r7, #28]
 8013664:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013666:	69b9      	ldr	r1, [r7, #24]
 8013668:	69fa      	ldr	r2, [r7, #28]
 801366a:	e841 2300 	strex	r3, r2, [r1]
 801366e:	617b      	str	r3, [r7, #20]
   return(result);
 8013670:	697b      	ldr	r3, [r7, #20]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d1e6      	bne.n	8013644 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8013676:	e018      	b.n	80136aa <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801367c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801367e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013680:	881b      	ldrh	r3, [r3, #0]
 8013682:	461a      	mov	r2, r3
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801368c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013692:	1c9a      	adds	r2, r3, #2
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801369e:	b29b      	uxth	r3, r3
 80136a0:	3b01      	subs	r3, #1
 80136a2:	b29a      	uxth	r2, r3
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80136aa:	bf00      	nop
 80136ac:	3744      	adds	r7, #68	; 0x44
 80136ae:	46bd      	mov	sp, r7
 80136b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b4:	4770      	bx	lr

080136b6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80136b6:	b480      	push	{r7}
 80136b8:	b091      	sub	sp, #68	; 0x44
 80136ba:	af00      	add	r7, sp, #0
 80136bc:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80136c4:	2b21      	cmp	r3, #33	; 0x21
 80136c6:	d160      	bne.n	801378a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80136ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80136d0:	e057      	b.n	8013782 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80136d8:	b29b      	uxth	r3, r3
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d133      	bne.n	8013746 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	3308      	adds	r3, #8
 80136e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136e8:	e853 3f00 	ldrex	r3, [r3]
 80136ec:	623b      	str	r3, [r7, #32]
   return(result);
 80136ee:	6a3b      	ldr	r3, [r7, #32]
 80136f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80136f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	3308      	adds	r3, #8
 80136fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80136fe:	633a      	str	r2, [r7, #48]	; 0x30
 8013700:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013702:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013706:	e841 2300 	strex	r3, r2, [r1]
 801370a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801370c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801370e:	2b00      	cmp	r3, #0
 8013710:	d1e5      	bne.n	80136de <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013718:	693b      	ldr	r3, [r7, #16]
 801371a:	e853 3f00 	ldrex	r3, [r3]
 801371e:	60fb      	str	r3, [r7, #12]
   return(result);
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013726:	637b      	str	r3, [r7, #52]	; 0x34
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	461a      	mov	r2, r3
 801372e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013730:	61fb      	str	r3, [r7, #28]
 8013732:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013734:	69b9      	ldr	r1, [r7, #24]
 8013736:	69fa      	ldr	r2, [r7, #28]
 8013738:	e841 2300 	strex	r3, r2, [r1]
 801373c:	617b      	str	r3, [r7, #20]
   return(result);
 801373e:	697b      	ldr	r3, [r7, #20]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d1e6      	bne.n	8013712 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8013744:	e021      	b.n	801378a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	69db      	ldr	r3, [r3, #28]
 801374c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013750:	2b00      	cmp	r3, #0
 8013752:	d013      	beq.n	801377c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013758:	781a      	ldrb	r2, [r3, #0]
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013764:	1c5a      	adds	r2, r3, #1
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013770:	b29b      	uxth	r3, r3
 8013772:	3b01      	subs	r3, #1
 8013774:	b29a      	uxth	r2, r3
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801377c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801377e:	3b01      	subs	r3, #1
 8013780:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8013782:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013784:	2b00      	cmp	r3, #0
 8013786:	d1a4      	bne.n	80136d2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8013788:	e7ff      	b.n	801378a <UART_TxISR_8BIT_FIFOEN+0xd4>
 801378a:	bf00      	nop
 801378c:	3744      	adds	r7, #68	; 0x44
 801378e:	46bd      	mov	sp, r7
 8013790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013794:	4770      	bx	lr

08013796 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8013796:	b480      	push	{r7}
 8013798:	b091      	sub	sp, #68	; 0x44
 801379a:	af00      	add	r7, sp, #0
 801379c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80137a4:	2b21      	cmp	r3, #33	; 0x21
 80137a6:	d165      	bne.n	8013874 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80137ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80137b0:	e05c      	b.n	801386c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80137b8:	b29b      	uxth	r3, r3
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d133      	bne.n	8013826 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	3308      	adds	r3, #8
 80137c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137c6:	6a3b      	ldr	r3, [r7, #32]
 80137c8:	e853 3f00 	ldrex	r3, [r3]
 80137cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80137ce:	69fb      	ldr	r3, [r7, #28]
 80137d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80137d4:	637b      	str	r3, [r7, #52]	; 0x34
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	3308      	adds	r3, #8
 80137dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80137de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80137e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80137e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80137e6:	e841 2300 	strex	r3, r2, [r1]
 80137ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80137ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d1e5      	bne.n	80137be <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	e853 3f00 	ldrex	r3, [r3]
 80137fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8013800:	68bb      	ldr	r3, [r7, #8]
 8013802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013806:	633b      	str	r3, [r7, #48]	; 0x30
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	461a      	mov	r2, r3
 801380e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013810:	61bb      	str	r3, [r7, #24]
 8013812:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013814:	6979      	ldr	r1, [r7, #20]
 8013816:	69ba      	ldr	r2, [r7, #24]
 8013818:	e841 2300 	strex	r3, r2, [r1]
 801381c:	613b      	str	r3, [r7, #16]
   return(result);
 801381e:	693b      	ldr	r3, [r7, #16]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d1e6      	bne.n	80137f2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8013824:	e026      	b.n	8013874 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	69db      	ldr	r3, [r3, #28]
 801382c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013830:	2b00      	cmp	r3, #0
 8013832:	d018      	beq.n	8013866 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013838:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801383a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801383c:	881b      	ldrh	r3, [r3, #0]
 801383e:	461a      	mov	r2, r3
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013848:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801384e:	1c9a      	adds	r2, r3, #2
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801385a:	b29b      	uxth	r3, r3
 801385c:	3b01      	subs	r3, #1
 801385e:	b29a      	uxth	r2, r3
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8013866:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013868:	3b01      	subs	r3, #1
 801386a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801386c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801386e:	2b00      	cmp	r3, #0
 8013870:	d19f      	bne.n	80137b2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8013872:	e7ff      	b.n	8013874 <UART_TxISR_16BIT_FIFOEN+0xde>
 8013874:	bf00      	nop
 8013876:	3744      	adds	r7, #68	; 0x44
 8013878:	46bd      	mov	sp, r7
 801387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387e:	4770      	bx	lr

08013880 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013880:	b580      	push	{r7, lr}
 8013882:	b088      	sub	sp, #32
 8013884:	af00      	add	r7, sp, #0
 8013886:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	e853 3f00 	ldrex	r3, [r3]
 8013894:	60bb      	str	r3, [r7, #8]
   return(result);
 8013896:	68bb      	ldr	r3, [r7, #8]
 8013898:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801389c:	61fb      	str	r3, [r7, #28]
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	681b      	ldr	r3, [r3, #0]
 80138a2:	461a      	mov	r2, r3
 80138a4:	69fb      	ldr	r3, [r7, #28]
 80138a6:	61bb      	str	r3, [r7, #24]
 80138a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138aa:	6979      	ldr	r1, [r7, #20]
 80138ac:	69ba      	ldr	r2, [r7, #24]
 80138ae:	e841 2300 	strex	r3, r2, [r1]
 80138b2:	613b      	str	r3, [r7, #16]
   return(result);
 80138b4:	693b      	ldr	r3, [r7, #16]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d1e6      	bne.n	8013888 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	2220      	movs	r2, #32
 80138be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	2200      	movs	r2, #0
 80138c6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80138c8:	6878      	ldr	r0, [r7, #4]
 80138ca:	f7f5 f951 	bl	8008b70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80138ce:	bf00      	nop
 80138d0:	3720      	adds	r7, #32
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bd80      	pop	{r7, pc}

080138d6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80138d6:	b580      	push	{r7, lr}
 80138d8:	b096      	sub	sp, #88	; 0x58
 80138da:	af00      	add	r7, sp, #0
 80138dc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80138e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80138ee:	2b22      	cmp	r3, #34	; 0x22
 80138f0:	f040 8095 	bne.w	8013a1e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138fa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80138fe:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8013902:	b2d9      	uxtb	r1, r3
 8013904:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013908:	b2da      	uxtb	r2, r3
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801390e:	400a      	ands	r2, r1
 8013910:	b2d2      	uxtb	r2, r2
 8013912:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013918:	1c5a      	adds	r2, r3, #1
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013924:	b29b      	uxth	r3, r3
 8013926:	3b01      	subs	r3, #1
 8013928:	b29a      	uxth	r2, r3
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013936:	b29b      	uxth	r3, r3
 8013938:	2b00      	cmp	r3, #0
 801393a:	d178      	bne.n	8013a2e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013944:	e853 3f00 	ldrex	r3, [r3]
 8013948:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801394a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801394c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013950:	653b      	str	r3, [r7, #80]	; 0x50
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	461a      	mov	r2, r3
 8013958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801395a:	647b      	str	r3, [r7, #68]	; 0x44
 801395c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801395e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013960:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013962:	e841 2300 	strex	r3, r2, [r1]
 8013966:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801396a:	2b00      	cmp	r3, #0
 801396c:	d1e6      	bne.n	801393c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	3308      	adds	r3, #8
 8013974:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013978:	e853 3f00 	ldrex	r3, [r3]
 801397c:	623b      	str	r3, [r7, #32]
   return(result);
 801397e:	6a3b      	ldr	r3, [r7, #32]
 8013980:	f023 0301 	bic.w	r3, r3, #1
 8013984:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	3308      	adds	r3, #8
 801398c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801398e:	633a      	str	r2, [r7, #48]	; 0x30
 8013990:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013992:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013996:	e841 2300 	strex	r3, r2, [r1]
 801399a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d1e5      	bne.n	801396e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	2220      	movs	r2, #32
 80139a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	2200      	movs	r2, #0
 80139ae:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139b4:	2b01      	cmp	r3, #1
 80139b6:	d12e      	bne.n	8013a16 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	2200      	movs	r2, #0
 80139bc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139c4:	693b      	ldr	r3, [r7, #16]
 80139c6:	e853 3f00 	ldrex	r3, [r3]
 80139ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	f023 0310 	bic.w	r3, r3, #16
 80139d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	461a      	mov	r2, r3
 80139da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80139dc:	61fb      	str	r3, [r7, #28]
 80139de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139e0:	69b9      	ldr	r1, [r7, #24]
 80139e2:	69fa      	ldr	r2, [r7, #28]
 80139e4:	e841 2300 	strex	r3, r2, [r1]
 80139e8:	617b      	str	r3, [r7, #20]
   return(result);
 80139ea:	697b      	ldr	r3, [r7, #20]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d1e6      	bne.n	80139be <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	69db      	ldr	r3, [r3, #28]
 80139f6:	f003 0310 	and.w	r3, r3, #16
 80139fa:	2b10      	cmp	r3, #16
 80139fc:	d103      	bne.n	8013a06 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	2210      	movs	r2, #16
 8013a04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013a0c:	4619      	mov	r1, r3
 8013a0e:	6878      	ldr	r0, [r7, #4]
 8013a10:	f7fe fbce 	bl	80121b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013a14:	e00b      	b.n	8013a2e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8013a16:	6878      	ldr	r0, [r7, #4]
 8013a18:	f7f5 f88e 	bl	8008b38 <HAL_UART_RxCpltCallback>
}
 8013a1c:	e007      	b.n	8013a2e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013a1e:	687b      	ldr	r3, [r7, #4]
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	699a      	ldr	r2, [r3, #24]
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	f042 0208 	orr.w	r2, r2, #8
 8013a2c:	619a      	str	r2, [r3, #24]
}
 8013a2e:	bf00      	nop
 8013a30:	3758      	adds	r7, #88	; 0x58
 8013a32:	46bd      	mov	sp, r7
 8013a34:	bd80      	pop	{r7, pc}

08013a36 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8013a36:	b580      	push	{r7, lr}
 8013a38:	b096      	sub	sp, #88	; 0x58
 8013a3a:	af00      	add	r7, sp, #0
 8013a3c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013a44:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013a4e:	2b22      	cmp	r3, #34	; 0x22
 8013a50:	f040 8095 	bne.w	8013b7e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a5a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013a62:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8013a64:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8013a68:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013a6c:	4013      	ands	r3, r2
 8013a6e:	b29a      	uxth	r2, r3
 8013a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a72:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013a78:	1c9a      	adds	r2, r3, #2
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013a84:	b29b      	uxth	r3, r3
 8013a86:	3b01      	subs	r3, #1
 8013a88:	b29a      	uxth	r2, r3
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013a96:	b29b      	uxth	r3, r3
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d178      	bne.n	8013b8e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013aa4:	e853 3f00 	ldrex	r3, [r3]
 8013aa8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013ab0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	461a      	mov	r2, r3
 8013ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013aba:	643b      	str	r3, [r7, #64]	; 0x40
 8013abc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013abe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013ac0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013ac2:	e841 2300 	strex	r3, r2, [r1]
 8013ac6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d1e6      	bne.n	8013a9c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	3308      	adds	r3, #8
 8013ad4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ad6:	6a3b      	ldr	r3, [r7, #32]
 8013ad8:	e853 3f00 	ldrex	r3, [r3]
 8013adc:	61fb      	str	r3, [r7, #28]
   return(result);
 8013ade:	69fb      	ldr	r3, [r7, #28]
 8013ae0:	f023 0301 	bic.w	r3, r3, #1
 8013ae4:	64bb      	str	r3, [r7, #72]	; 0x48
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	3308      	adds	r3, #8
 8013aec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013aee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013af0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013af2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013af6:	e841 2300 	strex	r3, r2, [r1]
 8013afa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d1e5      	bne.n	8013ace <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	2220      	movs	r2, #32
 8013b06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b14:	2b01      	cmp	r3, #1
 8013b16:	d12e      	bne.n	8013b76 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	e853 3f00 	ldrex	r3, [r3]
 8013b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8013b2c:	68bb      	ldr	r3, [r7, #8]
 8013b2e:	f023 0310 	bic.w	r3, r3, #16
 8013b32:	647b      	str	r3, [r7, #68]	; 0x44
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	461a      	mov	r2, r3
 8013b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013b3c:	61bb      	str	r3, [r7, #24]
 8013b3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b40:	6979      	ldr	r1, [r7, #20]
 8013b42:	69ba      	ldr	r2, [r7, #24]
 8013b44:	e841 2300 	strex	r3, r2, [r1]
 8013b48:	613b      	str	r3, [r7, #16]
   return(result);
 8013b4a:	693b      	ldr	r3, [r7, #16]
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d1e6      	bne.n	8013b1e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	69db      	ldr	r3, [r3, #28]
 8013b56:	f003 0310 	and.w	r3, r3, #16
 8013b5a:	2b10      	cmp	r3, #16
 8013b5c:	d103      	bne.n	8013b66 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	2210      	movs	r2, #16
 8013b64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013b6c:	4619      	mov	r1, r3
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f7fe fb1e 	bl	80121b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013b74:	e00b      	b.n	8013b8e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8013b76:	6878      	ldr	r0, [r7, #4]
 8013b78:	f7f4 ffde 	bl	8008b38 <HAL_UART_RxCpltCallback>
}
 8013b7c:	e007      	b.n	8013b8e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	699a      	ldr	r2, [r3, #24]
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	f042 0208 	orr.w	r2, r2, #8
 8013b8c:	619a      	str	r2, [r3, #24]
}
 8013b8e:	bf00      	nop
 8013b90:	3758      	adds	r7, #88	; 0x58
 8013b92:	46bd      	mov	sp, r7
 8013b94:	bd80      	pop	{r7, pc}
	...

08013b98 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b0a6      	sub	sp, #152	; 0x98
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013ba6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	681b      	ldr	r3, [r3, #0]
 8013bae:	69db      	ldr	r3, [r3, #28]
 8013bb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	689b      	ldr	r3, [r3, #8]
 8013bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013bce:	2b22      	cmp	r3, #34	; 0x22
 8013bd0:	f040 814d 	bne.w	8013e6e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013bda:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013bde:	e0f4      	b.n	8013dca <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013be0:	687b      	ldr	r3, [r7, #4]
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013be6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013bea:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8013bee:	b2d9      	uxtb	r1, r3
 8013bf0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8013bf4:	b2da      	uxtb	r2, r3
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013bfa:	400a      	ands	r2, r1
 8013bfc:	b2d2      	uxtb	r2, r2
 8013bfe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c04:	1c5a      	adds	r2, r3, #1
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013c10:	b29b      	uxth	r3, r3
 8013c12:	3b01      	subs	r3, #1
 8013c14:	b29a      	uxth	r2, r3
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	69db      	ldr	r3, [r3, #28]
 8013c22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8013c26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013c2a:	f003 0307 	and.w	r3, r3, #7
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d053      	beq.n	8013cda <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013c32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013c36:	f003 0301 	and.w	r3, r3, #1
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d011      	beq.n	8013c62 <UART_RxISR_8BIT_FIFOEN+0xca>
 8013c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d00b      	beq.n	8013c62 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	2201      	movs	r2, #1
 8013c50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013c58:	f043 0201 	orr.w	r2, r3, #1
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013c62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013c66:	f003 0302 	and.w	r3, r3, #2
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d011      	beq.n	8013c92 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8013c6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013c72:	f003 0301 	and.w	r3, r3, #1
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d00b      	beq.n	8013c92 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	2202      	movs	r2, #2
 8013c80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013c88:	f043 0204 	orr.w	r2, r3, #4
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013c92:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013c96:	f003 0304 	and.w	r3, r3, #4
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d011      	beq.n	8013cc2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8013c9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013ca2:	f003 0301 	and.w	r3, r3, #1
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d00b      	beq.n	8013cc2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	2204      	movs	r2, #4
 8013cb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013cb8:	f043 0202 	orr.w	r2, r3, #2
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d006      	beq.n	8013cda <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013ccc:	6878      	ldr	r0, [r7, #4]
 8013cce:	f7fe fa65 	bl	801219c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013ce0:	b29b      	uxth	r3, r3
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d171      	bne.n	8013dca <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013cee:	e853 3f00 	ldrex	r3, [r3]
 8013cf2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8013cf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013cf6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013cfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	461a      	mov	r2, r3
 8013d04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013d08:	66bb      	str	r3, [r7, #104]	; 0x68
 8013d0a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d0c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8013d0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013d10:	e841 2300 	strex	r3, r2, [r1]
 8013d14:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8013d16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d1e4      	bne.n	8013ce6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	3308      	adds	r3, #8
 8013d22:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d26:	e853 3f00 	ldrex	r3, [r3]
 8013d2a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8013d2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013d2e:	4b56      	ldr	r3, [pc, #344]	; (8013e88 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8013d30:	4013      	ands	r3, r2
 8013d32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	3308      	adds	r3, #8
 8013d3a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013d3c:	657a      	str	r2, [r7, #84]	; 0x54
 8013d3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d40:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013d42:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013d44:	e841 2300 	strex	r3, r2, [r1]
 8013d48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d1e5      	bne.n	8013d1c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	2220      	movs	r2, #32
 8013d54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d62:	2b01      	cmp	r3, #1
 8013d64:	d12e      	bne.n	8013dc4 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	2200      	movs	r2, #0
 8013d6a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013d74:	e853 3f00 	ldrex	r3, [r3]
 8013d78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d7c:	f023 0310 	bic.w	r3, r3, #16
 8013d80:	67bb      	str	r3, [r7, #120]	; 0x78
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	461a      	mov	r2, r3
 8013d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013d8a:	643b      	str	r3, [r7, #64]	; 0x40
 8013d8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013d8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013d90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013d92:	e841 2300 	strex	r3, r2, [r1]
 8013d96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d1e6      	bne.n	8013d6c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	69db      	ldr	r3, [r3, #28]
 8013da4:	f003 0310 	and.w	r3, r3, #16
 8013da8:	2b10      	cmp	r3, #16
 8013daa:	d103      	bne.n	8013db4 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	2210      	movs	r2, #16
 8013db2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013dba:	4619      	mov	r1, r3
 8013dbc:	6878      	ldr	r0, [r7, #4]
 8013dbe:	f7fe f9f7 	bl	80121b0 <HAL_UARTEx_RxEventCallback>
 8013dc2:	e002      	b.n	8013dca <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8013dc4:	6878      	ldr	r0, [r7, #4]
 8013dc6:	f7f4 feb7 	bl	8008b38 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013dca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d006      	beq.n	8013de0 <UART_RxISR_8BIT_FIFOEN+0x248>
 8013dd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013dd6:	f003 0320 	and.w	r3, r3, #32
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	f47f af00 	bne.w	8013be0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013de6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8013dea:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d045      	beq.n	8013e7e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013df8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013dfc:	429a      	cmp	r2, r3
 8013dfe:	d23e      	bcs.n	8013e7e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	3308      	adds	r3, #8
 8013e06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e08:	6a3b      	ldr	r3, [r7, #32]
 8013e0a:	e853 3f00 	ldrex	r3, [r3]
 8013e0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8013e10:	69fb      	ldr	r3, [r7, #28]
 8013e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013e16:	673b      	str	r3, [r7, #112]	; 0x70
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	3308      	adds	r3, #8
 8013e1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013e20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013e22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013e26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e28:	e841 2300 	strex	r3, r2, [r1]
 8013e2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d1e5      	bne.n	8013e00 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	4a15      	ldr	r2, [pc, #84]	; (8013e8c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8013e38:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	e853 3f00 	ldrex	r3, [r3]
 8013e46:	60bb      	str	r3, [r7, #8]
   return(result);
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	f043 0320 	orr.w	r3, r3, #32
 8013e4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	461a      	mov	r2, r3
 8013e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013e58:	61bb      	str	r3, [r7, #24]
 8013e5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e5c:	6979      	ldr	r1, [r7, #20]
 8013e5e:	69ba      	ldr	r2, [r7, #24]
 8013e60:	e841 2300 	strex	r3, r2, [r1]
 8013e64:	613b      	str	r3, [r7, #16]
   return(result);
 8013e66:	693b      	ldr	r3, [r7, #16]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d1e6      	bne.n	8013e3a <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013e6c:	e007      	b.n	8013e7e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	699a      	ldr	r2, [r3, #24]
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	681b      	ldr	r3, [r3, #0]
 8013e78:	f042 0208 	orr.w	r2, r2, #8
 8013e7c:	619a      	str	r2, [r3, #24]
}
 8013e7e:	bf00      	nop
 8013e80:	3798      	adds	r7, #152	; 0x98
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bd80      	pop	{r7, pc}
 8013e86:	bf00      	nop
 8013e88:	effffffe 	.word	0xeffffffe
 8013e8c:	080138d7 	.word	0x080138d7

08013e90 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b0a8      	sub	sp, #160	; 0xa0
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e9e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	681b      	ldr	r3, [r3, #0]
 8013ea6:	69db      	ldr	r3, [r3, #28]
 8013ea8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	689b      	ldr	r3, [r3, #8]
 8013ebc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013ec6:	2b22      	cmp	r3, #34	; 0x22
 8013ec8:	f040 8151 	bne.w	801416e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013ed2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013ed6:	e0f8      	b.n	80140ca <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ede:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ee6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8013eea:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8013eee:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8013ef2:	4013      	ands	r3, r2
 8013ef4:	b29a      	uxth	r2, r3
 8013ef6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013efa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013f00:	1c9a      	adds	r2, r3, #2
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013f0c:	b29b      	uxth	r3, r3
 8013f0e:	3b01      	subs	r3, #1
 8013f10:	b29a      	uxth	r2, r3
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	681b      	ldr	r3, [r3, #0]
 8013f1c:	69db      	ldr	r3, [r3, #28]
 8013f1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8013f22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013f26:	f003 0307 	and.w	r3, r3, #7
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d053      	beq.n	8013fd6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013f2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013f32:	f003 0301 	and.w	r3, r3, #1
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d011      	beq.n	8013f5e <UART_RxISR_16BIT_FIFOEN+0xce>
 8013f3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d00b      	beq.n	8013f5e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	681b      	ldr	r3, [r3, #0]
 8013f4a:	2201      	movs	r2, #1
 8013f4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013f54:	f043 0201 	orr.w	r2, r3, #1
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013f5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013f62:	f003 0302 	and.w	r3, r3, #2
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d011      	beq.n	8013f8e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8013f6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013f6e:	f003 0301 	and.w	r3, r3, #1
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d00b      	beq.n	8013f8e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	2202      	movs	r2, #2
 8013f7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013f84:	f043 0204 	orr.w	r2, r3, #4
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013f8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013f92:	f003 0304 	and.w	r3, r3, #4
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d011      	beq.n	8013fbe <UART_RxISR_16BIT_FIFOEN+0x12e>
 8013f9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013f9e:	f003 0301 	and.w	r3, r3, #1
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d00b      	beq.n	8013fbe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	2204      	movs	r2, #4
 8013fac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013fb4:	f043 0202 	orr.w	r2, r3, #2
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013fc4:	2b00      	cmp	r3, #0
 8013fc6:	d006      	beq.n	8013fd6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013fc8:	6878      	ldr	r0, [r7, #4]
 8013fca:	f7fe f8e7 	bl	801219c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013fdc:	b29b      	uxth	r3, r3
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d173      	bne.n	80140ca <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fe8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013fea:	e853 3f00 	ldrex	r3, [r3]
 8013fee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8013ff0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013ff2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013ff6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	461a      	mov	r2, r3
 8014000:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014004:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014006:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014008:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801400a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801400c:	e841 2300 	strex	r3, r2, [r1]
 8014010:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014012:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014014:	2b00      	cmp	r3, #0
 8014016:	d1e4      	bne.n	8013fe2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	3308      	adds	r3, #8
 801401e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014022:	e853 3f00 	ldrex	r3, [r3]
 8014026:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014028:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801402a:	4b57      	ldr	r3, [pc, #348]	; (8014188 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 801402c:	4013      	ands	r3, r2
 801402e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	3308      	adds	r3, #8
 8014038:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801403c:	65ba      	str	r2, [r7, #88]	; 0x58
 801403e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014040:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014042:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014044:	e841 2300 	strex	r3, r2, [r1]
 8014048:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801404a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801404c:	2b00      	cmp	r3, #0
 801404e:	d1e3      	bne.n	8014018 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	2220      	movs	r2, #32
 8014054:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	2200      	movs	r2, #0
 801405c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014062:	2b01      	cmp	r3, #1
 8014064:	d12e      	bne.n	80140c4 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	2200      	movs	r2, #0
 801406a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014074:	e853 3f00 	ldrex	r3, [r3]
 8014078:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801407a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801407c:	f023 0310 	bic.w	r3, r3, #16
 8014080:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	461a      	mov	r2, r3
 8014088:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801408a:	647b      	str	r3, [r7, #68]	; 0x44
 801408c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801408e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014090:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014092:	e841 2300 	strex	r3, r2, [r1]
 8014096:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801409a:	2b00      	cmp	r3, #0
 801409c:	d1e6      	bne.n	801406c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	69db      	ldr	r3, [r3, #28]
 80140a4:	f003 0310 	and.w	r3, r3, #16
 80140a8:	2b10      	cmp	r3, #16
 80140aa:	d103      	bne.n	80140b4 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	2210      	movs	r2, #16
 80140b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80140ba:	4619      	mov	r1, r3
 80140bc:	6878      	ldr	r0, [r7, #4]
 80140be:	f7fe f877 	bl	80121b0 <HAL_UARTEx_RxEventCallback>
 80140c2:	e002      	b.n	80140ca <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80140c4:	6878      	ldr	r0, [r7, #4]
 80140c6:	f7f4 fd37 	bl	8008b38 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80140ca:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d006      	beq.n	80140e0 <UART_RxISR_16BIT_FIFOEN+0x250>
 80140d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80140d6:	f003 0320 	and.w	r3, r3, #32
 80140da:	2b00      	cmp	r3, #0
 80140dc:	f47f aefc 	bne.w	8013ed8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80140e6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80140ea:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d045      	beq.n	801417e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80140f8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80140fc:	429a      	cmp	r2, r3
 80140fe:	d23e      	bcs.n	801417e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	3308      	adds	r3, #8
 8014106:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801410a:	e853 3f00 	ldrex	r3, [r3]
 801410e:	623b      	str	r3, [r7, #32]
   return(result);
 8014110:	6a3b      	ldr	r3, [r7, #32]
 8014112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8014116:	677b      	str	r3, [r7, #116]	; 0x74
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	3308      	adds	r3, #8
 801411e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014120:	633a      	str	r2, [r7, #48]	; 0x30
 8014122:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014124:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014128:	e841 2300 	strex	r3, r2, [r1]
 801412c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014130:	2b00      	cmp	r3, #0
 8014132:	d1e5      	bne.n	8014100 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	4a15      	ldr	r2, [pc, #84]	; (801418c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8014138:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014140:	693b      	ldr	r3, [r7, #16]
 8014142:	e853 3f00 	ldrex	r3, [r3]
 8014146:	60fb      	str	r3, [r7, #12]
   return(result);
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	f043 0320 	orr.w	r3, r3, #32
 801414e:	673b      	str	r3, [r7, #112]	; 0x70
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	461a      	mov	r2, r3
 8014156:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014158:	61fb      	str	r3, [r7, #28]
 801415a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801415c:	69b9      	ldr	r1, [r7, #24]
 801415e:	69fa      	ldr	r2, [r7, #28]
 8014160:	e841 2300 	strex	r3, r2, [r1]
 8014164:	617b      	str	r3, [r7, #20]
   return(result);
 8014166:	697b      	ldr	r3, [r7, #20]
 8014168:	2b00      	cmp	r3, #0
 801416a:	d1e6      	bne.n	801413a <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801416c:	e007      	b.n	801417e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	699a      	ldr	r2, [r3, #24]
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	681b      	ldr	r3, [r3, #0]
 8014178:	f042 0208 	orr.w	r2, r2, #8
 801417c:	619a      	str	r2, [r3, #24]
}
 801417e:	bf00      	nop
 8014180:	37a0      	adds	r7, #160	; 0xa0
 8014182:	46bd      	mov	sp, r7
 8014184:	bd80      	pop	{r7, pc}
 8014186:	bf00      	nop
 8014188:	effffffe 	.word	0xeffffffe
 801418c:	08013a37 	.word	0x08013a37

08014190 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8014190:	b480      	push	{r7}
 8014192:	b083      	sub	sp, #12
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8014198:	bf00      	nop
 801419a:	370c      	adds	r7, #12
 801419c:	46bd      	mov	sp, r7
 801419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141a2:	4770      	bx	lr

080141a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80141a4:	b480      	push	{r7}
 80141a6:	b083      	sub	sp, #12
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80141ac:	bf00      	nop
 80141ae:	370c      	adds	r7, #12
 80141b0:	46bd      	mov	sp, r7
 80141b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b6:	4770      	bx	lr

080141b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80141b8:	b480      	push	{r7}
 80141ba:	b083      	sub	sp, #12
 80141bc:	af00      	add	r7, sp, #0
 80141be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80141c0:	bf00      	nop
 80141c2:	370c      	adds	r7, #12
 80141c4:	46bd      	mov	sp, r7
 80141c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ca:	4770      	bx	lr

080141cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80141cc:	b480      	push	{r7}
 80141ce:	b085      	sub	sp, #20
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80141da:	2b01      	cmp	r3, #1
 80141dc:	d101      	bne.n	80141e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80141de:	2302      	movs	r3, #2
 80141e0:	e027      	b.n	8014232 <HAL_UARTEx_DisableFifoMode+0x66>
 80141e2:	687b      	ldr	r3, [r7, #4]
 80141e4:	2201      	movs	r2, #1
 80141e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	2224      	movs	r2, #36	; 0x24
 80141ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	681a      	ldr	r2, [r3, #0]
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	f022 0201 	bic.w	r2, r2, #1
 8014208:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8014210:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	2200      	movs	r2, #0
 8014216:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	68fa      	ldr	r2, [r7, #12]
 801421e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	2220      	movs	r2, #32
 8014224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	2200      	movs	r2, #0
 801422c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8014230:	2300      	movs	r3, #0
}
 8014232:	4618      	mov	r0, r3
 8014234:	3714      	adds	r7, #20
 8014236:	46bd      	mov	sp, r7
 8014238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801423c:	4770      	bx	lr

0801423e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801423e:	b580      	push	{r7, lr}
 8014240:	b084      	sub	sp, #16
 8014242:	af00      	add	r7, sp, #0
 8014244:	6078      	str	r0, [r7, #4]
 8014246:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801424e:	2b01      	cmp	r3, #1
 8014250:	d101      	bne.n	8014256 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8014252:	2302      	movs	r3, #2
 8014254:	e02d      	b.n	80142b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	2201      	movs	r2, #1
 801425a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	2224      	movs	r2, #36	; 0x24
 8014262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	681a      	ldr	r2, [r3, #0]
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	f022 0201 	bic.w	r2, r2, #1
 801427c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	689b      	ldr	r3, [r3, #8]
 8014284:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	681b      	ldr	r3, [r3, #0]
 801428c:	683a      	ldr	r2, [r7, #0]
 801428e:	430a      	orrs	r2, r1
 8014290:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014292:	6878      	ldr	r0, [r7, #4]
 8014294:	f000 f850 	bl	8014338 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	68fa      	ldr	r2, [r7, #12]
 801429e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	2220      	movs	r2, #32
 80142a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	2200      	movs	r2, #0
 80142ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80142b0:	2300      	movs	r3, #0
}
 80142b2:	4618      	mov	r0, r3
 80142b4:	3710      	adds	r7, #16
 80142b6:	46bd      	mov	sp, r7
 80142b8:	bd80      	pop	{r7, pc}

080142ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80142ba:	b580      	push	{r7, lr}
 80142bc:	b084      	sub	sp, #16
 80142be:	af00      	add	r7, sp, #0
 80142c0:	6078      	str	r0, [r7, #4]
 80142c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80142ca:	2b01      	cmp	r3, #1
 80142cc:	d101      	bne.n	80142d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80142ce:	2302      	movs	r3, #2
 80142d0:	e02d      	b.n	801432e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	2201      	movs	r2, #1
 80142d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	2224      	movs	r2, #36	; 0x24
 80142de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	681b      	ldr	r3, [r3, #0]
 80142e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	681b      	ldr	r3, [r3, #0]
 80142ee:	681a      	ldr	r2, [r3, #0]
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	f022 0201 	bic.w	r2, r2, #1
 80142f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	689b      	ldr	r3, [r3, #8]
 8014300:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	683a      	ldr	r2, [r7, #0]
 801430a:	430a      	orrs	r2, r1
 801430c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801430e:	6878      	ldr	r0, [r7, #4]
 8014310:	f000 f812 	bl	8014338 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	68fa      	ldr	r2, [r7, #12]
 801431a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	2220      	movs	r2, #32
 8014320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	2200      	movs	r2, #0
 8014328:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801432c:	2300      	movs	r3, #0
}
 801432e:	4618      	mov	r0, r3
 8014330:	3710      	adds	r7, #16
 8014332:	46bd      	mov	sp, r7
 8014334:	bd80      	pop	{r7, pc}
	...

08014338 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8014338:	b480      	push	{r7}
 801433a:	b085      	sub	sp, #20
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014344:	2b00      	cmp	r3, #0
 8014346:	d108      	bne.n	801435a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	2201      	movs	r2, #1
 801434c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	2201      	movs	r2, #1
 8014354:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8014358:	e031      	b.n	80143be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801435a:	2310      	movs	r3, #16
 801435c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801435e:	2310      	movs	r3, #16
 8014360:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	681b      	ldr	r3, [r3, #0]
 8014366:	689b      	ldr	r3, [r3, #8]
 8014368:	0e5b      	lsrs	r3, r3, #25
 801436a:	b2db      	uxtb	r3, r3
 801436c:	f003 0307 	and.w	r3, r3, #7
 8014370:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	689b      	ldr	r3, [r3, #8]
 8014378:	0f5b      	lsrs	r3, r3, #29
 801437a:	b2db      	uxtb	r3, r3
 801437c:	f003 0307 	and.w	r3, r3, #7
 8014380:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014382:	7bbb      	ldrb	r3, [r7, #14]
 8014384:	7b3a      	ldrb	r2, [r7, #12]
 8014386:	4911      	ldr	r1, [pc, #68]	; (80143cc <UARTEx_SetNbDataToProcess+0x94>)
 8014388:	5c8a      	ldrb	r2, [r1, r2]
 801438a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801438e:	7b3a      	ldrb	r2, [r7, #12]
 8014390:	490f      	ldr	r1, [pc, #60]	; (80143d0 <UARTEx_SetNbDataToProcess+0x98>)
 8014392:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014394:	fb93 f3f2 	sdiv	r3, r3, r2
 8014398:	b29a      	uxth	r2, r3
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80143a0:	7bfb      	ldrb	r3, [r7, #15]
 80143a2:	7b7a      	ldrb	r2, [r7, #13]
 80143a4:	4909      	ldr	r1, [pc, #36]	; (80143cc <UARTEx_SetNbDataToProcess+0x94>)
 80143a6:	5c8a      	ldrb	r2, [r1, r2]
 80143a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80143ac:	7b7a      	ldrb	r2, [r7, #13]
 80143ae:	4908      	ldr	r1, [pc, #32]	; (80143d0 <UARTEx_SetNbDataToProcess+0x98>)
 80143b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80143b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80143b6:	b29a      	uxth	r2, r3
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80143be:	bf00      	nop
 80143c0:	3714      	adds	r7, #20
 80143c2:	46bd      	mov	sp, r7
 80143c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c8:	4770      	bx	lr
 80143ca:	bf00      	nop
 80143cc:	08018338 	.word	0x08018338
 80143d0:	08018340 	.word	0x08018340

080143d4 <__errno>:
 80143d4:	4b01      	ldr	r3, [pc, #4]	; (80143dc <__errno+0x8>)
 80143d6:	6818      	ldr	r0, [r3, #0]
 80143d8:	4770      	bx	lr
 80143da:	bf00      	nop
 80143dc:	24000010 	.word	0x24000010

080143e0 <__libc_init_array>:
 80143e0:	b570      	push	{r4, r5, r6, lr}
 80143e2:	4d0d      	ldr	r5, [pc, #52]	; (8014418 <__libc_init_array+0x38>)
 80143e4:	4c0d      	ldr	r4, [pc, #52]	; (801441c <__libc_init_array+0x3c>)
 80143e6:	1b64      	subs	r4, r4, r5
 80143e8:	10a4      	asrs	r4, r4, #2
 80143ea:	2600      	movs	r6, #0
 80143ec:	42a6      	cmp	r6, r4
 80143ee:	d109      	bne.n	8014404 <__libc_init_array+0x24>
 80143f0:	4d0b      	ldr	r5, [pc, #44]	; (8014420 <__libc_init_array+0x40>)
 80143f2:	4c0c      	ldr	r4, [pc, #48]	; (8014424 <__libc_init_array+0x44>)
 80143f4:	f003 ff4a 	bl	801828c <_init>
 80143f8:	1b64      	subs	r4, r4, r5
 80143fa:	10a4      	asrs	r4, r4, #2
 80143fc:	2600      	movs	r6, #0
 80143fe:	42a6      	cmp	r6, r4
 8014400:	d105      	bne.n	801440e <__libc_init_array+0x2e>
 8014402:	bd70      	pop	{r4, r5, r6, pc}
 8014404:	f855 3b04 	ldr.w	r3, [r5], #4
 8014408:	4798      	blx	r3
 801440a:	3601      	adds	r6, #1
 801440c:	e7ee      	b.n	80143ec <__libc_init_array+0xc>
 801440e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014412:	4798      	blx	r3
 8014414:	3601      	adds	r6, #1
 8014416:	e7f2      	b.n	80143fe <__libc_init_array+0x1e>
 8014418:	0801a1c8 	.word	0x0801a1c8
 801441c:	0801a1c8 	.word	0x0801a1c8
 8014420:	0801a1c8 	.word	0x0801a1c8
 8014424:	0801a1cc 	.word	0x0801a1cc

08014428 <memcpy>:
 8014428:	440a      	add	r2, r1
 801442a:	4291      	cmp	r1, r2
 801442c:	f100 33ff 	add.w	r3, r0, #4294967295
 8014430:	d100      	bne.n	8014434 <memcpy+0xc>
 8014432:	4770      	bx	lr
 8014434:	b510      	push	{r4, lr}
 8014436:	f811 4b01 	ldrb.w	r4, [r1], #1
 801443a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801443e:	4291      	cmp	r1, r2
 8014440:	d1f9      	bne.n	8014436 <memcpy+0xe>
 8014442:	bd10      	pop	{r4, pc}

08014444 <memset>:
 8014444:	4402      	add	r2, r0
 8014446:	4603      	mov	r3, r0
 8014448:	4293      	cmp	r3, r2
 801444a:	d100      	bne.n	801444e <memset+0xa>
 801444c:	4770      	bx	lr
 801444e:	f803 1b01 	strb.w	r1, [r3], #1
 8014452:	e7f9      	b.n	8014448 <memset+0x4>

08014454 <__cvt>:
 8014454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014456:	ed2d 8b02 	vpush	{d8}
 801445a:	eeb0 8b40 	vmov.f64	d8, d0
 801445e:	b085      	sub	sp, #20
 8014460:	4617      	mov	r7, r2
 8014462:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8014464:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014466:	ee18 2a90 	vmov	r2, s17
 801446a:	f025 0520 	bic.w	r5, r5, #32
 801446e:	2a00      	cmp	r2, #0
 8014470:	bfb6      	itet	lt
 8014472:	222d      	movlt	r2, #45	; 0x2d
 8014474:	2200      	movge	r2, #0
 8014476:	eeb1 8b40 	vneglt.f64	d8, d0
 801447a:	2d46      	cmp	r5, #70	; 0x46
 801447c:	460c      	mov	r4, r1
 801447e:	701a      	strb	r2, [r3, #0]
 8014480:	d004      	beq.n	801448c <__cvt+0x38>
 8014482:	2d45      	cmp	r5, #69	; 0x45
 8014484:	d100      	bne.n	8014488 <__cvt+0x34>
 8014486:	3401      	adds	r4, #1
 8014488:	2102      	movs	r1, #2
 801448a:	e000      	b.n	801448e <__cvt+0x3a>
 801448c:	2103      	movs	r1, #3
 801448e:	ab03      	add	r3, sp, #12
 8014490:	9301      	str	r3, [sp, #4]
 8014492:	ab02      	add	r3, sp, #8
 8014494:	9300      	str	r3, [sp, #0]
 8014496:	4622      	mov	r2, r4
 8014498:	4633      	mov	r3, r6
 801449a:	eeb0 0b48 	vmov.f64	d0, d8
 801449e:	f000 fcab 	bl	8014df8 <_dtoa_r>
 80144a2:	2d47      	cmp	r5, #71	; 0x47
 80144a4:	d109      	bne.n	80144ba <__cvt+0x66>
 80144a6:	07fb      	lsls	r3, r7, #31
 80144a8:	d407      	bmi.n	80144ba <__cvt+0x66>
 80144aa:	9b03      	ldr	r3, [sp, #12]
 80144ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80144ae:	1a1b      	subs	r3, r3, r0
 80144b0:	6013      	str	r3, [r2, #0]
 80144b2:	b005      	add	sp, #20
 80144b4:	ecbd 8b02 	vpop	{d8}
 80144b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144ba:	2d46      	cmp	r5, #70	; 0x46
 80144bc:	eb00 0204 	add.w	r2, r0, r4
 80144c0:	d10c      	bne.n	80144dc <__cvt+0x88>
 80144c2:	7803      	ldrb	r3, [r0, #0]
 80144c4:	2b30      	cmp	r3, #48	; 0x30
 80144c6:	d107      	bne.n	80144d8 <__cvt+0x84>
 80144c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80144cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144d0:	bf1c      	itt	ne
 80144d2:	f1c4 0401 	rsbne	r4, r4, #1
 80144d6:	6034      	strne	r4, [r6, #0]
 80144d8:	6833      	ldr	r3, [r6, #0]
 80144da:	441a      	add	r2, r3
 80144dc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80144e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144e4:	bf08      	it	eq
 80144e6:	9203      	streq	r2, [sp, #12]
 80144e8:	2130      	movs	r1, #48	; 0x30
 80144ea:	9b03      	ldr	r3, [sp, #12]
 80144ec:	4293      	cmp	r3, r2
 80144ee:	d2dc      	bcs.n	80144aa <__cvt+0x56>
 80144f0:	1c5c      	adds	r4, r3, #1
 80144f2:	9403      	str	r4, [sp, #12]
 80144f4:	7019      	strb	r1, [r3, #0]
 80144f6:	e7f8      	b.n	80144ea <__cvt+0x96>

080144f8 <__exponent>:
 80144f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80144fa:	4603      	mov	r3, r0
 80144fc:	2900      	cmp	r1, #0
 80144fe:	bfb8      	it	lt
 8014500:	4249      	neglt	r1, r1
 8014502:	f803 2b02 	strb.w	r2, [r3], #2
 8014506:	bfb4      	ite	lt
 8014508:	222d      	movlt	r2, #45	; 0x2d
 801450a:	222b      	movge	r2, #43	; 0x2b
 801450c:	2909      	cmp	r1, #9
 801450e:	7042      	strb	r2, [r0, #1]
 8014510:	dd2a      	ble.n	8014568 <__exponent+0x70>
 8014512:	f10d 0407 	add.w	r4, sp, #7
 8014516:	46a4      	mov	ip, r4
 8014518:	270a      	movs	r7, #10
 801451a:	46a6      	mov	lr, r4
 801451c:	460a      	mov	r2, r1
 801451e:	fb91 f6f7 	sdiv	r6, r1, r7
 8014522:	fb07 1516 	mls	r5, r7, r6, r1
 8014526:	3530      	adds	r5, #48	; 0x30
 8014528:	2a63      	cmp	r2, #99	; 0x63
 801452a:	f104 34ff 	add.w	r4, r4, #4294967295
 801452e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8014532:	4631      	mov	r1, r6
 8014534:	dcf1      	bgt.n	801451a <__exponent+0x22>
 8014536:	3130      	adds	r1, #48	; 0x30
 8014538:	f1ae 0502 	sub.w	r5, lr, #2
 801453c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8014540:	1c44      	adds	r4, r0, #1
 8014542:	4629      	mov	r1, r5
 8014544:	4561      	cmp	r1, ip
 8014546:	d30a      	bcc.n	801455e <__exponent+0x66>
 8014548:	f10d 0209 	add.w	r2, sp, #9
 801454c:	eba2 020e 	sub.w	r2, r2, lr
 8014550:	4565      	cmp	r5, ip
 8014552:	bf88      	it	hi
 8014554:	2200      	movhi	r2, #0
 8014556:	4413      	add	r3, r2
 8014558:	1a18      	subs	r0, r3, r0
 801455a:	b003      	add	sp, #12
 801455c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801455e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014562:	f804 2f01 	strb.w	r2, [r4, #1]!
 8014566:	e7ed      	b.n	8014544 <__exponent+0x4c>
 8014568:	2330      	movs	r3, #48	; 0x30
 801456a:	3130      	adds	r1, #48	; 0x30
 801456c:	7083      	strb	r3, [r0, #2]
 801456e:	70c1      	strb	r1, [r0, #3]
 8014570:	1d03      	adds	r3, r0, #4
 8014572:	e7f1      	b.n	8014558 <__exponent+0x60>
 8014574:	0000      	movs	r0, r0
	...

08014578 <_printf_float>:
 8014578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801457c:	b08b      	sub	sp, #44	; 0x2c
 801457e:	460c      	mov	r4, r1
 8014580:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8014584:	4616      	mov	r6, r2
 8014586:	461f      	mov	r7, r3
 8014588:	4605      	mov	r5, r0
 801458a:	f001 f9b7 	bl	80158fc <_localeconv_r>
 801458e:	f8d0 b000 	ldr.w	fp, [r0]
 8014592:	4658      	mov	r0, fp
 8014594:	f7eb febc 	bl	8000310 <strlen>
 8014598:	2300      	movs	r3, #0
 801459a:	9308      	str	r3, [sp, #32]
 801459c:	f8d8 3000 	ldr.w	r3, [r8]
 80145a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80145a4:	6822      	ldr	r2, [r4, #0]
 80145a6:	3307      	adds	r3, #7
 80145a8:	f023 0307 	bic.w	r3, r3, #7
 80145ac:	f103 0108 	add.w	r1, r3, #8
 80145b0:	f8c8 1000 	str.w	r1, [r8]
 80145b4:	4682      	mov	sl, r0
 80145b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80145ba:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80145be:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8014820 <_printf_float+0x2a8>
 80145c2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80145c6:	eeb0 6bc0 	vabs.f64	d6, d0
 80145ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80145ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145d2:	dd24      	ble.n	801461e <_printf_float+0xa6>
 80145d4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80145d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145dc:	d502      	bpl.n	80145e4 <_printf_float+0x6c>
 80145de:	232d      	movs	r3, #45	; 0x2d
 80145e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80145e4:	4b90      	ldr	r3, [pc, #576]	; (8014828 <_printf_float+0x2b0>)
 80145e6:	4891      	ldr	r0, [pc, #580]	; (801482c <_printf_float+0x2b4>)
 80145e8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80145ec:	bf94      	ite	ls
 80145ee:	4698      	movls	r8, r3
 80145f0:	4680      	movhi	r8, r0
 80145f2:	2303      	movs	r3, #3
 80145f4:	6123      	str	r3, [r4, #16]
 80145f6:	f022 0204 	bic.w	r2, r2, #4
 80145fa:	2300      	movs	r3, #0
 80145fc:	6022      	str	r2, [r4, #0]
 80145fe:	9304      	str	r3, [sp, #16]
 8014600:	9700      	str	r7, [sp, #0]
 8014602:	4633      	mov	r3, r6
 8014604:	aa09      	add	r2, sp, #36	; 0x24
 8014606:	4621      	mov	r1, r4
 8014608:	4628      	mov	r0, r5
 801460a:	f000 f9d3 	bl	80149b4 <_printf_common>
 801460e:	3001      	adds	r0, #1
 8014610:	f040 808a 	bne.w	8014728 <_printf_float+0x1b0>
 8014614:	f04f 30ff 	mov.w	r0, #4294967295
 8014618:	b00b      	add	sp, #44	; 0x2c
 801461a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801461e:	eeb4 0b40 	vcmp.f64	d0, d0
 8014622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014626:	d709      	bvc.n	801463c <_printf_float+0xc4>
 8014628:	ee10 3a90 	vmov	r3, s1
 801462c:	2b00      	cmp	r3, #0
 801462e:	bfbc      	itt	lt
 8014630:	232d      	movlt	r3, #45	; 0x2d
 8014632:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014636:	487e      	ldr	r0, [pc, #504]	; (8014830 <_printf_float+0x2b8>)
 8014638:	4b7e      	ldr	r3, [pc, #504]	; (8014834 <_printf_float+0x2bc>)
 801463a:	e7d5      	b.n	80145e8 <_printf_float+0x70>
 801463c:	6863      	ldr	r3, [r4, #4]
 801463e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8014642:	9104      	str	r1, [sp, #16]
 8014644:	1c59      	adds	r1, r3, #1
 8014646:	d13c      	bne.n	80146c2 <_printf_float+0x14a>
 8014648:	2306      	movs	r3, #6
 801464a:	6063      	str	r3, [r4, #4]
 801464c:	2300      	movs	r3, #0
 801464e:	9303      	str	r3, [sp, #12]
 8014650:	ab08      	add	r3, sp, #32
 8014652:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8014656:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801465a:	ab07      	add	r3, sp, #28
 801465c:	6861      	ldr	r1, [r4, #4]
 801465e:	9300      	str	r3, [sp, #0]
 8014660:	6022      	str	r2, [r4, #0]
 8014662:	f10d 031b 	add.w	r3, sp, #27
 8014666:	4628      	mov	r0, r5
 8014668:	f7ff fef4 	bl	8014454 <__cvt>
 801466c:	9b04      	ldr	r3, [sp, #16]
 801466e:	9907      	ldr	r1, [sp, #28]
 8014670:	2b47      	cmp	r3, #71	; 0x47
 8014672:	4680      	mov	r8, r0
 8014674:	d108      	bne.n	8014688 <_printf_float+0x110>
 8014676:	1cc8      	adds	r0, r1, #3
 8014678:	db02      	blt.n	8014680 <_printf_float+0x108>
 801467a:	6863      	ldr	r3, [r4, #4]
 801467c:	4299      	cmp	r1, r3
 801467e:	dd41      	ble.n	8014704 <_printf_float+0x18c>
 8014680:	f1a9 0902 	sub.w	r9, r9, #2
 8014684:	fa5f f989 	uxtb.w	r9, r9
 8014688:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801468c:	d820      	bhi.n	80146d0 <_printf_float+0x158>
 801468e:	3901      	subs	r1, #1
 8014690:	464a      	mov	r2, r9
 8014692:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014696:	9107      	str	r1, [sp, #28]
 8014698:	f7ff ff2e 	bl	80144f8 <__exponent>
 801469c:	9a08      	ldr	r2, [sp, #32]
 801469e:	9004      	str	r0, [sp, #16]
 80146a0:	1813      	adds	r3, r2, r0
 80146a2:	2a01      	cmp	r2, #1
 80146a4:	6123      	str	r3, [r4, #16]
 80146a6:	dc02      	bgt.n	80146ae <_printf_float+0x136>
 80146a8:	6822      	ldr	r2, [r4, #0]
 80146aa:	07d2      	lsls	r2, r2, #31
 80146ac:	d501      	bpl.n	80146b2 <_printf_float+0x13a>
 80146ae:	3301      	adds	r3, #1
 80146b0:	6123      	str	r3, [r4, #16]
 80146b2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d0a2      	beq.n	8014600 <_printf_float+0x88>
 80146ba:	232d      	movs	r3, #45	; 0x2d
 80146bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80146c0:	e79e      	b.n	8014600 <_printf_float+0x88>
 80146c2:	9904      	ldr	r1, [sp, #16]
 80146c4:	2947      	cmp	r1, #71	; 0x47
 80146c6:	d1c1      	bne.n	801464c <_printf_float+0xd4>
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d1bf      	bne.n	801464c <_printf_float+0xd4>
 80146cc:	2301      	movs	r3, #1
 80146ce:	e7bc      	b.n	801464a <_printf_float+0xd2>
 80146d0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80146d4:	d118      	bne.n	8014708 <_printf_float+0x190>
 80146d6:	2900      	cmp	r1, #0
 80146d8:	6863      	ldr	r3, [r4, #4]
 80146da:	dd0b      	ble.n	80146f4 <_printf_float+0x17c>
 80146dc:	6121      	str	r1, [r4, #16]
 80146de:	b913      	cbnz	r3, 80146e6 <_printf_float+0x16e>
 80146e0:	6822      	ldr	r2, [r4, #0]
 80146e2:	07d0      	lsls	r0, r2, #31
 80146e4:	d502      	bpl.n	80146ec <_printf_float+0x174>
 80146e6:	3301      	adds	r3, #1
 80146e8:	440b      	add	r3, r1
 80146ea:	6123      	str	r3, [r4, #16]
 80146ec:	2300      	movs	r3, #0
 80146ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80146f0:	9304      	str	r3, [sp, #16]
 80146f2:	e7de      	b.n	80146b2 <_printf_float+0x13a>
 80146f4:	b913      	cbnz	r3, 80146fc <_printf_float+0x184>
 80146f6:	6822      	ldr	r2, [r4, #0]
 80146f8:	07d2      	lsls	r2, r2, #31
 80146fa:	d501      	bpl.n	8014700 <_printf_float+0x188>
 80146fc:	3302      	adds	r3, #2
 80146fe:	e7f4      	b.n	80146ea <_printf_float+0x172>
 8014700:	2301      	movs	r3, #1
 8014702:	e7f2      	b.n	80146ea <_printf_float+0x172>
 8014704:	f04f 0967 	mov.w	r9, #103	; 0x67
 8014708:	9b08      	ldr	r3, [sp, #32]
 801470a:	4299      	cmp	r1, r3
 801470c:	db05      	blt.n	801471a <_printf_float+0x1a2>
 801470e:	6823      	ldr	r3, [r4, #0]
 8014710:	6121      	str	r1, [r4, #16]
 8014712:	07d8      	lsls	r0, r3, #31
 8014714:	d5ea      	bpl.n	80146ec <_printf_float+0x174>
 8014716:	1c4b      	adds	r3, r1, #1
 8014718:	e7e7      	b.n	80146ea <_printf_float+0x172>
 801471a:	2900      	cmp	r1, #0
 801471c:	bfd4      	ite	le
 801471e:	f1c1 0202 	rsble	r2, r1, #2
 8014722:	2201      	movgt	r2, #1
 8014724:	4413      	add	r3, r2
 8014726:	e7e0      	b.n	80146ea <_printf_float+0x172>
 8014728:	6823      	ldr	r3, [r4, #0]
 801472a:	055a      	lsls	r2, r3, #21
 801472c:	d407      	bmi.n	801473e <_printf_float+0x1c6>
 801472e:	6923      	ldr	r3, [r4, #16]
 8014730:	4642      	mov	r2, r8
 8014732:	4631      	mov	r1, r6
 8014734:	4628      	mov	r0, r5
 8014736:	47b8      	blx	r7
 8014738:	3001      	adds	r0, #1
 801473a:	d12a      	bne.n	8014792 <_printf_float+0x21a>
 801473c:	e76a      	b.n	8014614 <_printf_float+0x9c>
 801473e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014742:	f240 80e2 	bls.w	801490a <_printf_float+0x392>
 8014746:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801474a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801474e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014752:	d133      	bne.n	80147bc <_printf_float+0x244>
 8014754:	4a38      	ldr	r2, [pc, #224]	; (8014838 <_printf_float+0x2c0>)
 8014756:	2301      	movs	r3, #1
 8014758:	4631      	mov	r1, r6
 801475a:	4628      	mov	r0, r5
 801475c:	47b8      	blx	r7
 801475e:	3001      	adds	r0, #1
 8014760:	f43f af58 	beq.w	8014614 <_printf_float+0x9c>
 8014764:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014768:	429a      	cmp	r2, r3
 801476a:	db02      	blt.n	8014772 <_printf_float+0x1fa>
 801476c:	6823      	ldr	r3, [r4, #0]
 801476e:	07d8      	lsls	r0, r3, #31
 8014770:	d50f      	bpl.n	8014792 <_printf_float+0x21a>
 8014772:	4653      	mov	r3, sl
 8014774:	465a      	mov	r2, fp
 8014776:	4631      	mov	r1, r6
 8014778:	4628      	mov	r0, r5
 801477a:	47b8      	blx	r7
 801477c:	3001      	adds	r0, #1
 801477e:	f43f af49 	beq.w	8014614 <_printf_float+0x9c>
 8014782:	f04f 0800 	mov.w	r8, #0
 8014786:	f104 091a 	add.w	r9, r4, #26
 801478a:	9b08      	ldr	r3, [sp, #32]
 801478c:	3b01      	subs	r3, #1
 801478e:	4543      	cmp	r3, r8
 8014790:	dc09      	bgt.n	80147a6 <_printf_float+0x22e>
 8014792:	6823      	ldr	r3, [r4, #0]
 8014794:	079b      	lsls	r3, r3, #30
 8014796:	f100 8108 	bmi.w	80149aa <_printf_float+0x432>
 801479a:	68e0      	ldr	r0, [r4, #12]
 801479c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801479e:	4298      	cmp	r0, r3
 80147a0:	bfb8      	it	lt
 80147a2:	4618      	movlt	r0, r3
 80147a4:	e738      	b.n	8014618 <_printf_float+0xa0>
 80147a6:	2301      	movs	r3, #1
 80147a8:	464a      	mov	r2, r9
 80147aa:	4631      	mov	r1, r6
 80147ac:	4628      	mov	r0, r5
 80147ae:	47b8      	blx	r7
 80147b0:	3001      	adds	r0, #1
 80147b2:	f43f af2f 	beq.w	8014614 <_printf_float+0x9c>
 80147b6:	f108 0801 	add.w	r8, r8, #1
 80147ba:	e7e6      	b.n	801478a <_printf_float+0x212>
 80147bc:	9b07      	ldr	r3, [sp, #28]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	dc3c      	bgt.n	801483c <_printf_float+0x2c4>
 80147c2:	4a1d      	ldr	r2, [pc, #116]	; (8014838 <_printf_float+0x2c0>)
 80147c4:	2301      	movs	r3, #1
 80147c6:	4631      	mov	r1, r6
 80147c8:	4628      	mov	r0, r5
 80147ca:	47b8      	blx	r7
 80147cc:	3001      	adds	r0, #1
 80147ce:	f43f af21 	beq.w	8014614 <_printf_float+0x9c>
 80147d2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80147d6:	4313      	orrs	r3, r2
 80147d8:	d102      	bne.n	80147e0 <_printf_float+0x268>
 80147da:	6823      	ldr	r3, [r4, #0]
 80147dc:	07d9      	lsls	r1, r3, #31
 80147de:	d5d8      	bpl.n	8014792 <_printf_float+0x21a>
 80147e0:	4653      	mov	r3, sl
 80147e2:	465a      	mov	r2, fp
 80147e4:	4631      	mov	r1, r6
 80147e6:	4628      	mov	r0, r5
 80147e8:	47b8      	blx	r7
 80147ea:	3001      	adds	r0, #1
 80147ec:	f43f af12 	beq.w	8014614 <_printf_float+0x9c>
 80147f0:	f04f 0900 	mov.w	r9, #0
 80147f4:	f104 0a1a 	add.w	sl, r4, #26
 80147f8:	9b07      	ldr	r3, [sp, #28]
 80147fa:	425b      	negs	r3, r3
 80147fc:	454b      	cmp	r3, r9
 80147fe:	dc01      	bgt.n	8014804 <_printf_float+0x28c>
 8014800:	9b08      	ldr	r3, [sp, #32]
 8014802:	e795      	b.n	8014730 <_printf_float+0x1b8>
 8014804:	2301      	movs	r3, #1
 8014806:	4652      	mov	r2, sl
 8014808:	4631      	mov	r1, r6
 801480a:	4628      	mov	r0, r5
 801480c:	47b8      	blx	r7
 801480e:	3001      	adds	r0, #1
 8014810:	f43f af00 	beq.w	8014614 <_printf_float+0x9c>
 8014814:	f109 0901 	add.w	r9, r9, #1
 8014818:	e7ee      	b.n	80147f8 <_printf_float+0x280>
 801481a:	bf00      	nop
 801481c:	f3af 8000 	nop.w
 8014820:	ffffffff 	.word	0xffffffff
 8014824:	7fefffff 	.word	0x7fefffff
 8014828:	0801834c 	.word	0x0801834c
 801482c:	08018350 	.word	0x08018350
 8014830:	08018358 	.word	0x08018358
 8014834:	08018354 	.word	0x08018354
 8014838:	0801835c 	.word	0x0801835c
 801483c:	9a08      	ldr	r2, [sp, #32]
 801483e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014840:	429a      	cmp	r2, r3
 8014842:	bfa8      	it	ge
 8014844:	461a      	movge	r2, r3
 8014846:	2a00      	cmp	r2, #0
 8014848:	4691      	mov	r9, r2
 801484a:	dc38      	bgt.n	80148be <_printf_float+0x346>
 801484c:	2300      	movs	r3, #0
 801484e:	9305      	str	r3, [sp, #20]
 8014850:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014854:	f104 021a 	add.w	r2, r4, #26
 8014858:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801485a:	9905      	ldr	r1, [sp, #20]
 801485c:	9304      	str	r3, [sp, #16]
 801485e:	eba3 0309 	sub.w	r3, r3, r9
 8014862:	428b      	cmp	r3, r1
 8014864:	dc33      	bgt.n	80148ce <_printf_float+0x356>
 8014866:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801486a:	429a      	cmp	r2, r3
 801486c:	db3c      	blt.n	80148e8 <_printf_float+0x370>
 801486e:	6823      	ldr	r3, [r4, #0]
 8014870:	07da      	lsls	r2, r3, #31
 8014872:	d439      	bmi.n	80148e8 <_printf_float+0x370>
 8014874:	9a08      	ldr	r2, [sp, #32]
 8014876:	9b04      	ldr	r3, [sp, #16]
 8014878:	9907      	ldr	r1, [sp, #28]
 801487a:	1ad3      	subs	r3, r2, r3
 801487c:	eba2 0901 	sub.w	r9, r2, r1
 8014880:	4599      	cmp	r9, r3
 8014882:	bfa8      	it	ge
 8014884:	4699      	movge	r9, r3
 8014886:	f1b9 0f00 	cmp.w	r9, #0
 801488a:	dc35      	bgt.n	80148f8 <_printf_float+0x380>
 801488c:	f04f 0800 	mov.w	r8, #0
 8014890:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014894:	f104 0a1a 	add.w	sl, r4, #26
 8014898:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801489c:	1a9b      	subs	r3, r3, r2
 801489e:	eba3 0309 	sub.w	r3, r3, r9
 80148a2:	4543      	cmp	r3, r8
 80148a4:	f77f af75 	ble.w	8014792 <_printf_float+0x21a>
 80148a8:	2301      	movs	r3, #1
 80148aa:	4652      	mov	r2, sl
 80148ac:	4631      	mov	r1, r6
 80148ae:	4628      	mov	r0, r5
 80148b0:	47b8      	blx	r7
 80148b2:	3001      	adds	r0, #1
 80148b4:	f43f aeae 	beq.w	8014614 <_printf_float+0x9c>
 80148b8:	f108 0801 	add.w	r8, r8, #1
 80148bc:	e7ec      	b.n	8014898 <_printf_float+0x320>
 80148be:	4613      	mov	r3, r2
 80148c0:	4631      	mov	r1, r6
 80148c2:	4642      	mov	r2, r8
 80148c4:	4628      	mov	r0, r5
 80148c6:	47b8      	blx	r7
 80148c8:	3001      	adds	r0, #1
 80148ca:	d1bf      	bne.n	801484c <_printf_float+0x2d4>
 80148cc:	e6a2      	b.n	8014614 <_printf_float+0x9c>
 80148ce:	2301      	movs	r3, #1
 80148d0:	4631      	mov	r1, r6
 80148d2:	4628      	mov	r0, r5
 80148d4:	9204      	str	r2, [sp, #16]
 80148d6:	47b8      	blx	r7
 80148d8:	3001      	adds	r0, #1
 80148da:	f43f ae9b 	beq.w	8014614 <_printf_float+0x9c>
 80148de:	9b05      	ldr	r3, [sp, #20]
 80148e0:	9a04      	ldr	r2, [sp, #16]
 80148e2:	3301      	adds	r3, #1
 80148e4:	9305      	str	r3, [sp, #20]
 80148e6:	e7b7      	b.n	8014858 <_printf_float+0x2e0>
 80148e8:	4653      	mov	r3, sl
 80148ea:	465a      	mov	r2, fp
 80148ec:	4631      	mov	r1, r6
 80148ee:	4628      	mov	r0, r5
 80148f0:	47b8      	blx	r7
 80148f2:	3001      	adds	r0, #1
 80148f4:	d1be      	bne.n	8014874 <_printf_float+0x2fc>
 80148f6:	e68d      	b.n	8014614 <_printf_float+0x9c>
 80148f8:	9a04      	ldr	r2, [sp, #16]
 80148fa:	464b      	mov	r3, r9
 80148fc:	4442      	add	r2, r8
 80148fe:	4631      	mov	r1, r6
 8014900:	4628      	mov	r0, r5
 8014902:	47b8      	blx	r7
 8014904:	3001      	adds	r0, #1
 8014906:	d1c1      	bne.n	801488c <_printf_float+0x314>
 8014908:	e684      	b.n	8014614 <_printf_float+0x9c>
 801490a:	9a08      	ldr	r2, [sp, #32]
 801490c:	2a01      	cmp	r2, #1
 801490e:	dc01      	bgt.n	8014914 <_printf_float+0x39c>
 8014910:	07db      	lsls	r3, r3, #31
 8014912:	d537      	bpl.n	8014984 <_printf_float+0x40c>
 8014914:	2301      	movs	r3, #1
 8014916:	4642      	mov	r2, r8
 8014918:	4631      	mov	r1, r6
 801491a:	4628      	mov	r0, r5
 801491c:	47b8      	blx	r7
 801491e:	3001      	adds	r0, #1
 8014920:	f43f ae78 	beq.w	8014614 <_printf_float+0x9c>
 8014924:	4653      	mov	r3, sl
 8014926:	465a      	mov	r2, fp
 8014928:	4631      	mov	r1, r6
 801492a:	4628      	mov	r0, r5
 801492c:	47b8      	blx	r7
 801492e:	3001      	adds	r0, #1
 8014930:	f43f ae70 	beq.w	8014614 <_printf_float+0x9c>
 8014934:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8014938:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801493c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014940:	d01b      	beq.n	801497a <_printf_float+0x402>
 8014942:	9b08      	ldr	r3, [sp, #32]
 8014944:	f108 0201 	add.w	r2, r8, #1
 8014948:	3b01      	subs	r3, #1
 801494a:	4631      	mov	r1, r6
 801494c:	4628      	mov	r0, r5
 801494e:	47b8      	blx	r7
 8014950:	3001      	adds	r0, #1
 8014952:	d10e      	bne.n	8014972 <_printf_float+0x3fa>
 8014954:	e65e      	b.n	8014614 <_printf_float+0x9c>
 8014956:	2301      	movs	r3, #1
 8014958:	464a      	mov	r2, r9
 801495a:	4631      	mov	r1, r6
 801495c:	4628      	mov	r0, r5
 801495e:	47b8      	blx	r7
 8014960:	3001      	adds	r0, #1
 8014962:	f43f ae57 	beq.w	8014614 <_printf_float+0x9c>
 8014966:	f108 0801 	add.w	r8, r8, #1
 801496a:	9b08      	ldr	r3, [sp, #32]
 801496c:	3b01      	subs	r3, #1
 801496e:	4543      	cmp	r3, r8
 8014970:	dcf1      	bgt.n	8014956 <_printf_float+0x3de>
 8014972:	9b04      	ldr	r3, [sp, #16]
 8014974:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014978:	e6db      	b.n	8014732 <_printf_float+0x1ba>
 801497a:	f04f 0800 	mov.w	r8, #0
 801497e:	f104 091a 	add.w	r9, r4, #26
 8014982:	e7f2      	b.n	801496a <_printf_float+0x3f2>
 8014984:	2301      	movs	r3, #1
 8014986:	4642      	mov	r2, r8
 8014988:	e7df      	b.n	801494a <_printf_float+0x3d2>
 801498a:	2301      	movs	r3, #1
 801498c:	464a      	mov	r2, r9
 801498e:	4631      	mov	r1, r6
 8014990:	4628      	mov	r0, r5
 8014992:	47b8      	blx	r7
 8014994:	3001      	adds	r0, #1
 8014996:	f43f ae3d 	beq.w	8014614 <_printf_float+0x9c>
 801499a:	f108 0801 	add.w	r8, r8, #1
 801499e:	68e3      	ldr	r3, [r4, #12]
 80149a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80149a2:	1a5b      	subs	r3, r3, r1
 80149a4:	4543      	cmp	r3, r8
 80149a6:	dcf0      	bgt.n	801498a <_printf_float+0x412>
 80149a8:	e6f7      	b.n	801479a <_printf_float+0x222>
 80149aa:	f04f 0800 	mov.w	r8, #0
 80149ae:	f104 0919 	add.w	r9, r4, #25
 80149b2:	e7f4      	b.n	801499e <_printf_float+0x426>

080149b4 <_printf_common>:
 80149b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149b8:	4616      	mov	r6, r2
 80149ba:	4699      	mov	r9, r3
 80149bc:	688a      	ldr	r2, [r1, #8]
 80149be:	690b      	ldr	r3, [r1, #16]
 80149c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80149c4:	4293      	cmp	r3, r2
 80149c6:	bfb8      	it	lt
 80149c8:	4613      	movlt	r3, r2
 80149ca:	6033      	str	r3, [r6, #0]
 80149cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80149d0:	4607      	mov	r7, r0
 80149d2:	460c      	mov	r4, r1
 80149d4:	b10a      	cbz	r2, 80149da <_printf_common+0x26>
 80149d6:	3301      	adds	r3, #1
 80149d8:	6033      	str	r3, [r6, #0]
 80149da:	6823      	ldr	r3, [r4, #0]
 80149dc:	0699      	lsls	r1, r3, #26
 80149de:	bf42      	ittt	mi
 80149e0:	6833      	ldrmi	r3, [r6, #0]
 80149e2:	3302      	addmi	r3, #2
 80149e4:	6033      	strmi	r3, [r6, #0]
 80149e6:	6825      	ldr	r5, [r4, #0]
 80149e8:	f015 0506 	ands.w	r5, r5, #6
 80149ec:	d106      	bne.n	80149fc <_printf_common+0x48>
 80149ee:	f104 0a19 	add.w	sl, r4, #25
 80149f2:	68e3      	ldr	r3, [r4, #12]
 80149f4:	6832      	ldr	r2, [r6, #0]
 80149f6:	1a9b      	subs	r3, r3, r2
 80149f8:	42ab      	cmp	r3, r5
 80149fa:	dc26      	bgt.n	8014a4a <_printf_common+0x96>
 80149fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014a00:	1e13      	subs	r3, r2, #0
 8014a02:	6822      	ldr	r2, [r4, #0]
 8014a04:	bf18      	it	ne
 8014a06:	2301      	movne	r3, #1
 8014a08:	0692      	lsls	r2, r2, #26
 8014a0a:	d42b      	bmi.n	8014a64 <_printf_common+0xb0>
 8014a0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014a10:	4649      	mov	r1, r9
 8014a12:	4638      	mov	r0, r7
 8014a14:	47c0      	blx	r8
 8014a16:	3001      	adds	r0, #1
 8014a18:	d01e      	beq.n	8014a58 <_printf_common+0xa4>
 8014a1a:	6823      	ldr	r3, [r4, #0]
 8014a1c:	68e5      	ldr	r5, [r4, #12]
 8014a1e:	6832      	ldr	r2, [r6, #0]
 8014a20:	f003 0306 	and.w	r3, r3, #6
 8014a24:	2b04      	cmp	r3, #4
 8014a26:	bf08      	it	eq
 8014a28:	1aad      	subeq	r5, r5, r2
 8014a2a:	68a3      	ldr	r3, [r4, #8]
 8014a2c:	6922      	ldr	r2, [r4, #16]
 8014a2e:	bf0c      	ite	eq
 8014a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014a34:	2500      	movne	r5, #0
 8014a36:	4293      	cmp	r3, r2
 8014a38:	bfc4      	itt	gt
 8014a3a:	1a9b      	subgt	r3, r3, r2
 8014a3c:	18ed      	addgt	r5, r5, r3
 8014a3e:	2600      	movs	r6, #0
 8014a40:	341a      	adds	r4, #26
 8014a42:	42b5      	cmp	r5, r6
 8014a44:	d11a      	bne.n	8014a7c <_printf_common+0xc8>
 8014a46:	2000      	movs	r0, #0
 8014a48:	e008      	b.n	8014a5c <_printf_common+0xa8>
 8014a4a:	2301      	movs	r3, #1
 8014a4c:	4652      	mov	r2, sl
 8014a4e:	4649      	mov	r1, r9
 8014a50:	4638      	mov	r0, r7
 8014a52:	47c0      	blx	r8
 8014a54:	3001      	adds	r0, #1
 8014a56:	d103      	bne.n	8014a60 <_printf_common+0xac>
 8014a58:	f04f 30ff 	mov.w	r0, #4294967295
 8014a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a60:	3501      	adds	r5, #1
 8014a62:	e7c6      	b.n	80149f2 <_printf_common+0x3e>
 8014a64:	18e1      	adds	r1, r4, r3
 8014a66:	1c5a      	adds	r2, r3, #1
 8014a68:	2030      	movs	r0, #48	; 0x30
 8014a6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014a6e:	4422      	add	r2, r4
 8014a70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014a74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014a78:	3302      	adds	r3, #2
 8014a7a:	e7c7      	b.n	8014a0c <_printf_common+0x58>
 8014a7c:	2301      	movs	r3, #1
 8014a7e:	4622      	mov	r2, r4
 8014a80:	4649      	mov	r1, r9
 8014a82:	4638      	mov	r0, r7
 8014a84:	47c0      	blx	r8
 8014a86:	3001      	adds	r0, #1
 8014a88:	d0e6      	beq.n	8014a58 <_printf_common+0xa4>
 8014a8a:	3601      	adds	r6, #1
 8014a8c:	e7d9      	b.n	8014a42 <_printf_common+0x8e>
	...

08014a90 <_printf_i>:
 8014a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014a94:	460c      	mov	r4, r1
 8014a96:	4691      	mov	r9, r2
 8014a98:	7e27      	ldrb	r7, [r4, #24]
 8014a9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014a9c:	2f78      	cmp	r7, #120	; 0x78
 8014a9e:	4680      	mov	r8, r0
 8014aa0:	469a      	mov	sl, r3
 8014aa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014aa6:	d807      	bhi.n	8014ab8 <_printf_i+0x28>
 8014aa8:	2f62      	cmp	r7, #98	; 0x62
 8014aaa:	d80a      	bhi.n	8014ac2 <_printf_i+0x32>
 8014aac:	2f00      	cmp	r7, #0
 8014aae:	f000 80d8 	beq.w	8014c62 <_printf_i+0x1d2>
 8014ab2:	2f58      	cmp	r7, #88	; 0x58
 8014ab4:	f000 80a3 	beq.w	8014bfe <_printf_i+0x16e>
 8014ab8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014abc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014ac0:	e03a      	b.n	8014b38 <_printf_i+0xa8>
 8014ac2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014ac6:	2b15      	cmp	r3, #21
 8014ac8:	d8f6      	bhi.n	8014ab8 <_printf_i+0x28>
 8014aca:	a001      	add	r0, pc, #4	; (adr r0, 8014ad0 <_printf_i+0x40>)
 8014acc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014ad0:	08014b29 	.word	0x08014b29
 8014ad4:	08014b3d 	.word	0x08014b3d
 8014ad8:	08014ab9 	.word	0x08014ab9
 8014adc:	08014ab9 	.word	0x08014ab9
 8014ae0:	08014ab9 	.word	0x08014ab9
 8014ae4:	08014ab9 	.word	0x08014ab9
 8014ae8:	08014b3d 	.word	0x08014b3d
 8014aec:	08014ab9 	.word	0x08014ab9
 8014af0:	08014ab9 	.word	0x08014ab9
 8014af4:	08014ab9 	.word	0x08014ab9
 8014af8:	08014ab9 	.word	0x08014ab9
 8014afc:	08014c49 	.word	0x08014c49
 8014b00:	08014b6d 	.word	0x08014b6d
 8014b04:	08014c2b 	.word	0x08014c2b
 8014b08:	08014ab9 	.word	0x08014ab9
 8014b0c:	08014ab9 	.word	0x08014ab9
 8014b10:	08014c6b 	.word	0x08014c6b
 8014b14:	08014ab9 	.word	0x08014ab9
 8014b18:	08014b6d 	.word	0x08014b6d
 8014b1c:	08014ab9 	.word	0x08014ab9
 8014b20:	08014ab9 	.word	0x08014ab9
 8014b24:	08014c33 	.word	0x08014c33
 8014b28:	680b      	ldr	r3, [r1, #0]
 8014b2a:	1d1a      	adds	r2, r3, #4
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	600a      	str	r2, [r1, #0]
 8014b30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014b34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014b38:	2301      	movs	r3, #1
 8014b3a:	e0a3      	b.n	8014c84 <_printf_i+0x1f4>
 8014b3c:	6825      	ldr	r5, [r4, #0]
 8014b3e:	6808      	ldr	r0, [r1, #0]
 8014b40:	062e      	lsls	r6, r5, #24
 8014b42:	f100 0304 	add.w	r3, r0, #4
 8014b46:	d50a      	bpl.n	8014b5e <_printf_i+0xce>
 8014b48:	6805      	ldr	r5, [r0, #0]
 8014b4a:	600b      	str	r3, [r1, #0]
 8014b4c:	2d00      	cmp	r5, #0
 8014b4e:	da03      	bge.n	8014b58 <_printf_i+0xc8>
 8014b50:	232d      	movs	r3, #45	; 0x2d
 8014b52:	426d      	negs	r5, r5
 8014b54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b58:	485e      	ldr	r0, [pc, #376]	; (8014cd4 <_printf_i+0x244>)
 8014b5a:	230a      	movs	r3, #10
 8014b5c:	e019      	b.n	8014b92 <_printf_i+0x102>
 8014b5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8014b62:	6805      	ldr	r5, [r0, #0]
 8014b64:	600b      	str	r3, [r1, #0]
 8014b66:	bf18      	it	ne
 8014b68:	b22d      	sxthne	r5, r5
 8014b6a:	e7ef      	b.n	8014b4c <_printf_i+0xbc>
 8014b6c:	680b      	ldr	r3, [r1, #0]
 8014b6e:	6825      	ldr	r5, [r4, #0]
 8014b70:	1d18      	adds	r0, r3, #4
 8014b72:	6008      	str	r0, [r1, #0]
 8014b74:	0628      	lsls	r0, r5, #24
 8014b76:	d501      	bpl.n	8014b7c <_printf_i+0xec>
 8014b78:	681d      	ldr	r5, [r3, #0]
 8014b7a:	e002      	b.n	8014b82 <_printf_i+0xf2>
 8014b7c:	0669      	lsls	r1, r5, #25
 8014b7e:	d5fb      	bpl.n	8014b78 <_printf_i+0xe8>
 8014b80:	881d      	ldrh	r5, [r3, #0]
 8014b82:	4854      	ldr	r0, [pc, #336]	; (8014cd4 <_printf_i+0x244>)
 8014b84:	2f6f      	cmp	r7, #111	; 0x6f
 8014b86:	bf0c      	ite	eq
 8014b88:	2308      	moveq	r3, #8
 8014b8a:	230a      	movne	r3, #10
 8014b8c:	2100      	movs	r1, #0
 8014b8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014b92:	6866      	ldr	r6, [r4, #4]
 8014b94:	60a6      	str	r6, [r4, #8]
 8014b96:	2e00      	cmp	r6, #0
 8014b98:	bfa2      	ittt	ge
 8014b9a:	6821      	ldrge	r1, [r4, #0]
 8014b9c:	f021 0104 	bicge.w	r1, r1, #4
 8014ba0:	6021      	strge	r1, [r4, #0]
 8014ba2:	b90d      	cbnz	r5, 8014ba8 <_printf_i+0x118>
 8014ba4:	2e00      	cmp	r6, #0
 8014ba6:	d04d      	beq.n	8014c44 <_printf_i+0x1b4>
 8014ba8:	4616      	mov	r6, r2
 8014baa:	fbb5 f1f3 	udiv	r1, r5, r3
 8014bae:	fb03 5711 	mls	r7, r3, r1, r5
 8014bb2:	5dc7      	ldrb	r7, [r0, r7]
 8014bb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014bb8:	462f      	mov	r7, r5
 8014bba:	42bb      	cmp	r3, r7
 8014bbc:	460d      	mov	r5, r1
 8014bbe:	d9f4      	bls.n	8014baa <_printf_i+0x11a>
 8014bc0:	2b08      	cmp	r3, #8
 8014bc2:	d10b      	bne.n	8014bdc <_printf_i+0x14c>
 8014bc4:	6823      	ldr	r3, [r4, #0]
 8014bc6:	07df      	lsls	r7, r3, #31
 8014bc8:	d508      	bpl.n	8014bdc <_printf_i+0x14c>
 8014bca:	6923      	ldr	r3, [r4, #16]
 8014bcc:	6861      	ldr	r1, [r4, #4]
 8014bce:	4299      	cmp	r1, r3
 8014bd0:	bfde      	ittt	le
 8014bd2:	2330      	movle	r3, #48	; 0x30
 8014bd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014bd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014bdc:	1b92      	subs	r2, r2, r6
 8014bde:	6122      	str	r2, [r4, #16]
 8014be0:	f8cd a000 	str.w	sl, [sp]
 8014be4:	464b      	mov	r3, r9
 8014be6:	aa03      	add	r2, sp, #12
 8014be8:	4621      	mov	r1, r4
 8014bea:	4640      	mov	r0, r8
 8014bec:	f7ff fee2 	bl	80149b4 <_printf_common>
 8014bf0:	3001      	adds	r0, #1
 8014bf2:	d14c      	bne.n	8014c8e <_printf_i+0x1fe>
 8014bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8014bf8:	b004      	add	sp, #16
 8014bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bfe:	4835      	ldr	r0, [pc, #212]	; (8014cd4 <_printf_i+0x244>)
 8014c00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014c04:	6823      	ldr	r3, [r4, #0]
 8014c06:	680e      	ldr	r6, [r1, #0]
 8014c08:	061f      	lsls	r7, r3, #24
 8014c0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8014c0e:	600e      	str	r6, [r1, #0]
 8014c10:	d514      	bpl.n	8014c3c <_printf_i+0x1ac>
 8014c12:	07d9      	lsls	r1, r3, #31
 8014c14:	bf44      	itt	mi
 8014c16:	f043 0320 	orrmi.w	r3, r3, #32
 8014c1a:	6023      	strmi	r3, [r4, #0]
 8014c1c:	b91d      	cbnz	r5, 8014c26 <_printf_i+0x196>
 8014c1e:	6823      	ldr	r3, [r4, #0]
 8014c20:	f023 0320 	bic.w	r3, r3, #32
 8014c24:	6023      	str	r3, [r4, #0]
 8014c26:	2310      	movs	r3, #16
 8014c28:	e7b0      	b.n	8014b8c <_printf_i+0xfc>
 8014c2a:	6823      	ldr	r3, [r4, #0]
 8014c2c:	f043 0320 	orr.w	r3, r3, #32
 8014c30:	6023      	str	r3, [r4, #0]
 8014c32:	2378      	movs	r3, #120	; 0x78
 8014c34:	4828      	ldr	r0, [pc, #160]	; (8014cd8 <_printf_i+0x248>)
 8014c36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8014c3a:	e7e3      	b.n	8014c04 <_printf_i+0x174>
 8014c3c:	065e      	lsls	r6, r3, #25
 8014c3e:	bf48      	it	mi
 8014c40:	b2ad      	uxthmi	r5, r5
 8014c42:	e7e6      	b.n	8014c12 <_printf_i+0x182>
 8014c44:	4616      	mov	r6, r2
 8014c46:	e7bb      	b.n	8014bc0 <_printf_i+0x130>
 8014c48:	680b      	ldr	r3, [r1, #0]
 8014c4a:	6826      	ldr	r6, [r4, #0]
 8014c4c:	6960      	ldr	r0, [r4, #20]
 8014c4e:	1d1d      	adds	r5, r3, #4
 8014c50:	600d      	str	r5, [r1, #0]
 8014c52:	0635      	lsls	r5, r6, #24
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	d501      	bpl.n	8014c5c <_printf_i+0x1cc>
 8014c58:	6018      	str	r0, [r3, #0]
 8014c5a:	e002      	b.n	8014c62 <_printf_i+0x1d2>
 8014c5c:	0671      	lsls	r1, r6, #25
 8014c5e:	d5fb      	bpl.n	8014c58 <_printf_i+0x1c8>
 8014c60:	8018      	strh	r0, [r3, #0]
 8014c62:	2300      	movs	r3, #0
 8014c64:	6123      	str	r3, [r4, #16]
 8014c66:	4616      	mov	r6, r2
 8014c68:	e7ba      	b.n	8014be0 <_printf_i+0x150>
 8014c6a:	680b      	ldr	r3, [r1, #0]
 8014c6c:	1d1a      	adds	r2, r3, #4
 8014c6e:	600a      	str	r2, [r1, #0]
 8014c70:	681e      	ldr	r6, [r3, #0]
 8014c72:	6862      	ldr	r2, [r4, #4]
 8014c74:	2100      	movs	r1, #0
 8014c76:	4630      	mov	r0, r6
 8014c78:	f7eb fb52 	bl	8000320 <memchr>
 8014c7c:	b108      	cbz	r0, 8014c82 <_printf_i+0x1f2>
 8014c7e:	1b80      	subs	r0, r0, r6
 8014c80:	6060      	str	r0, [r4, #4]
 8014c82:	6863      	ldr	r3, [r4, #4]
 8014c84:	6123      	str	r3, [r4, #16]
 8014c86:	2300      	movs	r3, #0
 8014c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014c8c:	e7a8      	b.n	8014be0 <_printf_i+0x150>
 8014c8e:	6923      	ldr	r3, [r4, #16]
 8014c90:	4632      	mov	r2, r6
 8014c92:	4649      	mov	r1, r9
 8014c94:	4640      	mov	r0, r8
 8014c96:	47d0      	blx	sl
 8014c98:	3001      	adds	r0, #1
 8014c9a:	d0ab      	beq.n	8014bf4 <_printf_i+0x164>
 8014c9c:	6823      	ldr	r3, [r4, #0]
 8014c9e:	079b      	lsls	r3, r3, #30
 8014ca0:	d413      	bmi.n	8014cca <_printf_i+0x23a>
 8014ca2:	68e0      	ldr	r0, [r4, #12]
 8014ca4:	9b03      	ldr	r3, [sp, #12]
 8014ca6:	4298      	cmp	r0, r3
 8014ca8:	bfb8      	it	lt
 8014caa:	4618      	movlt	r0, r3
 8014cac:	e7a4      	b.n	8014bf8 <_printf_i+0x168>
 8014cae:	2301      	movs	r3, #1
 8014cb0:	4632      	mov	r2, r6
 8014cb2:	4649      	mov	r1, r9
 8014cb4:	4640      	mov	r0, r8
 8014cb6:	47d0      	blx	sl
 8014cb8:	3001      	adds	r0, #1
 8014cba:	d09b      	beq.n	8014bf4 <_printf_i+0x164>
 8014cbc:	3501      	adds	r5, #1
 8014cbe:	68e3      	ldr	r3, [r4, #12]
 8014cc0:	9903      	ldr	r1, [sp, #12]
 8014cc2:	1a5b      	subs	r3, r3, r1
 8014cc4:	42ab      	cmp	r3, r5
 8014cc6:	dcf2      	bgt.n	8014cae <_printf_i+0x21e>
 8014cc8:	e7eb      	b.n	8014ca2 <_printf_i+0x212>
 8014cca:	2500      	movs	r5, #0
 8014ccc:	f104 0619 	add.w	r6, r4, #25
 8014cd0:	e7f5      	b.n	8014cbe <_printf_i+0x22e>
 8014cd2:	bf00      	nop
 8014cd4:	0801835e 	.word	0x0801835e
 8014cd8:	0801836f 	.word	0x0801836f

08014cdc <quorem>:
 8014cdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ce0:	6903      	ldr	r3, [r0, #16]
 8014ce2:	690c      	ldr	r4, [r1, #16]
 8014ce4:	42a3      	cmp	r3, r4
 8014ce6:	4607      	mov	r7, r0
 8014ce8:	f2c0 8081 	blt.w	8014dee <quorem+0x112>
 8014cec:	3c01      	subs	r4, #1
 8014cee:	f101 0814 	add.w	r8, r1, #20
 8014cf2:	f100 0514 	add.w	r5, r0, #20
 8014cf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014cfa:	9301      	str	r3, [sp, #4]
 8014cfc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014d00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014d04:	3301      	adds	r3, #1
 8014d06:	429a      	cmp	r2, r3
 8014d08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014d0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014d10:	fbb2 f6f3 	udiv	r6, r2, r3
 8014d14:	d331      	bcc.n	8014d7a <quorem+0x9e>
 8014d16:	f04f 0e00 	mov.w	lr, #0
 8014d1a:	4640      	mov	r0, r8
 8014d1c:	46ac      	mov	ip, r5
 8014d1e:	46f2      	mov	sl, lr
 8014d20:	f850 2b04 	ldr.w	r2, [r0], #4
 8014d24:	b293      	uxth	r3, r2
 8014d26:	fb06 e303 	mla	r3, r6, r3, lr
 8014d2a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014d2e:	b29b      	uxth	r3, r3
 8014d30:	ebaa 0303 	sub.w	r3, sl, r3
 8014d34:	0c12      	lsrs	r2, r2, #16
 8014d36:	f8dc a000 	ldr.w	sl, [ip]
 8014d3a:	fb06 e202 	mla	r2, r6, r2, lr
 8014d3e:	fa13 f38a 	uxtah	r3, r3, sl
 8014d42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014d46:	fa1f fa82 	uxth.w	sl, r2
 8014d4a:	f8dc 2000 	ldr.w	r2, [ip]
 8014d4e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8014d52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014d56:	b29b      	uxth	r3, r3
 8014d58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014d5c:	4581      	cmp	r9, r0
 8014d5e:	f84c 3b04 	str.w	r3, [ip], #4
 8014d62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014d66:	d2db      	bcs.n	8014d20 <quorem+0x44>
 8014d68:	f855 300b 	ldr.w	r3, [r5, fp]
 8014d6c:	b92b      	cbnz	r3, 8014d7a <quorem+0x9e>
 8014d6e:	9b01      	ldr	r3, [sp, #4]
 8014d70:	3b04      	subs	r3, #4
 8014d72:	429d      	cmp	r5, r3
 8014d74:	461a      	mov	r2, r3
 8014d76:	d32e      	bcc.n	8014dd6 <quorem+0xfa>
 8014d78:	613c      	str	r4, [r7, #16]
 8014d7a:	4638      	mov	r0, r7
 8014d7c:	f001 f848 	bl	8015e10 <__mcmp>
 8014d80:	2800      	cmp	r0, #0
 8014d82:	db24      	blt.n	8014dce <quorem+0xf2>
 8014d84:	3601      	adds	r6, #1
 8014d86:	4628      	mov	r0, r5
 8014d88:	f04f 0c00 	mov.w	ip, #0
 8014d8c:	f858 2b04 	ldr.w	r2, [r8], #4
 8014d90:	f8d0 e000 	ldr.w	lr, [r0]
 8014d94:	b293      	uxth	r3, r2
 8014d96:	ebac 0303 	sub.w	r3, ip, r3
 8014d9a:	0c12      	lsrs	r2, r2, #16
 8014d9c:	fa13 f38e 	uxtah	r3, r3, lr
 8014da0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014da4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014da8:	b29b      	uxth	r3, r3
 8014daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014dae:	45c1      	cmp	r9, r8
 8014db0:	f840 3b04 	str.w	r3, [r0], #4
 8014db4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014db8:	d2e8      	bcs.n	8014d8c <quorem+0xb0>
 8014dba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014dbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014dc2:	b922      	cbnz	r2, 8014dce <quorem+0xf2>
 8014dc4:	3b04      	subs	r3, #4
 8014dc6:	429d      	cmp	r5, r3
 8014dc8:	461a      	mov	r2, r3
 8014dca:	d30a      	bcc.n	8014de2 <quorem+0x106>
 8014dcc:	613c      	str	r4, [r7, #16]
 8014dce:	4630      	mov	r0, r6
 8014dd0:	b003      	add	sp, #12
 8014dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dd6:	6812      	ldr	r2, [r2, #0]
 8014dd8:	3b04      	subs	r3, #4
 8014dda:	2a00      	cmp	r2, #0
 8014ddc:	d1cc      	bne.n	8014d78 <quorem+0x9c>
 8014dde:	3c01      	subs	r4, #1
 8014de0:	e7c7      	b.n	8014d72 <quorem+0x96>
 8014de2:	6812      	ldr	r2, [r2, #0]
 8014de4:	3b04      	subs	r3, #4
 8014de6:	2a00      	cmp	r2, #0
 8014de8:	d1f0      	bne.n	8014dcc <quorem+0xf0>
 8014dea:	3c01      	subs	r4, #1
 8014dec:	e7eb      	b.n	8014dc6 <quorem+0xea>
 8014dee:	2000      	movs	r0, #0
 8014df0:	e7ee      	b.n	8014dd0 <quorem+0xf4>
 8014df2:	0000      	movs	r0, r0
 8014df4:	0000      	movs	r0, r0
	...

08014df8 <_dtoa_r>:
 8014df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dfc:	ec59 8b10 	vmov	r8, r9, d0
 8014e00:	b095      	sub	sp, #84	; 0x54
 8014e02:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014e04:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8014e06:	9107      	str	r1, [sp, #28]
 8014e08:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8014e0c:	4606      	mov	r6, r0
 8014e0e:	9209      	str	r2, [sp, #36]	; 0x24
 8014e10:	9310      	str	r3, [sp, #64]	; 0x40
 8014e12:	b975      	cbnz	r5, 8014e32 <_dtoa_r+0x3a>
 8014e14:	2010      	movs	r0, #16
 8014e16:	f000 fd75 	bl	8015904 <malloc>
 8014e1a:	4602      	mov	r2, r0
 8014e1c:	6270      	str	r0, [r6, #36]	; 0x24
 8014e1e:	b920      	cbnz	r0, 8014e2a <_dtoa_r+0x32>
 8014e20:	4bab      	ldr	r3, [pc, #684]	; (80150d0 <_dtoa_r+0x2d8>)
 8014e22:	21ea      	movs	r1, #234	; 0xea
 8014e24:	48ab      	ldr	r0, [pc, #684]	; (80150d4 <_dtoa_r+0x2dc>)
 8014e26:	f001 f9bd 	bl	80161a4 <__assert_func>
 8014e2a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014e2e:	6005      	str	r5, [r0, #0]
 8014e30:	60c5      	str	r5, [r0, #12]
 8014e32:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014e34:	6819      	ldr	r1, [r3, #0]
 8014e36:	b151      	cbz	r1, 8014e4e <_dtoa_r+0x56>
 8014e38:	685a      	ldr	r2, [r3, #4]
 8014e3a:	604a      	str	r2, [r1, #4]
 8014e3c:	2301      	movs	r3, #1
 8014e3e:	4093      	lsls	r3, r2
 8014e40:	608b      	str	r3, [r1, #8]
 8014e42:	4630      	mov	r0, r6
 8014e44:	f000 fda6 	bl	8015994 <_Bfree>
 8014e48:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014e4a:	2200      	movs	r2, #0
 8014e4c:	601a      	str	r2, [r3, #0]
 8014e4e:	f1b9 0300 	subs.w	r3, r9, #0
 8014e52:	bfbb      	ittet	lt
 8014e54:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014e58:	9303      	strlt	r3, [sp, #12]
 8014e5a:	2300      	movge	r3, #0
 8014e5c:	2201      	movlt	r2, #1
 8014e5e:	bfac      	ite	ge
 8014e60:	6023      	strge	r3, [r4, #0]
 8014e62:	6022      	strlt	r2, [r4, #0]
 8014e64:	4b9c      	ldr	r3, [pc, #624]	; (80150d8 <_dtoa_r+0x2e0>)
 8014e66:	9c03      	ldr	r4, [sp, #12]
 8014e68:	43a3      	bics	r3, r4
 8014e6a:	d11a      	bne.n	8014ea2 <_dtoa_r+0xaa>
 8014e6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014e6e:	f242 730f 	movw	r3, #9999	; 0x270f
 8014e72:	6013      	str	r3, [r2, #0]
 8014e74:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8014e78:	ea53 0308 	orrs.w	r3, r3, r8
 8014e7c:	f000 8512 	beq.w	80158a4 <_dtoa_r+0xaac>
 8014e80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014e82:	b953      	cbnz	r3, 8014e9a <_dtoa_r+0xa2>
 8014e84:	4b95      	ldr	r3, [pc, #596]	; (80150dc <_dtoa_r+0x2e4>)
 8014e86:	e01f      	b.n	8014ec8 <_dtoa_r+0xd0>
 8014e88:	4b95      	ldr	r3, [pc, #596]	; (80150e0 <_dtoa_r+0x2e8>)
 8014e8a:	9300      	str	r3, [sp, #0]
 8014e8c:	3308      	adds	r3, #8
 8014e8e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014e90:	6013      	str	r3, [r2, #0]
 8014e92:	9800      	ldr	r0, [sp, #0]
 8014e94:	b015      	add	sp, #84	; 0x54
 8014e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e9a:	4b90      	ldr	r3, [pc, #576]	; (80150dc <_dtoa_r+0x2e4>)
 8014e9c:	9300      	str	r3, [sp, #0]
 8014e9e:	3303      	adds	r3, #3
 8014ea0:	e7f5      	b.n	8014e8e <_dtoa_r+0x96>
 8014ea2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014ea6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014eae:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8014eb2:	d10b      	bne.n	8014ecc <_dtoa_r+0xd4>
 8014eb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014eb6:	2301      	movs	r3, #1
 8014eb8:	6013      	str	r3, [r2, #0]
 8014eba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	f000 84ee 	beq.w	801589e <_dtoa_r+0xaa6>
 8014ec2:	4888      	ldr	r0, [pc, #544]	; (80150e4 <_dtoa_r+0x2ec>)
 8014ec4:	6018      	str	r0, [r3, #0]
 8014ec6:	1e43      	subs	r3, r0, #1
 8014ec8:	9300      	str	r3, [sp, #0]
 8014eca:	e7e2      	b.n	8014e92 <_dtoa_r+0x9a>
 8014ecc:	a913      	add	r1, sp, #76	; 0x4c
 8014ece:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014ed2:	aa12      	add	r2, sp, #72	; 0x48
 8014ed4:	4630      	mov	r0, r6
 8014ed6:	f001 f83f 	bl	8015f58 <__d2b>
 8014eda:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8014ede:	4605      	mov	r5, r0
 8014ee0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014ee2:	2900      	cmp	r1, #0
 8014ee4:	d047      	beq.n	8014f76 <_dtoa_r+0x17e>
 8014ee6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8014ee8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014eec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014ef0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8014ef4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014ef8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8014efc:	2400      	movs	r4, #0
 8014efe:	ec43 2b16 	vmov	d6, r2, r3
 8014f02:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8014f06:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80150b8 <_dtoa_r+0x2c0>
 8014f0a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014f0e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80150c0 <_dtoa_r+0x2c8>
 8014f12:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014f16:	eeb0 7b46 	vmov.f64	d7, d6
 8014f1a:	ee06 1a90 	vmov	s13, r1
 8014f1e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8014f22:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80150c8 <_dtoa_r+0x2d0>
 8014f26:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014f2a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8014f2e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f36:	ee16 ba90 	vmov	fp, s13
 8014f3a:	9411      	str	r4, [sp, #68]	; 0x44
 8014f3c:	d508      	bpl.n	8014f50 <_dtoa_r+0x158>
 8014f3e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014f42:	eeb4 6b47 	vcmp.f64	d6, d7
 8014f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f4a:	bf18      	it	ne
 8014f4c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8014f50:	f1bb 0f16 	cmp.w	fp, #22
 8014f54:	d832      	bhi.n	8014fbc <_dtoa_r+0x1c4>
 8014f56:	4b64      	ldr	r3, [pc, #400]	; (80150e8 <_dtoa_r+0x2f0>)
 8014f58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014f5c:	ed93 7b00 	vldr	d7, [r3]
 8014f60:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8014f64:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014f68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f6c:	d501      	bpl.n	8014f72 <_dtoa_r+0x17a>
 8014f6e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014f72:	2300      	movs	r3, #0
 8014f74:	e023      	b.n	8014fbe <_dtoa_r+0x1c6>
 8014f76:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014f78:	4401      	add	r1, r0
 8014f7a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8014f7e:	2b20      	cmp	r3, #32
 8014f80:	bfc3      	ittte	gt
 8014f82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014f86:	fa04 f303 	lslgt.w	r3, r4, r3
 8014f8a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8014f8e:	f1c3 0320 	rsble	r3, r3, #32
 8014f92:	bfc6      	itte	gt
 8014f94:	fa28 f804 	lsrgt.w	r8, r8, r4
 8014f98:	ea43 0308 	orrgt.w	r3, r3, r8
 8014f9c:	fa08 f303 	lslle.w	r3, r8, r3
 8014fa0:	ee07 3a90 	vmov	s15, r3
 8014fa4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014fa8:	3901      	subs	r1, #1
 8014faa:	ed8d 7b00 	vstr	d7, [sp]
 8014fae:	9c01      	ldr	r4, [sp, #4]
 8014fb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014fb4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8014fb8:	2401      	movs	r4, #1
 8014fba:	e7a0      	b.n	8014efe <_dtoa_r+0x106>
 8014fbc:	2301      	movs	r3, #1
 8014fbe:	930f      	str	r3, [sp, #60]	; 0x3c
 8014fc0:	1a43      	subs	r3, r0, r1
 8014fc2:	1e5a      	subs	r2, r3, #1
 8014fc4:	bf45      	ittet	mi
 8014fc6:	f1c3 0301 	rsbmi	r3, r3, #1
 8014fca:	9305      	strmi	r3, [sp, #20]
 8014fcc:	2300      	movpl	r3, #0
 8014fce:	2300      	movmi	r3, #0
 8014fd0:	9206      	str	r2, [sp, #24]
 8014fd2:	bf54      	ite	pl
 8014fd4:	9305      	strpl	r3, [sp, #20]
 8014fd6:	9306      	strmi	r3, [sp, #24]
 8014fd8:	f1bb 0f00 	cmp.w	fp, #0
 8014fdc:	db18      	blt.n	8015010 <_dtoa_r+0x218>
 8014fde:	9b06      	ldr	r3, [sp, #24]
 8014fe0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8014fe4:	445b      	add	r3, fp
 8014fe6:	9306      	str	r3, [sp, #24]
 8014fe8:	2300      	movs	r3, #0
 8014fea:	9a07      	ldr	r2, [sp, #28]
 8014fec:	2a09      	cmp	r2, #9
 8014fee:	d849      	bhi.n	8015084 <_dtoa_r+0x28c>
 8014ff0:	2a05      	cmp	r2, #5
 8014ff2:	bfc4      	itt	gt
 8014ff4:	3a04      	subgt	r2, #4
 8014ff6:	9207      	strgt	r2, [sp, #28]
 8014ff8:	9a07      	ldr	r2, [sp, #28]
 8014ffa:	f1a2 0202 	sub.w	r2, r2, #2
 8014ffe:	bfcc      	ite	gt
 8015000:	2400      	movgt	r4, #0
 8015002:	2401      	movle	r4, #1
 8015004:	2a03      	cmp	r2, #3
 8015006:	d848      	bhi.n	801509a <_dtoa_r+0x2a2>
 8015008:	e8df f002 	tbb	[pc, r2]
 801500c:	3a2c2e0b 	.word	0x3a2c2e0b
 8015010:	9b05      	ldr	r3, [sp, #20]
 8015012:	2200      	movs	r2, #0
 8015014:	eba3 030b 	sub.w	r3, r3, fp
 8015018:	9305      	str	r3, [sp, #20]
 801501a:	920e      	str	r2, [sp, #56]	; 0x38
 801501c:	f1cb 0300 	rsb	r3, fp, #0
 8015020:	e7e3      	b.n	8014fea <_dtoa_r+0x1f2>
 8015022:	2200      	movs	r2, #0
 8015024:	9208      	str	r2, [sp, #32]
 8015026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015028:	2a00      	cmp	r2, #0
 801502a:	dc39      	bgt.n	80150a0 <_dtoa_r+0x2a8>
 801502c:	f04f 0a01 	mov.w	sl, #1
 8015030:	46d1      	mov	r9, sl
 8015032:	4652      	mov	r2, sl
 8015034:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015038:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801503a:	2100      	movs	r1, #0
 801503c:	6079      	str	r1, [r7, #4]
 801503e:	2004      	movs	r0, #4
 8015040:	f100 0c14 	add.w	ip, r0, #20
 8015044:	4594      	cmp	ip, r2
 8015046:	6879      	ldr	r1, [r7, #4]
 8015048:	d92f      	bls.n	80150aa <_dtoa_r+0x2b2>
 801504a:	4630      	mov	r0, r6
 801504c:	930c      	str	r3, [sp, #48]	; 0x30
 801504e:	f000 fc61 	bl	8015914 <_Balloc>
 8015052:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015054:	9000      	str	r0, [sp, #0]
 8015056:	4602      	mov	r2, r0
 8015058:	2800      	cmp	r0, #0
 801505a:	d149      	bne.n	80150f0 <_dtoa_r+0x2f8>
 801505c:	4b23      	ldr	r3, [pc, #140]	; (80150ec <_dtoa_r+0x2f4>)
 801505e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015062:	e6df      	b.n	8014e24 <_dtoa_r+0x2c>
 8015064:	2201      	movs	r2, #1
 8015066:	e7dd      	b.n	8015024 <_dtoa_r+0x22c>
 8015068:	2200      	movs	r2, #0
 801506a:	9208      	str	r2, [sp, #32]
 801506c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801506e:	eb0b 0a02 	add.w	sl, fp, r2
 8015072:	f10a 0901 	add.w	r9, sl, #1
 8015076:	464a      	mov	r2, r9
 8015078:	2a01      	cmp	r2, #1
 801507a:	bfb8      	it	lt
 801507c:	2201      	movlt	r2, #1
 801507e:	e7db      	b.n	8015038 <_dtoa_r+0x240>
 8015080:	2201      	movs	r2, #1
 8015082:	e7f2      	b.n	801506a <_dtoa_r+0x272>
 8015084:	2401      	movs	r4, #1
 8015086:	2200      	movs	r2, #0
 8015088:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801508c:	f04f 3aff 	mov.w	sl, #4294967295
 8015090:	2100      	movs	r1, #0
 8015092:	46d1      	mov	r9, sl
 8015094:	2212      	movs	r2, #18
 8015096:	9109      	str	r1, [sp, #36]	; 0x24
 8015098:	e7ce      	b.n	8015038 <_dtoa_r+0x240>
 801509a:	2201      	movs	r2, #1
 801509c:	9208      	str	r2, [sp, #32]
 801509e:	e7f5      	b.n	801508c <_dtoa_r+0x294>
 80150a0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80150a4:	46d1      	mov	r9, sl
 80150a6:	4652      	mov	r2, sl
 80150a8:	e7c6      	b.n	8015038 <_dtoa_r+0x240>
 80150aa:	3101      	adds	r1, #1
 80150ac:	6079      	str	r1, [r7, #4]
 80150ae:	0040      	lsls	r0, r0, #1
 80150b0:	e7c6      	b.n	8015040 <_dtoa_r+0x248>
 80150b2:	bf00      	nop
 80150b4:	f3af 8000 	nop.w
 80150b8:	636f4361 	.word	0x636f4361
 80150bc:	3fd287a7 	.word	0x3fd287a7
 80150c0:	8b60c8b3 	.word	0x8b60c8b3
 80150c4:	3fc68a28 	.word	0x3fc68a28
 80150c8:	509f79fb 	.word	0x509f79fb
 80150cc:	3fd34413 	.word	0x3fd34413
 80150d0:	0801838d 	.word	0x0801838d
 80150d4:	080183a4 	.word	0x080183a4
 80150d8:	7ff00000 	.word	0x7ff00000
 80150dc:	08018389 	.word	0x08018389
 80150e0:	08018380 	.word	0x08018380
 80150e4:	0801835d 	.word	0x0801835d
 80150e8:	080184a0 	.word	0x080184a0
 80150ec:	08018403 	.word	0x08018403
 80150f0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80150f2:	9900      	ldr	r1, [sp, #0]
 80150f4:	6011      	str	r1, [r2, #0]
 80150f6:	f1b9 0f0e 	cmp.w	r9, #14
 80150fa:	d872      	bhi.n	80151e2 <_dtoa_r+0x3ea>
 80150fc:	2c00      	cmp	r4, #0
 80150fe:	d070      	beq.n	80151e2 <_dtoa_r+0x3ea>
 8015100:	f1bb 0f00 	cmp.w	fp, #0
 8015104:	f340 80a6 	ble.w	8015254 <_dtoa_r+0x45c>
 8015108:	49ca      	ldr	r1, [pc, #808]	; (8015434 <_dtoa_r+0x63c>)
 801510a:	f00b 020f 	and.w	r2, fp, #15
 801510e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8015112:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8015116:	ed92 7b00 	vldr	d7, [r2]
 801511a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801511e:	f000 808d 	beq.w	801523c <_dtoa_r+0x444>
 8015122:	4ac5      	ldr	r2, [pc, #788]	; (8015438 <_dtoa_r+0x640>)
 8015124:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8015128:	ed92 6b08 	vldr	d6, [r2, #32]
 801512c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8015130:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015134:	f001 010f 	and.w	r1, r1, #15
 8015138:	2203      	movs	r2, #3
 801513a:	48bf      	ldr	r0, [pc, #764]	; (8015438 <_dtoa_r+0x640>)
 801513c:	2900      	cmp	r1, #0
 801513e:	d17f      	bne.n	8015240 <_dtoa_r+0x448>
 8015140:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015144:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8015148:	ed8d 7b02 	vstr	d7, [sp, #8]
 801514c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801514e:	2900      	cmp	r1, #0
 8015150:	f000 80b2 	beq.w	80152b8 <_dtoa_r+0x4c0>
 8015154:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8015158:	ed9d 7b02 	vldr	d7, [sp, #8]
 801515c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015164:	f140 80a8 	bpl.w	80152b8 <_dtoa_r+0x4c0>
 8015168:	f1b9 0f00 	cmp.w	r9, #0
 801516c:	f000 80a4 	beq.w	80152b8 <_dtoa_r+0x4c0>
 8015170:	f1ba 0f00 	cmp.w	sl, #0
 8015174:	dd31      	ble.n	80151da <_dtoa_r+0x3e2>
 8015176:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801517a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801517e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015182:	f10b 37ff 	add.w	r7, fp, #4294967295
 8015186:	3201      	adds	r2, #1
 8015188:	4650      	mov	r0, sl
 801518a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801518e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8015192:	ee07 2a90 	vmov	s15, r2
 8015196:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801519a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801519e:	ed8d 5b02 	vstr	d5, [sp, #8]
 80151a2:	9c03      	ldr	r4, [sp, #12]
 80151a4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80151a8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80151ac:	2800      	cmp	r0, #0
 80151ae:	f040 8086 	bne.w	80152be <_dtoa_r+0x4c6>
 80151b2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80151b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80151ba:	ec42 1b17 	vmov	d7, r1, r2
 80151be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80151c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151c6:	f300 8272 	bgt.w	80156ae <_dtoa_r+0x8b6>
 80151ca:	eeb1 7b47 	vneg.f64	d7, d7
 80151ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80151d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151d6:	f100 8267 	bmi.w	80156a8 <_dtoa_r+0x8b0>
 80151da:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80151de:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80151e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80151e4:	2a00      	cmp	r2, #0
 80151e6:	f2c0 8129 	blt.w	801543c <_dtoa_r+0x644>
 80151ea:	f1bb 0f0e 	cmp.w	fp, #14
 80151ee:	f300 8125 	bgt.w	801543c <_dtoa_r+0x644>
 80151f2:	4b90      	ldr	r3, [pc, #576]	; (8015434 <_dtoa_r+0x63c>)
 80151f4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80151f8:	ed93 6b00 	vldr	d6, [r3]
 80151fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80151fe:	2b00      	cmp	r3, #0
 8015200:	f280 80c3 	bge.w	801538a <_dtoa_r+0x592>
 8015204:	f1b9 0f00 	cmp.w	r9, #0
 8015208:	f300 80bf 	bgt.w	801538a <_dtoa_r+0x592>
 801520c:	f040 824c 	bne.w	80156a8 <_dtoa_r+0x8b0>
 8015210:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015214:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015218:	ed9d 7b02 	vldr	d7, [sp, #8]
 801521c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015224:	464c      	mov	r4, r9
 8015226:	464f      	mov	r7, r9
 8015228:	f280 8222 	bge.w	8015670 <_dtoa_r+0x878>
 801522c:	f8dd 8000 	ldr.w	r8, [sp]
 8015230:	2331      	movs	r3, #49	; 0x31
 8015232:	f808 3b01 	strb.w	r3, [r8], #1
 8015236:	f10b 0b01 	add.w	fp, fp, #1
 801523a:	e21e      	b.n	801567a <_dtoa_r+0x882>
 801523c:	2202      	movs	r2, #2
 801523e:	e77c      	b.n	801513a <_dtoa_r+0x342>
 8015240:	07cc      	lsls	r4, r1, #31
 8015242:	d504      	bpl.n	801524e <_dtoa_r+0x456>
 8015244:	ed90 6b00 	vldr	d6, [r0]
 8015248:	3201      	adds	r2, #1
 801524a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801524e:	1049      	asrs	r1, r1, #1
 8015250:	3008      	adds	r0, #8
 8015252:	e773      	b.n	801513c <_dtoa_r+0x344>
 8015254:	d02e      	beq.n	80152b4 <_dtoa_r+0x4bc>
 8015256:	f1cb 0100 	rsb	r1, fp, #0
 801525a:	4a76      	ldr	r2, [pc, #472]	; (8015434 <_dtoa_r+0x63c>)
 801525c:	f001 000f 	and.w	r0, r1, #15
 8015260:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015264:	ed92 7b00 	vldr	d7, [r2]
 8015268:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801526c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015270:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8015274:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8015278:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801527c:	486e      	ldr	r0, [pc, #440]	; (8015438 <_dtoa_r+0x640>)
 801527e:	1109      	asrs	r1, r1, #4
 8015280:	2400      	movs	r4, #0
 8015282:	2202      	movs	r2, #2
 8015284:	b939      	cbnz	r1, 8015296 <_dtoa_r+0x49e>
 8015286:	2c00      	cmp	r4, #0
 8015288:	f43f af60 	beq.w	801514c <_dtoa_r+0x354>
 801528c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015290:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015294:	e75a      	b.n	801514c <_dtoa_r+0x354>
 8015296:	07cf      	lsls	r7, r1, #31
 8015298:	d509      	bpl.n	80152ae <_dtoa_r+0x4b6>
 801529a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801529e:	ed90 7b00 	vldr	d7, [r0]
 80152a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80152a6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80152aa:	3201      	adds	r2, #1
 80152ac:	2401      	movs	r4, #1
 80152ae:	1049      	asrs	r1, r1, #1
 80152b0:	3008      	adds	r0, #8
 80152b2:	e7e7      	b.n	8015284 <_dtoa_r+0x48c>
 80152b4:	2202      	movs	r2, #2
 80152b6:	e749      	b.n	801514c <_dtoa_r+0x354>
 80152b8:	465f      	mov	r7, fp
 80152ba:	4648      	mov	r0, r9
 80152bc:	e765      	b.n	801518a <_dtoa_r+0x392>
 80152be:	ec42 1b17 	vmov	d7, r1, r2
 80152c2:	4a5c      	ldr	r2, [pc, #368]	; (8015434 <_dtoa_r+0x63c>)
 80152c4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80152c8:	ed12 4b02 	vldr	d4, [r2, #-8]
 80152cc:	9a00      	ldr	r2, [sp, #0]
 80152ce:	1814      	adds	r4, r2, r0
 80152d0:	9a08      	ldr	r2, [sp, #32]
 80152d2:	b352      	cbz	r2, 801532a <_dtoa_r+0x532>
 80152d4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80152d8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80152dc:	f8dd 8000 	ldr.w	r8, [sp]
 80152e0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80152e4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80152e8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80152ec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80152f0:	ee14 2a90 	vmov	r2, s9
 80152f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80152f8:	3230      	adds	r2, #48	; 0x30
 80152fa:	ee36 6b45 	vsub.f64	d6, d6, d5
 80152fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015306:	f808 2b01 	strb.w	r2, [r8], #1
 801530a:	d439      	bmi.n	8015380 <_dtoa_r+0x588>
 801530c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8015310:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8015314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015318:	d472      	bmi.n	8015400 <_dtoa_r+0x608>
 801531a:	45a0      	cmp	r8, r4
 801531c:	f43f af5d 	beq.w	80151da <_dtoa_r+0x3e2>
 8015320:	ee27 7b03 	vmul.f64	d7, d7, d3
 8015324:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015328:	e7e0      	b.n	80152ec <_dtoa_r+0x4f4>
 801532a:	f8dd 8000 	ldr.w	r8, [sp]
 801532e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015332:	4621      	mov	r1, r4
 8015334:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015338:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801533c:	ee14 2a90 	vmov	r2, s9
 8015340:	3230      	adds	r2, #48	; 0x30
 8015342:	f808 2b01 	strb.w	r2, [r8], #1
 8015346:	45a0      	cmp	r8, r4
 8015348:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801534c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015350:	d118      	bne.n	8015384 <_dtoa_r+0x58c>
 8015352:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8015356:	ee37 4b05 	vadd.f64	d4, d7, d5
 801535a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801535e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015362:	dc4d      	bgt.n	8015400 <_dtoa_r+0x608>
 8015364:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015368:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801536c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015370:	f57f af33 	bpl.w	80151da <_dtoa_r+0x3e2>
 8015374:	4688      	mov	r8, r1
 8015376:	3901      	subs	r1, #1
 8015378:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801537c:	2b30      	cmp	r3, #48	; 0x30
 801537e:	d0f9      	beq.n	8015374 <_dtoa_r+0x57c>
 8015380:	46bb      	mov	fp, r7
 8015382:	e02a      	b.n	80153da <_dtoa_r+0x5e2>
 8015384:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015388:	e7d6      	b.n	8015338 <_dtoa_r+0x540>
 801538a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801538e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8015392:	f8dd 8000 	ldr.w	r8, [sp]
 8015396:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801539a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801539e:	ee15 3a10 	vmov	r3, s10
 80153a2:	3330      	adds	r3, #48	; 0x30
 80153a4:	f808 3b01 	strb.w	r3, [r8], #1
 80153a8:	9b00      	ldr	r3, [sp, #0]
 80153aa:	eba8 0303 	sub.w	r3, r8, r3
 80153ae:	4599      	cmp	r9, r3
 80153b0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80153b4:	eea3 7b46 	vfms.f64	d7, d3, d6
 80153b8:	d133      	bne.n	8015422 <_dtoa_r+0x62a>
 80153ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 80153be:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80153c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153c6:	dc1a      	bgt.n	80153fe <_dtoa_r+0x606>
 80153c8:	eeb4 7b46 	vcmp.f64	d7, d6
 80153cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153d0:	d103      	bne.n	80153da <_dtoa_r+0x5e2>
 80153d2:	ee15 3a10 	vmov	r3, s10
 80153d6:	07d9      	lsls	r1, r3, #31
 80153d8:	d411      	bmi.n	80153fe <_dtoa_r+0x606>
 80153da:	4629      	mov	r1, r5
 80153dc:	4630      	mov	r0, r6
 80153de:	f000 fad9 	bl	8015994 <_Bfree>
 80153e2:	2300      	movs	r3, #0
 80153e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80153e6:	f888 3000 	strb.w	r3, [r8]
 80153ea:	f10b 0301 	add.w	r3, fp, #1
 80153ee:	6013      	str	r3, [r2, #0]
 80153f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	f43f ad4d 	beq.w	8014e92 <_dtoa_r+0x9a>
 80153f8:	f8c3 8000 	str.w	r8, [r3]
 80153fc:	e549      	b.n	8014e92 <_dtoa_r+0x9a>
 80153fe:	465f      	mov	r7, fp
 8015400:	4643      	mov	r3, r8
 8015402:	4698      	mov	r8, r3
 8015404:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015408:	2a39      	cmp	r2, #57	; 0x39
 801540a:	d106      	bne.n	801541a <_dtoa_r+0x622>
 801540c:	9a00      	ldr	r2, [sp, #0]
 801540e:	429a      	cmp	r2, r3
 8015410:	d1f7      	bne.n	8015402 <_dtoa_r+0x60a>
 8015412:	9900      	ldr	r1, [sp, #0]
 8015414:	2230      	movs	r2, #48	; 0x30
 8015416:	3701      	adds	r7, #1
 8015418:	700a      	strb	r2, [r1, #0]
 801541a:	781a      	ldrb	r2, [r3, #0]
 801541c:	3201      	adds	r2, #1
 801541e:	701a      	strb	r2, [r3, #0]
 8015420:	e7ae      	b.n	8015380 <_dtoa_r+0x588>
 8015422:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015426:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801542a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801542e:	d1b2      	bne.n	8015396 <_dtoa_r+0x59e>
 8015430:	e7d3      	b.n	80153da <_dtoa_r+0x5e2>
 8015432:	bf00      	nop
 8015434:	080184a0 	.word	0x080184a0
 8015438:	08018478 	.word	0x08018478
 801543c:	9908      	ldr	r1, [sp, #32]
 801543e:	2900      	cmp	r1, #0
 8015440:	f000 80d1 	beq.w	80155e6 <_dtoa_r+0x7ee>
 8015444:	9907      	ldr	r1, [sp, #28]
 8015446:	2901      	cmp	r1, #1
 8015448:	f300 80b4 	bgt.w	80155b4 <_dtoa_r+0x7bc>
 801544c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801544e:	2900      	cmp	r1, #0
 8015450:	f000 80ac 	beq.w	80155ac <_dtoa_r+0x7b4>
 8015454:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015458:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801545c:	461c      	mov	r4, r3
 801545e:	930a      	str	r3, [sp, #40]	; 0x28
 8015460:	9b05      	ldr	r3, [sp, #20]
 8015462:	4413      	add	r3, r2
 8015464:	9305      	str	r3, [sp, #20]
 8015466:	9b06      	ldr	r3, [sp, #24]
 8015468:	2101      	movs	r1, #1
 801546a:	4413      	add	r3, r2
 801546c:	4630      	mov	r0, r6
 801546e:	9306      	str	r3, [sp, #24]
 8015470:	f000 fb4c 	bl	8015b0c <__i2b>
 8015474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015476:	4607      	mov	r7, r0
 8015478:	f1b8 0f00 	cmp.w	r8, #0
 801547c:	dd0d      	ble.n	801549a <_dtoa_r+0x6a2>
 801547e:	9a06      	ldr	r2, [sp, #24]
 8015480:	2a00      	cmp	r2, #0
 8015482:	dd0a      	ble.n	801549a <_dtoa_r+0x6a2>
 8015484:	4542      	cmp	r2, r8
 8015486:	9905      	ldr	r1, [sp, #20]
 8015488:	bfa8      	it	ge
 801548a:	4642      	movge	r2, r8
 801548c:	1a89      	subs	r1, r1, r2
 801548e:	9105      	str	r1, [sp, #20]
 8015490:	9906      	ldr	r1, [sp, #24]
 8015492:	eba8 0802 	sub.w	r8, r8, r2
 8015496:	1a8a      	subs	r2, r1, r2
 8015498:	9206      	str	r2, [sp, #24]
 801549a:	b303      	cbz	r3, 80154de <_dtoa_r+0x6e6>
 801549c:	9a08      	ldr	r2, [sp, #32]
 801549e:	2a00      	cmp	r2, #0
 80154a0:	f000 80a6 	beq.w	80155f0 <_dtoa_r+0x7f8>
 80154a4:	2c00      	cmp	r4, #0
 80154a6:	dd13      	ble.n	80154d0 <_dtoa_r+0x6d8>
 80154a8:	4639      	mov	r1, r7
 80154aa:	4622      	mov	r2, r4
 80154ac:	4630      	mov	r0, r6
 80154ae:	930c      	str	r3, [sp, #48]	; 0x30
 80154b0:	f000 fbe8 	bl	8015c84 <__pow5mult>
 80154b4:	462a      	mov	r2, r5
 80154b6:	4601      	mov	r1, r0
 80154b8:	4607      	mov	r7, r0
 80154ba:	4630      	mov	r0, r6
 80154bc:	f000 fb3c 	bl	8015b38 <__multiply>
 80154c0:	4629      	mov	r1, r5
 80154c2:	900a      	str	r0, [sp, #40]	; 0x28
 80154c4:	4630      	mov	r0, r6
 80154c6:	f000 fa65 	bl	8015994 <_Bfree>
 80154ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80154cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80154ce:	4615      	mov	r5, r2
 80154d0:	1b1a      	subs	r2, r3, r4
 80154d2:	d004      	beq.n	80154de <_dtoa_r+0x6e6>
 80154d4:	4629      	mov	r1, r5
 80154d6:	4630      	mov	r0, r6
 80154d8:	f000 fbd4 	bl	8015c84 <__pow5mult>
 80154dc:	4605      	mov	r5, r0
 80154de:	2101      	movs	r1, #1
 80154e0:	4630      	mov	r0, r6
 80154e2:	f000 fb13 	bl	8015b0c <__i2b>
 80154e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	4604      	mov	r4, r0
 80154ec:	f340 8082 	ble.w	80155f4 <_dtoa_r+0x7fc>
 80154f0:	461a      	mov	r2, r3
 80154f2:	4601      	mov	r1, r0
 80154f4:	4630      	mov	r0, r6
 80154f6:	f000 fbc5 	bl	8015c84 <__pow5mult>
 80154fa:	9b07      	ldr	r3, [sp, #28]
 80154fc:	2b01      	cmp	r3, #1
 80154fe:	4604      	mov	r4, r0
 8015500:	dd7b      	ble.n	80155fa <_dtoa_r+0x802>
 8015502:	2300      	movs	r3, #0
 8015504:	930a      	str	r3, [sp, #40]	; 0x28
 8015506:	6922      	ldr	r2, [r4, #16]
 8015508:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801550c:	6910      	ldr	r0, [r2, #16]
 801550e:	f000 faad 	bl	8015a6c <__hi0bits>
 8015512:	f1c0 0020 	rsb	r0, r0, #32
 8015516:	9b06      	ldr	r3, [sp, #24]
 8015518:	4418      	add	r0, r3
 801551a:	f010 001f 	ands.w	r0, r0, #31
 801551e:	f000 808d 	beq.w	801563c <_dtoa_r+0x844>
 8015522:	f1c0 0220 	rsb	r2, r0, #32
 8015526:	2a04      	cmp	r2, #4
 8015528:	f340 8086 	ble.w	8015638 <_dtoa_r+0x840>
 801552c:	f1c0 001c 	rsb	r0, r0, #28
 8015530:	9b05      	ldr	r3, [sp, #20]
 8015532:	4403      	add	r3, r0
 8015534:	9305      	str	r3, [sp, #20]
 8015536:	9b06      	ldr	r3, [sp, #24]
 8015538:	4403      	add	r3, r0
 801553a:	4480      	add	r8, r0
 801553c:	9306      	str	r3, [sp, #24]
 801553e:	9b05      	ldr	r3, [sp, #20]
 8015540:	2b00      	cmp	r3, #0
 8015542:	dd05      	ble.n	8015550 <_dtoa_r+0x758>
 8015544:	4629      	mov	r1, r5
 8015546:	461a      	mov	r2, r3
 8015548:	4630      	mov	r0, r6
 801554a:	f000 fbf5 	bl	8015d38 <__lshift>
 801554e:	4605      	mov	r5, r0
 8015550:	9b06      	ldr	r3, [sp, #24]
 8015552:	2b00      	cmp	r3, #0
 8015554:	dd05      	ble.n	8015562 <_dtoa_r+0x76a>
 8015556:	4621      	mov	r1, r4
 8015558:	461a      	mov	r2, r3
 801555a:	4630      	mov	r0, r6
 801555c:	f000 fbec 	bl	8015d38 <__lshift>
 8015560:	4604      	mov	r4, r0
 8015562:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015564:	2b00      	cmp	r3, #0
 8015566:	d06b      	beq.n	8015640 <_dtoa_r+0x848>
 8015568:	4621      	mov	r1, r4
 801556a:	4628      	mov	r0, r5
 801556c:	f000 fc50 	bl	8015e10 <__mcmp>
 8015570:	2800      	cmp	r0, #0
 8015572:	da65      	bge.n	8015640 <_dtoa_r+0x848>
 8015574:	2300      	movs	r3, #0
 8015576:	4629      	mov	r1, r5
 8015578:	220a      	movs	r2, #10
 801557a:	4630      	mov	r0, r6
 801557c:	f000 fa2c 	bl	80159d8 <__multadd>
 8015580:	9b08      	ldr	r3, [sp, #32]
 8015582:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015586:	4605      	mov	r5, r0
 8015588:	2b00      	cmp	r3, #0
 801558a:	f000 8192 	beq.w	80158b2 <_dtoa_r+0xaba>
 801558e:	4639      	mov	r1, r7
 8015590:	2300      	movs	r3, #0
 8015592:	220a      	movs	r2, #10
 8015594:	4630      	mov	r0, r6
 8015596:	f000 fa1f 	bl	80159d8 <__multadd>
 801559a:	f1ba 0f00 	cmp.w	sl, #0
 801559e:	4607      	mov	r7, r0
 80155a0:	f300 808e 	bgt.w	80156c0 <_dtoa_r+0x8c8>
 80155a4:	9b07      	ldr	r3, [sp, #28]
 80155a6:	2b02      	cmp	r3, #2
 80155a8:	dc51      	bgt.n	801564e <_dtoa_r+0x856>
 80155aa:	e089      	b.n	80156c0 <_dtoa_r+0x8c8>
 80155ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80155ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80155b2:	e751      	b.n	8015458 <_dtoa_r+0x660>
 80155b4:	f109 34ff 	add.w	r4, r9, #4294967295
 80155b8:	42a3      	cmp	r3, r4
 80155ba:	bfbf      	itttt	lt
 80155bc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80155be:	1ae3      	sublt	r3, r4, r3
 80155c0:	18d2      	addlt	r2, r2, r3
 80155c2:	4613      	movlt	r3, r2
 80155c4:	bfb7      	itett	lt
 80155c6:	930e      	strlt	r3, [sp, #56]	; 0x38
 80155c8:	1b1c      	subge	r4, r3, r4
 80155ca:	4623      	movlt	r3, r4
 80155cc:	2400      	movlt	r4, #0
 80155ce:	f1b9 0f00 	cmp.w	r9, #0
 80155d2:	bfb5      	itete	lt
 80155d4:	9a05      	ldrlt	r2, [sp, #20]
 80155d6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80155da:	eba2 0809 	sublt.w	r8, r2, r9
 80155de:	464a      	movge	r2, r9
 80155e0:	bfb8      	it	lt
 80155e2:	2200      	movlt	r2, #0
 80155e4:	e73b      	b.n	801545e <_dtoa_r+0x666>
 80155e6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80155ea:	9f08      	ldr	r7, [sp, #32]
 80155ec:	461c      	mov	r4, r3
 80155ee:	e743      	b.n	8015478 <_dtoa_r+0x680>
 80155f0:	461a      	mov	r2, r3
 80155f2:	e76f      	b.n	80154d4 <_dtoa_r+0x6dc>
 80155f4:	9b07      	ldr	r3, [sp, #28]
 80155f6:	2b01      	cmp	r3, #1
 80155f8:	dc18      	bgt.n	801562c <_dtoa_r+0x834>
 80155fa:	9b02      	ldr	r3, [sp, #8]
 80155fc:	b9b3      	cbnz	r3, 801562c <_dtoa_r+0x834>
 80155fe:	9b03      	ldr	r3, [sp, #12]
 8015600:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8015604:	b9a2      	cbnz	r2, 8015630 <_dtoa_r+0x838>
 8015606:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801560a:	0d12      	lsrs	r2, r2, #20
 801560c:	0512      	lsls	r2, r2, #20
 801560e:	b18a      	cbz	r2, 8015634 <_dtoa_r+0x83c>
 8015610:	9b05      	ldr	r3, [sp, #20]
 8015612:	3301      	adds	r3, #1
 8015614:	9305      	str	r3, [sp, #20]
 8015616:	9b06      	ldr	r3, [sp, #24]
 8015618:	3301      	adds	r3, #1
 801561a:	9306      	str	r3, [sp, #24]
 801561c:	2301      	movs	r3, #1
 801561e:	930a      	str	r3, [sp, #40]	; 0x28
 8015620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015622:	2b00      	cmp	r3, #0
 8015624:	f47f af6f 	bne.w	8015506 <_dtoa_r+0x70e>
 8015628:	2001      	movs	r0, #1
 801562a:	e774      	b.n	8015516 <_dtoa_r+0x71e>
 801562c:	2300      	movs	r3, #0
 801562e:	e7f6      	b.n	801561e <_dtoa_r+0x826>
 8015630:	9b02      	ldr	r3, [sp, #8]
 8015632:	e7f4      	b.n	801561e <_dtoa_r+0x826>
 8015634:	920a      	str	r2, [sp, #40]	; 0x28
 8015636:	e7f3      	b.n	8015620 <_dtoa_r+0x828>
 8015638:	d081      	beq.n	801553e <_dtoa_r+0x746>
 801563a:	4610      	mov	r0, r2
 801563c:	301c      	adds	r0, #28
 801563e:	e777      	b.n	8015530 <_dtoa_r+0x738>
 8015640:	f1b9 0f00 	cmp.w	r9, #0
 8015644:	dc37      	bgt.n	80156b6 <_dtoa_r+0x8be>
 8015646:	9b07      	ldr	r3, [sp, #28]
 8015648:	2b02      	cmp	r3, #2
 801564a:	dd34      	ble.n	80156b6 <_dtoa_r+0x8be>
 801564c:	46ca      	mov	sl, r9
 801564e:	f1ba 0f00 	cmp.w	sl, #0
 8015652:	d10d      	bne.n	8015670 <_dtoa_r+0x878>
 8015654:	4621      	mov	r1, r4
 8015656:	4653      	mov	r3, sl
 8015658:	2205      	movs	r2, #5
 801565a:	4630      	mov	r0, r6
 801565c:	f000 f9bc 	bl	80159d8 <__multadd>
 8015660:	4601      	mov	r1, r0
 8015662:	4604      	mov	r4, r0
 8015664:	4628      	mov	r0, r5
 8015666:	f000 fbd3 	bl	8015e10 <__mcmp>
 801566a:	2800      	cmp	r0, #0
 801566c:	f73f adde 	bgt.w	801522c <_dtoa_r+0x434>
 8015670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015672:	f8dd 8000 	ldr.w	r8, [sp]
 8015676:	ea6f 0b03 	mvn.w	fp, r3
 801567a:	f04f 0900 	mov.w	r9, #0
 801567e:	4621      	mov	r1, r4
 8015680:	4630      	mov	r0, r6
 8015682:	f000 f987 	bl	8015994 <_Bfree>
 8015686:	2f00      	cmp	r7, #0
 8015688:	f43f aea7 	beq.w	80153da <_dtoa_r+0x5e2>
 801568c:	f1b9 0f00 	cmp.w	r9, #0
 8015690:	d005      	beq.n	801569e <_dtoa_r+0x8a6>
 8015692:	45b9      	cmp	r9, r7
 8015694:	d003      	beq.n	801569e <_dtoa_r+0x8a6>
 8015696:	4649      	mov	r1, r9
 8015698:	4630      	mov	r0, r6
 801569a:	f000 f97b 	bl	8015994 <_Bfree>
 801569e:	4639      	mov	r1, r7
 80156a0:	4630      	mov	r0, r6
 80156a2:	f000 f977 	bl	8015994 <_Bfree>
 80156a6:	e698      	b.n	80153da <_dtoa_r+0x5e2>
 80156a8:	2400      	movs	r4, #0
 80156aa:	4627      	mov	r7, r4
 80156ac:	e7e0      	b.n	8015670 <_dtoa_r+0x878>
 80156ae:	46bb      	mov	fp, r7
 80156b0:	4604      	mov	r4, r0
 80156b2:	4607      	mov	r7, r0
 80156b4:	e5ba      	b.n	801522c <_dtoa_r+0x434>
 80156b6:	9b08      	ldr	r3, [sp, #32]
 80156b8:	46ca      	mov	sl, r9
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	f000 8100 	beq.w	80158c0 <_dtoa_r+0xac8>
 80156c0:	f1b8 0f00 	cmp.w	r8, #0
 80156c4:	dd05      	ble.n	80156d2 <_dtoa_r+0x8da>
 80156c6:	4639      	mov	r1, r7
 80156c8:	4642      	mov	r2, r8
 80156ca:	4630      	mov	r0, r6
 80156cc:	f000 fb34 	bl	8015d38 <__lshift>
 80156d0:	4607      	mov	r7, r0
 80156d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d05d      	beq.n	8015794 <_dtoa_r+0x99c>
 80156d8:	6879      	ldr	r1, [r7, #4]
 80156da:	4630      	mov	r0, r6
 80156dc:	f000 f91a 	bl	8015914 <_Balloc>
 80156e0:	4680      	mov	r8, r0
 80156e2:	b928      	cbnz	r0, 80156f0 <_dtoa_r+0x8f8>
 80156e4:	4b82      	ldr	r3, [pc, #520]	; (80158f0 <_dtoa_r+0xaf8>)
 80156e6:	4602      	mov	r2, r0
 80156e8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80156ec:	f7ff bb9a 	b.w	8014e24 <_dtoa_r+0x2c>
 80156f0:	693a      	ldr	r2, [r7, #16]
 80156f2:	3202      	adds	r2, #2
 80156f4:	0092      	lsls	r2, r2, #2
 80156f6:	f107 010c 	add.w	r1, r7, #12
 80156fa:	300c      	adds	r0, #12
 80156fc:	f7fe fe94 	bl	8014428 <memcpy>
 8015700:	2201      	movs	r2, #1
 8015702:	4641      	mov	r1, r8
 8015704:	4630      	mov	r0, r6
 8015706:	f000 fb17 	bl	8015d38 <__lshift>
 801570a:	9b00      	ldr	r3, [sp, #0]
 801570c:	3301      	adds	r3, #1
 801570e:	9305      	str	r3, [sp, #20]
 8015710:	9b00      	ldr	r3, [sp, #0]
 8015712:	4453      	add	r3, sl
 8015714:	9309      	str	r3, [sp, #36]	; 0x24
 8015716:	9b02      	ldr	r3, [sp, #8]
 8015718:	f003 0301 	and.w	r3, r3, #1
 801571c:	46b9      	mov	r9, r7
 801571e:	9308      	str	r3, [sp, #32]
 8015720:	4607      	mov	r7, r0
 8015722:	9b05      	ldr	r3, [sp, #20]
 8015724:	4621      	mov	r1, r4
 8015726:	3b01      	subs	r3, #1
 8015728:	4628      	mov	r0, r5
 801572a:	9302      	str	r3, [sp, #8]
 801572c:	f7ff fad6 	bl	8014cdc <quorem>
 8015730:	4603      	mov	r3, r0
 8015732:	3330      	adds	r3, #48	; 0x30
 8015734:	9006      	str	r0, [sp, #24]
 8015736:	4649      	mov	r1, r9
 8015738:	4628      	mov	r0, r5
 801573a:	930a      	str	r3, [sp, #40]	; 0x28
 801573c:	f000 fb68 	bl	8015e10 <__mcmp>
 8015740:	463a      	mov	r2, r7
 8015742:	4682      	mov	sl, r0
 8015744:	4621      	mov	r1, r4
 8015746:	4630      	mov	r0, r6
 8015748:	f000 fb7e 	bl	8015e48 <__mdiff>
 801574c:	68c2      	ldr	r2, [r0, #12]
 801574e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015750:	4680      	mov	r8, r0
 8015752:	bb0a      	cbnz	r2, 8015798 <_dtoa_r+0x9a0>
 8015754:	4601      	mov	r1, r0
 8015756:	4628      	mov	r0, r5
 8015758:	f000 fb5a 	bl	8015e10 <__mcmp>
 801575c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801575e:	4602      	mov	r2, r0
 8015760:	4641      	mov	r1, r8
 8015762:	4630      	mov	r0, r6
 8015764:	920e      	str	r2, [sp, #56]	; 0x38
 8015766:	930a      	str	r3, [sp, #40]	; 0x28
 8015768:	f000 f914 	bl	8015994 <_Bfree>
 801576c:	9b07      	ldr	r3, [sp, #28]
 801576e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015770:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8015774:	ea43 0102 	orr.w	r1, r3, r2
 8015778:	9b08      	ldr	r3, [sp, #32]
 801577a:	430b      	orrs	r3, r1
 801577c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801577e:	d10d      	bne.n	801579c <_dtoa_r+0x9a4>
 8015780:	2b39      	cmp	r3, #57	; 0x39
 8015782:	d029      	beq.n	80157d8 <_dtoa_r+0x9e0>
 8015784:	f1ba 0f00 	cmp.w	sl, #0
 8015788:	dd01      	ble.n	801578e <_dtoa_r+0x996>
 801578a:	9b06      	ldr	r3, [sp, #24]
 801578c:	3331      	adds	r3, #49	; 0x31
 801578e:	9a02      	ldr	r2, [sp, #8]
 8015790:	7013      	strb	r3, [r2, #0]
 8015792:	e774      	b.n	801567e <_dtoa_r+0x886>
 8015794:	4638      	mov	r0, r7
 8015796:	e7b8      	b.n	801570a <_dtoa_r+0x912>
 8015798:	2201      	movs	r2, #1
 801579a:	e7e1      	b.n	8015760 <_dtoa_r+0x968>
 801579c:	f1ba 0f00 	cmp.w	sl, #0
 80157a0:	db06      	blt.n	80157b0 <_dtoa_r+0x9b8>
 80157a2:	9907      	ldr	r1, [sp, #28]
 80157a4:	ea41 0a0a 	orr.w	sl, r1, sl
 80157a8:	9908      	ldr	r1, [sp, #32]
 80157aa:	ea5a 0101 	orrs.w	r1, sl, r1
 80157ae:	d120      	bne.n	80157f2 <_dtoa_r+0x9fa>
 80157b0:	2a00      	cmp	r2, #0
 80157b2:	ddec      	ble.n	801578e <_dtoa_r+0x996>
 80157b4:	4629      	mov	r1, r5
 80157b6:	2201      	movs	r2, #1
 80157b8:	4630      	mov	r0, r6
 80157ba:	9305      	str	r3, [sp, #20]
 80157bc:	f000 fabc 	bl	8015d38 <__lshift>
 80157c0:	4621      	mov	r1, r4
 80157c2:	4605      	mov	r5, r0
 80157c4:	f000 fb24 	bl	8015e10 <__mcmp>
 80157c8:	2800      	cmp	r0, #0
 80157ca:	9b05      	ldr	r3, [sp, #20]
 80157cc:	dc02      	bgt.n	80157d4 <_dtoa_r+0x9dc>
 80157ce:	d1de      	bne.n	801578e <_dtoa_r+0x996>
 80157d0:	07da      	lsls	r2, r3, #31
 80157d2:	d5dc      	bpl.n	801578e <_dtoa_r+0x996>
 80157d4:	2b39      	cmp	r3, #57	; 0x39
 80157d6:	d1d8      	bne.n	801578a <_dtoa_r+0x992>
 80157d8:	9a02      	ldr	r2, [sp, #8]
 80157da:	2339      	movs	r3, #57	; 0x39
 80157dc:	7013      	strb	r3, [r2, #0]
 80157de:	4643      	mov	r3, r8
 80157e0:	4698      	mov	r8, r3
 80157e2:	3b01      	subs	r3, #1
 80157e4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80157e8:	2a39      	cmp	r2, #57	; 0x39
 80157ea:	d051      	beq.n	8015890 <_dtoa_r+0xa98>
 80157ec:	3201      	adds	r2, #1
 80157ee:	701a      	strb	r2, [r3, #0]
 80157f0:	e745      	b.n	801567e <_dtoa_r+0x886>
 80157f2:	2a00      	cmp	r2, #0
 80157f4:	dd03      	ble.n	80157fe <_dtoa_r+0xa06>
 80157f6:	2b39      	cmp	r3, #57	; 0x39
 80157f8:	d0ee      	beq.n	80157d8 <_dtoa_r+0x9e0>
 80157fa:	3301      	adds	r3, #1
 80157fc:	e7c7      	b.n	801578e <_dtoa_r+0x996>
 80157fe:	9a05      	ldr	r2, [sp, #20]
 8015800:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015802:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015806:	428a      	cmp	r2, r1
 8015808:	d02b      	beq.n	8015862 <_dtoa_r+0xa6a>
 801580a:	4629      	mov	r1, r5
 801580c:	2300      	movs	r3, #0
 801580e:	220a      	movs	r2, #10
 8015810:	4630      	mov	r0, r6
 8015812:	f000 f8e1 	bl	80159d8 <__multadd>
 8015816:	45b9      	cmp	r9, r7
 8015818:	4605      	mov	r5, r0
 801581a:	f04f 0300 	mov.w	r3, #0
 801581e:	f04f 020a 	mov.w	r2, #10
 8015822:	4649      	mov	r1, r9
 8015824:	4630      	mov	r0, r6
 8015826:	d107      	bne.n	8015838 <_dtoa_r+0xa40>
 8015828:	f000 f8d6 	bl	80159d8 <__multadd>
 801582c:	4681      	mov	r9, r0
 801582e:	4607      	mov	r7, r0
 8015830:	9b05      	ldr	r3, [sp, #20]
 8015832:	3301      	adds	r3, #1
 8015834:	9305      	str	r3, [sp, #20]
 8015836:	e774      	b.n	8015722 <_dtoa_r+0x92a>
 8015838:	f000 f8ce 	bl	80159d8 <__multadd>
 801583c:	4639      	mov	r1, r7
 801583e:	4681      	mov	r9, r0
 8015840:	2300      	movs	r3, #0
 8015842:	220a      	movs	r2, #10
 8015844:	4630      	mov	r0, r6
 8015846:	f000 f8c7 	bl	80159d8 <__multadd>
 801584a:	4607      	mov	r7, r0
 801584c:	e7f0      	b.n	8015830 <_dtoa_r+0xa38>
 801584e:	f1ba 0f00 	cmp.w	sl, #0
 8015852:	9a00      	ldr	r2, [sp, #0]
 8015854:	bfcc      	ite	gt
 8015856:	46d0      	movgt	r8, sl
 8015858:	f04f 0801 	movle.w	r8, #1
 801585c:	4490      	add	r8, r2
 801585e:	f04f 0900 	mov.w	r9, #0
 8015862:	4629      	mov	r1, r5
 8015864:	2201      	movs	r2, #1
 8015866:	4630      	mov	r0, r6
 8015868:	9302      	str	r3, [sp, #8]
 801586a:	f000 fa65 	bl	8015d38 <__lshift>
 801586e:	4621      	mov	r1, r4
 8015870:	4605      	mov	r5, r0
 8015872:	f000 facd 	bl	8015e10 <__mcmp>
 8015876:	2800      	cmp	r0, #0
 8015878:	dcb1      	bgt.n	80157de <_dtoa_r+0x9e6>
 801587a:	d102      	bne.n	8015882 <_dtoa_r+0xa8a>
 801587c:	9b02      	ldr	r3, [sp, #8]
 801587e:	07db      	lsls	r3, r3, #31
 8015880:	d4ad      	bmi.n	80157de <_dtoa_r+0x9e6>
 8015882:	4643      	mov	r3, r8
 8015884:	4698      	mov	r8, r3
 8015886:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801588a:	2a30      	cmp	r2, #48	; 0x30
 801588c:	d0fa      	beq.n	8015884 <_dtoa_r+0xa8c>
 801588e:	e6f6      	b.n	801567e <_dtoa_r+0x886>
 8015890:	9a00      	ldr	r2, [sp, #0]
 8015892:	429a      	cmp	r2, r3
 8015894:	d1a4      	bne.n	80157e0 <_dtoa_r+0x9e8>
 8015896:	f10b 0b01 	add.w	fp, fp, #1
 801589a:	2331      	movs	r3, #49	; 0x31
 801589c:	e778      	b.n	8015790 <_dtoa_r+0x998>
 801589e:	4b15      	ldr	r3, [pc, #84]	; (80158f4 <_dtoa_r+0xafc>)
 80158a0:	f7ff bb12 	b.w	8014ec8 <_dtoa_r+0xd0>
 80158a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	f47f aaee 	bne.w	8014e88 <_dtoa_r+0x90>
 80158ac:	4b12      	ldr	r3, [pc, #72]	; (80158f8 <_dtoa_r+0xb00>)
 80158ae:	f7ff bb0b 	b.w	8014ec8 <_dtoa_r+0xd0>
 80158b2:	f1ba 0f00 	cmp.w	sl, #0
 80158b6:	dc03      	bgt.n	80158c0 <_dtoa_r+0xac8>
 80158b8:	9b07      	ldr	r3, [sp, #28]
 80158ba:	2b02      	cmp	r3, #2
 80158bc:	f73f aec7 	bgt.w	801564e <_dtoa_r+0x856>
 80158c0:	f8dd 8000 	ldr.w	r8, [sp]
 80158c4:	4621      	mov	r1, r4
 80158c6:	4628      	mov	r0, r5
 80158c8:	f7ff fa08 	bl	8014cdc <quorem>
 80158cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80158d0:	f808 3b01 	strb.w	r3, [r8], #1
 80158d4:	9a00      	ldr	r2, [sp, #0]
 80158d6:	eba8 0202 	sub.w	r2, r8, r2
 80158da:	4592      	cmp	sl, r2
 80158dc:	ddb7      	ble.n	801584e <_dtoa_r+0xa56>
 80158de:	4629      	mov	r1, r5
 80158e0:	2300      	movs	r3, #0
 80158e2:	220a      	movs	r2, #10
 80158e4:	4630      	mov	r0, r6
 80158e6:	f000 f877 	bl	80159d8 <__multadd>
 80158ea:	4605      	mov	r5, r0
 80158ec:	e7ea      	b.n	80158c4 <_dtoa_r+0xacc>
 80158ee:	bf00      	nop
 80158f0:	08018403 	.word	0x08018403
 80158f4:	0801835c 	.word	0x0801835c
 80158f8:	08018380 	.word	0x08018380

080158fc <_localeconv_r>:
 80158fc:	4800      	ldr	r0, [pc, #0]	; (8015900 <_localeconv_r+0x4>)
 80158fe:	4770      	bx	lr
 8015900:	24000164 	.word	0x24000164

08015904 <malloc>:
 8015904:	4b02      	ldr	r3, [pc, #8]	; (8015910 <malloc+0xc>)
 8015906:	4601      	mov	r1, r0
 8015908:	6818      	ldr	r0, [r3, #0]
 801590a:	f000 bbe1 	b.w	80160d0 <_malloc_r>
 801590e:	bf00      	nop
 8015910:	24000010 	.word	0x24000010

08015914 <_Balloc>:
 8015914:	b570      	push	{r4, r5, r6, lr}
 8015916:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015918:	4604      	mov	r4, r0
 801591a:	460d      	mov	r5, r1
 801591c:	b976      	cbnz	r6, 801593c <_Balloc+0x28>
 801591e:	2010      	movs	r0, #16
 8015920:	f7ff fff0 	bl	8015904 <malloc>
 8015924:	4602      	mov	r2, r0
 8015926:	6260      	str	r0, [r4, #36]	; 0x24
 8015928:	b920      	cbnz	r0, 8015934 <_Balloc+0x20>
 801592a:	4b18      	ldr	r3, [pc, #96]	; (801598c <_Balloc+0x78>)
 801592c:	4818      	ldr	r0, [pc, #96]	; (8015990 <_Balloc+0x7c>)
 801592e:	2166      	movs	r1, #102	; 0x66
 8015930:	f000 fc38 	bl	80161a4 <__assert_func>
 8015934:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015938:	6006      	str	r6, [r0, #0]
 801593a:	60c6      	str	r6, [r0, #12]
 801593c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801593e:	68f3      	ldr	r3, [r6, #12]
 8015940:	b183      	cbz	r3, 8015964 <_Balloc+0x50>
 8015942:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015944:	68db      	ldr	r3, [r3, #12]
 8015946:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801594a:	b9b8      	cbnz	r0, 801597c <_Balloc+0x68>
 801594c:	2101      	movs	r1, #1
 801594e:	fa01 f605 	lsl.w	r6, r1, r5
 8015952:	1d72      	adds	r2, r6, #5
 8015954:	0092      	lsls	r2, r2, #2
 8015956:	4620      	mov	r0, r4
 8015958:	f000 fb5a 	bl	8016010 <_calloc_r>
 801595c:	b160      	cbz	r0, 8015978 <_Balloc+0x64>
 801595e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015962:	e00e      	b.n	8015982 <_Balloc+0x6e>
 8015964:	2221      	movs	r2, #33	; 0x21
 8015966:	2104      	movs	r1, #4
 8015968:	4620      	mov	r0, r4
 801596a:	f000 fb51 	bl	8016010 <_calloc_r>
 801596e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015970:	60f0      	str	r0, [r6, #12]
 8015972:	68db      	ldr	r3, [r3, #12]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d1e4      	bne.n	8015942 <_Balloc+0x2e>
 8015978:	2000      	movs	r0, #0
 801597a:	bd70      	pop	{r4, r5, r6, pc}
 801597c:	6802      	ldr	r2, [r0, #0]
 801597e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015982:	2300      	movs	r3, #0
 8015984:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015988:	e7f7      	b.n	801597a <_Balloc+0x66>
 801598a:	bf00      	nop
 801598c:	0801838d 	.word	0x0801838d
 8015990:	08018414 	.word	0x08018414

08015994 <_Bfree>:
 8015994:	b570      	push	{r4, r5, r6, lr}
 8015996:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015998:	4605      	mov	r5, r0
 801599a:	460c      	mov	r4, r1
 801599c:	b976      	cbnz	r6, 80159bc <_Bfree+0x28>
 801599e:	2010      	movs	r0, #16
 80159a0:	f7ff ffb0 	bl	8015904 <malloc>
 80159a4:	4602      	mov	r2, r0
 80159a6:	6268      	str	r0, [r5, #36]	; 0x24
 80159a8:	b920      	cbnz	r0, 80159b4 <_Bfree+0x20>
 80159aa:	4b09      	ldr	r3, [pc, #36]	; (80159d0 <_Bfree+0x3c>)
 80159ac:	4809      	ldr	r0, [pc, #36]	; (80159d4 <_Bfree+0x40>)
 80159ae:	218a      	movs	r1, #138	; 0x8a
 80159b0:	f000 fbf8 	bl	80161a4 <__assert_func>
 80159b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80159b8:	6006      	str	r6, [r0, #0]
 80159ba:	60c6      	str	r6, [r0, #12]
 80159bc:	b13c      	cbz	r4, 80159ce <_Bfree+0x3a>
 80159be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80159c0:	6862      	ldr	r2, [r4, #4]
 80159c2:	68db      	ldr	r3, [r3, #12]
 80159c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80159c8:	6021      	str	r1, [r4, #0]
 80159ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80159ce:	bd70      	pop	{r4, r5, r6, pc}
 80159d0:	0801838d 	.word	0x0801838d
 80159d4:	08018414 	.word	0x08018414

080159d8 <__multadd>:
 80159d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159dc:	690e      	ldr	r6, [r1, #16]
 80159de:	4607      	mov	r7, r0
 80159e0:	4698      	mov	r8, r3
 80159e2:	460c      	mov	r4, r1
 80159e4:	f101 0014 	add.w	r0, r1, #20
 80159e8:	2300      	movs	r3, #0
 80159ea:	6805      	ldr	r5, [r0, #0]
 80159ec:	b2a9      	uxth	r1, r5
 80159ee:	fb02 8101 	mla	r1, r2, r1, r8
 80159f2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80159f6:	0c2d      	lsrs	r5, r5, #16
 80159f8:	fb02 c505 	mla	r5, r2, r5, ip
 80159fc:	b289      	uxth	r1, r1
 80159fe:	3301      	adds	r3, #1
 8015a00:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8015a04:	429e      	cmp	r6, r3
 8015a06:	f840 1b04 	str.w	r1, [r0], #4
 8015a0a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8015a0e:	dcec      	bgt.n	80159ea <__multadd+0x12>
 8015a10:	f1b8 0f00 	cmp.w	r8, #0
 8015a14:	d022      	beq.n	8015a5c <__multadd+0x84>
 8015a16:	68a3      	ldr	r3, [r4, #8]
 8015a18:	42b3      	cmp	r3, r6
 8015a1a:	dc19      	bgt.n	8015a50 <__multadd+0x78>
 8015a1c:	6861      	ldr	r1, [r4, #4]
 8015a1e:	4638      	mov	r0, r7
 8015a20:	3101      	adds	r1, #1
 8015a22:	f7ff ff77 	bl	8015914 <_Balloc>
 8015a26:	4605      	mov	r5, r0
 8015a28:	b928      	cbnz	r0, 8015a36 <__multadd+0x5e>
 8015a2a:	4602      	mov	r2, r0
 8015a2c:	4b0d      	ldr	r3, [pc, #52]	; (8015a64 <__multadd+0x8c>)
 8015a2e:	480e      	ldr	r0, [pc, #56]	; (8015a68 <__multadd+0x90>)
 8015a30:	21b5      	movs	r1, #181	; 0xb5
 8015a32:	f000 fbb7 	bl	80161a4 <__assert_func>
 8015a36:	6922      	ldr	r2, [r4, #16]
 8015a38:	3202      	adds	r2, #2
 8015a3a:	f104 010c 	add.w	r1, r4, #12
 8015a3e:	0092      	lsls	r2, r2, #2
 8015a40:	300c      	adds	r0, #12
 8015a42:	f7fe fcf1 	bl	8014428 <memcpy>
 8015a46:	4621      	mov	r1, r4
 8015a48:	4638      	mov	r0, r7
 8015a4a:	f7ff ffa3 	bl	8015994 <_Bfree>
 8015a4e:	462c      	mov	r4, r5
 8015a50:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8015a54:	3601      	adds	r6, #1
 8015a56:	f8c3 8014 	str.w	r8, [r3, #20]
 8015a5a:	6126      	str	r6, [r4, #16]
 8015a5c:	4620      	mov	r0, r4
 8015a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a62:	bf00      	nop
 8015a64:	08018403 	.word	0x08018403
 8015a68:	08018414 	.word	0x08018414

08015a6c <__hi0bits>:
 8015a6c:	0c03      	lsrs	r3, r0, #16
 8015a6e:	041b      	lsls	r3, r3, #16
 8015a70:	b9d3      	cbnz	r3, 8015aa8 <__hi0bits+0x3c>
 8015a72:	0400      	lsls	r0, r0, #16
 8015a74:	2310      	movs	r3, #16
 8015a76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015a7a:	bf04      	itt	eq
 8015a7c:	0200      	lsleq	r0, r0, #8
 8015a7e:	3308      	addeq	r3, #8
 8015a80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015a84:	bf04      	itt	eq
 8015a86:	0100      	lsleq	r0, r0, #4
 8015a88:	3304      	addeq	r3, #4
 8015a8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015a8e:	bf04      	itt	eq
 8015a90:	0080      	lsleq	r0, r0, #2
 8015a92:	3302      	addeq	r3, #2
 8015a94:	2800      	cmp	r0, #0
 8015a96:	db05      	blt.n	8015aa4 <__hi0bits+0x38>
 8015a98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015a9c:	f103 0301 	add.w	r3, r3, #1
 8015aa0:	bf08      	it	eq
 8015aa2:	2320      	moveq	r3, #32
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	4770      	bx	lr
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	e7e4      	b.n	8015a76 <__hi0bits+0xa>

08015aac <__lo0bits>:
 8015aac:	6803      	ldr	r3, [r0, #0]
 8015aae:	f013 0207 	ands.w	r2, r3, #7
 8015ab2:	4601      	mov	r1, r0
 8015ab4:	d00b      	beq.n	8015ace <__lo0bits+0x22>
 8015ab6:	07da      	lsls	r2, r3, #31
 8015ab8:	d424      	bmi.n	8015b04 <__lo0bits+0x58>
 8015aba:	0798      	lsls	r0, r3, #30
 8015abc:	bf49      	itett	mi
 8015abe:	085b      	lsrmi	r3, r3, #1
 8015ac0:	089b      	lsrpl	r3, r3, #2
 8015ac2:	2001      	movmi	r0, #1
 8015ac4:	600b      	strmi	r3, [r1, #0]
 8015ac6:	bf5c      	itt	pl
 8015ac8:	600b      	strpl	r3, [r1, #0]
 8015aca:	2002      	movpl	r0, #2
 8015acc:	4770      	bx	lr
 8015ace:	b298      	uxth	r0, r3
 8015ad0:	b9b0      	cbnz	r0, 8015b00 <__lo0bits+0x54>
 8015ad2:	0c1b      	lsrs	r3, r3, #16
 8015ad4:	2010      	movs	r0, #16
 8015ad6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015ada:	bf04      	itt	eq
 8015adc:	0a1b      	lsreq	r3, r3, #8
 8015ade:	3008      	addeq	r0, #8
 8015ae0:	071a      	lsls	r2, r3, #28
 8015ae2:	bf04      	itt	eq
 8015ae4:	091b      	lsreq	r3, r3, #4
 8015ae6:	3004      	addeq	r0, #4
 8015ae8:	079a      	lsls	r2, r3, #30
 8015aea:	bf04      	itt	eq
 8015aec:	089b      	lsreq	r3, r3, #2
 8015aee:	3002      	addeq	r0, #2
 8015af0:	07da      	lsls	r2, r3, #31
 8015af2:	d403      	bmi.n	8015afc <__lo0bits+0x50>
 8015af4:	085b      	lsrs	r3, r3, #1
 8015af6:	f100 0001 	add.w	r0, r0, #1
 8015afa:	d005      	beq.n	8015b08 <__lo0bits+0x5c>
 8015afc:	600b      	str	r3, [r1, #0]
 8015afe:	4770      	bx	lr
 8015b00:	4610      	mov	r0, r2
 8015b02:	e7e8      	b.n	8015ad6 <__lo0bits+0x2a>
 8015b04:	2000      	movs	r0, #0
 8015b06:	4770      	bx	lr
 8015b08:	2020      	movs	r0, #32
 8015b0a:	4770      	bx	lr

08015b0c <__i2b>:
 8015b0c:	b510      	push	{r4, lr}
 8015b0e:	460c      	mov	r4, r1
 8015b10:	2101      	movs	r1, #1
 8015b12:	f7ff feff 	bl	8015914 <_Balloc>
 8015b16:	4602      	mov	r2, r0
 8015b18:	b928      	cbnz	r0, 8015b26 <__i2b+0x1a>
 8015b1a:	4b05      	ldr	r3, [pc, #20]	; (8015b30 <__i2b+0x24>)
 8015b1c:	4805      	ldr	r0, [pc, #20]	; (8015b34 <__i2b+0x28>)
 8015b1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015b22:	f000 fb3f 	bl	80161a4 <__assert_func>
 8015b26:	2301      	movs	r3, #1
 8015b28:	6144      	str	r4, [r0, #20]
 8015b2a:	6103      	str	r3, [r0, #16]
 8015b2c:	bd10      	pop	{r4, pc}
 8015b2e:	bf00      	nop
 8015b30:	08018403 	.word	0x08018403
 8015b34:	08018414 	.word	0x08018414

08015b38 <__multiply>:
 8015b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b3c:	4614      	mov	r4, r2
 8015b3e:	690a      	ldr	r2, [r1, #16]
 8015b40:	6923      	ldr	r3, [r4, #16]
 8015b42:	429a      	cmp	r2, r3
 8015b44:	bfb8      	it	lt
 8015b46:	460b      	movlt	r3, r1
 8015b48:	460d      	mov	r5, r1
 8015b4a:	bfbc      	itt	lt
 8015b4c:	4625      	movlt	r5, r4
 8015b4e:	461c      	movlt	r4, r3
 8015b50:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8015b54:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015b58:	68ab      	ldr	r3, [r5, #8]
 8015b5a:	6869      	ldr	r1, [r5, #4]
 8015b5c:	eb0a 0709 	add.w	r7, sl, r9
 8015b60:	42bb      	cmp	r3, r7
 8015b62:	b085      	sub	sp, #20
 8015b64:	bfb8      	it	lt
 8015b66:	3101      	addlt	r1, #1
 8015b68:	f7ff fed4 	bl	8015914 <_Balloc>
 8015b6c:	b930      	cbnz	r0, 8015b7c <__multiply+0x44>
 8015b6e:	4602      	mov	r2, r0
 8015b70:	4b42      	ldr	r3, [pc, #264]	; (8015c7c <__multiply+0x144>)
 8015b72:	4843      	ldr	r0, [pc, #268]	; (8015c80 <__multiply+0x148>)
 8015b74:	f240 115d 	movw	r1, #349	; 0x15d
 8015b78:	f000 fb14 	bl	80161a4 <__assert_func>
 8015b7c:	f100 0614 	add.w	r6, r0, #20
 8015b80:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8015b84:	4633      	mov	r3, r6
 8015b86:	2200      	movs	r2, #0
 8015b88:	4543      	cmp	r3, r8
 8015b8a:	d31e      	bcc.n	8015bca <__multiply+0x92>
 8015b8c:	f105 0c14 	add.w	ip, r5, #20
 8015b90:	f104 0314 	add.w	r3, r4, #20
 8015b94:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8015b98:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8015b9c:	9202      	str	r2, [sp, #8]
 8015b9e:	ebac 0205 	sub.w	r2, ip, r5
 8015ba2:	3a15      	subs	r2, #21
 8015ba4:	f022 0203 	bic.w	r2, r2, #3
 8015ba8:	3204      	adds	r2, #4
 8015baa:	f105 0115 	add.w	r1, r5, #21
 8015bae:	458c      	cmp	ip, r1
 8015bb0:	bf38      	it	cc
 8015bb2:	2204      	movcc	r2, #4
 8015bb4:	9201      	str	r2, [sp, #4]
 8015bb6:	9a02      	ldr	r2, [sp, #8]
 8015bb8:	9303      	str	r3, [sp, #12]
 8015bba:	429a      	cmp	r2, r3
 8015bbc:	d808      	bhi.n	8015bd0 <__multiply+0x98>
 8015bbe:	2f00      	cmp	r7, #0
 8015bc0:	dc55      	bgt.n	8015c6e <__multiply+0x136>
 8015bc2:	6107      	str	r7, [r0, #16]
 8015bc4:	b005      	add	sp, #20
 8015bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bca:	f843 2b04 	str.w	r2, [r3], #4
 8015bce:	e7db      	b.n	8015b88 <__multiply+0x50>
 8015bd0:	f8b3 a000 	ldrh.w	sl, [r3]
 8015bd4:	f1ba 0f00 	cmp.w	sl, #0
 8015bd8:	d020      	beq.n	8015c1c <__multiply+0xe4>
 8015bda:	f105 0e14 	add.w	lr, r5, #20
 8015bde:	46b1      	mov	r9, r6
 8015be0:	2200      	movs	r2, #0
 8015be2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8015be6:	f8d9 b000 	ldr.w	fp, [r9]
 8015bea:	b2a1      	uxth	r1, r4
 8015bec:	fa1f fb8b 	uxth.w	fp, fp
 8015bf0:	fb0a b101 	mla	r1, sl, r1, fp
 8015bf4:	4411      	add	r1, r2
 8015bf6:	f8d9 2000 	ldr.w	r2, [r9]
 8015bfa:	0c24      	lsrs	r4, r4, #16
 8015bfc:	0c12      	lsrs	r2, r2, #16
 8015bfe:	fb0a 2404 	mla	r4, sl, r4, r2
 8015c02:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8015c06:	b289      	uxth	r1, r1
 8015c08:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8015c0c:	45f4      	cmp	ip, lr
 8015c0e:	f849 1b04 	str.w	r1, [r9], #4
 8015c12:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8015c16:	d8e4      	bhi.n	8015be2 <__multiply+0xaa>
 8015c18:	9901      	ldr	r1, [sp, #4]
 8015c1a:	5072      	str	r2, [r6, r1]
 8015c1c:	9a03      	ldr	r2, [sp, #12]
 8015c1e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015c22:	3304      	adds	r3, #4
 8015c24:	f1b9 0f00 	cmp.w	r9, #0
 8015c28:	d01f      	beq.n	8015c6a <__multiply+0x132>
 8015c2a:	6834      	ldr	r4, [r6, #0]
 8015c2c:	f105 0114 	add.w	r1, r5, #20
 8015c30:	46b6      	mov	lr, r6
 8015c32:	f04f 0a00 	mov.w	sl, #0
 8015c36:	880a      	ldrh	r2, [r1, #0]
 8015c38:	f8be b002 	ldrh.w	fp, [lr, #2]
 8015c3c:	fb09 b202 	mla	r2, r9, r2, fp
 8015c40:	4492      	add	sl, r2
 8015c42:	b2a4      	uxth	r4, r4
 8015c44:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8015c48:	f84e 4b04 	str.w	r4, [lr], #4
 8015c4c:	f851 4b04 	ldr.w	r4, [r1], #4
 8015c50:	f8be 2000 	ldrh.w	r2, [lr]
 8015c54:	0c24      	lsrs	r4, r4, #16
 8015c56:	fb09 2404 	mla	r4, r9, r4, r2
 8015c5a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8015c5e:	458c      	cmp	ip, r1
 8015c60:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015c64:	d8e7      	bhi.n	8015c36 <__multiply+0xfe>
 8015c66:	9a01      	ldr	r2, [sp, #4]
 8015c68:	50b4      	str	r4, [r6, r2]
 8015c6a:	3604      	adds	r6, #4
 8015c6c:	e7a3      	b.n	8015bb6 <__multiply+0x7e>
 8015c6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d1a5      	bne.n	8015bc2 <__multiply+0x8a>
 8015c76:	3f01      	subs	r7, #1
 8015c78:	e7a1      	b.n	8015bbe <__multiply+0x86>
 8015c7a:	bf00      	nop
 8015c7c:	08018403 	.word	0x08018403
 8015c80:	08018414 	.word	0x08018414

08015c84 <__pow5mult>:
 8015c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015c88:	4615      	mov	r5, r2
 8015c8a:	f012 0203 	ands.w	r2, r2, #3
 8015c8e:	4606      	mov	r6, r0
 8015c90:	460f      	mov	r7, r1
 8015c92:	d007      	beq.n	8015ca4 <__pow5mult+0x20>
 8015c94:	4c25      	ldr	r4, [pc, #148]	; (8015d2c <__pow5mult+0xa8>)
 8015c96:	3a01      	subs	r2, #1
 8015c98:	2300      	movs	r3, #0
 8015c9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015c9e:	f7ff fe9b 	bl	80159d8 <__multadd>
 8015ca2:	4607      	mov	r7, r0
 8015ca4:	10ad      	asrs	r5, r5, #2
 8015ca6:	d03d      	beq.n	8015d24 <__pow5mult+0xa0>
 8015ca8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015caa:	b97c      	cbnz	r4, 8015ccc <__pow5mult+0x48>
 8015cac:	2010      	movs	r0, #16
 8015cae:	f7ff fe29 	bl	8015904 <malloc>
 8015cb2:	4602      	mov	r2, r0
 8015cb4:	6270      	str	r0, [r6, #36]	; 0x24
 8015cb6:	b928      	cbnz	r0, 8015cc4 <__pow5mult+0x40>
 8015cb8:	4b1d      	ldr	r3, [pc, #116]	; (8015d30 <__pow5mult+0xac>)
 8015cba:	481e      	ldr	r0, [pc, #120]	; (8015d34 <__pow5mult+0xb0>)
 8015cbc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015cc0:	f000 fa70 	bl	80161a4 <__assert_func>
 8015cc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015cc8:	6004      	str	r4, [r0, #0]
 8015cca:	60c4      	str	r4, [r0, #12]
 8015ccc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015cd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015cd4:	b94c      	cbnz	r4, 8015cea <__pow5mult+0x66>
 8015cd6:	f240 2171 	movw	r1, #625	; 0x271
 8015cda:	4630      	mov	r0, r6
 8015cdc:	f7ff ff16 	bl	8015b0c <__i2b>
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	f8c8 0008 	str.w	r0, [r8, #8]
 8015ce6:	4604      	mov	r4, r0
 8015ce8:	6003      	str	r3, [r0, #0]
 8015cea:	f04f 0900 	mov.w	r9, #0
 8015cee:	07eb      	lsls	r3, r5, #31
 8015cf0:	d50a      	bpl.n	8015d08 <__pow5mult+0x84>
 8015cf2:	4639      	mov	r1, r7
 8015cf4:	4622      	mov	r2, r4
 8015cf6:	4630      	mov	r0, r6
 8015cf8:	f7ff ff1e 	bl	8015b38 <__multiply>
 8015cfc:	4639      	mov	r1, r7
 8015cfe:	4680      	mov	r8, r0
 8015d00:	4630      	mov	r0, r6
 8015d02:	f7ff fe47 	bl	8015994 <_Bfree>
 8015d06:	4647      	mov	r7, r8
 8015d08:	106d      	asrs	r5, r5, #1
 8015d0a:	d00b      	beq.n	8015d24 <__pow5mult+0xa0>
 8015d0c:	6820      	ldr	r0, [r4, #0]
 8015d0e:	b938      	cbnz	r0, 8015d20 <__pow5mult+0x9c>
 8015d10:	4622      	mov	r2, r4
 8015d12:	4621      	mov	r1, r4
 8015d14:	4630      	mov	r0, r6
 8015d16:	f7ff ff0f 	bl	8015b38 <__multiply>
 8015d1a:	6020      	str	r0, [r4, #0]
 8015d1c:	f8c0 9000 	str.w	r9, [r0]
 8015d20:	4604      	mov	r4, r0
 8015d22:	e7e4      	b.n	8015cee <__pow5mult+0x6a>
 8015d24:	4638      	mov	r0, r7
 8015d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d2a:	bf00      	nop
 8015d2c:	08018568 	.word	0x08018568
 8015d30:	0801838d 	.word	0x0801838d
 8015d34:	08018414 	.word	0x08018414

08015d38 <__lshift>:
 8015d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d3c:	460c      	mov	r4, r1
 8015d3e:	6849      	ldr	r1, [r1, #4]
 8015d40:	6923      	ldr	r3, [r4, #16]
 8015d42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015d46:	68a3      	ldr	r3, [r4, #8]
 8015d48:	4607      	mov	r7, r0
 8015d4a:	4691      	mov	r9, r2
 8015d4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015d50:	f108 0601 	add.w	r6, r8, #1
 8015d54:	42b3      	cmp	r3, r6
 8015d56:	db0b      	blt.n	8015d70 <__lshift+0x38>
 8015d58:	4638      	mov	r0, r7
 8015d5a:	f7ff fddb 	bl	8015914 <_Balloc>
 8015d5e:	4605      	mov	r5, r0
 8015d60:	b948      	cbnz	r0, 8015d76 <__lshift+0x3e>
 8015d62:	4602      	mov	r2, r0
 8015d64:	4b28      	ldr	r3, [pc, #160]	; (8015e08 <__lshift+0xd0>)
 8015d66:	4829      	ldr	r0, [pc, #164]	; (8015e0c <__lshift+0xd4>)
 8015d68:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015d6c:	f000 fa1a 	bl	80161a4 <__assert_func>
 8015d70:	3101      	adds	r1, #1
 8015d72:	005b      	lsls	r3, r3, #1
 8015d74:	e7ee      	b.n	8015d54 <__lshift+0x1c>
 8015d76:	2300      	movs	r3, #0
 8015d78:	f100 0114 	add.w	r1, r0, #20
 8015d7c:	f100 0210 	add.w	r2, r0, #16
 8015d80:	4618      	mov	r0, r3
 8015d82:	4553      	cmp	r3, sl
 8015d84:	db33      	blt.n	8015dee <__lshift+0xb6>
 8015d86:	6920      	ldr	r0, [r4, #16]
 8015d88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015d8c:	f104 0314 	add.w	r3, r4, #20
 8015d90:	f019 091f 	ands.w	r9, r9, #31
 8015d94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015d98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015d9c:	d02b      	beq.n	8015df6 <__lshift+0xbe>
 8015d9e:	f1c9 0e20 	rsb	lr, r9, #32
 8015da2:	468a      	mov	sl, r1
 8015da4:	2200      	movs	r2, #0
 8015da6:	6818      	ldr	r0, [r3, #0]
 8015da8:	fa00 f009 	lsl.w	r0, r0, r9
 8015dac:	4302      	orrs	r2, r0
 8015dae:	f84a 2b04 	str.w	r2, [sl], #4
 8015db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8015db6:	459c      	cmp	ip, r3
 8015db8:	fa22 f20e 	lsr.w	r2, r2, lr
 8015dbc:	d8f3      	bhi.n	8015da6 <__lshift+0x6e>
 8015dbe:	ebac 0304 	sub.w	r3, ip, r4
 8015dc2:	3b15      	subs	r3, #21
 8015dc4:	f023 0303 	bic.w	r3, r3, #3
 8015dc8:	3304      	adds	r3, #4
 8015dca:	f104 0015 	add.w	r0, r4, #21
 8015dce:	4584      	cmp	ip, r0
 8015dd0:	bf38      	it	cc
 8015dd2:	2304      	movcc	r3, #4
 8015dd4:	50ca      	str	r2, [r1, r3]
 8015dd6:	b10a      	cbz	r2, 8015ddc <__lshift+0xa4>
 8015dd8:	f108 0602 	add.w	r6, r8, #2
 8015ddc:	3e01      	subs	r6, #1
 8015dde:	4638      	mov	r0, r7
 8015de0:	612e      	str	r6, [r5, #16]
 8015de2:	4621      	mov	r1, r4
 8015de4:	f7ff fdd6 	bl	8015994 <_Bfree>
 8015de8:	4628      	mov	r0, r5
 8015dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015dee:	f842 0f04 	str.w	r0, [r2, #4]!
 8015df2:	3301      	adds	r3, #1
 8015df4:	e7c5      	b.n	8015d82 <__lshift+0x4a>
 8015df6:	3904      	subs	r1, #4
 8015df8:	f853 2b04 	ldr.w	r2, [r3], #4
 8015dfc:	f841 2f04 	str.w	r2, [r1, #4]!
 8015e00:	459c      	cmp	ip, r3
 8015e02:	d8f9      	bhi.n	8015df8 <__lshift+0xc0>
 8015e04:	e7ea      	b.n	8015ddc <__lshift+0xa4>
 8015e06:	bf00      	nop
 8015e08:	08018403 	.word	0x08018403
 8015e0c:	08018414 	.word	0x08018414

08015e10 <__mcmp>:
 8015e10:	b530      	push	{r4, r5, lr}
 8015e12:	6902      	ldr	r2, [r0, #16]
 8015e14:	690c      	ldr	r4, [r1, #16]
 8015e16:	1b12      	subs	r2, r2, r4
 8015e18:	d10e      	bne.n	8015e38 <__mcmp+0x28>
 8015e1a:	f100 0314 	add.w	r3, r0, #20
 8015e1e:	3114      	adds	r1, #20
 8015e20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015e24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015e28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015e2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015e30:	42a5      	cmp	r5, r4
 8015e32:	d003      	beq.n	8015e3c <__mcmp+0x2c>
 8015e34:	d305      	bcc.n	8015e42 <__mcmp+0x32>
 8015e36:	2201      	movs	r2, #1
 8015e38:	4610      	mov	r0, r2
 8015e3a:	bd30      	pop	{r4, r5, pc}
 8015e3c:	4283      	cmp	r3, r0
 8015e3e:	d3f3      	bcc.n	8015e28 <__mcmp+0x18>
 8015e40:	e7fa      	b.n	8015e38 <__mcmp+0x28>
 8015e42:	f04f 32ff 	mov.w	r2, #4294967295
 8015e46:	e7f7      	b.n	8015e38 <__mcmp+0x28>

08015e48 <__mdiff>:
 8015e48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e4c:	460c      	mov	r4, r1
 8015e4e:	4606      	mov	r6, r0
 8015e50:	4611      	mov	r1, r2
 8015e52:	4620      	mov	r0, r4
 8015e54:	4617      	mov	r7, r2
 8015e56:	f7ff ffdb 	bl	8015e10 <__mcmp>
 8015e5a:	1e05      	subs	r5, r0, #0
 8015e5c:	d110      	bne.n	8015e80 <__mdiff+0x38>
 8015e5e:	4629      	mov	r1, r5
 8015e60:	4630      	mov	r0, r6
 8015e62:	f7ff fd57 	bl	8015914 <_Balloc>
 8015e66:	b930      	cbnz	r0, 8015e76 <__mdiff+0x2e>
 8015e68:	4b39      	ldr	r3, [pc, #228]	; (8015f50 <__mdiff+0x108>)
 8015e6a:	4602      	mov	r2, r0
 8015e6c:	f240 2132 	movw	r1, #562	; 0x232
 8015e70:	4838      	ldr	r0, [pc, #224]	; (8015f54 <__mdiff+0x10c>)
 8015e72:	f000 f997 	bl	80161a4 <__assert_func>
 8015e76:	2301      	movs	r3, #1
 8015e78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015e7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e80:	bfa4      	itt	ge
 8015e82:	463b      	movge	r3, r7
 8015e84:	4627      	movge	r7, r4
 8015e86:	4630      	mov	r0, r6
 8015e88:	6879      	ldr	r1, [r7, #4]
 8015e8a:	bfa6      	itte	ge
 8015e8c:	461c      	movge	r4, r3
 8015e8e:	2500      	movge	r5, #0
 8015e90:	2501      	movlt	r5, #1
 8015e92:	f7ff fd3f 	bl	8015914 <_Balloc>
 8015e96:	b920      	cbnz	r0, 8015ea2 <__mdiff+0x5a>
 8015e98:	4b2d      	ldr	r3, [pc, #180]	; (8015f50 <__mdiff+0x108>)
 8015e9a:	4602      	mov	r2, r0
 8015e9c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015ea0:	e7e6      	b.n	8015e70 <__mdiff+0x28>
 8015ea2:	693e      	ldr	r6, [r7, #16]
 8015ea4:	60c5      	str	r5, [r0, #12]
 8015ea6:	6925      	ldr	r5, [r4, #16]
 8015ea8:	f107 0114 	add.w	r1, r7, #20
 8015eac:	f104 0914 	add.w	r9, r4, #20
 8015eb0:	f100 0e14 	add.w	lr, r0, #20
 8015eb4:	f107 0210 	add.w	r2, r7, #16
 8015eb8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8015ebc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8015ec0:	46f2      	mov	sl, lr
 8015ec2:	2700      	movs	r7, #0
 8015ec4:	f859 3b04 	ldr.w	r3, [r9], #4
 8015ec8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015ecc:	fa1f f883 	uxth.w	r8, r3
 8015ed0:	fa17 f78b 	uxtah	r7, r7, fp
 8015ed4:	0c1b      	lsrs	r3, r3, #16
 8015ed6:	eba7 0808 	sub.w	r8, r7, r8
 8015eda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015ede:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015ee2:	fa1f f888 	uxth.w	r8, r8
 8015ee6:	141f      	asrs	r7, r3, #16
 8015ee8:	454d      	cmp	r5, r9
 8015eea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015eee:	f84a 3b04 	str.w	r3, [sl], #4
 8015ef2:	d8e7      	bhi.n	8015ec4 <__mdiff+0x7c>
 8015ef4:	1b2b      	subs	r3, r5, r4
 8015ef6:	3b15      	subs	r3, #21
 8015ef8:	f023 0303 	bic.w	r3, r3, #3
 8015efc:	3304      	adds	r3, #4
 8015efe:	3415      	adds	r4, #21
 8015f00:	42a5      	cmp	r5, r4
 8015f02:	bf38      	it	cc
 8015f04:	2304      	movcc	r3, #4
 8015f06:	4419      	add	r1, r3
 8015f08:	4473      	add	r3, lr
 8015f0a:	469e      	mov	lr, r3
 8015f0c:	460d      	mov	r5, r1
 8015f0e:	4565      	cmp	r5, ip
 8015f10:	d30e      	bcc.n	8015f30 <__mdiff+0xe8>
 8015f12:	f10c 0203 	add.w	r2, ip, #3
 8015f16:	1a52      	subs	r2, r2, r1
 8015f18:	f022 0203 	bic.w	r2, r2, #3
 8015f1c:	3903      	subs	r1, #3
 8015f1e:	458c      	cmp	ip, r1
 8015f20:	bf38      	it	cc
 8015f22:	2200      	movcc	r2, #0
 8015f24:	441a      	add	r2, r3
 8015f26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015f2a:	b17b      	cbz	r3, 8015f4c <__mdiff+0x104>
 8015f2c:	6106      	str	r6, [r0, #16]
 8015f2e:	e7a5      	b.n	8015e7c <__mdiff+0x34>
 8015f30:	f855 8b04 	ldr.w	r8, [r5], #4
 8015f34:	fa17 f488 	uxtah	r4, r7, r8
 8015f38:	1422      	asrs	r2, r4, #16
 8015f3a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8015f3e:	b2a4      	uxth	r4, r4
 8015f40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8015f44:	f84e 4b04 	str.w	r4, [lr], #4
 8015f48:	1417      	asrs	r7, r2, #16
 8015f4a:	e7e0      	b.n	8015f0e <__mdiff+0xc6>
 8015f4c:	3e01      	subs	r6, #1
 8015f4e:	e7ea      	b.n	8015f26 <__mdiff+0xde>
 8015f50:	08018403 	.word	0x08018403
 8015f54:	08018414 	.word	0x08018414

08015f58 <__d2b>:
 8015f58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015f5c:	4689      	mov	r9, r1
 8015f5e:	2101      	movs	r1, #1
 8015f60:	ec57 6b10 	vmov	r6, r7, d0
 8015f64:	4690      	mov	r8, r2
 8015f66:	f7ff fcd5 	bl	8015914 <_Balloc>
 8015f6a:	4604      	mov	r4, r0
 8015f6c:	b930      	cbnz	r0, 8015f7c <__d2b+0x24>
 8015f6e:	4602      	mov	r2, r0
 8015f70:	4b25      	ldr	r3, [pc, #148]	; (8016008 <__d2b+0xb0>)
 8015f72:	4826      	ldr	r0, [pc, #152]	; (801600c <__d2b+0xb4>)
 8015f74:	f240 310a 	movw	r1, #778	; 0x30a
 8015f78:	f000 f914 	bl	80161a4 <__assert_func>
 8015f7c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015f80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015f84:	bb35      	cbnz	r5, 8015fd4 <__d2b+0x7c>
 8015f86:	2e00      	cmp	r6, #0
 8015f88:	9301      	str	r3, [sp, #4]
 8015f8a:	d028      	beq.n	8015fde <__d2b+0x86>
 8015f8c:	4668      	mov	r0, sp
 8015f8e:	9600      	str	r6, [sp, #0]
 8015f90:	f7ff fd8c 	bl	8015aac <__lo0bits>
 8015f94:	9900      	ldr	r1, [sp, #0]
 8015f96:	b300      	cbz	r0, 8015fda <__d2b+0x82>
 8015f98:	9a01      	ldr	r2, [sp, #4]
 8015f9a:	f1c0 0320 	rsb	r3, r0, #32
 8015f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8015fa2:	430b      	orrs	r3, r1
 8015fa4:	40c2      	lsrs	r2, r0
 8015fa6:	6163      	str	r3, [r4, #20]
 8015fa8:	9201      	str	r2, [sp, #4]
 8015faa:	9b01      	ldr	r3, [sp, #4]
 8015fac:	61a3      	str	r3, [r4, #24]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	bf14      	ite	ne
 8015fb2:	2202      	movne	r2, #2
 8015fb4:	2201      	moveq	r2, #1
 8015fb6:	6122      	str	r2, [r4, #16]
 8015fb8:	b1d5      	cbz	r5, 8015ff0 <__d2b+0x98>
 8015fba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015fbe:	4405      	add	r5, r0
 8015fc0:	f8c9 5000 	str.w	r5, [r9]
 8015fc4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015fc8:	f8c8 0000 	str.w	r0, [r8]
 8015fcc:	4620      	mov	r0, r4
 8015fce:	b003      	add	sp, #12
 8015fd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015fd8:	e7d5      	b.n	8015f86 <__d2b+0x2e>
 8015fda:	6161      	str	r1, [r4, #20]
 8015fdc:	e7e5      	b.n	8015faa <__d2b+0x52>
 8015fde:	a801      	add	r0, sp, #4
 8015fe0:	f7ff fd64 	bl	8015aac <__lo0bits>
 8015fe4:	9b01      	ldr	r3, [sp, #4]
 8015fe6:	6163      	str	r3, [r4, #20]
 8015fe8:	2201      	movs	r2, #1
 8015fea:	6122      	str	r2, [r4, #16]
 8015fec:	3020      	adds	r0, #32
 8015fee:	e7e3      	b.n	8015fb8 <__d2b+0x60>
 8015ff0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015ff4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015ff8:	f8c9 0000 	str.w	r0, [r9]
 8015ffc:	6918      	ldr	r0, [r3, #16]
 8015ffe:	f7ff fd35 	bl	8015a6c <__hi0bits>
 8016002:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016006:	e7df      	b.n	8015fc8 <__d2b+0x70>
 8016008:	08018403 	.word	0x08018403
 801600c:	08018414 	.word	0x08018414

08016010 <_calloc_r>:
 8016010:	b513      	push	{r0, r1, r4, lr}
 8016012:	434a      	muls	r2, r1
 8016014:	4611      	mov	r1, r2
 8016016:	9201      	str	r2, [sp, #4]
 8016018:	f000 f85a 	bl	80160d0 <_malloc_r>
 801601c:	4604      	mov	r4, r0
 801601e:	b118      	cbz	r0, 8016028 <_calloc_r+0x18>
 8016020:	9a01      	ldr	r2, [sp, #4]
 8016022:	2100      	movs	r1, #0
 8016024:	f7fe fa0e 	bl	8014444 <memset>
 8016028:	4620      	mov	r0, r4
 801602a:	b002      	add	sp, #8
 801602c:	bd10      	pop	{r4, pc}
	...

08016030 <_free_r>:
 8016030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016032:	2900      	cmp	r1, #0
 8016034:	d048      	beq.n	80160c8 <_free_r+0x98>
 8016036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801603a:	9001      	str	r0, [sp, #4]
 801603c:	2b00      	cmp	r3, #0
 801603e:	f1a1 0404 	sub.w	r4, r1, #4
 8016042:	bfb8      	it	lt
 8016044:	18e4      	addlt	r4, r4, r3
 8016046:	f000 f8ef 	bl	8016228 <__malloc_lock>
 801604a:	4a20      	ldr	r2, [pc, #128]	; (80160cc <_free_r+0x9c>)
 801604c:	9801      	ldr	r0, [sp, #4]
 801604e:	6813      	ldr	r3, [r2, #0]
 8016050:	4615      	mov	r5, r2
 8016052:	b933      	cbnz	r3, 8016062 <_free_r+0x32>
 8016054:	6063      	str	r3, [r4, #4]
 8016056:	6014      	str	r4, [r2, #0]
 8016058:	b003      	add	sp, #12
 801605a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801605e:	f000 b8e9 	b.w	8016234 <__malloc_unlock>
 8016062:	42a3      	cmp	r3, r4
 8016064:	d90b      	bls.n	801607e <_free_r+0x4e>
 8016066:	6821      	ldr	r1, [r4, #0]
 8016068:	1862      	adds	r2, r4, r1
 801606a:	4293      	cmp	r3, r2
 801606c:	bf04      	itt	eq
 801606e:	681a      	ldreq	r2, [r3, #0]
 8016070:	685b      	ldreq	r3, [r3, #4]
 8016072:	6063      	str	r3, [r4, #4]
 8016074:	bf04      	itt	eq
 8016076:	1852      	addeq	r2, r2, r1
 8016078:	6022      	streq	r2, [r4, #0]
 801607a:	602c      	str	r4, [r5, #0]
 801607c:	e7ec      	b.n	8016058 <_free_r+0x28>
 801607e:	461a      	mov	r2, r3
 8016080:	685b      	ldr	r3, [r3, #4]
 8016082:	b10b      	cbz	r3, 8016088 <_free_r+0x58>
 8016084:	42a3      	cmp	r3, r4
 8016086:	d9fa      	bls.n	801607e <_free_r+0x4e>
 8016088:	6811      	ldr	r1, [r2, #0]
 801608a:	1855      	adds	r5, r2, r1
 801608c:	42a5      	cmp	r5, r4
 801608e:	d10b      	bne.n	80160a8 <_free_r+0x78>
 8016090:	6824      	ldr	r4, [r4, #0]
 8016092:	4421      	add	r1, r4
 8016094:	1854      	adds	r4, r2, r1
 8016096:	42a3      	cmp	r3, r4
 8016098:	6011      	str	r1, [r2, #0]
 801609a:	d1dd      	bne.n	8016058 <_free_r+0x28>
 801609c:	681c      	ldr	r4, [r3, #0]
 801609e:	685b      	ldr	r3, [r3, #4]
 80160a0:	6053      	str	r3, [r2, #4]
 80160a2:	4421      	add	r1, r4
 80160a4:	6011      	str	r1, [r2, #0]
 80160a6:	e7d7      	b.n	8016058 <_free_r+0x28>
 80160a8:	d902      	bls.n	80160b0 <_free_r+0x80>
 80160aa:	230c      	movs	r3, #12
 80160ac:	6003      	str	r3, [r0, #0]
 80160ae:	e7d3      	b.n	8016058 <_free_r+0x28>
 80160b0:	6825      	ldr	r5, [r4, #0]
 80160b2:	1961      	adds	r1, r4, r5
 80160b4:	428b      	cmp	r3, r1
 80160b6:	bf04      	itt	eq
 80160b8:	6819      	ldreq	r1, [r3, #0]
 80160ba:	685b      	ldreq	r3, [r3, #4]
 80160bc:	6063      	str	r3, [r4, #4]
 80160be:	bf04      	itt	eq
 80160c0:	1949      	addeq	r1, r1, r5
 80160c2:	6021      	streq	r1, [r4, #0]
 80160c4:	6054      	str	r4, [r2, #4]
 80160c6:	e7c7      	b.n	8016058 <_free_r+0x28>
 80160c8:	b003      	add	sp, #12
 80160ca:	bd30      	pop	{r4, r5, pc}
 80160cc:	240002fc 	.word	0x240002fc

080160d0 <_malloc_r>:
 80160d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160d2:	1ccd      	adds	r5, r1, #3
 80160d4:	f025 0503 	bic.w	r5, r5, #3
 80160d8:	3508      	adds	r5, #8
 80160da:	2d0c      	cmp	r5, #12
 80160dc:	bf38      	it	cc
 80160de:	250c      	movcc	r5, #12
 80160e0:	2d00      	cmp	r5, #0
 80160e2:	4606      	mov	r6, r0
 80160e4:	db01      	blt.n	80160ea <_malloc_r+0x1a>
 80160e6:	42a9      	cmp	r1, r5
 80160e8:	d903      	bls.n	80160f2 <_malloc_r+0x22>
 80160ea:	230c      	movs	r3, #12
 80160ec:	6033      	str	r3, [r6, #0]
 80160ee:	2000      	movs	r0, #0
 80160f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160f2:	f000 f899 	bl	8016228 <__malloc_lock>
 80160f6:	4921      	ldr	r1, [pc, #132]	; (801617c <_malloc_r+0xac>)
 80160f8:	680a      	ldr	r2, [r1, #0]
 80160fa:	4614      	mov	r4, r2
 80160fc:	b99c      	cbnz	r4, 8016126 <_malloc_r+0x56>
 80160fe:	4f20      	ldr	r7, [pc, #128]	; (8016180 <_malloc_r+0xb0>)
 8016100:	683b      	ldr	r3, [r7, #0]
 8016102:	b923      	cbnz	r3, 801610e <_malloc_r+0x3e>
 8016104:	4621      	mov	r1, r4
 8016106:	4630      	mov	r0, r6
 8016108:	f000 f83c 	bl	8016184 <_sbrk_r>
 801610c:	6038      	str	r0, [r7, #0]
 801610e:	4629      	mov	r1, r5
 8016110:	4630      	mov	r0, r6
 8016112:	f000 f837 	bl	8016184 <_sbrk_r>
 8016116:	1c43      	adds	r3, r0, #1
 8016118:	d123      	bne.n	8016162 <_malloc_r+0x92>
 801611a:	230c      	movs	r3, #12
 801611c:	6033      	str	r3, [r6, #0]
 801611e:	4630      	mov	r0, r6
 8016120:	f000 f888 	bl	8016234 <__malloc_unlock>
 8016124:	e7e3      	b.n	80160ee <_malloc_r+0x1e>
 8016126:	6823      	ldr	r3, [r4, #0]
 8016128:	1b5b      	subs	r3, r3, r5
 801612a:	d417      	bmi.n	801615c <_malloc_r+0x8c>
 801612c:	2b0b      	cmp	r3, #11
 801612e:	d903      	bls.n	8016138 <_malloc_r+0x68>
 8016130:	6023      	str	r3, [r4, #0]
 8016132:	441c      	add	r4, r3
 8016134:	6025      	str	r5, [r4, #0]
 8016136:	e004      	b.n	8016142 <_malloc_r+0x72>
 8016138:	6863      	ldr	r3, [r4, #4]
 801613a:	42a2      	cmp	r2, r4
 801613c:	bf0c      	ite	eq
 801613e:	600b      	streq	r3, [r1, #0]
 8016140:	6053      	strne	r3, [r2, #4]
 8016142:	4630      	mov	r0, r6
 8016144:	f000 f876 	bl	8016234 <__malloc_unlock>
 8016148:	f104 000b 	add.w	r0, r4, #11
 801614c:	1d23      	adds	r3, r4, #4
 801614e:	f020 0007 	bic.w	r0, r0, #7
 8016152:	1ac2      	subs	r2, r0, r3
 8016154:	d0cc      	beq.n	80160f0 <_malloc_r+0x20>
 8016156:	1a1b      	subs	r3, r3, r0
 8016158:	50a3      	str	r3, [r4, r2]
 801615a:	e7c9      	b.n	80160f0 <_malloc_r+0x20>
 801615c:	4622      	mov	r2, r4
 801615e:	6864      	ldr	r4, [r4, #4]
 8016160:	e7cc      	b.n	80160fc <_malloc_r+0x2c>
 8016162:	1cc4      	adds	r4, r0, #3
 8016164:	f024 0403 	bic.w	r4, r4, #3
 8016168:	42a0      	cmp	r0, r4
 801616a:	d0e3      	beq.n	8016134 <_malloc_r+0x64>
 801616c:	1a21      	subs	r1, r4, r0
 801616e:	4630      	mov	r0, r6
 8016170:	f000 f808 	bl	8016184 <_sbrk_r>
 8016174:	3001      	adds	r0, #1
 8016176:	d1dd      	bne.n	8016134 <_malloc_r+0x64>
 8016178:	e7cf      	b.n	801611a <_malloc_r+0x4a>
 801617a:	bf00      	nop
 801617c:	240002fc 	.word	0x240002fc
 8016180:	24000300 	.word	0x24000300

08016184 <_sbrk_r>:
 8016184:	b538      	push	{r3, r4, r5, lr}
 8016186:	4d06      	ldr	r5, [pc, #24]	; (80161a0 <_sbrk_r+0x1c>)
 8016188:	2300      	movs	r3, #0
 801618a:	4604      	mov	r4, r0
 801618c:	4608      	mov	r0, r1
 801618e:	602b      	str	r3, [r5, #0]
 8016190:	f7f2 fd8e 	bl	8008cb0 <_sbrk>
 8016194:	1c43      	adds	r3, r0, #1
 8016196:	d102      	bne.n	801619e <_sbrk_r+0x1a>
 8016198:	682b      	ldr	r3, [r5, #0]
 801619a:	b103      	cbz	r3, 801619e <_sbrk_r+0x1a>
 801619c:	6023      	str	r3, [r4, #0]
 801619e:	bd38      	pop	{r3, r4, r5, pc}
 80161a0:	240013a4 	.word	0x240013a4

080161a4 <__assert_func>:
 80161a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80161a6:	4614      	mov	r4, r2
 80161a8:	461a      	mov	r2, r3
 80161aa:	4b09      	ldr	r3, [pc, #36]	; (80161d0 <__assert_func+0x2c>)
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	4605      	mov	r5, r0
 80161b0:	68d8      	ldr	r0, [r3, #12]
 80161b2:	b14c      	cbz	r4, 80161c8 <__assert_func+0x24>
 80161b4:	4b07      	ldr	r3, [pc, #28]	; (80161d4 <__assert_func+0x30>)
 80161b6:	9100      	str	r1, [sp, #0]
 80161b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80161bc:	4906      	ldr	r1, [pc, #24]	; (80161d8 <__assert_func+0x34>)
 80161be:	462b      	mov	r3, r5
 80161c0:	f000 f80e 	bl	80161e0 <fiprintf>
 80161c4:	f000 fa64 	bl	8016690 <abort>
 80161c8:	4b04      	ldr	r3, [pc, #16]	; (80161dc <__assert_func+0x38>)
 80161ca:	461c      	mov	r4, r3
 80161cc:	e7f3      	b.n	80161b6 <__assert_func+0x12>
 80161ce:	bf00      	nop
 80161d0:	24000010 	.word	0x24000010
 80161d4:	08018574 	.word	0x08018574
 80161d8:	08018581 	.word	0x08018581
 80161dc:	080185af 	.word	0x080185af

080161e0 <fiprintf>:
 80161e0:	b40e      	push	{r1, r2, r3}
 80161e2:	b503      	push	{r0, r1, lr}
 80161e4:	4601      	mov	r1, r0
 80161e6:	ab03      	add	r3, sp, #12
 80161e8:	4805      	ldr	r0, [pc, #20]	; (8016200 <fiprintf+0x20>)
 80161ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80161ee:	6800      	ldr	r0, [r0, #0]
 80161f0:	9301      	str	r3, [sp, #4]
 80161f2:	f000 f84f 	bl	8016294 <_vfiprintf_r>
 80161f6:	b002      	add	sp, #8
 80161f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80161fc:	b003      	add	sp, #12
 80161fe:	4770      	bx	lr
 8016200:	24000010 	.word	0x24000010

08016204 <__ascii_mbtowc>:
 8016204:	b082      	sub	sp, #8
 8016206:	b901      	cbnz	r1, 801620a <__ascii_mbtowc+0x6>
 8016208:	a901      	add	r1, sp, #4
 801620a:	b142      	cbz	r2, 801621e <__ascii_mbtowc+0x1a>
 801620c:	b14b      	cbz	r3, 8016222 <__ascii_mbtowc+0x1e>
 801620e:	7813      	ldrb	r3, [r2, #0]
 8016210:	600b      	str	r3, [r1, #0]
 8016212:	7812      	ldrb	r2, [r2, #0]
 8016214:	1e10      	subs	r0, r2, #0
 8016216:	bf18      	it	ne
 8016218:	2001      	movne	r0, #1
 801621a:	b002      	add	sp, #8
 801621c:	4770      	bx	lr
 801621e:	4610      	mov	r0, r2
 8016220:	e7fb      	b.n	801621a <__ascii_mbtowc+0x16>
 8016222:	f06f 0001 	mvn.w	r0, #1
 8016226:	e7f8      	b.n	801621a <__ascii_mbtowc+0x16>

08016228 <__malloc_lock>:
 8016228:	4801      	ldr	r0, [pc, #4]	; (8016230 <__malloc_lock+0x8>)
 801622a:	f000 bbf1 	b.w	8016a10 <__retarget_lock_acquire_recursive>
 801622e:	bf00      	nop
 8016230:	240013ac 	.word	0x240013ac

08016234 <__malloc_unlock>:
 8016234:	4801      	ldr	r0, [pc, #4]	; (801623c <__malloc_unlock+0x8>)
 8016236:	f000 bbec 	b.w	8016a12 <__retarget_lock_release_recursive>
 801623a:	bf00      	nop
 801623c:	240013ac 	.word	0x240013ac

08016240 <__sfputc_r>:
 8016240:	6893      	ldr	r3, [r2, #8]
 8016242:	3b01      	subs	r3, #1
 8016244:	2b00      	cmp	r3, #0
 8016246:	b410      	push	{r4}
 8016248:	6093      	str	r3, [r2, #8]
 801624a:	da08      	bge.n	801625e <__sfputc_r+0x1e>
 801624c:	6994      	ldr	r4, [r2, #24]
 801624e:	42a3      	cmp	r3, r4
 8016250:	db01      	blt.n	8016256 <__sfputc_r+0x16>
 8016252:	290a      	cmp	r1, #10
 8016254:	d103      	bne.n	801625e <__sfputc_r+0x1e>
 8016256:	f85d 4b04 	ldr.w	r4, [sp], #4
 801625a:	f000 b94b 	b.w	80164f4 <__swbuf_r>
 801625e:	6813      	ldr	r3, [r2, #0]
 8016260:	1c58      	adds	r0, r3, #1
 8016262:	6010      	str	r0, [r2, #0]
 8016264:	7019      	strb	r1, [r3, #0]
 8016266:	4608      	mov	r0, r1
 8016268:	f85d 4b04 	ldr.w	r4, [sp], #4
 801626c:	4770      	bx	lr

0801626e <__sfputs_r>:
 801626e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016270:	4606      	mov	r6, r0
 8016272:	460f      	mov	r7, r1
 8016274:	4614      	mov	r4, r2
 8016276:	18d5      	adds	r5, r2, r3
 8016278:	42ac      	cmp	r4, r5
 801627a:	d101      	bne.n	8016280 <__sfputs_r+0x12>
 801627c:	2000      	movs	r0, #0
 801627e:	e007      	b.n	8016290 <__sfputs_r+0x22>
 8016280:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016284:	463a      	mov	r2, r7
 8016286:	4630      	mov	r0, r6
 8016288:	f7ff ffda 	bl	8016240 <__sfputc_r>
 801628c:	1c43      	adds	r3, r0, #1
 801628e:	d1f3      	bne.n	8016278 <__sfputs_r+0xa>
 8016290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016294 <_vfiprintf_r>:
 8016294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016298:	460d      	mov	r5, r1
 801629a:	b09d      	sub	sp, #116	; 0x74
 801629c:	4614      	mov	r4, r2
 801629e:	4698      	mov	r8, r3
 80162a0:	4606      	mov	r6, r0
 80162a2:	b118      	cbz	r0, 80162ac <_vfiprintf_r+0x18>
 80162a4:	6983      	ldr	r3, [r0, #24]
 80162a6:	b90b      	cbnz	r3, 80162ac <_vfiprintf_r+0x18>
 80162a8:	f000 fb14 	bl	80168d4 <__sinit>
 80162ac:	4b89      	ldr	r3, [pc, #548]	; (80164d4 <_vfiprintf_r+0x240>)
 80162ae:	429d      	cmp	r5, r3
 80162b0:	d11b      	bne.n	80162ea <_vfiprintf_r+0x56>
 80162b2:	6875      	ldr	r5, [r6, #4]
 80162b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80162b6:	07d9      	lsls	r1, r3, #31
 80162b8:	d405      	bmi.n	80162c6 <_vfiprintf_r+0x32>
 80162ba:	89ab      	ldrh	r3, [r5, #12]
 80162bc:	059a      	lsls	r2, r3, #22
 80162be:	d402      	bmi.n	80162c6 <_vfiprintf_r+0x32>
 80162c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80162c2:	f000 fba5 	bl	8016a10 <__retarget_lock_acquire_recursive>
 80162c6:	89ab      	ldrh	r3, [r5, #12]
 80162c8:	071b      	lsls	r3, r3, #28
 80162ca:	d501      	bpl.n	80162d0 <_vfiprintf_r+0x3c>
 80162cc:	692b      	ldr	r3, [r5, #16]
 80162ce:	b9eb      	cbnz	r3, 801630c <_vfiprintf_r+0x78>
 80162d0:	4629      	mov	r1, r5
 80162d2:	4630      	mov	r0, r6
 80162d4:	f000 f96e 	bl	80165b4 <__swsetup_r>
 80162d8:	b1c0      	cbz	r0, 801630c <_vfiprintf_r+0x78>
 80162da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80162dc:	07dc      	lsls	r4, r3, #31
 80162de:	d50e      	bpl.n	80162fe <_vfiprintf_r+0x6a>
 80162e0:	f04f 30ff 	mov.w	r0, #4294967295
 80162e4:	b01d      	add	sp, #116	; 0x74
 80162e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162ea:	4b7b      	ldr	r3, [pc, #492]	; (80164d8 <_vfiprintf_r+0x244>)
 80162ec:	429d      	cmp	r5, r3
 80162ee:	d101      	bne.n	80162f4 <_vfiprintf_r+0x60>
 80162f0:	68b5      	ldr	r5, [r6, #8]
 80162f2:	e7df      	b.n	80162b4 <_vfiprintf_r+0x20>
 80162f4:	4b79      	ldr	r3, [pc, #484]	; (80164dc <_vfiprintf_r+0x248>)
 80162f6:	429d      	cmp	r5, r3
 80162f8:	bf08      	it	eq
 80162fa:	68f5      	ldreq	r5, [r6, #12]
 80162fc:	e7da      	b.n	80162b4 <_vfiprintf_r+0x20>
 80162fe:	89ab      	ldrh	r3, [r5, #12]
 8016300:	0598      	lsls	r0, r3, #22
 8016302:	d4ed      	bmi.n	80162e0 <_vfiprintf_r+0x4c>
 8016304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016306:	f000 fb84 	bl	8016a12 <__retarget_lock_release_recursive>
 801630a:	e7e9      	b.n	80162e0 <_vfiprintf_r+0x4c>
 801630c:	2300      	movs	r3, #0
 801630e:	9309      	str	r3, [sp, #36]	; 0x24
 8016310:	2320      	movs	r3, #32
 8016312:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016316:	f8cd 800c 	str.w	r8, [sp, #12]
 801631a:	2330      	movs	r3, #48	; 0x30
 801631c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80164e0 <_vfiprintf_r+0x24c>
 8016320:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016324:	f04f 0901 	mov.w	r9, #1
 8016328:	4623      	mov	r3, r4
 801632a:	469a      	mov	sl, r3
 801632c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016330:	b10a      	cbz	r2, 8016336 <_vfiprintf_r+0xa2>
 8016332:	2a25      	cmp	r2, #37	; 0x25
 8016334:	d1f9      	bne.n	801632a <_vfiprintf_r+0x96>
 8016336:	ebba 0b04 	subs.w	fp, sl, r4
 801633a:	d00b      	beq.n	8016354 <_vfiprintf_r+0xc0>
 801633c:	465b      	mov	r3, fp
 801633e:	4622      	mov	r2, r4
 8016340:	4629      	mov	r1, r5
 8016342:	4630      	mov	r0, r6
 8016344:	f7ff ff93 	bl	801626e <__sfputs_r>
 8016348:	3001      	adds	r0, #1
 801634a:	f000 80aa 	beq.w	80164a2 <_vfiprintf_r+0x20e>
 801634e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016350:	445a      	add	r2, fp
 8016352:	9209      	str	r2, [sp, #36]	; 0x24
 8016354:	f89a 3000 	ldrb.w	r3, [sl]
 8016358:	2b00      	cmp	r3, #0
 801635a:	f000 80a2 	beq.w	80164a2 <_vfiprintf_r+0x20e>
 801635e:	2300      	movs	r3, #0
 8016360:	f04f 32ff 	mov.w	r2, #4294967295
 8016364:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016368:	f10a 0a01 	add.w	sl, sl, #1
 801636c:	9304      	str	r3, [sp, #16]
 801636e:	9307      	str	r3, [sp, #28]
 8016370:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016374:	931a      	str	r3, [sp, #104]	; 0x68
 8016376:	4654      	mov	r4, sl
 8016378:	2205      	movs	r2, #5
 801637a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801637e:	4858      	ldr	r0, [pc, #352]	; (80164e0 <_vfiprintf_r+0x24c>)
 8016380:	f7e9 ffce 	bl	8000320 <memchr>
 8016384:	9a04      	ldr	r2, [sp, #16]
 8016386:	b9d8      	cbnz	r0, 80163c0 <_vfiprintf_r+0x12c>
 8016388:	06d1      	lsls	r1, r2, #27
 801638a:	bf44      	itt	mi
 801638c:	2320      	movmi	r3, #32
 801638e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016392:	0713      	lsls	r3, r2, #28
 8016394:	bf44      	itt	mi
 8016396:	232b      	movmi	r3, #43	; 0x2b
 8016398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801639c:	f89a 3000 	ldrb.w	r3, [sl]
 80163a0:	2b2a      	cmp	r3, #42	; 0x2a
 80163a2:	d015      	beq.n	80163d0 <_vfiprintf_r+0x13c>
 80163a4:	9a07      	ldr	r2, [sp, #28]
 80163a6:	4654      	mov	r4, sl
 80163a8:	2000      	movs	r0, #0
 80163aa:	f04f 0c0a 	mov.w	ip, #10
 80163ae:	4621      	mov	r1, r4
 80163b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80163b4:	3b30      	subs	r3, #48	; 0x30
 80163b6:	2b09      	cmp	r3, #9
 80163b8:	d94e      	bls.n	8016458 <_vfiprintf_r+0x1c4>
 80163ba:	b1b0      	cbz	r0, 80163ea <_vfiprintf_r+0x156>
 80163bc:	9207      	str	r2, [sp, #28]
 80163be:	e014      	b.n	80163ea <_vfiprintf_r+0x156>
 80163c0:	eba0 0308 	sub.w	r3, r0, r8
 80163c4:	fa09 f303 	lsl.w	r3, r9, r3
 80163c8:	4313      	orrs	r3, r2
 80163ca:	9304      	str	r3, [sp, #16]
 80163cc:	46a2      	mov	sl, r4
 80163ce:	e7d2      	b.n	8016376 <_vfiprintf_r+0xe2>
 80163d0:	9b03      	ldr	r3, [sp, #12]
 80163d2:	1d19      	adds	r1, r3, #4
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	9103      	str	r1, [sp, #12]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	bfbb      	ittet	lt
 80163dc:	425b      	neglt	r3, r3
 80163de:	f042 0202 	orrlt.w	r2, r2, #2
 80163e2:	9307      	strge	r3, [sp, #28]
 80163e4:	9307      	strlt	r3, [sp, #28]
 80163e6:	bfb8      	it	lt
 80163e8:	9204      	strlt	r2, [sp, #16]
 80163ea:	7823      	ldrb	r3, [r4, #0]
 80163ec:	2b2e      	cmp	r3, #46	; 0x2e
 80163ee:	d10c      	bne.n	801640a <_vfiprintf_r+0x176>
 80163f0:	7863      	ldrb	r3, [r4, #1]
 80163f2:	2b2a      	cmp	r3, #42	; 0x2a
 80163f4:	d135      	bne.n	8016462 <_vfiprintf_r+0x1ce>
 80163f6:	9b03      	ldr	r3, [sp, #12]
 80163f8:	1d1a      	adds	r2, r3, #4
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	9203      	str	r2, [sp, #12]
 80163fe:	2b00      	cmp	r3, #0
 8016400:	bfb8      	it	lt
 8016402:	f04f 33ff 	movlt.w	r3, #4294967295
 8016406:	3402      	adds	r4, #2
 8016408:	9305      	str	r3, [sp, #20]
 801640a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80164f0 <_vfiprintf_r+0x25c>
 801640e:	7821      	ldrb	r1, [r4, #0]
 8016410:	2203      	movs	r2, #3
 8016412:	4650      	mov	r0, sl
 8016414:	f7e9 ff84 	bl	8000320 <memchr>
 8016418:	b140      	cbz	r0, 801642c <_vfiprintf_r+0x198>
 801641a:	2340      	movs	r3, #64	; 0x40
 801641c:	eba0 000a 	sub.w	r0, r0, sl
 8016420:	fa03 f000 	lsl.w	r0, r3, r0
 8016424:	9b04      	ldr	r3, [sp, #16]
 8016426:	4303      	orrs	r3, r0
 8016428:	3401      	adds	r4, #1
 801642a:	9304      	str	r3, [sp, #16]
 801642c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016430:	482c      	ldr	r0, [pc, #176]	; (80164e4 <_vfiprintf_r+0x250>)
 8016432:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016436:	2206      	movs	r2, #6
 8016438:	f7e9 ff72 	bl	8000320 <memchr>
 801643c:	2800      	cmp	r0, #0
 801643e:	d03f      	beq.n	80164c0 <_vfiprintf_r+0x22c>
 8016440:	4b29      	ldr	r3, [pc, #164]	; (80164e8 <_vfiprintf_r+0x254>)
 8016442:	bb1b      	cbnz	r3, 801648c <_vfiprintf_r+0x1f8>
 8016444:	9b03      	ldr	r3, [sp, #12]
 8016446:	3307      	adds	r3, #7
 8016448:	f023 0307 	bic.w	r3, r3, #7
 801644c:	3308      	adds	r3, #8
 801644e:	9303      	str	r3, [sp, #12]
 8016450:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016452:	443b      	add	r3, r7
 8016454:	9309      	str	r3, [sp, #36]	; 0x24
 8016456:	e767      	b.n	8016328 <_vfiprintf_r+0x94>
 8016458:	fb0c 3202 	mla	r2, ip, r2, r3
 801645c:	460c      	mov	r4, r1
 801645e:	2001      	movs	r0, #1
 8016460:	e7a5      	b.n	80163ae <_vfiprintf_r+0x11a>
 8016462:	2300      	movs	r3, #0
 8016464:	3401      	adds	r4, #1
 8016466:	9305      	str	r3, [sp, #20]
 8016468:	4619      	mov	r1, r3
 801646a:	f04f 0c0a 	mov.w	ip, #10
 801646e:	4620      	mov	r0, r4
 8016470:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016474:	3a30      	subs	r2, #48	; 0x30
 8016476:	2a09      	cmp	r2, #9
 8016478:	d903      	bls.n	8016482 <_vfiprintf_r+0x1ee>
 801647a:	2b00      	cmp	r3, #0
 801647c:	d0c5      	beq.n	801640a <_vfiprintf_r+0x176>
 801647e:	9105      	str	r1, [sp, #20]
 8016480:	e7c3      	b.n	801640a <_vfiprintf_r+0x176>
 8016482:	fb0c 2101 	mla	r1, ip, r1, r2
 8016486:	4604      	mov	r4, r0
 8016488:	2301      	movs	r3, #1
 801648a:	e7f0      	b.n	801646e <_vfiprintf_r+0x1da>
 801648c:	ab03      	add	r3, sp, #12
 801648e:	9300      	str	r3, [sp, #0]
 8016490:	462a      	mov	r2, r5
 8016492:	4b16      	ldr	r3, [pc, #88]	; (80164ec <_vfiprintf_r+0x258>)
 8016494:	a904      	add	r1, sp, #16
 8016496:	4630      	mov	r0, r6
 8016498:	f7fe f86e 	bl	8014578 <_printf_float>
 801649c:	4607      	mov	r7, r0
 801649e:	1c78      	adds	r0, r7, #1
 80164a0:	d1d6      	bne.n	8016450 <_vfiprintf_r+0x1bc>
 80164a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80164a4:	07d9      	lsls	r1, r3, #31
 80164a6:	d405      	bmi.n	80164b4 <_vfiprintf_r+0x220>
 80164a8:	89ab      	ldrh	r3, [r5, #12]
 80164aa:	059a      	lsls	r2, r3, #22
 80164ac:	d402      	bmi.n	80164b4 <_vfiprintf_r+0x220>
 80164ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80164b0:	f000 faaf 	bl	8016a12 <__retarget_lock_release_recursive>
 80164b4:	89ab      	ldrh	r3, [r5, #12]
 80164b6:	065b      	lsls	r3, r3, #25
 80164b8:	f53f af12 	bmi.w	80162e0 <_vfiprintf_r+0x4c>
 80164bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80164be:	e711      	b.n	80162e4 <_vfiprintf_r+0x50>
 80164c0:	ab03      	add	r3, sp, #12
 80164c2:	9300      	str	r3, [sp, #0]
 80164c4:	462a      	mov	r2, r5
 80164c6:	4b09      	ldr	r3, [pc, #36]	; (80164ec <_vfiprintf_r+0x258>)
 80164c8:	a904      	add	r1, sp, #16
 80164ca:	4630      	mov	r0, r6
 80164cc:	f7fe fae0 	bl	8014a90 <_printf_i>
 80164d0:	e7e4      	b.n	801649c <_vfiprintf_r+0x208>
 80164d2:	bf00      	nop
 80164d4:	080186ec 	.word	0x080186ec
 80164d8:	0801870c 	.word	0x0801870c
 80164dc:	080186cc 	.word	0x080186cc
 80164e0:	080185ba 	.word	0x080185ba
 80164e4:	080185c4 	.word	0x080185c4
 80164e8:	08014579 	.word	0x08014579
 80164ec:	0801626f 	.word	0x0801626f
 80164f0:	080185c0 	.word	0x080185c0

080164f4 <__swbuf_r>:
 80164f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164f6:	460e      	mov	r6, r1
 80164f8:	4614      	mov	r4, r2
 80164fa:	4605      	mov	r5, r0
 80164fc:	b118      	cbz	r0, 8016506 <__swbuf_r+0x12>
 80164fe:	6983      	ldr	r3, [r0, #24]
 8016500:	b90b      	cbnz	r3, 8016506 <__swbuf_r+0x12>
 8016502:	f000 f9e7 	bl	80168d4 <__sinit>
 8016506:	4b21      	ldr	r3, [pc, #132]	; (801658c <__swbuf_r+0x98>)
 8016508:	429c      	cmp	r4, r3
 801650a:	d12b      	bne.n	8016564 <__swbuf_r+0x70>
 801650c:	686c      	ldr	r4, [r5, #4]
 801650e:	69a3      	ldr	r3, [r4, #24]
 8016510:	60a3      	str	r3, [r4, #8]
 8016512:	89a3      	ldrh	r3, [r4, #12]
 8016514:	071a      	lsls	r2, r3, #28
 8016516:	d52f      	bpl.n	8016578 <__swbuf_r+0x84>
 8016518:	6923      	ldr	r3, [r4, #16]
 801651a:	b36b      	cbz	r3, 8016578 <__swbuf_r+0x84>
 801651c:	6923      	ldr	r3, [r4, #16]
 801651e:	6820      	ldr	r0, [r4, #0]
 8016520:	1ac0      	subs	r0, r0, r3
 8016522:	6963      	ldr	r3, [r4, #20]
 8016524:	b2f6      	uxtb	r6, r6
 8016526:	4283      	cmp	r3, r0
 8016528:	4637      	mov	r7, r6
 801652a:	dc04      	bgt.n	8016536 <__swbuf_r+0x42>
 801652c:	4621      	mov	r1, r4
 801652e:	4628      	mov	r0, r5
 8016530:	f000 f93c 	bl	80167ac <_fflush_r>
 8016534:	bb30      	cbnz	r0, 8016584 <__swbuf_r+0x90>
 8016536:	68a3      	ldr	r3, [r4, #8]
 8016538:	3b01      	subs	r3, #1
 801653a:	60a3      	str	r3, [r4, #8]
 801653c:	6823      	ldr	r3, [r4, #0]
 801653e:	1c5a      	adds	r2, r3, #1
 8016540:	6022      	str	r2, [r4, #0]
 8016542:	701e      	strb	r6, [r3, #0]
 8016544:	6963      	ldr	r3, [r4, #20]
 8016546:	3001      	adds	r0, #1
 8016548:	4283      	cmp	r3, r0
 801654a:	d004      	beq.n	8016556 <__swbuf_r+0x62>
 801654c:	89a3      	ldrh	r3, [r4, #12]
 801654e:	07db      	lsls	r3, r3, #31
 8016550:	d506      	bpl.n	8016560 <__swbuf_r+0x6c>
 8016552:	2e0a      	cmp	r6, #10
 8016554:	d104      	bne.n	8016560 <__swbuf_r+0x6c>
 8016556:	4621      	mov	r1, r4
 8016558:	4628      	mov	r0, r5
 801655a:	f000 f927 	bl	80167ac <_fflush_r>
 801655e:	b988      	cbnz	r0, 8016584 <__swbuf_r+0x90>
 8016560:	4638      	mov	r0, r7
 8016562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016564:	4b0a      	ldr	r3, [pc, #40]	; (8016590 <__swbuf_r+0x9c>)
 8016566:	429c      	cmp	r4, r3
 8016568:	d101      	bne.n	801656e <__swbuf_r+0x7a>
 801656a:	68ac      	ldr	r4, [r5, #8]
 801656c:	e7cf      	b.n	801650e <__swbuf_r+0x1a>
 801656e:	4b09      	ldr	r3, [pc, #36]	; (8016594 <__swbuf_r+0xa0>)
 8016570:	429c      	cmp	r4, r3
 8016572:	bf08      	it	eq
 8016574:	68ec      	ldreq	r4, [r5, #12]
 8016576:	e7ca      	b.n	801650e <__swbuf_r+0x1a>
 8016578:	4621      	mov	r1, r4
 801657a:	4628      	mov	r0, r5
 801657c:	f000 f81a 	bl	80165b4 <__swsetup_r>
 8016580:	2800      	cmp	r0, #0
 8016582:	d0cb      	beq.n	801651c <__swbuf_r+0x28>
 8016584:	f04f 37ff 	mov.w	r7, #4294967295
 8016588:	e7ea      	b.n	8016560 <__swbuf_r+0x6c>
 801658a:	bf00      	nop
 801658c:	080186ec 	.word	0x080186ec
 8016590:	0801870c 	.word	0x0801870c
 8016594:	080186cc 	.word	0x080186cc

08016598 <__ascii_wctomb>:
 8016598:	b149      	cbz	r1, 80165ae <__ascii_wctomb+0x16>
 801659a:	2aff      	cmp	r2, #255	; 0xff
 801659c:	bf85      	ittet	hi
 801659e:	238a      	movhi	r3, #138	; 0x8a
 80165a0:	6003      	strhi	r3, [r0, #0]
 80165a2:	700a      	strbls	r2, [r1, #0]
 80165a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80165a8:	bf98      	it	ls
 80165aa:	2001      	movls	r0, #1
 80165ac:	4770      	bx	lr
 80165ae:	4608      	mov	r0, r1
 80165b0:	4770      	bx	lr
	...

080165b4 <__swsetup_r>:
 80165b4:	4b32      	ldr	r3, [pc, #200]	; (8016680 <__swsetup_r+0xcc>)
 80165b6:	b570      	push	{r4, r5, r6, lr}
 80165b8:	681d      	ldr	r5, [r3, #0]
 80165ba:	4606      	mov	r6, r0
 80165bc:	460c      	mov	r4, r1
 80165be:	b125      	cbz	r5, 80165ca <__swsetup_r+0x16>
 80165c0:	69ab      	ldr	r3, [r5, #24]
 80165c2:	b913      	cbnz	r3, 80165ca <__swsetup_r+0x16>
 80165c4:	4628      	mov	r0, r5
 80165c6:	f000 f985 	bl	80168d4 <__sinit>
 80165ca:	4b2e      	ldr	r3, [pc, #184]	; (8016684 <__swsetup_r+0xd0>)
 80165cc:	429c      	cmp	r4, r3
 80165ce:	d10f      	bne.n	80165f0 <__swsetup_r+0x3c>
 80165d0:	686c      	ldr	r4, [r5, #4]
 80165d2:	89a3      	ldrh	r3, [r4, #12]
 80165d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80165d8:	0719      	lsls	r1, r3, #28
 80165da:	d42c      	bmi.n	8016636 <__swsetup_r+0x82>
 80165dc:	06dd      	lsls	r5, r3, #27
 80165de:	d411      	bmi.n	8016604 <__swsetup_r+0x50>
 80165e0:	2309      	movs	r3, #9
 80165e2:	6033      	str	r3, [r6, #0]
 80165e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80165e8:	81a3      	strh	r3, [r4, #12]
 80165ea:	f04f 30ff 	mov.w	r0, #4294967295
 80165ee:	e03e      	b.n	801666e <__swsetup_r+0xba>
 80165f0:	4b25      	ldr	r3, [pc, #148]	; (8016688 <__swsetup_r+0xd4>)
 80165f2:	429c      	cmp	r4, r3
 80165f4:	d101      	bne.n	80165fa <__swsetup_r+0x46>
 80165f6:	68ac      	ldr	r4, [r5, #8]
 80165f8:	e7eb      	b.n	80165d2 <__swsetup_r+0x1e>
 80165fa:	4b24      	ldr	r3, [pc, #144]	; (801668c <__swsetup_r+0xd8>)
 80165fc:	429c      	cmp	r4, r3
 80165fe:	bf08      	it	eq
 8016600:	68ec      	ldreq	r4, [r5, #12]
 8016602:	e7e6      	b.n	80165d2 <__swsetup_r+0x1e>
 8016604:	0758      	lsls	r0, r3, #29
 8016606:	d512      	bpl.n	801662e <__swsetup_r+0x7a>
 8016608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801660a:	b141      	cbz	r1, 801661e <__swsetup_r+0x6a>
 801660c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016610:	4299      	cmp	r1, r3
 8016612:	d002      	beq.n	801661a <__swsetup_r+0x66>
 8016614:	4630      	mov	r0, r6
 8016616:	f7ff fd0b 	bl	8016030 <_free_r>
 801661a:	2300      	movs	r3, #0
 801661c:	6363      	str	r3, [r4, #52]	; 0x34
 801661e:	89a3      	ldrh	r3, [r4, #12]
 8016620:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016624:	81a3      	strh	r3, [r4, #12]
 8016626:	2300      	movs	r3, #0
 8016628:	6063      	str	r3, [r4, #4]
 801662a:	6923      	ldr	r3, [r4, #16]
 801662c:	6023      	str	r3, [r4, #0]
 801662e:	89a3      	ldrh	r3, [r4, #12]
 8016630:	f043 0308 	orr.w	r3, r3, #8
 8016634:	81a3      	strh	r3, [r4, #12]
 8016636:	6923      	ldr	r3, [r4, #16]
 8016638:	b94b      	cbnz	r3, 801664e <__swsetup_r+0x9a>
 801663a:	89a3      	ldrh	r3, [r4, #12]
 801663c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016644:	d003      	beq.n	801664e <__swsetup_r+0x9a>
 8016646:	4621      	mov	r1, r4
 8016648:	4630      	mov	r0, r6
 801664a:	f000 fa07 	bl	8016a5c <__smakebuf_r>
 801664e:	89a0      	ldrh	r0, [r4, #12]
 8016650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016654:	f010 0301 	ands.w	r3, r0, #1
 8016658:	d00a      	beq.n	8016670 <__swsetup_r+0xbc>
 801665a:	2300      	movs	r3, #0
 801665c:	60a3      	str	r3, [r4, #8]
 801665e:	6963      	ldr	r3, [r4, #20]
 8016660:	425b      	negs	r3, r3
 8016662:	61a3      	str	r3, [r4, #24]
 8016664:	6923      	ldr	r3, [r4, #16]
 8016666:	b943      	cbnz	r3, 801667a <__swsetup_r+0xc6>
 8016668:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801666c:	d1ba      	bne.n	80165e4 <__swsetup_r+0x30>
 801666e:	bd70      	pop	{r4, r5, r6, pc}
 8016670:	0781      	lsls	r1, r0, #30
 8016672:	bf58      	it	pl
 8016674:	6963      	ldrpl	r3, [r4, #20]
 8016676:	60a3      	str	r3, [r4, #8]
 8016678:	e7f4      	b.n	8016664 <__swsetup_r+0xb0>
 801667a:	2000      	movs	r0, #0
 801667c:	e7f7      	b.n	801666e <__swsetup_r+0xba>
 801667e:	bf00      	nop
 8016680:	24000010 	.word	0x24000010
 8016684:	080186ec 	.word	0x080186ec
 8016688:	0801870c 	.word	0x0801870c
 801668c:	080186cc 	.word	0x080186cc

08016690 <abort>:
 8016690:	b508      	push	{r3, lr}
 8016692:	2006      	movs	r0, #6
 8016694:	f000 fa4a 	bl	8016b2c <raise>
 8016698:	2001      	movs	r0, #1
 801669a:	f7f2 fa91 	bl	8008bc0 <_exit>
	...

080166a0 <__sflush_r>:
 80166a0:	898a      	ldrh	r2, [r1, #12]
 80166a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166a6:	4605      	mov	r5, r0
 80166a8:	0710      	lsls	r0, r2, #28
 80166aa:	460c      	mov	r4, r1
 80166ac:	d458      	bmi.n	8016760 <__sflush_r+0xc0>
 80166ae:	684b      	ldr	r3, [r1, #4]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	dc05      	bgt.n	80166c0 <__sflush_r+0x20>
 80166b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	dc02      	bgt.n	80166c0 <__sflush_r+0x20>
 80166ba:	2000      	movs	r0, #0
 80166bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80166c2:	2e00      	cmp	r6, #0
 80166c4:	d0f9      	beq.n	80166ba <__sflush_r+0x1a>
 80166c6:	2300      	movs	r3, #0
 80166c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80166cc:	682f      	ldr	r7, [r5, #0]
 80166ce:	602b      	str	r3, [r5, #0]
 80166d0:	d032      	beq.n	8016738 <__sflush_r+0x98>
 80166d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80166d4:	89a3      	ldrh	r3, [r4, #12]
 80166d6:	075a      	lsls	r2, r3, #29
 80166d8:	d505      	bpl.n	80166e6 <__sflush_r+0x46>
 80166da:	6863      	ldr	r3, [r4, #4]
 80166dc:	1ac0      	subs	r0, r0, r3
 80166de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80166e0:	b10b      	cbz	r3, 80166e6 <__sflush_r+0x46>
 80166e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80166e4:	1ac0      	subs	r0, r0, r3
 80166e6:	2300      	movs	r3, #0
 80166e8:	4602      	mov	r2, r0
 80166ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80166ec:	6a21      	ldr	r1, [r4, #32]
 80166ee:	4628      	mov	r0, r5
 80166f0:	47b0      	blx	r6
 80166f2:	1c43      	adds	r3, r0, #1
 80166f4:	89a3      	ldrh	r3, [r4, #12]
 80166f6:	d106      	bne.n	8016706 <__sflush_r+0x66>
 80166f8:	6829      	ldr	r1, [r5, #0]
 80166fa:	291d      	cmp	r1, #29
 80166fc:	d82c      	bhi.n	8016758 <__sflush_r+0xb8>
 80166fe:	4a2a      	ldr	r2, [pc, #168]	; (80167a8 <__sflush_r+0x108>)
 8016700:	40ca      	lsrs	r2, r1
 8016702:	07d6      	lsls	r6, r2, #31
 8016704:	d528      	bpl.n	8016758 <__sflush_r+0xb8>
 8016706:	2200      	movs	r2, #0
 8016708:	6062      	str	r2, [r4, #4]
 801670a:	04d9      	lsls	r1, r3, #19
 801670c:	6922      	ldr	r2, [r4, #16]
 801670e:	6022      	str	r2, [r4, #0]
 8016710:	d504      	bpl.n	801671c <__sflush_r+0x7c>
 8016712:	1c42      	adds	r2, r0, #1
 8016714:	d101      	bne.n	801671a <__sflush_r+0x7a>
 8016716:	682b      	ldr	r3, [r5, #0]
 8016718:	b903      	cbnz	r3, 801671c <__sflush_r+0x7c>
 801671a:	6560      	str	r0, [r4, #84]	; 0x54
 801671c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801671e:	602f      	str	r7, [r5, #0]
 8016720:	2900      	cmp	r1, #0
 8016722:	d0ca      	beq.n	80166ba <__sflush_r+0x1a>
 8016724:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016728:	4299      	cmp	r1, r3
 801672a:	d002      	beq.n	8016732 <__sflush_r+0x92>
 801672c:	4628      	mov	r0, r5
 801672e:	f7ff fc7f 	bl	8016030 <_free_r>
 8016732:	2000      	movs	r0, #0
 8016734:	6360      	str	r0, [r4, #52]	; 0x34
 8016736:	e7c1      	b.n	80166bc <__sflush_r+0x1c>
 8016738:	6a21      	ldr	r1, [r4, #32]
 801673a:	2301      	movs	r3, #1
 801673c:	4628      	mov	r0, r5
 801673e:	47b0      	blx	r6
 8016740:	1c41      	adds	r1, r0, #1
 8016742:	d1c7      	bne.n	80166d4 <__sflush_r+0x34>
 8016744:	682b      	ldr	r3, [r5, #0]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d0c4      	beq.n	80166d4 <__sflush_r+0x34>
 801674a:	2b1d      	cmp	r3, #29
 801674c:	d001      	beq.n	8016752 <__sflush_r+0xb2>
 801674e:	2b16      	cmp	r3, #22
 8016750:	d101      	bne.n	8016756 <__sflush_r+0xb6>
 8016752:	602f      	str	r7, [r5, #0]
 8016754:	e7b1      	b.n	80166ba <__sflush_r+0x1a>
 8016756:	89a3      	ldrh	r3, [r4, #12]
 8016758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801675c:	81a3      	strh	r3, [r4, #12]
 801675e:	e7ad      	b.n	80166bc <__sflush_r+0x1c>
 8016760:	690f      	ldr	r7, [r1, #16]
 8016762:	2f00      	cmp	r7, #0
 8016764:	d0a9      	beq.n	80166ba <__sflush_r+0x1a>
 8016766:	0793      	lsls	r3, r2, #30
 8016768:	680e      	ldr	r6, [r1, #0]
 801676a:	bf08      	it	eq
 801676c:	694b      	ldreq	r3, [r1, #20]
 801676e:	600f      	str	r7, [r1, #0]
 8016770:	bf18      	it	ne
 8016772:	2300      	movne	r3, #0
 8016774:	eba6 0807 	sub.w	r8, r6, r7
 8016778:	608b      	str	r3, [r1, #8]
 801677a:	f1b8 0f00 	cmp.w	r8, #0
 801677e:	dd9c      	ble.n	80166ba <__sflush_r+0x1a>
 8016780:	6a21      	ldr	r1, [r4, #32]
 8016782:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016784:	4643      	mov	r3, r8
 8016786:	463a      	mov	r2, r7
 8016788:	4628      	mov	r0, r5
 801678a:	47b0      	blx	r6
 801678c:	2800      	cmp	r0, #0
 801678e:	dc06      	bgt.n	801679e <__sflush_r+0xfe>
 8016790:	89a3      	ldrh	r3, [r4, #12]
 8016792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016796:	81a3      	strh	r3, [r4, #12]
 8016798:	f04f 30ff 	mov.w	r0, #4294967295
 801679c:	e78e      	b.n	80166bc <__sflush_r+0x1c>
 801679e:	4407      	add	r7, r0
 80167a0:	eba8 0800 	sub.w	r8, r8, r0
 80167a4:	e7e9      	b.n	801677a <__sflush_r+0xda>
 80167a6:	bf00      	nop
 80167a8:	20400001 	.word	0x20400001

080167ac <_fflush_r>:
 80167ac:	b538      	push	{r3, r4, r5, lr}
 80167ae:	690b      	ldr	r3, [r1, #16]
 80167b0:	4605      	mov	r5, r0
 80167b2:	460c      	mov	r4, r1
 80167b4:	b913      	cbnz	r3, 80167bc <_fflush_r+0x10>
 80167b6:	2500      	movs	r5, #0
 80167b8:	4628      	mov	r0, r5
 80167ba:	bd38      	pop	{r3, r4, r5, pc}
 80167bc:	b118      	cbz	r0, 80167c6 <_fflush_r+0x1a>
 80167be:	6983      	ldr	r3, [r0, #24]
 80167c0:	b90b      	cbnz	r3, 80167c6 <_fflush_r+0x1a>
 80167c2:	f000 f887 	bl	80168d4 <__sinit>
 80167c6:	4b14      	ldr	r3, [pc, #80]	; (8016818 <_fflush_r+0x6c>)
 80167c8:	429c      	cmp	r4, r3
 80167ca:	d11b      	bne.n	8016804 <_fflush_r+0x58>
 80167cc:	686c      	ldr	r4, [r5, #4]
 80167ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d0ef      	beq.n	80167b6 <_fflush_r+0xa>
 80167d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80167d8:	07d0      	lsls	r0, r2, #31
 80167da:	d404      	bmi.n	80167e6 <_fflush_r+0x3a>
 80167dc:	0599      	lsls	r1, r3, #22
 80167de:	d402      	bmi.n	80167e6 <_fflush_r+0x3a>
 80167e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80167e2:	f000 f915 	bl	8016a10 <__retarget_lock_acquire_recursive>
 80167e6:	4628      	mov	r0, r5
 80167e8:	4621      	mov	r1, r4
 80167ea:	f7ff ff59 	bl	80166a0 <__sflush_r>
 80167ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80167f0:	07da      	lsls	r2, r3, #31
 80167f2:	4605      	mov	r5, r0
 80167f4:	d4e0      	bmi.n	80167b8 <_fflush_r+0xc>
 80167f6:	89a3      	ldrh	r3, [r4, #12]
 80167f8:	059b      	lsls	r3, r3, #22
 80167fa:	d4dd      	bmi.n	80167b8 <_fflush_r+0xc>
 80167fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80167fe:	f000 f908 	bl	8016a12 <__retarget_lock_release_recursive>
 8016802:	e7d9      	b.n	80167b8 <_fflush_r+0xc>
 8016804:	4b05      	ldr	r3, [pc, #20]	; (801681c <_fflush_r+0x70>)
 8016806:	429c      	cmp	r4, r3
 8016808:	d101      	bne.n	801680e <_fflush_r+0x62>
 801680a:	68ac      	ldr	r4, [r5, #8]
 801680c:	e7df      	b.n	80167ce <_fflush_r+0x22>
 801680e:	4b04      	ldr	r3, [pc, #16]	; (8016820 <_fflush_r+0x74>)
 8016810:	429c      	cmp	r4, r3
 8016812:	bf08      	it	eq
 8016814:	68ec      	ldreq	r4, [r5, #12]
 8016816:	e7da      	b.n	80167ce <_fflush_r+0x22>
 8016818:	080186ec 	.word	0x080186ec
 801681c:	0801870c 	.word	0x0801870c
 8016820:	080186cc 	.word	0x080186cc

08016824 <std>:
 8016824:	2300      	movs	r3, #0
 8016826:	b510      	push	{r4, lr}
 8016828:	4604      	mov	r4, r0
 801682a:	e9c0 3300 	strd	r3, r3, [r0]
 801682e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016832:	6083      	str	r3, [r0, #8]
 8016834:	8181      	strh	r1, [r0, #12]
 8016836:	6643      	str	r3, [r0, #100]	; 0x64
 8016838:	81c2      	strh	r2, [r0, #14]
 801683a:	6183      	str	r3, [r0, #24]
 801683c:	4619      	mov	r1, r3
 801683e:	2208      	movs	r2, #8
 8016840:	305c      	adds	r0, #92	; 0x5c
 8016842:	f7fd fdff 	bl	8014444 <memset>
 8016846:	4b05      	ldr	r3, [pc, #20]	; (801685c <std+0x38>)
 8016848:	6263      	str	r3, [r4, #36]	; 0x24
 801684a:	4b05      	ldr	r3, [pc, #20]	; (8016860 <std+0x3c>)
 801684c:	62a3      	str	r3, [r4, #40]	; 0x28
 801684e:	4b05      	ldr	r3, [pc, #20]	; (8016864 <std+0x40>)
 8016850:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016852:	4b05      	ldr	r3, [pc, #20]	; (8016868 <std+0x44>)
 8016854:	6224      	str	r4, [r4, #32]
 8016856:	6323      	str	r3, [r4, #48]	; 0x30
 8016858:	bd10      	pop	{r4, pc}
 801685a:	bf00      	nop
 801685c:	08016b65 	.word	0x08016b65
 8016860:	08016b87 	.word	0x08016b87
 8016864:	08016bbf 	.word	0x08016bbf
 8016868:	08016be3 	.word	0x08016be3

0801686c <_cleanup_r>:
 801686c:	4901      	ldr	r1, [pc, #4]	; (8016874 <_cleanup_r+0x8>)
 801686e:	f000 b8af 	b.w	80169d0 <_fwalk_reent>
 8016872:	bf00      	nop
 8016874:	080167ad 	.word	0x080167ad

08016878 <__sfmoreglue>:
 8016878:	b570      	push	{r4, r5, r6, lr}
 801687a:	1e4a      	subs	r2, r1, #1
 801687c:	2568      	movs	r5, #104	; 0x68
 801687e:	4355      	muls	r5, r2
 8016880:	460e      	mov	r6, r1
 8016882:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016886:	f7ff fc23 	bl	80160d0 <_malloc_r>
 801688a:	4604      	mov	r4, r0
 801688c:	b140      	cbz	r0, 80168a0 <__sfmoreglue+0x28>
 801688e:	2100      	movs	r1, #0
 8016890:	e9c0 1600 	strd	r1, r6, [r0]
 8016894:	300c      	adds	r0, #12
 8016896:	60a0      	str	r0, [r4, #8]
 8016898:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801689c:	f7fd fdd2 	bl	8014444 <memset>
 80168a0:	4620      	mov	r0, r4
 80168a2:	bd70      	pop	{r4, r5, r6, pc}

080168a4 <__sfp_lock_acquire>:
 80168a4:	4801      	ldr	r0, [pc, #4]	; (80168ac <__sfp_lock_acquire+0x8>)
 80168a6:	f000 b8b3 	b.w	8016a10 <__retarget_lock_acquire_recursive>
 80168aa:	bf00      	nop
 80168ac:	240013b0 	.word	0x240013b0

080168b0 <__sfp_lock_release>:
 80168b0:	4801      	ldr	r0, [pc, #4]	; (80168b8 <__sfp_lock_release+0x8>)
 80168b2:	f000 b8ae 	b.w	8016a12 <__retarget_lock_release_recursive>
 80168b6:	bf00      	nop
 80168b8:	240013b0 	.word	0x240013b0

080168bc <__sinit_lock_acquire>:
 80168bc:	4801      	ldr	r0, [pc, #4]	; (80168c4 <__sinit_lock_acquire+0x8>)
 80168be:	f000 b8a7 	b.w	8016a10 <__retarget_lock_acquire_recursive>
 80168c2:	bf00      	nop
 80168c4:	240013ab 	.word	0x240013ab

080168c8 <__sinit_lock_release>:
 80168c8:	4801      	ldr	r0, [pc, #4]	; (80168d0 <__sinit_lock_release+0x8>)
 80168ca:	f000 b8a2 	b.w	8016a12 <__retarget_lock_release_recursive>
 80168ce:	bf00      	nop
 80168d0:	240013ab 	.word	0x240013ab

080168d4 <__sinit>:
 80168d4:	b510      	push	{r4, lr}
 80168d6:	4604      	mov	r4, r0
 80168d8:	f7ff fff0 	bl	80168bc <__sinit_lock_acquire>
 80168dc:	69a3      	ldr	r3, [r4, #24]
 80168de:	b11b      	cbz	r3, 80168e8 <__sinit+0x14>
 80168e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80168e4:	f7ff bff0 	b.w	80168c8 <__sinit_lock_release>
 80168e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80168ec:	6523      	str	r3, [r4, #80]	; 0x50
 80168ee:	4b13      	ldr	r3, [pc, #76]	; (801693c <__sinit+0x68>)
 80168f0:	4a13      	ldr	r2, [pc, #76]	; (8016940 <__sinit+0x6c>)
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80168f6:	42a3      	cmp	r3, r4
 80168f8:	bf04      	itt	eq
 80168fa:	2301      	moveq	r3, #1
 80168fc:	61a3      	streq	r3, [r4, #24]
 80168fe:	4620      	mov	r0, r4
 8016900:	f000 f820 	bl	8016944 <__sfp>
 8016904:	6060      	str	r0, [r4, #4]
 8016906:	4620      	mov	r0, r4
 8016908:	f000 f81c 	bl	8016944 <__sfp>
 801690c:	60a0      	str	r0, [r4, #8]
 801690e:	4620      	mov	r0, r4
 8016910:	f000 f818 	bl	8016944 <__sfp>
 8016914:	2200      	movs	r2, #0
 8016916:	60e0      	str	r0, [r4, #12]
 8016918:	2104      	movs	r1, #4
 801691a:	6860      	ldr	r0, [r4, #4]
 801691c:	f7ff ff82 	bl	8016824 <std>
 8016920:	68a0      	ldr	r0, [r4, #8]
 8016922:	2201      	movs	r2, #1
 8016924:	2109      	movs	r1, #9
 8016926:	f7ff ff7d 	bl	8016824 <std>
 801692a:	68e0      	ldr	r0, [r4, #12]
 801692c:	2202      	movs	r2, #2
 801692e:	2112      	movs	r1, #18
 8016930:	f7ff ff78 	bl	8016824 <std>
 8016934:	2301      	movs	r3, #1
 8016936:	61a3      	str	r3, [r4, #24]
 8016938:	e7d2      	b.n	80168e0 <__sinit+0xc>
 801693a:	bf00      	nop
 801693c:	08018348 	.word	0x08018348
 8016940:	0801686d 	.word	0x0801686d

08016944 <__sfp>:
 8016944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016946:	4607      	mov	r7, r0
 8016948:	f7ff ffac 	bl	80168a4 <__sfp_lock_acquire>
 801694c:	4b1e      	ldr	r3, [pc, #120]	; (80169c8 <__sfp+0x84>)
 801694e:	681e      	ldr	r6, [r3, #0]
 8016950:	69b3      	ldr	r3, [r6, #24]
 8016952:	b913      	cbnz	r3, 801695a <__sfp+0x16>
 8016954:	4630      	mov	r0, r6
 8016956:	f7ff ffbd 	bl	80168d4 <__sinit>
 801695a:	3648      	adds	r6, #72	; 0x48
 801695c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016960:	3b01      	subs	r3, #1
 8016962:	d503      	bpl.n	801696c <__sfp+0x28>
 8016964:	6833      	ldr	r3, [r6, #0]
 8016966:	b30b      	cbz	r3, 80169ac <__sfp+0x68>
 8016968:	6836      	ldr	r6, [r6, #0]
 801696a:	e7f7      	b.n	801695c <__sfp+0x18>
 801696c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016970:	b9d5      	cbnz	r5, 80169a8 <__sfp+0x64>
 8016972:	4b16      	ldr	r3, [pc, #88]	; (80169cc <__sfp+0x88>)
 8016974:	60e3      	str	r3, [r4, #12]
 8016976:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801697a:	6665      	str	r5, [r4, #100]	; 0x64
 801697c:	f000 f847 	bl	8016a0e <__retarget_lock_init_recursive>
 8016980:	f7ff ff96 	bl	80168b0 <__sfp_lock_release>
 8016984:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016988:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801698c:	6025      	str	r5, [r4, #0]
 801698e:	61a5      	str	r5, [r4, #24]
 8016990:	2208      	movs	r2, #8
 8016992:	4629      	mov	r1, r5
 8016994:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016998:	f7fd fd54 	bl	8014444 <memset>
 801699c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80169a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80169a4:	4620      	mov	r0, r4
 80169a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80169a8:	3468      	adds	r4, #104	; 0x68
 80169aa:	e7d9      	b.n	8016960 <__sfp+0x1c>
 80169ac:	2104      	movs	r1, #4
 80169ae:	4638      	mov	r0, r7
 80169b0:	f7ff ff62 	bl	8016878 <__sfmoreglue>
 80169b4:	4604      	mov	r4, r0
 80169b6:	6030      	str	r0, [r6, #0]
 80169b8:	2800      	cmp	r0, #0
 80169ba:	d1d5      	bne.n	8016968 <__sfp+0x24>
 80169bc:	f7ff ff78 	bl	80168b0 <__sfp_lock_release>
 80169c0:	230c      	movs	r3, #12
 80169c2:	603b      	str	r3, [r7, #0]
 80169c4:	e7ee      	b.n	80169a4 <__sfp+0x60>
 80169c6:	bf00      	nop
 80169c8:	08018348 	.word	0x08018348
 80169cc:	ffff0001 	.word	0xffff0001

080169d0 <_fwalk_reent>:
 80169d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80169d4:	4606      	mov	r6, r0
 80169d6:	4688      	mov	r8, r1
 80169d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80169dc:	2700      	movs	r7, #0
 80169de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80169e2:	f1b9 0901 	subs.w	r9, r9, #1
 80169e6:	d505      	bpl.n	80169f4 <_fwalk_reent+0x24>
 80169e8:	6824      	ldr	r4, [r4, #0]
 80169ea:	2c00      	cmp	r4, #0
 80169ec:	d1f7      	bne.n	80169de <_fwalk_reent+0xe>
 80169ee:	4638      	mov	r0, r7
 80169f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169f4:	89ab      	ldrh	r3, [r5, #12]
 80169f6:	2b01      	cmp	r3, #1
 80169f8:	d907      	bls.n	8016a0a <_fwalk_reent+0x3a>
 80169fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80169fe:	3301      	adds	r3, #1
 8016a00:	d003      	beq.n	8016a0a <_fwalk_reent+0x3a>
 8016a02:	4629      	mov	r1, r5
 8016a04:	4630      	mov	r0, r6
 8016a06:	47c0      	blx	r8
 8016a08:	4307      	orrs	r7, r0
 8016a0a:	3568      	adds	r5, #104	; 0x68
 8016a0c:	e7e9      	b.n	80169e2 <_fwalk_reent+0x12>

08016a0e <__retarget_lock_init_recursive>:
 8016a0e:	4770      	bx	lr

08016a10 <__retarget_lock_acquire_recursive>:
 8016a10:	4770      	bx	lr

08016a12 <__retarget_lock_release_recursive>:
 8016a12:	4770      	bx	lr

08016a14 <__swhatbuf_r>:
 8016a14:	b570      	push	{r4, r5, r6, lr}
 8016a16:	460e      	mov	r6, r1
 8016a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a1c:	2900      	cmp	r1, #0
 8016a1e:	b096      	sub	sp, #88	; 0x58
 8016a20:	4614      	mov	r4, r2
 8016a22:	461d      	mov	r5, r3
 8016a24:	da07      	bge.n	8016a36 <__swhatbuf_r+0x22>
 8016a26:	2300      	movs	r3, #0
 8016a28:	602b      	str	r3, [r5, #0]
 8016a2a:	89b3      	ldrh	r3, [r6, #12]
 8016a2c:	061a      	lsls	r2, r3, #24
 8016a2e:	d410      	bmi.n	8016a52 <__swhatbuf_r+0x3e>
 8016a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016a34:	e00e      	b.n	8016a54 <__swhatbuf_r+0x40>
 8016a36:	466a      	mov	r2, sp
 8016a38:	f000 f8fa 	bl	8016c30 <_fstat_r>
 8016a3c:	2800      	cmp	r0, #0
 8016a3e:	dbf2      	blt.n	8016a26 <__swhatbuf_r+0x12>
 8016a40:	9a01      	ldr	r2, [sp, #4]
 8016a42:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016a46:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016a4a:	425a      	negs	r2, r3
 8016a4c:	415a      	adcs	r2, r3
 8016a4e:	602a      	str	r2, [r5, #0]
 8016a50:	e7ee      	b.n	8016a30 <__swhatbuf_r+0x1c>
 8016a52:	2340      	movs	r3, #64	; 0x40
 8016a54:	2000      	movs	r0, #0
 8016a56:	6023      	str	r3, [r4, #0]
 8016a58:	b016      	add	sp, #88	; 0x58
 8016a5a:	bd70      	pop	{r4, r5, r6, pc}

08016a5c <__smakebuf_r>:
 8016a5c:	898b      	ldrh	r3, [r1, #12]
 8016a5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016a60:	079d      	lsls	r5, r3, #30
 8016a62:	4606      	mov	r6, r0
 8016a64:	460c      	mov	r4, r1
 8016a66:	d507      	bpl.n	8016a78 <__smakebuf_r+0x1c>
 8016a68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016a6c:	6023      	str	r3, [r4, #0]
 8016a6e:	6123      	str	r3, [r4, #16]
 8016a70:	2301      	movs	r3, #1
 8016a72:	6163      	str	r3, [r4, #20]
 8016a74:	b002      	add	sp, #8
 8016a76:	bd70      	pop	{r4, r5, r6, pc}
 8016a78:	ab01      	add	r3, sp, #4
 8016a7a:	466a      	mov	r2, sp
 8016a7c:	f7ff ffca 	bl	8016a14 <__swhatbuf_r>
 8016a80:	9900      	ldr	r1, [sp, #0]
 8016a82:	4605      	mov	r5, r0
 8016a84:	4630      	mov	r0, r6
 8016a86:	f7ff fb23 	bl	80160d0 <_malloc_r>
 8016a8a:	b948      	cbnz	r0, 8016aa0 <__smakebuf_r+0x44>
 8016a8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a90:	059a      	lsls	r2, r3, #22
 8016a92:	d4ef      	bmi.n	8016a74 <__smakebuf_r+0x18>
 8016a94:	f023 0303 	bic.w	r3, r3, #3
 8016a98:	f043 0302 	orr.w	r3, r3, #2
 8016a9c:	81a3      	strh	r3, [r4, #12]
 8016a9e:	e7e3      	b.n	8016a68 <__smakebuf_r+0xc>
 8016aa0:	4b0d      	ldr	r3, [pc, #52]	; (8016ad8 <__smakebuf_r+0x7c>)
 8016aa2:	62b3      	str	r3, [r6, #40]	; 0x28
 8016aa4:	89a3      	ldrh	r3, [r4, #12]
 8016aa6:	6020      	str	r0, [r4, #0]
 8016aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016aac:	81a3      	strh	r3, [r4, #12]
 8016aae:	9b00      	ldr	r3, [sp, #0]
 8016ab0:	6163      	str	r3, [r4, #20]
 8016ab2:	9b01      	ldr	r3, [sp, #4]
 8016ab4:	6120      	str	r0, [r4, #16]
 8016ab6:	b15b      	cbz	r3, 8016ad0 <__smakebuf_r+0x74>
 8016ab8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016abc:	4630      	mov	r0, r6
 8016abe:	f000 f8c9 	bl	8016c54 <_isatty_r>
 8016ac2:	b128      	cbz	r0, 8016ad0 <__smakebuf_r+0x74>
 8016ac4:	89a3      	ldrh	r3, [r4, #12]
 8016ac6:	f023 0303 	bic.w	r3, r3, #3
 8016aca:	f043 0301 	orr.w	r3, r3, #1
 8016ace:	81a3      	strh	r3, [r4, #12]
 8016ad0:	89a0      	ldrh	r0, [r4, #12]
 8016ad2:	4305      	orrs	r5, r0
 8016ad4:	81a5      	strh	r5, [r4, #12]
 8016ad6:	e7cd      	b.n	8016a74 <__smakebuf_r+0x18>
 8016ad8:	0801686d 	.word	0x0801686d

08016adc <_raise_r>:
 8016adc:	291f      	cmp	r1, #31
 8016ade:	b538      	push	{r3, r4, r5, lr}
 8016ae0:	4604      	mov	r4, r0
 8016ae2:	460d      	mov	r5, r1
 8016ae4:	d904      	bls.n	8016af0 <_raise_r+0x14>
 8016ae6:	2316      	movs	r3, #22
 8016ae8:	6003      	str	r3, [r0, #0]
 8016aea:	f04f 30ff 	mov.w	r0, #4294967295
 8016aee:	bd38      	pop	{r3, r4, r5, pc}
 8016af0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016af2:	b112      	cbz	r2, 8016afa <_raise_r+0x1e>
 8016af4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016af8:	b94b      	cbnz	r3, 8016b0e <_raise_r+0x32>
 8016afa:	4620      	mov	r0, r4
 8016afc:	f000 f830 	bl	8016b60 <_getpid_r>
 8016b00:	462a      	mov	r2, r5
 8016b02:	4601      	mov	r1, r0
 8016b04:	4620      	mov	r0, r4
 8016b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016b0a:	f000 b817 	b.w	8016b3c <_kill_r>
 8016b0e:	2b01      	cmp	r3, #1
 8016b10:	d00a      	beq.n	8016b28 <_raise_r+0x4c>
 8016b12:	1c59      	adds	r1, r3, #1
 8016b14:	d103      	bne.n	8016b1e <_raise_r+0x42>
 8016b16:	2316      	movs	r3, #22
 8016b18:	6003      	str	r3, [r0, #0]
 8016b1a:	2001      	movs	r0, #1
 8016b1c:	e7e7      	b.n	8016aee <_raise_r+0x12>
 8016b1e:	2400      	movs	r4, #0
 8016b20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016b24:	4628      	mov	r0, r5
 8016b26:	4798      	blx	r3
 8016b28:	2000      	movs	r0, #0
 8016b2a:	e7e0      	b.n	8016aee <_raise_r+0x12>

08016b2c <raise>:
 8016b2c:	4b02      	ldr	r3, [pc, #8]	; (8016b38 <raise+0xc>)
 8016b2e:	4601      	mov	r1, r0
 8016b30:	6818      	ldr	r0, [r3, #0]
 8016b32:	f7ff bfd3 	b.w	8016adc <_raise_r>
 8016b36:	bf00      	nop
 8016b38:	24000010 	.word	0x24000010

08016b3c <_kill_r>:
 8016b3c:	b538      	push	{r3, r4, r5, lr}
 8016b3e:	4d07      	ldr	r5, [pc, #28]	; (8016b5c <_kill_r+0x20>)
 8016b40:	2300      	movs	r3, #0
 8016b42:	4604      	mov	r4, r0
 8016b44:	4608      	mov	r0, r1
 8016b46:	4611      	mov	r1, r2
 8016b48:	602b      	str	r3, [r5, #0]
 8016b4a:	f7f2 f829 	bl	8008ba0 <_kill>
 8016b4e:	1c43      	adds	r3, r0, #1
 8016b50:	d102      	bne.n	8016b58 <_kill_r+0x1c>
 8016b52:	682b      	ldr	r3, [r5, #0]
 8016b54:	b103      	cbz	r3, 8016b58 <_kill_r+0x1c>
 8016b56:	6023      	str	r3, [r4, #0]
 8016b58:	bd38      	pop	{r3, r4, r5, pc}
 8016b5a:	bf00      	nop
 8016b5c:	240013a4 	.word	0x240013a4

08016b60 <_getpid_r>:
 8016b60:	f7f2 b816 	b.w	8008b90 <_getpid>

08016b64 <__sread>:
 8016b64:	b510      	push	{r4, lr}
 8016b66:	460c      	mov	r4, r1
 8016b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b6c:	f000 f894 	bl	8016c98 <_read_r>
 8016b70:	2800      	cmp	r0, #0
 8016b72:	bfab      	itete	ge
 8016b74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016b76:	89a3      	ldrhlt	r3, [r4, #12]
 8016b78:	181b      	addge	r3, r3, r0
 8016b7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016b7e:	bfac      	ite	ge
 8016b80:	6563      	strge	r3, [r4, #84]	; 0x54
 8016b82:	81a3      	strhlt	r3, [r4, #12]
 8016b84:	bd10      	pop	{r4, pc}

08016b86 <__swrite>:
 8016b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b8a:	461f      	mov	r7, r3
 8016b8c:	898b      	ldrh	r3, [r1, #12]
 8016b8e:	05db      	lsls	r3, r3, #23
 8016b90:	4605      	mov	r5, r0
 8016b92:	460c      	mov	r4, r1
 8016b94:	4616      	mov	r6, r2
 8016b96:	d505      	bpl.n	8016ba4 <__swrite+0x1e>
 8016b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b9c:	2302      	movs	r3, #2
 8016b9e:	2200      	movs	r2, #0
 8016ba0:	f000 f868 	bl	8016c74 <_lseek_r>
 8016ba4:	89a3      	ldrh	r3, [r4, #12]
 8016ba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016baa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016bae:	81a3      	strh	r3, [r4, #12]
 8016bb0:	4632      	mov	r2, r6
 8016bb2:	463b      	mov	r3, r7
 8016bb4:	4628      	mov	r0, r5
 8016bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016bba:	f000 b817 	b.w	8016bec <_write_r>

08016bbe <__sseek>:
 8016bbe:	b510      	push	{r4, lr}
 8016bc0:	460c      	mov	r4, r1
 8016bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bc6:	f000 f855 	bl	8016c74 <_lseek_r>
 8016bca:	1c43      	adds	r3, r0, #1
 8016bcc:	89a3      	ldrh	r3, [r4, #12]
 8016bce:	bf15      	itete	ne
 8016bd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8016bd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016bd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016bda:	81a3      	strheq	r3, [r4, #12]
 8016bdc:	bf18      	it	ne
 8016bde:	81a3      	strhne	r3, [r4, #12]
 8016be0:	bd10      	pop	{r4, pc}

08016be2 <__sclose>:
 8016be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016be6:	f000 b813 	b.w	8016c10 <_close_r>
	...

08016bec <_write_r>:
 8016bec:	b538      	push	{r3, r4, r5, lr}
 8016bee:	4d07      	ldr	r5, [pc, #28]	; (8016c0c <_write_r+0x20>)
 8016bf0:	4604      	mov	r4, r0
 8016bf2:	4608      	mov	r0, r1
 8016bf4:	4611      	mov	r1, r2
 8016bf6:	2200      	movs	r2, #0
 8016bf8:	602a      	str	r2, [r5, #0]
 8016bfa:	461a      	mov	r2, r3
 8016bfc:	f7f2 f807 	bl	8008c0e <_write>
 8016c00:	1c43      	adds	r3, r0, #1
 8016c02:	d102      	bne.n	8016c0a <_write_r+0x1e>
 8016c04:	682b      	ldr	r3, [r5, #0]
 8016c06:	b103      	cbz	r3, 8016c0a <_write_r+0x1e>
 8016c08:	6023      	str	r3, [r4, #0]
 8016c0a:	bd38      	pop	{r3, r4, r5, pc}
 8016c0c:	240013a4 	.word	0x240013a4

08016c10 <_close_r>:
 8016c10:	b538      	push	{r3, r4, r5, lr}
 8016c12:	4d06      	ldr	r5, [pc, #24]	; (8016c2c <_close_r+0x1c>)
 8016c14:	2300      	movs	r3, #0
 8016c16:	4604      	mov	r4, r0
 8016c18:	4608      	mov	r0, r1
 8016c1a:	602b      	str	r3, [r5, #0]
 8016c1c:	f7f2 f813 	bl	8008c46 <_close>
 8016c20:	1c43      	adds	r3, r0, #1
 8016c22:	d102      	bne.n	8016c2a <_close_r+0x1a>
 8016c24:	682b      	ldr	r3, [r5, #0]
 8016c26:	b103      	cbz	r3, 8016c2a <_close_r+0x1a>
 8016c28:	6023      	str	r3, [r4, #0]
 8016c2a:	bd38      	pop	{r3, r4, r5, pc}
 8016c2c:	240013a4 	.word	0x240013a4

08016c30 <_fstat_r>:
 8016c30:	b538      	push	{r3, r4, r5, lr}
 8016c32:	4d07      	ldr	r5, [pc, #28]	; (8016c50 <_fstat_r+0x20>)
 8016c34:	2300      	movs	r3, #0
 8016c36:	4604      	mov	r4, r0
 8016c38:	4608      	mov	r0, r1
 8016c3a:	4611      	mov	r1, r2
 8016c3c:	602b      	str	r3, [r5, #0]
 8016c3e:	f7f2 f80e 	bl	8008c5e <_fstat>
 8016c42:	1c43      	adds	r3, r0, #1
 8016c44:	d102      	bne.n	8016c4c <_fstat_r+0x1c>
 8016c46:	682b      	ldr	r3, [r5, #0]
 8016c48:	b103      	cbz	r3, 8016c4c <_fstat_r+0x1c>
 8016c4a:	6023      	str	r3, [r4, #0]
 8016c4c:	bd38      	pop	{r3, r4, r5, pc}
 8016c4e:	bf00      	nop
 8016c50:	240013a4 	.word	0x240013a4

08016c54 <_isatty_r>:
 8016c54:	b538      	push	{r3, r4, r5, lr}
 8016c56:	4d06      	ldr	r5, [pc, #24]	; (8016c70 <_isatty_r+0x1c>)
 8016c58:	2300      	movs	r3, #0
 8016c5a:	4604      	mov	r4, r0
 8016c5c:	4608      	mov	r0, r1
 8016c5e:	602b      	str	r3, [r5, #0]
 8016c60:	f7f2 f80d 	bl	8008c7e <_isatty>
 8016c64:	1c43      	adds	r3, r0, #1
 8016c66:	d102      	bne.n	8016c6e <_isatty_r+0x1a>
 8016c68:	682b      	ldr	r3, [r5, #0]
 8016c6a:	b103      	cbz	r3, 8016c6e <_isatty_r+0x1a>
 8016c6c:	6023      	str	r3, [r4, #0]
 8016c6e:	bd38      	pop	{r3, r4, r5, pc}
 8016c70:	240013a4 	.word	0x240013a4

08016c74 <_lseek_r>:
 8016c74:	b538      	push	{r3, r4, r5, lr}
 8016c76:	4d07      	ldr	r5, [pc, #28]	; (8016c94 <_lseek_r+0x20>)
 8016c78:	4604      	mov	r4, r0
 8016c7a:	4608      	mov	r0, r1
 8016c7c:	4611      	mov	r1, r2
 8016c7e:	2200      	movs	r2, #0
 8016c80:	602a      	str	r2, [r5, #0]
 8016c82:	461a      	mov	r2, r3
 8016c84:	f7f2 f806 	bl	8008c94 <_lseek>
 8016c88:	1c43      	adds	r3, r0, #1
 8016c8a:	d102      	bne.n	8016c92 <_lseek_r+0x1e>
 8016c8c:	682b      	ldr	r3, [r5, #0]
 8016c8e:	b103      	cbz	r3, 8016c92 <_lseek_r+0x1e>
 8016c90:	6023      	str	r3, [r4, #0]
 8016c92:	bd38      	pop	{r3, r4, r5, pc}
 8016c94:	240013a4 	.word	0x240013a4

08016c98 <_read_r>:
 8016c98:	b538      	push	{r3, r4, r5, lr}
 8016c9a:	4d07      	ldr	r5, [pc, #28]	; (8016cb8 <_read_r+0x20>)
 8016c9c:	4604      	mov	r4, r0
 8016c9e:	4608      	mov	r0, r1
 8016ca0:	4611      	mov	r1, r2
 8016ca2:	2200      	movs	r2, #0
 8016ca4:	602a      	str	r2, [r5, #0]
 8016ca6:	461a      	mov	r2, r3
 8016ca8:	f7f1 ff94 	bl	8008bd4 <_read>
 8016cac:	1c43      	adds	r3, r0, #1
 8016cae:	d102      	bne.n	8016cb6 <_read_r+0x1e>
 8016cb0:	682b      	ldr	r3, [r5, #0]
 8016cb2:	b103      	cbz	r3, 8016cb6 <_read_r+0x1e>
 8016cb4:	6023      	str	r3, [r4, #0]
 8016cb6:	bd38      	pop	{r3, r4, r5, pc}
 8016cb8:	240013a4 	.word	0x240013a4

08016cbc <checkint>:
 8016cbc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016cc0:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8016cc4:	429a      	cmp	r2, r3
 8016cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cc8:	dd2b      	ble.n	8016d22 <checkint+0x66>
 8016cca:	f240 4333 	movw	r3, #1075	; 0x433
 8016cce:	429a      	cmp	r2, r3
 8016cd0:	dc25      	bgt.n	8016d1e <checkint+0x62>
 8016cd2:	1a9b      	subs	r3, r3, r2
 8016cd4:	f1a3 0620 	sub.w	r6, r3, #32
 8016cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8016cdc:	fa02 f606 	lsl.w	r6, r2, r6
 8016ce0:	fa02 f403 	lsl.w	r4, r2, r3
 8016ce4:	f1c3 0520 	rsb	r5, r3, #32
 8016ce8:	4334      	orrs	r4, r6
 8016cea:	fa22 f505 	lsr.w	r5, r2, r5
 8016cee:	432c      	orrs	r4, r5
 8016cf0:	409a      	lsls	r2, r3
 8016cf2:	ea20 0602 	bic.w	r6, r0, r2
 8016cf6:	ea21 0704 	bic.w	r7, r1, r4
 8016cfa:	ea56 0207 	orrs.w	r2, r6, r7
 8016cfe:	f1a3 0420 	sub.w	r4, r3, #32
 8016d02:	f1c3 0220 	rsb	r2, r3, #32
 8016d06:	d10c      	bne.n	8016d22 <checkint+0x66>
 8016d08:	40d8      	lsrs	r0, r3
 8016d0a:	fa01 f302 	lsl.w	r3, r1, r2
 8016d0e:	4318      	orrs	r0, r3
 8016d10:	40e1      	lsrs	r1, r4
 8016d12:	4308      	orrs	r0, r1
 8016d14:	f000 0301 	and.w	r3, r0, #1
 8016d18:	f1c3 0002 	rsb	r0, r3, #2
 8016d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016d1e:	2002      	movs	r0, #2
 8016d20:	e7fc      	b.n	8016d1c <checkint+0x60>
 8016d22:	2000      	movs	r0, #0
 8016d24:	e7fa      	b.n	8016d1c <checkint+0x60>
	...

08016d28 <pow>:
 8016d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d2c:	ed2d 8b0a 	vpush	{d8-d12}
 8016d30:	b09b      	sub	sp, #108	; 0x6c
 8016d32:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016d36:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8016d3a:	ed8d 1b00 	vstr	d1, [sp]
 8016d3e:	ea4f 5915 	mov.w	r9, r5, lsr #20
 8016d42:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016d46:	f109 30ff 	add.w	r0, r9, #4294967295
 8016d4a:	f240 71fd 	movw	r1, #2045	; 0x7fd
 8016d4e:	4288      	cmp	r0, r1
 8016d50:	46cc      	mov	ip, r9
 8016d52:	ea4f 5817 	mov.w	r8, r7, lsr #20
 8016d56:	d806      	bhi.n	8016d66 <pow+0x3e>
 8016d58:	f3c8 010a 	ubfx	r1, r8, #0, #11
 8016d5c:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 8016d60:	297f      	cmp	r1, #127	; 0x7f
 8016d62:	f240 81ab 	bls.w	80170bc <pow+0x394>
 8016d66:	19b1      	adds	r1, r6, r6
 8016d68:	9104      	str	r1, [sp, #16]
 8016d6a:	eb47 0107 	adc.w	r1, r7, r7
 8016d6e:	9105      	str	r1, [sp, #20]
 8016d70:	9904      	ldr	r1, [sp, #16]
 8016d72:	f111 31ff 	adds.w	r1, r1, #4294967295
 8016d76:	460a      	mov	r2, r1
 8016d78:	9905      	ldr	r1, [sp, #20]
 8016d7a:	f141 31ff 	adc.w	r1, r1, #4294967295
 8016d7e:	460b      	mov	r3, r1
 8016d80:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 8016d84:	f06f 0001 	mvn.w	r0, #1
 8016d88:	4299      	cmp	r1, r3
 8016d8a:	bf08      	it	eq
 8016d8c:	4290      	cmpeq	r0, r2
 8016d8e:	d260      	bcs.n	8016e52 <pow+0x12a>
 8016d90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016d94:	4313      	orrs	r3, r2
 8016d96:	d11a      	bne.n	8016dce <pow+0xa6>
 8016d98:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 8016d9c:	1923      	adds	r3, r4, r4
 8016d9e:	930c      	str	r3, [sp, #48]	; 0x30
 8016da0:	eb42 0302 	adc.w	r3, r2, r2
 8016da4:	930d      	str	r3, [sp, #52]	; 0x34
 8016da6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016daa:	4bcf      	ldr	r3, [pc, #828]	; (80170e8 <pow+0x3c0>)
 8016dac:	2200      	movs	r2, #0
 8016dae:	428b      	cmp	r3, r1
 8016db0:	bf08      	it	eq
 8016db2:	4282      	cmpeq	r2, r0
 8016db4:	f080 8265 	bcs.w	8017282 <pow+0x55a>
 8016db8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016dbc:	ed9d 6b00 	vldr	d6, [sp]
 8016dc0:	ee37 0b06 	vadd.f64	d0, d7, d6
 8016dc4:	b01b      	add	sp, #108	; 0x6c
 8016dc6:	ecbd 8b0a 	vpop	{d8-d12}
 8016dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dce:	49c7      	ldr	r1, [pc, #796]	; (80170ec <pow+0x3c4>)
 8016dd0:	2000      	movs	r0, #0
 8016dd2:	428d      	cmp	r5, r1
 8016dd4:	bf08      	it	eq
 8016dd6:	4284      	cmpeq	r4, r0
 8016dd8:	d10b      	bne.n	8016df2 <pow+0xca>
 8016dda:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8016dde:	19b3      	adds	r3, r6, r6
 8016de0:	930e      	str	r3, [sp, #56]	; 0x38
 8016de2:	eb42 0302 	adc.w	r3, r2, r2
 8016de6:	930f      	str	r3, [sp, #60]	; 0x3c
 8016de8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016dec:	4bbe      	ldr	r3, [pc, #760]	; (80170e8 <pow+0x3c0>)
 8016dee:	2200      	movs	r2, #0
 8016df0:	e7dd      	b.n	8016dae <pow+0x86>
 8016df2:	1921      	adds	r1, r4, r4
 8016df4:	9106      	str	r1, [sp, #24]
 8016df6:	eb45 0105 	adc.w	r1, r5, r5
 8016dfa:	9107      	str	r1, [sp, #28]
 8016dfc:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8016e00:	49bb      	ldr	r1, [pc, #748]	; (80170f0 <pow+0x3c8>)
 8016e02:	2000      	movs	r0, #0
 8016e04:	42a1      	cmp	r1, r4
 8016e06:	bf08      	it	eq
 8016e08:	4298      	cmpeq	r0, r3
 8016e0a:	d3d5      	bcc.n	8016db8 <pow+0x90>
 8016e0c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8016e10:	428c      	cmp	r4, r1
 8016e12:	bf08      	it	eq
 8016e14:	4283      	cmpeq	r3, r0
 8016e16:	d1cf      	bne.n	8016db8 <pow+0x90>
 8016e18:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8016e1c:	49b5      	ldr	r1, [pc, #724]	; (80170f4 <pow+0x3cc>)
 8016e1e:	2000      	movs	r0, #0
 8016e20:	428c      	cmp	r4, r1
 8016e22:	bf08      	it	eq
 8016e24:	4283      	cmpeq	r3, r0
 8016e26:	f000 822c 	beq.w	8017282 <pow+0x55a>
 8016e2a:	49b3      	ldr	r1, [pc, #716]	; (80170f8 <pow+0x3d0>)
 8016e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8016e30:	42a1      	cmp	r1, r4
 8016e32:	bf08      	it	eq
 8016e34:	4298      	cmpeq	r0, r3
 8016e36:	ea6f 0307 	mvn.w	r3, r7
 8016e3a:	bf34      	ite	cc
 8016e3c:	2201      	movcc	r2, #1
 8016e3e:	2200      	movcs	r2, #0
 8016e40:	0fdb      	lsrs	r3, r3, #31
 8016e42:	429a      	cmp	r2, r3
 8016e44:	f040 821a 	bne.w	801727c <pow+0x554>
 8016e48:	ed9d 7b00 	vldr	d7, [sp]
 8016e4c:	ee27 0b07 	vmul.f64	d0, d7, d7
 8016e50:	e7b8      	b.n	8016dc4 <pow+0x9c>
 8016e52:	1923      	adds	r3, r4, r4
 8016e54:	9308      	str	r3, [sp, #32]
 8016e56:	eb45 0305 	adc.w	r3, r5, r5
 8016e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8016e5c:	9b08      	ldr	r3, [sp, #32]
 8016e5e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8016e62:	9310      	str	r3, [sp, #64]	; 0x40
 8016e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e66:	f143 33ff 	adc.w	r3, r3, #4294967295
 8016e6a:	9311      	str	r3, [sp, #68]	; 0x44
 8016e6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016e70:	4299      	cmp	r1, r3
 8016e72:	bf08      	it	eq
 8016e74:	4290      	cmpeq	r0, r2
 8016e76:	d22d      	bcs.n	8016ed4 <pow+0x1ac>
 8016e78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016e7c:	2c00      	cmp	r4, #0
 8016e7e:	f175 0300 	sbcs.w	r3, r5, #0
 8016e82:	ee27 0b07 	vmul.f64	d0, d7, d7
 8016e86:	da16      	bge.n	8016eb6 <pow+0x18e>
 8016e88:	4630      	mov	r0, r6
 8016e8a:	4639      	mov	r1, r7
 8016e8c:	f7ff ff16 	bl	8016cbc <checkint>
 8016e90:	2801      	cmp	r0, #1
 8016e92:	d110      	bne.n	8016eb6 <pow+0x18e>
 8016e94:	eeb1 0b40 	vneg.f64	d0, d0
 8016e98:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8016e9c:	4323      	orrs	r3, r4
 8016e9e:	d10c      	bne.n	8016eba <pow+0x192>
 8016ea0:	2e00      	cmp	r6, #0
 8016ea2:	f177 0300 	sbcs.w	r3, r7, #0
 8016ea6:	da8d      	bge.n	8016dc4 <pow+0x9c>
 8016ea8:	b01b      	add	sp, #108	; 0x6c
 8016eaa:	ecbd 8b0a 	vpop	{d8-d12}
 8016eae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016eb2:	f001 b899 	b.w	8017fe8 <__math_divzero>
 8016eb6:	2000      	movs	r0, #0
 8016eb8:	e7ee      	b.n	8016e98 <pow+0x170>
 8016eba:	2e00      	cmp	r6, #0
 8016ebc:	f177 0300 	sbcs.w	r3, r7, #0
 8016ec0:	da80      	bge.n	8016dc4 <pow+0x9c>
 8016ec2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8016ec6:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8016eca:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8016ece:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8016ed2:	e777      	b.n	8016dc4 <pow+0x9c>
 8016ed4:	2c00      	cmp	r4, #0
 8016ed6:	f175 0300 	sbcs.w	r3, r5, #0
 8016eda:	da35      	bge.n	8016f48 <pow+0x220>
 8016edc:	4630      	mov	r0, r6
 8016ede:	4639      	mov	r1, r7
 8016ee0:	f7ff feec 	bl	8016cbc <checkint>
 8016ee4:	b940      	cbnz	r0, 8016ef8 <pow+0x1d0>
 8016ee6:	ed9d 0b02 	vldr	d0, [sp, #8]
 8016eea:	b01b      	add	sp, #108	; 0x6c
 8016eec:	ecbd 8b0a 	vpop	{d8-d12}
 8016ef0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ef4:	f001 b890 	b.w	8018018 <__math_invalid>
 8016ef8:	2801      	cmp	r0, #1
 8016efa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016efe:	bf14      	ite	ne
 8016f00:	2000      	movne	r0, #0
 8016f02:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8016f06:	461d      	mov	r5, r3
 8016f08:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 8016f0c:	f3c8 030a 	ubfx	r3, r8, #0, #11
 8016f10:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 8016f14:	2a7f      	cmp	r2, #127	; 0x7f
 8016f16:	d933      	bls.n	8016f80 <pow+0x258>
 8016f18:	4974      	ldr	r1, [pc, #464]	; (80170ec <pow+0x3c4>)
 8016f1a:	2000      	movs	r0, #0
 8016f1c:	428d      	cmp	r5, r1
 8016f1e:	bf08      	it	eq
 8016f20:	4284      	cmpeq	r4, r0
 8016f22:	f000 81ae 	beq.w	8017282 <pow+0x55a>
 8016f26:	f240 32bd 	movw	r2, #957	; 0x3bd
 8016f2a:	4293      	cmp	r3, r2
 8016f2c:	d80e      	bhi.n	8016f4c <pow+0x224>
 8016f2e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8016f32:	ed9d 7b00 	vldr	d7, [sp]
 8016f36:	42a9      	cmp	r1, r5
 8016f38:	bf08      	it	eq
 8016f3a:	42a0      	cmpeq	r0, r4
 8016f3c:	bf34      	ite	cc
 8016f3e:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 8016f42:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 8016f46:	e73d      	b.n	8016dc4 <pow+0x9c>
 8016f48:	2000      	movs	r0, #0
 8016f4a:	e7df      	b.n	8016f0c <pow+0x1e4>
 8016f4c:	42a9      	cmp	r1, r5
 8016f4e:	bf08      	it	eq
 8016f50:	42a0      	cmpeq	r0, r4
 8016f52:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8016f56:	bf2c      	ite	cs
 8016f58:	2301      	movcs	r3, #1
 8016f5a:	2300      	movcc	r3, #0
 8016f5c:	4590      	cmp	r8, r2
 8016f5e:	bf8c      	ite	hi
 8016f60:	f04f 0800 	movhi.w	r8, #0
 8016f64:	f04f 0801 	movls.w	r8, #1
 8016f68:	4543      	cmp	r3, r8
 8016f6a:	f04f 0000 	mov.w	r0, #0
 8016f6e:	f000 80af 	beq.w	80170d0 <pow+0x3a8>
 8016f72:	b01b      	add	sp, #108	; 0x6c
 8016f74:	ecbd 8b0a 	vpop	{d8-d12}
 8016f78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f7c:	f001 b82c 	b.w	8017fd8 <__math_oflow>
 8016f80:	f1bc 0f00 	cmp.w	ip, #0
 8016f84:	d10e      	bne.n	8016fa4 <pow+0x27c>
 8016f86:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80170e0 <pow+0x3b8>
 8016f8a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8016f8e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016f92:	ec57 6b17 	vmov	r6, r7, d7
 8016f96:	4b59      	ldr	r3, [pc, #356]	; (80170fc <pow+0x3d4>)
 8016f98:	2100      	movs	r1, #0
 8016f9a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8016f9e:	1874      	adds	r4, r6, r1
 8016fa0:	eb42 0503 	adc.w	r5, r2, r3
 8016fa4:	2300      	movs	r3, #0
 8016fa6:	18e3      	adds	r3, r4, r3
 8016fa8:	4b55      	ldr	r3, [pc, #340]	; (8017100 <pow+0x3d8>)
 8016faa:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8016fae:	eb45 0303 	adc.w	r3, r5, r3
 8016fb2:	1519      	asrs	r1, r3, #20
 8016fb4:	ee03 1a10 	vmov	s6, r1
 8016fb8:	0d1e      	lsrs	r6, r3, #20
 8016fba:	2100      	movs	r1, #0
 8016fbc:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8016fc0:	0536      	lsls	r6, r6, #20
 8016fc2:	1a63      	subs	r3, r4, r1
 8016fc4:	9312      	str	r3, [sp, #72]	; 0x48
 8016fc6:	eb65 0306 	sbc.w	r3, r5, r6
 8016fca:	9313      	str	r3, [sp, #76]	; 0x4c
 8016fcc:	4b4d      	ldr	r3, [pc, #308]	; (8017104 <pow+0x3dc>)
 8016fce:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 8016fd2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8016fd6:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 8016fda:	eea5 6b07 	vfma.f64	d6, d5, d7
 8016fde:	ed93 7b00 	vldr	d7, [r3]
 8016fe2:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 8016fe6:	ed93 4b02 	vldr	d4, [r3, #8]
 8016fea:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8016fee:	eea3 5b07 	vfma.f64	d5, d3, d7
 8016ff2:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 8016ff6:	ee36 9b05 	vadd.f64	d9, d6, d5
 8016ffa:	ee35 5b49 	vsub.f64	d5, d5, d9
 8016ffe:	eea3 7b04 	vfma.f64	d7, d3, d4
 8017002:	ed93 4b04 	vldr	d4, [r3, #16]
 8017006:	ee35 5b06 	vadd.f64	d5, d5, d6
 801700a:	ee37 7b05 	vadd.f64	d7, d7, d5
 801700e:	ee26 4b04 	vmul.f64	d4, d6, d4
 8017012:	ed93 3b08 	vldr	d3, [r3, #32]
 8017016:	ee26 0b04 	vmul.f64	d0, d6, d4
 801701a:	eeb0 8b40 	vmov.f64	d8, d0
 801701e:	ee94 8b06 	vfnms.f64	d8, d4, d6
 8017022:	ed93 4b06 	vldr	d4, [r3, #24]
 8017026:	ee26 ab00 	vmul.f64	d10, d6, d0
 801702a:	ee39 1b00 	vadd.f64	d1, d9, d0
 801702e:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8017032:	eea6 4b03 	vfma.f64	d4, d6, d3
 8017036:	ee39 9b41 	vsub.f64	d9, d9, d1
 801703a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 801703e:	ee37 8b08 	vadd.f64	d8, d7, d8
 8017042:	ee39 9b00 	vadd.f64	d9, d9, d0
 8017046:	eea6 3b02 	vfma.f64	d3, d6, d2
 801704a:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 801704e:	ee38 9b09 	vadd.f64	d9, d8, d9
 8017052:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 8017056:	eea6 2b0c 	vfma.f64	d2, d6, d12
 801705a:	ed9d 6b00 	vldr	d6, [sp]
 801705e:	eea0 3b02 	vfma.f64	d3, d0, d2
 8017062:	eea0 4b03 	vfma.f64	d4, d0, d3
 8017066:	eeaa 9b04 	vfma.f64	d9, d10, d4
 801706a:	ee31 7b09 	vadd.f64	d7, d1, d9
 801706e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8017072:	ed8d 6b02 	vstr	d6, [sp, #8]
 8017076:	eeb0 3b46 	vmov.f64	d3, d6
 801707a:	ee31 1b47 	vsub.f64	d1, d1, d7
 801707e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017082:	ee31 9b09 	vadd.f64	d9, d1, d9
 8017086:	ed9d 6b00 	vldr	d6, [sp]
 801708a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 801708e:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 8017092:	193c      	adds	r4, r7, r4
 8017094:	2c3e      	cmp	r4, #62	; 0x3e
 8017096:	ee96 3b07 	vfnms.f64	d3, d6, d7
 801709a:	eea6 3b09 	vfma.f64	d3, d6, d9
 801709e:	d934      	bls.n	801710a <pow+0x3e2>
 80170a0:	428c      	cmp	r4, r1
 80170a2:	da0d      	bge.n	80170c0 <pow+0x398>
 80170a4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80170a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80170ac:	ee37 0b00 	vadd.f64	d0, d7, d0
 80170b0:	2800      	cmp	r0, #0
 80170b2:	f43f ae87 	beq.w	8016dc4 <pow+0x9c>
 80170b6:	eeb1 0b40 	vneg.f64	d0, d0
 80170ba:	e683      	b.n	8016dc4 <pow+0x9c>
 80170bc:	2000      	movs	r0, #0
 80170be:	e771      	b.n	8016fa4 <pow+0x27c>
 80170c0:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 80170c4:	d920      	bls.n	8017108 <pow+0x3e0>
 80170c6:	2a00      	cmp	r2, #0
 80170c8:	f173 0300 	sbcs.w	r3, r3, #0
 80170cc:	f6bf af51 	bge.w	8016f72 <pow+0x24a>
 80170d0:	b01b      	add	sp, #108	; 0x6c
 80170d2:	ecbd 8b0a 	vpop	{d8-d12}
 80170d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170da:	f000 bf75 	b.w	8017fc8 <__math_uflow>
 80170de:	bf00      	nop
 80170e0:	00000000 	.word	0x00000000
 80170e4:	43300000 	.word	0x43300000
 80170e8:	fff00000 	.word	0xfff00000
 80170ec:	3ff00000 	.word	0x3ff00000
 80170f0:	ffe00000 	.word	0xffe00000
 80170f4:	7fe00000 	.word	0x7fe00000
 80170f8:	7fdfffff 	.word	0x7fdfffff
 80170fc:	fcc00000 	.word	0xfcc00000
 8017100:	c0196aab 	.word	0xc0196aab
 8017104:	08018730 	.word	0x08018730
 8017108:	460f      	mov	r7, r1
 801710a:	4e65      	ldr	r6, [pc, #404]	; (80172a0 <pow+0x578>)
 801710c:	ed9d 4b02 	vldr	d4, [sp, #8]
 8017110:	ed96 6b02 	vldr	d6, [r6, #8]
 8017114:	ed96 7b00 	vldr	d7, [r6]
 8017118:	eeb0 5b46 	vmov.f64	d5, d6
 801711c:	eea4 5b07 	vfma.f64	d5, d4, d7
 8017120:	ed8d 5b00 	vstr	d5, [sp]
 8017124:	ee35 6b46 	vsub.f64	d6, d5, d6
 8017128:	eeb0 5b44 	vmov.f64	d5, d4
 801712c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017130:	ed96 7b04 	vldr	d7, [r6, #16]
 8017134:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8017138:	eea6 5b07 	vfma.f64	d5, d6, d7
 801713c:	eeb0 7b45 	vmov.f64	d7, d5
 8017140:	ed96 5b06 	vldr	d5, [r6, #24]
 8017144:	1849      	adds	r1, r1, r1
 8017146:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 801714a:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 801714e:	eea6 7b05 	vfma.f64	d7, d6, d5
 8017152:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 8017156:	ee33 3b07 	vadd.f64	d3, d3, d7
 801715a:	ee23 6b03 	vmul.f64	d6, d3, d3
 801715e:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 8017162:	ed96 5b08 	vldr	d5, [r6, #32]
 8017166:	ee33 7b07 	vadd.f64	d7, d3, d7
 801716a:	1814      	adds	r4, r2, r0
 801716c:	0365      	lsls	r5, r4, #13
 801716e:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 8017172:	eea3 5b04 	vfma.f64	d5, d3, d4
 8017176:	eea6 7b05 	vfma.f64	d7, d6, d5
 801717a:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 801717e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8017182:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 8017186:	2000      	movs	r0, #0
 8017188:	eb10 0a04 	adds.w	sl, r0, r4
 801718c:	eea3 5b04 	vfma.f64	d5, d3, d4
 8017190:	eb45 0b0c 	adc.w	fp, r5, ip
 8017194:	eea6 7b05 	vfma.f64	d7, d6, d5
 8017198:	2f00      	cmp	r7, #0
 801719a:	d16a      	bne.n	8017272 <pow+0x54a>
 801719c:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 80171a0:	4639      	mov	r1, r7
 80171a2:	ea50 0301 	orrs.w	r3, r0, r1
 80171a6:	f04f 0300 	mov.w	r3, #0
 80171aa:	d115      	bne.n	80171d8 <pow+0x4b0>
 80171ac:	eb1a 0303 	adds.w	r3, sl, r3
 80171b0:	ee0b 3a10 	vmov	s22, r3
 80171b4:	4b3b      	ldr	r3, [pc, #236]	; (80172a4 <pow+0x57c>)
 80171b6:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8017288 <pow+0x560>
 80171ba:	eb4b 0303 	adc.w	r3, fp, r3
 80171be:	ee0b 3a90 	vmov	s23, r3
 80171c2:	eea7 bb0b 	vfma.f64	d11, d7, d11
 80171c6:	ee2b 0b00 	vmul.f64	d0, d11, d0
 80171ca:	b01b      	add	sp, #108	; 0x6c
 80171cc:	ecbd 8b0a 	vpop	{d8-d12}
 80171d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80171d4:	f000 bf38 	b.w	8018048 <__math_check_oflow>
 80171d8:	eb1a 0303 	adds.w	r3, sl, r3
 80171dc:	930a      	str	r3, [sp, #40]	; 0x28
 80171de:	4b32      	ldr	r3, [pc, #200]	; (80172a8 <pow+0x580>)
 80171e0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80171e4:	eb4b 0303 	adc.w	r3, fp, r3
 80171e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80171ea:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80171ee:	ee27 6b05 	vmul.f64	d6, d7, d5
 80171f2:	ee35 7b06 	vadd.f64	d7, d5, d6
 80171f6:	eeb0 3bc7 	vabs.f64	d3, d7
 80171fa:	eeb4 3bc4 	vcmpe.f64	d3, d4
 80171fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017202:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8017290 <pow+0x568>
 8017206:	d52b      	bpl.n	8017260 <pow+0x538>
 8017208:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801720c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8017210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017214:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8017218:	ee35 6b06 	vadd.f64	d6, d5, d6
 801721c:	bf48      	it	mi
 801721e:	eeb0 4b43 	vmovmi.f64	d4, d3
 8017222:	ee37 3b04 	vadd.f64	d3, d7, d4
 8017226:	ee34 5b43 	vsub.f64	d5, d4, d3
 801722a:	ee35 7b07 	vadd.f64	d7, d5, d7
 801722e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017232:	ee37 7b03 	vadd.f64	d7, d7, d3
 8017236:	ee37 7b44 	vsub.f64	d7, d7, d4
 801723a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801723e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017242:	d105      	bne.n	8017250 <pow+0x528>
 8017244:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017246:	463a      	mov	r2, r7
 8017248:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801724c:	ec43 2b17 	vmov	d7, r2, r3
 8017250:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 8017254:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 8017258:	ee26 6b00 	vmul.f64	d6, d6, d0
 801725c:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 8017260:	ee27 0b00 	vmul.f64	d0, d7, d0
 8017264:	b01b      	add	sp, #108	; 0x6c
 8017266:	ecbd 8b0a 	vpop	{d8-d12}
 801726a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801726e:	f000 bee2 	b.w	8018036 <__math_check_uflow>
 8017272:	ec4b ab10 	vmov	d0, sl, fp
 8017276:	eea7 0b00 	vfma.f64	d0, d7, d0
 801727a:	e5a3      	b.n	8016dc4 <pow+0x9c>
 801727c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8017298 <pow+0x570>
 8017280:	e5a0      	b.n	8016dc4 <pow+0x9c>
 8017282:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017286:	e59d      	b.n	8016dc4 <pow+0x9c>
 8017288:	00000000 	.word	0x00000000
 801728c:	7f000000 	.word	0x7f000000
 8017290:	00000000 	.word	0x00000000
 8017294:	00100000 	.word	0x00100000
	...
 80172a0:	08019900 	.word	0x08019900
 80172a4:	c0f00000 	.word	0xc0f00000
 80172a8:	3fe00000 	.word	0x3fe00000
 80172ac:	00000000 	.word	0x00000000

080172b0 <cos>:
 80172b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80172b2:	eeb0 7b40 	vmov.f64	d7, d0
 80172b6:	ee17 3a90 	vmov	r3, s15
 80172ba:	4a1f      	ldr	r2, [pc, #124]	; (8017338 <cos+0x88>)
 80172bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80172c0:	4293      	cmp	r3, r2
 80172c2:	dc04      	bgt.n	80172ce <cos+0x1e>
 80172c4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8017330 <cos+0x80>
 80172c8:	f000 fb1e 	bl	8017908 <__kernel_cos>
 80172cc:	e004      	b.n	80172d8 <cos+0x28>
 80172ce:	4a1b      	ldr	r2, [pc, #108]	; (801733c <cos+0x8c>)
 80172d0:	4293      	cmp	r3, r2
 80172d2:	dd04      	ble.n	80172de <cos+0x2e>
 80172d4:	ee30 0b40 	vsub.f64	d0, d0, d0
 80172d8:	b005      	add	sp, #20
 80172da:	f85d fb04 	ldr.w	pc, [sp], #4
 80172de:	4668      	mov	r0, sp
 80172e0:	f000 f9ce 	bl	8017680 <__ieee754_rem_pio2>
 80172e4:	f000 0003 	and.w	r0, r0, #3
 80172e8:	2801      	cmp	r0, #1
 80172ea:	d007      	beq.n	80172fc <cos+0x4c>
 80172ec:	2802      	cmp	r0, #2
 80172ee:	d00e      	beq.n	801730e <cos+0x5e>
 80172f0:	b9a0      	cbnz	r0, 801731c <cos+0x6c>
 80172f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80172f6:	ed9d 0b00 	vldr	d0, [sp]
 80172fa:	e7e5      	b.n	80172c8 <cos+0x18>
 80172fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017300:	ed9d 0b00 	vldr	d0, [sp]
 8017304:	f000 fdec 	bl	8017ee0 <__kernel_sin>
 8017308:	eeb1 0b40 	vneg.f64	d0, d0
 801730c:	e7e4      	b.n	80172d8 <cos+0x28>
 801730e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017312:	ed9d 0b00 	vldr	d0, [sp]
 8017316:	f000 faf7 	bl	8017908 <__kernel_cos>
 801731a:	e7f5      	b.n	8017308 <cos+0x58>
 801731c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017320:	ed9d 0b00 	vldr	d0, [sp]
 8017324:	2001      	movs	r0, #1
 8017326:	f000 fddb 	bl	8017ee0 <__kernel_sin>
 801732a:	e7d5      	b.n	80172d8 <cos+0x28>
 801732c:	f3af 8000 	nop.w
	...
 8017338:	3fe921fb 	.word	0x3fe921fb
 801733c:	7fefffff 	.word	0x7fefffff

08017340 <fabs>:
 8017340:	ec51 0b10 	vmov	r0, r1, d0
 8017344:	ee10 2a10 	vmov	r2, s0
 8017348:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801734c:	ec43 2b10 	vmov	d0, r2, r3
 8017350:	4770      	bx	lr
 8017352:	0000      	movs	r0, r0
 8017354:	0000      	movs	r0, r0
	...

08017358 <sin>:
 8017358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801735a:	eeb0 7b40 	vmov.f64	d7, d0
 801735e:	ee17 3a90 	vmov	r3, s15
 8017362:	4a1f      	ldr	r2, [pc, #124]	; (80173e0 <sin+0x88>)
 8017364:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017368:	4293      	cmp	r3, r2
 801736a:	dc05      	bgt.n	8017378 <sin+0x20>
 801736c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80173d8 <sin+0x80>
 8017370:	2000      	movs	r0, #0
 8017372:	f000 fdb5 	bl	8017ee0 <__kernel_sin>
 8017376:	e004      	b.n	8017382 <sin+0x2a>
 8017378:	4a1a      	ldr	r2, [pc, #104]	; (80173e4 <sin+0x8c>)
 801737a:	4293      	cmp	r3, r2
 801737c:	dd04      	ble.n	8017388 <sin+0x30>
 801737e:	ee30 0b40 	vsub.f64	d0, d0, d0
 8017382:	b005      	add	sp, #20
 8017384:	f85d fb04 	ldr.w	pc, [sp], #4
 8017388:	4668      	mov	r0, sp
 801738a:	f000 f979 	bl	8017680 <__ieee754_rem_pio2>
 801738e:	f000 0003 	and.w	r0, r0, #3
 8017392:	2801      	cmp	r0, #1
 8017394:	d008      	beq.n	80173a8 <sin+0x50>
 8017396:	2802      	cmp	r0, #2
 8017398:	d00d      	beq.n	80173b6 <sin+0x5e>
 801739a:	b9b0      	cbnz	r0, 80173ca <sin+0x72>
 801739c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80173a0:	ed9d 0b00 	vldr	d0, [sp]
 80173a4:	2001      	movs	r0, #1
 80173a6:	e7e4      	b.n	8017372 <sin+0x1a>
 80173a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80173ac:	ed9d 0b00 	vldr	d0, [sp]
 80173b0:	f000 faaa 	bl	8017908 <__kernel_cos>
 80173b4:	e7e5      	b.n	8017382 <sin+0x2a>
 80173b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80173ba:	ed9d 0b00 	vldr	d0, [sp]
 80173be:	2001      	movs	r0, #1
 80173c0:	f000 fd8e 	bl	8017ee0 <__kernel_sin>
 80173c4:	eeb1 0b40 	vneg.f64	d0, d0
 80173c8:	e7db      	b.n	8017382 <sin+0x2a>
 80173ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 80173ce:	ed9d 0b00 	vldr	d0, [sp]
 80173d2:	f000 fa99 	bl	8017908 <__kernel_cos>
 80173d6:	e7f5      	b.n	80173c4 <sin+0x6c>
	...
 80173e0:	3fe921fb 	.word	0x3fe921fb
 80173e4:	7fefffff 	.word	0x7fefffff

080173e8 <asin>:
 80173e8:	b508      	push	{r3, lr}
 80173ea:	ed2d 8b04 	vpush	{d8-d9}
 80173ee:	eeb0 8b40 	vmov.f64	d8, d0
 80173f2:	f000 f82d 	bl	8017450 <__ieee754_asin>
 80173f6:	4b13      	ldr	r3, [pc, #76]	; (8017444 <asin+0x5c>)
 80173f8:	eeb0 9b40 	vmov.f64	d9, d0
 80173fc:	f993 3000 	ldrsb.w	r3, [r3]
 8017400:	3301      	adds	r3, #1
 8017402:	d01a      	beq.n	801743a <asin+0x52>
 8017404:	eeb4 8b48 	vcmp.f64	d8, d8
 8017408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801740c:	d615      	bvs.n	801743a <asin+0x52>
 801740e:	eeb0 0b48 	vmov.f64	d0, d8
 8017412:	f7ff ff95 	bl	8017340 <fabs>
 8017416:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801741a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801741e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017422:	dd0a      	ble.n	801743a <asin+0x52>
 8017424:	f7fc ffd6 	bl	80143d4 <__errno>
 8017428:	ecbd 8b04 	vpop	{d8-d9}
 801742c:	2321      	movs	r3, #33	; 0x21
 801742e:	6003      	str	r3, [r0, #0]
 8017430:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017434:	4804      	ldr	r0, [pc, #16]	; (8017448 <asin+0x60>)
 8017436:	f000 be8f 	b.w	8018158 <nan>
 801743a:	eeb0 0b49 	vmov.f64	d0, d9
 801743e:	ecbd 8b04 	vpop	{d8-d9}
 8017442:	bd08      	pop	{r3, pc}
 8017444:	240001e0 	.word	0x240001e0
 8017448:	080185af 	.word	0x080185af
 801744c:	00000000 	.word	0x00000000

08017450 <__ieee754_asin>:
 8017450:	b530      	push	{r4, r5, lr}
 8017452:	ee10 5a90 	vmov	r5, s1
 8017456:	ed2d 8b06 	vpush	{d8-d10}
 801745a:	4b85      	ldr	r3, [pc, #532]	; (8017670 <__ieee754_asin+0x220>)
 801745c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8017460:	429c      	cmp	r4, r3
 8017462:	b083      	sub	sp, #12
 8017464:	dd1a      	ble.n	801749c <__ieee754_asin+0x4c>
 8017466:	ee10 3a10 	vmov	r3, s0
 801746a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801746e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8017472:	4323      	orrs	r3, r4
 8017474:	d10d      	bne.n	8017492 <__ieee754_asin+0x42>
 8017476:	ed9f 7b60 	vldr	d7, [pc, #384]	; 80175f8 <__ieee754_asin+0x1a8>
 801747a:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8017600 <__ieee754_asin+0x1b0>
 801747e:	ee20 7b07 	vmul.f64	d7, d0, d7
 8017482:	eea0 7b06 	vfma.f64	d7, d0, d6
 8017486:	eeb0 0b47 	vmov.f64	d0, d7
 801748a:	b003      	add	sp, #12
 801748c:	ecbd 8b06 	vpop	{d8-d10}
 8017490:	bd30      	pop	{r4, r5, pc}
 8017492:	ee30 7b40 	vsub.f64	d7, d0, d0
 8017496:	ee87 0b07 	vdiv.f64	d0, d7, d7
 801749a:	e7f6      	b.n	801748a <__ieee754_asin+0x3a>
 801749c:	4b75      	ldr	r3, [pc, #468]	; (8017674 <__ieee754_asin+0x224>)
 801749e:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 80174a2:	429c      	cmp	r4, r3
 80174a4:	dc0b      	bgt.n	80174be <__ieee754_asin+0x6e>
 80174a6:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 80174aa:	da56      	bge.n	801755a <__ieee754_asin+0x10a>
 80174ac:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8017608 <__ieee754_asin+0x1b8>
 80174b0:	ee30 7b07 	vadd.f64	d7, d0, d7
 80174b4:	eeb4 7bc9 	vcmpe.f64	d7, d9
 80174b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174bc:	dce5      	bgt.n	801748a <__ieee754_asin+0x3a>
 80174be:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80174c2:	f7ff ff3d 	bl	8017340 <fabs>
 80174c6:	ed9f 7b52 	vldr	d7, [pc, #328]	; 8017610 <__ieee754_asin+0x1c0>
 80174ca:	ee39 0b40 	vsub.f64	d0, d9, d0
 80174ce:	ee20 8b08 	vmul.f64	d8, d0, d8
 80174d2:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8017618 <__ieee754_asin+0x1c8>
 80174d6:	eeb0 0b48 	vmov.f64	d0, d8
 80174da:	eea8 6b07 	vfma.f64	d6, d8, d7
 80174de:	ed9f 7b50 	vldr	d7, [pc, #320]	; 8017620 <__ieee754_asin+0x1d0>
 80174e2:	eea6 7b08 	vfma.f64	d7, d6, d8
 80174e6:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8017628 <__ieee754_asin+0x1d8>
 80174ea:	ed9f ab51 	vldr	d10, [pc, #324]	; 8017630 <__ieee754_asin+0x1e0>
 80174ee:	eea7 6b08 	vfma.f64	d6, d7, d8
 80174f2:	ed9f 7b51 	vldr	d7, [pc, #324]	; 8017638 <__ieee754_asin+0x1e8>
 80174f6:	eea6 7b08 	vfma.f64	d7, d6, d8
 80174fa:	ed9f 6b51 	vldr	d6, [pc, #324]	; 8017640 <__ieee754_asin+0x1f0>
 80174fe:	eea7 ab08 	vfma.f64	d10, d7, d8
 8017502:	ee2a ab08 	vmul.f64	d10, d10, d8
 8017506:	ed9f 7b50 	vldr	d7, [pc, #320]	; 8017648 <__ieee754_asin+0x1f8>
 801750a:	eea8 7b06 	vfma.f64	d7, d8, d6
 801750e:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8017650 <__ieee754_asin+0x200>
 8017512:	eea7 6b08 	vfma.f64	d6, d7, d8
 8017516:	ed9f 7b50 	vldr	d7, [pc, #320]	; 8017658 <__ieee754_asin+0x208>
 801751a:	eea6 7b08 	vfma.f64	d7, d6, d8
 801751e:	eea7 9b08 	vfma.f64	d9, d7, d8
 8017522:	f000 f9ed 	bl	8017900 <__ieee754_sqrt>
 8017526:	ee8a 4b09 	vdiv.f64	d4, d10, d9
 801752a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801752e:	4b52      	ldr	r3, [pc, #328]	; (8017678 <__ieee754_asin+0x228>)
 8017530:	429c      	cmp	r4, r3
 8017532:	ed8d 0b00 	vstr	d0, [sp]
 8017536:	dd3f      	ble.n	80175b8 <__ieee754_asin+0x168>
 8017538:	eeb0 7b40 	vmov.f64	d7, d0
 801753c:	eea0 7b04 	vfma.f64	d7, d0, d4
 8017540:	ed9f 0b47 	vldr	d0, [pc, #284]	; 8017660 <__ieee754_asin+0x210>
 8017544:	eea7 0b05 	vfma.f64	d0, d7, d5
 8017548:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8017600 <__ieee754_asin+0x1b0>
 801754c:	ee37 0b40 	vsub.f64	d0, d7, d0
 8017550:	2d00      	cmp	r5, #0
 8017552:	bfd8      	it	le
 8017554:	eeb1 0b40 	vnegle.f64	d0, d0
 8017558:	e797      	b.n	801748a <__ieee754_asin+0x3a>
 801755a:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8017610 <__ieee754_asin+0x1c0>
 801755e:	ee20 7b00 	vmul.f64	d7, d0, d0
 8017562:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8017618 <__ieee754_asin+0x1c8>
 8017566:	eea7 6b05 	vfma.f64	d6, d7, d5
 801756a:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8017620 <__ieee754_asin+0x1d0>
 801756e:	eea6 5b07 	vfma.f64	d5, d6, d7
 8017572:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8017628 <__ieee754_asin+0x1d8>
 8017576:	eea5 6b07 	vfma.f64	d6, d5, d7
 801757a:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8017638 <__ieee754_asin+0x1e8>
 801757e:	eea6 5b07 	vfma.f64	d5, d6, d7
 8017582:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8017630 <__ieee754_asin+0x1e0>
 8017586:	ed9f 4b2e 	vldr	d4, [pc, #184]	; 8017640 <__ieee754_asin+0x1f0>
 801758a:	eea5 6b07 	vfma.f64	d6, d5, d7
 801758e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8017592:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8017648 <__ieee754_asin+0x1f8>
 8017596:	eea7 5b04 	vfma.f64	d5, d7, d4
 801759a:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8017650 <__ieee754_asin+0x200>
 801759e:	eea5 4b07 	vfma.f64	d4, d5, d7
 80175a2:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8017658 <__ieee754_asin+0x208>
 80175a6:	eea4 5b07 	vfma.f64	d5, d4, d7
 80175aa:	eea5 9b07 	vfma.f64	d9, d5, d7
 80175ae:	ee86 7b09 	vdiv.f64	d7, d6, d9
 80175b2:	eea0 0b07 	vfma.f64	d0, d0, d7
 80175b6:	e768      	b.n	801748a <__ieee754_asin+0x3a>
 80175b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80175bc:	ed9d 7b00 	vldr	d7, [sp]
 80175c0:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80175f8 <__ieee754_asin+0x1a8>
 80175c4:	2200      	movs	r2, #0
 80175c6:	ec43 2b16 	vmov	d6, r2, r3
 80175ca:	eea6 8b46 	vfms.f64	d8, d6, d6
 80175ce:	ee37 3b06 	vadd.f64	d3, d7, d6
 80175d2:	ee88 7b03 	vdiv.f64	d7, d8, d3
 80175d6:	eea7 0b45 	vfms.f64	d0, d7, d5
 80175da:	ed9d 7b00 	vldr	d7, [sp]
 80175de:	ee37 7b07 	vadd.f64	d7, d7, d7
 80175e2:	ee97 0b04 	vfnms.f64	d0, d7, d4
 80175e6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8017668 <__ieee754_asin+0x218>
 80175ea:	eeb0 4b47 	vmov.f64	d4, d7
 80175ee:	eea6 4b45 	vfms.f64	d4, d6, d5
 80175f2:	ee30 0b44 	vsub.f64	d0, d0, d4
 80175f6:	e7a9      	b.n	801754c <__ieee754_asin+0xfc>
 80175f8:	33145c07 	.word	0x33145c07
 80175fc:	3c91a626 	.word	0x3c91a626
 8017600:	54442d18 	.word	0x54442d18
 8017604:	3ff921fb 	.word	0x3ff921fb
 8017608:	8800759c 	.word	0x8800759c
 801760c:	7e37e43c 	.word	0x7e37e43c
 8017610:	0dfdf709 	.word	0x0dfdf709
 8017614:	3f023de1 	.word	0x3f023de1
 8017618:	7501b288 	.word	0x7501b288
 801761c:	3f49efe0 	.word	0x3f49efe0
 8017620:	b5688f3b 	.word	0xb5688f3b
 8017624:	bfa48228 	.word	0xbfa48228
 8017628:	0e884455 	.word	0x0e884455
 801762c:	3fc9c155 	.word	0x3fc9c155
 8017630:	55555555 	.word	0x55555555
 8017634:	3fc55555 	.word	0x3fc55555
 8017638:	03eb6f7d 	.word	0x03eb6f7d
 801763c:	bfd4d612 	.word	0xbfd4d612
 8017640:	b12e9282 	.word	0xb12e9282
 8017644:	3fb3b8c5 	.word	0x3fb3b8c5
 8017648:	1b8d0159 	.word	0x1b8d0159
 801764c:	bfe6066c 	.word	0xbfe6066c
 8017650:	9c598ac8 	.word	0x9c598ac8
 8017654:	40002ae5 	.word	0x40002ae5
 8017658:	1c8a2d4b 	.word	0x1c8a2d4b
 801765c:	c0033a27 	.word	0xc0033a27
 8017660:	33145c07 	.word	0x33145c07
 8017664:	bc91a626 	.word	0xbc91a626
 8017668:	54442d18 	.word	0x54442d18
 801766c:	3fe921fb 	.word	0x3fe921fb
 8017670:	3fefffff 	.word	0x3fefffff
 8017674:	3fdfffff 	.word	0x3fdfffff
 8017678:	3fef3332 	.word	0x3fef3332
 801767c:	00000000 	.word	0x00000000

08017680 <__ieee754_rem_pio2>:
 8017680:	b570      	push	{r4, r5, r6, lr}
 8017682:	eeb0 7b40 	vmov.f64	d7, d0
 8017686:	ee17 5a90 	vmov	r5, s15
 801768a:	4b97      	ldr	r3, [pc, #604]	; (80178e8 <__ieee754_rem_pio2+0x268>)
 801768c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8017690:	429e      	cmp	r6, r3
 8017692:	b088      	sub	sp, #32
 8017694:	4604      	mov	r4, r0
 8017696:	dc07      	bgt.n	80176a8 <__ieee754_rem_pio2+0x28>
 8017698:	2200      	movs	r2, #0
 801769a:	2300      	movs	r3, #0
 801769c:	ed84 0b00 	vstr	d0, [r4]
 80176a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80176a4:	2000      	movs	r0, #0
 80176a6:	e01b      	b.n	80176e0 <__ieee754_rem_pio2+0x60>
 80176a8:	4b90      	ldr	r3, [pc, #576]	; (80178ec <__ieee754_rem_pio2+0x26c>)
 80176aa:	429e      	cmp	r6, r3
 80176ac:	dc3b      	bgt.n	8017726 <__ieee754_rem_pio2+0xa6>
 80176ae:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 80176b2:	2d00      	cmp	r5, #0
 80176b4:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 80178a8 <__ieee754_rem_pio2+0x228>
 80176b8:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 80176bc:	dd19      	ble.n	80176f2 <__ieee754_rem_pio2+0x72>
 80176be:	ee30 7b46 	vsub.f64	d7, d0, d6
 80176c2:	429e      	cmp	r6, r3
 80176c4:	d00e      	beq.n	80176e4 <__ieee754_rem_pio2+0x64>
 80176c6:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80178b0 <__ieee754_rem_pio2+0x230>
 80176ca:	ee37 5b46 	vsub.f64	d5, d7, d6
 80176ce:	ee37 7b45 	vsub.f64	d7, d7, d5
 80176d2:	ed84 5b00 	vstr	d5, [r4]
 80176d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80176da:	ed84 7b02 	vstr	d7, [r4, #8]
 80176de:	2001      	movs	r0, #1
 80176e0:	b008      	add	sp, #32
 80176e2:	bd70      	pop	{r4, r5, r6, pc}
 80176e4:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80178b8 <__ieee754_rem_pio2+0x238>
 80176e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80176ec:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80178c0 <__ieee754_rem_pio2+0x240>
 80176f0:	e7eb      	b.n	80176ca <__ieee754_rem_pio2+0x4a>
 80176f2:	429e      	cmp	r6, r3
 80176f4:	ee30 7b06 	vadd.f64	d7, d0, d6
 80176f8:	d00e      	beq.n	8017718 <__ieee754_rem_pio2+0x98>
 80176fa:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 80178b0 <__ieee754_rem_pio2+0x230>
 80176fe:	ee37 5b06 	vadd.f64	d5, d7, d6
 8017702:	ee37 7b45 	vsub.f64	d7, d7, d5
 8017706:	ed84 5b00 	vstr	d5, [r4]
 801770a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801770e:	f04f 30ff 	mov.w	r0, #4294967295
 8017712:	ed84 7b02 	vstr	d7, [r4, #8]
 8017716:	e7e3      	b.n	80176e0 <__ieee754_rem_pio2+0x60>
 8017718:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80178b8 <__ieee754_rem_pio2+0x238>
 801771c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017720:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80178c0 <__ieee754_rem_pio2+0x240>
 8017724:	e7eb      	b.n	80176fe <__ieee754_rem_pio2+0x7e>
 8017726:	4b72      	ldr	r3, [pc, #456]	; (80178f0 <__ieee754_rem_pio2+0x270>)
 8017728:	429e      	cmp	r6, r3
 801772a:	dc6e      	bgt.n	801780a <__ieee754_rem_pio2+0x18a>
 801772c:	f7ff fe08 	bl	8017340 <fabs>
 8017730:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8017734:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80178c8 <__ieee754_rem_pio2+0x248>
 8017738:	eea0 7b06 	vfma.f64	d7, d0, d6
 801773c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8017740:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8017744:	ee17 0a90 	vmov	r0, s15
 8017748:	eeb1 4b45 	vneg.f64	d4, d5
 801774c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80178a8 <__ieee754_rem_pio2+0x228>
 8017750:	eea5 0b47 	vfms.f64	d0, d5, d7
 8017754:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80178b0 <__ieee754_rem_pio2+0x230>
 8017758:	281f      	cmp	r0, #31
 801775a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801775e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8017762:	dc08      	bgt.n	8017776 <__ieee754_rem_pio2+0xf6>
 8017764:	4b63      	ldr	r3, [pc, #396]	; (80178f4 <__ieee754_rem_pio2+0x274>)
 8017766:	1e42      	subs	r2, r0, #1
 8017768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801776c:	42b3      	cmp	r3, r6
 801776e:	d002      	beq.n	8017776 <__ieee754_rem_pio2+0xf6>
 8017770:	ed84 6b00 	vstr	d6, [r4]
 8017774:	e024      	b.n	80177c0 <__ieee754_rem_pio2+0x140>
 8017776:	ee16 3a90 	vmov	r3, s13
 801777a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801777e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8017782:	2b10      	cmp	r3, #16
 8017784:	ea4f 5226 	mov.w	r2, r6, asr #20
 8017788:	ddf2      	ble.n	8017770 <__ieee754_rem_pio2+0xf0>
 801778a:	eeb0 6b40 	vmov.f64	d6, d0
 801778e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 80178b8 <__ieee754_rem_pio2+0x238>
 8017792:	eea4 6b03 	vfma.f64	d6, d4, d3
 8017796:	ee30 7b46 	vsub.f64	d7, d0, d6
 801779a:	eea4 7b03 	vfma.f64	d7, d4, d3
 801779e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 80178c0 <__ieee754_rem_pio2+0x240>
 80177a2:	ee95 7b03 	vfnms.f64	d7, d5, d3
 80177a6:	ee36 3b47 	vsub.f64	d3, d6, d7
 80177aa:	ee13 3a90 	vmov	r3, s7
 80177ae:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80177b2:	1ad3      	subs	r3, r2, r3
 80177b4:	2b31      	cmp	r3, #49	; 0x31
 80177b6:	dc17      	bgt.n	80177e8 <__ieee754_rem_pio2+0x168>
 80177b8:	eeb0 0b46 	vmov.f64	d0, d6
 80177bc:	ed84 3b00 	vstr	d3, [r4]
 80177c0:	ed94 6b00 	vldr	d6, [r4]
 80177c4:	2d00      	cmp	r5, #0
 80177c6:	ee30 0b46 	vsub.f64	d0, d0, d6
 80177ca:	ee30 7b47 	vsub.f64	d7, d0, d7
 80177ce:	ed84 7b02 	vstr	d7, [r4, #8]
 80177d2:	da85      	bge.n	80176e0 <__ieee754_rem_pio2+0x60>
 80177d4:	eeb1 6b46 	vneg.f64	d6, d6
 80177d8:	ed84 6b00 	vstr	d6, [r4]
 80177dc:	eeb1 7b47 	vneg.f64	d7, d7
 80177e0:	4240      	negs	r0, r0
 80177e2:	ed84 7b02 	vstr	d7, [r4, #8]
 80177e6:	e77b      	b.n	80176e0 <__ieee754_rem_pio2+0x60>
 80177e8:	ed9f 3b39 	vldr	d3, [pc, #228]	; 80178d0 <__ieee754_rem_pio2+0x250>
 80177ec:	eeb0 0b46 	vmov.f64	d0, d6
 80177f0:	eea4 0b03 	vfma.f64	d0, d4, d3
 80177f4:	ee36 7b40 	vsub.f64	d7, d6, d0
 80177f8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80178d8 <__ieee754_rem_pio2+0x258>
 80177fc:	eea4 7b03 	vfma.f64	d7, d4, d3
 8017800:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8017804:	ee30 6b47 	vsub.f64	d6, d0, d7
 8017808:	e7b2      	b.n	8017770 <__ieee754_rem_pio2+0xf0>
 801780a:	4b3b      	ldr	r3, [pc, #236]	; (80178f8 <__ieee754_rem_pio2+0x278>)
 801780c:	429e      	cmp	r6, r3
 801780e:	dd06      	ble.n	801781e <__ieee754_rem_pio2+0x19e>
 8017810:	ee30 7b40 	vsub.f64	d7, d0, d0
 8017814:	ed80 7b02 	vstr	d7, [r0, #8]
 8017818:	ed80 7b00 	vstr	d7, [r0]
 801781c:	e742      	b.n	80176a4 <__ieee754_rem_pio2+0x24>
 801781e:	1532      	asrs	r2, r6, #20
 8017820:	ee10 0a10 	vmov	r0, s0
 8017824:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8017828:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801782c:	ec41 0b17 	vmov	d7, r0, r1
 8017830:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8017834:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 80178e0 <__ieee754_rem_pio2+0x260>
 8017838:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801783c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017840:	ed8d 6b02 	vstr	d6, [sp, #8]
 8017844:	ee27 7b05 	vmul.f64	d7, d7, d5
 8017848:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801784c:	a902      	add	r1, sp, #8
 801784e:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8017852:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017856:	ed8d 6b04 	vstr	d6, [sp, #16]
 801785a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801785e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017862:	2603      	movs	r6, #3
 8017864:	4608      	mov	r0, r1
 8017866:	ed91 7b04 	vldr	d7, [r1, #16]
 801786a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801786e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017872:	4633      	mov	r3, r6
 8017874:	f1a1 0108 	sub.w	r1, r1, #8
 8017878:	f106 36ff 	add.w	r6, r6, #4294967295
 801787c:	d0f3      	beq.n	8017866 <__ieee754_rem_pio2+0x1e6>
 801787e:	491f      	ldr	r1, [pc, #124]	; (80178fc <__ieee754_rem_pio2+0x27c>)
 8017880:	9101      	str	r1, [sp, #4]
 8017882:	2102      	movs	r1, #2
 8017884:	9100      	str	r1, [sp, #0]
 8017886:	4621      	mov	r1, r4
 8017888:	f000 f8aa 	bl	80179e0 <__kernel_rem_pio2>
 801788c:	2d00      	cmp	r5, #0
 801788e:	f6bf af27 	bge.w	80176e0 <__ieee754_rem_pio2+0x60>
 8017892:	ed94 7b00 	vldr	d7, [r4]
 8017896:	eeb1 7b47 	vneg.f64	d7, d7
 801789a:	ed84 7b00 	vstr	d7, [r4]
 801789e:	ed94 7b02 	vldr	d7, [r4, #8]
 80178a2:	e79b      	b.n	80177dc <__ieee754_rem_pio2+0x15c>
 80178a4:	f3af 8000 	nop.w
 80178a8:	54400000 	.word	0x54400000
 80178ac:	3ff921fb 	.word	0x3ff921fb
 80178b0:	1a626331 	.word	0x1a626331
 80178b4:	3dd0b461 	.word	0x3dd0b461
 80178b8:	1a600000 	.word	0x1a600000
 80178bc:	3dd0b461 	.word	0x3dd0b461
 80178c0:	2e037073 	.word	0x2e037073
 80178c4:	3ba3198a 	.word	0x3ba3198a
 80178c8:	6dc9c883 	.word	0x6dc9c883
 80178cc:	3fe45f30 	.word	0x3fe45f30
 80178d0:	2e000000 	.word	0x2e000000
 80178d4:	3ba3198a 	.word	0x3ba3198a
 80178d8:	252049c1 	.word	0x252049c1
 80178dc:	397b839a 	.word	0x397b839a
 80178e0:	00000000 	.word	0x00000000
 80178e4:	41700000 	.word	0x41700000
 80178e8:	3fe921fb 	.word	0x3fe921fb
 80178ec:	4002d97b 	.word	0x4002d97b
 80178f0:	413921fb 	.word	0x413921fb
 80178f4:	08019778 	.word	0x08019778
 80178f8:	7fefffff 	.word	0x7fefffff
 80178fc:	080197f8 	.word	0x080197f8

08017900 <__ieee754_sqrt>:
 8017900:	eeb1 0bc0 	vsqrt.f64	d0, d0
 8017904:	4770      	bx	lr
	...

08017908 <__kernel_cos>:
 8017908:	ee10 1a90 	vmov	r1, s1
 801790c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8017910:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8017914:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8017918:	da05      	bge.n	8017926 <__kernel_cos+0x1e>
 801791a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801791e:	ee17 3a90 	vmov	r3, s15
 8017922:	2b00      	cmp	r3, #0
 8017924:	d03d      	beq.n	80179a2 <__kernel_cos+0x9a>
 8017926:	ee20 3b00 	vmul.f64	d3, d0, d0
 801792a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 80179a8 <__kernel_cos+0xa0>
 801792e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80179b0 <__kernel_cos+0xa8>
 8017932:	eea3 6b07 	vfma.f64	d6, d3, d7
 8017936:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80179b8 <__kernel_cos+0xb0>
 801793a:	eea6 7b03 	vfma.f64	d7, d6, d3
 801793e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80179c0 <__kernel_cos+0xb8>
 8017942:	eea7 6b03 	vfma.f64	d6, d7, d3
 8017946:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80179c8 <__kernel_cos+0xc0>
 801794a:	4b23      	ldr	r3, [pc, #140]	; (80179d8 <__kernel_cos+0xd0>)
 801794c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8017950:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 80179d0 <__kernel_cos+0xc8>
 8017954:	4299      	cmp	r1, r3
 8017956:	eea7 6b03 	vfma.f64	d6, d7, d3
 801795a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801795e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8017962:	ee23 7b07 	vmul.f64	d7, d3, d7
 8017966:	ee21 6b40 	vnmul.f64	d6, d1, d0
 801796a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801796e:	dc04      	bgt.n	801797a <__kernel_cos+0x72>
 8017970:	ee37 6b46 	vsub.f64	d6, d7, d6
 8017974:	ee34 0b46 	vsub.f64	d0, d4, d6
 8017978:	4770      	bx	lr
 801797a:	4b18      	ldr	r3, [pc, #96]	; (80179dc <__kernel_cos+0xd4>)
 801797c:	4299      	cmp	r1, r3
 801797e:	dc0d      	bgt.n	801799c <__kernel_cos+0x94>
 8017980:	2200      	movs	r2, #0
 8017982:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8017986:	ec43 2b15 	vmov	d5, r2, r3
 801798a:	ee34 0b45 	vsub.f64	d0, d4, d5
 801798e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8017992:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017996:	ee30 0b47 	vsub.f64	d0, d0, d7
 801799a:	4770      	bx	lr
 801799c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 80179a0:	e7f3      	b.n	801798a <__kernel_cos+0x82>
 80179a2:	eeb0 0b44 	vmov.f64	d0, d4
 80179a6:	4770      	bx	lr
 80179a8:	be8838d4 	.word	0xbe8838d4
 80179ac:	bda8fae9 	.word	0xbda8fae9
 80179b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80179b4:	3e21ee9e 	.word	0x3e21ee9e
 80179b8:	809c52ad 	.word	0x809c52ad
 80179bc:	be927e4f 	.word	0xbe927e4f
 80179c0:	19cb1590 	.word	0x19cb1590
 80179c4:	3efa01a0 	.word	0x3efa01a0
 80179c8:	16c15177 	.word	0x16c15177
 80179cc:	bf56c16c 	.word	0xbf56c16c
 80179d0:	5555554c 	.word	0x5555554c
 80179d4:	3fa55555 	.word	0x3fa55555
 80179d8:	3fd33332 	.word	0x3fd33332
 80179dc:	3fe90000 	.word	0x3fe90000

080179e0 <__kernel_rem_pio2>:
 80179e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179e4:	ed2d 8b06 	vpush	{d8-d10}
 80179e8:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80179ec:	469b      	mov	fp, r3
 80179ee:	460f      	mov	r7, r1
 80179f0:	4bcf      	ldr	r3, [pc, #828]	; (8017d30 <__kernel_rem_pio2+0x350>)
 80179f2:	99a0      	ldr	r1, [sp, #640]	; 0x280
 80179f4:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 80179f8:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80179fc:	9000      	str	r0, [sp, #0]
 80179fe:	f112 0f14 	cmn.w	r2, #20
 8017a02:	bfa8      	it	ge
 8017a04:	2318      	movge	r3, #24
 8017a06:	f10b 31ff 	add.w	r1, fp, #4294967295
 8017a0a:	bfb8      	it	lt
 8017a0c:	2300      	movlt	r3, #0
 8017a0e:	f06f 0417 	mvn.w	r4, #23
 8017a12:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8017d18 <__kernel_rem_pio2+0x338>
 8017a16:	bfa4      	itt	ge
 8017a18:	f1a2 0a03 	subge.w	sl, r2, #3
 8017a1c:	fb9a f3f3 	sdivge	r3, sl, r3
 8017a20:	fb03 4404 	mla	r4, r3, r4, r4
 8017a24:	1a5d      	subs	r5, r3, r1
 8017a26:	4414      	add	r4, r2
 8017a28:	eb09 0601 	add.w	r6, r9, r1
 8017a2c:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8017a30:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8017a34:	2200      	movs	r2, #0
 8017a36:	42b2      	cmp	r2, r6
 8017a38:	dd12      	ble.n	8017a60 <__kernel_rem_pio2+0x80>
 8017a3a:	aa18      	add	r2, sp, #96	; 0x60
 8017a3c:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8017a40:	460e      	mov	r6, r1
 8017a42:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8017a46:	f1cb 0a01 	rsb	sl, fp, #1
 8017a4a:	eb0a 0006 	add.w	r0, sl, r6
 8017a4e:	4581      	cmp	r9, r0
 8017a50:	db25      	blt.n	8017a9e <__kernel_rem_pio2+0xbe>
 8017a52:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8017d18 <__kernel_rem_pio2+0x338>
 8017a56:	f8dd e000 	ldr.w	lr, [sp]
 8017a5a:	4615      	mov	r5, r2
 8017a5c:	2000      	movs	r0, #0
 8017a5e:	e015      	b.n	8017a8c <__kernel_rem_pio2+0xac>
 8017a60:	42d5      	cmn	r5, r2
 8017a62:	d409      	bmi.n	8017a78 <__kernel_rem_pio2+0x98>
 8017a64:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8017a68:	ee07 0a90 	vmov	s15, r0
 8017a6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017a70:	eca8 7b02 	vstmia	r8!, {d7}
 8017a74:	3201      	adds	r2, #1
 8017a76:	e7de      	b.n	8017a36 <__kernel_rem_pio2+0x56>
 8017a78:	eeb0 7b46 	vmov.f64	d7, d6
 8017a7c:	e7f8      	b.n	8017a70 <__kernel_rem_pio2+0x90>
 8017a7e:	ecbe 5b02 	vldmia	lr!, {d5}
 8017a82:	ed95 6b00 	vldr	d6, [r5]
 8017a86:	3001      	adds	r0, #1
 8017a88:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017a8c:	4288      	cmp	r0, r1
 8017a8e:	f1a5 0508 	sub.w	r5, r5, #8
 8017a92:	ddf4      	ble.n	8017a7e <__kernel_rem_pio2+0x9e>
 8017a94:	eca8 7b02 	vstmia	r8!, {d7}
 8017a98:	3208      	adds	r2, #8
 8017a9a:	3601      	adds	r6, #1
 8017a9c:	e7d5      	b.n	8017a4a <__kernel_rem_pio2+0x6a>
 8017a9e:	aa04      	add	r2, sp, #16
 8017aa0:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8017d20 <__kernel_rem_pio2+0x340>
 8017aa4:	ed9f aba0 	vldr	d10, [pc, #640]	; 8017d28 <__kernel_rem_pio2+0x348>
 8017aa8:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8017aac:	9201      	str	r2, [sp, #4]
 8017aae:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8017ab2:	464e      	mov	r6, r9
 8017ab4:	ab90      	add	r3, sp, #576	; 0x240
 8017ab6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017aba:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8017abe:	ab04      	add	r3, sp, #16
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	4632      	mov	r2, r6
 8017ac4:	2a00      	cmp	r2, #0
 8017ac6:	dc4e      	bgt.n	8017b66 <__kernel_rem_pio2+0x186>
 8017ac8:	4620      	mov	r0, r4
 8017aca:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8017ace:	f000 fb4b 	bl	8018168 <scalbn>
 8017ad2:	eeb0 8b40 	vmov.f64	d8, d0
 8017ad6:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8017ada:	ee28 0b00 	vmul.f64	d0, d8, d0
 8017ade:	f000 fac7 	bl	8018070 <floor>
 8017ae2:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8017ae6:	eea0 8b47 	vfms.f64	d8, d0, d7
 8017aea:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8017aee:	2c00      	cmp	r4, #0
 8017af0:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8017af4:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8017af8:	ee38 8b40 	vsub.f64	d8, d8, d0
 8017afc:	ee17 8a90 	vmov	r8, s15
 8017b00:	dd46      	ble.n	8017b90 <__kernel_rem_pio2+0x1b0>
 8017b02:	1e70      	subs	r0, r6, #1
 8017b04:	aa04      	add	r2, sp, #16
 8017b06:	f1c4 0c18 	rsb	ip, r4, #24
 8017b0a:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8017b0e:	fa45 f20c 	asr.w	r2, r5, ip
 8017b12:	4490      	add	r8, r2
 8017b14:	fa02 f20c 	lsl.w	r2, r2, ip
 8017b18:	1aad      	subs	r5, r5, r2
 8017b1a:	aa04      	add	r2, sp, #16
 8017b1c:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8017b20:	f1c4 0217 	rsb	r2, r4, #23
 8017b24:	4115      	asrs	r5, r2
 8017b26:	2d00      	cmp	r5, #0
 8017b28:	dd41      	ble.n	8017bae <__kernel_rem_pio2+0x1ce>
 8017b2a:	f04f 0c00 	mov.w	ip, #0
 8017b2e:	f108 0801 	add.w	r8, r8, #1
 8017b32:	4660      	mov	r0, ip
 8017b34:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8017b38:	4566      	cmp	r6, ip
 8017b3a:	dc69      	bgt.n	8017c10 <__kernel_rem_pio2+0x230>
 8017b3c:	2c00      	cmp	r4, #0
 8017b3e:	dd03      	ble.n	8017b48 <__kernel_rem_pio2+0x168>
 8017b40:	2c01      	cmp	r4, #1
 8017b42:	d076      	beq.n	8017c32 <__kernel_rem_pio2+0x252>
 8017b44:	2c02      	cmp	r4, #2
 8017b46:	d07f      	beq.n	8017c48 <__kernel_rem_pio2+0x268>
 8017b48:	2d02      	cmp	r5, #2
 8017b4a:	d130      	bne.n	8017bae <__kernel_rem_pio2+0x1ce>
 8017b4c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017b50:	ee30 8b48 	vsub.f64	d8, d0, d8
 8017b54:	b358      	cbz	r0, 8017bae <__kernel_rem_pio2+0x1ce>
 8017b56:	4620      	mov	r0, r4
 8017b58:	9102      	str	r1, [sp, #8]
 8017b5a:	f000 fb05 	bl	8018168 <scalbn>
 8017b5e:	9902      	ldr	r1, [sp, #8]
 8017b60:	ee38 8b40 	vsub.f64	d8, d8, d0
 8017b64:	e023      	b.n	8017bae <__kernel_rem_pio2+0x1ce>
 8017b66:	ee20 7b09 	vmul.f64	d7, d0, d9
 8017b6a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8017b6e:	3a01      	subs	r2, #1
 8017b70:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8017b74:	ad68      	add	r5, sp, #416	; 0x1a0
 8017b76:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8017b7a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017b7e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8017b82:	eca0 0a01 	vstmia	r0!, {s0}
 8017b86:	ed95 0b00 	vldr	d0, [r5]
 8017b8a:	ee37 0b00 	vadd.f64	d0, d7, d0
 8017b8e:	e799      	b.n	8017ac4 <__kernel_rem_pio2+0xe4>
 8017b90:	d105      	bne.n	8017b9e <__kernel_rem_pio2+0x1be>
 8017b92:	1e72      	subs	r2, r6, #1
 8017b94:	a804      	add	r0, sp, #16
 8017b96:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8017b9a:	15ed      	asrs	r5, r5, #23
 8017b9c:	e7c3      	b.n	8017b26 <__kernel_rem_pio2+0x146>
 8017b9e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8017ba2:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017baa:	da2f      	bge.n	8017c0c <__kernel_rem_pio2+0x22c>
 8017bac:	2500      	movs	r5, #0
 8017bae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bb6:	f040 8087 	bne.w	8017cc8 <__kernel_rem_pio2+0x2e8>
 8017bba:	1e73      	subs	r3, r6, #1
 8017bbc:	4618      	mov	r0, r3
 8017bbe:	f04f 0c00 	mov.w	ip, #0
 8017bc2:	4548      	cmp	r0, r9
 8017bc4:	da47      	bge.n	8017c56 <__kernel_rem_pio2+0x276>
 8017bc6:	f1bc 0f00 	cmp.w	ip, #0
 8017bca:	d070      	beq.n	8017cae <__kernel_rem_pio2+0x2ce>
 8017bcc:	aa04      	add	r2, sp, #16
 8017bce:	3c18      	subs	r4, #24
 8017bd0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8017bd4:	2a00      	cmp	r2, #0
 8017bd6:	d075      	beq.n	8017cc4 <__kernel_rem_pio2+0x2e4>
 8017bd8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017bdc:	4620      	mov	r0, r4
 8017bde:	9300      	str	r3, [sp, #0]
 8017be0:	f000 fac2 	bl	8018168 <scalbn>
 8017be4:	9b00      	ldr	r3, [sp, #0]
 8017be6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8017d20 <__kernel_rem_pio2+0x340>
 8017bea:	461a      	mov	r2, r3
 8017bec:	2a00      	cmp	r2, #0
 8017bee:	f280 80ac 	bge.w	8017d4a <__kernel_rem_pio2+0x36a>
 8017bf2:	4619      	mov	r1, r3
 8017bf4:	2000      	movs	r0, #0
 8017bf6:	2900      	cmp	r1, #0
 8017bf8:	f2c0 80cd 	blt.w	8017d96 <__kernel_rem_pio2+0x3b6>
 8017bfc:	aa68      	add	r2, sp, #416	; 0x1a0
 8017bfe:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8017c02:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8017d18 <__kernel_rem_pio2+0x338>
 8017c06:	4e4b      	ldr	r6, [pc, #300]	; (8017d34 <__kernel_rem_pio2+0x354>)
 8017c08:	2200      	movs	r2, #0
 8017c0a:	e0b8      	b.n	8017d7e <__kernel_rem_pio2+0x39e>
 8017c0c:	2502      	movs	r5, #2
 8017c0e:	e78c      	b.n	8017b2a <__kernel_rem_pio2+0x14a>
 8017c10:	681a      	ldr	r2, [r3, #0]
 8017c12:	b948      	cbnz	r0, 8017c28 <__kernel_rem_pio2+0x248>
 8017c14:	b11a      	cbz	r2, 8017c1e <__kernel_rem_pio2+0x23e>
 8017c16:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8017c1a:	601a      	str	r2, [r3, #0]
 8017c1c:	2201      	movs	r2, #1
 8017c1e:	f10c 0c01 	add.w	ip, ip, #1
 8017c22:	3304      	adds	r3, #4
 8017c24:	4610      	mov	r0, r2
 8017c26:	e787      	b.n	8017b38 <__kernel_rem_pio2+0x158>
 8017c28:	ebae 0202 	sub.w	r2, lr, r2
 8017c2c:	601a      	str	r2, [r3, #0]
 8017c2e:	4602      	mov	r2, r0
 8017c30:	e7f5      	b.n	8017c1e <__kernel_rem_pio2+0x23e>
 8017c32:	1e72      	subs	r2, r6, #1
 8017c34:	ab04      	add	r3, sp, #16
 8017c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c3a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8017c3e:	f10d 0c10 	add.w	ip, sp, #16
 8017c42:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8017c46:	e77f      	b.n	8017b48 <__kernel_rem_pio2+0x168>
 8017c48:	1e72      	subs	r2, r6, #1
 8017c4a:	ab04      	add	r3, sp, #16
 8017c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017c50:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8017c54:	e7f3      	b.n	8017c3e <__kernel_rem_pio2+0x25e>
 8017c56:	aa04      	add	r2, sp, #16
 8017c58:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8017c5c:	3801      	subs	r0, #1
 8017c5e:	ea4c 0c02 	orr.w	ip, ip, r2
 8017c62:	e7ae      	b.n	8017bc2 <__kernel_rem_pio2+0x1e2>
 8017c64:	3001      	adds	r0, #1
 8017c66:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8017c6a:	2a00      	cmp	r2, #0
 8017c6c:	d0fa      	beq.n	8017c64 <__kernel_rem_pio2+0x284>
 8017c6e:	eb06 020b 	add.w	r2, r6, fp
 8017c72:	ad18      	add	r5, sp, #96	; 0x60
 8017c74:	1c73      	adds	r3, r6, #1
 8017c76:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8017c7a:	4406      	add	r6, r0
 8017c7c:	429e      	cmp	r6, r3
 8017c7e:	f6ff af19 	blt.w	8017ab4 <__kernel_rem_pio2+0xd4>
 8017c82:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8017c86:	9d00      	ldr	r5, [sp, #0]
 8017c88:	ee07 0a90 	vmov	s15, r0
 8017c8c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017c90:	2000      	movs	r0, #0
 8017c92:	eca2 7b02 	vstmia	r2!, {d7}
 8017c96:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8017d18 <__kernel_rem_pio2+0x338>
 8017c9a:	4694      	mov	ip, r2
 8017c9c:	4288      	cmp	r0, r1
 8017c9e:	dd09      	ble.n	8017cb4 <__kernel_rem_pio2+0x2d4>
 8017ca0:	a868      	add	r0, sp, #416	; 0x1a0
 8017ca2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8017ca6:	ed80 7b00 	vstr	d7, [r0]
 8017caa:	3301      	adds	r3, #1
 8017cac:	e7e6      	b.n	8017c7c <__kernel_rem_pio2+0x29c>
 8017cae:	9b01      	ldr	r3, [sp, #4]
 8017cb0:	2001      	movs	r0, #1
 8017cb2:	e7d8      	b.n	8017c66 <__kernel_rem_pio2+0x286>
 8017cb4:	ecb5 5b02 	vldmia	r5!, {d5}
 8017cb8:	ed3c 6b02 	vldmdb	ip!, {d6}
 8017cbc:	3001      	adds	r0, #1
 8017cbe:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017cc2:	e7eb      	b.n	8017c9c <__kernel_rem_pio2+0x2bc>
 8017cc4:	3b01      	subs	r3, #1
 8017cc6:	e781      	b.n	8017bcc <__kernel_rem_pio2+0x1ec>
 8017cc8:	4260      	negs	r0, r4
 8017cca:	eeb0 0b48 	vmov.f64	d0, d8
 8017cce:	f000 fa4b 	bl	8018168 <scalbn>
 8017cd2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8017d28 <__kernel_rem_pio2+0x348>
 8017cd6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8017cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cde:	db2b      	blt.n	8017d38 <__kernel_rem_pio2+0x358>
 8017ce0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8017d20 <__kernel_rem_pio2+0x340>
 8017ce4:	ee20 7b07 	vmul.f64	d7, d0, d7
 8017ce8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8017cec:	aa04      	add	r2, sp, #16
 8017cee:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8017cf2:	eea5 0b46 	vfms.f64	d0, d5, d6
 8017cf6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017cfa:	a904      	add	r1, sp, #16
 8017cfc:	ee10 3a10 	vmov	r3, s0
 8017d00:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8017d04:	ee17 2a10 	vmov	r2, s14
 8017d08:	1c73      	adds	r3, r6, #1
 8017d0a:	3418      	adds	r4, #24
 8017d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8017d10:	e762      	b.n	8017bd8 <__kernel_rem_pio2+0x1f8>
 8017d12:	bf00      	nop
 8017d14:	f3af 8000 	nop.w
	...
 8017d24:	3e700000 	.word	0x3e700000
 8017d28:	00000000 	.word	0x00000000
 8017d2c:	41700000 	.word	0x41700000
 8017d30:	0801a1b0 	.word	0x0801a1b0
 8017d34:	0801a170 	.word	0x0801a170
 8017d38:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017d3c:	aa04      	add	r2, sp, #16
 8017d3e:	ee10 3a10 	vmov	r3, s0
 8017d42:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8017d46:	4633      	mov	r3, r6
 8017d48:	e746      	b.n	8017bd8 <__kernel_rem_pio2+0x1f8>
 8017d4a:	a804      	add	r0, sp, #16
 8017d4c:	a968      	add	r1, sp, #416	; 0x1a0
 8017d4e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8017d52:	9000      	str	r0, [sp, #0]
 8017d54:	ee07 0a90 	vmov	s15, r0
 8017d58:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8017d5c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017d60:	3a01      	subs	r2, #1
 8017d62:	ee27 7b00 	vmul.f64	d7, d7, d0
 8017d66:	ee20 0b06 	vmul.f64	d0, d0, d6
 8017d6a:	ed81 7b00 	vstr	d7, [r1]
 8017d6e:	e73d      	b.n	8017bec <__kernel_rem_pio2+0x20c>
 8017d70:	ecb6 5b02 	vldmia	r6!, {d5}
 8017d74:	ecb4 6b02 	vldmia	r4!, {d6}
 8017d78:	3201      	adds	r2, #1
 8017d7a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017d7e:	454a      	cmp	r2, r9
 8017d80:	dc01      	bgt.n	8017d86 <__kernel_rem_pio2+0x3a6>
 8017d82:	4290      	cmp	r0, r2
 8017d84:	daf4      	bge.n	8017d70 <__kernel_rem_pio2+0x390>
 8017d86:	aa40      	add	r2, sp, #256	; 0x100
 8017d88:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8017d8c:	ed82 7b00 	vstr	d7, [r2]
 8017d90:	3901      	subs	r1, #1
 8017d92:	3001      	adds	r0, #1
 8017d94:	e72f      	b.n	8017bf6 <__kernel_rem_pio2+0x216>
 8017d96:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8017d98:	2a02      	cmp	r2, #2
 8017d9a:	dc0a      	bgt.n	8017db2 <__kernel_rem_pio2+0x3d2>
 8017d9c:	2a00      	cmp	r2, #0
 8017d9e:	dc5a      	bgt.n	8017e56 <__kernel_rem_pio2+0x476>
 8017da0:	d039      	beq.n	8017e16 <__kernel_rem_pio2+0x436>
 8017da2:	f008 0007 	and.w	r0, r8, #7
 8017da6:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8017daa:	ecbd 8b06 	vpop	{d8-d10}
 8017dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017db2:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8017db4:	2a03      	cmp	r2, #3
 8017db6:	d1f4      	bne.n	8017da2 <__kernel_rem_pio2+0x3c2>
 8017db8:	aa40      	add	r2, sp, #256	; 0x100
 8017dba:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017dbe:	4611      	mov	r1, r2
 8017dc0:	4618      	mov	r0, r3
 8017dc2:	2800      	cmp	r0, #0
 8017dc4:	f1a1 0108 	sub.w	r1, r1, #8
 8017dc8:	dc52      	bgt.n	8017e70 <__kernel_rem_pio2+0x490>
 8017dca:	4619      	mov	r1, r3
 8017dcc:	2901      	cmp	r1, #1
 8017dce:	f1a2 0208 	sub.w	r2, r2, #8
 8017dd2:	dc5d      	bgt.n	8017e90 <__kernel_rem_pio2+0x4b0>
 8017dd4:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8017ed8 <__kernel_rem_pio2+0x4f8>
 8017dd8:	2b01      	cmp	r3, #1
 8017dda:	dc69      	bgt.n	8017eb0 <__kernel_rem_pio2+0x4d0>
 8017ddc:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8017de0:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8017de4:	2d00      	cmp	r5, #0
 8017de6:	d16c      	bne.n	8017ec2 <__kernel_rem_pio2+0x4e2>
 8017de8:	ed87 5b00 	vstr	d5, [r7]
 8017dec:	ed87 6b02 	vstr	d6, [r7, #8]
 8017df0:	ed87 7b04 	vstr	d7, [r7, #16]
 8017df4:	e7d5      	b.n	8017da2 <__kernel_rem_pio2+0x3c2>
 8017df6:	aa40      	add	r2, sp, #256	; 0x100
 8017df8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017dfc:	ed92 6b00 	vldr	d6, [r2]
 8017e00:	3b01      	subs	r3, #1
 8017e02:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	daf5      	bge.n	8017df6 <__kernel_rem_pio2+0x416>
 8017e0a:	b10d      	cbz	r5, 8017e10 <__kernel_rem_pio2+0x430>
 8017e0c:	eeb1 7b47 	vneg.f64	d7, d7
 8017e10:	ed87 7b00 	vstr	d7, [r7]
 8017e14:	e7c5      	b.n	8017da2 <__kernel_rem_pio2+0x3c2>
 8017e16:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8017ed8 <__kernel_rem_pio2+0x4f8>
 8017e1a:	e7f4      	b.n	8017e06 <__kernel_rem_pio2+0x426>
 8017e1c:	a940      	add	r1, sp, #256	; 0x100
 8017e1e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8017e22:	ed91 7b00 	vldr	d7, [r1]
 8017e26:	3a01      	subs	r2, #1
 8017e28:	ee36 6b07 	vadd.f64	d6, d6, d7
 8017e2c:	2a00      	cmp	r2, #0
 8017e2e:	daf5      	bge.n	8017e1c <__kernel_rem_pio2+0x43c>
 8017e30:	b1ad      	cbz	r5, 8017e5e <__kernel_rem_pio2+0x47e>
 8017e32:	eeb1 7b46 	vneg.f64	d7, d6
 8017e36:	ed87 7b00 	vstr	d7, [r7]
 8017e3a:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8017e3e:	a942      	add	r1, sp, #264	; 0x108
 8017e40:	2201      	movs	r2, #1
 8017e42:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017e46:	4293      	cmp	r3, r2
 8017e48:	da0c      	bge.n	8017e64 <__kernel_rem_pio2+0x484>
 8017e4a:	b10d      	cbz	r5, 8017e50 <__kernel_rem_pio2+0x470>
 8017e4c:	eeb1 7b47 	vneg.f64	d7, d7
 8017e50:	ed87 7b02 	vstr	d7, [r7, #8]
 8017e54:	e7a5      	b.n	8017da2 <__kernel_rem_pio2+0x3c2>
 8017e56:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8017ed8 <__kernel_rem_pio2+0x4f8>
 8017e5a:	461a      	mov	r2, r3
 8017e5c:	e7e6      	b.n	8017e2c <__kernel_rem_pio2+0x44c>
 8017e5e:	eeb0 7b46 	vmov.f64	d7, d6
 8017e62:	e7e8      	b.n	8017e36 <__kernel_rem_pio2+0x456>
 8017e64:	ecb1 6b02 	vldmia	r1!, {d6}
 8017e68:	3201      	adds	r2, #1
 8017e6a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017e6e:	e7ea      	b.n	8017e46 <__kernel_rem_pio2+0x466>
 8017e70:	ed91 7b00 	vldr	d7, [r1]
 8017e74:	ed91 5b02 	vldr	d5, [r1, #8]
 8017e78:	3801      	subs	r0, #1
 8017e7a:	ee37 6b05 	vadd.f64	d6, d7, d5
 8017e7e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017e82:	ed81 6b00 	vstr	d6, [r1]
 8017e86:	ee37 7b05 	vadd.f64	d7, d7, d5
 8017e8a:	ed81 7b02 	vstr	d7, [r1, #8]
 8017e8e:	e798      	b.n	8017dc2 <__kernel_rem_pio2+0x3e2>
 8017e90:	ed92 7b00 	vldr	d7, [r2]
 8017e94:	ed92 5b02 	vldr	d5, [r2, #8]
 8017e98:	3901      	subs	r1, #1
 8017e9a:	ee37 6b05 	vadd.f64	d6, d7, d5
 8017e9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017ea2:	ed82 6b00 	vstr	d6, [r2]
 8017ea6:	ee37 7b05 	vadd.f64	d7, d7, d5
 8017eaa:	ed82 7b02 	vstr	d7, [r2, #8]
 8017eae:	e78d      	b.n	8017dcc <__kernel_rem_pio2+0x3ec>
 8017eb0:	aa40      	add	r2, sp, #256	; 0x100
 8017eb2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017eb6:	ed92 6b00 	vldr	d6, [r2]
 8017eba:	3b01      	subs	r3, #1
 8017ebc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017ec0:	e78a      	b.n	8017dd8 <__kernel_rem_pio2+0x3f8>
 8017ec2:	eeb1 5b45 	vneg.f64	d5, d5
 8017ec6:	eeb1 6b46 	vneg.f64	d6, d6
 8017eca:	ed87 5b00 	vstr	d5, [r7]
 8017ece:	eeb1 7b47 	vneg.f64	d7, d7
 8017ed2:	ed87 6b02 	vstr	d6, [r7, #8]
 8017ed6:	e78b      	b.n	8017df0 <__kernel_rem_pio2+0x410>
	...

08017ee0 <__kernel_sin>:
 8017ee0:	ee10 3a90 	vmov	r3, s1
 8017ee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017ee8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8017eec:	da04      	bge.n	8017ef8 <__kernel_sin+0x18>
 8017eee:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8017ef2:	ee17 3a90 	vmov	r3, s15
 8017ef6:	b35b      	cbz	r3, 8017f50 <__kernel_sin+0x70>
 8017ef8:	ee20 6b00 	vmul.f64	d6, d0, d0
 8017efc:	ee20 5b06 	vmul.f64	d5, d0, d6
 8017f00:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8017f58 <__kernel_sin+0x78>
 8017f04:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8017f60 <__kernel_sin+0x80>
 8017f08:	eea6 4b07 	vfma.f64	d4, d6, d7
 8017f0c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8017f68 <__kernel_sin+0x88>
 8017f10:	eea4 7b06 	vfma.f64	d7, d4, d6
 8017f14:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8017f70 <__kernel_sin+0x90>
 8017f18:	eea7 4b06 	vfma.f64	d4, d7, d6
 8017f1c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8017f78 <__kernel_sin+0x98>
 8017f20:	eea4 7b06 	vfma.f64	d7, d4, d6
 8017f24:	b930      	cbnz	r0, 8017f34 <__kernel_sin+0x54>
 8017f26:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8017f80 <__kernel_sin+0xa0>
 8017f2a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8017f2e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8017f32:	4770      	bx	lr
 8017f34:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8017f38:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8017f3c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8017f40:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8017f44:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8017f88 <__kernel_sin+0xa8>
 8017f48:	eea5 1b07 	vfma.f64	d1, d5, d7
 8017f4c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8017f50:	4770      	bx	lr
 8017f52:	bf00      	nop
 8017f54:	f3af 8000 	nop.w
 8017f58:	5acfd57c 	.word	0x5acfd57c
 8017f5c:	3de5d93a 	.word	0x3de5d93a
 8017f60:	8a2b9ceb 	.word	0x8a2b9ceb
 8017f64:	be5ae5e6 	.word	0xbe5ae5e6
 8017f68:	57b1fe7d 	.word	0x57b1fe7d
 8017f6c:	3ec71de3 	.word	0x3ec71de3
 8017f70:	19c161d5 	.word	0x19c161d5
 8017f74:	bf2a01a0 	.word	0xbf2a01a0
 8017f78:	1110f8a6 	.word	0x1110f8a6
 8017f7c:	3f811111 	.word	0x3f811111
 8017f80:	55555549 	.word	0x55555549
 8017f84:	bfc55555 	.word	0xbfc55555
 8017f88:	55555549 	.word	0x55555549
 8017f8c:	3fc55555 	.word	0x3fc55555

08017f90 <with_errno>:
 8017f90:	b513      	push	{r0, r1, r4, lr}
 8017f92:	4604      	mov	r4, r0
 8017f94:	ed8d 0b00 	vstr	d0, [sp]
 8017f98:	f7fc fa1c 	bl	80143d4 <__errno>
 8017f9c:	ed9d 0b00 	vldr	d0, [sp]
 8017fa0:	6004      	str	r4, [r0, #0]
 8017fa2:	b002      	add	sp, #8
 8017fa4:	bd10      	pop	{r4, pc}

08017fa6 <xflow>:
 8017fa6:	b082      	sub	sp, #8
 8017fa8:	b158      	cbz	r0, 8017fc2 <xflow+0x1c>
 8017faa:	eeb1 7b40 	vneg.f64	d7, d0
 8017fae:	ed8d 7b00 	vstr	d7, [sp]
 8017fb2:	ed9d 7b00 	vldr	d7, [sp]
 8017fb6:	2022      	movs	r0, #34	; 0x22
 8017fb8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017fbc:	b002      	add	sp, #8
 8017fbe:	f7ff bfe7 	b.w	8017f90 <with_errno>
 8017fc2:	eeb0 7b40 	vmov.f64	d7, d0
 8017fc6:	e7f2      	b.n	8017fae <xflow+0x8>

08017fc8 <__math_uflow>:
 8017fc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017fd0 <__math_uflow+0x8>
 8017fcc:	f7ff bfeb 	b.w	8017fa6 <xflow>
 8017fd0:	00000000 	.word	0x00000000
 8017fd4:	10000000 	.word	0x10000000

08017fd8 <__math_oflow>:
 8017fd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017fe0 <__math_oflow+0x8>
 8017fdc:	f7ff bfe3 	b.w	8017fa6 <xflow>
 8017fe0:	00000000 	.word	0x00000000
 8017fe4:	70000000 	.word	0x70000000

08017fe8 <__math_divzero>:
 8017fe8:	b082      	sub	sp, #8
 8017fea:	2800      	cmp	r0, #0
 8017fec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017ff0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8017ff4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8017ff8:	ed8d 7b00 	vstr	d7, [sp]
 8017ffc:	ed9d 0b00 	vldr	d0, [sp]
 8018000:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8018010 <__math_divzero+0x28>
 8018004:	2022      	movs	r0, #34	; 0x22
 8018006:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801800a:	b002      	add	sp, #8
 801800c:	f7ff bfc0 	b.w	8017f90 <with_errno>
	...

08018018 <__math_invalid>:
 8018018:	eeb0 7b40 	vmov.f64	d7, d0
 801801c:	eeb4 7b47 	vcmp.f64	d7, d7
 8018020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018024:	ee30 6b40 	vsub.f64	d6, d0, d0
 8018028:	ee86 0b06 	vdiv.f64	d0, d6, d6
 801802c:	d602      	bvs.n	8018034 <__math_invalid+0x1c>
 801802e:	2021      	movs	r0, #33	; 0x21
 8018030:	f7ff bfae 	b.w	8017f90 <with_errno>
 8018034:	4770      	bx	lr

08018036 <__math_check_uflow>:
 8018036:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801803a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801803e:	d102      	bne.n	8018046 <__math_check_uflow+0x10>
 8018040:	2022      	movs	r0, #34	; 0x22
 8018042:	f7ff bfa5 	b.w	8017f90 <with_errno>
 8018046:	4770      	bx	lr

08018048 <__math_check_oflow>:
 8018048:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8018068 <__math_check_oflow+0x20>
 801804c:	eeb0 7bc0 	vabs.f64	d7, d0
 8018050:	eeb4 7b46 	vcmp.f64	d7, d6
 8018054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018058:	dd02      	ble.n	8018060 <__math_check_oflow+0x18>
 801805a:	2022      	movs	r0, #34	; 0x22
 801805c:	f7ff bf98 	b.w	8017f90 <with_errno>
 8018060:	4770      	bx	lr
 8018062:	bf00      	nop
 8018064:	f3af 8000 	nop.w
 8018068:	ffffffff 	.word	0xffffffff
 801806c:	7fefffff 	.word	0x7fefffff

08018070 <floor>:
 8018070:	ee10 1a90 	vmov	r1, s1
 8018074:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8018078:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801807c:	2b13      	cmp	r3, #19
 801807e:	b530      	push	{r4, r5, lr}
 8018080:	ee10 0a10 	vmov	r0, s0
 8018084:	ee10 5a10 	vmov	r5, s0
 8018088:	dc31      	bgt.n	80180ee <floor+0x7e>
 801808a:	2b00      	cmp	r3, #0
 801808c:	da15      	bge.n	80180ba <floor+0x4a>
 801808e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8018148 <floor+0xd8>
 8018092:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018096:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801809a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801809e:	dd07      	ble.n	80180b0 <floor+0x40>
 80180a0:	2900      	cmp	r1, #0
 80180a2:	da4e      	bge.n	8018142 <floor+0xd2>
 80180a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80180a8:	4318      	orrs	r0, r3
 80180aa:	d001      	beq.n	80180b0 <floor+0x40>
 80180ac:	4928      	ldr	r1, [pc, #160]	; (8018150 <floor+0xe0>)
 80180ae:	2000      	movs	r0, #0
 80180b0:	460b      	mov	r3, r1
 80180b2:	4602      	mov	r2, r0
 80180b4:	ec43 2b10 	vmov	d0, r2, r3
 80180b8:	e020      	b.n	80180fc <floor+0x8c>
 80180ba:	4a26      	ldr	r2, [pc, #152]	; (8018154 <floor+0xe4>)
 80180bc:	411a      	asrs	r2, r3
 80180be:	ea01 0402 	and.w	r4, r1, r2
 80180c2:	4304      	orrs	r4, r0
 80180c4:	d01a      	beq.n	80180fc <floor+0x8c>
 80180c6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8018148 <floor+0xd8>
 80180ca:	ee30 0b07 	vadd.f64	d0, d0, d7
 80180ce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80180d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180d6:	ddeb      	ble.n	80180b0 <floor+0x40>
 80180d8:	2900      	cmp	r1, #0
 80180da:	bfbe      	ittt	lt
 80180dc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80180e0:	fa40 f303 	asrlt.w	r3, r0, r3
 80180e4:	18c9      	addlt	r1, r1, r3
 80180e6:	ea21 0102 	bic.w	r1, r1, r2
 80180ea:	2000      	movs	r0, #0
 80180ec:	e7e0      	b.n	80180b0 <floor+0x40>
 80180ee:	2b33      	cmp	r3, #51	; 0x33
 80180f0:	dd05      	ble.n	80180fe <floor+0x8e>
 80180f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80180f6:	d101      	bne.n	80180fc <floor+0x8c>
 80180f8:	ee30 0b00 	vadd.f64	d0, d0, d0
 80180fc:	bd30      	pop	{r4, r5, pc}
 80180fe:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8018102:	f04f 32ff 	mov.w	r2, #4294967295
 8018106:	40e2      	lsrs	r2, r4
 8018108:	4202      	tst	r2, r0
 801810a:	d0f7      	beq.n	80180fc <floor+0x8c>
 801810c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8018148 <floor+0xd8>
 8018110:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018114:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801811c:	ddc8      	ble.n	80180b0 <floor+0x40>
 801811e:	2900      	cmp	r1, #0
 8018120:	da02      	bge.n	8018128 <floor+0xb8>
 8018122:	2b14      	cmp	r3, #20
 8018124:	d103      	bne.n	801812e <floor+0xbe>
 8018126:	3101      	adds	r1, #1
 8018128:	ea20 0002 	bic.w	r0, r0, r2
 801812c:	e7c0      	b.n	80180b0 <floor+0x40>
 801812e:	2401      	movs	r4, #1
 8018130:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8018134:	fa04 f303 	lsl.w	r3, r4, r3
 8018138:	4418      	add	r0, r3
 801813a:	42a8      	cmp	r0, r5
 801813c:	bf38      	it	cc
 801813e:	1909      	addcc	r1, r1, r4
 8018140:	e7f2      	b.n	8018128 <floor+0xb8>
 8018142:	2000      	movs	r0, #0
 8018144:	4601      	mov	r1, r0
 8018146:	e7b3      	b.n	80180b0 <floor+0x40>
 8018148:	8800759c 	.word	0x8800759c
 801814c:	7e37e43c 	.word	0x7e37e43c
 8018150:	bff00000 	.word	0xbff00000
 8018154:	000fffff 	.word	0x000fffff

08018158 <nan>:
 8018158:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018160 <nan+0x8>
 801815c:	4770      	bx	lr
 801815e:	bf00      	nop
 8018160:	00000000 	.word	0x00000000
 8018164:	7ff80000 	.word	0x7ff80000

08018168 <scalbn>:
 8018168:	b082      	sub	sp, #8
 801816a:	ed8d 0b00 	vstr	d0, [sp]
 801816e:	9b01      	ldr	r3, [sp, #4]
 8018170:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8018174:	b9a2      	cbnz	r2, 80181a0 <scalbn+0x38>
 8018176:	9a00      	ldr	r2, [sp, #0]
 8018178:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801817c:	4313      	orrs	r3, r2
 801817e:	d03a      	beq.n	80181f6 <scalbn+0x8e>
 8018180:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8018258 <scalbn+0xf0>
 8018184:	4b40      	ldr	r3, [pc, #256]	; (8018288 <scalbn+0x120>)
 8018186:	ee20 7b07 	vmul.f64	d7, d0, d7
 801818a:	4298      	cmp	r0, r3
 801818c:	ed8d 7b00 	vstr	d7, [sp]
 8018190:	da11      	bge.n	80181b6 <scalbn+0x4e>
 8018192:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8018260 <scalbn+0xf8>
 8018196:	ed9d 6b00 	vldr	d6, [sp]
 801819a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801819e:	e007      	b.n	80181b0 <scalbn+0x48>
 80181a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80181a4:	428a      	cmp	r2, r1
 80181a6:	d10a      	bne.n	80181be <scalbn+0x56>
 80181a8:	ed9d 7b00 	vldr	d7, [sp]
 80181ac:	ee37 7b07 	vadd.f64	d7, d7, d7
 80181b0:	ed8d 7b00 	vstr	d7, [sp]
 80181b4:	e01f      	b.n	80181f6 <scalbn+0x8e>
 80181b6:	9b01      	ldr	r3, [sp, #4]
 80181b8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80181bc:	3a36      	subs	r2, #54	; 0x36
 80181be:	4402      	add	r2, r0
 80181c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80181c4:	428a      	cmp	r2, r1
 80181c6:	dd0a      	ble.n	80181de <scalbn+0x76>
 80181c8:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8018268 <scalbn+0x100>
 80181cc:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8018270 <scalbn+0x108>
 80181d0:	eeb0 6b47 	vmov.f64	d6, d7
 80181d4:	9b01      	ldr	r3, [sp, #4]
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	fe27 7b05 	vselge.f64	d7, d7, d5
 80181dc:	e7dd      	b.n	801819a <scalbn+0x32>
 80181de:	2a00      	cmp	r2, #0
 80181e0:	dd0d      	ble.n	80181fe <scalbn+0x96>
 80181e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80181e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80181ea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80181ee:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80181f2:	e9cd 0100 	strd	r0, r1, [sp]
 80181f6:	ed9d 0b00 	vldr	d0, [sp]
 80181fa:	b002      	add	sp, #8
 80181fc:	4770      	bx	lr
 80181fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8018202:	da18      	bge.n	8018236 <scalbn+0xce>
 8018204:	f24c 3350 	movw	r3, #50000	; 0xc350
 8018208:	4298      	cmp	r0, r3
 801820a:	9b01      	ldr	r3, [sp, #4]
 801820c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8018210:	dd09      	ble.n	8018226 <scalbn+0xbe>
 8018212:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8018268 <scalbn+0x100>
 8018216:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8018270 <scalbn+0x108>
 801821a:	eeb0 6b47 	vmov.f64	d6, d7
 801821e:	2b00      	cmp	r3, #0
 8018220:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8018224:	e7b9      	b.n	801819a <scalbn+0x32>
 8018226:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8018260 <scalbn+0xf8>
 801822a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8018278 <scalbn+0x110>
 801822e:	eeb0 6b47 	vmov.f64	d6, d7
 8018232:	2b00      	cmp	r3, #0
 8018234:	e7f4      	b.n	8018220 <scalbn+0xb8>
 8018236:	e9dd 0100 	ldrd	r0, r1, [sp]
 801823a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801823e:	3236      	adds	r2, #54	; 0x36
 8018240:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8018244:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8018248:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8018280 <scalbn+0x118>
 801824c:	ec41 0b17 	vmov	d7, r0, r1
 8018250:	e7a3      	b.n	801819a <scalbn+0x32>
 8018252:	bf00      	nop
 8018254:	f3af 8000 	nop.w
 8018258:	00000000 	.word	0x00000000
 801825c:	43500000 	.word	0x43500000
 8018260:	c2f8f359 	.word	0xc2f8f359
 8018264:	01a56e1f 	.word	0x01a56e1f
 8018268:	8800759c 	.word	0x8800759c
 801826c:	7e37e43c 	.word	0x7e37e43c
 8018270:	8800759c 	.word	0x8800759c
 8018274:	fe37e43c 	.word	0xfe37e43c
 8018278:	c2f8f359 	.word	0xc2f8f359
 801827c:	81a56e1f 	.word	0x81a56e1f
 8018280:	00000000 	.word	0x00000000
 8018284:	3c900000 	.word	0x3c900000
 8018288:	ffff3cb0 	.word	0xffff3cb0

0801828c <_init>:
 801828c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801828e:	bf00      	nop
 8018290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018292:	bc08      	pop	{r3}
 8018294:	469e      	mov	lr, r3
 8018296:	4770      	bx	lr

08018298 <_fini>:
 8018298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801829a:	bf00      	nop
 801829c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801829e:	bc08      	pop	{r3}
 80182a0:	469e      	mov	lr, r3
 80182a2:	4770      	bx	lr
