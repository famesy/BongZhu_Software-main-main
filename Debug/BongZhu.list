
BongZhu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017d84  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f18  08018058  08018058  00028058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019f70  08019f70  00029f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019f78  08019f78  00029f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08019f7c  08019f7c  00029f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000234  24000000  08019f80  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000011a4  24000238  0801a1b4  00030238  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  240013dc  0801a1b4  000313dc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a2c6  00000000  00000000  00030262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005c55  00000000  00000000  0006a528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ae8  00000000  00000000  00070180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000018e0  00000000  00000000  00071c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039e94  00000000  00000000  00073548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002954d  00000000  00000000  000ad3dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016e13a  00000000  00000000  000d6929  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00244a63  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000083bc  00000000  00000000  00244ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000238 	.word	0x24000238
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801803c 	.word	0x0801803c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400023c 	.word	0x2400023c
 800030c:	0801803c 	.word	0x0801803c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <AMT21_initialise>:
 *      Author: fame
 */
#include <Library/AMT21.h>

void AMT21_initialise(AMT21 *dev, UART_HandleTypeDef *uartHandle,
		uint8_t address, GPIO_TypeDef *DE_port, uint16_t DE_Pin) {
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4613      	mov	r3, r2
 80006c6:	71fb      	strb	r3, [r7, #7]
	dev->uartHandle = uartHandle;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	68ba      	ldr	r2, [r7, #8]
 80006cc:	601a      	str	r2, [r3, #0]
	dev->DE_port = DE_port;
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	605a      	str	r2, [r3, #4]
	dev->DE_pin = DE_Pin;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	8b3a      	ldrh	r2, [r7, #24]
 80006d8:	811a      	strh	r2, [r3, #8]
	dev->address = address;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	79fa      	ldrb	r2, [r7, #7]
 80006de:	729a      	strb	r2, [r3, #10]

	dev->uart_buf = 0;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2200      	movs	r2, #0
 80006e4:	819a      	strh	r2, [r3, #12]
	dev->position = 0;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2200      	movs	r2, #0
 80006ea:	81da      	strh	r2, [r3, #14]
	dev->prev_position = 0;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2200      	movs	r2, #0
 80006f0:	821a      	strh	r2, [r3, #16]
	dev->k0 = 0;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2200      	movs	r2, #0
 80006f6:	749a      	strb	r2, [r3, #18]
	dev->k1 = 0;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	2200      	movs	r2, #0
 80006fc:	74da      	strb	r2, [r3, #19]
}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr

0800070a <AMT21_read_value>:

void AMT21_read_value(AMT21 *dev) {
 800070a:	b580      	push	{r7, lr}
 800070c:	b082      	sub	sp, #8
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
	 AMT21_read_value does read raw data from encoder but you must use AMT21_check_value first.

	 :param dev = AMT21 struct
	 :return: None
	 */
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6858      	ldr	r0, [r3, #4]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	891b      	ldrh	r3, [r3, #8]
 800071a:	2201      	movs	r2, #1
 800071c:	4619      	mov	r1, r3
 800071e:	f00c faf7 	bl	800cd10 <HAL_GPIO_WritePin>
	//HAL_UART_Transmit(dev->uartHandle, (uint8_t*) &(dev->address),
			//1, 100);
	HAL_UART_Transmit(dev->uartHandle, &(dev->address),
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f103 010a 	add.w	r1, r3, #10
 800072c:	2364      	movs	r3, #100	; 0x64
 800072e:	2201      	movs	r2, #1
 8000730:	f010 fe06 	bl	8011340 <HAL_UART_Transmit>
				1, 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	6858      	ldr	r0, [r3, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	891b      	ldrh	r3, [r3, #8]
 800073c:	2200      	movs	r2, #0
 800073e:	4619      	mov	r1, r3
 8000740:	f00c fae6 	bl	800cd10 <HAL_GPIO_WritePin>
	HAL_UART_Receive(dev->uartHandle, (uint8_t*) &(dev->uart_buf), 2, 100);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6818      	ldr	r0, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f103 010c 	add.w	r1, r3, #12
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2202      	movs	r2, #2
 8000752:	f010 fe8b 	bl	801146c <HAL_UART_Receive>
	dev->k0 = (dev->uart_buf & 0x4000) == 0x4000;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	899b      	ldrh	r3, [r3, #12]
 800075a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075e:	2b00      	cmp	r3, #0
 8000760:	bf14      	ite	ne
 8000762:	2301      	movne	r3, #1
 8000764:	2300      	moveq	r3, #0
 8000766:	b2db      	uxtb	r3, r3
 8000768:	461a      	mov	r2, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	749a      	strb	r2, [r3, #18]
	dev->k1 = (dev->uart_buf & 0x8000) == 0x8000;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	899b      	ldrh	r3, [r3, #12]
 8000772:	b21b      	sxth	r3, r3
 8000774:	b29b      	uxth	r3, r3
 8000776:	0bdb      	lsrs	r3, r3, #15
 8000778:	b2db      	uxtb	r3, r3
 800077a:	461a      	mov	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	74da      	strb	r2, [r3, #19]
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <AMT21_check_value>:
	HAL_UART_Transmit(dev->uartHandle, (uint8_t*) set_zero_command,
			sizeof(set_zero_command), 100);
	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21_check_value(AMT21 *dev) {
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]

	 :param dev = AMT21 struct
	 :return: HAL_OK 	: if value is right
	 HAL_ERROR : if value is wrong
	 */
	uint16_t position_temp = dev->uart_buf & 0x3FFF;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	899b      	ldrh	r3, [r3, #12]
 8000794:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000798:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = dev->uart_buf & 0x0001;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	899b      	ldrh	r3, [r3, #12]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (dev->uart_buf >> 1) & 0x0001;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	899b      	ldrh	r3, [r3, #12]
 80007aa:	085b      	lsrs	r3, r3, #1
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f003 0301 	and.w	r3, r3, #1
 80007b4:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007b6:	2300      	movs	r3, #0
 80007b8:	737b      	strb	r3, [r7, #13]
 80007ba:	e020      	b.n	80007fe <AMT21_check_value+0x76>
		dev->uart_buf = dev->uart_buf >> 2;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	899b      	ldrh	r3, [r3, #12]
 80007c0:	089b      	lsrs	r3, r3, #2
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	819a      	strh	r2, [r3, #12]
		k0_check ^= dev->uart_buf & 0x0001;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	899b      	ldrh	r3, [r3, #12]
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	b25a      	sxtb	r2, r3
 80007d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d8:	4053      	eors	r3, r2
 80007da:	b25b      	sxtb	r3, r3
 80007dc:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (dev->uart_buf >> 1) & 0x0001;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	899b      	ldrh	r3, [r3, #12]
 80007e2:	085b      	lsrs	r3, r3, #1
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	f003 0301 	and.w	r3, r3, #1
 80007ec:	b25a      	sxtb	r2, r3
 80007ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80007f2:	4053      	eors	r3, r2
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 80007f8:	7b7b      	ldrb	r3, [r7, #13]
 80007fa:	3301      	adds	r3, #1
 80007fc:	737b      	strb	r3, [r7, #13]
 80007fe:	7b7b      	ldrb	r3, [r7, #13]
 8000800:	2b05      	cmp	r3, #5
 8000802:	d9db      	bls.n	80007bc <AMT21_check_value+0x34>
	}
	k0_check = !k0_check;
 8000804:	7bfb      	ldrb	r3, [r7, #15]
 8000806:	2b00      	cmp	r3, #0
 8000808:	bf0c      	ite	eq
 800080a:	2301      	moveq	r3, #1
 800080c:	2300      	movne	r3, #0
 800080e:	b2db      	uxtb	r3, r3
 8000810:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 8000812:	7bbb      	ldrb	r3, [r7, #14]
 8000814:	2b00      	cmp	r3, #0
 8000816:	bf0c      	ite	eq
 8000818:	2301      	moveq	r3, #1
 800081a:	2300      	movne	r3, #0
 800081c:	b2db      	uxtb	r3, r3
 800081e:	73bb      	strb	r3, [r7, #14]
	if ((dev->k0 == k0_check) && (dev->k1 == k1_check)) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7c9b      	ldrb	r3, [r3, #18]
 8000824:	7bfa      	ldrb	r2, [r7, #15]
 8000826:	429a      	cmp	r2, r3
 8000828:	d109      	bne.n	800083e <AMT21_check_value+0xb6>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	7cdb      	ldrb	r3, [r3, #19]
 800082e:	7bba      	ldrb	r2, [r7, #14]
 8000830:	429a      	cmp	r2, r3
 8000832:	d104      	bne.n	800083e <AMT21_check_value+0xb6>
		dev->position = position_temp;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	897a      	ldrh	r2, [r7, #10]
 8000838:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 800083a:	2300      	movs	r3, #0
 800083c:	e000      	b.n	8000840 <AMT21_check_value+0xb8>
	} else {
		return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
	}
}
 8000840:	4618      	mov	r0, r3
 8000842:	3714      	adds	r7, #20
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <AMT21_unwrap>:

int32_t AMT21_unwrap(int32_t pulse, int32_t prev_pulse) {
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
	int32_t dPulse = 0;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
	if (pulse - prev_pulse > 8191) {
 800085a:	687a      	ldr	r2, [r7, #4]
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	1ad3      	subs	r3, r2, r3
 8000860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000864:	db06      	blt.n	8000874 <AMT21_unwrap+0x28>
		dPulse = -(16383 - (pulse-prev_pulse));
 8000866:	687a      	ldr	r2, [r7, #4]
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	1ad2      	subs	r2, r2, r3
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <AMT21_unwrap+0x5c>)
 800086e:	4413      	add	r3, r2
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	e011      	b.n	8000898 <AMT21_unwrap+0x4c>
	} else if ( pulse -  prev_pulse < -8191) {
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800087e:	dc07      	bgt.n	8000890 <AMT21_unwrap+0x44>
		dPulse = 16383 - (prev_pulse - pulse);
 8000880:	683a      	ldr	r2, [r7, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	1ad2      	subs	r2, r2, r3
 8000886:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800088a:	1a9b      	subs	r3, r3, r2
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	e003      	b.n	8000898 <AMT21_unwrap+0x4c>
	} else {
		dPulse =  pulse -  prev_pulse;
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	1ad3      	subs	r3, r2, r3
 8000896:	60fb      	str	r3, [r7, #12]
	}
	return dPulse;
 8000898:	68fb      	ldr	r3, [r7, #12]
}
 800089a:	4618      	mov	r0, r3
 800089c:	3714      	adds	r7, #20
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	ffffc001 	.word	0xffffc001

080008ac <ARMsProtocol_FUNC_Init>:
/**
 * @brief	Initial Function : Initial the parameters that use in this library
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Init(void){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	// setting ARMsProtocol_h1
	ARMsProtocol_h1.handle = &huart3;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <ARMsProtocol_FUNC_Init+0x40>)
 80008b2:	4a0f      	ldr	r2, [pc, #60]	; (80008f0 <ARMsProtocol_FUNC_Init+0x44>)
 80008b4:	601a      	str	r2, [r3, #0]
	ARMsProtocol_h1.Instance = USART3;
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <ARMsProtocol_FUNC_Init+0x40>)
 80008b8:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <ARMsProtocol_FUNC_Init+0x48>)
 80008ba:	605a      	str	r2, [r3, #4]
	ARMsProtocol_h1.slave_id = 0;
 80008bc:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <ARMsProtocol_FUNC_Init+0x40>)
 80008be:	2200      	movs	r2, #0
 80008c0:	721a      	strb	r2, [r3, #8]

	//setting ARMsProtocol_Data
	ARMsProtocol_Data.Code = 0;
 80008c2:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <ARMsProtocol_FUNC_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	f883 20e7 	strb.w	r2, [r3, #231]	; 0xe7
	ARMsProtocol_Data.State = 0;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <ARMsProtocol_FUNC_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
	ARMsProtocol_Data.Rx_count = 0;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <ARMsProtocol_FUNC_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8

	// Enable UART IT
	HAL_UART_Receive_IT(ARMsProtocol_h1.handle, &ARMsProtocol_Data.Rx_reg, 1);
 80008da:	4b04      	ldr	r3, [pc, #16]	; (80008ec <ARMsProtocol_FUNC_Init+0x40>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2201      	movs	r2, #1
 80008e0:	4906      	ldr	r1, [pc, #24]	; (80008fc <ARMsProtocol_FUNC_Init+0x50>)
 80008e2:	4618      	mov	r0, r3
 80008e4:	f010 ff3e 	bl	8011764 <HAL_UART_Receive_IT>
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	2400032c 	.word	0x2400032c
 80008f0:	24001188 	.word	0x24001188
 80008f4:	40004800 	.word	0x40004800
 80008f8:	24000338 	.word	0x24000338
 80008fc:	2400039c 	.word	0x2400039c

08000900 <ARMsProtocol_FUNC_Interface>:
/**
 * @brief	Interface Function : Data frame checking and state machine
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Interface(void){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
	ARMsProtocol_Data.Flag = 1;
 8000906:	4b6b      	ldr	r3, [pc, #428]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000908:	2201      	movs	r2, #1
 800090a:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
	if(ARMsProtocol_Data.Flag  == 1){
 800090e:	4b69      	ldr	r3, [pc, #420]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000910:	f893 30e5 	ldrb.w	r3, [r3, #229]	; 0xe5
 8000914:	2b01      	cmp	r3, #1
 8000916:	f040 80c8 	bne.w	8000aaa <ARMsProtocol_FUNC_Interface+0x1aa>
		//check header
		if(ARMsProtocol_Data.State == 0){
 800091a:	4b66      	ldr	r3, [pc, #408]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 800091c:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8000920:	2b00      	cmp	r3, #0
 8000922:	d10d      	bne.n	8000940 <ARMsProtocol_FUNC_Interface+0x40>
			ARMsProtocol_Data.Header = ARMsProtocol_Data.Rx_buf[0];
 8000924:	4b63      	ldr	r3, [pc, #396]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000926:	781a      	ldrb	r2, [r3, #0]
 8000928:	4b62      	ldr	r3, [pc, #392]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 800092a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
			if(ARMsProtocol_Data.Header == ARMsProtocol_HEADER){
 800092e:	4b61      	ldr	r3, [pc, #388]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000930:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8000934:	2bff      	cmp	r3, #255	; 0xff
 8000936:	d103      	bne.n	8000940 <ARMsProtocol_FUNC_Interface+0x40>
				ARMsProtocol_Data.State = 1;
 8000938:	4b5e      	ldr	r3, [pc, #376]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 800093a:	2201      	movs	r2, #1
 800093c:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
			}
		}
		//check slave id
		if(ARMsProtocol_Data.State == 1){
 8000940:	4b5c      	ldr	r3, [pc, #368]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000942:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8000946:	2b01      	cmp	r3, #1
 8000948:	d122      	bne.n	8000990 <ARMsProtocol_FUNC_Interface+0x90>
			ARMsProtocol_Data.Id = ARMsProtocol_Data.Rx_buf[1];
 800094a:	4b5a      	ldr	r3, [pc, #360]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 800094c:	785a      	ldrb	r2, [r3, #1]
 800094e:	4b59      	ldr	r3, [pc, #356]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000950:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
			if(ARMsProtocol_Data.Id == ARMsProtocol_h1.slave_id){
 8000954:	4b57      	ldr	r3, [pc, #348]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000956:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800095a:	4b57      	ldr	r3, [pc, #348]	; (8000ab8 <ARMsProtocol_FUNC_Interface+0x1b8>)
 800095c:	7a1b      	ldrb	r3, [r3, #8]
 800095e:	429a      	cmp	r2, r3
 8000960:	d116      	bne.n	8000990 <ARMsProtocol_FUNC_Interface+0x90>
				ARMsProtocol_Data.Instruction = ARMsProtocol_Data.Rx_buf[2];
 8000962:	4b54      	ldr	r3, [pc, #336]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000964:	789a      	ldrb	r2, [r3, #2]
 8000966:	4b53      	ldr	r3, [pc, #332]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000968:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
				ARMsProtocol_Data.Length = ARMsProtocol_Data.Rx_buf[3];
 800096c:	4b51      	ldr	r3, [pc, #324]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 800096e:	78da      	ldrb	r2, [r3, #3]
 8000970:	4b50      	ldr	r3, [pc, #320]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000972:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
				ARMsProtocol_Data._CRC = ARMsProtocol_Data.Rx_buf[3 + ARMsProtocol_Data.Length];
 8000976:	4b4f      	ldr	r3, [pc, #316]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000978:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800097c:	3303      	adds	r3, #3
 800097e:	4a4d      	ldr	r2, [pc, #308]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000980:	5cd2      	ldrb	r2, [r2, r3]
 8000982:	4b4c      	ldr	r3, [pc, #304]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000984:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
				ARMsProtocol_Data.State = 2;
 8000988:	4b4a      	ldr	r3, [pc, #296]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 800098a:	2202      	movs	r2, #2
 800098c:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
			}
		}
		// check crc
		if(ARMsProtocol_Data.State == 2){
 8000990:	4b48      	ldr	r3, [pc, #288]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000992:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8000996:	2b02      	cmp	r3, #2
 8000998:	d13b      	bne.n	8000a12 <ARMsProtocol_FUNC_Interface+0x112>
			ARMsProtocol_CALC_CRC((uint32_t *) &ARMsProtocol_Data.Rx_buf[2], ARMsProtocol_Data.Length + 1);
 800099a:	4b46      	ldr	r3, [pc, #280]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 800099c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80009a0:	3301      	adds	r3, #1
 80009a2:	4619      	mov	r1, r3
 80009a4:	4845      	ldr	r0, [pc, #276]	; (8000abc <ARMsProtocol_FUNC_Interface+0x1bc>)
 80009a6:	f000 f915 	bl	8000bd4 <ARMsProtocol_CALC_CRC>
			if(ARMsProtocol_Data._CRC == ARMsProtocol_Data.CRC_CAL){
 80009aa:	4b42      	ldr	r3, [pc, #264]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 80009ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b40      	ldr	r3, [pc, #256]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 80009b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d11b      	bne.n	80009f2 <ARMsProtocol_FUNC_Interface+0xf2>
				for(int i = 0;i <= ARMsProtocol_Data.Length - 2;i++){
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	e00c      	b.n	80009da <ARMsProtocol_FUNC_Interface+0xda>
					ARMsProtocol_Data.Data_buf[i] = ARMsProtocol_Data.Rx_buf[i+4];
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3304      	adds	r3, #4
 80009c4:	4a3b      	ldr	r2, [pc, #236]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 80009c6:	5cd1      	ldrb	r1, [r2, r3]
 80009c8:	4a3a      	ldr	r2, [pc, #232]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4413      	add	r3, r2
 80009ce:	3380      	adds	r3, #128	; 0x80
 80009d0:	460a      	mov	r2, r1
 80009d2:	701a      	strb	r2, [r3, #0]
				for(int i = 0;i <= ARMsProtocol_Data.Length - 2;i++){
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3301      	adds	r3, #1
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b36      	ldr	r3, [pc, #216]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 80009dc:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80009e0:	3b01      	subs	r3, #1
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	dbeb      	blt.n	80009c0 <ARMsProtocol_FUNC_Interface+0xc0>
				}
				ARMsProtocol_Data.State = 3;
 80009e8:	4b32      	ldr	r3, [pc, #200]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 80009ea:	2203      	movs	r2, #3
 80009ec:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
 80009f0:	e005      	b.n	80009fe <ARMsProtocol_FUNC_Interface+0xfe>
			}
			else{
				ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ILLEGALCRC);
 80009f2:	4b31      	ldr	r3, [pc, #196]	; (8000ab8 <ARMsProtocol_FUNC_Interface+0x1b8>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2102      	movs	r1, #2
 80009f8:	4618      	mov	r0, r3
 80009fa:	f000 f8b5 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
			}
			ARMsProtocol_FUNC_Rx_Clrbuf(ARMsProtocol_Data.Rx_count);
 80009fe:	4b2d      	ldr	r3, [pc, #180]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000a00:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 f8fd 	bl	8000c04 <ARMsProtocol_FUNC_Rx_Clrbuf>
			ARMsProtocol_Data.Rx_count = 0;
 8000a0a:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
		}
		if(ARMsProtocol_Data.State == 3){
 8000a12:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000a14:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 8000a18:	2b03      	cmp	r3, #3
 8000a1a:	d139      	bne.n	8000a90 <ARMsProtocol_FUNC_Interface+0x190>
			switch(ARMsProtocol_Data.Instruction){
 8000a1c:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000a1e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8000a22:	3b01      	subs	r3, #1
 8000a24:	2b06      	cmp	r3, #6
 8000a26:	d82c      	bhi.n	8000a82 <ARMsProtocol_FUNC_Interface+0x182>
 8000a28:	a201      	add	r2, pc, #4	; (adr r2, 8000a30 <ARMsProtocol_FUNC_Interface+0x130>)
 8000a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a2e:	bf00      	nop
 8000a30:	08000a4d 	.word	0x08000a4d
 8000a34:	08000a53 	.word	0x08000a53
 8000a38:	08000a59 	.word	0x08000a59
 8000a3c:	08000a5f 	.word	0x08000a5f
 8000a40:	08000a65 	.word	0x08000a65
 8000a44:	08000a6b 	.word	0x08000a6b
 8000a48:	08000a77 	.word	0x08000a77
			/* USER CODE BEGIN 0 */
			case ARMsProtocol_ADDR_JOINTJOG:
				ARMsProtocol_FUNC_Jointjog();
 8000a4c:	f000 f92c 	bl	8000ca8 <ARMsProtocol_FUNC_Jointjog>
				break;
 8000a50:	e01f      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			case ARMsProtocol_ADDR_CATESIANJOG:
				ARMsProtocol_FUNC_Catesianjog();
 8000a52:	f000 f981 	bl	8000d58 <ARMsProtocol_FUNC_Catesianjog>
				break;
 8000a56:	e01c      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			case ARMsProtocol_ADDR_TRAJECTORY:
				ARMsProtocol_FUNC_Trajectory();
 8000a58:	f000 fa6c 	bl	8000f34 <ARMsProtocol_FUNC_Trajectory>
				break;
 8000a5c:	e019      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			case ARMsProtocol_ADDR_PATHWAY:
				ARMsProtocol_FUNC_Pathway();
 8000a5e:	f000 f90f 	bl	8000c80 <ARMsProtocol_FUNC_Pathway>
				break;
 8000a62:	e016      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			case ARMsProtocol_ADDR_GRIPPER:
				ARMsProtocol_FUNC_Gripper();
 8000a64:	f000 fa7a 	bl	8000f5c <ARMsProtocol_FUNC_Gripper>
				break;
 8000a68:	e013      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			case ARMsProtocol_ADDR_JOTNTFEEDBACK:
				ARMsProtocol_FUNC_Jointfeedback(ARMsProtocol_h1.handle);
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <ARMsProtocol_FUNC_Interface+0x1b8>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 fa96 	bl	8000fa0 <ARMsProtocol_FUNC_Jointfeedback>
				break;
 8000a74:	e00d      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			case ARMsProtocol_ADDR_BOARDFEEDBACK:
				ARMsProtocol_FUNC_Boardfeedback(ARMsProtocol_h1.handle);
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <ARMsProtocol_FUNC_Interface+0x1b8>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 fbe8 	bl	8001250 <ARMsProtocol_FUNC_Boardfeedback>
				break;
 8000a80:	e007      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			/* USER CODE END 0 */
			default:
				ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ILLEGALFUNC);
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <ARMsProtocol_FUNC_Interface+0x1b8>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	2101      	movs	r1, #1
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f000 f86d 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
 8000a8e:	e000      	b.n	8000a92 <ARMsProtocol_FUNC_Interface+0x192>
			}
		}
 8000a90:	bf00      	nop
		ARMsProtocol_Data.Flag  = 0;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 20e5 	strb.w	r2, [r3, #229]	; 0xe5
		ARMsProtocol_Data.State = 0;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f883 20e4 	strb.w	r2, [r3, #228]	; 0xe4
		ARMsProtocol_Data.Rx_count = 0;
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <ARMsProtocol_FUNC_Interface+0x1b4>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
	}
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	24000338 	.word	0x24000338
 8000ab8:	2400032c 	.word	0x2400032c
 8000abc:	2400033a 	.word	0x2400033a

08000ac0 <ARMsProtocol_FUNC_Rx_Callback>:
/**
 * @brief	Recieve Callback Function
 * @param  	huart : UART_TypeDef of USART
 * @retval 	None
 */
void ARMsProtocol_FUNC_Rx_Callback(UART_HandleTypeDef *huart){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == ARMsProtocol_h1.Instance) {
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <ARMsProtocol_FUNC_Rx_Callback+0x54>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d11b      	bne.n	8000b0c <ARMsProtocol_FUNC_Rx_Callback+0x4c>
		ARMsProtocol_Data.Rx_buf[ARMsProtocol_Data.Rx_count++] = ARMsProtocol_Data.Rx_reg;
 8000ad4:	4b10      	ldr	r3, [pc, #64]	; (8000b18 <ARMsProtocol_FUNC_Rx_Callback+0x58>)
 8000ad6:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8000ada:	1c5a      	adds	r2, r3, #1
 8000adc:	b2d1      	uxtb	r1, r2
 8000ade:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <ARMsProtocol_FUNC_Rx_Callback+0x58>)
 8000ae0:	f882 10e8 	strb.w	r1, [r2, #232]	; 0xe8
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <ARMsProtocol_FUNC_Rx_Callback+0x58>)
 8000ae8:	f893 1064 	ldrb.w	r1, [r3, #100]	; 0x64
 8000aec:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <ARMsProtocol_FUNC_Rx_Callback+0x58>)
 8000aee:	5499      	strb	r1, [r3, r2]
			if (ARMsProtocol_Data.Rx_count >= sizeof(ARMsProtocol_Data.Rx_buf)) {
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <ARMsProtocol_FUNC_Rx_Callback+0x58>)
 8000af2:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8000af6:	2b63      	cmp	r3, #99	; 0x63
 8000af8:	d903      	bls.n	8000b02 <ARMsProtocol_FUNC_Rx_Callback+0x42>
				ARMsProtocol_Data.Rx_count = 0;
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <ARMsProtocol_FUNC_Rx_Callback+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
			}
		HAL_UART_Receive_IT(huart, &ARMsProtocol_Data.Rx_reg, 1);
 8000b02:	2201      	movs	r2, #1
 8000b04:	4905      	ldr	r1, [pc, #20]	; (8000b1c <ARMsProtocol_FUNC_Rx_Callback+0x5c>)
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f010 fe2c 	bl	8011764 <HAL_UART_Receive_IT>
	}
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2400032c 	.word	0x2400032c
 8000b18:	24000338 	.word	0x24000338
 8000b1c:	2400039c 	.word	0x2400039c

08000b20 <ARMsProtocol_FUNC_Tx_Callback>:
/**
 * @brief	Transmit Callback Function
 * @param  	huart : UART_TypeDef of USART
 * @retval 	None
 */
void ARMsProtocol_FUNC_Tx_Callback(UART_HandleTypeDef *huart){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	if (huart->Instance == ARMsProtocol_h1.Instance){
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <ARMsProtocol_FUNC_Tx_Callback+0x3c>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d10e      	bne.n	8000b52 <ARMsProtocol_FUNC_Tx_Callback+0x32>
			HAL_UART_Transmit_IT(huart, &ARMsProtocol_Data.Tx_buf[0], ARMsProtocol_Data.Tx_count);
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <ARMsProtocol_FUNC_Tx_Callback+0x40>)
 8000b36:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4909      	ldr	r1, [pc, #36]	; (8000b64 <ARMsProtocol_FUNC_Tx_Callback+0x44>)
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f010 fd67 	bl	8011614 <HAL_UART_Transmit_IT>
			while(ARMsProtocol_Data.Tx_flag);
 8000b46:	bf00      	nop
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <ARMsProtocol_FUNC_Tx_Callback+0x40>)
 8000b4a:	f893 30e6 	ldrb.w	r3, [r3, #230]	; 0xe6
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d1fa      	bne.n	8000b48 <ARMsProtocol_FUNC_Tx_Callback+0x28>
			//ARMsProtocol_Data.Tx_count = 0;
	}
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2400032c 	.word	0x2400032c
 8000b60:	24000338 	.word	0x24000338
 8000b64:	2400039d 	.word	0x2400039d

08000b68 <ARMsProtocol_EXCEPTION_Response>:
 * 									0x02 = ARMsProtocol_TRANSMIT_ILLEGALCRC
 * 									0x03 = ARMsProtocol_TRANSMIT_ACKNOWLEDGE
 * 									0x04 = ARMsProtocol_TRANSMIT_DONE
 * @retval 	None
 */
void ARMsProtocol_EXCEPTION_Response(UART_HandleTypeDef *huart, uint8_t code){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	70fb      	strb	r3, [r7, #3]
	ARMsProtocol_Data.Tx_count = 4;
 8000b74:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000b76:	2204      	movs	r2, #4
 8000b78:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	ARMsProtocol_Data.Tx_buf[0] = 0xFF;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000b7e:	22ff      	movs	r2, #255	; 0xff
 8000b80:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	ARMsProtocol_Data.Tx_buf[1] = ARMsProtocol_h1.slave_id;
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <ARMsProtocol_EXCEPTION_Response+0x64>)
 8000b86:	7a1a      	ldrb	r2, [r3, #8]
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000b8a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	ARMsProtocol_Data.Tx_buf[2] = code;
 8000b8e:	4a0e      	ldr	r2, [pc, #56]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	ARMsProtocol_CALC_CRC((uint32_t*) &ARMsProtocol_Data.Tx_buf, ARMsProtocol_Data.Tx_count - 1);
 8000b96:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000b98:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <ARMsProtocol_EXCEPTION_Response+0x68>)
 8000ba2:	f000 f817 	bl	8000bd4 <ARMsProtocol_CALC_CRC>
	ARMsProtocol_Data.Tx_buf[3] = ARMsProtocol_Data.CRC_CAL;
 8000ba6:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000bae:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	ARMsProtocol_Data.Tx_flag = 1;
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <ARMsProtocol_EXCEPTION_Response+0x60>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
	ARMsProtocol_FUNC_Tx_Callback(huart);
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff ffb0 	bl	8000b20 <ARMsProtocol_FUNC_Tx_Callback>
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	24000338 	.word	0x24000338
 8000bcc:	2400032c 	.word	0x2400032c
 8000bd0:	2400039d 	.word	0x2400039d

08000bd4 <ARMsProtocol_CALC_CRC>:
 * @param  	*nData  : Data
 * 			wLength : Length of Data
 * @retval 	None
 */
void ARMsProtocol_CALC_CRC (uint32_t *pBuffer, uint32_t BufferLength)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
	ARMsProtocol_Data.CRC_CAL = HAL_CRC_Calculate(&hcrc, pBuffer, BufferLength) ^ 0xFF;
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	6879      	ldr	r1, [r7, #4]
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <ARMsProtocol_CALC_CRC+0x28>)
 8000be4:	f00a fff0 	bl	800bbc8 <HAL_CRC_Calculate>
 8000be8:	4603      	mov	r3, r0
 8000bea:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8000bee:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <ARMsProtocol_CALC_CRC+0x2c>)
 8000bf0:	6793      	str	r3, [r2, #120]	; 0x78
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	24000508 	.word	0x24000508
 8000c00:	24000338 	.word	0x24000338

08000c04 <ARMsProtocol_FUNC_Rx_Clrbuf>:
/**
 * @brief	Clear Recieve Buffer
 * @param  	count : amount of data in Rx_buf
 * @retval 	None
 */
void ARMsProtocol_FUNC_Rx_Clrbuf(uint8_t count){
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
	for(int i =0; i <= count; i++){
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	e007      	b.n	8000c24 <ARMsProtocol_FUNC_Rx_Clrbuf+0x20>
		ARMsProtocol_Data.Rx_buf[i] = 0;
 8000c14:	4a09      	ldr	r2, [pc, #36]	; (8000c3c <ARMsProtocol_FUNC_Rx_Clrbuf+0x38>)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4413      	add	r3, r2
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
	for(int i =0; i <= count; i++){
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	3301      	adds	r3, #1
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	79fb      	ldrb	r3, [r7, #7]
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	ddf3      	ble.n	8000c14 <ARMsProtocol_FUNC_Rx_Clrbuf+0x10>
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	24000338 	.word	0x24000338

08000c40 <ARMsProtocol_FUNC_Data_Clrbuf>:
/**
 * @brief	Clear Data Buffer
 * @param  	count : amount of data in Data_buf
 * @retval 	None
 */
void ARMsProtocol_FUNC_Data_Clrbuf(){
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
	for(int i =0; i <= ARMsProtocol_Data.Length; i++){
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	e008      	b.n	8000c5e <ARMsProtocol_FUNC_Data_Clrbuf+0x1e>
		ARMsProtocol_Data.Data_buf[i] = 0;
 8000c4c:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <ARMsProtocol_FUNC_Data_Clrbuf+0x3c>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	3380      	adds	r3, #128	; 0x80
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
	for(int i =0; i <= ARMsProtocol_Data.Length; i++){
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <ARMsProtocol_FUNC_Data_Clrbuf+0x3c>)
 8000c60:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8000c64:	461a      	mov	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	ddef      	ble.n	8000c4c <ARMsProtocol_FUNC_Data_Clrbuf+0xc>
	}
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	24000338 	.word	0x24000338

08000c80 <ARMsProtocol_FUNC_Pathway>:
/**
 * @brief	Sethome Function
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Pathway(void){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	// Acknowledge Func
	ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ACKNOWLEDGE);
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <ARMsProtocol_FUNC_Pathway+0x20>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2103      	movs	r1, #3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ff6c 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
	ARMsProtocol_Data.Pathway_flag = 1;
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <ARMsProtocol_FUNC_Pathway+0x24>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	// Clear Data
	ARMsProtocol_FUNC_Data_Clrbuf();
 8000c98:	f7ff ffd2 	bl	8000c40 <ARMsProtocol_FUNC_Data_Clrbuf>
	// Done Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_DONE);
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	2400032c 	.word	0x2400032c
 8000ca4:	24000338 	.word	0x24000338

08000ca8 <ARMsProtocol_FUNC_Jointjog>:
/**
 * @brief	Jointjog Function
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Jointjog(void){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
	// Acknowledge Func
	ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ACKNOWLEDGE);
 8000cae:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <ARMsProtocol_FUNC_Jointjog+0xa0>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	2103      	movs	r1, #3
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff57 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
	ARMsProtocol_Data.Jointjog_flag = 1;
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <ARMsProtocol_FUNC_Jointjog+0xa4>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
	double data_buf = 0.0;
 8000cc2:	f04f 0200 	mov.w	r2, #0
 8000cc6:	f04f 0300 	mov.w	r3, #0
 8000cca:	e9c7 2300 	strd	r2, r3, [r7]
	/* USER CODE BEGIN 3 */
	for(int i = 0;i < 5;i++){
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	e02c      	b.n	8000d2e <ARMsProtocol_FUNC_Jointjog+0x86>
		data_buf = (int16_t)((ARMsProtocol_Data.Data_buf[i*2] << 8) + ARMsProtocol_Data.Data_buf[(i*2)+1]);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4a1c      	ldr	r2, [pc, #112]	; (8000d4c <ARMsProtocol_FUNC_Jointjog+0xa4>)
 8000cda:	4413      	add	r3, r2
 8000cdc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	b29a      	uxth	r2, r3
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	3301      	adds	r3, #1
 8000cec:	4917      	ldr	r1, [pc, #92]	; (8000d4c <ARMsProtocol_FUNC_Jointjog+0xa4>)
 8000cee:	440b      	add	r3, r1
 8000cf0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000cf4:	b29b      	uxth	r3, r3
 8000cf6:	4413      	add	r3, r2
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	b21b      	sxth	r3, r3
 8000cfc:	ee07 3a90 	vmov	s15, r3
 8000d00:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d04:	ed87 7b00 	vstr	d7, [r7]
		data_buf = data_buf/1000.0;
 8000d08:	ed97 6b00 	vldr	d6, [r7]
 8000d0c:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000d40 <ARMsProtocol_FUNC_Jointjog+0x98>
 8000d10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d14:	ed87 7b00 	vstr	d7, [r7]
		desired_position[i] = data_buf;
 8000d18:	4a0d      	ldr	r2, [pc, #52]	; (8000d50 <ARMsProtocol_FUNC_Jointjog+0xa8>)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	18d1      	adds	r1, r2, r3
 8000d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d24:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i = 0;i < 5;i++){
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2b04      	cmp	r3, #4
 8000d32:	ddcf      	ble.n	8000cd4 <ARMsProtocol_FUNC_Jointjog+0x2c>
//		}
	}
	/* USER CODE END 3 */

	// Clear Data
	ARMsProtocol_FUNC_Data_Clrbuf();
 8000d34:	f7ff ff84 	bl	8000c40 <ARMsProtocol_FUNC_Data_Clrbuf>
	// Done Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_DONE);
}
 8000d38:	bf00      	nop
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	00000000 	.word	0x00000000
 8000d44:	408f4000 	.word	0x408f4000
 8000d48:	2400032c 	.word	0x2400032c
 8000d4c:	24000338 	.word	0x24000338
 8000d50:	24000258 	.word	0x24000258
 8000d54:	00000000 	.word	0x00000000

08000d58 <ARMsProtocol_FUNC_Catesianjog>:
/**
 * @brief	Catesianjog Function
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Catesianjog(void){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b0a0      	sub	sp, #128	; 0x80
 8000d5c:	af00      	add	r7, sp, #0
	// Acknowledge Func
	ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ACKNOWLEDGE);
 8000d5e:	4b72      	ldr	r3, [pc, #456]	; (8000f28 <ARMsProtocol_FUNC_Catesianjog+0x1d0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2103      	movs	r1, #3
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff feff 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
	ARMsProtocol_Data.Catesian_flag = 1;
 8000d6a:	4b70      	ldr	r3, [pc, #448]	; (8000f2c <ARMsProtocol_FUNC_Catesianjog+0x1d4>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
	/* USER CODE BEGIN 4 */
	double joint_config[5] = {0};
 8000d72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d76:	2228      	movs	r2, #40	; 0x28
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f013 fa3a 	bl	80141f4 <memset>
	double delta_q[5] = {0};
 8000d80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d84:	2228      	movs	r2, #40	; 0x28
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f013 fa33 	bl	80141f4 <memset>
	double delta_khe[5] = {0};
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2228      	movs	r2, #40	; 0x28
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f013 fa2d 	bl	80141f4 <memset>
	for (int i = 0; i <5; i++){
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000d9e:	e036      	b.n	8000e0e <ARMsProtocol_FUNC_Catesianjog+0xb6>
		delta_khe[i] = (int16_t)((ARMsProtocol_Data.Data_buf[i*2] << 8) + ARMsProtocol_Data.Data_buf[(i*2)+1]);
 8000da0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4a61      	ldr	r2, [pc, #388]	; (8000f2c <ARMsProtocol_FUNC_Catesianjog+0x1d4>)
 8000da6:	4413      	add	r3, r2
 8000da8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	021b      	lsls	r3, r3, #8
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	3301      	adds	r3, #1
 8000db8:	495c      	ldr	r1, [pc, #368]	; (8000f2c <ARMsProtocol_FUNC_Catesianjog+0x1d4>)
 8000dba:	440b      	add	r3, r1
 8000dbc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	4413      	add	r3, r2
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	b21b      	sxth	r3, r3
 8000dc8:	ee07 3a90 	vmov	s15, r3
 8000dcc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000dd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000dd2:	00db      	lsls	r3, r3, #3
 8000dd4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000dd8:	4413      	add	r3, r2
 8000dda:	3b80      	subs	r3, #128	; 0x80
 8000ddc:	ed83 7b00 	vstr	d7, [r3]
		delta_khe[i] = delta_khe[i]/1000.0;
 8000de0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000de2:	00db      	lsls	r3, r3, #3
 8000de4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000de8:	4413      	add	r3, r2
 8000dea:	3b80      	subs	r3, #128	; 0x80
 8000dec:	ed93 6b00 	vldr	d6, [r3]
 8000df0:	ed9f 5b45 	vldr	d5, [pc, #276]	; 8000f08 <ARMsProtocol_FUNC_Catesianjog+0x1b0>
 8000df4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000df8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000dfa:	00db      	lsls	r3, r3, #3
 8000dfc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000e00:	4413      	add	r3, r2
 8000e02:	3b80      	subs	r3, #128	; 0x80
 8000e04:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i <5; i++){
 8000e08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000e0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	ddc5      	ble.n	8000da0 <ARMsProtocol_FUNC_Catesianjog+0x48>
//	joint_config[2] = (2*M_PI * encoder_config[2])/16384.0f;
//	double m4 = (2*M_PI * encoder_config[3])/16384.0f;
//	double m5 =  (2*M_PI * encoder_config[4])/16384.0f;
//	joint_config[3] = (m4 + m5) * 0.1125;
//	joint_config[4] = (m4 - m5)/8.0;
	joint_config[0] = desired_position[0] * (9.0/25.0);
 8000e14:	4b46      	ldr	r3, [pc, #280]	; (8000f30 <ARMsProtocol_FUNC_Catesianjog+0x1d8>)
 8000e16:	ed93 7b00 	vldr	d7, [r3]
 8000e1a:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8000f10 <ARMsProtocol_FUNC_Catesianjog+0x1b8>
 8000e1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e22:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	joint_config[1] = desired_position[1] / 27.0;
 8000e26:	4b42      	ldr	r3, [pc, #264]	; (8000f30 <ARMsProtocol_FUNC_Catesianjog+0x1d8>)
 8000e28:	ed93 6b02 	vldr	d6, [r3, #8]
 8000e2c:	eeb3 5b0b 	vmov.f64	d5, #59	; 0x41d80000  27.0
 8000e30:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e34:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	joint_config[2] = asin(desired_position[2]/22.5);
 8000e38:	4b3d      	ldr	r3, [pc, #244]	; (8000f30 <ARMsProtocol_FUNC_Catesianjog+0x1d8>)
 8000e3a:	ed93 7b04 	vldr	d7, [r3, #16]
 8000e3e:	ed9f 5b36 	vldr	d5, [pc, #216]	; 8000f18 <ARMsProtocol_FUNC_Catesianjog+0x1c0>
 8000e42:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000e46:	eeb0 0b46 	vmov.f64	d0, d6
 8000e4a:	f016 f9a5 	bl	8017198 <asin>
 8000e4e:	eeb0 7b40 	vmov.f64	d7, d0
 8000e52:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
	joint_config[3] = (desired_position[3] + desired_position[4]) * 0.1125;
 8000e56:	4b36      	ldr	r3, [pc, #216]	; (8000f30 <ARMsProtocol_FUNC_Catesianjog+0x1d8>)
 8000e58:	ed93 6b06 	vldr	d6, [r3, #24]
 8000e5c:	4b34      	ldr	r3, [pc, #208]	; (8000f30 <ARMsProtocol_FUNC_Catesianjog+0x1d8>)
 8000e5e:	ed93 7b08 	vldr	d7, [r3, #32]
 8000e62:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000e66:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8000f20 <ARMsProtocol_FUNC_Catesianjog+0x1c8>
 8000e6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e6e:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
	joint_config[4] = (desired_position[3] - desired_position[4])/8.0;
 8000e72:	4b2f      	ldr	r3, [pc, #188]	; (8000f30 <ARMsProtocol_FUNC_Catesianjog+0x1d8>)
 8000e74:	ed93 6b06 	vldr	d6, [r3, #24]
 8000e78:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <ARMsProtocol_FUNC_Catesianjog+0x1d8>)
 8000e7a:	ed93 7b08 	vldr	d7, [r3, #32]
 8000e7e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8000e82:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8000e86:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000e8a:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
	IVK(joint_config, delta_khe, delta_q);
 8000e8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000e92:	4639      	mov	r1, r7
 8000e94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f000 fd71 	bl	8001980 <IVK>
	for (int i = 0; i < 5; i++) {
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	67bb      	str	r3, [r7, #120]	; 0x78
 8000ea2:	e025      	b.n	8000ef0 <ARMsProtocol_FUNC_Catesianjog+0x198>
		delta_khe[i] = 0;
 8000ea4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000eac:	4413      	add	r3, r2
 8000eae:	f1a3 0180 	sub.w	r1, r3, #128	; 0x80
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	f04f 0300 	mov.w	r3, #0
 8000eba:	e9c1 2300 	strd	r2, r3, [r1]
		desired_position[i] += delta_q[i];
 8000ebe:	4a1c      	ldr	r2, [pc, #112]	; (8000f30 <ARMsProtocol_FUNC_Catesianjog+0x1d8>)
 8000ec0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	4413      	add	r3, r2
 8000ec6:	ed93 6b00 	vldr	d6, [r3]
 8000eca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8000ed2:	4413      	add	r3, r2
 8000ed4:	3b58      	subs	r3, #88	; 0x58
 8000ed6:	ed93 7b00 	vldr	d7, [r3]
 8000eda:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ede:	4a14      	ldr	r2, [pc, #80]	; (8000f30 <ARMsProtocol_FUNC_Catesianjog+0x1d8>)
 8000ee0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	4413      	add	r3, r2
 8000ee6:	ed83 7b00 	vstr	d7, [r3]
	for (int i = 0; i < 5; i++) {
 8000eea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000eec:	3301      	adds	r3, #1
 8000eee:	67bb      	str	r3, [r7, #120]	; 0x78
 8000ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ef2:	2b04      	cmp	r3, #4
 8000ef4:	ddd6      	ble.n	8000ea4 <ARMsProtocol_FUNC_Catesianjog+0x14c>
	}
	/* USER CODE END 4 */

	// Clear Data
	ARMsProtocol_FUNC_Data_Clrbuf();
 8000ef6:	f7ff fea3 	bl	8000c40 <ARMsProtocol_FUNC_Data_Clrbuf>
	// Done Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_DONE);
}
 8000efa:	bf00      	nop
 8000efc:	3780      	adds	r7, #128	; 0x80
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	f3af 8000 	nop.w
 8000f08:	00000000 	.word	0x00000000
 8000f0c:	408f4000 	.word	0x408f4000
 8000f10:	70a3d70a 	.word	0x70a3d70a
 8000f14:	3fd70a3d 	.word	0x3fd70a3d
 8000f18:	00000000 	.word	0x00000000
 8000f1c:	40368000 	.word	0x40368000
 8000f20:	cccccccd 	.word	0xcccccccd
 8000f24:	3fbccccc 	.word	0x3fbccccc
 8000f28:	2400032c 	.word	0x2400032c
 8000f2c:	24000338 	.word	0x24000338
 8000f30:	24000258 	.word	0x24000258

08000f34 <ARMsProtocol_FUNC_Trajectory>:
 *
 * @brief	Recievetrajectory Function
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Trajectory(void){
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	// Acknowledge Func
	ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ACKNOWLEDGE);
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <ARMsProtocol_FUNC_Trajectory+0x20>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2103      	movs	r1, #3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fe12 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
	ARMsProtocol_Data.Trajectory_flag = 1;
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <ARMsProtocol_FUNC_Trajectory+0x24>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	/* USER CODE BEGIN 5 */

	/* USER CODE END 5 */

	// Clear Data
	ARMsProtocol_FUNC_Data_Clrbuf();
 8000f4c:	f7ff fe78 	bl	8000c40 <ARMsProtocol_FUNC_Data_Clrbuf>
	// Done Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_DONE);
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	2400032c 	.word	0x2400032c
 8000f58:	24000338 	.word	0x24000338

08000f5c <ARMsProtocol_FUNC_Gripper>:
/**
 * @brief	Controlgripper Function
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Gripper(void){
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
	// Acknowledge Func
	ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ACKNOWLEDGE);
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <ARMsProtocol_FUNC_Gripper+0x34>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2103      	movs	r1, #3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fdfe 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
	/* USER CODE BEGIN 6 */
	servo_flag = 1;
 8000f6c:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <ARMsProtocol_FUNC_Gripper+0x38>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
	servo_degree = ARMsProtocol_Data.Data_buf[0];
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <ARMsProtocol_FUNC_Gripper+0x3c>)
 8000f74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000f78:	ee07 3a90 	vmov	s15, r3
 8000f7c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <ARMsProtocol_FUNC_Gripper+0x40>)
 8000f82:	ed83 7b00 	vstr	d7, [r3]
	/* USER CODE END 6 */

	// Clear Data
	ARMsProtocol_FUNC_Data_Clrbuf();
 8000f86:	f7ff fe5b 	bl	8000c40 <ARMsProtocol_FUNC_Data_Clrbuf>
	// Done Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_DONE);
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	2400032c 	.word	0x2400032c
 8000f94:	24000280 	.word	0x24000280
 8000f98:	24000338 	.word	0x24000338
 8000f9c:	24000288 	.word	0x24000288

08000fa0 <ARMsProtocol_FUNC_Jointfeedback>:
/**
 * @brief	Setzeroencoder Function
 * @param  	None
 * @retval 	None
 */
void ARMsProtocol_FUNC_Jointfeedback(UART_HandleTypeDef *huart){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b090      	sub	sp, #64	; 0x40
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	// Acknowledge Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ACKNOWLEDGE);
	/* USER CODE BEGIN 7 */
	double joint_config[5] = {0};
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	2228      	movs	r2, #40	; 0x28
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f013 f91f 	bl	80141f4 <memset>
	joint_config[0] = (2*M_PI * encoder_config[0])/16384.0f;
 8000fb6:	4ba2      	ldr	r3, [pc, #648]	; (8001240 <ARMsProtocol_FUNC_Jointfeedback+0x2a0>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	ee07 3a90 	vmov	s15, r3
 8000fbe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fc2:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8001220 <ARMsProtocol_FUNC_Jointfeedback+0x280>
 8000fc6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fca:	ed9f 5b97 	vldr	d5, [pc, #604]	; 8001228 <ARMsProtocol_FUNC_Jointfeedback+0x288>
 8000fce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fd2:	ed87 7b02 	vstr	d7, [r7, #8]
	joint_config[1] = (2*M_PI * encoder_config[1])/16384.0f;
 8000fd6:	4b9a      	ldr	r3, [pc, #616]	; (8001240 <ARMsProtocol_FUNC_Jointfeedback+0x2a0>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	ee07 3a90 	vmov	s15, r3
 8000fde:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000fe2:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8001220 <ARMsProtocol_FUNC_Jointfeedback+0x280>
 8000fe6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000fea:	ed9f 5b8f 	vldr	d5, [pc, #572]	; 8001228 <ARMsProtocol_FUNC_Jointfeedback+0x288>
 8000fee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ff2:	ed87 7b04 	vstr	d7, [r7, #16]
	joint_config[2] = (2*M_PI * encoder_config[2])/16384.0f;
 8000ff6:	4b92      	ldr	r3, [pc, #584]	; (8001240 <ARMsProtocol_FUNC_Jointfeedback+0x2a0>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	ee07 3a90 	vmov	s15, r3
 8000ffe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001002:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8001220 <ARMsProtocol_FUNC_Jointfeedback+0x280>
 8001006:	ee27 6b06 	vmul.f64	d6, d7, d6
 800100a:	ed9f 5b87 	vldr	d5, [pc, #540]	; 8001228 <ARMsProtocol_FUNC_Jointfeedback+0x288>
 800100e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001012:	ed87 7b06 	vstr	d7, [r7, #24]
	double m4 = (2*M_PI * encoder_config[3])/16384.0f;
 8001016:	4b8a      	ldr	r3, [pc, #552]	; (8001240 <ARMsProtocol_FUNC_Jointfeedback+0x2a0>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	ee07 3a90 	vmov	s15, r3
 800101e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001022:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8001220 <ARMsProtocol_FUNC_Jointfeedback+0x280>
 8001026:	ee27 6b06 	vmul.f64	d6, d7, d6
 800102a:	ed9f 5b7f 	vldr	d5, [pc, #508]	; 8001228 <ARMsProtocol_FUNC_Jointfeedback+0x288>
 800102e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001032:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	double m5 =  (2*M_PI * encoder_config[4])/16384.0f;
 8001036:	4b82      	ldr	r3, [pc, #520]	; (8001240 <ARMsProtocol_FUNC_Jointfeedback+0x2a0>)
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	ee07 3a90 	vmov	s15, r3
 800103e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001042:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8001220 <ARMsProtocol_FUNC_Jointfeedback+0x280>
 8001046:	ee27 6b06 	vmul.f64	d6, d7, d6
 800104a:	ed9f 5b77 	vldr	d5, [pc, #476]	; 8001228 <ARMsProtocol_FUNC_Jointfeedback+0x288>
 800104e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001052:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	joint_config[3] = (m4 + m5) * 0.1125;
 8001056:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 800105a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800105e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001062:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8001230 <ARMsProtocol_FUNC_Jointfeedback+0x290>
 8001066:	ee27 7b06 	vmul.f64	d7, d7, d6
 800106a:	ed87 7b08 	vstr	d7, [r7, #32]
	joint_config[4] = (m4 - m5)/8.0;
 800106e:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8001072:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001076:	ee36 6b47 	vsub.f64	d6, d6, d7
 800107a:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 800107e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001082:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	joint_config[0] = joint_config[0]*1000.0;
 8001086:	ed97 7b02 	vldr	d7, [r7, #8]
 800108a:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8001238 <ARMsProtocol_FUNC_Jointfeedback+0x298>
 800108e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001092:	ed87 7b02 	vstr	d7, [r7, #8]
	joint_config[1] = joint_config[1]*1000.0;
 8001096:	ed97 7b04 	vldr	d7, [r7, #16]
 800109a:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8001238 <ARMsProtocol_FUNC_Jointfeedback+0x298>
 800109e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010a2:	ed87 7b04 	vstr	d7, [r7, #16]
	joint_config[2] = joint_config[2]*1000.0;
 80010a6:	ed97 7b06 	vldr	d7, [r7, #24]
 80010aa:	ed9f 6b63 	vldr	d6, [pc, #396]	; 8001238 <ARMsProtocol_FUNC_Jointfeedback+0x298>
 80010ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010b2:	ed87 7b06 	vstr	d7, [r7, #24]
	joint_config[3] = joint_config[3]*1000.0;
 80010b6:	ed97 7b08 	vldr	d7, [r7, #32]
 80010ba:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8001238 <ARMsProtocol_FUNC_Jointfeedback+0x298>
 80010be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010c2:	ed87 7b08 	vstr	d7, [r7, #32]
	joint_config[4] = joint_config[4]*1000.0;
 80010c6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80010ca:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8001238 <ARMsProtocol_FUNC_Jointfeedback+0x298>
 80010ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010d2:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	ARMsProtocol_Data.Tx_count = 15;
 80010d6:	4b5b      	ldr	r3, [pc, #364]	; (8001244 <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 80010d8:	220f      	movs	r2, #15
 80010da:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	ARMsProtocol_Data.Tx_buf[0] = 0xFF;
 80010de:	4b59      	ldr	r3, [pc, #356]	; (8001244 <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 80010e0:	22ff      	movs	r2, #255	; 0xff
 80010e2:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	ARMsProtocol_Data.Tx_buf[1] = ARMsProtocol_h1.slave_id;
 80010e6:	4b58      	ldr	r3, [pc, #352]	; (8001248 <ARMsProtocol_FUNC_Jointfeedback+0x2a8>)
 80010e8:	7a1a      	ldrb	r2, [r3, #8]
 80010ea:	4b56      	ldr	r3, [pc, #344]	; (8001244 <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 80010ec:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	ARMsProtocol_Data.Tx_buf[2] = ARMsProtocol_ADDR_JOTNTFEEDBACK;
 80010f0:	4b54      	ldr	r3, [pc, #336]	; (8001244 <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 80010f2:	2206      	movs	r2, #6
 80010f4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	ARMsProtocol_Data.Tx_buf[3] = 11;
 80010f8:	4b52      	ldr	r3, [pc, #328]	; (8001244 <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 80010fa:	220b      	movs	r2, #11
 80010fc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	ARMsProtocol_Data.Tx_buf[4] = ((int16_t)joint_config[0]) >> 8; //J1_H
 8001100:	ed97 7b02 	vldr	d7, [r7, #8]
 8001104:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001108:	ee17 3a90 	vmov	r3, s15
 800110c:	b21b      	sxth	r3, r3
 800110e:	121b      	asrs	r3, r3, #8
 8001110:	b21b      	sxth	r3, r3
 8001112:	b2da      	uxtb	r2, r3
 8001114:	4b4b      	ldr	r3, [pc, #300]	; (8001244 <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 8001116:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	ARMsProtocol_Data.Tx_buf[5] = ((int16_t)joint_config[0]);//J1_L
 800111a:	ed97 7b02 	vldr	d7, [r7, #8]
 800111e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001122:	ee17 3a90 	vmov	r3, s15
 8001126:	b21b      	sxth	r3, r3
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4b46      	ldr	r3, [pc, #280]	; (8001244 <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 800112c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	ARMsProtocol_Data.Tx_buf[6] = ((int16_t)joint_config[1]) >> 8; //J2_H
 8001130:	ed97 7b04 	vldr	d7, [r7, #16]
 8001134:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001138:	ee17 3a90 	vmov	r3, s15
 800113c:	b21b      	sxth	r3, r3
 800113e:	121b      	asrs	r3, r3, #8
 8001140:	b21b      	sxth	r3, r3
 8001142:	b2da      	uxtb	r2, r3
 8001144:	4b3f      	ldr	r3, [pc, #252]	; (8001244 <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 8001146:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	ARMsProtocol_Data.Tx_buf[7] = ((int16_t)joint_config[1]); //J2_L
 800114a:	ed97 7b04 	vldr	d7, [r7, #16]
 800114e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001152:	ee17 3a90 	vmov	r3, s15
 8001156:	b21b      	sxth	r3, r3
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4b3a      	ldr	r3, [pc, #232]	; (8001244 <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 800115c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	ARMsProtocol_Data.Tx_buf[8] = ((int16_t)joint_config[2]) >> 8; //J3_H
 8001160:	ed97 7b06 	vldr	d7, [r7, #24]
 8001164:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001168:	ee17 3a90 	vmov	r3, s15
 800116c:	b21b      	sxth	r3, r3
 800116e:	121b      	asrs	r3, r3, #8
 8001170:	b21b      	sxth	r3, r3
 8001172:	b2da      	uxtb	r2, r3
 8001174:	4b33      	ldr	r3, [pc, #204]	; (8001244 <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 8001176:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	ARMsProtocol_Data.Tx_buf[9] = ((int16_t)joint_config[2]); //J3_L
 800117a:	ed97 7b06 	vldr	d7, [r7, #24]
 800117e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001182:	ee17 3a90 	vmov	r3, s15
 8001186:	b21b      	sxth	r3, r3
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 800118c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	ARMsProtocol_Data.Tx_buf[10] = ((int16_t)joint_config[3]) >> 8;//J4_H
 8001190:	ed97 7b08 	vldr	d7, [r7, #32]
 8001194:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001198:	ee17 3a90 	vmov	r3, s15
 800119c:	b21b      	sxth	r3, r3
 800119e:	121b      	asrs	r3, r3, #8
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	4b27      	ldr	r3, [pc, #156]	; (8001244 <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 80011a6:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	ARMsProtocol_Data.Tx_buf[11] = ((int16_t)joint_config[3]);//J4_L
 80011aa:	ed97 7b08 	vldr	d7, [r7, #32]
 80011ae:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80011b2:	ee17 3a90 	vmov	r3, s15
 80011b6:	b21b      	sxth	r3, r3
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b22      	ldr	r3, [pc, #136]	; (8001244 <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 80011bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	ARMsProtocol_Data.Tx_buf[12] = ((int16_t)joint_config[4]) >> 8;//J5_H
 80011c0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80011c4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80011c8:	ee17 3a90 	vmov	r3, s15
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	121b      	asrs	r3, r3, #8
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 80011d6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	ARMsProtocol_Data.Tx_buf[13] = ((int16_t)joint_config[4]);//J6_L
 80011da:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80011de:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80011e2:	ee17 3a90 	vmov	r3, s15
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4b16      	ldr	r3, [pc, #88]	; (8001244 <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 80011ec:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	ARMsProtocol_CALC_CRC((uint32_t*) &ARMsProtocol_Data.Tx_buf[2], 12);
 80011f0:	210c      	movs	r1, #12
 80011f2:	4816      	ldr	r0, [pc, #88]	; (800124c <ARMsProtocol_FUNC_Jointfeedback+0x2ac>)
 80011f4:	f7ff fcee 	bl	8000bd4 <ARMsProtocol_CALC_CRC>
	ARMsProtocol_Data.Tx_buf[14] = ARMsProtocol_Data.CRC_CAL;
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 80011fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 8001200:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	ARMsProtocol_Data.Tx_flag = 1;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <ARMsProtocol_FUNC_Jointfeedback+0x2a4>)
 8001206:	2201      	movs	r2, #1
 8001208:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
	ARMsProtocol_FUNC_Tx_Callback(huart);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff fc87 	bl	8000b20 <ARMsProtocol_FUNC_Tx_Callback>
	/* USER CODE END 7 */

	// Clear Data
	ARMsProtocol_FUNC_Data_Clrbuf();
 8001212:	f7ff fd15 	bl	8000c40 <ARMsProtocol_FUNC_Data_Clrbuf>
	// Done Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_DONE);
}
 8001216:	bf00      	nop
 8001218:	3740      	adds	r7, #64	; 0x40
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	54442d18 	.word	0x54442d18
 8001224:	401921fb 	.word	0x401921fb
 8001228:	00000000 	.word	0x00000000
 800122c:	40d00000 	.word	0x40d00000
 8001230:	cccccccd 	.word	0xcccccccd
 8001234:	3fbccccc 	.word	0x3fbccccc
 8001238:	00000000 	.word	0x00000000
 800123c:	408f4000 	.word	0x408f4000
 8001240:	24000290 	.word	0x24000290
 8001244:	24000338 	.word	0x24000338
 8001248:	2400032c 	.word	0x2400032c
 800124c:	2400039f 	.word	0x2400039f

08001250 <ARMsProtocol_FUNC_Boardfeedback>:


void ARMsProtocol_FUNC_Boardfeedback(UART_HandleTypeDef *huart){
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	// Acknowledge Func
	ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_ACKNOWLEDGE);
 8001258:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <ARMsProtocol_FUNC_Boardfeedback+0x84>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2103      	movs	r1, #3
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fc82 	bl	8000b68 <ARMsProtocol_EXCEPTION_Response>
	/* USER CODE BEGIN 8 */
	ARMsProtocol_Data.Tx_count = 7;
 8001264:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 8001266:	2207      	movs	r2, #7
 8001268:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
	ARMsProtocol_Data.Tx_buf[0] = 0xFF;
 800126c:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 800126e:	22ff      	movs	r2, #255	; 0xff
 8001270:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	ARMsProtocol_Data.Tx_buf[1] = ARMsProtocol_h1.slave_id;
 8001274:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <ARMsProtocol_FUNC_Boardfeedback+0x84>)
 8001276:	7a1a      	ldrb	r2, [r3, #8]
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 800127a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	ARMsProtocol_Data.Tx_buf[2] = ARMsProtocol_ADDR_BOARDFEEDBACK;
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 8001280:	2207      	movs	r2, #7
 8001282:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
	ARMsProtocol_Data.Tx_buf[3] = 11;
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 8001288:	220b      	movs	r2, #11
 800128a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	ARMsProtocol_Data.Tx_buf[4] = 0;
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
	ARMsProtocol_Data.Tx_buf[5] = 0;
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 8001298:	2200      	movs	r2, #0
 800129a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	ARMsProtocol_CALC_CRC((uint32_t*) &ARMsProtocol_Data.Tx_buf, ARMsProtocol_Data.Tx_count - 1);
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 80012a0:	f893 30e9 	ldrb.w	r3, [r3, #233]	; 0xe9
 80012a4:	3b01      	subs	r3, #1
 80012a6:	4619      	mov	r1, r3
 80012a8:	480c      	ldr	r0, [pc, #48]	; (80012dc <ARMsProtocol_FUNC_Boardfeedback+0x8c>)
 80012aa:	f7ff fc93 	bl	8000bd4 <ARMsProtocol_CALC_CRC>
	ARMsProtocol_Data.Tx_buf[6] = ARMsProtocol_Data.CRC_CAL;
 80012ae:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 80012b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 80012b6:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	ARMsProtocol_Data.Tx_flag = 1;
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <ARMsProtocol_FUNC_Boardfeedback+0x88>)
 80012bc:	2201      	movs	r2, #1
 80012be:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
	ARMsProtocol_FUNC_Tx_Callback(huart);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff fc2c 	bl	8000b20 <ARMsProtocol_FUNC_Tx_Callback>
	/* USER CODE END 8 */

	// Clear Data
	ARMsProtocol_FUNC_Data_Clrbuf();
 80012c8:	f7ff fcba 	bl	8000c40 <ARMsProtocol_FUNC_Data_Clrbuf>
	// Done Func
	//ARMsProtocol_EXCEPTION_Response(ARMsProtocol_h1.handle, ARMsProtocol_TRANSMIT_DONE);
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2400032c 	.word	0x2400032c
 80012d8:	24000338 	.word	0x24000338
 80012dc:	2400039d 	.word	0x2400039d

080012e0 <KalmanFilter_initialise>:
 *  Created on: Jan 28, 2022
 *      Author: fame
 */
#include <Library/KalmanFilter.h>

void KalmanFilter_initialise(KalmanFilter *dev, double x1,double x2,double p11,double p12,double p21,double p22, double R, double Q){
 80012e0:	b480      	push	{r7}
 80012e2:	b093      	sub	sp, #76	; 0x4c
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6478      	str	r0, [r7, #68]	; 0x44
 80012e8:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 80012ec:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 80012f0:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 80012f4:	ed87 3b08 	vstr	d3, [r7, #32]
 80012f8:	ed87 4b06 	vstr	d4, [r7, #24]
 80012fc:	ed87 5b04 	vstr	d5, [r7, #16]
 8001300:	ed87 6b02 	vstr	d6, [r7, #8]
 8001304:	ed87 7b00 	vstr	d7, [r7]
	/* Parameter */
	dev->R = R;
 8001308:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800130a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800130e:	e9c1 2300 	strd	r2, r3, [r1]
	dev->Q = Q;
 8001312:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001314:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001318:	e9c1 2302 	strd	r2, r3, [r1, #8]

	/* KF "memory" */
	dev->x1 = x1;
 800131c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800131e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001322:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dev->x2 = x2;
 8001326:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001328:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800132c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	dev->p11 = p11;
 8001330:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001332:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001336:	e9c1 2308 	strd	r2, r3, [r1, #32]
	dev->p12 = p12;
 800133a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800133c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001340:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	dev->p21 = p21;
 8001344:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001346:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800134a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	dev->p22 = p22;
 800134e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001350:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001354:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001358:	bf00      	nop
 800135a:	374c      	adds	r7, #76	; 0x4c
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	0000      	movs	r0, r0
	...

08001368 <KalmanFilter_Update>:

void KalmanFilter_Update(KalmanFilter *dev,double theta_k) {
 8001368:	b480      	push	{r7}
 800136a:	b09b      	sub	sp, #108	; 0x6c
 800136c:	af00      	add	r7, sp, #0
 800136e:	60f8      	str	r0, [r7, #12]
 8001370:	ed87 0b00 	vstr	d0, [r7]
	double X1 = (dev->x1);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800137a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double X2 = (dev->x2);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001384:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double P11 = (dev->p11);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800138e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double P12 = (dev->p12);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001398:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double P21 = (dev->p21);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80013a2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double P22 = (dev->p22);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80013ac:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double Q = (dev->Q);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80013b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double R = (dev->R);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double dt_pow2 = DT * DT;
 80013c4:	f20f 4320 	addw	r3, pc, #1056	; 0x420
 80013c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013cc:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double dt_pow3 = DT * DT * DT;
 80013d0:	f20f 431c 	addw	r3, pc, #1052	; 0x41c
 80013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double dt_pow4 = DT * DT * DT * DT;
 80013dc:	f20f 4318 	addw	r3, pc, #1048	; 0x418
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
	dev->x1 = X1 + X2*DT - ((X1 - theta_k + X2*DT)*(P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT)))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 80013e8:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80013ec:	ed9f 6bfc 	vldr	d6, [pc, #1008]	; 80017e0 <KalmanFilter_Update+0x478>
 80013f0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80013f4:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80013f8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013fc:	ed97 5b18 	vldr	d5, [r7, #96]	; 0x60
 8001400:	ed97 7b00 	vldr	d7, [r7]
 8001404:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001408:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800140c:	ed9f 4bf4 	vldr	d4, [pc, #976]	; 80017e0 <KalmanFilter_Update+0x478>
 8001410:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001414:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001418:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800141c:	ed9f 4bf0 	vldr	d4, [pc, #960]	; 80017e0 <KalmanFilter_Update+0x478>
 8001420:	ee27 4b04 	vmul.f64	d4, d7, d4
 8001424:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8001428:	ee34 4b07 	vadd.f64	d4, d4, d7
 800142c:	ed97 3b0c 	vldr	d3, [r7, #48]	; 0x30
 8001430:	ed97 7b04 	vldr	d7, [r7, #16]
 8001434:	ee23 3b07 	vmul.f64	d3, d3, d7
 8001438:	eeb1 2b00 	vmov.f64	d2, #16	; 0x40800000  4.0
 800143c:	ee83 7b02 	vdiv.f64	d7, d3, d2
 8001440:	ee34 4b07 	vadd.f64	d4, d4, d7
 8001444:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001448:	ed9f 3be5 	vldr	d3, [pc, #916]	; 80017e0 <KalmanFilter_Update+0x478>
 800144c:	ee27 3b03 	vmul.f64	d3, d7, d3
 8001450:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001454:	ee33 7b07 	vadd.f64	d7, d3, d7
 8001458:	ed9f 3be1 	vldr	d3, [pc, #900]	; 80017e0 <KalmanFilter_Update+0x478>
 800145c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001460:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001464:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001468:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 800146c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001470:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001474:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001478:	ed9f 3bd9 	vldr	d3, [pc, #868]	; 80017e0 <KalmanFilter_Update+0x478>
 800147c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001480:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001484:	ed97 3b0c 	vldr	d3, [r7, #48]	; 0x30
 8001488:	ed97 7b04 	vldr	d7, [r7, #16]
 800148c:	ee23 3b07 	vmul.f64	d3, d3, d7
 8001490:	eeb1 2b00 	vmov.f64	d2, #16	; 0x40800000  4.0
 8001494:	ee83 7b02 	vdiv.f64	d7, d3, d2
 8001498:	ee35 5b07 	vadd.f64	d5, d5, d7
 800149c:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80014a0:	ed9f 3bcf 	vldr	d3, [pc, #828]	; 80017e0 <KalmanFilter_Update+0x478>
 80014a4:	ee27 3b03 	vmul.f64	d3, d7, d3
 80014a8:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80014ac:	ee33 7b07 	vadd.f64	d7, d3, d7
 80014b0:	ed9f 3bcb 	vldr	d3, [pc, #812]	; 80017e0 <KalmanFilter_Update+0x478>
 80014b4:	ee27 7b03 	vmul.f64	d7, d7, d3
 80014b8:	ee35 5b07 	vadd.f64	d5, d5, d7
 80014bc:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80014c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	ed83 7b04 	vstr	d7, [r3, #16]
	dev->x2  = X2 - (((Q*dt_pow3)/2 + P22*DT + P21)*(X1 - theta_k + X2*DT))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 80014ca:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 80014ce:	ed97 7b06 	vldr	d7, [r7, #24]
 80014d2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80014d6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80014da:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80014de:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80014e2:	ed9f 5bbf 	vldr	d5, [pc, #764]	; 80017e0 <KalmanFilter_Update+0x478>
 80014e6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80014ea:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014ee:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80014f2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014f6:	ed97 5b18 	vldr	d5, [r7, #96]	; 0x60
 80014fa:	ed97 7b00 	vldr	d7, [r7]
 80014fe:	ee35 5b47 	vsub.f64	d5, d5, d7
 8001502:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8001506:	ed9f 4bb6 	vldr	d4, [pc, #728]	; 80017e0 <KalmanFilter_Update+0x478>
 800150a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800150e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001512:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001516:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 800151a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800151e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001522:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001526:	ed9f 4bae 	vldr	d4, [pc, #696]	; 80017e0 <KalmanFilter_Update+0x478>
 800152a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800152e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001532:	ed97 4b0c 	vldr	d4, [r7, #48]	; 0x30
 8001536:	ed97 7b04 	vldr	d7, [r7, #16]
 800153a:	ee24 4b07 	vmul.f64	d4, d4, d7
 800153e:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
 8001542:	ee84 7b03 	vdiv.f64	d7, d4, d3
 8001546:	ee36 6b07 	vadd.f64	d6, d6, d7
 800154a:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800154e:	ed9f 4ba4 	vldr	d4, [pc, #656]	; 80017e0 <KalmanFilter_Update+0x478>
 8001552:	ee27 4b04 	vmul.f64	d4, d7, d4
 8001556:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800155a:	ee34 7b07 	vadd.f64	d7, d4, d7
 800155e:	ed9f 4ba0 	vldr	d4, [pc, #640]	; 80017e0 <KalmanFilter_Update+0x478>
 8001562:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001566:	ee36 6b07 	vadd.f64	d6, d6, d7
 800156a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800156e:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8001572:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	ed83 7b06 	vstr	d7, [r3, #24]
	dev->p11  = -((P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT)) - 1)*(P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 800157c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001580:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80017e0 <KalmanFilter_Update+0x478>
 8001584:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001588:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800158c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001590:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 8001594:	ed97 7b04 	vldr	d7, [r7, #16]
 8001598:	ee25 5b07 	vmul.f64	d5, d5, d7
 800159c:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 80015a0:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80015a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015a8:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80015ac:	ed9f 5b8c 	vldr	d5, [pc, #560]	; 80017e0 <KalmanFilter_Update+0x478>
 80015b0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80015b4:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80015b8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80015bc:	ed9f 5b88 	vldr	d5, [pc, #544]	; 80017e0 <KalmanFilter_Update+0x478>
 80015c0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80015c4:	ee36 5b07 	vadd.f64	d5, d6, d7
 80015c8:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80015cc:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80015d0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015d4:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80015d8:	ed9f 4b81 	vldr	d4, [pc, #516]	; 80017e0 <KalmanFilter_Update+0x478>
 80015dc:	ee27 7b04 	vmul.f64	d7, d7, d4
 80015e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015e4:	ed97 4b0c 	vldr	d4, [r7, #48]	; 0x30
 80015e8:	ed97 7b04 	vldr	d7, [r7, #16]
 80015ec:	ee24 4b07 	vmul.f64	d4, d4, d7
 80015f0:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
 80015f4:	ee84 7b03 	vdiv.f64	d7, d4, d3
 80015f8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015fc:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001600:	ed9f 4b77 	vldr	d4, [pc, #476]	; 80017e0 <KalmanFilter_Update+0x478>
 8001604:	ee27 4b04 	vmul.f64	d4, d7, d4
 8001608:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800160c:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001610:	ed9f 4b73 	vldr	d4, [pc, #460]	; 80017e0 <KalmanFilter_Update+0x478>
 8001614:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001618:	ee36 6b07 	vadd.f64	d6, d6, d7
 800161c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001620:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001624:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001628:	eeb1 6b47 	vneg.f64	d6, d7
 800162c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001630:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 80017e0 <KalmanFilter_Update+0x478>
 8001634:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001638:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800163c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001640:	ed97 4b0c 	vldr	d4, [r7, #48]	; 0x30
 8001644:	ed97 7b04 	vldr	d7, [r7, #16]
 8001648:	ee24 4b07 	vmul.f64	d4, d4, d7
 800164c:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
 8001650:	ee84 7b03 	vdiv.f64	d7, d4, d3
 8001654:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001658:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800165c:	ed9f 4b60 	vldr	d4, [pc, #384]	; 80017e0 <KalmanFilter_Update+0x478>
 8001660:	ee27 4b04 	vmul.f64	d4, d7, d4
 8001664:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001668:	ee34 7b07 	vadd.f64	d7, d4, d7
 800166c:	ed9f 4b5c 	vldr	d4, [pc, #368]	; 80017e0 <KalmanFilter_Update+0x478>
 8001670:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001674:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001678:	ee26 7b07 	vmul.f64	d7, d6, d7
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	ed83 7b08 	vstr	d7, [r3, #32]
	dev->p12 = -((P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT)) - 1)*((Q*dt_pow3)/2 + P22*DT + P12);
 8001682:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001686:	ed9f 6b56 	vldr	d6, [pc, #344]	; 80017e0 <KalmanFilter_Update+0x478>
 800168a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800168e:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8001692:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001696:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 800169a:	ed97 7b04 	vldr	d7, [r7, #16]
 800169e:	ee25 5b07 	vmul.f64	d5, d5, d7
 80016a2:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 80016a6:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80016aa:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016ae:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80016b2:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 80017e0 <KalmanFilter_Update+0x478>
 80016b6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80016ba:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80016be:	ee35 7b07 	vadd.f64	d7, d5, d7
 80016c2:	ed9f 5b47 	vldr	d5, [pc, #284]	; 80017e0 <KalmanFilter_Update+0x478>
 80016c6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80016ca:	ee36 5b07 	vadd.f64	d5, d6, d7
 80016ce:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80016d2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80016d6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016da:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80016de:	ed9f 4b40 	vldr	d4, [pc, #256]	; 80017e0 <KalmanFilter_Update+0x478>
 80016e2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80016e6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016ea:	ed97 4b0c 	vldr	d4, [r7, #48]	; 0x30
 80016ee:	ed97 7b04 	vldr	d7, [r7, #16]
 80016f2:	ee24 4b07 	vmul.f64	d4, d4, d7
 80016f6:	eeb1 3b00 	vmov.f64	d3, #16	; 0x40800000  4.0
 80016fa:	ee84 7b03 	vdiv.f64	d7, d4, d3
 80016fe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001702:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001706:	ed9f 4b36 	vldr	d4, [pc, #216]	; 80017e0 <KalmanFilter_Update+0x478>
 800170a:	ee27 4b04 	vmul.f64	d4, d7, d4
 800170e:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001712:	ee34 7b07 	vadd.f64	d7, d4, d7
 8001716:	ed9f 4b32 	vldr	d4, [pc, #200]	; 80017e0 <KalmanFilter_Update+0x478>
 800171a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800171e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001722:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001726:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800172a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800172e:	eeb1 6b47 	vneg.f64	d6, d7
 8001732:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 8001736:	ed97 7b06 	vldr	d7, [r7, #24]
 800173a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800173e:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8001742:	ee87 5b04 	vdiv.f64	d5, d7, d4
 8001746:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800174a:	ed9f 4b25 	vldr	d4, [pc, #148]	; 80017e0 <KalmanFilter_Update+0x478>
 800174e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001752:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001756:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800175a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800175e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	dev->p21 = P21 + P22*DT + (Q*dt_pow3)/2 - (((Q*dt_pow3)/2 + P22*DT + P21)*(P11 + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT)))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 8001768:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800176c:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 80017e0 <KalmanFilter_Update+0x478>
 8001770:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001774:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001778:	ee36 6b07 	vadd.f64	d6, d6, d7
 800177c:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 8001780:	ed97 7b06 	vldr	d7, [r7, #24]
 8001784:	ee25 5b07 	vmul.f64	d5, d5, d7
 8001788:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 800178c:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001790:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001794:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 8001798:	ed97 7b06 	vldr	d7, [r7, #24]
 800179c:	ee25 7b07 	vmul.f64	d7, d5, d7
 80017a0:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80017a4:	ee87 5b04 	vdiv.f64	d5, d7, d4
 80017a8:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80017ac:	ed9f 4b0c 	vldr	d4, [pc, #48]	; 80017e0 <KalmanFilter_Update+0x478>
 80017b0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80017b4:	ee35 5b07 	vadd.f64	d5, d5, d7
 80017b8:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80017bc:	ee35 5b07 	vadd.f64	d5, d5, d7
 80017c0:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80017c4:	ed9f 4b06 	vldr	d4, [pc, #24]	; 80017e0 <KalmanFilter_Update+0x478>
 80017c8:	ee27 4b04 	vmul.f64	d4, d7, d4
 80017cc:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80017d0:	ee34 4b07 	vadd.f64	d4, d4, d7
 80017d4:	ed97 3b0c 	vldr	d3, [r7, #48]	; 0x30
 80017d8:	e016      	b.n	8001808 <KalmanFilter_Update+0x4a0>
 80017da:	bf00      	nop
 80017dc:	f3af 8000 	nop.w
 80017e0:	47ae147b 	.word	0x47ae147b
 80017e4:	3f847ae1 	.word	0x3f847ae1
 80017e8:	eb1c432d 	.word	0xeb1c432d
 80017ec:	3f1a36e2 	.word	0x3f1a36e2
 80017f0:	a0b5ed8e 	.word	0xa0b5ed8e
 80017f4:	3eb0c6f7 	.word	0x3eb0c6f7
 80017f8:	e2308c3b 	.word	0xe2308c3b
 80017fc:	3e45798e 	.word	0x3e45798e
 8001800:	47ae147b 	.word	0x47ae147b
 8001804:	3f847ae1 	.word	0x3f847ae1
 8001808:	ed97 7b04 	vldr	d7, [r7, #16]
 800180c:	ee23 3b07 	vmul.f64	d3, d3, d7
 8001810:	eeb1 2b00 	vmov.f64	d2, #16	; 0x40800000  4.0
 8001814:	ee83 7b02 	vdiv.f64	d7, d3, d2
 8001818:	ee34 4b07 	vadd.f64	d4, d4, d7
 800181c:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001820:	ed1f 3b09 	vldr	d3, [pc, #-36]	; 8001800 <KalmanFilter_Update+0x498>
 8001824:	ee27 3b03 	vmul.f64	d3, d7, d3
 8001828:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 800182c:	ee33 7b07 	vadd.f64	d7, d3, d7
 8001830:	ed1f 3b0d 	vldr	d3, [pc, #-52]	; 8001800 <KalmanFilter_Update+0x498>
 8001834:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001838:	ee34 7b07 	vadd.f64	d7, d4, d7
 800183c:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001840:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 8001844:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001848:	ee35 5b07 	vadd.f64	d5, d5, d7
 800184c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001850:	ed1f 3b15 	vldr	d3, [pc, #-84]	; 8001800 <KalmanFilter_Update+0x498>
 8001854:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001858:	ee35 5b07 	vadd.f64	d5, d5, d7
 800185c:	ed97 3b0c 	vldr	d3, [r7, #48]	; 0x30
 8001860:	ed97 7b04 	vldr	d7, [r7, #16]
 8001864:	ee23 3b07 	vmul.f64	d3, d3, d7
 8001868:	eeb1 2b00 	vmov.f64	d2, #16	; 0x40800000  4.0
 800186c:	ee83 7b02 	vdiv.f64	d7, d3, d2
 8001870:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001874:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001878:	ed1f 3b1f 	vldr	d3, [pc, #-124]	; 8001800 <KalmanFilter_Update+0x498>
 800187c:	ee27 3b03 	vmul.f64	d3, d7, d3
 8001880:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001884:	ee33 7b07 	vadd.f64	d7, d3, d7
 8001888:	ed1f 3b23 	vldr	d3, [pc, #-140]	; 8001800 <KalmanFilter_Update+0x498>
 800188c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001890:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001894:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001898:	ee36 7b47 	vsub.f64	d7, d6, d7
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	dev->p22 = P22 + Q*dt_pow2 - (((Q*dt_pow3)/2 + P22*DT + P12)*((Q*dt_pow3)/2 + P22*DT + P21))/(P11 + R + P21*DT + (Q*dt_pow4)/4 + DT*(P12 + P22*DT));
 80018a2:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 80018a6:	ed97 7b08 	vldr	d7, [r7, #32]
 80018aa:	ee26 6b07 	vmul.f64	d6, d6, d7
 80018ae:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80018b2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80018b6:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 80018ba:	ed97 7b06 	vldr	d7, [r7, #24]
 80018be:	ee25 7b07 	vmul.f64	d7, d5, d7
 80018c2:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80018c6:	ee87 5b04 	vdiv.f64	d5, d7, d4
 80018ca:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80018ce:	ed1f 4b34 	vldr	d4, [pc, #-208]	; 8001800 <KalmanFilter_Update+0x498>
 80018d2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80018d6:	ee35 5b07 	vadd.f64	d5, d5, d7
 80018da:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80018de:	ee35 5b07 	vadd.f64	d5, d5, d7
 80018e2:	ed97 4b0c 	vldr	d4, [r7, #48]	; 0x30
 80018e6:	ed97 7b06 	vldr	d7, [r7, #24]
 80018ea:	ee24 7b07 	vmul.f64	d7, d4, d7
 80018ee:	eeb0 3b00 	vmov.f64	d3, #0	; 0x40000000  2.0
 80018f2:	ee87 4b03 	vdiv.f64	d4, d7, d3
 80018f6:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80018fa:	ed1f 3b3f 	vldr	d3, [pc, #-252]	; 8001800 <KalmanFilter_Update+0x498>
 80018fe:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001902:	ee34 4b07 	vadd.f64	d4, d4, d7
 8001906:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800190a:	ee34 7b07 	vadd.f64	d7, d4, d7
 800190e:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001912:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 8001916:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800191a:	ee35 5b07 	vadd.f64	d5, d5, d7
 800191e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001922:	ed1f 3b49 	vldr	d3, [pc, #-292]	; 8001800 <KalmanFilter_Update+0x498>
 8001926:	ee27 7b03 	vmul.f64	d7, d7, d3
 800192a:	ee35 5b07 	vadd.f64	d5, d5, d7
 800192e:	ed97 3b0c 	vldr	d3, [r7, #48]	; 0x30
 8001932:	ed97 7b04 	vldr	d7, [r7, #16]
 8001936:	ee23 3b07 	vmul.f64	d3, d3, d7
 800193a:	eeb1 2b00 	vmov.f64	d2, #16	; 0x40800000  4.0
 800193e:	ee83 7b02 	vdiv.f64	d7, d3, d2
 8001942:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001946:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800194a:	ed1f 3b53 	vldr	d3, [pc, #-332]	; 8001800 <KalmanFilter_Update+0x498>
 800194e:	ee27 3b03 	vmul.f64	d3, d7, d3
 8001952:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001956:	ee33 7b07 	vadd.f64	d7, d3, d7
 800195a:	ed1f 3b57 	vldr	d3, [pc, #-348]	; 8001800 <KalmanFilter_Update+0x498>
 800195e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8001962:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001966:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800196a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
}
 8001974:	bf00      	nop
 8001976:	376c      	adds	r7, #108	; 0x6c
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <IVK>:
	q_arr[4] = roll;
	memcpy(config_arr, q_arr, sizeof(q_arr));
	return 1;
}

void IVK(double q[5], double x_dot[5], double *m_dot){
 8001980:	b580      	push	{r7, lr}
 8001982:	ed2d 8b04 	vpush	{d8-d9}
 8001986:	b0fc      	sub	sp, #496	; 0x1f0
 8001988:	af00      	add	r7, sp, #0
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	6018      	str	r0, [r3, #0]
 8001990:	f107 0308 	add.w	r3, r7, #8
 8001994:	6019      	str	r1, [r3, #0]
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	601a      	str	r2, [r3, #0]
	  double e_J_inv_tmp;
	  double e_J_inv_tmp_tmp;
	  double f_J_inv_tmp_tmp;
	  int i;
	  int i1;
	  J_inv_tmp_tmp = q[1] + 2.0 * q[2];
 800199a:	f107 030c 	add.w	r3, r7, #12
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	3308      	adds	r3, #8
 80019a2:	ed93 6b00 	vldr	d6, [r3]
 80019a6:	f107 030c 	add.w	r3, r7, #12
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3310      	adds	r3, #16
 80019ae:	ed93 7b00 	vldr	d7, [r3]
 80019b2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80019b6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019ba:	ed87 7b76 	vstr	d7, [r7, #472]	; 0x1d8
	  b_J_inv_tmp_tmp =
	      ((((J_inv_tmp_tmp + q[3]) + 1.6845) + -0.8995) + -0.73665) + 1.52205;
 80019be:	f107 030c 	add.w	r3, r7, #12
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	3318      	adds	r3, #24
 80019c6:	ed93 6b00 	vldr	d6, [r3]
 80019ca:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80019ce:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019d2:	ed9f 6bf1 	vldr	d6, [pc, #964]	; 8001d98 <IVK+0x418>
 80019d6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80019da:	ed9f 6bf1 	vldr	d6, [pc, #964]	; 8001da0 <IVK+0x420>
 80019de:	ee37 7b46 	vsub.f64	d7, d7, d6
 80019e2:	ed9f 6bf1 	vldr	d6, [pc, #964]	; 8001da8 <IVK+0x428>
 80019e6:	ee37 7b46 	vsub.f64	d7, d7, d6
	  b_J_inv_tmp_tmp =
 80019ea:	ed9f 6bf1 	vldr	d6, [pc, #964]	; 8001db0 <IVK+0x430>
 80019ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 80019f2:	ed87 7b74 	vstr	d7, [r7, #464]	; 0x1d0
	  c_J_inv_tmp_tmp = sin(b_J_inv_tmp_tmp);
 80019f6:	ed97 0b74 	vldr	d0, [r7, #464]	; 0x1d0
 80019fa:	f015 fb85 	bl	8017108 <sin>
 80019fe:	ed87 0b72 	vstr	d0, [r7, #456]	; 0x1c8
	  d_J_inv_tmp_tmp = sin(q[0]);
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	ed93 7b00 	vldr	d7, [r3]
 8001a0c:	eeb0 0b47 	vmov.f64	d0, d7
 8001a10:	f015 fb7a 	bl	8017108 <sin>
 8001a14:	ed87 0b70 	vstr	d0, [r7, #448]	; 0x1c0
	  J_inv_tmp = cos(((J_inv_tmp_tmp + 1.6845) + -0.8995) + -0.73665);
 8001a18:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8001a1c:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8001d98 <IVK+0x418>
 8001a20:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001a24:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8001da0 <IVK+0x420>
 8001a28:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a2c:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8001da8 <IVK+0x428>
 8001a30:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a34:	eeb0 0b47 	vmov.f64	d0, d7
 8001a38:	f015 fb12 	bl	8017060 <cos>
 8001a3c:	ed87 0b6e 	vstr	d0, [r7, #440]	; 0x1b8
	  b_J_inv_tmp = cos(b_J_inv_tmp_tmp);
 8001a40:	ed97 0b74 	vldr	d0, [r7, #464]	; 0x1d0
 8001a44:	f015 fb0c 	bl	8017060 <cos>
 8001a48:	ed87 0b6c 	vstr	d0, [r7, #432]	; 0x1b0
	  J_inv_tmp_tmp = ((q[1] + q[2]) + 1.6845) + -0.8995;
 8001a4c:	f107 030c 	add.w	r3, r7, #12
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	3308      	adds	r3, #8
 8001a54:	ed93 6b00 	vldr	d6, [r3]
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	3310      	adds	r3, #16
 8001a60:	ed93 7b00 	vldr	d7, [r3]
 8001a64:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001a68:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 8001d98 <IVK+0x418>
 8001a6c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001a70:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 8001da0 <IVK+0x420>
 8001a74:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a78:	ed87 7b76 	vstr	d7, [r7, #472]	; 0x1d8
	  c_J_inv_tmp = cos(J_inv_tmp_tmp);
 8001a7c:	ed97 0b76 	vldr	d0, [r7, #472]	; 0x1d8
 8001a80:	f015 faee 	bl	8017060 <cos>
 8001a84:	ed87 0b6a 	vstr	d0, [r7, #424]	; 0x1a8
	  d_J_inv_tmp = sin(J_inv_tmp_tmp);
 8001a88:	ed97 0b76 	vldr	d0, [r7, #472]	; 0x1d8
 8001a8c:	f015 fb3c 	bl	8017108 <sin>
 8001a90:	ed87 0b68 	vstr	d0, [r7, #416]	; 0x1a0
	  J_inv_tmp_tmp = sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665);
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	3308      	adds	r3, #8
 8001a9c:	ed93 6b00 	vldr	d6, [r3]
 8001aa0:	f107 030c 	add.w	r3, r7, #12
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	3310      	adds	r3, #16
 8001aa8:	ed93 7b00 	vldr	d7, [r3]
 8001aac:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001ab0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ab4:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8001d98 <IVK+0x418>
 8001ab8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001abc:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8001da0 <IVK+0x420>
 8001ac0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ac4:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8001da8 <IVK+0x428>
 8001ac8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001acc:	eeb0 0b47 	vmov.f64	d0, d7
 8001ad0:	f015 fb1a 	bl	8017108 <sin>
 8001ad4:	ed87 0b76 	vstr	d0, [r7, #472]	; 0x1d8
	  b_J_inv_tmp_tmp = cos(q[1] + 1.6845);
 8001ad8:	f107 030c 	add.w	r3, r7, #12
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	3308      	adds	r3, #8
 8001ae0:	ed93 7b00 	vldr	d7, [r3]
 8001ae4:	ed9f 6bac 	vldr	d6, [pc, #688]	; 8001d98 <IVK+0x418>
 8001ae8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001aec:	eeb0 0b47 	vmov.f64	d0, d7
 8001af0:	f015 fab6 	bl	8017060 <cos>
 8001af4:	ed87 0b74 	vstr	d0, [r7, #464]	; 0x1d0
	  e_J_inv_tmp_tmp = sin(q[1] + 1.6845);
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	3308      	adds	r3, #8
 8001b00:	ed93 7b00 	vldr	d7, [r3]
 8001b04:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8001d98 <IVK+0x418>
 8001b08:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001b0c:	eeb0 0b47 	vmov.f64	d0, d7
 8001b10:	f015 fafa 	bl	8017108 <sin>
 8001b14:	ed87 0b66 	vstr	d0, [r7, #408]	; 0x198
	  f_J_inv_tmp_tmp = cos(q[0]);
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	ed93 7b00 	vldr	d7, [r3]
 8001b22:	eeb0 0b47 	vmov.f64	d0, d7
 8001b26:	f015 fa9b 	bl	8017060 <cos>
 8001b2a:	ed87 0b64 	vstr	d0, [r7, #400]	; 0x190
	  e_J_inv_tmp = cos(q[2]);
 8001b2e:	f107 030c 	add.w	r3, r7, #12
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	3310      	adds	r3, #16
 8001b36:	ed93 7b00 	vldr	d7, [r3]
 8001b3a:	eeb0 0b47 	vmov.f64	d0, d7
 8001b3e:	f015 fa8f 	bl	8017060 <cos>
 8001b42:	ed87 0b62 	vstr	d0, [r7, #392]	; 0x188
	  dv[0] = 0.0;
 8001b46:	f107 0110 	add.w	r1, r7, #16
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	e9c1 2300 	strd	r2, r3, [r1]
	  dv[5] = 0.0;
 8001b56:	f107 0110 	add.w	r1, r7, #16
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	  d = f_J_inv_tmp_tmp * f_J_inv_tmp_tmp;
 8001b66:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8001b6a:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001b6e:	ed87 7b7a 	vstr	d7, [r7, #488]	; 0x1e8
	  d1 = d_J_inv_tmp_tmp * d_J_inv_tmp_tmp;
 8001b72:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8001b76:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001b7a:	ed87 7b60 	vstr	d7, [r7, #384]	; 0x180
	  dv[10] =
	      -(25.0 * d_J_inv_tmp_tmp) /
 8001b7e:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8001b82:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 8001b86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b8a:	eeb1 8b47 	vneg.f64	d8, d7
	      (9.0 *
	       (((((((146.0 * c_J_inv_tmp_tmp * d + 410.488 * J_inv_tmp * d) +
 8001b8e:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8001b92:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8001dc0 <IVK+0x440>
 8001b96:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001b9a:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8001b9e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ba2:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8001ba6:	ed9f 5b88 	vldr	d5, [pc, #544]	; 8001dc8 <IVK+0x448>
 8001baa:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001bae:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8001bb2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001bb6:	ee36 9b07 	vadd.f64	d9, d6, d7
	             146.0 *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8001bba:	f107 030c 	add.w	r3, r7, #12
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	3308      	adds	r3, #8
 8001bc2:	ed93 6b00 	vldr	d6, [r3]
 8001bc6:	f107 030c 	add.w	r3, r7, #12
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	3310      	adds	r3, #16
 8001bce:	ed93 7b00 	vldr	d7, [r3]
 8001bd2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001bd6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001bda:	f107 030c 	add.w	r3, r7, #12
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	3318      	adds	r3, #24
 8001be2:	ed93 7b00 	vldr	d7, [r3]
 8001be6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001bea:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8001d98 <IVK+0x418>
 8001bee:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001bf2:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8001da0 <IVK+0x420>
 8001bf6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001bfa:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8001da8 <IVK+0x428>
 8001bfe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c02:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8001db0 <IVK+0x430>
 8001c06:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c0a:	eeb0 0b47 	vmov.f64	d0, d7
 8001c0e:	f015 fa7b 	bl	8017108 <sin>
 8001c12:	eeb0 7b40 	vmov.f64	d7, d0
	             146.0 *
 8001c16:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8001dc0 <IVK+0x440>
 8001c1a:	ee27 6b06 	vmul.f64	d6, d7, d6
	                      -0.73665) +
	                     1.52205) *
 8001c1e:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001c22:	ee26 7b07 	vmul.f64	d7, d6, d7
	       (((((((146.0 * c_J_inv_tmp_tmp * d + 410.488 * J_inv_tmp * d) +
 8001c26:	ee39 9b07 	vadd.f64	d9, d9, d7
	                 d1) +
	            410.488 *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	3308      	adds	r3, #8
 8001c32:	ed93 6b00 	vldr	d6, [r3]
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	3310      	adds	r3, #16
 8001c3e:	ed93 7b00 	vldr	d7, [r3]
 8001c42:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001c46:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001c4a:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8001d98 <IVK+0x418>
 8001c4e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001c52:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8001da0 <IVK+0x420>
 8001c56:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c5a:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8001da8 <IVK+0x428>
 8001c5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001c62:	eeb0 0b47 	vmov.f64	d0, d7
 8001c66:	f015 f9fb 	bl	8017060 <cos>
 8001c6a:	eeb0 7b40 	vmov.f64	d7, d0
	            410.488 *
 8001c6e:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8001dc8 <IVK+0x448>
 8001c72:	ee27 6b06 	vmul.f64	d6, d7, d6
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001c76:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001c7a:	ee26 7b07 	vmul.f64	d7, d6, d7
	                 d1) +
 8001c7e:	ee39 6b07 	vadd.f64	d6, d9, d7
	                d1) +
	           60.0 * c_J_inv_tmp * d) +
 8001c82:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8001c86:	ed9f 5b52 	vldr	d5, [pc, #328]	; 8001dd0 <IVK+0x450>
 8001c8a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001c8e:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8001c92:	ee25 7b07 	vmul.f64	d7, d5, d7
	                d1) +
 8001c96:	ee36 9b07 	vadd.f64	d9, d6, d7
	          60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * d1) +
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	3308      	adds	r3, #8
 8001ca2:	ed93 6b00 	vldr	d6, [r3]
 8001ca6:	f107 030c 	add.w	r3, r7, #12
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	3310      	adds	r3, #16
 8001cae:	ed93 7b00 	vldr	d7, [r3]
 8001cb2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001cb6:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8001d98 <IVK+0x418>
 8001cba:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001cbe:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8001da0 <IVK+0x420>
 8001cc2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001cc6:	eeb0 0b47 	vmov.f64	d0, d7
 8001cca:	f015 f9c9 	bl	8017060 <cos>
 8001cce:	eeb0 7b40 	vmov.f64	d7, d0
 8001cd2:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8001dd0 <IVK+0x450>
 8001cd6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001cda:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001cde:	ee26 7b07 	vmul.f64	d7, d6, d7
	           60.0 * c_J_inv_tmp * d) +
 8001ce2:	ee39 6b07 	vadd.f64	d6, d9, d7
	         352.278 * b_J_inv_tmp_tmp * d) +
 8001ce6:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8001cea:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8001dd8 <IVK+0x458>
 8001cee:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001cf2:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8001cf6:	ee25 7b07 	vmul.f64	d7, d5, d7
	          60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * d1) +
 8001cfa:	ee36 9b07 	vadd.f64	d9, d6, d7
	        352.278 * cos(q[1] + 1.6845) * d1));
 8001cfe:	f107 030c 	add.w	r3, r7, #12
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	3308      	adds	r3, #8
 8001d06:	ed93 7b00 	vldr	d7, [r3]
 8001d0a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8001d98 <IVK+0x418>
 8001d0e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001d12:	eeb0 0b47 	vmov.f64	d0, d7
 8001d16:	f015 f9a3 	bl	8017060 <cos>
 8001d1a:	eeb0 7b40 	vmov.f64	d7, d0
 8001d1e:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8001dd8 <IVK+0x458>
 8001d22:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001d26:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8001d2a:	ee26 7b07 	vmul.f64	d7, d6, d7
	         352.278 * b_J_inv_tmp_tmp * d) +
 8001d2e:	ee39 7b07 	vadd.f64	d7, d9, d7
	      (9.0 *
 8001d32:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8001d36:	ee27 6b06 	vmul.f64	d6, d7, d6
	      -(25.0 * d_J_inv_tmp_tmp) /
 8001d3a:	ee88 7b06 	vdiv.f64	d7, d8, d6
	  dv[10] =
 8001d3e:	f107 0310 	add.w	r3, r7, #16
 8001d42:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	  dv[15] =
	      25.0 * f_J_inv_tmp_tmp /
 8001d46:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8001d4a:	eeb3 6b09 	vmov.f64	d6, #57	; 0x41c80000  25.0
 8001d4e:	ee27 8b06 	vmul.f64	d8, d7, d6
	      (9.0 *
	       (((((((146.0 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	3308      	adds	r3, #8
 8001d5a:	ed93 6b00 	vldr	d6, [r3]
 8001d5e:	f107 030c 	add.w	r3, r7, #12
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	3310      	adds	r3, #16
 8001d66:	ed93 7b00 	vldr	d7, [r3]
 8001d6a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001d6e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001d72:	f107 030c 	add.w	r3, r7, #12
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	3318      	adds	r3, #24
 8001d7a:	ed93 7b00 	vldr	d7, [r3]
 8001d7e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d82:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8001d98 <IVK+0x418>
 8001d86:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001d8a:	ed9f 6b05 	vldr	d6, [pc, #20]	; 8001da0 <IVK+0x420>
 8001d8e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d92:	e039      	b.n	8001e08 <IVK+0x488>
 8001d94:	f3af 8000 	nop.w
 8001d98:	45a1cac1 	.word	0x45a1cac1
 8001d9c:	3ffaf3b6 	.word	0x3ffaf3b6
 8001da0:	39581062 	.word	0x39581062
 8001da4:	3fecc8b4 	.word	0x3fecc8b4
 8001da8:	05532618 	.word	0x05532618
 8001dac:	3fe792a3 	.word	0x3fe792a3
 8001db0:	19ce075f 	.word	0x19ce075f
 8001db4:	3ff85a51 	.word	0x3ff85a51
 8001db8:	19ce075f 	.word	0x19ce075f
 8001dbc:	3ff85a51 	.word	0x3ff85a51
 8001dc0:	00000000 	.word	0x00000000
 8001dc4:	40624000 	.word	0x40624000
 8001dc8:	d916872b 	.word	0xd916872b
 8001dcc:	4079a7ce 	.word	0x4079a7ce
 8001dd0:	00000000 	.word	0x00000000
 8001dd4:	404e0000 	.word	0x404e0000
 8001dd8:	b020c49c 	.word	0xb020c49c
 8001ddc:	40760472 	.word	0x40760472
 8001de0:	eb851eb8 	.word	0xeb851eb8
 8001de4:	40d80d51 	.word	0x40d80d51
 8001de8:	45a1cac1 	.word	0x45a1cac1
 8001dec:	3ffaf3b6 	.word	0x3ffaf3b6
 8001df0:	39581062 	.word	0x39581062
 8001df4:	3fecc8b4 	.word	0x3fecc8b4
 8001df8:	05532618 	.word	0x05532618
 8001dfc:	3fe792a3 	.word	0x3fe792a3
 8001e00:	2220bc38 	.word	0x2220bc38
 8001e04:	4111a6ef 	.word	0x4111a6ef
 8001e08:	ed1f 6b05 	vldr	d6, [pc, #-20]	; 8001df8 <IVK+0x478>
 8001e0c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e10:	ed1f 6b17 	vldr	d6, [pc, #-92]	; 8001db8 <IVK+0x438>
 8001e14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e18:	eeb0 0b47 	vmov.f64	d0, d7
 8001e1c:	f015 f974 	bl	8017108 <sin>
 8001e20:	eeb0 7b40 	vmov.f64	d7, d0
	       (((((((146.0 *
 8001e24:	ed1f 6b1a 	vldr	d6, [pc, #-104]	; 8001dc0 <IVK+0x440>
 8001e28:	ee27 6b06 	vmul.f64	d6, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) +
 8001e2c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8001e30:	ee27 7b07 	vmul.f64	d7, d7, d7
	                      1.52205) *
 8001e34:	ee26 9b07 	vmul.f64	d9, d6, d7
	              410.488 *
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	3308      	adds	r3, #8
 8001e40:	ed93 6b00 	vldr	d6, [r3]
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	3310      	adds	r3, #16
 8001e4c:	ed93 7b00 	vldr	d7, [r3]
 8001e50:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001e54:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e58:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 8001de8 <IVK+0x468>
 8001e5c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001e60:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 8001df0 <IVK+0x470>
 8001e64:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e68:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 8001df8 <IVK+0x478>
 8001e6c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001e70:	eeb0 0b47 	vmov.f64	d0, d7
 8001e74:	f015 f8f4 	bl	8017060 <cos>
 8001e78:	eeb0 7b40 	vmov.f64	d7, d0
	              410.488 *
 8001e7c:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 8001dc8 <IVK+0x448>
 8001e80:	ee27 6b06 	vmul.f64	d6, d7, d6
	                  (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001e84:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8001e88:	ee27 7b07 	vmul.f64	d7, d7, d7
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001e8c:	ee26 7b07 	vmul.f64	d7, d6, d7
	                  (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) +
 8001e90:	ee39 9b07 	vadd.f64	d9, d9, d7
	             146.0 *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8001e94:	f107 030c 	add.w	r3, r7, #12
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	3308      	adds	r3, #8
 8001e9c:	ed93 6b00 	vldr	d6, [r3]
 8001ea0:	f107 030c 	add.w	r3, r7, #12
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	3310      	adds	r3, #16
 8001ea8:	ed93 7b00 	vldr	d7, [r3]
 8001eac:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001eb0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001eb4:	f107 030c 	add.w	r3, r7, #12
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	3318      	adds	r3, #24
 8001ebc:	ed93 7b00 	vldr	d7, [r3]
 8001ec0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ec4:	ed1f 6b38 	vldr	d6, [pc, #-224]	; 8001de8 <IVK+0x468>
 8001ec8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ecc:	ed1f 6b38 	vldr	d6, [pc, #-224]	; 8001df0 <IVK+0x470>
 8001ed0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001ed4:	ed1f 6b38 	vldr	d6, [pc, #-224]	; 8001df8 <IVK+0x478>
 8001ed8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001edc:	ed1f 6b4a 	vldr	d6, [pc, #-296]	; 8001db8 <IVK+0x438>
 8001ee0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001ee4:	eeb0 0b47 	vmov.f64	d0, d7
 8001ee8:	f015 f90e 	bl	8017108 <sin>
 8001eec:	eeb0 7b40 	vmov.f64	d7, d0
	             146.0 *
 8001ef0:	ed1f 6b4d 	vldr	d6, [pc, #-308]	; 8001dc0 <IVK+0x440>
 8001ef4:	ee27 6b06 	vmul.f64	d6, d7, d6
	                      -0.73665) +
	                     1.52205) *
	                 (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8001ef8:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8001efc:	ee27 7b07 	vmul.f64	d7, d7, d7
	                     1.52205) *
 8001f00:	ee26 7b07 	vmul.f64	d7, d6, d7
	                  (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001f04:	ee39 9b07 	vadd.f64	d9, d9, d7
	            410.488 *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001f08:	f107 030c 	add.w	r3, r7, #12
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	3308      	adds	r3, #8
 8001f10:	ed93 6b00 	vldr	d6, [r3]
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	3310      	adds	r3, #16
 8001f1c:	ed93 7b00 	vldr	d7, [r3]
 8001f20:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001f24:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f28:	ed1f 6b51 	vldr	d6, [pc, #-324]	; 8001de8 <IVK+0x468>
 8001f2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f30:	ed1f 6b51 	vldr	d6, [pc, #-324]	; 8001df0 <IVK+0x470>
 8001f34:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f38:	ed1f 6b51 	vldr	d6, [pc, #-324]	; 8001df8 <IVK+0x478>
 8001f3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f40:	eeb0 0b47 	vmov.f64	d0, d7
 8001f44:	f015 f88c 	bl	8017060 <cos>
 8001f48:	eeb0 7b40 	vmov.f64	d7, d0
	            410.488 *
 8001f4c:	ed1f 6b62 	vldr	d6, [pc, #-392]	; 8001dc8 <IVK+0x448>
 8001f50:	ee27 6b06 	vmul.f64	d6, d7, d6
	                (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8001f54:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8001f58:	ee27 7b07 	vmul.f64	d7, d7, d7
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8001f5c:	ee26 7b07 	vmul.f64	d7, d6, d7
	                 (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8001f60:	ee39 9b07 	vadd.f64	d9, d9, d7
	           60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8001f64:	f107 030c 	add.w	r3, r7, #12
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	3308      	adds	r3, #8
 8001f6c:	ed93 6b00 	vldr	d6, [r3]
 8001f70:	f107 030c 	add.w	r3, r7, #12
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	3310      	adds	r3, #16
 8001f78:	ed93 7b00 	vldr	d7, [r3]
 8001f7c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f80:	ed1f 6b67 	vldr	d6, [pc, #-412]	; 8001de8 <IVK+0x468>
 8001f84:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001f88:	ed1f 6b67 	vldr	d6, [pc, #-412]	; 8001df0 <IVK+0x470>
 8001f8c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001f90:	eeb0 0b47 	vmov.f64	d0, d7
 8001f94:	f015 f864 	bl	8017060 <cos>
 8001f98:	eeb0 7b40 	vmov.f64	d7, d0
 8001f9c:	ed1f 6b74 	vldr	d6, [pc, #-464]	; 8001dd0 <IVK+0x450>
 8001fa0:	ee27 6b06 	vmul.f64	d6, d7, d6
	               (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8001fa4:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8001fa8:	ee27 7b07 	vmul.f64	d7, d7, d7
	           60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8001fac:	ee26 7b07 	vmul.f64	d7, d6, d7
	                (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8001fb0:	ee39 9b07 	vadd.f64	d9, d9, d7
	          60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8001fb4:	f107 030c 	add.w	r3, r7, #12
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	3308      	adds	r3, #8
 8001fbc:	ed93 6b00 	vldr	d6, [r3]
 8001fc0:	f107 030c 	add.w	r3, r7, #12
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	3310      	adds	r3, #16
 8001fc8:	ed93 7b00 	vldr	d7, [r3]
 8001fcc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001fd0:	ed1f 6b7b 	vldr	d6, [pc, #-492]	; 8001de8 <IVK+0x468>
 8001fd4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001fd8:	ed1f 6b7b 	vldr	d6, [pc, #-492]	; 8001df0 <IVK+0x470>
 8001fdc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001fe0:	eeb0 0b47 	vmov.f64	d0, d7
 8001fe4:	f015 f83c 	bl	8017060 <cos>
 8001fe8:	eeb0 7b40 	vmov.f64	d7, d0
 8001fec:	ed1f 6b88 	vldr	d6, [pc, #-544]	; 8001dd0 <IVK+0x450>
 8001ff0:	ee27 6b06 	vmul.f64	d6, d7, d6
	              (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8001ff4:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8001ff8:	ee27 7b07 	vmul.f64	d7, d7, d7
	          60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8001ffc:	ee26 7b07 	vmul.f64	d7, d6, d7
	               (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8002000:	ee39 9b07 	vadd.f64	d9, d9, d7
	         352.278 * cos(q[1] + 1.6845) * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8002004:	f107 030c 	add.w	r3, r7, #12
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	3308      	adds	r3, #8
 800200c:	ed93 7b00 	vldr	d7, [r3]
 8002010:	ed1f 6b8b 	vldr	d6, [pc, #-556]	; 8001de8 <IVK+0x468>
 8002014:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002018:	eeb0 0b47 	vmov.f64	d0, d7
 800201c:	f015 f820 	bl	8017060 <cos>
 8002020:	eeb0 7b40 	vmov.f64	d7, d0
 8002024:	ed1f 6b94 	vldr	d6, [pc, #-592]	; 8001dd8 <IVK+0x458>
 8002028:	ee27 6b06 	vmul.f64	d6, d7, d6
 800202c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002030:	ee27 7b07 	vmul.f64	d7, d7, d7
 8002034:	ee26 7b07 	vmul.f64	d7, d6, d7
	              (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8002038:	ee39 9b07 	vadd.f64	d9, d9, d7
	        352.278 * cos(q[1] + 1.6845) * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)));
 800203c:	f107 030c 	add.w	r3, r7, #12
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	3308      	adds	r3, #8
 8002044:	ed93 7b00 	vldr	d7, [r3]
 8002048:	ed1f 6b99 	vldr	d6, [pc, #-612]	; 8001de8 <IVK+0x468>
 800204c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002050:	eeb0 0b47 	vmov.f64	d0, d7
 8002054:	f015 f804 	bl	8017060 <cos>
 8002058:	eeb0 7b40 	vmov.f64	d7, d0
 800205c:	ed1f 6ba2 	vldr	d6, [pc, #-648]	; 8001dd8 <IVK+0x458>
 8002060:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002064:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002068:	ee27 7b07 	vmul.f64	d7, d7, d7
 800206c:	ee26 7b07 	vmul.f64	d7, d6, d7
	         352.278 * cos(q[1] + 1.6845) * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8002070:	ee39 7b07 	vadd.f64	d7, d9, d7
	      (9.0 *
 8002074:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8002078:	ee27 6b06 	vmul.f64	d6, d7, d6
	      25.0 * f_J_inv_tmp_tmp /
 800207c:	ee88 7b06 	vdiv.f64	d7, d8, d6
	  dv[15] =
 8002080:	f107 0310 	add.w	r3, r7, #16
 8002084:	ed83 7b1e 	vstr	d7, [r3, #120]	; 0x78
	  dv[20] = 0.0;
 8002088:	f107 0110 	add.w	r1, r7, #16
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	  d2 = sin(((q[1] + q[2]) + 1.6845) + -0.8995);
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	3308      	adds	r3, #8
 80020a0:	ed93 6b00 	vldr	d6, [r3]
 80020a4:	f107 030c 	add.w	r3, r7, #12
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	3310      	adds	r3, #16
 80020ac:	ed93 7b00 	vldr	d7, [r3]
 80020b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020b4:	ed1f 6bb4 	vldr	d6, [pc, #-720]	; 8001de8 <IVK+0x468>
 80020b8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020bc:	ed1f 6bb4 	vldr	d6, [pc, #-720]	; 8001df0 <IVK+0x470>
 80020c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020c4:	eeb0 0b47 	vmov.f64	d0, d7
 80020c8:	f015 f81e 	bl	8017108 <sin>
 80020cc:	ed87 0b5e 	vstr	d0, [r7, #376]	; 0x178
	  d3 = 24629.28 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	3308      	adds	r3, #8
 80020d8:	ed93 6b00 	vldr	d6, [r3]
 80020dc:	f107 030c 	add.w	r3, r7, #12
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	3310      	adds	r3, #16
 80020e4:	ed93 7b00 	vldr	d7, [r3]
 80020e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80020ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020f0:	ed1f 6bc3 	vldr	d6, [pc, #-780]	; 8001de8 <IVK+0x468>
 80020f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80020f8:	ed1f 6bc3 	vldr	d6, [pc, #-780]	; 8001df0 <IVK+0x470>
 80020fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002100:	ed1f 6bc3 	vldr	d6, [pc, #-780]	; 8001df8 <IVK+0x478>
 8002104:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002108:	eeb0 0b47 	vmov.f64	d0, d7
 800210c:	f014 ffa8 	bl	8017060 <cos>
 8002110:	eeb0 7b40 	vmov.f64	d7, d0
 8002114:	ed1f 6bce 	vldr	d6, [pc, #-824]	; 8001de0 <IVK+0x460>
 8002118:	ee27 7b06 	vmul.f64	d7, d7, d6
 800211c:	ed97 6b5e 	vldr	d6, [r7, #376]	; 0x178
 8002120:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002124:	ed87 7b5c 	vstr	d7, [r7, #368]	; 0x170
	       d2;
	  d4 = 24629.28 * J_inv_tmp_tmp * cos(((q[1] + q[2]) + 1.6845) + -0.8995);
 8002128:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 800212c:	ed1f 6bd4 	vldr	d6, [pc, #-848]	; 8001de0 <IVK+0x460>
 8002130:	ee27 8b06 	vmul.f64	d8, d7, d6
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	3308      	adds	r3, #8
 800213c:	ed93 6b00 	vldr	d6, [r3]
 8002140:	f107 030c 	add.w	r3, r7, #12
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	3310      	adds	r3, #16
 8002148:	ed93 7b00 	vldr	d7, [r3]
 800214c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002150:	ed1f 6bdb 	vldr	d6, [pc, #-876]	; 8001de8 <IVK+0x468>
 8002154:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002158:	ed1f 6bdb 	vldr	d6, [pc, #-876]	; 8001df0 <IVK+0x470>
 800215c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002160:	eeb0 0b47 	vmov.f64	d0, d7
 8002164:	f014 ff7c 	bl	8017060 <cos>
 8002168:	eeb0 7b40 	vmov.f64	d7, d0
 800216c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002170:	ed87 7b5a 	vstr	d7, [r7, #360]	; 0x168
	  d5 = 289211.783328 *
	       cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002174:	f107 030c 	add.w	r3, r7, #12
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	3308      	adds	r3, #8
 800217c:	ed93 6b00 	vldr	d6, [r3]
 8002180:	f107 030c 	add.w	r3, r7, #12
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	3310      	adds	r3, #16
 8002188:	ed93 7b00 	vldr	d7, [r3]
 800218c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002190:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002194:	ed1f 6bec 	vldr	d6, [pc, #-944]	; 8001de8 <IVK+0x468>
 8002198:	ee37 7b06 	vadd.f64	d7, d7, d6
 800219c:	ed1f 6bec 	vldr	d6, [pc, #-944]	; 8001df0 <IVK+0x470>
 80021a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021a4:	ed1f 6bec 	vldr	d6, [pc, #-944]	; 8001df8 <IVK+0x478>
 80021a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021ac:	eeb0 0b47 	vmov.f64	d0, d7
 80021b0:	f014 ff56 	bl	8017060 <cos>
 80021b4:	eeb0 7b40 	vmov.f64	d7, d0
	  d5 = 289211.783328 *
 80021b8:	ed1f 6bef 	vldr	d6, [pc, #-956]	; 8001e00 <IVK+0x480>
 80021bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80021c0:	ed97 6b66 	vldr	d6, [r7, #408]	; 0x198
 80021c4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80021c8:	ed87 7b58 	vstr	d7, [r7, #352]	; 0x160
	       e_J_inv_tmp_tmp;
	  d6 = 289211.783328 * J_inv_tmp_tmp * b_J_inv_tmp_tmp;
 80021cc:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80021d0:	ed9f 6bf7 	vldr	d6, [pc, #988]	; 80025b0 <IVK+0xc30>
 80021d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80021d8:	ed97 6b74 	vldr	d6, [r7, #464]	; 0x1d0
 80021dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80021e0:	ed87 7b56 	vstr	d7, [r7, #344]	; 0x158
	  d7 = 21136.68 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp_tmp;
 80021e4:	f107 030c 	add.w	r3, r7, #12
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	3308      	adds	r3, #8
 80021ec:	ed93 6b00 	vldr	d6, [r3]
 80021f0:	f107 030c 	add.w	r3, r7, #12
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	3310      	adds	r3, #16
 80021f8:	ed93 7b00 	vldr	d7, [r3]
 80021fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002200:	ed9f 6bed 	vldr	d6, [pc, #948]	; 80025b8 <IVK+0xc38>
 8002204:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002208:	ed9f 6bed 	vldr	d6, [pc, #948]	; 80025c0 <IVK+0xc40>
 800220c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002210:	eeb0 0b47 	vmov.f64	d0, d7
 8002214:	f014 ff24 	bl	8017060 <cos>
 8002218:	eeb0 7b40 	vmov.f64	d7, d0
 800221c:	ed9f 6bea 	vldr	d6, [pc, #936]	; 80025c8 <IVK+0xc48>
 8002220:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002224:	ed97 6b66 	vldr	d6, [r7, #408]	; 0x198
 8002228:	ee26 7b07 	vmul.f64	d7, d6, d7
 800222c:	ed87 7b54 	vstr	d7, [r7, #336]	; 0x150
	  d8 = 21136.68 * d2 * b_J_inv_tmp_tmp;
 8002230:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8002234:	ed9f 6be4 	vldr	d6, [pc, #912]	; 80025c8 <IVK+0xc48>
 8002238:	ee27 7b06 	vmul.f64	d7, d7, d6
 800223c:	ed97 6b74 	vldr	d6, [r7, #464]	; 0x1d0
 8002240:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002244:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
	  dv[1] = 27.0 *
	          (((8760.0 * c_J_inv_tmp_tmp * d_J_inv_tmp * d_J_inv_tmp_tmp +
 8002248:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 800224c:	ed9f 6be0 	vldr	d6, [pc, #896]	; 80025d0 <IVK+0xc50>
 8002250:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002254:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8002258:	ee26 6b07 	vmul.f64	d6, d6, d7
 800225c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002260:	ee26 6b07 	vmul.f64	d6, d6, d7
	             119862.496 * b_J_inv_tmp * J_inv_tmp * d_J_inv_tmp_tmp) +
 8002264:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002268:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 80025e8 <IVK+0xc68>
 800226c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002270:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8002274:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002278:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800227c:	ee25 7b07 	vmul.f64	d7, d5, d7
	          (((8760.0 * c_J_inv_tmp_tmp * d_J_inv_tmp * d_J_inv_tmp_tmp +
 8002280:	ee36 6b07 	vadd.f64	d6, d6, d7
	            119862.496 * c_J_inv_tmp_tmp * J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 8002284:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8002288:	ed9f 5bd7 	vldr	d5, [pc, #860]	; 80025e8 <IVK+0xc68>
 800228c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002290:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8002294:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002298:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800229c:	ee25 7b07 	vmul.f64	d7, d5, d7
	             119862.496 * b_J_inv_tmp * J_inv_tmp * d_J_inv_tmp_tmp) +
 80022a0:	ee36 6b07 	vadd.f64	d6, d6, d7
	           8760.0 * b_J_inv_tmp * c_J_inv_tmp * d_J_inv_tmp_tmp) /
 80022a4:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80022a8:	ed9f 5bc9 	vldr	d5, [pc, #804]	; 80025d0 <IVK+0xc50>
 80022ac:	ee27 5b05 	vmul.f64	d5, d7, d5
 80022b0:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80022b4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80022b8:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80022bc:	ee25 7b07 	vmul.f64	d7, d5, d7
	            119862.496 * c_J_inv_tmp_tmp * J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 80022c0:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[1] = 27.0 *
 80022c4:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 80022c8:	ee27 5b06 	vmul.f64	d5, d7, d6
	          (((((((((((24629.28 * J_inv_tmp * d_J_inv_tmp * d -
 80022cc:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 80022d0:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 80025d8 <IVK+0xc58>
 80022d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80022d8:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 80022dc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80022e0:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 80022e4:	ee26 6b07 	vmul.f64	d6, d6, d7
	                     24629.28 * J_inv_tmp_tmp * c_J_inv_tmp * d) +
 80022e8:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80022ec:	ed9f 4bba 	vldr	d4, [pc, #744]	; 80025d8 <IVK+0xc58>
 80022f0:	ee27 4b04 	vmul.f64	d4, d7, d4
 80022f4:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80022f8:	ee24 4b07 	vmul.f64	d4, d4, d7
 80022fc:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8002300:	ee24 7b07 	vmul.f64	d7, d4, d7
	          (((((((((((24629.28 * J_inv_tmp * d_J_inv_tmp * d -
 8002304:	ee36 6b47 	vsub.f64	d6, d6, d7
	                    d3 * d1) -
 8002308:	ed97 4b5c 	vldr	d4, [r7, #368]	; 0x170
 800230c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002310:	ee24 7b07 	vmul.f64	d7, d4, d7
	                     24629.28 * J_inv_tmp_tmp * c_J_inv_tmp * d) +
 8002314:	ee36 6b07 	vadd.f64	d6, d6, d7
	                   d4 * d1) +
 8002318:	ed97 4b5a 	vldr	d4, [r7, #360]	; 0x168
 800231c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002320:	ee24 7b07 	vmul.f64	d7, d4, d7
	                    d3 * d1) -
 8002324:	ee36 6b47 	vsub.f64	d6, d6, d7
	                  289211.783328 * J_inv_tmp * e_J_inv_tmp_tmp * d) -
 8002328:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 800232c:	ed9f 4ba0 	vldr	d4, [pc, #640]	; 80025b0 <IVK+0xc30>
 8002330:	ee27 4b04 	vmul.f64	d4, d7, d4
 8002334:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8002338:	ee24 4b07 	vmul.f64	d4, d4, d7
 800233c:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8002340:	ee24 7b07 	vmul.f64	d7, d4, d7
	                   d4 * d1) +
 8002344:	ee36 6b07 	vadd.f64	d6, d6, d7
	                 d6 * d) +
 8002348:	ed97 4b56 	vldr	d4, [r7, #344]	; 0x158
 800234c:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8002350:	ee24 7b07 	vmul.f64	d7, d4, d7
	                  289211.783328 * J_inv_tmp * e_J_inv_tmp_tmp * d) -
 8002354:	ee36 6b47 	vsub.f64	d6, d6, d7
	                d5 * d1) -
 8002358:	ed97 4b58 	vldr	d4, [r7, #352]	; 0x160
 800235c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002360:	ee24 7b07 	vmul.f64	d7, d4, d7
	                 d6 * d) +
 8002364:	ee36 6b07 	vadd.f64	d6, d6, d7
	               d6 * d1) +
 8002368:	ed97 4b56 	vldr	d4, [r7, #344]	; 0x158
 800236c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8002370:	ee24 7b07 	vmul.f64	d7, d4, d7
	                d5 * d1) -
 8002374:	ee36 6b47 	vsub.f64	d6, d6, d7
	              21136.68 * c_J_inv_tmp * e_J_inv_tmp_tmp * d) -
 8002378:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 800237c:	ed9f 4b92 	vldr	d4, [pc, #584]	; 80025c8 <IVK+0xc48>
 8002380:	ee27 4b04 	vmul.f64	d4, d7, d4
 8002384:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8002388:	ee24 4b07 	vmul.f64	d4, d4, d7
 800238c:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8002390:	ee24 7b07 	vmul.f64	d7, d4, d7
	               d6 * d1) +
 8002394:	ee36 6b07 	vadd.f64	d6, d6, d7
	             21136.68 * d_J_inv_tmp * b_J_inv_tmp_tmp * d) +
 8002398:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 800239c:	ed9f 4b8a 	vldr	d4, [pc, #552]	; 80025c8 <IVK+0xc48>
 80023a0:	ee27 4b04 	vmul.f64	d4, d7, d4
 80023a4:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 80023a8:	ee24 4b07 	vmul.f64	d4, d4, d7
 80023ac:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 80023b0:	ee24 7b07 	vmul.f64	d7, d4, d7
	              21136.68 * c_J_inv_tmp * e_J_inv_tmp_tmp * d) -
 80023b4:	ee36 6b47 	vsub.f64	d6, d6, d7
	            d7 * d1) -
 80023b8:	ed97 4b54 	vldr	d4, [r7, #336]	; 0x150
 80023bc:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80023c0:	ee24 7b07 	vmul.f64	d7, d4, d7
	             21136.68 * d_J_inv_tmp * b_J_inv_tmp_tmp * d) +
 80023c4:	ee36 6b07 	vadd.f64	d6, d6, d7
	           d8 * d1);
 80023c8:	ed97 4b52 	vldr	d4, [r7, #328]	; 0x148
 80023cc:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80023d0:	ee24 7b07 	vmul.f64	d7, d4, d7
	            d7 * d1) -
 80023d4:	ee36 6b47 	vsub.f64	d6, d6, d7
	           8760.0 * b_J_inv_tmp * c_J_inv_tmp * d_J_inv_tmp_tmp) /
 80023d8:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[1] = 27.0 *
 80023dc:	f107 0310 	add.w	r3, r7, #16
 80023e0:	ed83 7b02 	vstr	d7, [r3, #8]
	  d9 = 8760.0 *
	       cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 80023e4:	f107 030c 	add.w	r3, r7, #12
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	3308      	adds	r3, #8
 80023ec:	ed93 6b00 	vldr	d6, [r3]
 80023f0:	f107 030c 	add.w	r3, r7, #12
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	3310      	adds	r3, #16
 80023f8:	ed93 7b00 	vldr	d7, [r3]
 80023fc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002400:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002404:	f107 030c 	add.w	r3, r7, #12
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	3318      	adds	r3, #24
 800240c:	ed93 7b00 	vldr	d7, [r3]
 8002410:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002414:	ed9f 6b68 	vldr	d6, [pc, #416]	; 80025b8 <IVK+0xc38>
 8002418:	ee37 7b06 	vadd.f64	d7, d7, d6
 800241c:	ed9f 6b68 	vldr	d6, [pc, #416]	; 80025c0 <IVK+0xc40>
 8002420:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002424:	ed9f 6b72 	vldr	d6, [pc, #456]	; 80025f0 <IVK+0xc70>
 8002428:	ee37 7b46 	vsub.f64	d7, d7, d6
 800242c:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80025e0 <IVK+0xc60>
 8002430:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002434:	eeb0 0b47 	vmov.f64	d0, d7
 8002438:	f014 fe12 	bl	8017060 <cos>
 800243c:	eeb0 7b40 	vmov.f64	d7, d0
	  d9 = 8760.0 *
 8002440:	ed9f 6b63 	vldr	d6, [pc, #396]	; 80025d0 <IVK+0xc50>
 8002444:	ee27 8b06 	vmul.f64	d8, d7, d6
	           1.52205) *
	       cos(((q[1] + q[2]) + 1.6845) + -0.8995);
 8002448:	f107 030c 	add.w	r3, r7, #12
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	3308      	adds	r3, #8
 8002450:	ed93 6b00 	vldr	d6, [r3]
 8002454:	f107 030c 	add.w	r3, r7, #12
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	3310      	adds	r3, #16
 800245c:	ed93 7b00 	vldr	d7, [r3]
 8002460:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002464:	ed9f 6b54 	vldr	d6, [pc, #336]	; 80025b8 <IVK+0xc38>
 8002468:	ee37 7b06 	vadd.f64	d7, d7, d6
 800246c:	ed9f 6b54 	vldr	d6, [pc, #336]	; 80025c0 <IVK+0xc40>
 8002470:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002474:	eeb0 0b47 	vmov.f64	d0, d7
 8002478:	f014 fdf2 	bl	8017060 <cos>
 800247c:	eeb0 7b40 	vmov.f64	d7, d0
	  d9 = 8760.0 *
 8002480:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002484:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
	  d10 = 8760.0 *
	        sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	3308      	adds	r3, #8
 8002490:	ed93 6b00 	vldr	d6, [r3]
 8002494:	f107 030c 	add.w	r3, r7, #12
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3310      	adds	r3, #16
 800249c:	ed93 7b00 	vldr	d7, [r3]
 80024a0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80024a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80024a8:	f107 030c 	add.w	r3, r7, #12
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	3318      	adds	r3, #24
 80024b0:	ed93 7b00 	vldr	d7, [r3]
 80024b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80024b8:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 80025b8 <IVK+0xc38>
 80024bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80024c0:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 80025c0 <IVK+0xc40>
 80024c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80024c8:	ed9f 6b49 	vldr	d6, [pc, #292]	; 80025f0 <IVK+0xc70>
 80024cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80024d0:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80025e0 <IVK+0xc60>
 80024d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80024d8:	eeb0 0b47 	vmov.f64	d0, d7
 80024dc:	f014 fe14 	bl	8017108 <sin>
 80024e0:	eeb0 7b40 	vmov.f64	d7, d0
	  d10 = 8760.0 *
 80024e4:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 80025d0 <IVK+0xc50>
 80024e8:	ee27 8b06 	vmul.f64	d8, d7, d6
	            1.52205) *
	        sin(((q[1] + q[2]) + 1.6845) + -0.8995);
 80024ec:	f107 030c 	add.w	r3, r7, #12
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	3308      	adds	r3, #8
 80024f4:	ed93 6b00 	vldr	d6, [r3]
 80024f8:	f107 030c 	add.w	r3, r7, #12
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	3310      	adds	r3, #16
 8002500:	ed93 7b00 	vldr	d7, [r3]
 8002504:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002508:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 80025b8 <IVK+0xc38>
 800250c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002510:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 80025c0 <IVK+0xc40>
 8002514:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002518:	eeb0 0b47 	vmov.f64	d0, d7
 800251c:	f014 fdf4 	bl	8017108 <sin>
 8002520:	eeb0 7b40 	vmov.f64	d7, d0
	  d10 = 8760.0 *
 8002524:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002528:	ed87 7b4e 	vstr	d7, [r7, #312]	; 0x138
	  d11 = ((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 800252c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002530:	ee27 6b07 	vmul.f64	d6, d7, d7
 8002534:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8002538:	ee26 6b07 	vmul.f64	d6, d6, d7
	                  d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800253c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002540:	ee27 5b07 	vmul.f64	d5, d7, d7
 8002544:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8002548:	ee25 7b07 	vmul.f64	d7, d5, d7
	  d11 = ((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 800254c:	ee36 6b47 	vsub.f64	d6, d6, d7
	                 d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8002550:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002554:	ee27 5b07 	vmul.f64	d5, d7, d7
 8002558:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800255c:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8002560:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8002564:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002568:	ee27 5b07 	vmul.f64	d5, d7, d7
 800256c:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8002570:	ee25 7b07 	vmul.f64	d7, d5, d7
	                 d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8002574:	ee36 6b47 	vsub.f64	d6, d6, d7
	               d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8002578:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800257c:	ee27 5b07 	vmul.f64	d5, d7, d7
 8002580:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8002584:	ee25 7b07 	vmul.f64	d7, d5, d7
	                d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8002588:	ee36 6b07 	vadd.f64	d6, d6, d7
	              d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800258c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002590:	ee27 5b07 	vmul.f64	d5, d7, d7
 8002594:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8002598:	ee25 7b07 	vmul.f64	d7, d5, d7
	               d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 800259c:	ee36 6b47 	vsub.f64	d6, d6, d7
	             d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80025a0:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80025a4:	ee27 5b07 	vmul.f64	d5, d7, d7
 80025a8:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 80025ac:	e038      	b.n	8002620 <IVK+0xca0>
 80025ae:	bf00      	nop
 80025b0:	2220bc38 	.word	0x2220bc38
 80025b4:	4111a6ef 	.word	0x4111a6ef
 80025b8:	45a1cac1 	.word	0x45a1cac1
 80025bc:	3ffaf3b6 	.word	0x3ffaf3b6
 80025c0:	39581062 	.word	0x39581062
 80025c4:	3fecc8b4 	.word	0x3fecc8b4
 80025c8:	851eb852 	.word	0x851eb852
 80025cc:	40d4a42b 	.word	0x40d4a42b
 80025d0:	00000000 	.word	0x00000000
 80025d4:	40c11c00 	.word	0x40c11c00
 80025d8:	eb851eb8 	.word	0xeb851eb8
 80025dc:	40d80d51 	.word	0x40d80d51
 80025e0:	19ce075f 	.word	0x19ce075f
 80025e4:	3ff85a51 	.word	0x3ff85a51
 80025e8:	ef9db22d 	.word	0xef9db22d
 80025ec:	40fd4367 	.word	0x40fd4367
 80025f0:	05532618 	.word	0x05532618
 80025f4:	3fe792a3 	.word	0x3fe792a3
 80025f8:	45a1cac1 	.word	0x45a1cac1
 80025fc:	3ffaf3b6 	.word	0x3ffaf3b6
 8002600:	39581062 	.word	0x39581062
 8002604:	3fecc8b4 	.word	0x3fecc8b4
 8002608:	d916872b 	.word	0xd916872b
 800260c:	4089a7ce 	.word	0x4089a7ce
 8002610:	00000000 	.word	0x00000000
 8002614:	404e0000 	.word	0x404e0000
 8002618:	ef9db22d 	.word	0xef9db22d
 800261c:	40ed4367 	.word	0x40ed4367
 8002620:	ee25 7b07 	vmul.f64	d7, d5, d7
	              d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8002624:	ee36 6b07 	vadd.f64	d6, d6, d7
	            d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8002628:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800262c:	ee27 5b07 	vmul.f64	d5, d7, d7
 8002630:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 8002634:	ee25 7b07 	vmul.f64	d7, d5, d7
	             d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8002638:	ee36 6b47 	vsub.f64	d6, d6, d7
	           d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 800263c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002640:	ee27 5b07 	vmul.f64	d5, d7, d7
 8002644:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8002648:	ee25 7b07 	vmul.f64	d7, d5, d7
	            d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 800264c:	ee36 6b07 	vadd.f64	d6, d6, d7
	          d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8002650:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002654:	ee27 5b07 	vmul.f64	d5, d7, d7
 8002658:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 800265c:	ee25 7b07 	vmul.f64	d7, d5, d7
	           d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8002660:	ee36 6b47 	vsub.f64	d6, d6, d7
	         d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8002664:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002668:	ee27 5b07 	vmul.f64	d5, d7, d7
 800266c:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8002670:	ee25 7b07 	vmul.f64	d7, d5, d7
	          d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8002674:	ee36 6b07 	vadd.f64	d6, d6, d7
	        d8 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp);
 8002678:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800267c:	ee27 5b07 	vmul.f64	d5, d7, d7
 8002680:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8002684:	ee25 7b07 	vmul.f64	d7, d5, d7
	  d11 = ((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8002688:	ee36 7b47 	vsub.f64	d7, d6, d7
 800268c:	ed87 7b4c 	vstr	d7, [r7, #304]	; 0x130
	  dv[6] = -(27.0 *
	            (((d10 * f_J_inv_tmp_tmp +
 8002690:	ed97 6b4e 	vldr	d6, [r7, #312]	; 0x138
 8002694:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002698:	ee26 8b07 	vmul.f64	d8, d6, d7
	               119862.496 *
	                   cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800269c:	f107 030c 	add.w	r3, r7, #12
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	3308      	adds	r3, #8
 80026a4:	ed93 6b00 	vldr	d6, [r3]
 80026a8:	f107 030c 	add.w	r3, r7, #12
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	3310      	adds	r3, #16
 80026b0:	ed93 7b00 	vldr	d7, [r3]
 80026b4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80026b8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80026bc:	f107 030c 	add.w	r3, r7, #12
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	3318      	adds	r3, #24
 80026c4:	ed93 7b00 	vldr	d7, [r3]
 80026c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80026cc:	ed1f 6b36 	vldr	d6, [pc, #-216]	; 80025f8 <IVK+0xc78>
 80026d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80026d4:	ed1f 6b36 	vldr	d6, [pc, #-216]	; 8002600 <IVK+0xc80>
 80026d8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80026dc:	ed1f 6b3c 	vldr	d6, [pc, #-240]	; 80025f0 <IVK+0xc70>
 80026e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80026e4:	ed1f 6b42 	vldr	d6, [pc, #-264]	; 80025e0 <IVK+0xc60>
 80026e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80026ec:	eeb0 0b47 	vmov.f64	d0, d7
 80026f0:	f014 fcb6 	bl	8017060 <cos>
 80026f4:	eeb0 7b40 	vmov.f64	d7, d0
	               119862.496 *
 80026f8:	ed1f 6b45 	vldr	d6, [pc, #-276]	; 80025e8 <IVK+0xc68>
 80026fc:	ee27 9b06 	vmul.f64	d9, d7, d6
	                        -0.73665) +
	                       1.52205) *
	                   cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002700:	f107 030c 	add.w	r3, r7, #12
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	3308      	adds	r3, #8
 8002708:	ed93 6b00 	vldr	d6, [r3]
 800270c:	f107 030c 	add.w	r3, r7, #12
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	3310      	adds	r3, #16
 8002714:	ed93 7b00 	vldr	d7, [r3]
 8002718:	ee37 7b07 	vadd.f64	d7, d7, d7
 800271c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002720:	ed1f 6b4b 	vldr	d6, [pc, #-300]	; 80025f8 <IVK+0xc78>
 8002724:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002728:	ed1f 6b4b 	vldr	d6, [pc, #-300]	; 8002600 <IVK+0xc80>
 800272c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002730:	ed1f 6b51 	vldr	d6, [pc, #-324]	; 80025f0 <IVK+0xc70>
 8002734:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002738:	eeb0 0b47 	vmov.f64	d0, d7
 800273c:	f014 fc90 	bl	8017060 <cos>
 8002740:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 8002744:	ee29 6b07 	vmul.f64	d6, d9, d7
	                   cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002748:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800274c:	ee26 7b07 	vmul.f64	d7, d6, d7
	            (((d10 * f_J_inv_tmp_tmp +
 8002750:	ee38 8b07 	vadd.f64	d8, d8, d7
	                   f_J_inv_tmp_tmp) +
	              119862.496 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002754:	f107 030c 	add.w	r3, r7, #12
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	3308      	adds	r3, #8
 800275c:	ed93 6b00 	vldr	d6, [r3]
 8002760:	f107 030c 	add.w	r3, r7, #12
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	3310      	adds	r3, #16
 8002768:	ed93 7b00 	vldr	d7, [r3]
 800276c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002770:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002774:	f107 030c 	add.w	r3, r7, #12
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3318      	adds	r3, #24
 800277c:	ed93 7b00 	vldr	d7, [r3]
 8002780:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002784:	ed1f 6b64 	vldr	d6, [pc, #-400]	; 80025f8 <IVK+0xc78>
 8002788:	ee37 7b06 	vadd.f64	d7, d7, d6
 800278c:	ed1f 6b64 	vldr	d6, [pc, #-400]	; 8002600 <IVK+0xc80>
 8002790:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002794:	ed1f 6b6a 	vldr	d6, [pc, #-424]	; 80025f0 <IVK+0xc70>
 8002798:	ee37 7b46 	vsub.f64	d7, d7, d6
 800279c:	ed1f 6b70 	vldr	d6, [pc, #-448]	; 80025e0 <IVK+0xc60>
 80027a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80027a4:	eeb0 0b47 	vmov.f64	d0, d7
 80027a8:	f014 fcae 	bl	8017108 <sin>
 80027ac:	eeb0 7b40 	vmov.f64	d7, d0
	              119862.496 *
 80027b0:	ed1f 6b73 	vldr	d6, [pc, #-460]	; 80025e8 <IVK+0xc68>
 80027b4:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80027b8:	f107 030c 	add.w	r3, r7, #12
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	3308      	adds	r3, #8
 80027c0:	ed93 6b00 	vldr	d6, [r3]
 80027c4:	f107 030c 	add.w	r3, r7, #12
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3310      	adds	r3, #16
 80027cc:	ed93 7b00 	vldr	d7, [r3]
 80027d0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80027d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80027d8:	ed1f 6b79 	vldr	d6, [pc, #-484]	; 80025f8 <IVK+0xc78>
 80027dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80027e0:	ed1f 6b79 	vldr	d6, [pc, #-484]	; 8002600 <IVK+0xc80>
 80027e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80027e8:	ed1f 6b7f 	vldr	d6, [pc, #-508]	; 80025f0 <IVK+0xc70>
 80027ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80027f0:	eeb0 0b47 	vmov.f64	d0, d7
 80027f4:	f014 fc88 	bl	8017108 <sin>
 80027f8:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 80027fc:	ee29 6b07 	vmul.f64	d6, d9, d7
	                  sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002800:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002804:	ee26 7b07 	vmul.f64	d7, d6, d7
	                   f_J_inv_tmp_tmp) +
 8002808:	ee38 6b07 	vadd.f64	d6, d8, d7
	                  f_J_inv_tmp_tmp) +
	             d9 * f_J_inv_tmp_tmp)) /
 800280c:	ed97 5b50 	vldr	d5, [r7, #320]	; 0x140
 8002810:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002814:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  f_J_inv_tmp_tmp) +
 8002818:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[6] = -(27.0 *
 800281c:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8002820:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002824:	eeb1 5b47 	vneg.f64	d5, d7
	             d9 * f_J_inv_tmp_tmp)) /
 8002828:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 800282c:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[6] = -(27.0 *
 8002830:	f107 0310 	add.w	r3, r7, #16
 8002834:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	          d11;
	  dv[11] = -(27.0 * (820.976 * J_inv_tmp * f_J_inv_tmp_tmp +
 8002838:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 800283c:	ed1f 6b8e 	vldr	d6, [pc, #-568]	; 8002608 <IVK+0xc88>
 8002840:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002844:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002848:	ee26 8b07 	vmul.f64	d8, d6, d7
	                     60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 800284c:	f107 030c 	add.w	r3, r7, #12
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	3308      	adds	r3, #8
 8002854:	ed93 6b00 	vldr	d6, [r3]
 8002858:	f107 030c 	add.w	r3, r7, #12
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	3310      	adds	r3, #16
 8002860:	ed93 7b00 	vldr	d7, [r3]
 8002864:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002868:	ed1f 6b9d 	vldr	d6, [pc, #-628]	; 80025f8 <IVK+0xc78>
 800286c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002870:	ed1f 6b9d 	vldr	d6, [pc, #-628]	; 8002600 <IVK+0xc80>
 8002874:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002878:	eeb0 0b47 	vmov.f64	d0, d7
 800287c:	f014 fbf0 	bl	8017060 <cos>
 8002880:	eeb0 7b40 	vmov.f64	d7, d0
 8002884:	ed1f 6b9e 	vldr	d6, [pc, #-632]	; 8002610 <IVK+0xc90>
 8002888:	ee27 6b06 	vmul.f64	d6, d7, d6
 800288c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002890:	ee26 7b07 	vmul.f64	d7, d6, d7
	  dv[11] = -(27.0 * (820.976 * J_inv_tmp * f_J_inv_tmp_tmp +
 8002894:	ee38 7b07 	vadd.f64	d7, d8, d7
 8002898:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 800289c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80028a0:	eeb1 5b47 	vneg.f64	d5, d7
	                         f_J_inv_tmp_tmp)) /
 80028a4:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 80028a8:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[11] = -(27.0 * (820.976 * J_inv_tmp * f_J_inv_tmp_tmp +
 80028ac:	f107 0310 	add.w	r3, r7, #16
 80028b0:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
	           d11;
	  dv[16] =
	      -(27.0 *
	        (820.976 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80028b4:	f107 030c 	add.w	r3, r7, #12
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	3308      	adds	r3, #8
 80028bc:	ed93 6b00 	vldr	d6, [r3]
 80028c0:	f107 030c 	add.w	r3, r7, #12
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	3310      	adds	r3, #16
 80028c8:	ed93 7b00 	vldr	d7, [r3]
 80028cc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80028d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80028d4:	ed1f 6bb8 	vldr	d6, [pc, #-736]	; 80025f8 <IVK+0xc78>
 80028d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80028dc:	ed1f 6bb8 	vldr	d6, [pc, #-736]	; 8002600 <IVK+0xc80>
 80028e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80028e4:	ed1f 6bbe 	vldr	d6, [pc, #-760]	; 80025f0 <IVK+0xc70>
 80028e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80028ec:	eeb0 0b47 	vmov.f64	d0, d7
 80028f0:	f014 fbb6 	bl	8017060 <cos>
 80028f4:	eeb0 7b40 	vmov.f64	d7, d0
 80028f8:	ed1f 6bbd 	vldr	d6, [pc, #-756]	; 8002608 <IVK+0xc88>
 80028fc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002900:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002904:	ee26 8b07 	vmul.f64	d8, d6, d7
	             d_J_inv_tmp_tmp +
	         60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * d_J_inv_tmp_tmp)) /
 8002908:	f107 030c 	add.w	r3, r7, #12
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	3308      	adds	r3, #8
 8002910:	ed93 6b00 	vldr	d6, [r3]
 8002914:	f107 030c 	add.w	r3, r7, #12
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3310      	adds	r3, #16
 800291c:	ed93 7b00 	vldr	d7, [r3]
 8002920:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002924:	ed1f 6bcc 	vldr	d6, [pc, #-816]	; 80025f8 <IVK+0xc78>
 8002928:	ee37 7b06 	vadd.f64	d7, d7, d6
 800292c:	ed1f 6bcc 	vldr	d6, [pc, #-816]	; 8002600 <IVK+0xc80>
 8002930:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002934:	eeb0 0b47 	vmov.f64	d0, d7
 8002938:	f014 fb92 	bl	8017060 <cos>
 800293c:	eeb0 7b40 	vmov.f64	d7, d0
 8002940:	ed1f 6bcd 	vldr	d6, [pc, #-820]	; 8002610 <IVK+0xc90>
 8002944:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002948:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800294c:	ee26 7b07 	vmul.f64	d7, d6, d7
	             d_J_inv_tmp_tmp +
 8002950:	ee38 7b07 	vadd.f64	d7, d8, d7
	      -(27.0 *
 8002954:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8002958:	ee27 7b06 	vmul.f64	d7, d7, d6
 800295c:	eeb1 5b47 	vneg.f64	d5, d7
	         60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * d_J_inv_tmp_tmp)) /
 8002960:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 8002964:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[16] =
 8002968:	f107 0310 	add.w	r3, r7, #16
 800296c:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
	      d11;
	  dv[21] = -(27.0 * (820.976 * J_inv_tmp_tmp + 60.0 * d_J_inv_tmp)) / d11;
 8002970:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8002974:	ed1f 6bdc 	vldr	d6, [pc, #-880]	; 8002608 <IVK+0xc88>
 8002978:	ee27 6b06 	vmul.f64	d6, d7, d6
 800297c:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8002980:	ed1f 5bdd 	vldr	d5, [pc, #-884]	; 8002610 <IVK+0xc90>
 8002984:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002988:	ee36 7b07 	vadd.f64	d7, d6, d7
 800298c:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 8002990:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002994:	eeb1 5b47 	vneg.f64	d5, d7
 8002998:	ed97 6b4c 	vldr	d6, [r7, #304]	; 0x130
 800299c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80029a0:	f107 0310 	add.w	r3, r7, #16
 80029a4:	ed83 7b2a 	vstr	d7, [r3, #168]	; 0xa8
	  d12 = 2.0 * d11;
 80029a8:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 80029ac:	ee37 7b07 	vadd.f64	d7, d7, d7
 80029b0:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
	  dv[2] = -(55.0 * (((((59931.248 * b_J_inv_tmp * J_inv_tmp * e_J_inv_tmp *
 80029b4:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80029b8:	ed1f 6be9 	vldr	d6, [pc, #-932]	; 8002618 <IVK+0xc98>
 80029bc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80029c0:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 80029c4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80029c8:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 80029cc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80029d0:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80029d4:	ee26 6b07 	vmul.f64	d6, d6, d7
	                            d_J_inv_tmp_tmp +
	                        59931.248 * c_J_inv_tmp_tmp * J_inv_tmp_tmp *
 80029d8:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 80029dc:	ed1f 5bf2 	vldr	d5, [pc, #-968]	; 8002618 <IVK+0xc98>
 80029e0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80029e4:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80029e8:	ee25 5b07 	vmul.f64	d5, d5, d7
 80029ec:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 80029f0:	ee25 5b07 	vmul.f64	d5, d5, d7
	                            e_J_inv_tmp * d_J_inv_tmp_tmp) +
 80029f4:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80029f8:	ee25 7b07 	vmul.f64	d7, d5, d7
	                            d_J_inv_tmp_tmp +
 80029fc:	ee36 6b07 	vadd.f64	d6, d6, d7
	                       d9 * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 8002a00:	ed97 5b50 	vldr	d5, [r7, #320]	; 0x140
 8002a04:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002a08:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002a0c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002a10:	ee25 7b07 	vmul.f64	d7, d5, d7
	                            e_J_inv_tmp * d_J_inv_tmp_tmp) +
 8002a14:	ee36 6b07 	vadd.f64	d6, d6, d7
	                      51432.588 * b_J_inv_tmp * b_J_inv_tmp_tmp * e_J_inv_tmp *
 8002a18:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8002a1c:	ed9f 5bf2 	vldr	d5, [pc, #968]	; 8002de8 <IVK+0x1468>
 8002a20:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002a24:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8002a28:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002a2c:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002a30:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002a34:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002a38:	ee25 7b07 	vmul.f64	d7, d5, d7
	                       d9 * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 8002a3c:	ee36 6b07 	vadd.f64	d6, d6, d7
	                          d_J_inv_tmp_tmp) +
	                     d10 * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 8002a40:	ed97 5b4e 	vldr	d5, [r7, #312]	; 0x138
 8002a44:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002a48:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002a4c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002a50:	ee25 7b07 	vmul.f64	d7, d5, d7
	                          d_J_inv_tmp_tmp) +
 8002a54:	ee36 6b07 	vadd.f64	d6, d6, d7
	                    51432.588 * c_J_inv_tmp_tmp * e_J_inv_tmp_tmp *
 8002a58:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8002a5c:	ed9f 5be2 	vldr	d5, [pc, #904]	; 8002de8 <IVK+0x1468>
 8002a60:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002a64:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8002a68:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002a6c:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002a70:	ee25 5b07 	vmul.f64	d5, d5, d7
	                        e_J_inv_tmp * d_J_inv_tmp_tmp)) /
 8002a74:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8002a78:	ee25 7b07 	vmul.f64	d7, d5, d7
	                     d10 * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 8002a7c:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[2] = -(55.0 * (((((59931.248 * b_J_inv_tmp * J_inv_tmp * e_J_inv_tmp *
 8002a80:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8002e40 <IVK+0x14c0>
 8002a84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002a88:	eeb1 5b47 	vneg.f64	d5, d7
	                        e_J_inv_tmp * d_J_inv_tmp_tmp)) /
 8002a8c:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 8002a90:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[2] = -(55.0 * (((((59931.248 * b_J_inv_tmp * J_inv_tmp * e_J_inv_tmp *
 8002a94:	f107 0310 	add.w	r3, r7, #16
 8002a98:	ed83 7b04 	vstr	d7, [r3, #16]
	          d12;
	  dv[7] =
	      55.0 *
	      (((((59931.248 *
	               cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002a9c:	f107 030c 	add.w	r3, r7, #12
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3308      	adds	r3, #8
 8002aa4:	ed93 6b00 	vldr	d6, [r3]
 8002aa8:	f107 030c 	add.w	r3, r7, #12
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	3310      	adds	r3, #16
 8002ab0:	ed93 7b00 	vldr	d7, [r3]
 8002ab4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002ab8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002abc:	f107 030c 	add.w	r3, r7, #12
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	3318      	adds	r3, #24
 8002ac4:	ed93 7b00 	vldr	d7, [r3]
 8002ac8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002acc:	ed9f 6bd4 	vldr	d6, [pc, #848]	; 8002e20 <IVK+0x14a0>
 8002ad0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ad4:	ed9f 6bd4 	vldr	d6, [pc, #848]	; 8002e28 <IVK+0x14a8>
 8002ad8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002adc:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 8002e10 <IVK+0x1490>
 8002ae0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ae4:	ed9f 6bc6 	vldr	d6, [pc, #792]	; 8002e00 <IVK+0x1480>
 8002ae8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002aec:	eeb0 0b47 	vmov.f64	d0, d7
 8002af0:	f014 fab6 	bl	8017060 <cos>
 8002af4:	eeb0 7b40 	vmov.f64	d7, d0
	      (((((59931.248 *
 8002af8:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8002df0 <IVK+0x1470>
 8002afc:	ee27 8b06 	vmul.f64	d8, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002b00:	f107 030c 	add.w	r3, r7, #12
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	3308      	adds	r3, #8
 8002b08:	ed93 6b00 	vldr	d6, [r3]
 8002b0c:	f107 030c 	add.w	r3, r7, #12
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	3310      	adds	r3, #16
 8002b14:	ed93 7b00 	vldr	d7, [r3]
 8002b18:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002b1c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b20:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 8002e20 <IVK+0x14a0>
 8002b24:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002b28:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 8002e28 <IVK+0x14a8>
 8002b2c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002b30:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8002e10 <IVK+0x1490>
 8002b34:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002b38:	eeb0 0b47 	vmov.f64	d0, d7
 8002b3c:	f014 fa90 	bl	8017060 <cos>
 8002b40:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 8002b44:	ee28 6b07 	vmul.f64	d6, d8, d7
	               cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002b48:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002b4c:	ee26 6b07 	vmul.f64	d6, d6, d7
	               f_J_inv_tmp_tmp * e_J_inv_tmp +
 8002b50:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002b54:	ee26 8b07 	vmul.f64	d8, d6, d7
	           59931.248 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002b58:	f107 030c 	add.w	r3, r7, #12
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	3308      	adds	r3, #8
 8002b60:	ed93 6b00 	vldr	d6, [r3]
 8002b64:	f107 030c 	add.w	r3, r7, #12
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	3310      	adds	r3, #16
 8002b6c:	ed93 7b00 	vldr	d7, [r3]
 8002b70:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002b74:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002b78:	f107 030c 	add.w	r3, r7, #12
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3318      	adds	r3, #24
 8002b80:	ed93 7b00 	vldr	d7, [r3]
 8002b84:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b88:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8002e20 <IVK+0x14a0>
 8002b8c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002b90:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8002e28 <IVK+0x14a8>
 8002b94:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002b98:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8002e10 <IVK+0x1490>
 8002b9c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ba0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8002e00 <IVK+0x1480>
 8002ba4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ba8:	eeb0 0b47 	vmov.f64	d0, d7
 8002bac:	f014 faac 	bl	8017108 <sin>
 8002bb0:	eeb0 7b40 	vmov.f64	d7, d0
	           59931.248 *
 8002bb4:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 8002df0 <IVK+0x1470>
 8002bb8:	ee27 9b06 	vmul.f64	d9, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002bbc:	f107 030c 	add.w	r3, r7, #12
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3308      	adds	r3, #8
 8002bc4:	ed93 6b00 	vldr	d6, [r3]
 8002bc8:	f107 030c 	add.w	r3, r7, #12
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	3310      	adds	r3, #16
 8002bd0:	ed93 7b00 	vldr	d7, [r3]
 8002bd4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002bd8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002bdc:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002e20 <IVK+0x14a0>
 8002be0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002be4:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8002e28 <IVK+0x14a8>
 8002be8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002bec:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8002e10 <IVK+0x1490>
 8002bf0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002bf4:	eeb0 0b47 	vmov.f64	d0, d7
 8002bf8:	f014 fa86 	bl	8017108 <sin>
 8002bfc:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 8002c00:	ee29 6b07 	vmul.f64	d6, d9, d7
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002c04:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002c08:	ee26 6b07 	vmul.f64	d6, d6, d7
	               f_J_inv_tmp_tmp * e_J_inv_tmp) +
 8002c0c:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002c10:	ee26 7b07 	vmul.f64	d7, d6, d7
	               f_J_inv_tmp_tmp * e_J_inv_tmp +
 8002c14:	ee38 8b07 	vadd.f64	d8, d8, d7
	          8760.0 *
	              cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002c18:	f107 030c 	add.w	r3, r7, #12
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	3308      	adds	r3, #8
 8002c20:	ed93 6b00 	vldr	d6, [r3]
 8002c24:	f107 030c 	add.w	r3, r7, #12
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	3310      	adds	r3, #16
 8002c2c:	ed93 7b00 	vldr	d7, [r3]
 8002c30:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002c34:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002c38:	f107 030c 	add.w	r3, r7, #12
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	3318      	adds	r3, #24
 8002c40:	ed93 7b00 	vldr	d7, [r3]
 8002c44:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c48:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8002e20 <IVK+0x14a0>
 8002c4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002c50:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8002e28 <IVK+0x14a8>
 8002c54:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c58:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8002e10 <IVK+0x1490>
 8002c5c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002c60:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8002e00 <IVK+0x1480>
 8002c64:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002c68:	eeb0 0b47 	vmov.f64	d0, d7
 8002c6c:	f014 f9f8 	bl	8017060 <cos>
 8002c70:	eeb0 7b40 	vmov.f64	d7, d0
	          8760.0 *
 8002c74:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8002df8 <IVK+0x1478>
 8002c78:	ee27 9b06 	vmul.f64	d9, d7, d6
	                   -0.73665) +
	                  1.52205) *
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) *
 8002c7c:	f107 030c 	add.w	r3, r7, #12
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3308      	adds	r3, #8
 8002c84:	ed93 6b00 	vldr	d6, [r3]
 8002c88:	f107 030c 	add.w	r3, r7, #12
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	3310      	adds	r3, #16
 8002c90:	ed93 7b00 	vldr	d7, [r3]
 8002c94:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002c98:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8002e20 <IVK+0x14a0>
 8002c9c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ca0:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8002e28 <IVK+0x14a8>
 8002ca4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ca8:	eeb0 0b47 	vmov.f64	d0, d7
 8002cac:	f014 f9d8 	bl	8017060 <cos>
 8002cb0:	eeb0 7b40 	vmov.f64	d7, d0
	                  1.52205) *
 8002cb4:	ee29 9b07 	vmul.f64	d9, d9, d7
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) *
 8002cb8:	f107 030c 	add.w	r3, r7, #12
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	ed93 7b00 	vldr	d7, [r3]
 8002cc2:	eeb0 0b47 	vmov.f64	d0, d7
 8002cc6:	f014 f9cb 	bl	8017060 <cos>
 8002cca:	eeb0 7b40 	vmov.f64	d7, d0
 8002cce:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002cd2:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002cd6:	ee26 7b07 	vmul.f64	d7, d6, d7
	               f_J_inv_tmp_tmp * e_J_inv_tmp) +
 8002cda:	ee38 8b07 	vadd.f64	d8, d8, d7
	              e_J_inv_tmp) +
	         51432.588 *
	             cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002cde:	f107 030c 	add.w	r3, r7, #12
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	3308      	adds	r3, #8
 8002ce6:	ed93 6b00 	vldr	d6, [r3]
 8002cea:	f107 030c 	add.w	r3, r7, #12
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3310      	adds	r3, #16
 8002cf2:	ed93 7b00 	vldr	d7, [r3]
 8002cf6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002cfa:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002cfe:	f107 030c 	add.w	r3, r7, #12
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3318      	adds	r3, #24
 8002d06:	ed93 7b00 	vldr	d7, [r3]
 8002d0a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002d0e:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8002e20 <IVK+0x14a0>
 8002d12:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002d16:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8002e28 <IVK+0x14a8>
 8002d1a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002d1e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8002e10 <IVK+0x1490>
 8002d22:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002d26:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8002e00 <IVK+0x1480>
 8002d2a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002d2e:	eeb0 0b47 	vmov.f64	d0, d7
 8002d32:	f014 f995 	bl	8017060 <cos>
 8002d36:	eeb0 7b40 	vmov.f64	d7, d0
	         51432.588 *
 8002d3a:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8002de8 <IVK+0x1468>
 8002d3e:	ee27 9b06 	vmul.f64	d9, d7, d6
	                  -0.73665) +
	                 1.52205) *
	             cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 8002d42:	f107 030c 	add.w	r3, r7, #12
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	3308      	adds	r3, #8
 8002d4a:	ed93 7b00 	vldr	d7, [r3]
 8002d4e:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8002e20 <IVK+0x14a0>
 8002d52:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002d56:	eeb0 0b47 	vmov.f64	d0, d7
 8002d5a:	f014 f981 	bl	8017060 <cos>
 8002d5e:	eeb0 7b40 	vmov.f64	d7, d0
	                 1.52205) *
 8002d62:	ee29 6b07 	vmul.f64	d6, d9, d7
	             cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 8002d66:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002d6a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002d6e:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002d72:	ee26 7b07 	vmul.f64	d7, d6, d7
	              e_J_inv_tmp) +
 8002d76:	ee38 8b07 	vadd.f64	d8, d8, d7
	        8760.0 *
	            sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002d7a:	f107 030c 	add.w	r3, r7, #12
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	3308      	adds	r3, #8
 8002d82:	ed93 6b00 	vldr	d6, [r3]
 8002d86:	f107 030c 	add.w	r3, r7, #12
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3310      	adds	r3, #16
 8002d8e:	ed93 7b00 	vldr	d7, [r3]
 8002d92:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002d96:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002d9a:	f107 030c 	add.w	r3, r7, #12
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	3318      	adds	r3, #24
 8002da2:	ed93 7b00 	vldr	d7, [r3]
 8002da6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002daa:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8002e20 <IVK+0x14a0>
 8002dae:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002db2:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8002e28 <IVK+0x14a8>
 8002db6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002dba:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8002e10 <IVK+0x1490>
 8002dbe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002dc2:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8002e00 <IVK+0x1480>
 8002dc6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002dca:	eeb0 0b47 	vmov.f64	d0, d7
 8002dce:	f014 f99b 	bl	8017108 <sin>
 8002dd2:	eeb0 7b40 	vmov.f64	d7, d0
	        8760.0 *
 8002dd6:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8002df8 <IVK+0x1478>
 8002dda:	ee27 9b06 	vmul.f64	d9, d7, d6
	                 -0.73665) +
	                1.52205) *
	            sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) * e_J_inv_tmp) +
 8002dde:	f107 030c 	add.w	r3, r7, #12
 8002de2:	e031      	b.n	8002e48 <IVK+0x14c8>
 8002de4:	f3af 8000 	nop.w
 8002de8:	d0e56042 	.word	0xd0e56042
 8002dec:	40e91d12 	.word	0x40e91d12
 8002df0:	ef9db22d 	.word	0xef9db22d
 8002df4:	40ed4367 	.word	0x40ed4367
 8002df8:	00000000 	.word	0x00000000
 8002dfc:	40c11c00 	.word	0x40c11c00
 8002e00:	19ce075f 	.word	0x19ce075f
 8002e04:	3ff85a51 	.word	0x3ff85a51
 8002e08:	d0e56042 	.word	0xd0e56042
 8002e0c:	40e91d12 	.word	0x40e91d12
 8002e10:	05532618 	.word	0x05532618
 8002e14:	3fe792a3 	.word	0x3fe792a3
 8002e18:	d916872b 	.word	0xd916872b
 8002e1c:	4079a7ce 	.word	0x4079a7ce
 8002e20:	45a1cac1 	.word	0x45a1cac1
 8002e24:	3ffaf3b6 	.word	0x3ffaf3b6
 8002e28:	39581062 	.word	0x39581062
 8002e2c:	3fecc8b4 	.word	0x3fecc8b4
 8002e30:	00000000 	.word	0x00000000
 8002e34:	404e0000 	.word	0x404e0000
 8002e38:	b020c49c 	.word	0xb020c49c
 8002e3c:	40760472 	.word	0x40760472
 8002e40:	00000000 	.word	0x00000000
 8002e44:	404b8000 	.word	0x404b8000
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3308      	adds	r3, #8
 8002e4c:	ed93 6b00 	vldr	d6, [r3]
 8002e50:	f107 030c 	add.w	r3, r7, #12
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	3310      	adds	r3, #16
 8002e58:	ed93 7b00 	vldr	d7, [r3]
 8002e5c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002e60:	ed1f 6b11 	vldr	d6, [pc, #-68]	; 8002e20 <IVK+0x14a0>
 8002e64:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002e68:	ed1f 6b11 	vldr	d6, [pc, #-68]	; 8002e28 <IVK+0x14a8>
 8002e6c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002e70:	eeb0 0b47 	vmov.f64	d0, d7
 8002e74:	f014 f948 	bl	8017108 <sin>
 8002e78:	eeb0 7b40 	vmov.f64	d7, d0
	                1.52205) *
 8002e7c:	ee29 9b07 	vmul.f64	d9, d9, d7
	            sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) * e_J_inv_tmp) +
 8002e80:	f107 030c 	add.w	r3, r7, #12
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	ed93 7b00 	vldr	d7, [r3]
 8002e8a:	eeb0 0b47 	vmov.f64	d0, d7
 8002e8e:	f014 f8e7 	bl	8017060 <cos>
 8002e92:	eeb0 7b40 	vmov.f64	d7, d0
 8002e96:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002e9a:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002e9e:	ee26 7b07 	vmul.f64	d7, d6, d7
	             cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 8002ea2:	ee38 8b07 	vadd.f64	d8, d8, d7
	       51432.588 *
	           sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8002ea6:	f107 030c 	add.w	r3, r7, #12
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	3308      	adds	r3, #8
 8002eae:	ed93 6b00 	vldr	d6, [r3]
 8002eb2:	f107 030c 	add.w	r3, r7, #12
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	3310      	adds	r3, #16
 8002eba:	ed93 7b00 	vldr	d7, [r3]
 8002ebe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002ec2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002ec6:	f107 030c 	add.w	r3, r7, #12
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	3318      	adds	r3, #24
 8002ece:	ed93 7b00 	vldr	d7, [r3]
 8002ed2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002ed6:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 8002e20 <IVK+0x14a0>
 8002eda:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ede:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 8002e28 <IVK+0x14a8>
 8002ee2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002ee6:	ed1f 6b36 	vldr	d6, [pc, #-216]	; 8002e10 <IVK+0x1490>
 8002eea:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002eee:	ed1f 6b3c 	vldr	d6, [pc, #-240]	; 8002e00 <IVK+0x1480>
 8002ef2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002ef6:	eeb0 0b47 	vmov.f64	d0, d7
 8002efa:	f014 f905 	bl	8017108 <sin>
 8002efe:	eeb0 7b40 	vmov.f64	d7, d0
	       51432.588 *
 8002f02:	ed1f 6b3f 	vldr	d6, [pc, #-252]	; 8002e08 <IVK+0x1488>
 8002f06:	ee27 9b06 	vmul.f64	d9, d7, d6
	                -0.73665) +
	               1.52205) *
	           sin(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) /
 8002f0a:	f107 030c 	add.w	r3, r7, #12
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	3308      	adds	r3, #8
 8002f12:	ed93 7b00 	vldr	d7, [r3]
 8002f16:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 8002e20 <IVK+0x14a0>
 8002f1a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002f1e:	eeb0 0b47 	vmov.f64	d0, d7
 8002f22:	f014 f8f1 	bl	8017108 <sin>
 8002f26:	eeb0 7b40 	vmov.f64	d7, d0
	               1.52205) *
 8002f2a:	ee29 6b07 	vmul.f64	d6, d9, d7
	           sin(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) /
 8002f2e:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002f32:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002f36:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002f3a:	ee26 7b07 	vmul.f64	d7, d6, d7
	            sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) * e_J_inv_tmp) +
 8002f3e:	ee38 7b07 	vadd.f64	d7, d8, d7
	      55.0 *
 8002f42:	ed1f 6b41 	vldr	d6, [pc, #-260]	; 8002e40 <IVK+0x14c0>
 8002f46:	ee27 5b06 	vmul.f64	d5, d7, d6
	           sin(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) /
 8002f4a:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 8002f4e:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[7] =
 8002f52:	f107 0310 	add.w	r3, r7, #16
 8002f56:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
	      d12;
	  dv[12] =
	      55.0 *
	      ((60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) *
 8002f5a:	f107 030c 	add.w	r3, r7, #12
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3308      	adds	r3, #8
 8002f62:	ed93 6b00 	vldr	d6, [r3]
 8002f66:	f107 030c 	add.w	r3, r7, #12
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	3310      	adds	r3, #16
 8002f6e:	ed93 7b00 	vldr	d7, [r3]
 8002f72:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002f76:	ed1f 6b56 	vldr	d6, [pc, #-344]	; 8002e20 <IVK+0x14a0>
 8002f7a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002f7e:	ed1f 6b56 	vldr	d6, [pc, #-344]	; 8002e28 <IVK+0x14a8>
 8002f82:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002f86:	eeb0 0b47 	vmov.f64	d0, d7
 8002f8a:	f014 f869 	bl	8017060 <cos>
 8002f8e:	eeb0 7b40 	vmov.f64	d7, d0
 8002f92:	ed1f 6b59 	vldr	d6, [pc, #-356]	; 8002e30 <IVK+0x14b0>
 8002f96:	ee27 8b06 	vmul.f64	d8, d7, d6
 8002f9a:	f107 030c 	add.w	r3, r7, #12
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	ed93 7b00 	vldr	d7, [r3]
 8002fa4:	eeb0 0b47 	vmov.f64	d0, d7
 8002fa8:	f014 f85a 	bl	8017060 <cos>
 8002fac:	eeb0 7b40 	vmov.f64	d7, d0
 8002fb0:	ee28 6b07 	vmul.f64	d6, d8, d7
 8002fb4:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002fb8:	ee26 8b07 	vmul.f64	d8, d6, d7
	            e_J_inv_tmp +
	        352.278 * cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 8002fbc:	f107 030c 	add.w	r3, r7, #12
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	3308      	adds	r3, #8
 8002fc4:	ed93 7b00 	vldr	d7, [r3]
 8002fc8:	ed1f 6b6b 	vldr	d6, [pc, #-428]	; 8002e20 <IVK+0x14a0>
 8002fcc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002fd0:	eeb0 0b47 	vmov.f64	d0, d7
 8002fd4:	f014 f844 	bl	8017060 <cos>
 8002fd8:	eeb0 7b40 	vmov.f64	d7, d0
 8002fdc:	ed1f 6b6a 	vldr	d6, [pc, #-424]	; 8002e38 <IVK+0x14b8>
 8002fe0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002fe4:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8002fe8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002fec:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8002ff0:	ee26 7b07 	vmul.f64	d7, d6, d7
	            e_J_inv_tmp +
 8002ff4:	ee38 8b07 	vadd.f64	d8, d8, d7
	       410.488 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8002ff8:	f107 030c 	add.w	r3, r7, #12
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	3308      	adds	r3, #8
 8003000:	ed93 6b00 	vldr	d6, [r3]
 8003004:	f107 030c 	add.w	r3, r7, #12
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	3310      	adds	r3, #16
 800300c:	ed93 7b00 	vldr	d7, [r3]
 8003010:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003014:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003018:	ed1f 6b7f 	vldr	d6, [pc, #-508]	; 8002e20 <IVK+0x14a0>
 800301c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003020:	ed1f 6b7f 	vldr	d6, [pc, #-508]	; 8002e28 <IVK+0x14a8>
 8003024:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003028:	ed1f 6b87 	vldr	d6, [pc, #-540]	; 8002e10 <IVK+0x1490>
 800302c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003030:	eeb0 0b47 	vmov.f64	d0, d7
 8003034:	f014 f814 	bl	8017060 <cos>
 8003038:	eeb0 7b40 	vmov.f64	d7, d0
 800303c:	ed1f 6b8a 	vldr	d6, [pc, #-552]	; 8002e18 <IVK+0x1498>
 8003040:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003044:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003048:	ee26 6b07 	vmul.f64	d6, d6, d7
	           f_J_inv_tmp_tmp * e_J_inv_tmp) /
 800304c:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8003050:	ee26 7b07 	vmul.f64	d7, d6, d7
	        352.278 * cos(q[1] + 1.6845) * f_J_inv_tmp_tmp * e_J_inv_tmp) +
 8003054:	ee38 7b07 	vadd.f64	d7, d8, d7
	      55.0 *
 8003058:	ed1f 6b87 	vldr	d6, [pc, #-540]	; 8002e40 <IVK+0x14c0>
 800305c:	ee27 5b06 	vmul.f64	d5, d7, d6
	           f_J_inv_tmp_tmp * e_J_inv_tmp) /
 8003060:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 8003064:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[12] =
 8003068:	f107 0310 	add.w	r3, r7, #16
 800306c:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
	      d12;
	  dv[17] =
	      55.0 *
	      ((60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp *
 8003070:	f107 030c 	add.w	r3, r7, #12
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	3308      	adds	r3, #8
 8003078:	ed93 6b00 	vldr	d6, [r3]
 800307c:	f107 030c 	add.w	r3, r7, #12
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	3310      	adds	r3, #16
 8003084:	ed93 7b00 	vldr	d7, [r3]
 8003088:	ee36 7b07 	vadd.f64	d7, d6, d7
 800308c:	ed1f 6b9c 	vldr	d6, [pc, #-624]	; 8002e20 <IVK+0x14a0>
 8003090:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003094:	ed1f 6b9c 	vldr	d6, [pc, #-624]	; 8002e28 <IVK+0x14a8>
 8003098:	ee37 7b46 	vsub.f64	d7, d7, d6
 800309c:	eeb0 0b47 	vmov.f64	d0, d7
 80030a0:	f013 ffde 	bl	8017060 <cos>
 80030a4:	eeb0 7b40 	vmov.f64	d7, d0
 80030a8:	ed1f 6b9f 	vldr	d6, [pc, #-636]	; 8002e30 <IVK+0x14b0>
 80030ac:	ee27 6b06 	vmul.f64	d6, d7, d6
 80030b0:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 80030b4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80030b8:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80030bc:	ee26 8b07 	vmul.f64	d8, d6, d7
	            d_J_inv_tmp_tmp +
	        352.278 * cos(q[1] + 1.6845) * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 80030c0:	f107 030c 	add.w	r3, r7, #12
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3308      	adds	r3, #8
 80030c8:	ed93 7b00 	vldr	d7, [r3]
 80030cc:	ed1f 6bac 	vldr	d6, [pc, #-688]	; 8002e20 <IVK+0x14a0>
 80030d0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80030d4:	eeb0 0b47 	vmov.f64	d0, d7
 80030d8:	f013 ffc2 	bl	8017060 <cos>
 80030dc:	eeb0 7b40 	vmov.f64	d7, d0
 80030e0:	ed1f 6bab 	vldr	d6, [pc, #-684]	; 8002e38 <IVK+0x14b8>
 80030e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80030e8:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 80030ec:	ee26 6b07 	vmul.f64	d6, d6, d7
 80030f0:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80030f4:	ee26 7b07 	vmul.f64	d7, d6, d7
	            d_J_inv_tmp_tmp +
 80030f8:	ee38 8b07 	vadd.f64	d8, d8, d7
	       410.488 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80030fc:	f107 030c 	add.w	r3, r7, #12
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3308      	adds	r3, #8
 8003104:	ed93 6b00 	vldr	d6, [r3]
 8003108:	f107 030c 	add.w	r3, r7, #12
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	3310      	adds	r3, #16
 8003110:	ed93 7b00 	vldr	d7, [r3]
 8003114:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003118:	ee36 7b07 	vadd.f64	d7, d6, d7
 800311c:	ed1f 6bc0 	vldr	d6, [pc, #-768]	; 8002e20 <IVK+0x14a0>
 8003120:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003124:	ed1f 6bc0 	vldr	d6, [pc, #-768]	; 8002e28 <IVK+0x14a8>
 8003128:	ee37 7b46 	vsub.f64	d7, d7, d6
 800312c:	ed1f 6bc8 	vldr	d6, [pc, #-800]	; 8002e10 <IVK+0x1490>
 8003130:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003134:	eeb0 0b47 	vmov.f64	d0, d7
 8003138:	f013 ff92 	bl	8017060 <cos>
 800313c:	eeb0 7b40 	vmov.f64	d7, d0
 8003140:	ed1f 6bcb 	vldr	d6, [pc, #-812]	; 8002e18 <IVK+0x1498>
 8003144:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003148:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 800314c:	ee26 6b07 	vmul.f64	d6, d6, d7
	           e_J_inv_tmp * d_J_inv_tmp_tmp) /
 8003150:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003154:	ee26 7b07 	vmul.f64	d7, d6, d7
	        352.278 * cos(q[1] + 1.6845) * e_J_inv_tmp * d_J_inv_tmp_tmp) +
 8003158:	ee38 7b07 	vadd.f64	d7, d8, d7
	      55.0 *
 800315c:	ed1f 6bc8 	vldr	d6, [pc, #-800]	; 8002e40 <IVK+0x14c0>
 8003160:	ee27 5b06 	vmul.f64	d5, d7, d6
	           e_J_inv_tmp * d_J_inv_tmp_tmp) /
 8003164:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 8003168:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[17] =
 800316c:	f107 0310 	add.w	r3, r7, #16
 8003170:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
	      d12;
	  dv[22] = 55.0 *
	           ((410.488 * J_inv_tmp_tmp * e_J_inv_tmp +
 8003174:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8003178:	ed1f 6bd9 	vldr	d6, [pc, #-868]	; 8002e18 <IVK+0x1498>
 800317c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8003180:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8003184:	ee26 8b07 	vmul.f64	d8, d6, d7
	             60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp) +
 8003188:	f107 030c 	add.w	r3, r7, #12
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3308      	adds	r3, #8
 8003190:	ed93 6b00 	vldr	d6, [r3]
 8003194:	f107 030c 	add.w	r3, r7, #12
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	3310      	adds	r3, #16
 800319c:	ed93 7b00 	vldr	d7, [r3]
 80031a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80031a4:	ed1f 6be2 	vldr	d6, [pc, #-904]	; 8002e20 <IVK+0x14a0>
 80031a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80031ac:	ed1f 6be2 	vldr	d6, [pc, #-904]	; 8002e28 <IVK+0x14a8>
 80031b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80031b4:	eeb0 0b47 	vmov.f64	d0, d7
 80031b8:	f013 ffa6 	bl	8017108 <sin>
 80031bc:	eeb0 7b40 	vmov.f64	d7, d0
 80031c0:	ed1f 6be5 	vldr	d6, [pc, #-916]	; 8002e30 <IVK+0x14b0>
 80031c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80031c8:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 80031cc:	ee26 7b07 	vmul.f64	d7, d6, d7
	           ((410.488 * J_inv_tmp_tmp * e_J_inv_tmp +
 80031d0:	ee38 6b07 	vadd.f64	d6, d8, d7
	            352.278 * e_J_inv_tmp_tmp * e_J_inv_tmp) /
 80031d4:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 80031d8:	ed1f 5be9 	vldr	d5, [pc, #-932]	; 8002e38 <IVK+0x14b8>
 80031dc:	ee27 5b05 	vmul.f64	d5, d7, d5
 80031e0:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 80031e4:	ee25 7b07 	vmul.f64	d7, d5, d7
	             60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp) +
 80031e8:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[22] = 55.0 *
 80031ec:	ed1f 6bec 	vldr	d6, [pc, #-944]	; 8002e40 <IVK+0x14c0>
 80031f0:	ee27 5b06 	vmul.f64	d5, d7, d6
	            352.278 * e_J_inv_tmp_tmp * e_J_inv_tmp) /
 80031f4:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 80031f8:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[22] = 55.0 *
 80031fc:	f107 0310 	add.w	r3, r7, #16
 8003200:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
	           d12;
	  d9 = 21136.68 *
	       sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 8003204:	f107 030c 	add.w	r3, r7, #12
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	3308      	adds	r3, #8
 800320c:	ed93 6b00 	vldr	d6, [r3]
 8003210:	f107 030c 	add.w	r3, r7, #12
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3310      	adds	r3, #16
 8003218:	ed93 7b00 	vldr	d7, [r3]
 800321c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003220:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003224:	f107 030c 	add.w	r3, r7, #12
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3318      	adds	r3, #24
 800322c:	ed93 7b00 	vldr	d7, [r3]
 8003230:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003234:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 8003610 <IVK+0x1c90>
 8003238:	ee37 7b06 	vadd.f64	d7, d7, d6
 800323c:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 8003618 <IVK+0x1c98>
 8003240:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003244:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 8003620 <IVK+0x1ca0>
 8003248:	ee37 7b46 	vsub.f64	d7, d7, d6
 800324c:	ed9f 6bf6 	vldr	d6, [pc, #984]	; 8003628 <IVK+0x1ca8>
 8003250:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003254:	eeb0 0b47 	vmov.f64	d0, d7
 8003258:	f013 ff56 	bl	8017108 <sin>
 800325c:	eeb0 7b40 	vmov.f64	d7, d0
	  d9 = 21136.68 *
 8003260:	ed9f 6bf3 	vldr	d6, [pc, #972]	; 8003630 <IVK+0x1cb0>
 8003264:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003268:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
	           1.52205);
	  d10 = d9 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * e_J_inv_tmp_tmp;
 800326c:	f107 030c 	add.w	r3, r7, #12
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3308      	adds	r3, #8
 8003274:	ed93 6b00 	vldr	d6, [r3]
 8003278:	f107 030c 	add.w	r3, r7, #12
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3310      	adds	r3, #16
 8003280:	ed93 7b00 	vldr	d7, [r3]
 8003284:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003288:	ed9f 6be1 	vldr	d6, [pc, #900]	; 8003610 <IVK+0x1c90>
 800328c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003290:	ed9f 6be1 	vldr	d6, [pc, #900]	; 8003618 <IVK+0x1c98>
 8003294:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003298:	eeb0 0b47 	vmov.f64	d0, d7
 800329c:	f013 fee0 	bl	8017060 <cos>
 80032a0:	eeb0 6b40 	vmov.f64	d6, d0
 80032a4:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 80032a8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80032ac:	ed97 6b66 	vldr	d6, [r7, #408]	; 0x198
 80032b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80032b4:	ed87 7b4e 	vstr	d7, [r7, #312]	; 0x138
	  d9 = d9 * d2 * b_J_inv_tmp_tmp;
 80032b8:	ed97 6b50 	vldr	d6, [r7, #320]	; 0x140
 80032bc:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 80032c0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80032c4:	ed97 6b74 	vldr	d6, [r7, #464]	; 0x1d0
 80032c8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80032cc:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
	  d12 = 24629.28 *
	        sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 80032d0:	f107 030c 	add.w	r3, r7, #12
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3308      	adds	r3, #8
 80032d8:	ed93 6b00 	vldr	d6, [r3]
 80032dc:	f107 030c 	add.w	r3, r7, #12
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3310      	adds	r3, #16
 80032e4:	ed93 7b00 	vldr	d7, [r3]
 80032e8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80032ec:	ee36 6b07 	vadd.f64	d6, d6, d7
 80032f0:	f107 030c 	add.w	r3, r7, #12
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	3318      	adds	r3, #24
 80032f8:	ed93 7b00 	vldr	d7, [r3]
 80032fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003300:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8003610 <IVK+0x1c90>
 8003304:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003308:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8003618 <IVK+0x1c98>
 800330c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003310:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8003620 <IVK+0x1ca0>
 8003314:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003318:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8003628 <IVK+0x1ca8>
 800331c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003320:	eeb0 0b47 	vmov.f64	d0, d7
 8003324:	f013 fef0 	bl	8017108 <sin>
 8003328:	eeb0 7b40 	vmov.f64	d7, d0
	  d12 = 24629.28 *
 800332c:	ed9f 6bdc 	vldr	d6, [pc, #880]	; 80036a0 <IVK+0x1d20>
 8003330:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003334:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
	            1.52205);
	  d2 *= d12 * cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665);
 8003338:	f107 030c 	add.w	r3, r7, #12
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3308      	adds	r3, #8
 8003340:	ed93 6b00 	vldr	d6, [r3]
 8003344:	f107 030c 	add.w	r3, r7, #12
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3310      	adds	r3, #16
 800334c:	ed93 7b00 	vldr	d7, [r3]
 8003350:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003354:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003358:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8003610 <IVK+0x1c90>
 800335c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003360:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8003618 <IVK+0x1c98>
 8003364:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003368:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8003620 <IVK+0x1ca0>
 800336c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003370:	eeb0 0b47 	vmov.f64	d0, d7
 8003374:	f013 fe74 	bl	8017060 <cos>
 8003378:	eeb0 6b40 	vmov.f64	d6, d0
 800337c:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 8003380:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003384:	ed97 6b5e 	vldr	d6, [r7, #376]	; 0x178
 8003388:	ee26 7b07 	vmul.f64	d7, d6, d7
 800338c:	ed87 7b5e 	vstr	d7, [r7, #376]	; 0x178
	  d12 = d12 * J_inv_tmp_tmp * cos(((q[1] + q[2]) + 1.6845) + -0.8995);
 8003390:	ed97 6b4a 	vldr	d6, [r7, #296]	; 0x128
 8003394:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8003398:	ee26 8b07 	vmul.f64	d8, d6, d7
 800339c:	f107 030c 	add.w	r3, r7, #12
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3308      	adds	r3, #8
 80033a4:	ed93 6b00 	vldr	d6, [r3]
 80033a8:	f107 030c 	add.w	r3, r7, #12
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	3310      	adds	r3, #16
 80033b0:	ed93 7b00 	vldr	d7, [r3]
 80033b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80033b8:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8003610 <IVK+0x1c90>
 80033bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80033c0:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8003618 <IVK+0x1c98>
 80033c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80033c8:	eeb0 0b47 	vmov.f64	d0, d7
 80033cc:	f013 fe48 	bl	8017060 <cos>
 80033d0:	eeb0 7b40 	vmov.f64	d7, d0
 80033d4:	ee28 7b07 	vmul.f64	d7, d8, d7
 80033d8:	ed87 7b4a 	vstr	d7, [r7, #296]	; 0x128
	  e_J_inv_tmp =
	      289211.783328 *
	      sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) + -0.73665) +
 80033dc:	f107 030c 	add.w	r3, r7, #12
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	3308      	adds	r3, #8
 80033e4:	ed93 6b00 	vldr	d6, [r3]
 80033e8:	f107 030c 	add.w	r3, r7, #12
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3310      	adds	r3, #16
 80033f0:	ed93 7b00 	vldr	d7, [r3]
 80033f4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80033f8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80033fc:	f107 030c 	add.w	r3, r7, #12
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3318      	adds	r3, #24
 8003404:	ed93 7b00 	vldr	d7, [r3]
 8003408:	ee36 7b07 	vadd.f64	d7, d6, d7
 800340c:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8003610 <IVK+0x1c90>
 8003410:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003414:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8003618 <IVK+0x1c98>
 8003418:	ee37 7b46 	vsub.f64	d7, d7, d6
 800341c:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8003620 <IVK+0x1ca0>
 8003420:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003424:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8003628 <IVK+0x1ca8>
 8003428:	ee37 7b06 	vadd.f64	d7, d7, d6
 800342c:	eeb0 0b47 	vmov.f64	d0, d7
 8003430:	f013 fe6a 	bl	8017108 <sin>
 8003434:	eeb0 7b40 	vmov.f64	d7, d0
	  e_J_inv_tmp =
 8003438:	ed9f 6b9b 	vldr	d6, [pc, #620]	; 80036a8 <IVK+0x1d28>
 800343c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003440:	ed87 7b62 	vstr	d7, [r7, #392]	; 0x188
	          1.52205);
	  d13 = e_J_inv_tmp *
	        cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8003444:	f107 030c 	add.w	r3, r7, #12
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	3308      	adds	r3, #8
 800344c:	ed93 6b00 	vldr	d6, [r3]
 8003450:	f107 030c 	add.w	r3, r7, #12
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3310      	adds	r3, #16
 8003458:	ed93 7b00 	vldr	d7, [r3]
 800345c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003460:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003464:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8003610 <IVK+0x1c90>
 8003468:	ee37 7b06 	vadd.f64	d7, d7, d6
 800346c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8003618 <IVK+0x1c98>
 8003470:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003474:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8003620 <IVK+0x1ca0>
 8003478:	ee37 7b46 	vsub.f64	d7, d7, d6
 800347c:	eeb0 0b47 	vmov.f64	d0, d7
 8003480:	f013 fdee 	bl	8017060 <cos>
 8003484:	eeb0 6b40 	vmov.f64	d6, d0
	  d13 = e_J_inv_tmp *
 8003488:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 800348c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003490:	ed97 6b66 	vldr	d6, [r7, #408]	; 0x198
 8003494:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003498:	ed87 7b48 	vstr	d7, [r7, #288]	; 0x120
	        e_J_inv_tmp_tmp;
	  e_J_inv_tmp = e_J_inv_tmp * J_inv_tmp_tmp * b_J_inv_tmp_tmp;
 800349c:	ed97 6b62 	vldr	d6, [r7, #392]	; 0x188
 80034a0:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 80034a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80034a8:	ed97 6b74 	vldr	d6, [r7, #464]	; 0x1d0
 80034ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80034b0:	ed87 7b62 	vstr	d7, [r7, #392]	; 0x188
	  d14 = c_J_inv_tmp_tmp * c_J_inv_tmp_tmp;
 80034b4:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 80034b8:	ee27 7b07 	vmul.f64	d7, d7, d7
 80034bc:	ed87 7b46 	vstr	d7, [r7, #280]	; 0x118
	  d15 = 87600.0 * d14 * d_J_inv_tmp;
 80034c0:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 80034c4:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8003638 <IVK+0x1cb8>
 80034c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80034cc:	ed97 6b68 	vldr	d6, [r7, #416]	; 0x1a0
 80034d0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80034d4:	ed87 7b44 	vstr	d7, [r7, #272]	; 0x110
	  d14 = 1.02865176E+6 * d14 * e_J_inv_tmp_tmp;
 80034d8:	ed97 7b46 	vldr	d7, [r7, #280]	; 0x118
 80034dc:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 8003658 <IVK+0x1cd8>
 80034e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80034e4:	ed97 6b66 	vldr	d6, [r7, #408]	; 0x198
 80034e8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80034ec:	ed87 7b46 	vstr	d7, [r7, #280]	; 0x118
	  d16 = d15 * d_J_inv_tmp_tmp;
 80034f0:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 80034f4:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80034f8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80034fc:	ed87 7b42 	vstr	d7, [r7, #264]	; 0x108
	  d17 = d14 * d_J_inv_tmp_tmp;
 8003500:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 8003504:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003508:	ee26 7b07 	vmul.f64	d7, d6, d7
 800350c:	ed87 7b40 	vstr	d7, [r7, #256]	; 0x100
	  dv[3] =
	      4.0 *
	      (((((((((((((((221663.52 * J_inv_tmp * d_J_inv_tmp * f_J_inv_tmp_tmp -
 8003510:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8003514:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8003640 <IVK+0x1cc0>
 8003518:	ee27 6b06 	vmul.f64	d6, d7, d6
 800351c:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8003520:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003524:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003528:	ee26 6b07 	vmul.f64	d6, d6, d7
	                     221663.52 * J_inv_tmp_tmp * c_J_inv_tmp *
 800352c:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8003530:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8003640 <IVK+0x1cc0>
 8003534:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003538:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 800353c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003540:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003544:	ee25 7b07 	vmul.f64	d7, d5, d7
	      (((((((((((((((221663.52 * J_inv_tmp * d_J_inv_tmp * f_J_inv_tmp_tmp -
 8003548:	ee36 6b47 	vsub.f64	d6, d6, d7
	                         f_J_inv_tmp_tmp) +
	                    2.6029060499520004E+6 * J_inv_tmp * e_J_inv_tmp_tmp *
 800354c:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8003550:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 8003648 <IVK+0x1cc8>
 8003554:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003558:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 800355c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003560:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003564:	ee25 7b07 	vmul.f64	d7, d5, d7
	                         f_J_inv_tmp_tmp) +
 8003568:	ee36 6b07 	vadd.f64	d6, d6, d7
	                        f_J_inv_tmp_tmp) -
	                   2.6029060499520004E+6 * J_inv_tmp_tmp * b_J_inv_tmp_tmp *
 800356c:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8003570:	ed9f 5b35 	vldr	d5, [pc, #212]	; 8003648 <IVK+0x1cc8>
 8003574:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003578:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 800357c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003580:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003584:	ee25 7b07 	vmul.f64	d7, d5, d7
	                        f_J_inv_tmp_tmp) -
 8003588:	ee36 6b47 	vsub.f64	d6, d6, d7
	                       f_J_inv_tmp_tmp) +
	                  190230.12000000002 * c_J_inv_tmp * e_J_inv_tmp_tmp *
 800358c:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8003590:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8003650 <IVK+0x1cd0>
 8003594:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003598:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 800359c:	ee25 5b07 	vmul.f64	d5, d5, d7
 80035a0:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80035a4:	ee25 7b07 	vmul.f64	d7, d5, d7
	                       f_J_inv_tmp_tmp) +
 80035a8:	ee36 6b07 	vadd.f64	d6, d6, d7
	                      f_J_inv_tmp_tmp) -
	                 190230.12000000002 * d_J_inv_tmp * b_J_inv_tmp_tmp *
 80035ac:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 80035b0:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8003650 <IVK+0x1cd0>
 80035b4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80035b8:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 80035bc:	ee25 5b07 	vmul.f64	d5, d5, d7
 80035c0:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80035c4:	ee25 7b07 	vmul.f64	d7, d5, d7
	                      f_J_inv_tmp_tmp) -
 80035c8:	ee36 6b47 	vsub.f64	d6, d6, d7
	                     f_J_inv_tmp_tmp) +
 80035cc:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 80035d0:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d16) +
 80035d4:	ed97 7b40 	vldr	d7, [r7, #256]	; 0x100
 80035d8:	ee36 6b07 	vadd.f64	d6, d6, d7
	               d17) +
	              87600.0 * b_J_inv_tmp * c_J_inv_tmp_tmp * c_J_inv_tmp *
 80035dc:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 80035e0:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8003638 <IVK+0x1cb8>
 80035e4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80035e8:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 80035ec:	ee25 5b07 	vmul.f64	d5, d5, d7
 80035f0:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80035f4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80035f8:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80035fc:	ee25 7b07 	vmul.f64	d7, d5, d7
	               d17) +
 8003600:	ee36 6b07 	vadd.f64	d6, d6, d7
	                  d_J_inv_tmp_tmp) +
	             1.02865176E+6 * b_J_inv_tmp * c_J_inv_tmp_tmp * b_J_inv_tmp_tmp *
 8003604:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8003608:	e052      	b.n	80036b0 <IVK+0x1d30>
 800360a:	bf00      	nop
 800360c:	f3af 8000 	nop.w
 8003610:	45a1cac1 	.word	0x45a1cac1
 8003614:	3ffaf3b6 	.word	0x3ffaf3b6
 8003618:	39581062 	.word	0x39581062
 800361c:	3fecc8b4 	.word	0x3fecc8b4
 8003620:	05532618 	.word	0x05532618
 8003624:	3fe792a3 	.word	0x3fe792a3
 8003628:	19ce075f 	.word	0x19ce075f
 800362c:	3ff85a51 	.word	0x3ff85a51
 8003630:	851eb852 	.word	0x851eb852
 8003634:	40d4a42b 	.word	0x40d4a42b
 8003638:	00000000 	.word	0x00000000
 800363c:	40f56300 	.word	0x40f56300
 8003640:	28f5c28f 	.word	0x28f5c28f
 8003644:	410b0efc 	.word	0x410b0efc
 8003648:	0664d3c0 	.word	0x0664d3c0
 800364c:	4143dbcd 	.word	0x4143dbcd
 8003650:	f5c28f5d 	.word	0xf5c28f5d
 8003654:	410738b0 	.word	0x410738b0
 8003658:	851eb852 	.word	0x851eb852
 800365c:	412f6457 	.word	0x412f6457
 8003660:	66666666 	.word	0x66666666
 8003664:	410e10a6 	.word	0x410e10a6
 8003668:	eaa8eb47 	.word	0xeaa8eb47
 800366c:	414610aa 	.word	0x414610aa
 8003670:	66666667 	.word	0x66666667
 8003674:	4109cd36 	.word	0x4109cd36
 8003678:	851eb852 	.word	0x851eb852
 800367c:	40d4a42b 	.word	0x40d4a42b
 8003680:	45a1cac1 	.word	0x45a1cac1
 8003684:	3ffaf3b6 	.word	0x3ffaf3b6
 8003688:	39581062 	.word	0x39581062
 800368c:	3fecc8b4 	.word	0x3fecc8b4
 8003690:	19ce075f 	.word	0x19ce075f
 8003694:	3ff85a51 	.word	0x3ff85a51
 8003698:	05532618 	.word	0x05532618
 800369c:	3fe792a3 	.word	0x3fe792a3
 80036a0:	eb851eb8 	.word	0xeb851eb8
 80036a4:	40d80d51 	.word	0x40d80d51
 80036a8:	2220bc38 	.word	0x2220bc38
 80036ac:	4111a6ef 	.word	0x4111a6ef
 80036b0:	ed1f 5b17 	vldr	d5, [pc, #-92]	; 8003658 <IVK+0x1cd8>
 80036b4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80036b8:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 80036bc:	ee25 5b07 	vmul.f64	d5, d5, d7
 80036c0:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 80036c4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80036c8:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80036cc:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  d_J_inv_tmp_tmp) +
 80036d0:	ee36 6b07 	vadd.f64	d6, d6, d7
	                 d_J_inv_tmp_tmp) +
	            246292.8 * c_J_inv_tmp_tmp * J_inv_tmp * d_J_inv_tmp *
 80036d4:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 80036d8:	ed1f 5b1f 	vldr	d5, [pc, #-124]	; 8003660 <IVK+0x1ce0>
 80036dc:	ee27 5b05 	vmul.f64	d5, d7, d5
 80036e0:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 80036e4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80036e8:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 80036ec:	ee25 5b07 	vmul.f64	d5, d5, d7
 80036f0:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80036f4:	ee25 7b07 	vmul.f64	d7, d5, d7
	                 d_J_inv_tmp_tmp) +
 80036f8:	ee36 8b07 	vadd.f64	d8, d6, d7
	                d_J_inv_tmp_tmp) -
	           246292.8 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80036fc:	f107 030c 	add.w	r3, r7, #12
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3308      	adds	r3, #8
 8003704:	ed93 6b00 	vldr	d6, [r3]
 8003708:	f107 030c 	add.w	r3, r7, #12
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	3310      	adds	r3, #16
 8003710:	ed93 7b00 	vldr	d7, [r3]
 8003714:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003718:	ee36 6b07 	vadd.f64	d6, d6, d7
 800371c:	f107 030c 	add.w	r3, r7, #12
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3318      	adds	r3, #24
 8003724:	ed93 7b00 	vldr	d7, [r3]
 8003728:	ee36 7b07 	vadd.f64	d7, d6, d7
 800372c:	ed1f 6b2c 	vldr	d6, [pc, #-176]	; 8003680 <IVK+0x1d00>
 8003730:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003734:	ed1f 6b2c 	vldr	d6, [pc, #-176]	; 8003688 <IVK+0x1d08>
 8003738:	ee37 7b46 	vsub.f64	d7, d7, d6
 800373c:	ed1f 6b2a 	vldr	d6, [pc, #-168]	; 8003698 <IVK+0x1d18>
 8003740:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003744:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 8003690 <IVK+0x1d10>
 8003748:	ee37 7b06 	vadd.f64	d7, d7, d6
 800374c:	eeb0 0b47 	vmov.f64	d0, d7
 8003750:	f013 fcda 	bl	8017108 <sin>
 8003754:	eeb0 7b40 	vmov.f64	d7, d0
	           246292.8 *
 8003758:	ed1f 6b3f 	vldr	d6, [pc, #-252]	; 8003660 <IVK+0x1ce0>
 800375c:	ee27 6b06 	vmul.f64	d6, d7, d6
	                    -0.73665) +
	                   1.52205) *
 8003760:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8003764:	ee26 6b07 	vmul.f64	d6, d6, d7
	               J_inv_tmp_tmp * c_J_inv_tmp * d_J_inv_tmp_tmp) +
 8003768:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 800376c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003770:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003774:	ee26 7b07 	vmul.f64	d7, d6, d7
	                d_J_inv_tmp_tmp) -
 8003778:	ee38 6b47 	vsub.f64	d6, d8, d7
	          2.8921178332800004E+6 * c_J_inv_tmp_tmp * J_inv_tmp *
 800377c:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8003780:	ed1f 5b47 	vldr	d5, [pc, #-284]	; 8003668 <IVK+0x1ce8>
 8003784:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003788:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 800378c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003790:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8003794:	ee25 5b07 	vmul.f64	d5, d5, d7
	              e_J_inv_tmp_tmp * d_J_inv_tmp_tmp) -
 8003798:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800379c:	ee25 7b07 	vmul.f64	d7, d5, d7
	               J_inv_tmp_tmp * c_J_inv_tmp * d_J_inv_tmp_tmp) +
 80037a0:	ee36 8b07 	vadd.f64	d8, d6, d7
	         2.8921178332800004E+6 *
	             sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80037a4:	f107 030c 	add.w	r3, r7, #12
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3308      	adds	r3, #8
 80037ac:	ed93 6b00 	vldr	d6, [r3]
 80037b0:	f107 030c 	add.w	r3, r7, #12
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3310      	adds	r3, #16
 80037b8:	ed93 7b00 	vldr	d7, [r3]
 80037bc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80037c0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80037c4:	f107 030c 	add.w	r3, r7, #12
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3318      	adds	r3, #24
 80037cc:	ed93 7b00 	vldr	d7, [r3]
 80037d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80037d4:	ed1f 6b56 	vldr	d6, [pc, #-344]	; 8003680 <IVK+0x1d00>
 80037d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80037dc:	ed1f 6b56 	vldr	d6, [pc, #-344]	; 8003688 <IVK+0x1d08>
 80037e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80037e4:	ed1f 6b54 	vldr	d6, [pc, #-336]	; 8003698 <IVK+0x1d18>
 80037e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80037ec:	ed1f 6b58 	vldr	d6, [pc, #-352]	; 8003690 <IVK+0x1d10>
 80037f0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80037f4:	eeb0 0b47 	vmov.f64	d0, d7
 80037f8:	f013 fc86 	bl	8017108 <sin>
 80037fc:	eeb0 7b40 	vmov.f64	d7, d0
	         2.8921178332800004E+6 *
 8003800:	ed1f 6b67 	vldr	d6, [pc, #-412]	; 8003668 <IVK+0x1ce8>
 8003804:	ee27 6b06 	vmul.f64	d6, d7, d6
	                  -0.73665) +
	                 1.52205) *
 8003808:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 800380c:	ee26 6b07 	vmul.f64	d6, d6, d7
	             J_inv_tmp_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 8003810:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8003814:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003818:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800381c:	ee26 7b07 	vmul.f64	d7, d6, d7
	              e_J_inv_tmp_tmp * d_J_inv_tmp_tmp) -
 8003820:	ee38 6b47 	vsub.f64	d6, d8, d7
	        211366.80000000002 * c_J_inv_tmp_tmp * c_J_inv_tmp * e_J_inv_tmp_tmp *
 8003824:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8003828:	ed1f 5b6f 	vldr	d5, [pc, #-444]	; 8003670 <IVK+0x1cf0>
 800382c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003830:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8003834:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003838:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 800383c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003840:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003844:	ee25 7b07 	vmul.f64	d7, d5, d7
	             J_inv_tmp_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) +
 8003848:	ee36 8b07 	vadd.f64	d8, d6, d7
	            d_J_inv_tmp_tmp) -
	       211366.80000000002 *
	           sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800384c:	f107 030c 	add.w	r3, r7, #12
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	3308      	adds	r3, #8
 8003854:	ed93 6b00 	vldr	d6, [r3]
 8003858:	f107 030c 	add.w	r3, r7, #12
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	3310      	adds	r3, #16
 8003860:	ed93 7b00 	vldr	d7, [r3]
 8003864:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003868:	ee36 6b07 	vadd.f64	d6, d6, d7
 800386c:	f107 030c 	add.w	r3, r7, #12
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3318      	adds	r3, #24
 8003874:	ed93 7b00 	vldr	d7, [r3]
 8003878:	ee36 7b07 	vadd.f64	d7, d6, d7
 800387c:	ed1f 6b80 	vldr	d6, [pc, #-512]	; 8003680 <IVK+0x1d00>
 8003880:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003884:	ed1f 6b80 	vldr	d6, [pc, #-512]	; 8003688 <IVK+0x1d08>
 8003888:	ee37 7b46 	vsub.f64	d7, d7, d6
 800388c:	ed1f 6b7e 	vldr	d6, [pc, #-504]	; 8003698 <IVK+0x1d18>
 8003890:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003894:	ed1f 6b82 	vldr	d6, [pc, #-520]	; 8003690 <IVK+0x1d10>
 8003898:	ee37 7b06 	vadd.f64	d7, d7, d6
 800389c:	eeb0 0b47 	vmov.f64	d0, d7
 80038a0:	f013 fc32 	bl	8017108 <sin>
 80038a4:	eeb0 7b40 	vmov.f64	d7, d0
	       211366.80000000002 *
 80038a8:	ed1f 6b8f 	vldr	d6, [pc, #-572]	; 8003670 <IVK+0x1cf0>
 80038ac:	ee27 6b06 	vmul.f64	d6, d7, d6
	                -0.73665) +
	               1.52205) *
 80038b0:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 80038b4:	ee26 6b07 	vmul.f64	d6, d6, d7
	           d_J_inv_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) /
 80038b8:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 80038bc:	ee26 6b07 	vmul.f64	d6, d6, d7
 80038c0:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80038c4:	ee26 7b07 	vmul.f64	d7, d6, d7
	            d_J_inv_tmp_tmp) -
 80038c8:	ee38 7b47 	vsub.f64	d7, d8, d7
	      4.0 *
 80038cc:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80038d0:	ee27 8b06 	vmul.f64	d8, d7, d6
	      (9.0 *
	       (((((((((((21136.68 * c_J_inv_tmp_tmp * c_J_inv_tmp * e_J_inv_tmp_tmp *
 80038d4:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 80038d8:	ed1f 6b99 	vldr	d6, [pc, #-612]	; 8003678 <IVK+0x1cf8>
 80038dc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80038e0:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 80038e4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80038e8:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 80038ec:	ee26 6b07 	vmul.f64	d6, d6, d7
 80038f0:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 80038f4:	ee26 9b07 	vmul.f64	d9, d6, d7
	                      d -
	                  21136.68 *
	                      sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80038f8:	f107 030c 	add.w	r3, r7, #12
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3308      	adds	r3, #8
 8003900:	ed93 6b00 	vldr	d6, [r3]
 8003904:	f107 030c 	add.w	r3, r7, #12
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3310      	adds	r3, #16
 800390c:	ed93 7b00 	vldr	d7, [r3]
 8003910:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003914:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003918:	f107 030c 	add.w	r3, r7, #12
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3318      	adds	r3, #24
 8003920:	ed93 7b00 	vldr	d7, [r3]
 8003924:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003928:	ed1f 6bab 	vldr	d6, [pc, #-684]	; 8003680 <IVK+0x1d00>
 800392c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003930:	ed1f 6bab 	vldr	d6, [pc, #-684]	; 8003688 <IVK+0x1d08>
 8003934:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003938:	ed1f 6ba9 	vldr	d6, [pc, #-676]	; 8003698 <IVK+0x1d18>
 800393c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003940:	ed1f 6bad 	vldr	d6, [pc, #-692]	; 8003690 <IVK+0x1d10>
 8003944:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003948:	eeb0 0b47 	vmov.f64	d0, d7
 800394c:	f013 fbdc 	bl	8017108 <sin>
 8003950:	eeb0 7b40 	vmov.f64	d7, d0
	                  21136.68 *
 8003954:	ed1f 6bb8 	vldr	d6, [pc, #-736]	; 8003678 <IVK+0x1cf8>
 8003958:	ee27 6b06 	vmul.f64	d6, d7, d6
	                           -0.73665) +
	                          1.52205) *
 800395c:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 8003960:	ee26 6b07 	vmul.f64	d6, d6, d7
	                      d_J_inv_tmp * b_J_inv_tmp_tmp * d) +
 8003964:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8003968:	ee26 6b07 	vmul.f64	d6, d6, d7
 800396c:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8003970:	ee26 7b07 	vmul.f64	d7, d6, d7
	                      d -
 8003974:	ee39 6b47 	vsub.f64	d6, d9, d7
	                 d10 * d1) -
 8003978:	ed97 5b4e 	vldr	d5, [r7, #312]	; 0x138
 800397c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003980:	ee25 7b07 	vmul.f64	d7, d5, d7
	                      d_J_inv_tmp * b_J_inv_tmp_tmp * d) +
 8003984:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d9 * d1) +
 8003988:	ed97 5b50 	vldr	d5, [r7, #320]	; 0x140
 800398c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003990:	ee25 7b07 	vmul.f64	d7, d5, d7
	                 d10 * d1) -
 8003994:	ee36 6b47 	vsub.f64	d6, d6, d7
	               24629.28 * c_J_inv_tmp_tmp * J_inv_tmp * d_J_inv_tmp * d) -
 8003998:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 800399c:	ed1f 5bc0 	vldr	d5, [pc, #-768]	; 80036a0 <IVK+0x1d20>
 80039a0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80039a4:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 80039a8:	ee25 5b07 	vmul.f64	d5, d5, d7
 80039ac:	ed97 7b68 	vldr	d7, [r7, #416]	; 0x1a0
 80039b0:	ee25 5b07 	vmul.f64	d5, d5, d7
 80039b4:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 80039b8:	ee25 7b07 	vmul.f64	d7, d5, d7
	                d9 * d1) +
 80039bc:	ee36 9b07 	vadd.f64	d9, d6, d7
	              24629.28 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80039c0:	f107 030c 	add.w	r3, r7, #12
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	3308      	adds	r3, #8
 80039c8:	ed93 6b00 	vldr	d6, [r3]
 80039cc:	f107 030c 	add.w	r3, r7, #12
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3310      	adds	r3, #16
 80039d4:	ed93 7b00 	vldr	d7, [r3]
 80039d8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80039dc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80039e0:	f107 030c 	add.w	r3, r7, #12
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	3318      	adds	r3, #24
 80039e8:	ed93 7b00 	vldr	d7, [r3]
 80039ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80039f0:	ed1f 6bdd 	vldr	d6, [pc, #-884]	; 8003680 <IVK+0x1d00>
 80039f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80039f8:	ed1f 6bdd 	vldr	d6, [pc, #-884]	; 8003688 <IVK+0x1d08>
 80039fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003a00:	ed1f 6bdb 	vldr	d6, [pc, #-876]	; 8003698 <IVK+0x1d18>
 8003a04:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003a08:	ed1f 6bdf 	vldr	d6, [pc, #-892]	; 8003690 <IVK+0x1d10>
 8003a0c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003a10:	eeb0 0b47 	vmov.f64	d0, d7
 8003a14:	f013 fb78 	bl	8017108 <sin>
 8003a18:	eeb0 7b40 	vmov.f64	d7, d0
	              24629.28 *
 8003a1c:	ed1f 6be0 	vldr	d6, [pc, #-896]	; 80036a0 <IVK+0x1d20>
 8003a20:	ee27 6b06 	vmul.f64	d6, d7, d6
	                       -0.73665) +
	                      1.52205) *
 8003a24:	ed97 7b76 	vldr	d7, [r7, #472]	; 0x1d8
 8003a28:	ee26 6b07 	vmul.f64	d6, d6, d7
	                  J_inv_tmp_tmp * c_J_inv_tmp * d) +
 8003a2c:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8003a30:	ee26 6b07 	vmul.f64	d6, d6, d7
 8003a34:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8003a38:	ee26 7b07 	vmul.f64	d7, d6, d7
	               24629.28 * c_J_inv_tmp_tmp * J_inv_tmp * d_J_inv_tmp * d) -
 8003a3c:	ee39 6b47 	vsub.f64	d6, d9, d7
	             d2 * d1) -
 8003a40:	ed97 5b5e 	vldr	d5, [r7, #376]	; 0x178
 8003a44:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003a48:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  J_inv_tmp_tmp * c_J_inv_tmp * d) +
 8003a4c:	ee36 6b07 	vadd.f64	d6, d6, d7
	            d12 * d1) +
 8003a50:	ed97 5b4a 	vldr	d5, [r7, #296]	; 0x128
 8003a54:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003a58:	ee25 7b07 	vmul.f64	d7, d5, d7
	             d2 * d1) -
 8003a5c:	ee36 6b47 	vsub.f64	d6, d6, d7
	           289211.783328 * c_J_inv_tmp_tmp * J_inv_tmp * e_J_inv_tmp_tmp * d) -
 8003a60:	ed97 7b72 	vldr	d7, [r7, #456]	; 0x1c8
 8003a64:	ed1f 5bf0 	vldr	d5, [pc, #-960]	; 80036a8 <IVK+0x1d28>
 8003a68:	ee27 5b05 	vmul.f64	d5, d7, d5
 8003a6c:	ed97 7b6e 	vldr	d7, [r7, #440]	; 0x1b8
 8003a70:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003a74:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8003a78:	ee25 5b07 	vmul.f64	d5, d5, d7
 8003a7c:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8003a80:	ee25 7b07 	vmul.f64	d7, d5, d7
	            d12 * d1) +
 8003a84:	ee36 6b07 	vadd.f64	d6, d6, d7
	          e_J_inv_tmp * d) +
 8003a88:	ed97 5b62 	vldr	d5, [r7, #392]	; 0x188
 8003a8c:	ed97 7b7a 	vldr	d7, [r7, #488]	; 0x1e8
 8003a90:	ee25 7b07 	vmul.f64	d7, d5, d7
	           289211.783328 * c_J_inv_tmp_tmp * J_inv_tmp * e_J_inv_tmp_tmp * d) -
 8003a94:	ee36 6b47 	vsub.f64	d6, d6, d7
	         d13 * d1) -
 8003a98:	ed97 5b48 	vldr	d5, [r7, #288]	; 0x120
 8003a9c:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003aa0:	ee25 7b07 	vmul.f64	d7, d5, d7
	          e_J_inv_tmp * d) +
 8003aa4:	ee36 6b07 	vadd.f64	d6, d6, d7
	        e_J_inv_tmp * d1));
 8003aa8:	ed97 5b62 	vldr	d5, [r7, #392]	; 0x188
 8003aac:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003ab0:	ee25 7b07 	vmul.f64	d7, d5, d7
	         d13 * d1) -
 8003ab4:	ee36 7b47 	vsub.f64	d7, d6, d7
	      (9.0 *
 8003ab8:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8003abc:	ee27 6b06 	vmul.f64	d6, d7, d6
	           d_J_inv_tmp * b_J_inv_tmp_tmp * d_J_inv_tmp_tmp) /
 8003ac0:	ee88 7b06 	vdiv.f64	d7, d8, d6
	  dv[3] =
 8003ac4:	f107 0310 	add.w	r3, r7, #16
 8003ac8:	ed83 7b06 	vstr	d7, [r3, #24]
	  d = 9.0 * (((((((((((d10 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8003acc:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003ad0:	ee27 6b07 	vmul.f64	d6, d7, d7
 8003ad4:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8003ad8:	ee26 6b07 	vmul.f64	d6, d6, d7
	                       d9 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003adc:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003ae0:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003ae4:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8003ae8:	ee25 7b07 	vmul.f64	d7, d5, d7
	  d = 9.0 * (((((((((((d10 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8003aec:	ee36 6b47 	vsub.f64	d6, d6, d7
	                      d10 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003af0:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003af4:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003af8:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8003afc:	ee25 7b07 	vmul.f64	d7, d5, d7
	                       d9 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003b00:	ee36 6b07 	vadd.f64	d6, d6, d7
	                     d9 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8003b04:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003b08:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003b0c:	ed97 7b50 	vldr	d7, [r7, #320]	; 0x140
 8003b10:	ee25 7b07 	vmul.f64	d7, d5, d7
	                      d10 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003b14:	ee36 6b47 	vsub.f64	d6, d6, d7
	                    d2 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8003b18:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003b1c:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003b20:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8003b24:	ee25 7b07 	vmul.f64	d7, d5, d7
	                     d9 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8003b28:	ee36 6b07 	vadd.f64	d6, d6, d7
	                   d12 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003b2c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003b30:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003b34:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 8003b38:	ee25 7b07 	vmul.f64	d7, d5, d7
	                    d2 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8003b3c:	ee36 6b47 	vsub.f64	d6, d6, d7
	                  d2 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003b40:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003b44:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003b48:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8003b4c:	ee25 7b07 	vmul.f64	d7, d5, d7
	                   d12 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003b50:	ee36 6b07 	vadd.f64	d6, d6, d7
	                 d12 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8003b54:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003b58:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003b5c:	ed97 7b4a 	vldr	d7, [r7, #296]	; 0x128
 8003b60:	ee25 7b07 	vmul.f64	d7, d5, d7
	                  d2 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003b64:	ee36 6b47 	vsub.f64	d6, d6, d7
	                d13 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8003b68:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003b6c:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003b70:	ed97 7b48 	vldr	d7, [r7, #288]	; 0x120
 8003b74:	ee25 7b07 	vmul.f64	d7, d5, d7
	                 d12 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8003b78:	ee36 6b07 	vadd.f64	d6, d6, d7
	               e_J_inv_tmp * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003b7c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003b80:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003b84:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8003b88:	ee25 7b07 	vmul.f64	d7, d5, d7
	                d13 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8003b8c:	ee36 6b47 	vsub.f64	d6, d6, d7
	              d13 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003b90:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003b94:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003b98:	ed97 7b48 	vldr	d7, [r7, #288]	; 0x120
 8003b9c:	ee25 7b07 	vmul.f64	d7, d5, d7
	               e_J_inv_tmp * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8003ba0:	ee36 6b07 	vadd.f64	d6, d6, d7
	             e_J_inv_tmp * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp));
 8003ba4:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003ba8:	ee27 5b07 	vmul.f64	d5, d7, d7
 8003bac:	ed97 7b62 	vldr	d7, [r7, #392]	; 0x188
 8003bb0:	ee25 7b07 	vmul.f64	d7, d5, d7
	              d13 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8003bb4:	ee36 7b47 	vsub.f64	d7, d6, d7
	  d = 9.0 * (((((((((((d10 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8003bb8:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8003bbc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003bc0:	ed87 7b7a 	vstr	d7, [r7, #488]	; 0x1e8
	  d1 = d15 * f_J_inv_tmp_tmp;
 8003bc4:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 8003bc8:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003bcc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003bd0:	ed87 7b60 	vstr	d7, [r7, #384]	; 0x180
	  d2 = d14 * f_J_inv_tmp_tmp;
 8003bd4:	ed97 6b46 	vldr	d6, [r7, #280]	; 0x118
 8003bd8:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8003bdc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003be0:	ed87 7b5e 	vstr	d7, [r7, #376]	; 0x178
	  dv[8] =
	      -(4.0 *
	        (((((((((((((((221663.52 *
	                           sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8003be4:	f107 030c 	add.w	r3, r7, #12
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	3308      	adds	r3, #8
 8003bec:	ed93 6b00 	vldr	d6, [r3]
 8003bf0:	f107 030c 	add.w	r3, r7, #12
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3310      	adds	r3, #16
 8003bf8:	ed93 7b00 	vldr	d7, [r3]
 8003bfc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003c00:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c04:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8003fc8 <IVK+0x2648>
 8003c08:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003c0c:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8003fd0 <IVK+0x2650>
 8003c10:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003c14:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8003fd8 <IVK+0x2658>
 8003c18:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003c1c:	eeb0 0b47 	vmov.f64	d0, d7
 8003c20:	f013 fa72 	bl	8017108 <sin>
 8003c24:	eeb0 7b40 	vmov.f64	d7, d0
	        (((((((((((((((221663.52 *
 8003c28:	ed9f 6bed 	vldr	d6, [pc, #948]	; 8003fe0 <IVK+0x2660>
 8003c2c:	ee27 8b06 	vmul.f64	d8, d7, d6
	                               -0.73665) *
	                           cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003c30:	f107 030c 	add.w	r3, r7, #12
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	3308      	adds	r3, #8
 8003c38:	ed93 6b00 	vldr	d6, [r3]
 8003c3c:	f107 030c 	add.w	r3, r7, #12
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3310      	adds	r3, #16
 8003c44:	ed93 7b00 	vldr	d7, [r3]
 8003c48:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c4c:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8003fc8 <IVK+0x2648>
 8003c50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003c54:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8003fd0 <IVK+0x2650>
 8003c58:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003c5c:	eeb0 0b47 	vmov.f64	d0, d7
 8003c60:	f013 f9fe 	bl	8017060 <cos>
 8003c64:	eeb0 7b40 	vmov.f64	d7, d0
	                               -0.73665) *
 8003c68:	ee28 6b07 	vmul.f64	d6, d8, d7
	                           cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003c6c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003c70:	ee26 8b07 	vmul.f64	d8, d6, d7
	                           d_J_inv_tmp_tmp -
	                       221663.52 *
	                           cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8003c74:	f107 030c 	add.w	r3, r7, #12
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	3308      	adds	r3, #8
 8003c7c:	ed93 6b00 	vldr	d6, [r3]
 8003c80:	f107 030c 	add.w	r3, r7, #12
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3310      	adds	r3, #16
 8003c88:	ed93 7b00 	vldr	d7, [r3]
 8003c8c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003c90:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c94:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 8003fc8 <IVK+0x2648>
 8003c98:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003c9c:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 8003fd0 <IVK+0x2650>
 8003ca0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ca4:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 8003fd8 <IVK+0x2658>
 8003ca8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003cac:	eeb0 0b47 	vmov.f64	d0, d7
 8003cb0:	f013 f9d6 	bl	8017060 <cos>
 8003cb4:	eeb0 7b40 	vmov.f64	d7, d0
	                       221663.52 *
 8003cb8:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8003fe0 <IVK+0x2660>
 8003cbc:	ee27 9b06 	vmul.f64	d9, d7, d6
	                               -0.73665) *
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003cc0:	f107 030c 	add.w	r3, r7, #12
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	ed93 6b00 	vldr	d6, [r3]
 8003ccc:	f107 030c 	add.w	r3, r7, #12
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3310      	adds	r3, #16
 8003cd4:	ed93 7b00 	vldr	d7, [r3]
 8003cd8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003cdc:	ed9f 6bba 	vldr	d6, [pc, #744]	; 8003fc8 <IVK+0x2648>
 8003ce0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003ce4:	ed9f 6bba 	vldr	d6, [pc, #744]	; 8003fd0 <IVK+0x2650>
 8003ce8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003cec:	eeb0 0b47 	vmov.f64	d0, d7
 8003cf0:	f013 fa0a 	bl	8017108 <sin>
 8003cf4:	eeb0 7b40 	vmov.f64	d7, d0
	                               -0.73665) *
 8003cf8:	ee29 6b07 	vmul.f64	d6, d9, d7
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003cfc:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003d00:	ee26 7b07 	vmul.f64	d7, d6, d7
	                           d_J_inv_tmp_tmp -
 8003d04:	ee38 8b47 	vsub.f64	d8, d8, d7
	                           d_J_inv_tmp_tmp) -
	                      2.6029060499520004E+6 *
	                          cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8003d08:	f107 030c 	add.w	r3, r7, #12
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3308      	adds	r3, #8
 8003d10:	ed93 6b00 	vldr	d6, [r3]
 8003d14:	f107 030c 	add.w	r3, r7, #12
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	3310      	adds	r3, #16
 8003d1c:	ed93 7b00 	vldr	d7, [r3]
 8003d20:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003d24:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003d28:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8003fc8 <IVK+0x2648>
 8003d2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003d30:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8003fd0 <IVK+0x2650>
 8003d34:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003d38:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8003fd8 <IVK+0x2658>
 8003d3c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003d40:	eeb0 0b47 	vmov.f64	d0, d7
 8003d44:	f013 f98c 	bl	8017060 <cos>
 8003d48:	eeb0 7b40 	vmov.f64	d7, d0
	                      2.6029060499520004E+6 *
 8003d4c:	ed9f 6ba6 	vldr	d6, [pc, #664]	; 8003fe8 <IVK+0x2668>
 8003d50:	ee27 9b06 	vmul.f64	d9, d7, d6
	                              -0.73665) *
	                          sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003d54:	f107 030c 	add.w	r3, r7, #12
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	3308      	adds	r3, #8
 8003d5c:	ed93 7b00 	vldr	d7, [r3]
 8003d60:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8003fc8 <IVK+0x2648>
 8003d64:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003d68:	eeb0 0b47 	vmov.f64	d0, d7
 8003d6c:	f013 f9cc 	bl	8017108 <sin>
 8003d70:	eeb0 7b40 	vmov.f64	d7, d0
	                              -0.73665) *
 8003d74:	ee29 6b07 	vmul.f64	d6, d9, d7
	                          sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003d78:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003d7c:	ee26 7b07 	vmul.f64	d7, d6, d7
	                           d_J_inv_tmp_tmp) -
 8003d80:	ee38 8b47 	vsub.f64	d8, d8, d7
	                     2.6029060499520004E+6 *
	                         sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8003d84:	f107 030c 	add.w	r3, r7, #12
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	ed93 6b00 	vldr	d6, [r3]
 8003d90:	f107 030c 	add.w	r3, r7, #12
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3310      	adds	r3, #16
 8003d98:	ed93 7b00 	vldr	d7, [r3]
 8003d9c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003da0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003da4:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8003fc8 <IVK+0x2648>
 8003da8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003dac:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8003fd0 <IVK+0x2650>
 8003db0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003db4:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8003fd8 <IVK+0x2658>
 8003db8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003dbc:	eeb0 0b47 	vmov.f64	d0, d7
 8003dc0:	f013 f9a2 	bl	8017108 <sin>
 8003dc4:	eeb0 7b40 	vmov.f64	d7, d0
	                     2.6029060499520004E+6 *
 8003dc8:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8003fe8 <IVK+0x2668>
 8003dcc:	ee27 9b06 	vmul.f64	d9, d7, d6
	                             -0.73665) *
	                         cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003dd0:	f107 030c 	add.w	r3, r7, #12
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	3308      	adds	r3, #8
 8003dd8:	ed93 7b00 	vldr	d7, [r3]
 8003ddc:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8003fc8 <IVK+0x2648>
 8003de0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003de4:	eeb0 0b47 	vmov.f64	d0, d7
 8003de8:	f013 f93a 	bl	8017060 <cos>
 8003dec:	eeb0 7b40 	vmov.f64	d7, d0
	                             -0.73665) *
 8003df0:	ee29 6b07 	vmul.f64	d6, d9, d7
	                         cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003df4:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003df8:	ee26 7b07 	vmul.f64	d7, d6, d7
	                          sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003dfc:	ee38 6b07 	vadd.f64	d6, d8, d7
	                         cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003e00:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 8003e04:	ee36 8b07 	vadd.f64	d8, d6, d7
	                    d1) -
	                   190230.12000000002 *
	                       cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003e08:	f107 030c 	add.w	r3, r7, #12
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	3308      	adds	r3, #8
 8003e10:	ed93 6b00 	vldr	d6, [r3]
 8003e14:	f107 030c 	add.w	r3, r7, #12
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	3310      	adds	r3, #16
 8003e1c:	ed93 7b00 	vldr	d7, [r3]
 8003e20:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e24:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8003fc8 <IVK+0x2648>
 8003e28:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e2c:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8003fd0 <IVK+0x2650>
 8003e30:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003e34:	eeb0 0b47 	vmov.f64	d0, d7
 8003e38:	f013 f912 	bl	8017060 <cos>
 8003e3c:	eeb0 7b40 	vmov.f64	d7, d0
	                   190230.12000000002 *
 8003e40:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8003ff0 <IVK+0x2670>
 8003e44:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003e48:	f107 030c 	add.w	r3, r7, #12
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3308      	adds	r3, #8
 8003e50:	ed93 7b00 	vldr	d7, [r3]
 8003e54:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8003fc8 <IVK+0x2648>
 8003e58:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e5c:	eeb0 0b47 	vmov.f64	d0, d7
 8003e60:	f013 f952 	bl	8017108 <sin>
 8003e64:	eeb0 7b40 	vmov.f64	d7, d0
	                       cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003e68:	ee29 6b07 	vmul.f64	d6, d9, d7
	                       sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003e6c:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003e70:	ee26 7b07 	vmul.f64	d7, d6, d7
	                    d1) -
 8003e74:	ee38 8b47 	vsub.f64	d8, d8, d7
	                  190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003e78:	f107 030c 	add.w	r3, r7, #12
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3308      	adds	r3, #8
 8003e80:	ed93 6b00 	vldr	d6, [r3]
 8003e84:	f107 030c 	add.w	r3, r7, #12
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3310      	adds	r3, #16
 8003e8c:	ed93 7b00 	vldr	d7, [r3]
 8003e90:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e94:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8003fc8 <IVK+0x2648>
 8003e98:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e9c:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8003fd0 <IVK+0x2650>
 8003ea0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003ea4:	eeb0 0b47 	vmov.f64	d0, d7
 8003ea8:	f013 f92e 	bl	8017108 <sin>
 8003eac:	eeb0 7b40 	vmov.f64	d7, d0
 8003eb0:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 8003ff0 <IVK+0x2670>
 8003eb4:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003eb8:	f107 030c 	add.w	r3, r7, #12
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	ed93 7b00 	vldr	d7, [r3]
 8003ec4:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8003fc8 <IVK+0x2648>
 8003ec8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003ecc:	eeb0 0b47 	vmov.f64	d0, d7
 8003ed0:	f013 f8c6 	bl	8017060 <cos>
 8003ed4:	eeb0 7b40 	vmov.f64	d7, d0
	                  190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8003ed8:	ee29 6b07 	vmul.f64	d6, d9, d7
	                      cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003edc:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8003ee0:	ee26 7b07 	vmul.f64	d7, d6, d7
	                       sin(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003ee4:	ee38 6b07 	vadd.f64	d6, d8, d7
	                      cos(q[1] + 1.6845) * d_J_inv_tmp_tmp) +
 8003ee8:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 8003eec:	ee36 8b07 	vadd.f64	d8, d6, d7
	                 d2) +
	                87600.0 *
	                    cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8003ef0:	f107 030c 	add.w	r3, r7, #12
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	ed93 6b00 	vldr	d6, [r3]
 8003efc:	f107 030c 	add.w	r3, r7, #12
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3310      	adds	r3, #16
 8003f04:	ed93 7b00 	vldr	d7, [r3]
 8003f08:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003f0c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003f10:	f107 030c 	add.w	r3, r7, #12
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3318      	adds	r3, #24
 8003f18:	ed93 7b00 	vldr	d7, [r3]
 8003f1c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003f20:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8003fc8 <IVK+0x2648>
 8003f24:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f28:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8003fd0 <IVK+0x2650>
 8003f2c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003f30:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8003fd8 <IVK+0x2658>
 8003f34:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003f38:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8004010 <IVK+0x2690>
 8003f3c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f40:	eeb0 0b47 	vmov.f64	d0, d7
 8003f44:	f013 f88c 	bl	8017060 <cos>
 8003f48:	eeb0 7b40 	vmov.f64	d7, d0
	                87600.0 *
 8003f4c:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8003ff8 <IVK+0x2678>
 8003f50:	ee27 9b06 	vmul.f64	d9, d7, d6
	                         -0.73665) +
	                        1.52205) *
	                    sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8003f54:	f107 030c 	add.w	r3, r7, #12
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3308      	adds	r3, #8
 8003f5c:	ed93 6b00 	vldr	d6, [r3]
 8003f60:	f107 030c 	add.w	r3, r7, #12
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	3310      	adds	r3, #16
 8003f68:	ed93 7b00 	vldr	d7, [r3]
 8003f6c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8003f70:	ee36 6b07 	vadd.f64	d6, d6, d7
 8003f74:	f107 030c 	add.w	r3, r7, #12
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3318      	adds	r3, #24
 8003f7c:	ed93 7b00 	vldr	d7, [r3]
 8003f80:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003f84:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8003fc8 <IVK+0x2648>
 8003f88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003f8c:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8003fd0 <IVK+0x2650>
 8003f90:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003f94:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8003fd8 <IVK+0x2658>
 8003f98:	ee37 7b46 	vsub.f64	d7, d7, d6
 8003f9c:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8004010 <IVK+0x2690>
 8003fa0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003fa4:	eeb0 0b47 	vmov.f64	d0, d7
 8003fa8:	f013 f8ae 	bl	8017108 <sin>
 8003fac:	eeb0 7b40 	vmov.f64	d7, d0
	                        1.52205) *
 8003fb0:	ee29 9b07 	vmul.f64	d9, d9, d7
	                         -0.73665) +
	                        1.52205) *
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 8003fb4:	f107 030c 	add.w	r3, r7, #12
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	3308      	adds	r3, #8
 8003fbc:	ed93 6b00 	vldr	d6, [r3]
 8003fc0:	f107 030c 	add.w	r3, r7, #12
 8003fc4:	e038      	b.n	8004038 <IVK+0x26b8>
 8003fc6:	bf00      	nop
 8003fc8:	45a1cac1 	.word	0x45a1cac1
 8003fcc:	3ffaf3b6 	.word	0x3ffaf3b6
 8003fd0:	39581062 	.word	0x39581062
 8003fd4:	3fecc8b4 	.word	0x3fecc8b4
 8003fd8:	05532618 	.word	0x05532618
 8003fdc:	3fe792a3 	.word	0x3fe792a3
 8003fe0:	28f5c28f 	.word	0x28f5c28f
 8003fe4:	410b0efc 	.word	0x410b0efc
 8003fe8:	0664d3c0 	.word	0x0664d3c0
 8003fec:	4143dbcd 	.word	0x4143dbcd
 8003ff0:	f5c28f5d 	.word	0xf5c28f5d
 8003ff4:	410738b0 	.word	0x410738b0
 8003ff8:	00000000 	.word	0x00000000
 8003ffc:	40f56300 	.word	0x40f56300
 8004000:	851eb852 	.word	0x851eb852
 8004004:	412f6457 	.word	0x412f6457
 8004008:	66666666 	.word	0x66666666
 800400c:	410e10a6 	.word	0x410e10a6
 8004010:	19ce075f 	.word	0x19ce075f
 8004014:	3ff85a51 	.word	0x3ff85a51
 8004018:	eaa8eb47 	.word	0xeaa8eb47
 800401c:	414610aa 	.word	0x414610aa
 8004020:	45a1cac1 	.word	0x45a1cac1
 8004024:	3ffaf3b6 	.word	0x3ffaf3b6
 8004028:	39581062 	.word	0x39581062
 800402c:	3fecc8b4 	.word	0x3fecc8b4
 8004030:	05532618 	.word	0x05532618
 8004034:	3fe792a3 	.word	0x3fe792a3
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3310      	adds	r3, #16
 800403c:	ed93 7b00 	vldr	d7, [r3]
 8004040:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004044:	ed1f 6b0a 	vldr	d6, [pc, #-40]	; 8004020 <IVK+0x26a0>
 8004048:	ee37 7b06 	vadd.f64	d7, d7, d6
 800404c:	ed1f 6b0a 	vldr	d6, [pc, #-40]	; 8004028 <IVK+0x26a8>
 8004050:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004054:	eeb0 0b47 	vmov.f64	d0, d7
 8004058:	f013 f802 	bl	8017060 <cos>
 800405c:	eeb0 7b40 	vmov.f64	d7, d0
	                        1.52205) *
 8004060:	ee29 6b07 	vmul.f64	d6, d9, d7
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 8004064:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8004068:	ee26 7b07 	vmul.f64	d7, d6, d7
	                 d2) +
 800406c:	ee38 8b07 	vadd.f64	d8, d8, d7
	               1.02865176E+6 *
	                   cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004070:	f107 030c 	add.w	r3, r7, #12
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3308      	adds	r3, #8
 8004078:	ed93 6b00 	vldr	d6, [r3]
 800407c:	f107 030c 	add.w	r3, r7, #12
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	3310      	adds	r3, #16
 8004084:	ed93 7b00 	vldr	d7, [r3]
 8004088:	ee37 7b07 	vadd.f64	d7, d7, d7
 800408c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004090:	f107 030c 	add.w	r3, r7, #12
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3318      	adds	r3, #24
 8004098:	ed93 7b00 	vldr	d7, [r3]
 800409c:	ee36 7b07 	vadd.f64	d7, d6, d7
 80040a0:	ed1f 6b21 	vldr	d6, [pc, #-132]	; 8004020 <IVK+0x26a0>
 80040a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80040a8:	ed1f 6b21 	vldr	d6, [pc, #-132]	; 8004028 <IVK+0x26a8>
 80040ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 80040b0:	ed1f 6b21 	vldr	d6, [pc, #-132]	; 8004030 <IVK+0x26b0>
 80040b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80040b8:	ed1f 6b2b 	vldr	d6, [pc, #-172]	; 8004010 <IVK+0x2690>
 80040bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80040c0:	eeb0 0b47 	vmov.f64	d0, d7
 80040c4:	f012 ffcc 	bl	8017060 <cos>
 80040c8:	eeb0 7b40 	vmov.f64	d7, d0
	               1.02865176E+6 *
 80040cc:	ed1f 6b34 	vldr	d6, [pc, #-208]	; 8004000 <IVK+0x2680>
 80040d0:	ee27 9b06 	vmul.f64	d9, d7, d6
	                        -0.73665) +
	                       1.52205) *
	                   sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80040d4:	f107 030c 	add.w	r3, r7, #12
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3308      	adds	r3, #8
 80040dc:	ed93 6b00 	vldr	d6, [r3]
 80040e0:	f107 030c 	add.w	r3, r7, #12
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3310      	adds	r3, #16
 80040e8:	ed93 7b00 	vldr	d7, [r3]
 80040ec:	ee37 7b07 	vadd.f64	d7, d7, d7
 80040f0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80040f4:	f107 030c 	add.w	r3, r7, #12
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3318      	adds	r3, #24
 80040fc:	ed93 7b00 	vldr	d7, [r3]
 8004100:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004104:	ed1f 6b3a 	vldr	d6, [pc, #-232]	; 8004020 <IVK+0x26a0>
 8004108:	ee37 7b06 	vadd.f64	d7, d7, d6
 800410c:	ed1f 6b3a 	vldr	d6, [pc, #-232]	; 8004028 <IVK+0x26a8>
 8004110:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004114:	ed1f 6b3a 	vldr	d6, [pc, #-232]	; 8004030 <IVK+0x26b0>
 8004118:	ee37 7b46 	vsub.f64	d7, d7, d6
 800411c:	ed1f 6b44 	vldr	d6, [pc, #-272]	; 8004010 <IVK+0x2690>
 8004120:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004124:	eeb0 0b47 	vmov.f64	d0, d7
 8004128:	f012 ffee 	bl	8017108 <sin>
 800412c:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 8004130:	ee29 9b07 	vmul.f64	d9, d9, d7
	                        -0.73665) +
	                       1.52205) *
	                   cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 8004134:	f107 030c 	add.w	r3, r7, #12
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3308      	adds	r3, #8
 800413c:	ed93 7b00 	vldr	d7, [r3]
 8004140:	ed1f 6b49 	vldr	d6, [pc, #-292]	; 8004020 <IVK+0x26a0>
 8004144:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004148:	eeb0 0b47 	vmov.f64	d0, d7
 800414c:	f012 ff88 	bl	8017060 <cos>
 8004150:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 8004154:	ee29 6b07 	vmul.f64	d6, d9, d7
	                   cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 8004158:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800415c:	ee26 7b07 	vmul.f64	d7, d6, d7
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 8004160:	ee38 8b07 	vadd.f64	d8, d8, d7
	              246292.8 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004164:	f107 030c 	add.w	r3, r7, #12
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3308      	adds	r3, #8
 800416c:	ed93 6b00 	vldr	d6, [r3]
 8004170:	f107 030c 	add.w	r3, r7, #12
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3310      	adds	r3, #16
 8004178:	ed93 7b00 	vldr	d7, [r3]
 800417c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004180:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004184:	f107 030c 	add.w	r3, r7, #12
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3318      	adds	r3, #24
 800418c:	ed93 7b00 	vldr	d7, [r3]
 8004190:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004194:	ed1f 6b5e 	vldr	d6, [pc, #-376]	; 8004020 <IVK+0x26a0>
 8004198:	ee37 7b06 	vadd.f64	d7, d7, d6
 800419c:	ed1f 6b5e 	vldr	d6, [pc, #-376]	; 8004028 <IVK+0x26a8>
 80041a0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80041a4:	ed1f 6b5e 	vldr	d6, [pc, #-376]	; 8004030 <IVK+0x26b0>
 80041a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80041ac:	ed1f 6b68 	vldr	d6, [pc, #-416]	; 8004010 <IVK+0x2690>
 80041b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80041b4:	eeb0 0b47 	vmov.f64	d0, d7
 80041b8:	f012 ffa6 	bl	8017108 <sin>
 80041bc:	eeb0 7b40 	vmov.f64	d7, d0
	              246292.8 *
 80041c0:	ed1f 6b6f 	vldr	d6, [pc, #-444]	; 8004008 <IVK+0x2688>
 80041c4:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80041c8:	f107 030c 	add.w	r3, r7, #12
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3308      	adds	r3, #8
 80041d0:	ed93 6b00 	vldr	d6, [r3]
 80041d4:	f107 030c 	add.w	r3, r7, #12
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3310      	adds	r3, #16
 80041dc:	ed93 7b00 	vldr	d7, [r3]
 80041e0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80041e4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80041e8:	ed1f 6b73 	vldr	d6, [pc, #-460]	; 8004020 <IVK+0x26a0>
 80041ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80041f0:	ed1f 6b73 	vldr	d6, [pc, #-460]	; 8004028 <IVK+0x26a8>
 80041f4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80041f8:	ed1f 6b73 	vldr	d6, [pc, #-460]	; 8004030 <IVK+0x26b0>
 80041fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004200:	eeb0 0b47 	vmov.f64	d0, d7
 8004204:	f012 ff2c 	bl	8017060 <cos>
 8004208:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 800420c:	ee29 9b07 	vmul.f64	d9, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) -
 8004210:	f107 030c 	add.w	r3, r7, #12
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3308      	adds	r3, #8
 8004218:	ed93 6b00 	vldr	d6, [r3]
 800421c:	f107 030c 	add.w	r3, r7, #12
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3310      	adds	r3, #16
 8004224:	ed93 7b00 	vldr	d7, [r3]
 8004228:	ee36 7b07 	vadd.f64	d7, d6, d7
 800422c:	ed1f 6b84 	vldr	d6, [pc, #-528]	; 8004020 <IVK+0x26a0>
 8004230:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004234:	ed1f 6b84 	vldr	d6, [pc, #-528]	; 8004028 <IVK+0x26a8>
 8004238:	ee37 7b46 	vsub.f64	d7, d7, d6
 800423c:	eeb0 0b47 	vmov.f64	d0, d7
 8004240:	f012 ff62 	bl	8017108 <sin>
 8004244:	eeb0 7b40 	vmov.f64	d7, d0
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004248:	ee29 6b07 	vmul.f64	d6, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) -
 800424c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8004250:	ee26 7b07 	vmul.f64	d7, d6, d7
	                   cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 8004254:	ee38 8b07 	vadd.f64	d8, d8, d7
	             246292.8 *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004258:	f107 030c 	add.w	r3, r7, #12
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3308      	adds	r3, #8
 8004260:	ed93 6b00 	vldr	d6, [r3]
 8004264:	f107 030c 	add.w	r3, r7, #12
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3310      	adds	r3, #16
 800426c:	ed93 7b00 	vldr	d7, [r3]
 8004270:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004274:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004278:	f107 030c 	add.w	r3, r7, #12
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3318      	adds	r3, #24
 8004280:	ed93 7b00 	vldr	d7, [r3]
 8004284:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004288:	ed1f 6b9b 	vldr	d6, [pc, #-620]	; 8004020 <IVK+0x26a0>
 800428c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004290:	ed1f 6b9b 	vldr	d6, [pc, #-620]	; 8004028 <IVK+0x26a8>
 8004294:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004298:	ed1f 6b9b 	vldr	d6, [pc, #-620]	; 8004030 <IVK+0x26b0>
 800429c:	ee37 7b46 	vsub.f64	d7, d7, d6
 80042a0:	ed1f 6ba5 	vldr	d6, [pc, #-660]	; 8004010 <IVK+0x2690>
 80042a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80042a8:	eeb0 0b47 	vmov.f64	d0, d7
 80042ac:	f012 ff2c 	bl	8017108 <sin>
 80042b0:	eeb0 7b40 	vmov.f64	d7, d0
	             246292.8 *
 80042b4:	ed1f 6bac 	vldr	d6, [pc, #-688]	; 8004008 <IVK+0x2688>
 80042b8:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      -0.73665) +
	                     1.52205) *
	                 sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80042bc:	f107 030c 	add.w	r3, r7, #12
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	3308      	adds	r3, #8
 80042c4:	ed93 6b00 	vldr	d6, [r3]
 80042c8:	f107 030c 	add.w	r3, r7, #12
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3310      	adds	r3, #16
 80042d0:	ed93 7b00 	vldr	d7, [r3]
 80042d4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80042d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80042dc:	ed1f 6bb0 	vldr	d6, [pc, #-704]	; 8004020 <IVK+0x26a0>
 80042e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80042e4:	ed1f 6bb0 	vldr	d6, [pc, #-704]	; 8004028 <IVK+0x26a8>
 80042e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80042ec:	ed1f 6bb0 	vldr	d6, [pc, #-704]	; 8004030 <IVK+0x26b0>
 80042f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80042f4:	eeb0 0b47 	vmov.f64	d0, d7
 80042f8:	f012 ff06 	bl	8017108 <sin>
 80042fc:	eeb0 7b40 	vmov.f64	d7, d0
	                     1.52205) *
 8004300:	ee29 9b07 	vmul.f64	d9, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 8004304:	f107 030c 	add.w	r3, r7, #12
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	3308      	adds	r3, #8
 800430c:	ed93 6b00 	vldr	d6, [r3]
 8004310:	f107 030c 	add.w	r3, r7, #12
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3310      	adds	r3, #16
 8004318:	ed93 7b00 	vldr	d7, [r3]
 800431c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004320:	ed1f 6bc1 	vldr	d6, [pc, #-772]	; 8004020 <IVK+0x26a0>
 8004324:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004328:	ed1f 6bc1 	vldr	d6, [pc, #-772]	; 8004028 <IVK+0x26a8>
 800432c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004330:	eeb0 0b47 	vmov.f64	d0, d7
 8004334:	f012 fe94 	bl	8017060 <cos>
 8004338:	eeb0 7b40 	vmov.f64	d7, d0
	                 sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800433c:	ee29 6b07 	vmul.f64	d6, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 8004340:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8004344:	ee26 7b07 	vmul.f64	d7, d6, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) -
 8004348:	ee38 8b47 	vsub.f64	d8, d8, d7
	            2.8921178332800004E+6 *
	                sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800434c:	f107 030c 	add.w	r3, r7, #12
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3308      	adds	r3, #8
 8004354:	ed93 6b00 	vldr	d6, [r3]
 8004358:	f107 030c 	add.w	r3, r7, #12
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3310      	adds	r3, #16
 8004360:	ed93 7b00 	vldr	d7, [r3]
 8004364:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004368:	ee36 6b07 	vadd.f64	d6, d6, d7
 800436c:	f107 030c 	add.w	r3, r7, #12
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3318      	adds	r3, #24
 8004374:	ed93 7b00 	vldr	d7, [r3]
 8004378:	ee36 7b07 	vadd.f64	d7, d6, d7
 800437c:	ed1f 6bd8 	vldr	d6, [pc, #-864]	; 8004020 <IVK+0x26a0>
 8004380:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004384:	ed1f 6bd8 	vldr	d6, [pc, #-864]	; 8004028 <IVK+0x26a8>
 8004388:	ee37 7b46 	vsub.f64	d7, d7, d6
 800438c:	ed1f 6bd8 	vldr	d6, [pc, #-864]	; 8004030 <IVK+0x26b0>
 8004390:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004394:	ed1f 6be2 	vldr	d6, [pc, #-904]	; 8004010 <IVK+0x2690>
 8004398:	ee37 7b06 	vadd.f64	d7, d7, d6
 800439c:	eeb0 0b47 	vmov.f64	d0, d7
 80043a0:	f012 feb2 	bl	8017108 <sin>
 80043a4:	eeb0 7b40 	vmov.f64	d7, d0
	            2.8921178332800004E+6 *
 80043a8:	ed1f 6be5 	vldr	d6, [pc, #-916]	; 8004018 <IVK+0x2698>
 80043ac:	ee27 9b06 	vmul.f64	d9, d7, d6
	                     -0.73665) +
	                    1.52205) *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80043b0:	f107 030c 	add.w	r3, r7, #12
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	3308      	adds	r3, #8
 80043b8:	ed93 6b00 	vldr	d6, [r3]
 80043bc:	f107 030c 	add.w	r3, r7, #12
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	3310      	adds	r3, #16
 80043c4:	ed93 7b00 	vldr	d7, [r3]
 80043c8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80043cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80043d0:	ed1f 6bed 	vldr	d6, [pc, #-948]	; 8004020 <IVK+0x26a0>
 80043d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80043d8:	ed1f 6bed 	vldr	d6, [pc, #-948]	; 8004028 <IVK+0x26a8>
 80043dc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80043e0:	ed1f 6bed 	vldr	d6, [pc, #-948]	; 8004030 <IVK+0x26b0>
 80043e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80043e8:	eeb0 0b47 	vmov.f64	d0, d7
 80043ec:	f012 fe38 	bl	8017060 <cos>
 80043f0:	eeb0 7b40 	vmov.f64	d7, d0
	                    1.52205) *
 80043f4:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(q[1] + 1.6845) * f_J_inv_tmp_tmp) -
 80043f8:	f107 030c 	add.w	r3, r7, #12
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	3308      	adds	r3, #8
 8004400:	ed93 7b00 	vldr	d7, [r3]
 8004404:	ed9f 6bee 	vldr	d6, [pc, #952]	; 80047c0 <IVK+0x2e40>
 8004408:	ee37 7b06 	vadd.f64	d7, d7, d6
 800440c:	eeb0 0b47 	vmov.f64	d0, d7
 8004410:	f012 fe7a 	bl	8017108 <sin>
 8004414:	eeb0 7b40 	vmov.f64	d7, d0
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004418:	ee29 6b07 	vmul.f64	d6, d9, d7
	                sin(q[1] + 1.6845) * f_J_inv_tmp_tmp) -
 800441c:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8004420:	ee26 7b07 	vmul.f64	d7, d6, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * f_J_inv_tmp_tmp) +
 8004424:	ee38 8b07 	vadd.f64	d8, d8, d7
	           2.8921178332800004E+6 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004428:	f107 030c 	add.w	r3, r7, #12
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3308      	adds	r3, #8
 8004430:	ed93 6b00 	vldr	d6, [r3]
 8004434:	f107 030c 	add.w	r3, r7, #12
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3310      	adds	r3, #16
 800443c:	ed93 7b00 	vldr	d7, [r3]
 8004440:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004444:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004448:	f107 030c 	add.w	r3, r7, #12
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3318      	adds	r3, #24
 8004450:	ed93 7b00 	vldr	d7, [r3]
 8004454:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004458:	ed9f 6bd9 	vldr	d6, [pc, #868]	; 80047c0 <IVK+0x2e40>
 800445c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004460:	ed9f 6bed 	vldr	d6, [pc, #948]	; 8004818 <IVK+0x2e98>
 8004464:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004468:	ed9f 6be5 	vldr	d6, [pc, #916]	; 8004800 <IVK+0x2e80>
 800446c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004470:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 80047c8 <IVK+0x2e48>
 8004474:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004478:	eeb0 0b47 	vmov.f64	d0, d7
 800447c:	f012 fe44 	bl	8017108 <sin>
 8004480:	eeb0 7b40 	vmov.f64	d7, d0
	           2.8921178332800004E+6 *
 8004484:	ed9f 6bd2 	vldr	d6, [pc, #840]	; 80047d0 <IVK+0x2e50>
 8004488:	ee27 9b06 	vmul.f64	d9, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800448c:	f107 030c 	add.w	r3, r7, #12
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3308      	adds	r3, #8
 8004494:	ed93 6b00 	vldr	d6, [r3]
 8004498:	f107 030c 	add.w	r3, r7, #12
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	3310      	adds	r3, #16
 80044a0:	ed93 7b00 	vldr	d7, [r3]
 80044a4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80044a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80044ac:	ed9f 6bc4 	vldr	d6, [pc, #784]	; 80047c0 <IVK+0x2e40>
 80044b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80044b4:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 8004818 <IVK+0x2e98>
 80044b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80044bc:	ed9f 6bd0 	vldr	d6, [pc, #832]	; 8004800 <IVK+0x2e80>
 80044c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80044c4:	eeb0 0b47 	vmov.f64	d0, d7
 80044c8:	f012 fe1e 	bl	8017108 <sin>
 80044cc:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 80044d0:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 80044d4:	f107 030c 	add.w	r3, r7, #12
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3308      	adds	r3, #8
 80044dc:	ed93 7b00 	vldr	d7, [r3]
 80044e0:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 80047c0 <IVK+0x2e40>
 80044e4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80044e8:	eeb0 0b47 	vmov.f64	d0, d7
 80044ec:	f012 fdb8 	bl	8017060 <cos>
 80044f0:	eeb0 7b40 	vmov.f64	d7, d0
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 80044f4:	ee29 6b07 	vmul.f64	d6, d9, d7
	               cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 80044f8:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80044fc:	ee26 7b07 	vmul.f64	d7, d6, d7
	                sin(q[1] + 1.6845) * f_J_inv_tmp_tmp) -
 8004500:	ee38 8b47 	vsub.f64	d8, d8, d7
	          211366.80000000002 *
	              sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004504:	f107 030c 	add.w	r3, r7, #12
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3308      	adds	r3, #8
 800450c:	ed93 6b00 	vldr	d6, [r3]
 8004510:	f107 030c 	add.w	r3, r7, #12
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3310      	adds	r3, #16
 8004518:	ed93 7b00 	vldr	d7, [r3]
 800451c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004520:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004524:	f107 030c 	add.w	r3, r7, #12
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3318      	adds	r3, #24
 800452c:	ed93 7b00 	vldr	d7, [r3]
 8004530:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004534:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 80047c0 <IVK+0x2e40>
 8004538:	ee37 7b06 	vadd.f64	d7, d7, d6
 800453c:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8004818 <IVK+0x2e98>
 8004540:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004544:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8004800 <IVK+0x2e80>
 8004548:	ee37 7b46 	vsub.f64	d7, d7, d6
 800454c:	ed9f 6b9e 	vldr	d6, [pc, #632]	; 80047c8 <IVK+0x2e48>
 8004550:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004554:	eeb0 0b47 	vmov.f64	d0, d7
 8004558:	f012 fdd6 	bl	8017108 <sin>
 800455c:	eeb0 7b40 	vmov.f64	d7, d0
	          211366.80000000002 *
 8004560:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 80047d8 <IVK+0x2e58>
 8004564:	ee27 9b06 	vmul.f64	d9, d7, d6
	                   -0.73665) +
	                  1.52205) *
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8004568:	f107 030c 	add.w	r3, r7, #12
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3308      	adds	r3, #8
 8004570:	ed93 6b00 	vldr	d6, [r3]
 8004574:	f107 030c 	add.w	r3, r7, #12
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3310      	adds	r3, #16
 800457c:	ed93 7b00 	vldr	d7, [r3]
 8004580:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004584:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 80047c0 <IVK+0x2e40>
 8004588:	ee37 7b06 	vadd.f64	d7, d7, d6
 800458c:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8004818 <IVK+0x2e98>
 8004590:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004594:	eeb0 0b47 	vmov.f64	d0, d7
 8004598:	f012 fd62 	bl	8017060 <cos>
 800459c:	eeb0 7b40 	vmov.f64	d7, d0
	                  1.52205) *
 80045a0:	ee29 9b07 	vmul.f64	d9, d9, d7
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 80045a4:	f107 030c 	add.w	r3, r7, #12
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3308      	adds	r3, #8
 80045ac:	ed93 7b00 	vldr	d7, [r3]
 80045b0:	ed9f 6b83 	vldr	d6, [pc, #524]	; 80047c0 <IVK+0x2e40>
 80045b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80045b8:	eeb0 0b47 	vmov.f64	d0, d7
 80045bc:	f012 fda4 	bl	8017108 <sin>
 80045c0:	eeb0 7b40 	vmov.f64	d7, d0
 80045c4:	ee29 6b07 	vmul.f64	d6, d9, d7
 80045c8:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80045cc:	ee26 7b07 	vmul.f64	d7, d6, d7
	               cos(q[1] + 1.6845) * f_J_inv_tmp_tmp) +
 80045d0:	ee38 8b07 	vadd.f64	d8, d8, d7
	              f_J_inv_tmp_tmp) -
	         211366.80000000002 *
	             sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80045d4:	f107 030c 	add.w	r3, r7, #12
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3308      	adds	r3, #8
 80045dc:	ed93 6b00 	vldr	d6, [r3]
 80045e0:	f107 030c 	add.w	r3, r7, #12
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	3310      	adds	r3, #16
 80045e8:	ed93 7b00 	vldr	d7, [r3]
 80045ec:	ee37 7b07 	vadd.f64	d7, d7, d7
 80045f0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80045f4:	f107 030c 	add.w	r3, r7, #12
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3318      	adds	r3, #24
 80045fc:	ed93 7b00 	vldr	d7, [r3]
 8004600:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004604:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 80047c0 <IVK+0x2e40>
 8004608:	ee37 7b06 	vadd.f64	d7, d7, d6
 800460c:	ed9f 6b82 	vldr	d6, [pc, #520]	; 8004818 <IVK+0x2e98>
 8004610:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004614:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8004800 <IVK+0x2e80>
 8004618:	ee37 7b46 	vsub.f64	d7, d7, d6
 800461c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 80047c8 <IVK+0x2e48>
 8004620:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004624:	eeb0 0b47 	vmov.f64	d0, d7
 8004628:	f012 fd6e 	bl	8017108 <sin>
 800462c:	eeb0 7b40 	vmov.f64	d7, d0
	         211366.80000000002 *
 8004630:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80047d8 <IVK+0x2e58>
 8004634:	ee27 9b06 	vmul.f64	d9, d7, d6
	                  -0.73665) +
	                 1.52205) *
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8004638:	f107 030c 	add.w	r3, r7, #12
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	3308      	adds	r3, #8
 8004640:	ed93 6b00 	vldr	d6, [r3]
 8004644:	f107 030c 	add.w	r3, r7, #12
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	3310      	adds	r3, #16
 800464c:	ed93 7b00 	vldr	d7, [r3]
 8004650:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004654:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 80047c0 <IVK+0x2e40>
 8004658:	ee37 7b06 	vadd.f64	d7, d7, d6
 800465c:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8004818 <IVK+0x2e98>
 8004660:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004664:	eeb0 0b47 	vmov.f64	d0, d7
 8004668:	f012 fd4e 	bl	8017108 <sin>
 800466c:	eeb0 7b40 	vmov.f64	d7, d0
	                 1.52205) *
 8004670:	ee29 9b07 	vmul.f64	d9, d9, d7
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8004674:	f107 030c 	add.w	r3, r7, #12
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3308      	adds	r3, #8
 800467c:	ed93 7b00 	vldr	d7, [r3]
 8004680:	ed9f 6b4f 	vldr	d6, [pc, #316]	; 80047c0 <IVK+0x2e40>
 8004684:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004688:	eeb0 0b47 	vmov.f64	d0, d7
 800468c:	f012 fce8 	bl	8017060 <cos>
 8004690:	eeb0 7b40 	vmov.f64	d7, d0
 8004694:	ee29 6b07 	vmul.f64	d6, d9, d7
 8004698:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800469c:	ee26 7b07 	vmul.f64	d7, d6, d7
	              f_J_inv_tmp_tmp) -
 80046a0:	ee38 7b47 	vsub.f64	d7, d8, d7
	      -(4.0 *
 80046a4:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80046a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80046ac:	eeb1 5b47 	vneg.f64	d5, d7
	             f_J_inv_tmp_tmp)) /
 80046b0:	ed97 6b7a 	vldr	d6, [r7, #488]	; 0x1e8
 80046b4:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[8] =
 80046b8:	f107 0310 	add.w	r3, r7, #16
 80046bc:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	      d;
	  d9 = 9.0 * d11;
 80046c0:	ed97 7b4c 	vldr	d7, [r7, #304]	; 0x130
 80046c4:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 80046c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80046cc:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
	  dv[13] = -(40.0 * f_J_inv_tmp_tmp *
 80046d0:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80046d4:	ed9f 6b46 	vldr	d6, [pc, #280]	; 80047f0 <IVK+0x2e70>
 80046d8:	ee27 8b06 	vmul.f64	d8, d7, d6
	             (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) +
 80046dc:	f107 030c 	add.w	r3, r7, #12
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3308      	adds	r3, #8
 80046e4:	ed93 6b00 	vldr	d6, [r3]
 80046e8:	f107 030c 	add.w	r3, r7, #12
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3310      	adds	r3, #16
 80046f0:	ed93 7b00 	vldr	d7, [r3]
 80046f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80046f8:	ed9f 6b31 	vldr	d6, [pc, #196]	; 80047c0 <IVK+0x2e40>
 80046fc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004700:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8004818 <IVK+0x2e98>
 8004704:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004708:	eeb0 0b47 	vmov.f64	d0, d7
 800470c:	f012 fca8 	bl	8017060 <cos>
 8004710:	eeb0 7b40 	vmov.f64	d7, d0
 8004714:	ed9f 6b32 	vldr	d6, [pc, #200]	; 80047e0 <IVK+0x2e60>
 8004718:	ee27 6b06 	vmul.f64	d6, d7, d6
	              704.556 * b_J_inv_tmp_tmp)) /
 800471c:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8004720:	ed9f 5b31 	vldr	d5, [pc, #196]	; 80047e8 <IVK+0x2e68>
 8004724:	ee27 7b05 	vmul.f64	d7, d7, d5
	             (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8004728:	ee36 7b07 	vadd.f64	d7, d6, d7
	  dv[13] = -(40.0 * f_J_inv_tmp_tmp *
 800472c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8004730:	eeb1 5b47 	vneg.f64	d5, d7
	              704.556 * b_J_inv_tmp_tmp)) /
 8004734:	ed97 6b50 	vldr	d6, [r7, #320]	; 0x140
 8004738:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[13] = -(40.0 * f_J_inv_tmp_tmp *
 800473c:	f107 0310 	add.w	r3, r7, #16
 8004740:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
	           d9;
	  dv[18] =
	      -(40.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 8004744:	f107 030c 	add.w	r3, r7, #12
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	3308      	adds	r3, #8
 800474c:	ed93 6b00 	vldr	d6, [r3]
 8004750:	f107 030c 	add.w	r3, r7, #12
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	3310      	adds	r3, #16
 8004758:	ed93 7b00 	vldr	d7, [r3]
 800475c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004760:	ed9f 6b17 	vldr	d6, [pc, #92]	; 80047c0 <IVK+0x2e40>
 8004764:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004768:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 8004818 <IVK+0x2e98>
 800476c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004770:	eeb0 0b47 	vmov.f64	d0, d7
 8004774:	f012 fc74 	bl	8017060 <cos>
 8004778:	eeb0 7b40 	vmov.f64	d7, d0
 800477c:	ed9f 6b18 	vldr	d6, [pc, #96]	; 80047e0 <IVK+0x2e60>
 8004780:	ee27 8b06 	vmul.f64	d8, d7, d6
 8004784:	f107 030c 	add.w	r3, r7, #12
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	ed93 7b00 	vldr	d7, [r3]
 800478e:	eeb0 0b47 	vmov.f64	d0, d7
 8004792:	f012 fcb9 	bl	8017108 <sin>
 8004796:	eeb0 7b40 	vmov.f64	d7, d0
 800479a:	ee28 8b07 	vmul.f64	d8, d8, d7
	                704.556 * cos(q[1] + 1.6845) * d_J_inv_tmp_tmp)) /
 800479e:	f107 030c 	add.w	r3, r7, #12
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3308      	adds	r3, #8
 80047a6:	ed93 7b00 	vldr	d7, [r3]
 80047aa:	ed9f 6b05 	vldr	d6, [pc, #20]	; 80047c0 <IVK+0x2e40>
 80047ae:	ee37 7b06 	vadd.f64	d7, d7, d6
 80047b2:	eeb0 0b47 	vmov.f64	d0, d7
 80047b6:	f012 fc53 	bl	8017060 <cos>
 80047ba:	eeb0 7b40 	vmov.f64	d7, d0
 80047be:	e033      	b.n	8004828 <IVK+0x2ea8>
 80047c0:	45a1cac1 	.word	0x45a1cac1
 80047c4:	3ffaf3b6 	.word	0x3ffaf3b6
 80047c8:	19ce075f 	.word	0x19ce075f
 80047cc:	3ff85a51 	.word	0x3ff85a51
 80047d0:	eaa8eb47 	.word	0xeaa8eb47
 80047d4:	414610aa 	.word	0x414610aa
 80047d8:	66666667 	.word	0x66666667
 80047dc:	4109cd36 	.word	0x4109cd36
 80047e0:	00000000 	.word	0x00000000
 80047e4:	404e0000 	.word	0x404e0000
 80047e8:	b020c49c 	.word	0xb020c49c
 80047ec:	40860472 	.word	0x40860472
 80047f0:	00000000 	.word	0x00000000
 80047f4:	40440000 	.word	0x40440000
 80047f8:	28f5c28f 	.word	0x28f5c28f
 80047fc:	410b0efc 	.word	0x410b0efc
 8004800:	05532618 	.word	0x05532618
 8004804:	3fe792a3 	.word	0x3fe792a3
 8004808:	0664d3c0 	.word	0x0664d3c0
 800480c:	4143dbcd 	.word	0x4143dbcd
 8004810:	45a1cac1 	.word	0x45a1cac1
 8004814:	3ffaf3b6 	.word	0x3ffaf3b6
 8004818:	39581062 	.word	0x39581062
 800481c:	3fecc8b4 	.word	0x3fecc8b4
 8004820:	f5c28f5d 	.word	0xf5c28f5d
 8004824:	410738b0 	.word	0x410738b0
 8004828:	ed1f 6b11 	vldr	d6, [pc, #-68]	; 80047e8 <IVK+0x2e68>
 800482c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004830:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8004834:	ee26 7b07 	vmul.f64	d7, d6, d7
	      -(40.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 8004838:	ee38 7b07 	vadd.f64	d7, d8, d7
 800483c:	ed1f 6b14 	vldr	d6, [pc, #-80]	; 80047f0 <IVK+0x2e70>
 8004840:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004844:	eeb1 5b47 	vneg.f64	d5, d7
	                704.556 * cos(q[1] + 1.6845) * d_J_inv_tmp_tmp)) /
 8004848:	ed97 6b50 	vldr	d6, [r7, #320]	; 0x140
 800484c:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[18] =
 8004850:	f107 0310 	add.w	r3, r7, #16
 8004854:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
	      d9;
	  dv[23] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8004858:	f107 030c 	add.w	r3, r7, #12
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3308      	adds	r3, #8
 8004860:	ed93 6b00 	vldr	d6, [r3]
 8004864:	f107 030c 	add.w	r3, r7, #12
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3310      	adds	r3, #16
 800486c:	ed93 7b00 	vldr	d7, [r3]
 8004870:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004874:	ed1f 6b1a 	vldr	d6, [pc, #-104]	; 8004810 <IVK+0x2e90>
 8004878:	ee37 7b06 	vadd.f64	d7, d7, d6
 800487c:	ed1f 6b1a 	vldr	d6, [pc, #-104]	; 8004818 <IVK+0x2e98>
 8004880:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004884:	eeb0 0b47 	vmov.f64	d0, d7
 8004888:	f012 fc3e 	bl	8017108 <sin>
 800488c:	eeb0 7b40 	vmov.f64	d7, d0
 8004890:	ed1f 6b2d 	vldr	d6, [pc, #-180]	; 80047e0 <IVK+0x2e60>
 8004894:	ee27 6b06 	vmul.f64	d6, d7, d6
	                     704.556 * e_J_inv_tmp_tmp)) /
 8004898:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 800489c:	ed1f 5b2e 	vldr	d5, [pc, #-184]	; 80047e8 <IVK+0x2e68>
 80048a0:	ee27 7b05 	vmul.f64	d7, d7, d5
	  dv[23] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 80048a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80048a8:	ed1f 6b2f 	vldr	d6, [pc, #-188]	; 80047f0 <IVK+0x2e70>
 80048ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80048b0:	eeb1 5b47 	vneg.f64	d5, d7
	                     704.556 * e_J_inv_tmp_tmp)) /
 80048b4:	ed97 6b50 	vldr	d6, [r7, #320]	; 0x140
 80048b8:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[23] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 80048bc:	f107 0310 	add.w	r3, r7, #16
 80048c0:	ed83 7b2e 	vstr	d7, [r3, #184]	; 0xb8
	           d9;
	  dv[4] =
	      4.0 *
	      (((((((((((((((221663.52 *
	                         sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 80048c4:	f107 030c 	add.w	r3, r7, #12
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3308      	adds	r3, #8
 80048cc:	ed93 6b00 	vldr	d6, [r3]
 80048d0:	f107 030c 	add.w	r3, r7, #12
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3310      	adds	r3, #16
 80048d8:	ed93 7b00 	vldr	d7, [r3]
 80048dc:	ee37 7b07 	vadd.f64	d7, d7, d7
 80048e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80048e4:	ed1f 6b36 	vldr	d6, [pc, #-216]	; 8004810 <IVK+0x2e90>
 80048e8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80048ec:	ed1f 6b36 	vldr	d6, [pc, #-216]	; 8004818 <IVK+0x2e98>
 80048f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80048f4:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 8004800 <IVK+0x2e80>
 80048f8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80048fc:	eeb0 0b47 	vmov.f64	d0, d7
 8004900:	f012 fc02 	bl	8017108 <sin>
 8004904:	eeb0 7b40 	vmov.f64	d7, d0
	      (((((((((((((((221663.52 *
 8004908:	ed1f 6b45 	vldr	d6, [pc, #-276]	; 80047f8 <IVK+0x2e78>
 800490c:	ee27 8b06 	vmul.f64	d8, d7, d6
	                             -0.73665) *
	                         cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) -
 8004910:	f107 030c 	add.w	r3, r7, #12
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3308      	adds	r3, #8
 8004918:	ed93 6b00 	vldr	d6, [r3]
 800491c:	f107 030c 	add.w	r3, r7, #12
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3310      	adds	r3, #16
 8004924:	ed93 7b00 	vldr	d7, [r3]
 8004928:	ee36 7b07 	vadd.f64	d7, d6, d7
 800492c:	ed1f 6b48 	vldr	d6, [pc, #-288]	; 8004810 <IVK+0x2e90>
 8004930:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004934:	ed1f 6b48 	vldr	d6, [pc, #-288]	; 8004818 <IVK+0x2e98>
 8004938:	ee37 7b46 	vsub.f64	d7, d7, d6
 800493c:	eeb0 0b47 	vmov.f64	d0, d7
 8004940:	f012 fb8e 	bl	8017060 <cos>
 8004944:	eeb0 7b40 	vmov.f64	d7, d0
	                             -0.73665) *
 8004948:	ee28 8b07 	vmul.f64	d8, d8, d7
	                         cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) -
 800494c:	f107 030c 	add.w	r3, r7, #12
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	ed93 7b00 	vldr	d7, [r3]
 8004956:	eeb0 0b47 	vmov.f64	d0, d7
 800495a:	f012 fb81 	bl	8017060 <cos>
 800495e:	eeb0 7b40 	vmov.f64	d7, d0
 8004962:	ee28 8b07 	vmul.f64	d8, d8, d7
	                     221663.52 *
	                         cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8004966:	f107 030c 	add.w	r3, r7, #12
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3308      	adds	r3, #8
 800496e:	ed93 6b00 	vldr	d6, [r3]
 8004972:	f107 030c 	add.w	r3, r7, #12
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3310      	adds	r3, #16
 800497a:	ed93 7b00 	vldr	d7, [r3]
 800497e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004982:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004986:	ed1f 6b5e 	vldr	d6, [pc, #-376]	; 8004810 <IVK+0x2e90>
 800498a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800498e:	ed1f 6b5e 	vldr	d6, [pc, #-376]	; 8004818 <IVK+0x2e98>
 8004992:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004996:	ed1f 6b66 	vldr	d6, [pc, #-408]	; 8004800 <IVK+0x2e80>
 800499a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800499e:	eeb0 0b47 	vmov.f64	d0, d7
 80049a2:	f012 fb5d 	bl	8017060 <cos>
 80049a6:	eeb0 7b40 	vmov.f64	d7, d0
	                     221663.52 *
 80049aa:	ed1f 6b6d 	vldr	d6, [pc, #-436]	; 80047f8 <IVK+0x2e78>
 80049ae:	ee27 9b06 	vmul.f64	d9, d7, d6
	                             -0.73665) *
	                         sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 80049b2:	f107 030c 	add.w	r3, r7, #12
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3308      	adds	r3, #8
 80049ba:	ed93 6b00 	vldr	d6, [r3]
 80049be:	f107 030c 	add.w	r3, r7, #12
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	3310      	adds	r3, #16
 80049c6:	ed93 7b00 	vldr	d7, [r3]
 80049ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80049ce:	ed1f 6b70 	vldr	d6, [pc, #-448]	; 8004810 <IVK+0x2e90>
 80049d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80049d6:	ed1f 6b70 	vldr	d6, [pc, #-448]	; 8004818 <IVK+0x2e98>
 80049da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80049de:	eeb0 0b47 	vmov.f64	d0, d7
 80049e2:	f012 fb91 	bl	8017108 <sin>
 80049e6:	eeb0 7b40 	vmov.f64	d7, d0
	                             -0.73665) *
 80049ea:	ee29 9b07 	vmul.f64	d9, d9, d7
	                         sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 80049ee:	f107 030c 	add.w	r3, r7, #12
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	ed93 7b00 	vldr	d7, [r3]
 80049f8:	eeb0 0b47 	vmov.f64	d0, d7
 80049fc:	f012 fb30 	bl	8017060 <cos>
 8004a00:	eeb0 7b40 	vmov.f64	d7, d0
 8004a04:	ee29 7b07 	vmul.f64	d7, d9, d7
	                         cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0]) -
 8004a08:	ee38 8b47 	vsub.f64	d8, d8, d7
	                    2.6029060499520004E+6 *
	                        cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8004a0c:	f107 030c 	add.w	r3, r7, #12
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	3308      	adds	r3, #8
 8004a14:	ed93 6b00 	vldr	d6, [r3]
 8004a18:	f107 030c 	add.w	r3, r7, #12
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	3310      	adds	r3, #16
 8004a20:	ed93 7b00 	vldr	d7, [r3]
 8004a24:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004a28:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004a2c:	ed1f 6b88 	vldr	d6, [pc, #-544]	; 8004810 <IVK+0x2e90>
 8004a30:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004a34:	ed1f 6b88 	vldr	d6, [pc, #-544]	; 8004818 <IVK+0x2e98>
 8004a38:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004a3c:	ed1f 6b90 	vldr	d6, [pc, #-576]	; 8004800 <IVK+0x2e80>
 8004a40:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004a44:	eeb0 0b47 	vmov.f64	d0, d7
 8004a48:	f012 fb0a 	bl	8017060 <cos>
 8004a4c:	eeb0 7b40 	vmov.f64	d7, d0
	                    2.6029060499520004E+6 *
 8004a50:	ed1f 6b93 	vldr	d6, [pc, #-588]	; 8004808 <IVK+0x2e88>
 8004a54:	ee27 9b06 	vmul.f64	d9, d7, d6
	                            -0.73665) *
	                        sin(q[1] + 1.6845) * cos(q[0])) +
 8004a58:	f107 030c 	add.w	r3, r7, #12
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3308      	adds	r3, #8
 8004a60:	ed93 7b00 	vldr	d7, [r3]
 8004a64:	ed1f 6b96 	vldr	d6, [pc, #-600]	; 8004810 <IVK+0x2e90>
 8004a68:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004a6c:	eeb0 0b47 	vmov.f64	d0, d7
 8004a70:	f012 fb4a 	bl	8017108 <sin>
 8004a74:	eeb0 7b40 	vmov.f64	d7, d0
	                            -0.73665) *
 8004a78:	ee29 9b07 	vmul.f64	d9, d9, d7
	                        sin(q[1] + 1.6845) * cos(q[0])) +
 8004a7c:	f107 030c 	add.w	r3, r7, #12
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	ed93 7b00 	vldr	d7, [r3]
 8004a86:	eeb0 0b47 	vmov.f64	d0, d7
 8004a8a:	f012 fae9 	bl	8017060 <cos>
 8004a8e:	eeb0 7b40 	vmov.f64	d7, d0
 8004a92:	ee29 7b07 	vmul.f64	d7, d9, d7
	                         sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 8004a96:	ee38 8b47 	vsub.f64	d8, d8, d7
	                   2.6029060499520004E+6 *
	                       sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8004a9a:	f107 030c 	add.w	r3, r7, #12
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	ed93 6b00 	vldr	d6, [r3]
 8004aa6:	f107 030c 	add.w	r3, r7, #12
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3310      	adds	r3, #16
 8004aae:	ed93 7b00 	vldr	d7, [r3]
 8004ab2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004ab6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004aba:	ed1f 6bab 	vldr	d6, [pc, #-684]	; 8004810 <IVK+0x2e90>
 8004abe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004ac2:	ed1f 6bab 	vldr	d6, [pc, #-684]	; 8004818 <IVK+0x2e98>
 8004ac6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004aca:	ed1f 6bb3 	vldr	d6, [pc, #-716]	; 8004800 <IVK+0x2e80>
 8004ace:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004ad2:	eeb0 0b47 	vmov.f64	d0, d7
 8004ad6:	f012 fb17 	bl	8017108 <sin>
 8004ada:	eeb0 7b40 	vmov.f64	d7, d0
	                   2.6029060499520004E+6 *
 8004ade:	ed1f 6bb6 	vldr	d6, [pc, #-728]	; 8004808 <IVK+0x2e88>
 8004ae2:	ee27 9b06 	vmul.f64	d9, d7, d6
	                           -0.73665) *
	                       cos(q[1] + 1.6845) * cos(q[0])) -
 8004ae6:	f107 030c 	add.w	r3, r7, #12
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3308      	adds	r3, #8
 8004aee:	ed93 7b00 	vldr	d7, [r3]
 8004af2:	ed1f 6bb9 	vldr	d6, [pc, #-740]	; 8004810 <IVK+0x2e90>
 8004af6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004afa:	eeb0 0b47 	vmov.f64	d0, d7
 8004afe:	f012 faaf 	bl	8017060 <cos>
 8004b02:	eeb0 7b40 	vmov.f64	d7, d0
	                           -0.73665) *
 8004b06:	ee29 9b07 	vmul.f64	d9, d9, d7
	                       cos(q[1] + 1.6845) * cos(q[0])) -
 8004b0a:	f107 030c 	add.w	r3, r7, #12
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	ed93 7b00 	vldr	d7, [r3]
 8004b14:	eeb0 0b47 	vmov.f64	d0, d7
 8004b18:	f012 faa2 	bl	8017060 <cos>
 8004b1c:	eeb0 7b40 	vmov.f64	d7, d0
 8004b20:	ee29 7b07 	vmul.f64	d7, d9, d7
	                        sin(q[1] + 1.6845) * cos(q[0])) +
 8004b24:	ee38 8b07 	vadd.f64	d8, d8, d7
	                  190230.12000000002 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004b28:	f107 030c 	add.w	r3, r7, #12
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	3308      	adds	r3, #8
 8004b30:	ed93 6b00 	vldr	d6, [r3]
 8004b34:	f107 030c 	add.w	r3, r7, #12
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3310      	adds	r3, #16
 8004b3c:	ed93 7b00 	vldr	d7, [r3]
 8004b40:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004b44:	ed1f 6bce 	vldr	d6, [pc, #-824]	; 8004810 <IVK+0x2e90>
 8004b48:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004b4c:	ed1f 6bce 	vldr	d6, [pc, #-824]	; 8004818 <IVK+0x2e98>
 8004b50:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004b54:	eeb0 0b47 	vmov.f64	d0, d7
 8004b58:	f012 fa82 	bl	8017060 <cos>
 8004b5c:	eeb0 7b40 	vmov.f64	d7, d0
 8004b60:	ed1f 6bd1 	vldr	d6, [pc, #-836]	; 8004820 <IVK+0x2ea0>
 8004b64:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      sin(q[1] + 1.6845) * cos(q[0])) +
 8004b68:	f107 030c 	add.w	r3, r7, #12
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3308      	adds	r3, #8
 8004b70:	ed93 7b00 	vldr	d7, [r3]
 8004b74:	ed1f 6bda 	vldr	d6, [pc, #-872]	; 8004810 <IVK+0x2e90>
 8004b78:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004b7c:	eeb0 0b47 	vmov.f64	d0, d7
 8004b80:	f012 fac2 	bl	8017108 <sin>
 8004b84:	eeb0 7b40 	vmov.f64	d7, d0
	                  190230.12000000002 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004b88:	ee29 9b07 	vmul.f64	d9, d9, d7
	                      sin(q[1] + 1.6845) * cos(q[0])) +
 8004b8c:	f107 030c 	add.w	r3, r7, #12
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	ed93 7b00 	vldr	d7, [r3]
 8004b96:	eeb0 0b47 	vmov.f64	d0, d7
 8004b9a:	f012 fa61 	bl	8017060 <cos>
 8004b9e:	eeb0 7b40 	vmov.f64	d7, d0
 8004ba2:	ee29 7b07 	vmul.f64	d7, d9, d7
	                       cos(q[1] + 1.6845) * cos(q[0])) -
 8004ba6:	ee38 8b47 	vsub.f64	d8, d8, d7
	                 190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004baa:	f107 030c 	add.w	r3, r7, #12
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	ed93 6b00 	vldr	d6, [r3]
 8004bb6:	f107 030c 	add.w	r3, r7, #12
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3310      	adds	r3, #16
 8004bbe:	ed93 7b00 	vldr	d7, [r3]
 8004bc2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004bc6:	ed1f 6bee 	vldr	d6, [pc, #-952]	; 8004810 <IVK+0x2e90>
 8004bca:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004bce:	ed1f 6bee 	vldr	d6, [pc, #-952]	; 8004818 <IVK+0x2e98>
 8004bd2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004bd6:	eeb0 0b47 	vmov.f64	d0, d7
 8004bda:	f012 fa95 	bl	8017108 <sin>
 8004bde:	eeb0 7b40 	vmov.f64	d7, d0
 8004be2:	ed1f 6bf1 	vldr	d6, [pc, #-964]	; 8004820 <IVK+0x2ea0>
 8004be6:	ee27 9b06 	vmul.f64	d9, d7, d6
	                     cos(q[1] + 1.6845) * cos(q[0])) +
 8004bea:	f107 030c 	add.w	r3, r7, #12
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3308      	adds	r3, #8
 8004bf2:	ed93 7b00 	vldr	d7, [r3]
 8004bf6:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8004fa8 <IVK+0x3628>
 8004bfa:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004bfe:	eeb0 0b47 	vmov.f64	d0, d7
 8004c02:	f012 fa2d 	bl	8017060 <cos>
 8004c06:	eeb0 7b40 	vmov.f64	d7, d0
	                 190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8004c0a:	ee29 9b07 	vmul.f64	d9, d9, d7
	                     cos(q[1] + 1.6845) * cos(q[0])) +
 8004c0e:	f107 030c 	add.w	r3, r7, #12
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	ed93 7b00 	vldr	d7, [r3]
 8004c18:	eeb0 0b47 	vmov.f64	d0, d7
 8004c1c:	f012 fa20 	bl	8017060 <cos>
 8004c20:	eeb0 7b40 	vmov.f64	d7, d0
 8004c24:	ee29 7b07 	vmul.f64	d7, d9, d7
	                      sin(q[1] + 1.6845) * cos(q[0])) +
 8004c28:	ee38 6b07 	vadd.f64	d6, d8, d7
	                     cos(q[1] + 1.6845) * cos(q[0])) +
 8004c2c:	ed97 7b42 	vldr	d7, [r7, #264]	; 0x108
 8004c30:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d16) +
 8004c34:	ed97 7b40 	vldr	d7, [r7, #256]	; 0x100
 8004c38:	ee36 8b07 	vadd.f64	d8, d6, d7
	               d17) +
	              87600.0 *
	                  cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004c3c:	f107 030c 	add.w	r3, r7, #12
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3308      	adds	r3, #8
 8004c44:	ed93 6b00 	vldr	d6, [r3]
 8004c48:	f107 030c 	add.w	r3, r7, #12
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3310      	adds	r3, #16
 8004c50:	ed93 7b00 	vldr	d7, [r3]
 8004c54:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004c58:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004c5c:	f107 030c 	add.w	r3, r7, #12
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3318      	adds	r3, #24
 8004c64:	ed93 7b00 	vldr	d7, [r3]
 8004c68:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004c6c:	ed9f 6bce 	vldr	d6, [pc, #824]	; 8004fa8 <IVK+0x3628>
 8004c70:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004c74:	ed9f 6bdc 	vldr	d6, [pc, #880]	; 8004fe8 <IVK+0x3668>
 8004c78:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004c7c:	ed9f 6bd6 	vldr	d6, [pc, #856]	; 8004fd8 <IVK+0x3658>
 8004c80:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004c84:	ed9f 6bd2 	vldr	d6, [pc, #840]	; 8004fd0 <IVK+0x3650>
 8004c88:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004c8c:	eeb0 0b47 	vmov.f64	d0, d7
 8004c90:	f012 f9e6 	bl	8017060 <cos>
 8004c94:	eeb0 7b40 	vmov.f64	d7, d0
	              87600.0 *
 8004c98:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 8004fb0 <IVK+0x3630>
 8004c9c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004ca0:	f107 030c 	add.w	r3, r7, #12
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3308      	adds	r3, #8
 8004ca8:	ed93 6b00 	vldr	d6, [r3]
 8004cac:	f107 030c 	add.w	r3, r7, #12
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	3310      	adds	r3, #16
 8004cb4:	ed93 7b00 	vldr	d7, [r3]
 8004cb8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004cbc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004cc0:	f107 030c 	add.w	r3, r7, #12
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	3318      	adds	r3, #24
 8004cc8:	ed93 7b00 	vldr	d7, [r3]
 8004ccc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004cd0:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 8004fa8 <IVK+0x3628>
 8004cd4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004cd8:	ed9f 6bc3 	vldr	d6, [pc, #780]	; 8004fe8 <IVK+0x3668>
 8004cdc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004ce0:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8004fd8 <IVK+0x3658>
 8004ce4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004ce8:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8004fd0 <IVK+0x3650>
 8004cec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004cf0:	eeb0 0b47 	vmov.f64	d0, d7
 8004cf4:	f012 fa08 	bl	8017108 <sin>
 8004cf8:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 8004cfc:	ee29 9b07 	vmul.f64	d9, d9, d7
	                       -0.73665) +
	                      1.52205) *
	                  cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 8004d00:	f107 030c 	add.w	r3, r7, #12
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3308      	adds	r3, #8
 8004d08:	ed93 6b00 	vldr	d6, [r3]
 8004d0c:	f107 030c 	add.w	r3, r7, #12
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3310      	adds	r3, #16
 8004d14:	ed93 7b00 	vldr	d7, [r3]
 8004d18:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004d1c:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 8004fa8 <IVK+0x3628>
 8004d20:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004d24:	ed9f 6bb0 	vldr	d6, [pc, #704]	; 8004fe8 <IVK+0x3668>
 8004d28:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004d2c:	eeb0 0b47 	vmov.f64	d0, d7
 8004d30:	f012 f996 	bl	8017060 <cos>
 8004d34:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 8004d38:	ee29 9b07 	vmul.f64	d9, d9, d7
	                  cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 8004d3c:	f107 030c 	add.w	r3, r7, #12
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	ed93 7b00 	vldr	d7, [r3]
 8004d46:	eeb0 0b47 	vmov.f64	d0, d7
 8004d4a:	f012 f9dd 	bl	8017108 <sin>
 8004d4e:	eeb0 7b40 	vmov.f64	d7, d0
 8004d52:	ee29 7b07 	vmul.f64	d7, d9, d7
	               d17) +
 8004d56:	ee38 8b07 	vadd.f64	d8, d8, d7
	             1.02865176E+6 *
	                 cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004d5a:	f107 030c 	add.w	r3, r7, #12
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3308      	adds	r3, #8
 8004d62:	ed93 6b00 	vldr	d6, [r3]
 8004d66:	f107 030c 	add.w	r3, r7, #12
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3310      	adds	r3, #16
 8004d6e:	ed93 7b00 	vldr	d7, [r3]
 8004d72:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004d76:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004d7a:	f107 030c 	add.w	r3, r7, #12
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3318      	adds	r3, #24
 8004d82:	ed93 7b00 	vldr	d7, [r3]
 8004d86:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004d8a:	ed9f 6b87 	vldr	d6, [pc, #540]	; 8004fa8 <IVK+0x3628>
 8004d8e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004d92:	ed9f 6b95 	vldr	d6, [pc, #596]	; 8004fe8 <IVK+0x3668>
 8004d96:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004d9a:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8004fd8 <IVK+0x3658>
 8004d9e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004da2:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8004fd0 <IVK+0x3650>
 8004da6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004daa:	eeb0 0b47 	vmov.f64	d0, d7
 8004dae:	f012 f957 	bl	8017060 <cos>
 8004db2:	eeb0 7b40 	vmov.f64	d7, d0
	             1.02865176E+6 *
 8004db6:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8004fb8 <IVK+0x3638>
 8004dba:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      -0.73665) +
	                     1.52205) *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004dbe:	f107 030c 	add.w	r3, r7, #12
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3308      	adds	r3, #8
 8004dc6:	ed93 6b00 	vldr	d6, [r3]
 8004dca:	f107 030c 	add.w	r3, r7, #12
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3310      	adds	r3, #16
 8004dd2:	ed93 7b00 	vldr	d7, [r3]
 8004dd6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004dda:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004dde:	f107 030c 	add.w	r3, r7, #12
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	3318      	adds	r3, #24
 8004de6:	ed93 7b00 	vldr	d7, [r3]
 8004dea:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004dee:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8004fa8 <IVK+0x3628>
 8004df2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004df6:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8004fe8 <IVK+0x3668>
 8004dfa:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004dfe:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8004fd8 <IVK+0x3658>
 8004e02:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004e06:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8004fd0 <IVK+0x3650>
 8004e0a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e0e:	eeb0 0b47 	vmov.f64	d0, d7
 8004e12:	f012 f979 	bl	8017108 <sin>
 8004e16:	eeb0 7b40 	vmov.f64	d7, d0
	                     1.52205) *
 8004e1a:	ee29 9b07 	vmul.f64	d9, d9, d7
	                      -0.73665) +
	                     1.52205) *
	                 cos(q[1] + 1.6845) * sin(q[0])) +
 8004e1e:	f107 030c 	add.w	r3, r7, #12
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3308      	adds	r3, #8
 8004e26:	ed93 7b00 	vldr	d7, [r3]
 8004e2a:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8004fa8 <IVK+0x3628>
 8004e2e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e32:	eeb0 0b47 	vmov.f64	d0, d7
 8004e36:	f012 f913 	bl	8017060 <cos>
 8004e3a:	eeb0 7b40 	vmov.f64	d7, d0
	                     1.52205) *
 8004e3e:	ee29 9b07 	vmul.f64	d9, d9, d7
	                 cos(q[1] + 1.6845) * sin(q[0])) +
 8004e42:	f107 030c 	add.w	r3, r7, #12
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	ed93 7b00 	vldr	d7, [r3]
 8004e4c:	eeb0 0b47 	vmov.f64	d0, d7
 8004e50:	f012 f95a 	bl	8017108 <sin>
 8004e54:	eeb0 7b40 	vmov.f64	d7, d0
 8004e58:	ee29 7b07 	vmul.f64	d7, d9, d7
	                  cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 8004e5c:	ee38 8b07 	vadd.f64	d8, d8, d7
	            246292.8 *
	                sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004e60:	f107 030c 	add.w	r3, r7, #12
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3308      	adds	r3, #8
 8004e68:	ed93 6b00 	vldr	d6, [r3]
 8004e6c:	f107 030c 	add.w	r3, r7, #12
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	3310      	adds	r3, #16
 8004e74:	ed93 7b00 	vldr	d7, [r3]
 8004e78:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004e7c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004e80:	f107 030c 	add.w	r3, r7, #12
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	3318      	adds	r3, #24
 8004e88:	ed93 7b00 	vldr	d7, [r3]
 8004e8c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004e90:	ed9f 6b45 	vldr	d6, [pc, #276]	; 8004fa8 <IVK+0x3628>
 8004e94:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004e98:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8004fe8 <IVK+0x3668>
 8004e9c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004ea0:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8004fd8 <IVK+0x3658>
 8004ea4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004ea8:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8004fd0 <IVK+0x3650>
 8004eac:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004eb0:	eeb0 0b47 	vmov.f64	d0, d7
 8004eb4:	f012 f928 	bl	8017108 <sin>
 8004eb8:	eeb0 7b40 	vmov.f64	d7, d0
	            246292.8 *
 8004ebc:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8004fc0 <IVK+0x3640>
 8004ec0:	ee27 9b06 	vmul.f64	d9, d7, d6
	                     -0.73665) +
	                    1.52205) *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004ec4:	f107 030c 	add.w	r3, r7, #12
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3308      	adds	r3, #8
 8004ecc:	ed93 6b00 	vldr	d6, [r3]
 8004ed0:	f107 030c 	add.w	r3, r7, #12
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3310      	adds	r3, #16
 8004ed8:	ed93 7b00 	vldr	d7, [r3]
 8004edc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004ee0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004ee4:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8004fa8 <IVK+0x3628>
 8004ee8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004eec:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8004fe8 <IVK+0x3668>
 8004ef0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004ef4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8004fd8 <IVK+0x3658>
 8004ef8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004efc:	eeb0 0b47 	vmov.f64	d0, d7
 8004f00:	f012 f8ae 	bl	8017060 <cos>
 8004f04:	eeb0 7b40 	vmov.f64	d7, d0
	                    1.52205) *
 8004f08:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) -
 8004f0c:	f107 030c 	add.w	r3, r7, #12
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	3308      	adds	r3, #8
 8004f14:	ed93 6b00 	vldr	d6, [r3]
 8004f18:	f107 030c 	add.w	r3, r7, #12
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	3310      	adds	r3, #16
 8004f20:	ed93 7b00 	vldr	d7, [r3]
 8004f24:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f28:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8004fa8 <IVK+0x3628>
 8004f2c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004f30:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8004fe8 <IVK+0x3668>
 8004f34:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004f38:	eeb0 0b47 	vmov.f64	d0, d7
 8004f3c:	f012 f8e4 	bl	8017108 <sin>
 8004f40:	eeb0 7b40 	vmov.f64	d7, d0
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8004f44:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) -
 8004f48:	f107 030c 	add.w	r3, r7, #12
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	ed93 7b00 	vldr	d7, [r3]
 8004f52:	eeb0 0b47 	vmov.f64	d0, d7
 8004f56:	f012 f8d7 	bl	8017108 <sin>
 8004f5a:	eeb0 7b40 	vmov.f64	d7, d0
 8004f5e:	ee29 7b07 	vmul.f64	d7, d9, d7
	                 cos(q[1] + 1.6845) * sin(q[0])) +
 8004f62:	ee38 8b07 	vadd.f64	d8, d8, d7
	           246292.8 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8004f66:	f107 030c 	add.w	r3, r7, #12
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3308      	adds	r3, #8
 8004f6e:	ed93 6b00 	vldr	d6, [r3]
 8004f72:	f107 030c 	add.w	r3, r7, #12
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3310      	adds	r3, #16
 8004f7a:	ed93 7b00 	vldr	d7, [r3]
 8004f7e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004f82:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004f86:	f107 030c 	add.w	r3, r7, #12
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3318      	adds	r3, #24
 8004f8e:	ed93 7b00 	vldr	d7, [r3]
 8004f92:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f96:	ed9f 6b04 	vldr	d6, [pc, #16]	; 8004fa8 <IVK+0x3628>
 8004f9a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004f9e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8004fe8 <IVK+0x3668>
 8004fa2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004fa6:	e027      	b.n	8004ff8 <IVK+0x3678>
 8004fa8:	45a1cac1 	.word	0x45a1cac1
 8004fac:	3ffaf3b6 	.word	0x3ffaf3b6
 8004fb0:	00000000 	.word	0x00000000
 8004fb4:	40f56300 	.word	0x40f56300
 8004fb8:	851eb852 	.word	0x851eb852
 8004fbc:	412f6457 	.word	0x412f6457
 8004fc0:	66666666 	.word	0x66666666
 8004fc4:	410e10a6 	.word	0x410e10a6
 8004fc8:	eaa8eb47 	.word	0xeaa8eb47
 8004fcc:	414610aa 	.word	0x414610aa
 8004fd0:	19ce075f 	.word	0x19ce075f
 8004fd4:	3ff85a51 	.word	0x3ff85a51
 8004fd8:	05532618 	.word	0x05532618
 8004fdc:	3fe792a3 	.word	0x3fe792a3
 8004fe0:	66666667 	.word	0x66666667
 8004fe4:	4109cd36 	.word	0x4109cd36
 8004fe8:	39581062 	.word	0x39581062
 8004fec:	3fecc8b4 	.word	0x3fecc8b4
 8004ff0:	45a1cac1 	.word	0x45a1cac1
 8004ff4:	3ffaf3b6 	.word	0x3ffaf3b6
 8004ff8:	ed1f 6b09 	vldr	d6, [pc, #-36]	; 8004fd8 <IVK+0x3658>
 8004ffc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005000:	ed1f 6b0d 	vldr	d6, [pc, #-52]	; 8004fd0 <IVK+0x3650>
 8005004:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005008:	eeb0 0b47 	vmov.f64	d0, d7
 800500c:	f012 f87c 	bl	8017108 <sin>
 8005010:	eeb0 7b40 	vmov.f64	d7, d0
	           246292.8 *
 8005014:	ed1f 6b16 	vldr	d6, [pc, #-88]	; 8004fc0 <IVK+0x3640>
 8005018:	ee27 9b06 	vmul.f64	d9, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800501c:	f107 030c 	add.w	r3, r7, #12
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3308      	adds	r3, #8
 8005024:	ed93 6b00 	vldr	d6, [r3]
 8005028:	f107 030c 	add.w	r3, r7, #12
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3310      	adds	r3, #16
 8005030:	ed93 7b00 	vldr	d7, [r3]
 8005034:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005038:	ee36 7b07 	vadd.f64	d7, d6, d7
 800503c:	ed1f 6b14 	vldr	d6, [pc, #-80]	; 8004ff0 <IVK+0x3670>
 8005040:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005044:	ed1f 6b18 	vldr	d6, [pc, #-96]	; 8004fe8 <IVK+0x3668>
 8005048:	ee37 7b46 	vsub.f64	d7, d7, d6
 800504c:	ed1f 6b1e 	vldr	d6, [pc, #-120]	; 8004fd8 <IVK+0x3658>
 8005050:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005054:	eeb0 0b47 	vmov.f64	d0, d7
 8005058:	f012 f856 	bl	8017108 <sin>
 800505c:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 8005060:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 8005064:	f107 030c 	add.w	r3, r7, #12
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3308      	adds	r3, #8
 800506c:	ed93 6b00 	vldr	d6, [r3]
 8005070:	f107 030c 	add.w	r3, r7, #12
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3310      	adds	r3, #16
 8005078:	ed93 7b00 	vldr	d7, [r3]
 800507c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005080:	ed1f 6b25 	vldr	d6, [pc, #-148]	; 8004ff0 <IVK+0x3670>
 8005084:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005088:	ed1f 6b29 	vldr	d6, [pc, #-164]	; 8004fe8 <IVK+0x3668>
 800508c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005090:	eeb0 0b47 	vmov.f64	d0, d7
 8005094:	f011 ffe4 	bl	8017060 <cos>
 8005098:	eeb0 7b40 	vmov.f64	d7, d0
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800509c:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 80050a0:	f107 030c 	add.w	r3, r7, #12
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	ed93 7b00 	vldr	d7, [r3]
 80050aa:	eeb0 0b47 	vmov.f64	d0, d7
 80050ae:	f012 f82b 	bl	8017108 <sin>
 80050b2:	eeb0 7b40 	vmov.f64	d7, d0
 80050b6:	ee29 7b07 	vmul.f64	d7, d9, d7
	                sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) -
 80050ba:	ee38 8b47 	vsub.f64	d8, d8, d7
	          2.8921178332800004E+6 *
	              sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80050be:	f107 030c 	add.w	r3, r7, #12
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	3308      	adds	r3, #8
 80050c6:	ed93 6b00 	vldr	d6, [r3]
 80050ca:	f107 030c 	add.w	r3, r7, #12
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	3310      	adds	r3, #16
 80050d2:	ed93 7b00 	vldr	d7, [r3]
 80050d6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80050da:	ee36 6b07 	vadd.f64	d6, d6, d7
 80050de:	f107 030c 	add.w	r3, r7, #12
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3318      	adds	r3, #24
 80050e6:	ed93 7b00 	vldr	d7, [r3]
 80050ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 80050ee:	ed1f 6b40 	vldr	d6, [pc, #-256]	; 8004ff0 <IVK+0x3670>
 80050f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80050f6:	ed1f 6b44 	vldr	d6, [pc, #-272]	; 8004fe8 <IVK+0x3668>
 80050fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80050fe:	ed1f 6b4a 	vldr	d6, [pc, #-296]	; 8004fd8 <IVK+0x3658>
 8005102:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005106:	ed1f 6b4e 	vldr	d6, [pc, #-312]	; 8004fd0 <IVK+0x3650>
 800510a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800510e:	eeb0 0b47 	vmov.f64	d0, d7
 8005112:	f011 fff9 	bl	8017108 <sin>
 8005116:	eeb0 7b40 	vmov.f64	d7, d0
	          2.8921178332800004E+6 *
 800511a:	ed1f 6b55 	vldr	d6, [pc, #-340]	; 8004fc8 <IVK+0x3648>
 800511e:	ee27 9b06 	vmul.f64	d9, d7, d6
	                   -0.73665) +
	                  1.52205) *
	              cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005122:	f107 030c 	add.w	r3, r7, #12
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	3308      	adds	r3, #8
 800512a:	ed93 6b00 	vldr	d6, [r3]
 800512e:	f107 030c 	add.w	r3, r7, #12
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	3310      	adds	r3, #16
 8005136:	ed93 7b00 	vldr	d7, [r3]
 800513a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800513e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005142:	ed1f 6b55 	vldr	d6, [pc, #-340]	; 8004ff0 <IVK+0x3670>
 8005146:	ee37 7b06 	vadd.f64	d7, d7, d6
 800514a:	ed1f 6b59 	vldr	d6, [pc, #-356]	; 8004fe8 <IVK+0x3668>
 800514e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005152:	ed1f 6b5f 	vldr	d6, [pc, #-380]	; 8004fd8 <IVK+0x3658>
 8005156:	ee37 7b46 	vsub.f64	d7, d7, d6
 800515a:	eeb0 0b47 	vmov.f64	d0, d7
 800515e:	f011 ff7f 	bl	8017060 <cos>
 8005162:	eeb0 7b40 	vmov.f64	d7, d0
	                  1.52205) *
 8005166:	ee29 9b07 	vmul.f64	d9, d9, d7
	              sin(q[1] + 1.6845) * sin(q[0])) -
 800516a:	f107 030c 	add.w	r3, r7, #12
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3308      	adds	r3, #8
 8005172:	ed93 7b00 	vldr	d7, [r3]
 8005176:	ed1f 6b62 	vldr	d6, [pc, #-392]	; 8004ff0 <IVK+0x3670>
 800517a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800517e:	eeb0 0b47 	vmov.f64	d0, d7
 8005182:	f011 ffc1 	bl	8017108 <sin>
 8005186:	eeb0 7b40 	vmov.f64	d7, d0
	              cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 800518a:	ee29 9b07 	vmul.f64	d9, d9, d7
	              sin(q[1] + 1.6845) * sin(q[0])) -
 800518e:	f107 030c 	add.w	r3, r7, #12
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	ed93 7b00 	vldr	d7, [r3]
 8005198:	eeb0 0b47 	vmov.f64	d0, d7
 800519c:	f011 ffb4 	bl	8017108 <sin>
 80051a0:	eeb0 7b40 	vmov.f64	d7, d0
 80051a4:	ee29 7b07 	vmul.f64	d7, d9, d7
	               cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0])) +
 80051a8:	ee38 8b07 	vadd.f64	d8, d8, d7
	         2.8921178332800004E+6 *
	             sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80051ac:	f107 030c 	add.w	r3, r7, #12
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3308      	adds	r3, #8
 80051b4:	ed93 6b00 	vldr	d6, [r3]
 80051b8:	f107 030c 	add.w	r3, r7, #12
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3310      	adds	r3, #16
 80051c0:	ed93 7b00 	vldr	d7, [r3]
 80051c4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80051c8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80051cc:	f107 030c 	add.w	r3, r7, #12
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3318      	adds	r3, #24
 80051d4:	ed93 7b00 	vldr	d7, [r3]
 80051d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051dc:	ed1f 6b7c 	vldr	d6, [pc, #-496]	; 8004ff0 <IVK+0x3670>
 80051e0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80051e4:	ed1f 6b80 	vldr	d6, [pc, #-512]	; 8004fe8 <IVK+0x3668>
 80051e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80051ec:	ed1f 6b86 	vldr	d6, [pc, #-536]	; 8004fd8 <IVK+0x3658>
 80051f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80051f4:	ed1f 6b8a 	vldr	d6, [pc, #-552]	; 8004fd0 <IVK+0x3650>
 80051f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80051fc:	eeb0 0b47 	vmov.f64	d0, d7
 8005200:	f011 ff82 	bl	8017108 <sin>
 8005204:	eeb0 7b40 	vmov.f64	d7, d0
	         2.8921178332800004E+6 *
 8005208:	ed1f 6b91 	vldr	d6, [pc, #-580]	; 8004fc8 <IVK+0x3648>
 800520c:	ee27 9b06 	vmul.f64	d9, d7, d6
	                  -0.73665) +
	                 1.52205) *
	             sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005210:	f107 030c 	add.w	r3, r7, #12
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3308      	adds	r3, #8
 8005218:	ed93 6b00 	vldr	d6, [r3]
 800521c:	f107 030c 	add.w	r3, r7, #12
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3310      	adds	r3, #16
 8005224:	ed93 7b00 	vldr	d7, [r3]
 8005228:	ee37 7b07 	vadd.f64	d7, d7, d7
 800522c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005230:	ed1f 6b91 	vldr	d6, [pc, #-580]	; 8004ff0 <IVK+0x3670>
 8005234:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005238:	ed1f 6b95 	vldr	d6, [pc, #-596]	; 8004fe8 <IVK+0x3668>
 800523c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005240:	ed1f 6b9b 	vldr	d6, [pc, #-620]	; 8004fd8 <IVK+0x3658>
 8005244:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005248:	eeb0 0b47 	vmov.f64	d0, d7
 800524c:	f011 ff5c 	bl	8017108 <sin>
 8005250:	eeb0 7b40 	vmov.f64	d7, d0
	                 1.52205) *
 8005254:	ee29 9b07 	vmul.f64	d9, d9, d7
	             cos(q[1] + 1.6845) * sin(q[0])) +
 8005258:	f107 030c 	add.w	r3, r7, #12
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	3308      	adds	r3, #8
 8005260:	ed93 7b00 	vldr	d7, [r3]
 8005264:	ed1f 6b9e 	vldr	d6, [pc, #-632]	; 8004ff0 <IVK+0x3670>
 8005268:	ee37 7b06 	vadd.f64	d7, d7, d6
 800526c:	eeb0 0b47 	vmov.f64	d0, d7
 8005270:	f011 fef6 	bl	8017060 <cos>
 8005274:	eeb0 7b40 	vmov.f64	d7, d0
	             sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005278:	ee29 9b07 	vmul.f64	d9, d9, d7
	             cos(q[1] + 1.6845) * sin(q[0])) +
 800527c:	f107 030c 	add.w	r3, r7, #12
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	ed93 7b00 	vldr	d7, [r3]
 8005286:	eeb0 0b47 	vmov.f64	d0, d7
 800528a:	f011 ff3d 	bl	8017108 <sin>
 800528e:	eeb0 7b40 	vmov.f64	d7, d0
 8005292:	ee29 7b07 	vmul.f64	d7, d9, d7
	              sin(q[1] + 1.6845) * sin(q[0])) -
 8005296:	ee38 8b47 	vsub.f64	d8, d8, d7
	        211366.80000000002 *
	            sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800529a:	f107 030c 	add.w	r3, r7, #12
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3308      	adds	r3, #8
 80052a2:	ed93 6b00 	vldr	d6, [r3]
 80052a6:	f107 030c 	add.w	r3, r7, #12
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3310      	adds	r3, #16
 80052ae:	ed93 7b00 	vldr	d7, [r3]
 80052b2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80052b6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80052ba:	f107 030c 	add.w	r3, r7, #12
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	3318      	adds	r3, #24
 80052c2:	ed93 7b00 	vldr	d7, [r3]
 80052c6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80052ca:	ed1f 6bb7 	vldr	d6, [pc, #-732]	; 8004ff0 <IVK+0x3670>
 80052ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 80052d2:	ed1f 6bbb 	vldr	d6, [pc, #-748]	; 8004fe8 <IVK+0x3668>
 80052d6:	ee37 7b46 	vsub.f64	d7, d7, d6
 80052da:	ed1f 6bc1 	vldr	d6, [pc, #-772]	; 8004fd8 <IVK+0x3658>
 80052de:	ee37 7b46 	vsub.f64	d7, d7, d6
 80052e2:	ed1f 6bc5 	vldr	d6, [pc, #-788]	; 8004fd0 <IVK+0x3650>
 80052e6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80052ea:	eeb0 0b47 	vmov.f64	d0, d7
 80052ee:	f011 ff0b 	bl	8017108 <sin>
 80052f2:	eeb0 7b40 	vmov.f64	d7, d0
	        211366.80000000002 *
 80052f6:	ed1f 6bc6 	vldr	d6, [pc, #-792]	; 8004fe0 <IVK+0x3660>
 80052fa:	ee27 9b06 	vmul.f64	d9, d7, d6
	                 -0.73665) +
	                1.52205) *
	            cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 80052fe:	f107 030c 	add.w	r3, r7, #12
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	3308      	adds	r3, #8
 8005306:	ed93 6b00 	vldr	d6, [r3]
 800530a:	f107 030c 	add.w	r3, r7, #12
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3310      	adds	r3, #16
 8005312:	ed93 7b00 	vldr	d7, [r3]
 8005316:	ee36 7b07 	vadd.f64	d7, d6, d7
 800531a:	ed1f 6bcb 	vldr	d6, [pc, #-812]	; 8004ff0 <IVK+0x3670>
 800531e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005322:	ed1f 6bcf 	vldr	d6, [pc, #-828]	; 8004fe8 <IVK+0x3668>
 8005326:	ee37 7b46 	vsub.f64	d7, d7, d6
 800532a:	eeb0 0b47 	vmov.f64	d0, d7
 800532e:	f011 fe97 	bl	8017060 <cos>
 8005332:	eeb0 7b40 	vmov.f64	d7, d0
	                1.52205) *
 8005336:	ee29 9b07 	vmul.f64	d9, d9, d7
	            cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 800533a:	f107 030c 	add.w	r3, r7, #12
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3308      	adds	r3, #8
 8005342:	ed93 7b00 	vldr	d7, [r3]
 8005346:	ed1f 6bd6 	vldr	d6, [pc, #-856]	; 8004ff0 <IVK+0x3670>
 800534a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800534e:	eeb0 0b47 	vmov.f64	d0, d7
 8005352:	f011 fed9 	bl	8017108 <sin>
 8005356:	eeb0 7b40 	vmov.f64	d7, d0
 800535a:	ee29 9b07 	vmul.f64	d9, d9, d7
	            sin(q[0])) -
 800535e:	f107 030c 	add.w	r3, r7, #12
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	ed93 7b00 	vldr	d7, [r3]
 8005368:	eeb0 0b47 	vmov.f64	d0, d7
 800536c:	f011 fecc 	bl	8017108 <sin>
 8005370:	eeb0 7b40 	vmov.f64	d7, d0
	            cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8005374:	ee29 7b07 	vmul.f64	d7, d9, d7
	             cos(q[1] + 1.6845) * sin(q[0])) +
 8005378:	ee38 8b07 	vadd.f64	d8, d8, d7
	       211366.80000000002 *
	           sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800537c:	f107 030c 	add.w	r3, r7, #12
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	3308      	adds	r3, #8
 8005384:	ed93 6b00 	vldr	d6, [r3]
 8005388:	f107 030c 	add.w	r3, r7, #12
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3310      	adds	r3, #16
 8005390:	ed93 7b00 	vldr	d7, [r3]
 8005394:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005398:	ee36 6b07 	vadd.f64	d6, d6, d7
 800539c:	f107 030c 	add.w	r3, r7, #12
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	3318      	adds	r3, #24
 80053a4:	ed93 7b00 	vldr	d7, [r3]
 80053a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80053ac:	ed1f 6bf0 	vldr	d6, [pc, #-960]	; 8004ff0 <IVK+0x3670>
 80053b0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80053b4:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8005778 <IVK+0x3df8>
 80053b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80053bc:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8005780 <IVK+0x3e00>
 80053c0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80053c4:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 8005788 <IVK+0x3e08>
 80053c8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80053cc:	eeb0 0b47 	vmov.f64	d0, d7
 80053d0:	f011 fe9a 	bl	8017108 <sin>
 80053d4:	eeb0 7b40 	vmov.f64	d7, d0
	       211366.80000000002 *
 80053d8:	ed9f 6bed 	vldr	d6, [pc, #948]	; 8005790 <IVK+0x3e10>
 80053dc:	ee27 9b06 	vmul.f64	d9, d7, d6
	                -0.73665) +
	               1.52205) *
	           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 80053e0:	f107 030c 	add.w	r3, r7, #12
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3308      	adds	r3, #8
 80053e8:	ed93 6b00 	vldr	d6, [r3]
 80053ec:	f107 030c 	add.w	r3, r7, #12
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	3310      	adds	r3, #16
 80053f4:	ed93 7b00 	vldr	d7, [r3]
 80053f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80053fc:	ed9f 6bec 	vldr	d6, [pc, #944]	; 80057b0 <IVK+0x3e30>
 8005400:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005404:	ed9f 6bdc 	vldr	d6, [pc, #880]	; 8005778 <IVK+0x3df8>
 8005408:	ee37 7b46 	vsub.f64	d7, d7, d6
 800540c:	eeb0 0b47 	vmov.f64	d0, d7
 8005410:	f011 fe7a 	bl	8017108 <sin>
 8005414:	eeb0 7b40 	vmov.f64	d7, d0
	               1.52205) *
 8005418:	ee29 9b07 	vmul.f64	d9, d9, d7
	           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 800541c:	f107 030c 	add.w	r3, r7, #12
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3308      	adds	r3, #8
 8005424:	ed93 7b00 	vldr	d7, [r3]
 8005428:	ed9f 6be1 	vldr	d6, [pc, #900]	; 80057b0 <IVK+0x3e30>
 800542c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005430:	eeb0 0b47 	vmov.f64	d0, d7
 8005434:	f011 fe14 	bl	8017060 <cos>
 8005438:	eeb0 7b40 	vmov.f64	d7, d0
 800543c:	ee29 9b07 	vmul.f64	d9, d9, d7
	           sin(q[0])) /
 8005440:	f107 030c 	add.w	r3, r7, #12
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	ed93 7b00 	vldr	d7, [r3]
 800544a:	eeb0 0b47 	vmov.f64	d0, d7
 800544e:	f011 fe5b 	bl	8017108 <sin>
 8005452:	eeb0 7b40 	vmov.f64	d7, d0
	           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8005456:	ee29 7b07 	vmul.f64	d7, d9, d7
	            sin(q[0])) -
 800545a:	ee38 7b47 	vsub.f64	d7, d8, d7
	      4.0 *
 800545e:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8005462:	ee27 5b06 	vmul.f64	d5, d7, d6
	           sin(q[0])) /
 8005466:	ed97 6b7a 	vldr	d6, [r7, #488]	; 0x1e8
 800546a:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[4] =
 800546e:	f107 0310 	add.w	r3, r7, #16
 8005472:	ed83 7b08 	vstr	d7, [r3, #32]
	      d;
	  dv[9] =
	      -(4.0 *
	        (((((((((((((((221663.52 *
	                           cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8005476:	f107 030c 	add.w	r3, r7, #12
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3308      	adds	r3, #8
 800547e:	ed93 6b00 	vldr	d6, [r3]
 8005482:	f107 030c 	add.w	r3, r7, #12
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	3310      	adds	r3, #16
 800548a:	ed93 7b00 	vldr	d7, [r3]
 800548e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005492:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005496:	ed9f 6bc6 	vldr	d6, [pc, #792]	; 80057b0 <IVK+0x3e30>
 800549a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800549e:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8005778 <IVK+0x3df8>
 80054a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80054a6:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8005780 <IVK+0x3e00>
 80054aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80054ae:	eeb0 0b47 	vmov.f64	d0, d7
 80054b2:	f011 fdd5 	bl	8017060 <cos>
 80054b6:	eeb0 7b40 	vmov.f64	d7, d0
	        (((((((((((((((221663.52 *
 80054ba:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8005798 <IVK+0x3e18>
 80054be:	ee27 8b06 	vmul.f64	d8, d7, d6
	                               -0.73665) *
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) -
 80054c2:	f107 030c 	add.w	r3, r7, #12
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3308      	adds	r3, #8
 80054ca:	ed93 6b00 	vldr	d6, [r3]
 80054ce:	f107 030c 	add.w	r3, r7, #12
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3310      	adds	r3, #16
 80054d6:	ed93 7b00 	vldr	d7, [r3]
 80054da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80054de:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 80057b0 <IVK+0x3e30>
 80054e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80054e6:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8005778 <IVK+0x3df8>
 80054ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80054ee:	eeb0 0b47 	vmov.f64	d0, d7
 80054f2:	f011 fe09 	bl	8017108 <sin>
 80054f6:	eeb0 7b40 	vmov.f64	d7, d0
	                               -0.73665) *
 80054fa:	ee28 8b07 	vmul.f64	d8, d8, d7
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) -
 80054fe:	f107 030c 	add.w	r3, r7, #12
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	ed93 7b00 	vldr	d7, [r3]
 8005508:	eeb0 0b47 	vmov.f64	d0, d7
 800550c:	f011 fdfc 	bl	8017108 <sin>
 8005510:	eeb0 7b40 	vmov.f64	d7, d0
 8005514:	ee28 8b07 	vmul.f64	d8, d8, d7
	                       221663.52 *
	                           sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 8005518:	f107 030c 	add.w	r3, r7, #12
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3308      	adds	r3, #8
 8005520:	ed93 6b00 	vldr	d6, [r3]
 8005524:	f107 030c 	add.w	r3, r7, #12
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3310      	adds	r3, #16
 800552c:	ed93 7b00 	vldr	d7, [r3]
 8005530:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005534:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005538:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 80057b0 <IVK+0x3e30>
 800553c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005540:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8005778 <IVK+0x3df8>
 8005544:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005548:	ed9f 6b8d 	vldr	d6, [pc, #564]	; 8005780 <IVK+0x3e00>
 800554c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005550:	eeb0 0b47 	vmov.f64	d0, d7
 8005554:	f011 fdd8 	bl	8017108 <sin>
 8005558:	eeb0 7b40 	vmov.f64	d7, d0
	                       221663.52 *
 800555c:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 8005798 <IVK+0x3e18>
 8005560:	ee27 9b06 	vmul.f64	d9, d7, d6
	                               -0.73665) *
	                           cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8005564:	f107 030c 	add.w	r3, r7, #12
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3308      	adds	r3, #8
 800556c:	ed93 6b00 	vldr	d6, [r3]
 8005570:	f107 030c 	add.w	r3, r7, #12
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3310      	adds	r3, #16
 8005578:	ed93 7b00 	vldr	d7, [r3]
 800557c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005580:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 80057b0 <IVK+0x3e30>
 8005584:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005588:	ed9f 6b7b 	vldr	d6, [pc, #492]	; 8005778 <IVK+0x3df8>
 800558c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005590:	eeb0 0b47 	vmov.f64	d0, d7
 8005594:	f011 fd64 	bl	8017060 <cos>
 8005598:	eeb0 7b40 	vmov.f64	d7, d0
	                               -0.73665) *
 800559c:	ee29 9b07 	vmul.f64	d9, d9, d7
	                           sin(q[0])) +
 80055a0:	f107 030c 	add.w	r3, r7, #12
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	ed93 7b00 	vldr	d7, [r3]
 80055aa:	eeb0 0b47 	vmov.f64	d0, d7
 80055ae:	f011 fdab 	bl	8017108 <sin>
 80055b2:	eeb0 7b40 	vmov.f64	d7, d0
	                           cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80055b6:	ee29 7b07 	vmul.f64	d7, d9, d7
	                           sin(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) -
 80055ba:	ee38 8b47 	vsub.f64	d8, d8, d7
	                      2.6029060499520004E+6 *
	                          cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 80055be:	f107 030c 	add.w	r3, r7, #12
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3308      	adds	r3, #8
 80055c6:	ed93 6b00 	vldr	d6, [r3]
 80055ca:	f107 030c 	add.w	r3, r7, #12
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3310      	adds	r3, #16
 80055d2:	ed93 7b00 	vldr	d7, [r3]
 80055d6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80055da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80055de:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80057b0 <IVK+0x3e30>
 80055e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80055e6:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8005778 <IVK+0x3df8>
 80055ea:	ee37 7b46 	vsub.f64	d7, d7, d6
 80055ee:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8005780 <IVK+0x3e00>
 80055f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80055f6:	eeb0 0b47 	vmov.f64	d0, d7
 80055fa:	f011 fd31 	bl	8017060 <cos>
 80055fe:	eeb0 7b40 	vmov.f64	d7, d0
	                      2.6029060499520004E+6 *
 8005602:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80057a0 <IVK+0x3e20>
 8005606:	ee27 9b06 	vmul.f64	d9, d7, d6
	                              -0.73665) *
	                          sin(q[1] + 1.6845) * sin(q[0])) -
 800560a:	f107 030c 	add.w	r3, r7, #12
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3308      	adds	r3, #8
 8005612:	ed93 7b00 	vldr	d7, [r3]
 8005616:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80057b0 <IVK+0x3e30>
 800561a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800561e:	eeb0 0b47 	vmov.f64	d0, d7
 8005622:	f011 fd71 	bl	8017108 <sin>
 8005626:	eeb0 7b40 	vmov.f64	d7, d0
	                              -0.73665) *
 800562a:	ee29 9b07 	vmul.f64	d9, d9, d7
	                          sin(q[1] + 1.6845) * sin(q[0])) -
 800562e:	f107 030c 	add.w	r3, r7, #12
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	ed93 7b00 	vldr	d7, [r3]
 8005638:	eeb0 0b47 	vmov.f64	d0, d7
 800563c:	f011 fd64 	bl	8017108 <sin>
 8005640:	eeb0 7b40 	vmov.f64	d7, d0
 8005644:	ee29 7b07 	vmul.f64	d7, d9, d7
	                           sin(q[0])) +
 8005648:	ee38 8b07 	vadd.f64	d8, d8, d7
	                     2.6029060499520004E+6 *
	                         sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) +
 800564c:	f107 030c 	add.w	r3, r7, #12
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3308      	adds	r3, #8
 8005654:	ed93 6b00 	vldr	d6, [r3]
 8005658:	f107 030c 	add.w	r3, r7, #12
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3310      	adds	r3, #16
 8005660:	ed93 7b00 	vldr	d7, [r3]
 8005664:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005668:	ee36 7b07 	vadd.f64	d7, d6, d7
 800566c:	ed9f 6b50 	vldr	d6, [pc, #320]	; 80057b0 <IVK+0x3e30>
 8005670:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005674:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8005778 <IVK+0x3df8>
 8005678:	ee37 7b46 	vsub.f64	d7, d7, d6
 800567c:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8005780 <IVK+0x3e00>
 8005680:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005684:	eeb0 0b47 	vmov.f64	d0, d7
 8005688:	f011 fd3e 	bl	8017108 <sin>
 800568c:	eeb0 7b40 	vmov.f64	d7, d0
	                     2.6029060499520004E+6 *
 8005690:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80057a0 <IVK+0x3e20>
 8005694:	ee27 9b06 	vmul.f64	d9, d7, d6
	                             -0.73665) *
	                         cos(q[1] + 1.6845) * sin(q[0])) +
 8005698:	f107 030c 	add.w	r3, r7, #12
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	3308      	adds	r3, #8
 80056a0:	ed93 7b00 	vldr	d7, [r3]
 80056a4:	ed9f 6b42 	vldr	d6, [pc, #264]	; 80057b0 <IVK+0x3e30>
 80056a8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80056ac:	eeb0 0b47 	vmov.f64	d0, d7
 80056b0:	f011 fcd6 	bl	8017060 <cos>
 80056b4:	eeb0 7b40 	vmov.f64	d7, d0
	                             -0.73665) *
 80056b8:	ee29 9b07 	vmul.f64	d9, d9, d7
	                         cos(q[1] + 1.6845) * sin(q[0])) +
 80056bc:	f107 030c 	add.w	r3, r7, #12
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	ed93 7b00 	vldr	d7, [r3]
 80056c6:	eeb0 0b47 	vmov.f64	d0, d7
 80056ca:	f011 fd1d 	bl	8017108 <sin>
 80056ce:	eeb0 7b40 	vmov.f64	d7, d0
 80056d2:	ee29 7b07 	vmul.f64	d7, d9, d7
	                          sin(q[1] + 1.6845) * sin(q[0])) -
 80056d6:	ee38 6b47 	vsub.f64	d6, d8, d7
	                         cos(q[1] + 1.6845) * sin(q[0])) +
 80056da:	ed97 7b60 	vldr	d7, [r7, #384]	; 0x180
 80056de:	ee36 8b07 	vadd.f64	d8, d6, d7
	                    d1) +
	                   190230.12000000002 *
	                       cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 80056e2:	f107 030c 	add.w	r3, r7, #12
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	3308      	adds	r3, #8
 80056ea:	ed93 6b00 	vldr	d6, [r3]
 80056ee:	f107 030c 	add.w	r3, r7, #12
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3310      	adds	r3, #16
 80056f6:	ed93 7b00 	vldr	d7, [r3]
 80056fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80056fe:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 80057b0 <IVK+0x3e30>
 8005702:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005706:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8005778 <IVK+0x3df8>
 800570a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800570e:	eeb0 0b47 	vmov.f64	d0, d7
 8005712:	f011 fca5 	bl	8017060 <cos>
 8005716:	eeb0 7b40 	vmov.f64	d7, d0
	                   190230.12000000002 *
 800571a:	ed9f 6b23 	vldr	d6, [pc, #140]	; 80057a8 <IVK+0x3e28>
 800571e:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       sin(q[1] + 1.6845) * sin(q[0])) -
 8005722:	f107 030c 	add.w	r3, r7, #12
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3308      	adds	r3, #8
 800572a:	ed93 7b00 	vldr	d7, [r3]
 800572e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 80057b0 <IVK+0x3e30>
 8005732:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005736:	eeb0 0b47 	vmov.f64	d0, d7
 800573a:	f011 fce5 	bl	8017108 <sin>
 800573e:	eeb0 7b40 	vmov.f64	d7, d0
	                       cos(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8005742:	ee29 9b07 	vmul.f64	d9, d9, d7
	                       sin(q[1] + 1.6845) * sin(q[0])) -
 8005746:	f107 030c 	add.w	r3, r7, #12
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	ed93 7b00 	vldr	d7, [r3]
 8005750:	eeb0 0b47 	vmov.f64	d0, d7
 8005754:	f011 fcd8 	bl	8017108 <sin>
 8005758:	eeb0 7b40 	vmov.f64	d7, d0
 800575c:	ee29 7b07 	vmul.f64	d7, d9, d7
	                    d1) +
 8005760:	ee38 8b07 	vadd.f64	d8, d8, d7
	                  190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8005764:	f107 030c 	add.w	r3, r7, #12
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3308      	adds	r3, #8
 800576c:	ed93 6b00 	vldr	d6, [r3]
 8005770:	e03e      	b.n	80057f0 <IVK+0x3e70>
 8005772:	bf00      	nop
 8005774:	f3af 8000 	nop.w
 8005778:	39581062 	.word	0x39581062
 800577c:	3fecc8b4 	.word	0x3fecc8b4
 8005780:	05532618 	.word	0x05532618
 8005784:	3fe792a3 	.word	0x3fe792a3
 8005788:	19ce075f 	.word	0x19ce075f
 800578c:	3ff85a51 	.word	0x3ff85a51
 8005790:	66666667 	.word	0x66666667
 8005794:	4109cd36 	.word	0x4109cd36
 8005798:	28f5c28f 	.word	0x28f5c28f
 800579c:	410b0efc 	.word	0x410b0efc
 80057a0:	0664d3c0 	.word	0x0664d3c0
 80057a4:	4143dbcd 	.word	0x4143dbcd
 80057a8:	f5c28f5d 	.word	0xf5c28f5d
 80057ac:	410738b0 	.word	0x410738b0
 80057b0:	45a1cac1 	.word	0x45a1cac1
 80057b4:	3ffaf3b6 	.word	0x3ffaf3b6
 80057b8:	00000000 	.word	0x00000000
 80057bc:	40f56300 	.word	0x40f56300
 80057c0:	851eb852 	.word	0x851eb852
 80057c4:	412f6457 	.word	0x412f6457
 80057c8:	19ce075f 	.word	0x19ce075f
 80057cc:	3ff85a51 	.word	0x3ff85a51
 80057d0:	66666666 	.word	0x66666666
 80057d4:	410e10a6 	.word	0x410e10a6
 80057d8:	05532618 	.word	0x05532618
 80057dc:	3fe792a3 	.word	0x3fe792a3
 80057e0:	45a1cac1 	.word	0x45a1cac1
 80057e4:	3ffaf3b6 	.word	0x3ffaf3b6
 80057e8:	39581062 	.word	0x39581062
 80057ec:	3fecc8b4 	.word	0x3fecc8b4
 80057f0:	f107 030c 	add.w	r3, r7, #12
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	3310      	adds	r3, #16
 80057f8:	ed93 7b00 	vldr	d7, [r3]
 80057fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005800:	ed1f 6b15 	vldr	d6, [pc, #-84]	; 80057b0 <IVK+0x3e30>
 8005804:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005808:	ed1f 6b09 	vldr	d6, [pc, #-36]	; 80057e8 <IVK+0x3e68>
 800580c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005810:	eeb0 0b47 	vmov.f64	d0, d7
 8005814:	f011 fc78 	bl	8017108 <sin>
 8005818:	eeb0 7b40 	vmov.f64	d7, d0
 800581c:	ed1f 6b1e 	vldr	d6, [pc, #-120]	; 80057a8 <IVK+0x3e28>
 8005820:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      cos(q[1] + 1.6845) * sin(q[0])) +
 8005824:	f107 030c 	add.w	r3, r7, #12
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3308      	adds	r3, #8
 800582c:	ed93 7b00 	vldr	d7, [r3]
 8005830:	ed1f 6b21 	vldr	d6, [pc, #-132]	; 80057b0 <IVK+0x3e30>
 8005834:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005838:	eeb0 0b47 	vmov.f64	d0, d7
 800583c:	f011 fc10 	bl	8017060 <cos>
 8005840:	eeb0 7b40 	vmov.f64	d7, d0
	                  190230.12000000002 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) *
 8005844:	ee29 9b07 	vmul.f64	d9, d9, d7
	                      cos(q[1] + 1.6845) * sin(q[0])) +
 8005848:	f107 030c 	add.w	r3, r7, #12
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	ed93 7b00 	vldr	d7, [r3]
 8005852:	eeb0 0b47 	vmov.f64	d0, d7
 8005856:	f011 fc57 	bl	8017108 <sin>
 800585a:	eeb0 7b40 	vmov.f64	d7, d0
 800585e:	ee29 7b07 	vmul.f64	d7, d9, d7
	                       sin(q[1] + 1.6845) * sin(q[0])) -
 8005862:	ee38 6b47 	vsub.f64	d6, d8, d7
	                      cos(q[1] + 1.6845) * sin(q[0])) +
 8005866:	ed97 7b5e 	vldr	d7, [r7, #376]	; 0x178
 800586a:	ee36 8b07 	vadd.f64	d8, d6, d7
	                 d2) +
	                87600.0 *
	                    cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800586e:	f107 030c 	add.w	r3, r7, #12
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	3308      	adds	r3, #8
 8005876:	ed93 6b00 	vldr	d6, [r3]
 800587a:	f107 030c 	add.w	r3, r7, #12
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3310      	adds	r3, #16
 8005882:	ed93 7b00 	vldr	d7, [r3]
 8005886:	ee37 7b07 	vadd.f64	d7, d7, d7
 800588a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800588e:	f107 030c 	add.w	r3, r7, #12
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3318      	adds	r3, #24
 8005896:	ed93 7b00 	vldr	d7, [r3]
 800589a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800589e:	ed1f 6b3c 	vldr	d6, [pc, #-240]	; 80057b0 <IVK+0x3e30>
 80058a2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80058a6:	ed1f 6b30 	vldr	d6, [pc, #-192]	; 80057e8 <IVK+0x3e68>
 80058aa:	ee37 7b46 	vsub.f64	d7, d7, d6
 80058ae:	ed1f 6b36 	vldr	d6, [pc, #-216]	; 80057d8 <IVK+0x3e58>
 80058b2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80058b6:	ed1f 6b3c 	vldr	d6, [pc, #-240]	; 80057c8 <IVK+0x3e48>
 80058ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 80058be:	eeb0 0b47 	vmov.f64	d0, d7
 80058c2:	f011 fbcd 	bl	8017060 <cos>
 80058c6:	eeb0 7b40 	vmov.f64	d7, d0
	                87600.0 *
 80058ca:	ed1f 6b45 	vldr	d6, [pc, #-276]	; 80057b8 <IVK+0x3e38>
 80058ce:	ee27 9b06 	vmul.f64	d9, d7, d6
	                         -0.73665) +
	                        1.52205) *
	                    sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80058d2:	f107 030c 	add.w	r3, r7, #12
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3308      	adds	r3, #8
 80058da:	ed93 6b00 	vldr	d6, [r3]
 80058de:	f107 030c 	add.w	r3, r7, #12
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	3310      	adds	r3, #16
 80058e6:	ed93 7b00 	vldr	d7, [r3]
 80058ea:	ee37 7b07 	vadd.f64	d7, d7, d7
 80058ee:	ee36 6b07 	vadd.f64	d6, d6, d7
 80058f2:	f107 030c 	add.w	r3, r7, #12
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3318      	adds	r3, #24
 80058fa:	ed93 7b00 	vldr	d7, [r3]
 80058fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005902:	ed1f 6b49 	vldr	d6, [pc, #-292]	; 80057e0 <IVK+0x3e60>
 8005906:	ee37 7b06 	vadd.f64	d7, d7, d6
 800590a:	ed1f 6b49 	vldr	d6, [pc, #-292]	; 80057e8 <IVK+0x3e68>
 800590e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005912:	ed1f 6b4f 	vldr	d6, [pc, #-316]	; 80057d8 <IVK+0x3e58>
 8005916:	ee37 7b46 	vsub.f64	d7, d7, d6
 800591a:	ed1f 6b55 	vldr	d6, [pc, #-340]	; 80057c8 <IVK+0x3e48>
 800591e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005922:	eeb0 0b47 	vmov.f64	d0, d7
 8005926:	f011 fbef 	bl	8017108 <sin>
 800592a:	eeb0 7b40 	vmov.f64	d7, d0
	                        1.52205) *
 800592e:	ee29 9b07 	vmul.f64	d9, d9, d7
	                         -0.73665) +
	                        1.52205) *
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 8005932:	f107 030c 	add.w	r3, r7, #12
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	3308      	adds	r3, #8
 800593a:	ed93 6b00 	vldr	d6, [r3]
 800593e:	f107 030c 	add.w	r3, r7, #12
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3310      	adds	r3, #16
 8005946:	ed93 7b00 	vldr	d7, [r3]
 800594a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800594e:	ed1f 6b5c 	vldr	d6, [pc, #-368]	; 80057e0 <IVK+0x3e60>
 8005952:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005956:	ed1f 6b5c 	vldr	d6, [pc, #-368]	; 80057e8 <IVK+0x3e68>
 800595a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800595e:	eeb0 0b47 	vmov.f64	d0, d7
 8005962:	f011 fb7d 	bl	8017060 <cos>
 8005966:	eeb0 7b40 	vmov.f64	d7, d0
	                        1.52205) *
 800596a:	ee29 9b07 	vmul.f64	d9, d9, d7
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 800596e:	f107 030c 	add.w	r3, r7, #12
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	ed93 7b00 	vldr	d7, [r3]
 8005978:	eeb0 0b47 	vmov.f64	d0, d7
 800597c:	f011 fb70 	bl	8017060 <cos>
 8005980:	eeb0 7b40 	vmov.f64	d7, d0
 8005984:	ee29 7b07 	vmul.f64	d7, d9, d7
	                 d2) +
 8005988:	ee38 8b07 	vadd.f64	d8, d8, d7
	               1.02865176E+6 *
	                   cos((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 800598c:	f107 030c 	add.w	r3, r7, #12
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3308      	adds	r3, #8
 8005994:	ed93 6b00 	vldr	d6, [r3]
 8005998:	f107 030c 	add.w	r3, r7, #12
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3310      	adds	r3, #16
 80059a0:	ed93 7b00 	vldr	d7, [r3]
 80059a4:	ee37 7b07 	vadd.f64	d7, d7, d7
 80059a8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80059ac:	f107 030c 	add.w	r3, r7, #12
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3318      	adds	r3, #24
 80059b4:	ed93 7b00 	vldr	d7, [r3]
 80059b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80059bc:	ed1f 6b78 	vldr	d6, [pc, #-480]	; 80057e0 <IVK+0x3e60>
 80059c0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80059c4:	ed1f 6b78 	vldr	d6, [pc, #-480]	; 80057e8 <IVK+0x3e68>
 80059c8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80059cc:	ed1f 6b7e 	vldr	d6, [pc, #-504]	; 80057d8 <IVK+0x3e58>
 80059d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80059d4:	ed1f 6b84 	vldr	d6, [pc, #-528]	; 80057c8 <IVK+0x3e48>
 80059d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80059dc:	eeb0 0b47 	vmov.f64	d0, d7
 80059e0:	f011 fb3e 	bl	8017060 <cos>
 80059e4:	eeb0 7b40 	vmov.f64	d7, d0
	               1.02865176E+6 *
 80059e8:	ed1f 6b8b 	vldr	d6, [pc, #-556]	; 80057c0 <IVK+0x3e40>
 80059ec:	ee27 9b06 	vmul.f64	d9, d7, d6
	                        -0.73665) +
	                       1.52205) *
	                   sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 80059f0:	f107 030c 	add.w	r3, r7, #12
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3308      	adds	r3, #8
 80059f8:	ed93 6b00 	vldr	d6, [r3]
 80059fc:	f107 030c 	add.w	r3, r7, #12
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	3310      	adds	r3, #16
 8005a04:	ed93 7b00 	vldr	d7, [r3]
 8005a08:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005a0c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005a10:	f107 030c 	add.w	r3, r7, #12
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3318      	adds	r3, #24
 8005a18:	ed93 7b00 	vldr	d7, [r3]
 8005a1c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005a20:	ed1f 6b91 	vldr	d6, [pc, #-580]	; 80057e0 <IVK+0x3e60>
 8005a24:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005a28:	ed1f 6b91 	vldr	d6, [pc, #-580]	; 80057e8 <IVK+0x3e68>
 8005a2c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005a30:	ed1f 6b97 	vldr	d6, [pc, #-604]	; 80057d8 <IVK+0x3e58>
 8005a34:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005a38:	ed1f 6b9d 	vldr	d6, [pc, #-628]	; 80057c8 <IVK+0x3e48>
 8005a3c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005a40:	eeb0 0b47 	vmov.f64	d0, d7
 8005a44:	f011 fb60 	bl	8017108 <sin>
 8005a48:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 8005a4c:	ee29 9b07 	vmul.f64	d9, d9, d7
	                        -0.73665) +
	                       1.52205) *
	                   cos(q[1] + 1.6845) * cos(q[0])) +
 8005a50:	f107 030c 	add.w	r3, r7, #12
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3308      	adds	r3, #8
 8005a58:	ed93 7b00 	vldr	d7, [r3]
 8005a5c:	ed1f 6ba0 	vldr	d6, [pc, #-640]	; 80057e0 <IVK+0x3e60>
 8005a60:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005a64:	eeb0 0b47 	vmov.f64	d0, d7
 8005a68:	f011 fafa 	bl	8017060 <cos>
 8005a6c:	eeb0 7b40 	vmov.f64	d7, d0
	                       1.52205) *
 8005a70:	ee29 9b07 	vmul.f64	d9, d9, d7
	                   cos(q[1] + 1.6845) * cos(q[0])) +
 8005a74:	f107 030c 	add.w	r3, r7, #12
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	ed93 7b00 	vldr	d7, [r3]
 8005a7e:	eeb0 0b47 	vmov.f64	d0, d7
 8005a82:	f011 faed 	bl	8017060 <cos>
 8005a86:	eeb0 7b40 	vmov.f64	d7, d0
 8005a8a:	ee29 7b07 	vmul.f64	d7, d9, d7
	                    cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 8005a8e:	ee38 8b07 	vadd.f64	d8, d8, d7
	              246292.8 *
	                  sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005a92:	f107 030c 	add.w	r3, r7, #12
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3308      	adds	r3, #8
 8005a9a:	ed93 6b00 	vldr	d6, [r3]
 8005a9e:	f107 030c 	add.w	r3, r7, #12
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3310      	adds	r3, #16
 8005aa6:	ed93 7b00 	vldr	d7, [r3]
 8005aaa:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005aae:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005ab2:	f107 030c 	add.w	r3, r7, #12
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	3318      	adds	r3, #24
 8005aba:	ed93 7b00 	vldr	d7, [r3]
 8005abe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005ac2:	ed1f 6bb9 	vldr	d6, [pc, #-740]	; 80057e0 <IVK+0x3e60>
 8005ac6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005aca:	ed1f 6bb9 	vldr	d6, [pc, #-740]	; 80057e8 <IVK+0x3e68>
 8005ace:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005ad2:	ed1f 6bbf 	vldr	d6, [pc, #-764]	; 80057d8 <IVK+0x3e58>
 8005ad6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005ada:	ed1f 6bc5 	vldr	d6, [pc, #-788]	; 80057c8 <IVK+0x3e48>
 8005ade:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005ae2:	eeb0 0b47 	vmov.f64	d0, d7
 8005ae6:	f011 fb0f 	bl	8017108 <sin>
 8005aea:	eeb0 7b40 	vmov.f64	d7, d0
	              246292.8 *
 8005aee:	ed1f 6bc8 	vldr	d6, [pc, #-800]	; 80057d0 <IVK+0x3e50>
 8005af2:	ee27 9b06 	vmul.f64	d9, d7, d6
	                       -0.73665) +
	                      1.52205) *
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005af6:	f107 030c 	add.w	r3, r7, #12
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3308      	adds	r3, #8
 8005afe:	ed93 6b00 	vldr	d6, [r3]
 8005b02:	f107 030c 	add.w	r3, r7, #12
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3310      	adds	r3, #16
 8005b0a:	ed93 7b00 	vldr	d7, [r3]
 8005b0e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005b12:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005b16:	ed1f 6bce 	vldr	d6, [pc, #-824]	; 80057e0 <IVK+0x3e60>
 8005b1a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005b1e:	ed1f 6bce 	vldr	d6, [pc, #-824]	; 80057e8 <IVK+0x3e68>
 8005b22:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005b26:	ed1f 6bd4 	vldr	d6, [pc, #-848]	; 80057d8 <IVK+0x3e58>
 8005b2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005b2e:	eeb0 0b47 	vmov.f64	d0, d7
 8005b32:	f011 fa95 	bl	8017060 <cos>
 8005b36:	eeb0 7b40 	vmov.f64	d7, d0
	                      1.52205) *
 8005b3a:	ee29 9b07 	vmul.f64	d9, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 8005b3e:	f107 030c 	add.w	r3, r7, #12
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3308      	adds	r3, #8
 8005b46:	ed93 6b00 	vldr	d6, [r3]
 8005b4a:	f107 030c 	add.w	r3, r7, #12
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	3310      	adds	r3, #16
 8005b52:	ed93 7b00 	vldr	d7, [r3]
 8005b56:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005b5a:	ed1f 6bdf 	vldr	d6, [pc, #-892]	; 80057e0 <IVK+0x3e60>
 8005b5e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005b62:	ed1f 6bdf 	vldr	d6, [pc, #-892]	; 80057e8 <IVK+0x3e68>
 8005b66:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005b6a:	eeb0 0b47 	vmov.f64	d0, d7
 8005b6e:	f011 facb 	bl	8017108 <sin>
 8005b72:	eeb0 7b40 	vmov.f64	d7, d0
	                  cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005b76:	ee29 9b07 	vmul.f64	d9, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 8005b7a:	f107 030c 	add.w	r3, r7, #12
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	ed93 7b00 	vldr	d7, [r3]
 8005b84:	eeb0 0b47 	vmov.f64	d0, d7
 8005b88:	f011 fa6a 	bl	8017060 <cos>
 8005b8c:	eeb0 7b40 	vmov.f64	d7, d0
 8005b90:	ee29 7b07 	vmul.f64	d7, d9, d7
	                   cos(q[1] + 1.6845) * cos(q[0])) +
 8005b94:	ee38 8b07 	vadd.f64	d8, d8, d7
	             246292.8 *
	                 sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005b98:	f107 030c 	add.w	r3, r7, #12
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3308      	adds	r3, #8
 8005ba0:	ed93 6b00 	vldr	d6, [r3]
 8005ba4:	f107 030c 	add.w	r3, r7, #12
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3310      	adds	r3, #16
 8005bac:	ed93 7b00 	vldr	d7, [r3]
 8005bb0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005bb4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005bb8:	f107 030c 	add.w	r3, r7, #12
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3318      	adds	r3, #24
 8005bc0:	ed93 7b00 	vldr	d7, [r3]
 8005bc4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005bc8:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8005f88 <IVK+0x4608>
 8005bcc:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005bd0:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8005f90 <IVK+0x4610>
 8005bd4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005bd8:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8005f98 <IVK+0x4618>
 8005bdc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005be0:	ed9f 6bef 	vldr	d6, [pc, #956]	; 8005fa0 <IVK+0x4620>
 8005be4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005be8:	eeb0 0b47 	vmov.f64	d0, d7
 8005bec:	f011 fa8c 	bl	8017108 <sin>
 8005bf0:	eeb0 7b40 	vmov.f64	d7, d0
	             246292.8 *
 8005bf4:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8005fa8 <IVK+0x4628>
 8005bf8:	ee27 9b06 	vmul.f64	d9, d7, d6
	                      -0.73665) +
	                     1.52205) *
	                 sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005bfc:	f107 030c 	add.w	r3, r7, #12
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3308      	adds	r3, #8
 8005c04:	ed93 6b00 	vldr	d6, [r3]
 8005c08:	f107 030c 	add.w	r3, r7, #12
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	3310      	adds	r3, #16
 8005c10:	ed93 7b00 	vldr	d7, [r3]
 8005c14:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005c18:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005c1c:	ed9f 6bda 	vldr	d6, [pc, #872]	; 8005f88 <IVK+0x4608>
 8005c20:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005c24:	ed9f 6bda 	vldr	d6, [pc, #872]	; 8005f90 <IVK+0x4610>
 8005c28:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005c2c:	ed9f 6bda 	vldr	d6, [pc, #872]	; 8005f98 <IVK+0x4618>
 8005c30:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005c34:	eeb0 0b47 	vmov.f64	d0, d7
 8005c38:	f011 fa66 	bl	8017108 <sin>
 8005c3c:	eeb0 7b40 	vmov.f64	d7, d0
	                     1.52205) *
 8005c40:	ee29 9b07 	vmul.f64	d9, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 8005c44:	f107 030c 	add.w	r3, r7, #12
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	3308      	adds	r3, #8
 8005c4c:	ed93 6b00 	vldr	d6, [r3]
 8005c50:	f107 030c 	add.w	r3, r7, #12
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3310      	adds	r3, #16
 8005c58:	ed93 7b00 	vldr	d7, [r3]
 8005c5c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005c60:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8005f88 <IVK+0x4608>
 8005c64:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005c68:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8005f90 <IVK+0x4610>
 8005c6c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005c70:	eeb0 0b47 	vmov.f64	d0, d7
 8005c74:	f011 f9f4 	bl	8017060 <cos>
 8005c78:	eeb0 7b40 	vmov.f64	d7, d0
	                 sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005c7c:	ee29 9b07 	vmul.f64	d9, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 8005c80:	f107 030c 	add.w	r3, r7, #12
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	ed93 7b00 	vldr	d7, [r3]
 8005c8a:	eeb0 0b47 	vmov.f64	d0, d7
 8005c8e:	f011 f9e7 	bl	8017060 <cos>
 8005c92:	eeb0 7b40 	vmov.f64	d7, d0
 8005c96:	ee29 7b07 	vmul.f64	d7, d9, d7
	                  sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) -
 8005c9a:	ee38 8b47 	vsub.f64	d8, d8, d7
	            2.8921178332800004E+6 *
	                sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005c9e:	f107 030c 	add.w	r3, r7, #12
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	ed93 6b00 	vldr	d6, [r3]
 8005caa:	f107 030c 	add.w	r3, r7, #12
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3310      	adds	r3, #16
 8005cb2:	ed93 7b00 	vldr	d7, [r3]
 8005cb6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005cba:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005cbe:	f107 030c 	add.w	r3, r7, #12
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	3318      	adds	r3, #24
 8005cc6:	ed93 7b00 	vldr	d7, [r3]
 8005cca:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005cce:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8005f88 <IVK+0x4608>
 8005cd2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005cd6:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8005f90 <IVK+0x4610>
 8005cda:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005cde:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8005f98 <IVK+0x4618>
 8005ce2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005ce6:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8005fa0 <IVK+0x4620>
 8005cea:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005cee:	eeb0 0b47 	vmov.f64	d0, d7
 8005cf2:	f011 fa09 	bl	8017108 <sin>
 8005cf6:	eeb0 7b40 	vmov.f64	d7, d0
	            2.8921178332800004E+6 *
 8005cfa:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8005fb0 <IVK+0x4630>
 8005cfe:	ee27 9b06 	vmul.f64	d9, d7, d6
	                     -0.73665) +
	                    1.52205) *
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005d02:	f107 030c 	add.w	r3, r7, #12
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	3308      	adds	r3, #8
 8005d0a:	ed93 6b00 	vldr	d6, [r3]
 8005d0e:	f107 030c 	add.w	r3, r7, #12
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3310      	adds	r3, #16
 8005d16:	ed93 7b00 	vldr	d7, [r3]
 8005d1a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005d1e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005d22:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8005f88 <IVK+0x4608>
 8005d26:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d2a:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8005f90 <IVK+0x4610>
 8005d2e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005d32:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8005f98 <IVK+0x4618>
 8005d36:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005d3a:	eeb0 0b47 	vmov.f64	d0, d7
 8005d3e:	f011 f98f 	bl	8017060 <cos>
 8005d42:	eeb0 7b40 	vmov.f64	d7, d0
	                    1.52205) *
 8005d46:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(q[1] + 1.6845) * cos(q[0])) -
 8005d4a:	f107 030c 	add.w	r3, r7, #12
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3308      	adds	r3, #8
 8005d52:	ed93 7b00 	vldr	d7, [r3]
 8005d56:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8005f88 <IVK+0x4608>
 8005d5a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005d5e:	eeb0 0b47 	vmov.f64	d0, d7
 8005d62:	f011 f9d1 	bl	8017108 <sin>
 8005d66:	eeb0 7b40 	vmov.f64	d7, d0
	                cos((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005d6a:	ee29 9b07 	vmul.f64	d9, d9, d7
	                sin(q[1] + 1.6845) * cos(q[0])) -
 8005d6e:	f107 030c 	add.w	r3, r7, #12
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	ed93 7b00 	vldr	d7, [r3]
 8005d78:	eeb0 0b47 	vmov.f64	d0, d7
 8005d7c:	f011 f970 	bl	8017060 <cos>
 8005d80:	eeb0 7b40 	vmov.f64	d7, d0
 8005d84:	ee29 7b07 	vmul.f64	d7, d9, d7
	                 cos(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[0])) +
 8005d88:	ee38 8b07 	vadd.f64	d8, d8, d7
	           2.8921178332800004E+6 *
	               sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005d8c:	f107 030c 	add.w	r3, r7, #12
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3308      	adds	r3, #8
 8005d94:	ed93 6b00 	vldr	d6, [r3]
 8005d98:	f107 030c 	add.w	r3, r7, #12
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	3310      	adds	r3, #16
 8005da0:	ed93 7b00 	vldr	d7, [r3]
 8005da4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005da8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005dac:	f107 030c 	add.w	r3, r7, #12
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3318      	adds	r3, #24
 8005db4:	ed93 7b00 	vldr	d7, [r3]
 8005db8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005dbc:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8005f88 <IVK+0x4608>
 8005dc0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005dc4:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8005f90 <IVK+0x4610>
 8005dc8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005dcc:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8005f98 <IVK+0x4618>
 8005dd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005dd4:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8005fa0 <IVK+0x4620>
 8005dd8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005ddc:	eeb0 0b47 	vmov.f64	d0, d7
 8005de0:	f011 f992 	bl	8017108 <sin>
 8005de4:	eeb0 7b40 	vmov.f64	d7, d0
	           2.8921178332800004E+6 *
 8005de8:	ed9f 6b71 	vldr	d6, [pc, #452]	; 8005fb0 <IVK+0x4630>
 8005dec:	ee27 9b06 	vmul.f64	d9, d7, d6
	                    -0.73665) +
	                   1.52205) *
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005df0:	f107 030c 	add.w	r3, r7, #12
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3308      	adds	r3, #8
 8005df8:	ed93 6b00 	vldr	d6, [r3]
 8005dfc:	f107 030c 	add.w	r3, r7, #12
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3310      	adds	r3, #16
 8005e04:	ed93 7b00 	vldr	d7, [r3]
 8005e08:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005e0c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005e10:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8005f88 <IVK+0x4608>
 8005e14:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005e18:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8005f90 <IVK+0x4610>
 8005e1c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005e20:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8005f98 <IVK+0x4618>
 8005e24:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005e28:	eeb0 0b47 	vmov.f64	d0, d7
 8005e2c:	f011 f96c 	bl	8017108 <sin>
 8005e30:	eeb0 7b40 	vmov.f64	d7, d0
	                   1.52205) *
 8005e34:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(q[1] + 1.6845) * cos(q[0])) +
 8005e38:	f107 030c 	add.w	r3, r7, #12
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3308      	adds	r3, #8
 8005e40:	ed93 7b00 	vldr	d7, [r3]
 8005e44:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8005f88 <IVK+0x4608>
 8005e48:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005e4c:	eeb0 0b47 	vmov.f64	d0, d7
 8005e50:	f011 f906 	bl	8017060 <cos>
 8005e54:	eeb0 7b40 	vmov.f64	d7, d0
	               sin((((q[1] + 2.0 * q[2]) + 1.6845) + -0.8995) + -0.73665) *
 8005e58:	ee29 9b07 	vmul.f64	d9, d9, d7
	               cos(q[1] + 1.6845) * cos(q[0])) +
 8005e5c:	f107 030c 	add.w	r3, r7, #12
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	ed93 7b00 	vldr	d7, [r3]
 8005e66:	eeb0 0b47 	vmov.f64	d0, d7
 8005e6a:	f011 f8f9 	bl	8017060 <cos>
 8005e6e:	eeb0 7b40 	vmov.f64	d7, d0
 8005e72:	ee29 7b07 	vmul.f64	d7, d9, d7
	                sin(q[1] + 1.6845) * cos(q[0])) -
 8005e76:	ee38 8b47 	vsub.f64	d8, d8, d7
	          211366.80000000002 *
	              sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005e7a:	f107 030c 	add.w	r3, r7, #12
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3308      	adds	r3, #8
 8005e82:	ed93 6b00 	vldr	d6, [r3]
 8005e86:	f107 030c 	add.w	r3, r7, #12
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3310      	adds	r3, #16
 8005e8e:	ed93 7b00 	vldr	d7, [r3]
 8005e92:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005e96:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005e9a:	f107 030c 	add.w	r3, r7, #12
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3318      	adds	r3, #24
 8005ea2:	ed93 7b00 	vldr	d7, [r3]
 8005ea6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005eaa:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8005f88 <IVK+0x4608>
 8005eae:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005eb2:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8005f90 <IVK+0x4610>
 8005eb6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005eba:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8005f98 <IVK+0x4618>
 8005ebe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005ec2:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8005fa0 <IVK+0x4620>
 8005ec6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005eca:	eeb0 0b47 	vmov.f64	d0, d7
 8005ece:	f011 f91b 	bl	8017108 <sin>
 8005ed2:	eeb0 7b40 	vmov.f64	d7, d0
	          211366.80000000002 *
 8005ed6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8005fc8 <IVK+0x4648>
 8005eda:	ee27 9b06 	vmul.f64	d9, d7, d6
	                   -0.73665) +
	                  1.52205) *
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8005ede:	f107 030c 	add.w	r3, r7, #12
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3308      	adds	r3, #8
 8005ee6:	ed93 6b00 	vldr	d6, [r3]
 8005eea:	f107 030c 	add.w	r3, r7, #12
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3310      	adds	r3, #16
 8005ef2:	ed93 7b00 	vldr	d7, [r3]
 8005ef6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005efa:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8005f88 <IVK+0x4608>
 8005efe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f02:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8005f90 <IVK+0x4610>
 8005f06:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005f0a:	eeb0 0b47 	vmov.f64	d0, d7
 8005f0e:	f011 f8a7 	bl	8017060 <cos>
 8005f12:	eeb0 7b40 	vmov.f64	d7, d0
	                  1.52205) *
 8005f16:	ee29 9b07 	vmul.f64	d9, d9, d7
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8005f1a:	f107 030c 	add.w	r3, r7, #12
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3308      	adds	r3, #8
 8005f22:	ed93 7b00 	vldr	d7, [r3]
 8005f26:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8005f88 <IVK+0x4608>
 8005f2a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8005f2e:	eeb0 0b47 	vmov.f64	d0, d7
 8005f32:	f011 f8e9 	bl	8017108 <sin>
 8005f36:	eeb0 7b40 	vmov.f64	d7, d0
 8005f3a:	ee29 9b07 	vmul.f64	d9, d9, d7
	              cos(q[0])) -
 8005f3e:	f107 030c 	add.w	r3, r7, #12
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	ed93 7b00 	vldr	d7, [r3]
 8005f48:	eeb0 0b47 	vmov.f64	d0, d7
 8005f4c:	f011 f888 	bl	8017060 <cos>
 8005f50:	eeb0 7b40 	vmov.f64	d7, d0
	              cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[1] + 1.6845) *
 8005f54:	ee29 7b07 	vmul.f64	d7, d9, d7
	               cos(q[1] + 1.6845) * cos(q[0])) +
 8005f58:	ee38 8b07 	vadd.f64	d8, d8, d7
	         211366.80000000002 *
	             sin((((((q[1] + 2.0 * q[2]) + q[3]) + 1.6845) + -0.8995) +
 8005f5c:	f107 030c 	add.w	r3, r7, #12
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3308      	adds	r3, #8
 8005f64:	ed93 6b00 	vldr	d6, [r3]
 8005f68:	f107 030c 	add.w	r3, r7, #12
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3310      	adds	r3, #16
 8005f70:	ed93 7b00 	vldr	d7, [r3]
 8005f74:	ee37 7b07 	vadd.f64	d7, d7, d7
 8005f78:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005f7c:	f107 030c 	add.w	r3, r7, #12
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	e039      	b.n	8005ff8 <IVK+0x4678>
 8005f84:	f3af 8000 	nop.w
 8005f88:	45a1cac1 	.word	0x45a1cac1
 8005f8c:	3ffaf3b6 	.word	0x3ffaf3b6
 8005f90:	39581062 	.word	0x39581062
 8005f94:	3fecc8b4 	.word	0x3fecc8b4
 8005f98:	05532618 	.word	0x05532618
 8005f9c:	3fe792a3 	.word	0x3fe792a3
 8005fa0:	19ce075f 	.word	0x19ce075f
 8005fa4:	3ff85a51 	.word	0x3ff85a51
 8005fa8:	66666666 	.word	0x66666666
 8005fac:	410e10a6 	.word	0x410e10a6
 8005fb0:	eaa8eb47 	.word	0xeaa8eb47
 8005fb4:	414610aa 	.word	0x414610aa
 8005fb8:	05532618 	.word	0x05532618
 8005fbc:	3fe792a3 	.word	0x3fe792a3
 8005fc0:	19ce075f 	.word	0x19ce075f
 8005fc4:	3ff85a51 	.word	0x3ff85a51
 8005fc8:	66666667 	.word	0x66666667
 8005fcc:	4109cd36 	.word	0x4109cd36
 8005fd0:	39581062 	.word	0x39581062
 8005fd4:	3fecc8b4 	.word	0x3fecc8b4
 8005fd8:	00000000 	.word	0x00000000
 8005fdc:	404e0000 	.word	0x404e0000
 8005fe0:	45a1cac1 	.word	0x45a1cac1
 8005fe4:	3ffaf3b6 	.word	0x3ffaf3b6
 8005fe8:	b020c49c 	.word	0xb020c49c
 8005fec:	40860472 	.word	0x40860472
 8005ff0:	00000000 	.word	0x00000000
 8005ff4:	40440000 	.word	0x40440000
 8005ff8:	3318      	adds	r3, #24
 8005ffa:	ed93 7b00 	vldr	d7, [r3]
 8005ffe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006002:	ed1f 6b09 	vldr	d6, [pc, #-36]	; 8005fe0 <IVK+0x4660>
 8006006:	ee37 7b06 	vadd.f64	d7, d7, d6
 800600a:	ed1f 6b0f 	vldr	d6, [pc, #-60]	; 8005fd0 <IVK+0x4650>
 800600e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006012:	ed1f 6b17 	vldr	d6, [pc, #-92]	; 8005fb8 <IVK+0x4638>
 8006016:	ee37 7b46 	vsub.f64	d7, d7, d6
 800601a:	ed1f 6b17 	vldr	d6, [pc, #-92]	; 8005fc0 <IVK+0x4640>
 800601e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006022:	eeb0 0b47 	vmov.f64	d0, d7
 8006026:	f011 f86f 	bl	8017108 <sin>
 800602a:	eeb0 7b40 	vmov.f64	d7, d0
	         211366.80000000002 *
 800602e:	ed1f 6b1a 	vldr	d6, [pc, #-104]	; 8005fc8 <IVK+0x4648>
 8006032:	ee27 9b06 	vmul.f64	d9, d7, d6
	                  -0.73665) +
	                 1.52205) *
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8006036:	f107 030c 	add.w	r3, r7, #12
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3308      	adds	r3, #8
 800603e:	ed93 6b00 	vldr	d6, [r3]
 8006042:	f107 030c 	add.w	r3, r7, #12
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	3310      	adds	r3, #16
 800604a:	ed93 7b00 	vldr	d7, [r3]
 800604e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006052:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 8005fe0 <IVK+0x4660>
 8006056:	ee37 7b06 	vadd.f64	d7, d7, d6
 800605a:	ed1f 6b23 	vldr	d6, [pc, #-140]	; 8005fd0 <IVK+0x4650>
 800605e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006062:	eeb0 0b47 	vmov.f64	d0, d7
 8006066:	f011 f84f 	bl	8017108 <sin>
 800606a:	eeb0 7b40 	vmov.f64	d7, d0
	                 1.52205) *
 800606e:	ee29 9b07 	vmul.f64	d9, d9, d7
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 8006072:	f107 030c 	add.w	r3, r7, #12
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3308      	adds	r3, #8
 800607a:	ed93 7b00 	vldr	d7, [r3]
 800607e:	ed1f 6b28 	vldr	d6, [pc, #-160]	; 8005fe0 <IVK+0x4660>
 8006082:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006086:	eeb0 0b47 	vmov.f64	d0, d7
 800608a:	f010 ffe9 	bl	8017060 <cos>
 800608e:	eeb0 7b40 	vmov.f64	d7, d0
 8006092:	ee29 9b07 	vmul.f64	d9, d9, d7
	             cos(q[0]))) /
 8006096:	f107 030c 	add.w	r3, r7, #12
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	ed93 7b00 	vldr	d7, [r3]
 80060a0:	eeb0 0b47 	vmov.f64	d0, d7
 80060a4:	f010 ffdc 	bl	8017060 <cos>
 80060a8:	eeb0 7b40 	vmov.f64	d7, d0
	             sin(((q[1] + q[2]) + 1.6845) + -0.8995) * cos(q[1] + 1.6845) *
 80060ac:	ee29 7b07 	vmul.f64	d7, d9, d7
	              cos(q[0])) -
 80060b0:	ee38 7b47 	vsub.f64	d7, d8, d7
	      -(4.0 *
 80060b4:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80060b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80060bc:	eeb1 5b47 	vneg.f64	d5, d7
	             cos(q[0]))) /
 80060c0:	ed97 6b7a 	vldr	d6, [r7, #488]	; 0x1e8
 80060c4:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[9] =
 80060c8:	f107 0310 	add.w	r3, r7, #16
 80060cc:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	      d;
	  dv[14] = -(40.0 * cos(q[0]) *
 80060d0:	f107 030c 	add.w	r3, r7, #12
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	ed93 7b00 	vldr	d7, [r3]
 80060da:	eeb0 0b47 	vmov.f64	d0, d7
 80060de:	f010 ffbf 	bl	8017060 <cos>
 80060e2:	eeb0 7b40 	vmov.f64	d7, d0
 80060e6:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 8005ff0 <IVK+0x4670>
 80060ea:	ee27 8b06 	vmul.f64	d8, d7, d6
	             (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) +
 80060ee:	f107 030c 	add.w	r3, r7, #12
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3308      	adds	r3, #8
 80060f6:	ed93 6b00 	vldr	d6, [r3]
 80060fa:	f107 030c 	add.w	r3, r7, #12
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3310      	adds	r3, #16
 8006102:	ed93 7b00 	vldr	d7, [r3]
 8006106:	ee36 7b07 	vadd.f64	d7, d6, d7
 800610a:	ed1f 6b4b 	vldr	d6, [pc, #-300]	; 8005fe0 <IVK+0x4660>
 800610e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006112:	ed1f 6b51 	vldr	d6, [pc, #-324]	; 8005fd0 <IVK+0x4650>
 8006116:	ee37 7b46 	vsub.f64	d7, d7, d6
 800611a:	eeb0 0b47 	vmov.f64	d0, d7
 800611e:	f010 ff9f 	bl	8017060 <cos>
 8006122:	eeb0 7b40 	vmov.f64	d7, d0
 8006126:	ed1f 6b54 	vldr	d6, [pc, #-336]	; 8005fd8 <IVK+0x4658>
 800612a:	ee27 9b06 	vmul.f64	d9, d7, d6
	              704.556 * cos(q[1] + 1.6845))) /
 800612e:	f107 030c 	add.w	r3, r7, #12
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3308      	adds	r3, #8
 8006136:	ed93 7b00 	vldr	d7, [r3]
 800613a:	ed1f 6b57 	vldr	d6, [pc, #-348]	; 8005fe0 <IVK+0x4660>
 800613e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006142:	eeb0 0b47 	vmov.f64	d0, d7
 8006146:	f010 ff8b 	bl	8017060 <cos>
 800614a:	eeb0 7b40 	vmov.f64	d7, d0
 800614e:	ed1f 6b5a 	vldr	d6, [pc, #-360]	; 8005fe8 <IVK+0x4668>
 8006152:	ee27 7b06 	vmul.f64	d7, d7, d6
	             (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8006156:	ee39 7b07 	vadd.f64	d7, d9, d7
	  dv[14] = -(40.0 * cos(q[0]) *
 800615a:	ee28 7b07 	vmul.f64	d7, d8, d7
 800615e:	eeb1 5b47 	vneg.f64	d5, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8006162:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8006166:	ee27 6b07 	vmul.f64	d6, d7, d7
 800616a:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800616e:	ee26 6b07 	vmul.f64	d6, d6, d7
	                             d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8006172:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8006176:	ee27 4b07 	vmul.f64	d4, d7, d7
 800617a:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 800617e:	ee24 7b07 	vmul.f64	d7, d4, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8006182:	ee36 6b47 	vsub.f64	d6, d6, d7
	                            d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006186:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800618a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800618e:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8006192:	ee24 7b07 	vmul.f64	d7, d4, d7
	                             d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8006196:	ee36 6b07 	vadd.f64	d6, d6, d7
	                           d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 800619a:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800619e:	ee27 4b07 	vmul.f64	d4, d7, d7
 80061a2:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 80061a6:	ee24 7b07 	vmul.f64	d7, d4, d7
	                            d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80061aa:	ee36 6b47 	vsub.f64	d6, d6, d7
	                          d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 80061ae:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80061b2:	ee27 4b07 	vmul.f64	d4, d7, d7
 80061b6:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 80061ba:	ee24 7b07 	vmul.f64	d7, d4, d7
	                           d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80061be:	ee36 6b07 	vadd.f64	d6, d6, d7
	                         d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80061c2:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80061c6:	ee27 4b07 	vmul.f64	d4, d7, d7
 80061ca:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 80061ce:	ee24 7b07 	vmul.f64	d7, d4, d7
	                          d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 80061d2:	ee36 6b47 	vsub.f64	d6, d6, d7
	                        d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80061d6:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80061da:	ee27 4b07 	vmul.f64	d4, d7, d7
 80061de:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 80061e2:	ee24 7b07 	vmul.f64	d7, d4, d7
	                         d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80061e6:	ee36 6b07 	vadd.f64	d6, d6, d7
	                       d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80061ea:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80061ee:	ee27 4b07 	vmul.f64	d4, d7, d7
 80061f2:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 80061f6:	ee24 7b07 	vmul.f64	d7, d4, d7
	                        d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80061fa:	ee36 6b47 	vsub.f64	d6, d6, d7
	                      d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 80061fe:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8006202:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006206:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 800620a:	ee24 7b07 	vmul.f64	d7, d4, d7
	                       d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 800620e:	ee36 6b07 	vadd.f64	d6, d6, d7
	                     d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8006212:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8006216:	ee27 4b07 	vmul.f64	d4, d7, d7
 800621a:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 800621e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                      d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8006222:	ee36 6b47 	vsub.f64	d6, d6, d7
	                    d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006226:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800622a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800622e:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8006232:	ee24 7b07 	vmul.f64	d7, d4, d7
	                     d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8006236:	ee36 6b07 	vadd.f64	d6, d6, d7
	                   d8 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)));
 800623a:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800623e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006242:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8006246:	ee24 7b07 	vmul.f64	d7, d4, d7
	                    d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 800624a:	ee36 7b47 	vsub.f64	d7, d6, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 800624e:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8006252:	ee27 6b06 	vmul.f64	d6, d7, d6
	              704.556 * cos(q[1] + 1.6845))) /
 8006256:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[14] = -(40.0 * cos(q[0]) *
 800625a:	f107 0310 	add.w	r3, r7, #16
 800625e:	ed83 7b1c 	vstr	d7, [r3, #112]	; 0x70
	  dv[19] =
	      -(40.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 8006262:	f107 030c 	add.w	r3, r7, #12
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3308      	adds	r3, #8
 800626a:	ed93 6b00 	vldr	d6, [r3]
 800626e:	f107 030c 	add.w	r3, r7, #12
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3310      	adds	r3, #16
 8006276:	ed93 7b00 	vldr	d7, [r3]
 800627a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800627e:	ed1f 6ba8 	vldr	d6, [pc, #-672]	; 8005fe0 <IVK+0x4660>
 8006282:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006286:	ed1f 6bae 	vldr	d6, [pc, #-696]	; 8005fd0 <IVK+0x4650>
 800628a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800628e:	eeb0 0b47 	vmov.f64	d0, d7
 8006292:	f010 fee5 	bl	8017060 <cos>
 8006296:	eeb0 7b40 	vmov.f64	d7, d0
 800629a:	ed1f 6bb1 	vldr	d6, [pc, #-708]	; 8005fd8 <IVK+0x4658>
 800629e:	ee27 8b06 	vmul.f64	d8, d7, d6
 80062a2:	f107 030c 	add.w	r3, r7, #12
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	ed93 7b00 	vldr	d7, [r3]
 80062ac:	eeb0 0b47 	vmov.f64	d0, d7
 80062b0:	f010 ff2a 	bl	8017108 <sin>
 80062b4:	eeb0 7b40 	vmov.f64	d7, d0
 80062b8:	ee28 8b07 	vmul.f64	d8, d8, d7
	                704.556 * cos(q[1] + 1.6845) * sin(q[0]))) /
 80062bc:	f107 030c 	add.w	r3, r7, #12
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	3308      	adds	r3, #8
 80062c4:	ed93 7b00 	vldr	d7, [r3]
 80062c8:	ed1f 6bbb 	vldr	d6, [pc, #-748]	; 8005fe0 <IVK+0x4660>
 80062cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80062d0:	eeb0 0b47 	vmov.f64	d0, d7
 80062d4:	f010 fec4 	bl	8017060 <cos>
 80062d8:	eeb0 7b40 	vmov.f64	d7, d0
 80062dc:	ed1f 6bbe 	vldr	d6, [pc, #-760]	; 8005fe8 <IVK+0x4668>
 80062e0:	ee27 9b06 	vmul.f64	d9, d7, d6
 80062e4:	f107 030c 	add.w	r3, r7, #12
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	ed93 7b00 	vldr	d7, [r3]
 80062ee:	eeb0 0b47 	vmov.f64	d0, d7
 80062f2:	f010 ff09 	bl	8017108 <sin>
 80062f6:	eeb0 7b40 	vmov.f64	d7, d0
 80062fa:	ee29 7b07 	vmul.f64	d7, d9, d7
	      -(40.0 * (60.0 * cos(((q[1] + q[2]) + 1.6845) + -0.8995) * sin(q[0]) +
 80062fe:	ee38 7b07 	vadd.f64	d7, d8, d7
 8006302:	ed1f 6bc5 	vldr	d6, [pc, #-788]	; 8005ff0 <IVK+0x4670>
 8006306:	ee27 7b06 	vmul.f64	d7, d7, d6
 800630a:	eeb1 5b47 	vneg.f64	d5, d7
	      (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 800630e:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8006312:	ee27 6b07 	vmul.f64	d6, d7, d7
 8006316:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800631a:	ee26 6b07 	vmul.f64	d6, d6, d7
	                        d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800631e:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8006322:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006326:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 800632a:	ee24 7b07 	vmul.f64	d7, d4, d7
	      (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 800632e:	ee36 6b47 	vsub.f64	d6, d6, d7
	                       d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006332:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8006336:	ee27 4b07 	vmul.f64	d4, d7, d7
 800633a:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 800633e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                        d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8006342:	ee36 6b07 	vadd.f64	d6, d6, d7
	                      d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8006346:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800634a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800634e:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 8006352:	ee24 7b07 	vmul.f64	d7, d4, d7
	                       d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006356:	ee36 6b47 	vsub.f64	d6, d6, d7
	                     d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 800635a:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800635e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006362:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8006366:	ee24 7b07 	vmul.f64	d7, d4, d7
	                      d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 800636a:	ee36 6b07 	vadd.f64	d6, d6, d7
	                    d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800636e:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8006372:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006376:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 800637a:	ee24 7b07 	vmul.f64	d7, d4, d7
	                     d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 800637e:	ee36 6b47 	vsub.f64	d6, d6, d7
	                   d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 8006382:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8006386:	ee27 4b07 	vmul.f64	d4, d7, d7
 800638a:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 800638e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                    d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8006392:	ee36 6b07 	vadd.f64	d6, d6, d7
	                  d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8006396:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800639a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800639e:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 80063a2:	ee24 7b07 	vmul.f64	d7, d4, d7
	                   d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80063a6:	ee36 6b47 	vsub.f64	d6, d6, d7
	                 d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 80063aa:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80063ae:	ee27 4b07 	vmul.f64	d4, d7, d7
 80063b2:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 80063b6:	ee24 7b07 	vmul.f64	d7, d4, d7
	                  d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80063ba:	ee36 6b07 	vadd.f64	d6, d6, d7
	                d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80063be:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80063c2:	ee27 4b07 	vmul.f64	d4, d7, d7
 80063c6:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 80063ca:	ee24 7b07 	vmul.f64	d7, d4, d7
	                 d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 80063ce:	ee36 6b47 	vsub.f64	d6, d6, d7
	               d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80063d2:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80063d6:	ee27 4b07 	vmul.f64	d4, d7, d7
 80063da:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 80063de:	ee24 7b07 	vmul.f64	d7, d4, d7
	                d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80063e2:	ee36 6b07 	vadd.f64	d6, d6, d7
	              d8 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)));
 80063e6:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80063ea:	ee27 4b07 	vmul.f64	d4, d7, d7
 80063ee:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 80063f2:	ee24 7b07 	vmul.f64	d7, d4, d7
	               d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80063f6:	ee36 7b47 	vsub.f64	d7, d6, d7
	      (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 80063fa:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 80063fe:	ee27 6b06 	vmul.f64	d6, d7, d6
	                704.556 * cos(q[1] + 1.6845) * sin(q[0]))) /
 8006402:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[19] =
 8006406:	f107 0310 	add.w	r3, r7, #16
 800640a:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
	  dv[24] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 800640e:	f107 030c 	add.w	r3, r7, #12
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3308      	adds	r3, #8
 8006416:	ed93 6b00 	vldr	d6, [r3]
 800641a:	f107 030c 	add.w	r3, r7, #12
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	3310      	adds	r3, #16
 8006422:	ed93 7b00 	vldr	d7, [r3]
 8006426:	ee36 7b07 	vadd.f64	d7, d6, d7
 800642a:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8006638 <IVK+0x4cb8>
 800642e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006432:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8006640 <IVK+0x4cc0>
 8006436:	ee37 7b46 	vsub.f64	d7, d7, d6
 800643a:	eeb0 0b47 	vmov.f64	d0, d7
 800643e:	f010 fe63 	bl	8017108 <sin>
 8006442:	eeb0 7b40 	vmov.f64	d7, d0
 8006446:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8006648 <IVK+0x4cc8>
 800644a:	ee27 8b06 	vmul.f64	d8, d7, d6
	                     704.556 * sin(q[1] + 1.6845))) /
 800644e:	f107 030c 	add.w	r3, r7, #12
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3308      	adds	r3, #8
 8006456:	ed93 7b00 	vldr	d7, [r3]
 800645a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8006638 <IVK+0x4cb8>
 800645e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006462:	eeb0 0b47 	vmov.f64	d0, d7
 8006466:	f010 fe4f 	bl	8017108 <sin>
 800646a:	eeb0 7b40 	vmov.f64	d7, d0
 800646e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8006650 <IVK+0x4cd0>
 8006472:	ee27 7b06 	vmul.f64	d7, d7, d6
	  dv[24] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 8006476:	ee38 7b07 	vadd.f64	d7, d8, d7
 800647a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8006658 <IVK+0x4cd8>
 800647e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006482:	eeb1 5b47 	vneg.f64	d5, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8006486:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800648a:	ee27 6b07 	vmul.f64	d6, d7, d7
 800648e:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 8006492:	ee26 6b07 	vmul.f64	d6, d6, d7
	                             d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8006496:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800649a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800649e:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 80064a2:	ee24 7b07 	vmul.f64	d7, d4, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 80064a6:	ee36 6b47 	vsub.f64	d6, d6, d7
	                            d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80064aa:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80064ae:	ee27 4b07 	vmul.f64	d4, d7, d7
 80064b2:	ed97 7b5c 	vldr	d7, [r7, #368]	; 0x170
 80064b6:	ee24 7b07 	vmul.f64	d7, d4, d7
	                             d4 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80064ba:	ee36 6b07 	vadd.f64	d6, d6, d7
	                           d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80064be:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80064c2:	ee27 4b07 	vmul.f64	d4, d7, d7
 80064c6:	ed97 7b5a 	vldr	d7, [r7, #360]	; 0x168
 80064ca:	ee24 7b07 	vmul.f64	d7, d4, d7
	                            d3 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80064ce:	ee36 6b47 	vsub.f64	d6, d6, d7
	                          d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 80064d2:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80064d6:	ee27 4b07 	vmul.f64	d4, d7, d7
 80064da:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 80064de:	ee24 7b07 	vmul.f64	d7, d4, d7
	                           d4 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 80064e2:	ee36 6b07 	vadd.f64	d6, d6, d7
	                         d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 80064e6:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 80064ea:	ee27 4b07 	vmul.f64	d4, d7, d7
 80064ee:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 80064f2:	ee24 7b07 	vmul.f64	d7, d4, d7
	                          d5 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 80064f6:	ee36 6b47 	vsub.f64	d6, d6, d7
	                        d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 80064fa:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 80064fe:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006502:	ed97 7b58 	vldr	d7, [r7, #352]	; 0x160
 8006506:	ee24 7b07 	vmul.f64	d7, d4, d7
	                         d6 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800650a:	ee36 6b07 	vadd.f64	d6, d6, d7
	                       d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 800650e:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8006512:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006516:	ed97 7b56 	vldr	d7, [r7, #344]	; 0x158
 800651a:	ee24 7b07 	vmul.f64	d7, d4, d7
	                        d5 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 800651e:	ee36 6b47 	vsub.f64	d6, d6, d7
	                      d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8006522:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 8006526:	ee27 4b07 	vmul.f64	d4, d7, d7
 800652a:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 800652e:	ee24 7b07 	vmul.f64	d7, d4, d7
	                       d6 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) +
 8006532:	ee36 6b07 	vadd.f64	d6, d6, d7
	                     d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 8006536:	ed97 7b64 	vldr	d7, [r7, #400]	; 0x190
 800653a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800653e:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 8006542:	ee24 7b07 	vmul.f64	d7, d4, d7
	                      d7 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) -
 8006546:	ee36 6b47 	vsub.f64	d6, d6, d7
	                    d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 800654a:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 800654e:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006552:	ed97 7b54 	vldr	d7, [r7, #336]	; 0x150
 8006556:	ee24 7b07 	vmul.f64	d7, d4, d7
	                     d8 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp)) +
 800655a:	ee36 6b07 	vadd.f64	d6, d6, d7
	                   d8 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)));
 800655e:	ed97 7b70 	vldr	d7, [r7, #448]	; 0x1c0
 8006562:	ee27 4b07 	vmul.f64	d4, d7, d7
 8006566:	ed97 7b52 	vldr	d7, [r7, #328]	; 0x148
 800656a:	ee24 7b07 	vmul.f64	d7, d4, d7
	                    d7 * (d_J_inv_tmp_tmp * d_J_inv_tmp_tmp)) -
 800656e:	ee36 7b47 	vsub.f64	d7, d6, d7
	           (9.0 * (((((((((((d3 * (f_J_inv_tmp_tmp * f_J_inv_tmp_tmp) -
 8006572:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8006576:	ee27 6b06 	vmul.f64	d6, d7, d6
	                     704.556 * sin(q[1] + 1.6845))) /
 800657a:	ee85 7b06 	vdiv.f64	d7, d5, d6
	  dv[24] = -(40.0 * (60.0 * sin(((q[1] + q[2]) + 1.6845) + -0.8995) +
 800657e:	f107 0310 	add.w	r3, r7, #16
 8006582:	ed83 7b30 	vstr	d7, [r3, #192]	; 0xc0
	  for (i = 0; i < 5; i++) {
 8006586:	2300      	movs	r3, #0
 8006588:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800658c:	e040      	b.n	8006610 <IVK+0x4c90>
	    d = 0.0;
 800658e:	f04f 0200 	mov.w	r2, #0
 8006592:	f04f 0300 	mov.w	r3, #0
 8006596:	e9c7 237a 	strd	r2, r3, [r7, #488]	; 0x1e8
	    for (i1 = 0; i1 < 5; i1++) {
 800659a:	2300      	movs	r3, #0
 800659c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80065a0:	e023      	b.n	80065ea <IVK+0x4c6a>
	      d += dv[i + 5 * i1] * x_dot[i1];
 80065a2:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80065a6:	4613      	mov	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	441a      	add	r2, r3
 80065ac:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80065b0:	4413      	add	r3, r2
 80065b2:	f107 0210 	add.w	r2, r7, #16
 80065b6:	00db      	lsls	r3, r3, #3
 80065b8:	4413      	add	r3, r2
 80065ba:	ed93 6b00 	vldr	d6, [r3]
 80065be:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	f107 0208 	add.w	r2, r7, #8
 80065c8:	6812      	ldr	r2, [r2, #0]
 80065ca:	4413      	add	r3, r2
 80065cc:	ed93 7b00 	vldr	d7, [r3]
 80065d0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80065d4:	ed97 6b7a 	vldr	d6, [r7, #488]	; 0x1e8
 80065d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80065dc:	ed87 7b7a 	vstr	d7, [r7, #488]	; 0x1e8
	    for (i1 = 0; i1 < 5; i1++) {
 80065e0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80065e4:	3301      	adds	r3, #1
 80065e6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80065ea:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	ddd7      	ble.n	80065a2 <IVK+0x4c22>
	    }
	    m_dot_temp[i] = d;
 80065f2:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80065f6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80065fa:	00db      	lsls	r3, r3, #3
 80065fc:	18d1      	adds	r1, r2, r3
 80065fe:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8006602:	e9c1 2300 	strd	r2, r3, [r1]
	  for (i = 0; i < 5; i++) {
 8006606:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800660a:	3301      	adds	r3, #1
 800660c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8006610:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8006614:	2b04      	cmp	r3, #4
 8006616:	ddba      	ble.n	800658e <IVK+0x4c0e>
	  }
	memcpy(m_dot, m_dot_temp, 40);
 8006618:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 800661c:	1d3b      	adds	r3, r7, #4
 800661e:	2228      	movs	r2, #40	; 0x28
 8006620:	6818      	ldr	r0, [r3, #0]
 8006622:	f00d fdd9 	bl	80141d8 <memcpy>
}
 8006626:	bf00      	nop
 8006628:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 800662c:	46bd      	mov	sp, r7
 800662e:	ecbd 8b04 	vpop	{d8-d9}
 8006632:	bd80      	pop	{r7, pc}
 8006634:	f3af 8000 	nop.w
 8006638:	45a1cac1 	.word	0x45a1cac1
 800663c:	3ffaf3b6 	.word	0x3ffaf3b6
 8006640:	39581062 	.word	0x39581062
 8006644:	3fecc8b4 	.word	0x3fecc8b4
 8006648:	00000000 	.word	0x00000000
 800664c:	404e0000 	.word	0x404e0000
 8006650:	b020c49c 	.word	0xb020c49c
 8006654:	40860472 	.word	0x40860472
 8006658:	00000000 	.word	0x00000000
 800665c:	40440000 	.word	0x40440000

08006660 <stepper_initialise>:
 */

#include <Library/Motor.h>

void stepper_initialise(Stepper_Motor *dev, TIM_HandleTypeDef *timHandle,
		uint32_t tim_channel, GPIO_TypeDef *dir_port, uint16_t dir_pin, uint8_t dir_mode) {
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
 800666c:	603b      	str	r3, [r7, #0]

	/* Set struct parameters */
	dev->timHandle = timHandle;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	601a      	str	r2, [r3, #0]
	dev->tim_channel = tim_channel;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	605a      	str	r2, [r3, #4]
	dev->dir_port = dir_port;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	609a      	str	r2, [r3, #8]
	dev->dir_pin = dir_pin;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8b3a      	ldrh	r2, [r7, #24]
 8006684:	819a      	strh	r2, [r3, #12]
	/*
	 * dir mode set direction of stepper
	 */
	dev->dir_mode = dir_mode;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	7f3a      	ldrb	r2, [r7, #28]
 800668a:	765a      	strb	r2, [r3, #25]
	HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6898      	ldr	r0, [r3, #8]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	899b      	ldrh	r3, [r3, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	4619      	mov	r1, r3
 8006698:	f006 fb3a 	bl	800cd10 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(dev->timHandle, dev->tim_channel);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	4619      	mov	r1, r3
 80066a6:	4610      	mov	r0, r2
 80066a8:	f009 fd56 	bl	8010158 <HAL_TIM_PWM_Start>
	dev->freq = 1;
 80066ac:	68f9      	ldr	r1, [r7, #12]
 80066ae:	f04f 0200 	mov.w	r2, #0
 80066b2:	4b09      	ldr	r3, [pc, #36]	; (80066d8 <stepper_initialise+0x78>)
 80066b4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	stepper_set_speed(dev, 0);
 80066b8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80066d0 <stepper_initialise+0x70>
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f000 f903 	bl	80068c8 <stepper_set_speed>
}
 80066c2:	bf00      	nop
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	f3af 8000 	nop.w
	...
 80066d8:	3ff00000 	.word	0x3ff00000

080066dc <servo_initialise>:

void servo_initialise(Servo_Motor *dev, TIM_HandleTypeDef *timHandle,uint32_t tim_channel) {
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
	/* Set struct parameters */
	dev->timHandle = timHandle;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	601a      	str	r2, [r3, #0]
	dev->tim_channel = tim_channel;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	605a      	str	r2, [r3, #4]
	HAL_TIM_PWM_Start(dev->timHandle, dev->tim_channel);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	4619      	mov	r1, r3
 80066fe:	4610      	mov	r0, r2
 8006700:	f009 fd2a 	bl	8010158 <HAL_TIM_PWM_Start>
	dev->degree = 0;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	721a      	strb	r2, [r3, #8]
	servo_set_degree(dev, 10);
 800670a:	210a      	movs	r1, #10
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 f897 	bl	8006840 <servo_set_degree>
}
 8006712:	bf00      	nop
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	0000      	movs	r0, r0
 800671c:	0000      	movs	r0, r0
	...

08006720 <set_pwm>:

void set_pwm(TIM_HandleTypeDef *tim_pwm, uint32_t tim_channel, double freq,
		double duty_cycle) {
 8006720:	b480      	push	{r7}
 8006722:	b089      	sub	sp, #36	; 0x24
 8006724:	af00      	add	r7, sp, #0
 8006726:	6178      	str	r0, [r7, #20]
 8006728:	6139      	str	r1, [r7, #16]
 800672a:	ed87 0b02 	vstr	d0, [r7, #8]
 800672e:	ed87 1b00 	vstr	d1, [r7]

	 :param freq = frequency of pwm
	 :param duty_cycle is % duty cycle 0.0 - 1.0
	 :return: None
	 */
	if (freq > MAX_FREQUENCY){
 8006732:	ed97 7b02 	vldr	d7, [r7, #8]
 8006736:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8006828 <set_pwm+0x108>
 800673a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800673e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006742:	dd05      	ble.n	8006750 <set_pwm+0x30>
		freq = MAX_FREQUENCY;
 8006744:	a338      	add	r3, pc, #224	; (adr r3, 8006828 <set_pwm+0x108>)
 8006746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800674e:	e00d      	b.n	800676c <set_pwm+0x4c>
	}
	else if ((freq * -1) > MAX_FREQUENCY){
 8006750:	ed97 7b02 	vldr	d7, [r7, #8]
 8006754:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8006830 <set_pwm+0x110>
 8006758:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800675c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006760:	d504      	bpl.n	800676c <set_pwm+0x4c>
		freq = MAX_FREQUENCY;
 8006762:	a331      	add	r3, pc, #196	; (adr r3, 8006828 <set_pwm+0x108>)
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}
	uint16_t ARR_value = 50000 / freq; //500000 come from 275MHz/550
 800676c:	ed9f 5b32 	vldr	d5, [pc, #200]	; 8006838 <set_pwm+0x118>
 8006770:	ed97 6b02 	vldr	d6, [r7, #8]
 8006774:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8006778:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800677c:	ee17 3a90 	vmov	r3, s15
 8006780:	83bb      	strh	r3, [r7, #28]
	uint16_t CCRx_value = (ARR_value * duty_cycle);
 8006782:	8bbb      	ldrh	r3, [r7, #28]
 8006784:	ee07 3a90 	vmov	s15, r3
 8006788:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800678c:	ed97 7b00 	vldr	d7, [r7]
 8006790:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006794:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006798:	ee17 3a90 	vmov	r3, s15
 800679c:	83fb      	strh	r3, [r7, #30]
	if (duty_cycle == 1.0) {
 800679e:	ed97 7b00 	vldr	d7, [r7]
 80067a2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80067a6:	eeb4 7b46 	vcmp.f64	d7, d6
 80067aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ae:	d101      	bne.n	80067b4 <set_pwm+0x94>
		CCRx_value = 0;
 80067b0:	2300      	movs	r3, #0
 80067b2:	83fb      	strh	r3, [r7, #30]
	}
	__HAL_TIM_SET_AUTORELOAD(tim_pwm, ARR_value);
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	8bba      	ldrh	r2, [r7, #28]
 80067ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80067bc:	8bba      	ldrh	r2, [r7, #28]
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d104      	bne.n	80067d2 <set_pwm+0xb2>
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	8bfa      	ldrh	r2, [r7, #30]
 80067ce:	635a      	str	r2, [r3, #52]	; 0x34
}
 80067d0:	e023      	b.n	800681a <set_pwm+0xfa>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	2b04      	cmp	r3, #4
 80067d6:	d104      	bne.n	80067e2 <set_pwm+0xc2>
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	8bfb      	ldrh	r3, [r7, #30]
 80067de:	6393      	str	r3, [r2, #56]	; 0x38
}
 80067e0:	e01b      	b.n	800681a <set_pwm+0xfa>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	2b08      	cmp	r3, #8
 80067e6:	d104      	bne.n	80067f2 <set_pwm+0xd2>
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	8bfb      	ldrh	r3, [r7, #30]
 80067ee:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80067f0:	e013      	b.n	800681a <set_pwm+0xfa>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	2b0c      	cmp	r3, #12
 80067f6:	d104      	bne.n	8006802 <set_pwm+0xe2>
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	8bfb      	ldrh	r3, [r7, #30]
 80067fe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8006800:	e00b      	b.n	800681a <set_pwm+0xfa>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	2b10      	cmp	r3, #16
 8006806:	d104      	bne.n	8006812 <set_pwm+0xf2>
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	8bfb      	ldrh	r3, [r7, #30]
 800680e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8006810:	e003      	b.n	800681a <set_pwm+0xfa>
	__HAL_TIM_SET_COMPARE(tim_pwm, tim_channel, CCRx_value);
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	8bfb      	ldrh	r3, [r7, #30]
 8006818:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800681a:	bf00      	nop
 800681c:	3724      	adds	r7, #36	; 0x24
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	00000000 	.word	0x00000000
 800682c:	40d86a00 	.word	0x40d86a00
 8006830:	00000000 	.word	0x00000000
 8006834:	c0d86a00 	.word	0xc0d86a00
 8006838:	00000000 	.word	0x00000000
 800683c:	40e86a00 	.word	0x40e86a00

08006840 <servo_set_degree>:

void servo_set_degree(Servo_Motor *dev, uint8_t degree) {
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	460b      	mov	r3, r1
 800684a:	70fb      	strb	r3, [r7, #3]
	 servo_set_degree does set your servo to your given value.

	 :param degree is degree of servo motor (0-180)
	 :return: None
	 */
	if (degree != dev->degree) {
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	7a1b      	ldrb	r3, [r3, #8]
 8006850:	78fa      	ldrb	r2, [r7, #3]
 8006852:	429a      	cmp	r2, r3
 8006854:	d026      	beq.n	80068a4 <servo_set_degree+0x64>
		if (degree > 180) {
 8006856:	78fb      	ldrb	r3, [r7, #3]
 8006858:	2bb4      	cmp	r3, #180	; 0xb4
 800685a:	d901      	bls.n	8006860 <servo_set_degree+0x20>
			degree = 180.0;
 800685c:	23b4      	movs	r3, #180	; 0xb4
 800685e:	70fb      	strb	r3, [r7, #3]
		} else if (degree < 0) {
			degree = 0.0;
		}
		double cyc = 0.05 + ((degree / 180.0) * 0.05);
 8006860:	78fb      	ldrb	r3, [r7, #3]
 8006862:	ee07 3a90 	vmov	s15, r3
 8006866:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800686a:	ed9f 5b11 	vldr	d5, [pc, #68]	; 80068b0 <servo_set_degree+0x70>
 800686e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006872:	ed9f 6b11 	vldr	d6, [pc, #68]	; 80068b8 <servo_set_degree+0x78>
 8006876:	ee27 7b06 	vmul.f64	d7, d7, d6
 800687a:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 80068b8 <servo_set_degree+0x78>
 800687e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006882:	ed87 7b02 	vstr	d7, [r7, #8]
		set_pwm(dev->timHandle, dev->tim_channel, 50, cyc);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	ed97 1b02 	vldr	d1, [r7, #8]
 8006892:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80068c0 <servo_set_degree+0x80>
 8006896:	4619      	mov	r1, r3
 8006898:	4610      	mov	r0, r2
 800689a:	f7ff ff41 	bl	8006720 <set_pwm>
		dev->degree = degree;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	78fa      	ldrb	r2, [r7, #3]
 80068a2:	721a      	strb	r2, [r3, #8]
	}
}
 80068a4:	bf00      	nop
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	f3af 8000 	nop.w
 80068b0:	00000000 	.word	0x00000000
 80068b4:	40668000 	.word	0x40668000
 80068b8:	9999999a 	.word	0x9999999a
 80068bc:	3fa99999 	.word	0x3fa99999
 80068c0:	00000000 	.word	0x00000000
 80068c4:	40490000 	.word	0x40490000

080068c8 <stepper_set_speed>:

void stepper_set_speed(Stepper_Motor *dev, double freq) {
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	ed87 0b00 	vstr	d0, [r7]
	 stepper_set_speed does set your stepper to your given value.

	 :param freq can be -9999.9999 to 9999.9999. signed value use to set stepper direction.
	 :return: None
	 */
	if (freq != dev->freq) {
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	ed93 7b04 	vldr	d7, [r3, #16]
 80068da:	ed97 6b00 	vldr	d6, [r7]
 80068de:	eeb4 6b47 	vcmp.f64	d6, d7
 80068e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e6:	d072      	beq.n	80069ce <stepper_set_speed+0x106>
		if (freq > MIN_FREQUENCY) {
 80068e8:	ed97 7b00 	vldr	d7, [r7]
 80068ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80068f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80068f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068f8:	dd25      	ble.n	8006946 <stepper_set_speed+0x7e>
			if (dev->dir_mode == 0){
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	7e5b      	ldrb	r3, [r3, #25]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d108      	bne.n	8006914 <stepper_set_speed+0x4c>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6898      	ldr	r0, [r3, #8]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	899b      	ldrh	r3, [r3, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	4619      	mov	r1, r3
 800690e:	f006 f9ff 	bl	800cd10 <HAL_GPIO_WritePin>
 8006912:	e00b      	b.n	800692c <stepper_set_speed+0x64>
			}
			else if (dev->dir_mode == 1){
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	7e5b      	ldrb	r3, [r3, #25]
 8006918:	2b01      	cmp	r3, #1
 800691a:	d107      	bne.n	800692c <stepper_set_speed+0x64>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 1);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6898      	ldr	r0, [r3, #8]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	899b      	ldrh	r3, [r3, #12]
 8006924:	2201      	movs	r2, #1
 8006926:	4619      	mov	r1, r3
 8006928:	f006 f9f2 	bl	800cd10 <HAL_GPIO_WritePin>
			}
			set_pwm(dev->timHandle, dev->tim_channel, freq, 0.50);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 8006938:	ed97 0b00 	vldr	d0, [r7]
 800693c:	4619      	mov	r1, r3
 800693e:	4610      	mov	r0, r2
 8006940:	f7ff feee 	bl	8006720 <set_pwm>
 8006944:	e03e      	b.n	80069c4 <stepper_set_speed+0xfc>
		} else if (freq < (-1 * MIN_FREQUENCY)) {
 8006946:	ed97 7b00 	vldr	d7, [r7]
 800694a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800694e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006956:	d529      	bpl.n	80069ac <stepper_set_speed+0xe4>
			if (dev->dir_mode == 0){
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	7e5b      	ldrb	r3, [r3, #25]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d108      	bne.n	8006972 <stepper_set_speed+0xaa>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 1);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6898      	ldr	r0, [r3, #8]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	899b      	ldrh	r3, [r3, #12]
 8006968:	2201      	movs	r2, #1
 800696a:	4619      	mov	r1, r3
 800696c:	f006 f9d0 	bl	800cd10 <HAL_GPIO_WritePin>
 8006970:	e00b      	b.n	800698a <stepper_set_speed+0xc2>
			}
			else if (dev->dir_mode == 1){
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	7e5b      	ldrb	r3, [r3, #25]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d107      	bne.n	800698a <stepper_set_speed+0xc2>
				HAL_GPIO_WritePin(dev->dir_port, dev->dir_pin, 0);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6898      	ldr	r0, [r3, #8]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	899b      	ldrh	r3, [r3, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	4619      	mov	r1, r3
 8006986:	f006 f9c3 	bl	800cd10 <HAL_GPIO_WritePin>
			}
			set_pwm(dev->timHandle, dev->tim_channel, (-1*freq), 0.50);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	ed97 7b00 	vldr	d7, [r7]
 8006996:	eeb1 7b47 	vneg.f64	d7, d7
 800699a:	eeb6 1b00 	vmov.f64	d1, #96	; 0x3f000000  0.5
 800699e:	eeb0 0b47 	vmov.f64	d0, d7
 80069a2:	4619      	mov	r1, r3
 80069a4:	4610      	mov	r0, r2
 80069a6:	f7ff febb 	bl	8006720 <set_pwm>
 80069aa:	e00b      	b.n	80069c4 <stepper_set_speed+0xfc>
		} else {
			set_pwm(dev->timHandle, dev->tim_channel, 100, 1.0);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	eeb7 1b00 	vmov.f64	d1, #112	; 0x3f800000  1.0
 80069b8:	ed9f 0b07 	vldr	d0, [pc, #28]	; 80069d8 <stepper_set_speed+0x110>
 80069bc:	4619      	mov	r1, r3
 80069be:	4610      	mov	r0, r2
 80069c0:	f7ff feae 	bl	8006720 <set_pwm>
		}
		dev->freq = freq;
 80069c4:	68f9      	ldr	r1, [r7, #12]
 80069c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069ca:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
}
 80069ce:	bf00      	nop
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	00000000 	.word	0x00000000
 80069dc:	40590000 	.word	0x40590000

080069e0 <PIDController_initialise>:
 *      Author: fame
 */
#include <Library/PID.h>

void PIDController_initialise(PIDController *pid, double Kp, double Ki,
		double Kd) {
 80069e0:	b480      	push	{r7}
 80069e2:	b089      	sub	sp, #36	; 0x24
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	61f8      	str	r0, [r7, #28]
 80069e8:	ed87 0b04 	vstr	d0, [r7, #16]
 80069ec:	ed87 1b02 	vstr	d1, [r7, #8]
 80069f0:	ed87 2b00 	vstr	d2, [r7]
	pid->Kp = Kp;
 80069f4:	69f9      	ldr	r1, [r7, #28]
 80069f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80069fa:	e9c1 2300 	strd	r2, r3, [r1]
	pid->Ki = Ki;
 80069fe:	69f9      	ldr	r1, [r7, #28]
 8006a00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a04:	e9c1 2302 	strd	r2, r3, [r1, #8]
	pid->Kd = Kd;
 8006a08:	69f9      	ldr	r1, [r7, #28]
 8006a0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a0e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pid->out = 0;
 8006a12:	69f9      	ldr	r1, [r7, #28]
 8006a14:	f04f 0200 	mov.w	r2, #0
 8006a18:	f04f 0300 	mov.w	r3, #0
 8006a1c:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
}
 8006a20:	bf00      	nop
 8006a22:	3724      	adds	r7, #36	; 0x24
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <PIDController_set_limit>:

void PIDController_set_limit(PIDController *pid, double int_lim, double out_lim) {
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6178      	str	r0, [r7, #20]
 8006a34:	ed87 0b02 	vstr	d0, [r7, #8]
 8006a38:	ed87 1b00 	vstr	d1, [r7]
	if (out_lim != 0) {
 8006a3c:	ed97 7b00 	vldr	d7, [r7]
 8006a40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a48:	d00a      	beq.n	8006a60 <PIDController_set_limit+0x34>
		pid->out_lim = out_lim;
 8006a4a:	6979      	ldr	r1, [r7, #20]
 8006a4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a50:	e9c1 2306 	strd	r2, r3, [r1, #24]
		pid->out_lim_frag = 1;
 8006a54:	6979      	ldr	r1, [r7, #20]
 8006a56:	f04f 0200 	mov.w	r2, #0
 8006a5a:	4b0d      	ldr	r3, [pc, #52]	; (8006a90 <PIDController_set_limit+0x64>)
 8006a5c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	}
	if (int_lim != 0) {
 8006a60:	ed97 7b02 	vldr	d7, [r7, #8]
 8006a64:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a6c:	d00a      	beq.n	8006a84 <PIDController_set_limit+0x58>
		pid->int_lim = int_lim;
 8006a6e:	6979      	ldr	r1, [r7, #20]
 8006a70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a74:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		pid->int_lim_frag = 1;
 8006a78:	6979      	ldr	r1, [r7, #20]
 8006a7a:	f04f 0200 	mov.w	r2, #0
 8006a7e:	4b04      	ldr	r3, [pc, #16]	; (8006a90 <PIDController_set_limit+0x64>)
 8006a80:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	}
}
 8006a84:	bf00      	nop
 8006a86:	371c      	adds	r7, #28
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr
 8006a90:	3ff00000 	.word	0x3ff00000

08006a94 <PIDController_update>:

double PIDController_update(PIDController *pid, double setpoint,
		double measurement) {
 8006a94:	b480      	push	{r7}
 8006a96:	b089      	sub	sp, #36	; 0x24
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6178      	str	r0, [r7, #20]
 8006a9c:	ed87 0b02 	vstr	d0, [r7, #8]
 8006aa0:	ed87 1b00 	vstr	d1, [r7]
	double error = setpoint - measurement;
 8006aa4:	ed97 6b02 	vldr	d6, [r7, #8]
 8006aa8:	ed97 7b00 	vldr	d7, [r7]
 8006aac:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006ab0:	ed87 7b06 	vstr	d7, [r7, #24]
	/*
	 * P term
	 */
	pid->proportional_term = pid->Kp * error;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	ed93 6b00 	vldr	d6, [r3]
 8006aba:	ed97 7b06 	vldr	d7, [r7, #24]
 8006abe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

	/*
	 * I term
	 */
	pid->integrator += error;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8006ace:	ed97 7b06 	vldr	d7, [r7, #24]
 8006ad2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	pid->integral_term = pid->Ki * pid->integrator;
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	ed93 6b02 	vldr	d6, [r3, #8]
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 8006ae8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
	if (pid->int_lim_frag){
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8006af8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b00:	d026      	beq.n	8006b50 <PIDController_update+0xbc>
		if (pid->integral_term > pid->int_lim){
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8006b0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b16:	dd06      	ble.n	8006b26 <PIDController_update+0x92>
			pid->integral_term = pid->int_lim;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006b1e:	6979      	ldr	r1, [r7, #20]
 8006b20:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
 8006b24:	e014      	b.n	8006b50 <PIDController_update+0xbc>
		}
		else if (pid->integral_term < (-1*pid->int_lim)){
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8006b32:	eeb1 7b47 	vneg.f64	d7, d7
 8006b36:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b3e:	d507      	bpl.n	8006b50 <PIDController_update+0xbc>
			pid->integral_term = (pid->int_lim * -1);
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8006b46:	eeb1 7b47 	vneg.f64	d7, d7
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
		}
	}
	/*
	 * D term
	 */
	pid->derivative_term = pid->Kd * (error - pid->prevError);
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	ed93 6b04 	vldr	d6, [r3, #16]
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8006b5c:	ed97 5b06 	vldr	d5, [r7, #24]
 8006b60:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006b64:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
	pid->prevError = error;
 8006b6e:	6979      	ldr	r1, [r7, #20]
 8006b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b74:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	/*
	 * Calculate a final value
	 */
	pid->out = pid->proportional_term + pid->integral_term
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8006b84:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ pid->derivative_term;
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8006b8e:	ee36 7b07 	vadd.f64	d7, d6, d7
	pid->out = pid->proportional_term + pid->integral_term
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
	if (pid->out_lim_frag){
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	ed93 7b08 	vldr	d7, [r3, #32]
 8006b9e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ba6:	d026      	beq.n	8006bf6 <PIDController_update+0x162>
		if (pid->out > pid->out_lim){
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	ed93 7b06 	vldr	d7, [r3, #24]
 8006bb4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bbc:	dd06      	ble.n	8006bcc <PIDController_update+0x138>
			pid->out = pid->out_lim;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006bc4:	6979      	ldr	r1, [r7, #20]
 8006bc6:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
 8006bca:	e014      	b.n	8006bf6 <PIDController_update+0x162>
		}
		else if (pid->out < (-1*pid->out_lim)){
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	ed93 6b18 	vldr	d6, [r3, #96]	; 0x60
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	ed93 7b06 	vldr	d7, [r3, #24]
 8006bd8:	eeb1 7b47 	vneg.f64	d7, d7
 8006bdc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006be4:	d507      	bpl.n	8006bf6 <PIDController_update+0x162>
			pid->out= (pid->out_lim * -1);
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	ed93 7b06 	vldr	d7, [r3, #24]
 8006bec:	eeb1 7b47 	vneg.f64	d7, d7
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	ed83 7b18 	vstr	d7, [r3, #96]	; 0x60
		}
	}
	return pid->out;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8006bfc:	ec43 2b17 	vmov	d7, r2, r3
}
 8006c00:	eeb0 0b47 	vmov.f64	d0, d7
 8006c04:	3724      	adds	r7, #36	; 0x24
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <Cascade_PIDController_update>:

double Cascade_PIDController_update(PIDController *position_pid,
		PIDController *velocity_pid, KalmanFilter *kalman_filter,
		double desired_position, double desired_velocity) {
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b08e      	sub	sp, #56	; 0x38
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	61f8      	str	r0, [r7, #28]
 8006c16:	61b9      	str	r1, [r7, #24]
 8006c18:	617a      	str	r2, [r7, #20]
 8006c1a:	ed87 0b02 	vstr	d0, [r7, #8]
 8006c1e:	ed87 1b00 	vstr	d1, [r7]
	double velocity_command = PIDController_update(position_pid,
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	ed93 7b04 	vldr	d7, [r3, #16]
 8006c28:	eeb0 1b47 	vmov.f64	d1, d7
 8006c2c:	ed97 0b02 	vldr	d0, [r7, #8]
 8006c30:	69f8      	ldr	r0, [r7, #28]
 8006c32:	f7ff ff2f 	bl	8006a94 <PIDController_update>
 8006c36:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
			desired_position, kalman_filter->x1);
	double velocity_error = velocity_command
			- kalman_filter->x2;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	ed93 7b06 	vldr	d7, [r3, #24]
	double velocity_error = velocity_command
 8006c40:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 8006c44:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006c48:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	double out = PIDController_update(velocity_pid, velocity_error,
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	ed93 7b06 	vldr	d7, [r3, #24]
 8006c52:	eeb0 1b47 	vmov.f64	d1, d7
 8006c56:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8006c5a:	69b8      	ldr	r0, [r7, #24]
 8006c5c:	f7ff ff1a 	bl	8006a94 <PIDController_update>
 8006c60:	ed87 0b08 	vstr	d0, [r7, #32]
			kalman_filter->x2);
	return out;
 8006c64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c68:	ec43 2b17 	vmov	d7, r2, r3
}
 8006c6c:	eeb0 0b47 	vmov.f64	d0, d7
 8006c70:	3738      	adds	r7, #56	; 0x38
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <QuinticTrajectory_initialise>:
 *      Author: fame
 */

#include <Library/Trajectory.h>

void QuinticTrajectory_initialise(QuinticTrajectory *Traj, double time_step) {
 8006c76:	b480      	push	{r7}
 8006c78:	b085      	sub	sp, #20
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	60f8      	str	r0, [r7, #12]
 8006c7e:	ed87 0b00 	vstr	d0, [r7]
	Traj->is_end = 1;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2201      	movs	r2, #1
 8006c86:	701a      	strb	r2, [r3, #0]
	Traj->c0 = 0;
 8006c88:	68f9      	ldr	r1, [r7, #12]
 8006c8a:	f04f 0200 	mov.w	r2, #0
 8006c8e:	f04f 0300 	mov.w	r3, #0
 8006c92:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Traj->c1 = 0;
 8006c96:	68f9      	ldr	r1, [r7, #12]
 8006c98:	f04f 0200 	mov.w	r2, #0
 8006c9c:	f04f 0300 	mov.w	r3, #0
 8006ca0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	Traj->c2 = 0;
 8006ca4:	68f9      	ldr	r1, [r7, #12]
 8006ca6:	f04f 0200 	mov.w	r2, #0
 8006caa:	f04f 0300 	mov.w	r3, #0
 8006cae:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Traj->c3 = 0;
 8006cb2:	68f9      	ldr	r1, [r7, #12]
 8006cb4:	f04f 0200 	mov.w	r2, #0
 8006cb8:	f04f 0300 	mov.w	r3, #0
 8006cbc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Traj->c4 = 0;
 8006cc0:	68f9      	ldr	r1, [r7, #12]
 8006cc2:	f04f 0200 	mov.w	r2, #0
 8006cc6:	f04f 0300 	mov.w	r3, #0
 8006cca:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Traj->c5 = 0;
 8006cce:	68f9      	ldr	r1, [r7, #12]
 8006cd0:	f04f 0200 	mov.w	r2, #0
 8006cd4:	f04f 0300 	mov.w	r3, #0
 8006cd8:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	Traj->pos_out = 0;
 8006cdc:	68f9      	ldr	r1, [r7, #12]
 8006cde:	f04f 0200 	mov.w	r2, #0
 8006ce2:	f04f 0300 	mov.w	r3, #0
 8006ce6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	Traj->vel_out = 0;
 8006cea:	68f9      	ldr	r1, [r7, #12]
 8006cec:	f04f 0200 	mov.w	r2, #0
 8006cf0:	f04f 0300 	mov.w	r3, #0
 8006cf4:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	Traj->current_time = 0;
 8006cf8:	68f9      	ldr	r1, [r7, #12]
 8006cfa:	f04f 0200 	mov.w	r2, #0
 8006cfe:	f04f 0300 	mov.w	r3, #0
 8006d02:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	Traj->time_step = time_step;
 8006d06:	68f9      	ldr	r1, [r7, #12]
 8006d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d0c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	Traj->time_max = 0;
 8006d10:	68f9      	ldr	r1, [r7, #12]
 8006d12:	f04f 0200 	mov.w	r2, #0
 8006d16:	f04f 0300 	mov.w	r3, #0
 8006d1a:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8006d1e:	bf00      	nop
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
	...

08006d2c <QuinticTrajectory_cal_and_set_coeff>:

void QuinticTrajectory_cal_and_set_coeff(QuinticTrajectory *Traj, double q0,
		double q1, double v0, double v1, double ac0, double ac1, double tf) {
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b0f6      	sub	sp, #472	; 0x1d8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006d36:	6018      	str	r0, [r3, #0]
 8006d38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006d3c:	ed83 0b00 	vstr	d0, [r3]
 8006d40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006d44:	ed83 1b00 	vstr	d1, [r3]
 8006d48:	f107 0320 	add.w	r3, r7, #32
 8006d4c:	ed83 2b00 	vstr	d2, [r3]
 8006d50:	f107 0318 	add.w	r3, r7, #24
 8006d54:	ed83 3b00 	vstr	d3, [r3]
 8006d58:	f107 0310 	add.w	r3, r7, #16
 8006d5c:	ed83 4b00 	vstr	d4, [r3]
 8006d60:	f107 0308 	add.w	r3, r7, #8
 8006d64:	ed83 5b00 	vstr	d5, [r3]
 8006d68:	463b      	mov	r3, r7
 8006d6a:	ed83 6b00 	vstr	d6, [r3]
	int jp1j;
	int k;
	int mmj_tmp;
	signed char ipiv[6];
	signed char i1;
	M[3] = 1.0;
 8006d6e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006d72:	f04f 0200 	mov.w	r2, #0
 8006d76:	4bb6      	ldr	r3, [pc, #728]	; (8007050 <QuinticTrajectory_cal_and_set_coeff+0x324>)
 8006d78:	e9c1 2306 	strd	r2, r3, [r1, #24]
	M[9] = tf;
 8006d7c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006d80:	463b      	mov	r3, r7
 8006d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d86:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	smax = tf * tf;
 8006d8a:	463b      	mov	r3, r7
 8006d8c:	ed93 7b00 	vldr	d7, [r3]
 8006d90:	ee27 7b07 	vmul.f64	d7, d7, d7
 8006d94:	ed87 7b74 	vstr	d7, [r7, #464]	; 0x1d0
	M[15] = smax;
 8006d98:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006d9c:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8006da0:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	s = pow(tf, 3.0);
 8006da4:	463b      	mov	r3, r7
 8006da6:	eeb0 1b08 	vmov.f64	d1, #8	; 0x40400000  3.0
 8006daa:	ed93 0b00 	vldr	d0, [r3]
 8006dae:	f00f fe93 	bl	8016ad8 <pow>
 8006db2:	ed87 0b6c 	vstr	d0, [r7, #432]	; 0x1b0
	M[21] = s;
 8006db6:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006dba:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8006dbe:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
	M_tmp = pow(tf, 4.0);
 8006dc2:	463b      	mov	r3, r7
 8006dc4:	eeb1 1b00 	vmov.f64	d1, #16	; 0x40800000  4.0
 8006dc8:	ed93 0b00 	vldr	d0, [r3]
 8006dcc:	f00f fe84 	bl	8016ad8 <pow>
 8006dd0:	ed87 0b6a 	vstr	d0, [r7, #424]	; 0x1a8
	M[27] = M_tmp;
 8006dd4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006dd8:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8006ddc:	e9c1 2336 	strd	r2, r3, [r1, #216]	; 0xd8
	M[33] = pow(tf, 5.0);
 8006de0:	463b      	mov	r3, r7
 8006de2:	eeb1 1b04 	vmov.f64	d1, #20	; 0x40a00000  5.0
 8006de6:	ed93 0b00 	vldr	d0, [r3]
 8006dea:	f00f fe75 	bl	8016ad8 <pow>
 8006dee:	eeb0 7b40 	vmov.f64	d7, d0
 8006df2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006df6:	ed83 7b42 	vstr	d7, [r3, #264]	; 0x108
	M[4] = 0.0;
 8006dfa:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006dfe:	f04f 0200 	mov.w	r2, #0
 8006e02:	f04f 0300 	mov.w	r3, #0
 8006e06:	e9c1 2308 	strd	r2, r3, [r1, #32]
	M[10] = 1.0;
 8006e0a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006e0e:	f04f 0200 	mov.w	r2, #0
 8006e12:	4b8f      	ldr	r3, [pc, #572]	; (8007050 <QuinticTrajectory_cal_and_set_coeff+0x324>)
 8006e14:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	M[16] = 2.0 * tf;
 8006e18:	463b      	mov	r3, r7
 8006e1a:	ed93 7b00 	vldr	d7, [r3]
 8006e1e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006e22:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006e26:	ed83 7b20 	vstr	d7, [r3, #128]	; 0x80
	M[22] = 3.0 * smax;
 8006e2a:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8006e2e:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8006e32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e36:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006e3a:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
	M[28] = 4.0 * s;
 8006e3e:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8006e42:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8006e46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e4a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006e4e:	ed83 7b38 	vstr	d7, [r3, #224]	; 0xe0
	M[34] = 5.0 * M_tmp;
 8006e52:	ed97 7b6a 	vldr	d7, [r7, #424]	; 0x1a8
 8006e56:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 8006e5a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e5e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006e62:	ed83 7b44 	vstr	d7, [r3, #272]	; 0x110
	M[5] = 0.0;
 8006e66:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006e6a:	f04f 0200 	mov.w	r2, #0
 8006e6e:	f04f 0300 	mov.w	r3, #0
 8006e72:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	M[11] = 0.0;
 8006e76:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006e7a:	f04f 0200 	mov.w	r2, #0
 8006e7e:	f04f 0300 	mov.w	r3, #0
 8006e82:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	M[17] = 2.0;
 8006e86:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006e8a:	f04f 0200 	mov.w	r2, #0
 8006e8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e92:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	M[23] = 6.0 * tf;
 8006e96:	463b      	mov	r3, r7
 8006e98:	ed93 7b00 	vldr	d7, [r3]
 8006e9c:	eeb1 6b08 	vmov.f64	d6, #24	; 0x40c00000  6.0
 8006ea0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006ea4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006ea8:	ed83 7b2e 	vstr	d7, [r3, #184]	; 0xb8
	M[29] = 12.0 * smax;
 8006eac:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8006eb0:	eeb2 6b08 	vmov.f64	d6, #40	; 0x41400000  12.0
 8006eb4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006eb8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006ebc:	ed83 7b3a 	vstr	d7, [r3, #232]	; 0xe8
	M[35] = 20.0 * s;
 8006ec0:	ed97 7b6c 	vldr	d7, [r7, #432]	; 0x1b0
 8006ec4:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8006ec8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006ecc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006ed0:	ed83 7b46 	vstr	d7, [r3, #280]	; 0x118
	/*  */
	a[0] = q0;
 8006ed4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006ed8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee0:	e9c1 2300 	strd	r2, r3, [r1]
	a[1] = v0;
 8006ee4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006ee8:	f107 0320 	add.w	r3, r7, #32
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	a[2] = ac0;
 8006ef4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006ef8:	f107 0310 	add.w	r3, r7, #16
 8006efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f00:	e9c1 2304 	strd	r2, r3, [r1, #16]
	a[3] = q1;
 8006f04:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006f08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f10:	e9c1 2306 	strd	r2, r3, [r1, #24]
	a[4] = v1;
 8006f14:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006f18:	f107 0318 	add.w	r3, r7, #24
 8006f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f20:	e9c1 2308 	strd	r2, r3, [r1, #32]
	a[5] = ac1;
 8006f24:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8006f28:	f107 0308 	add.w	r3, r7, #8
 8006f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f30:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	for (i = 0; i < 6; i++) {
 8006f34:	2300      	movs	r3, #0
 8006f36:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8006f3a:	e055      	b.n	8006fe8 <QuinticTrajectory_cal_and_set_coeff+0x2bc>
		M[6 * i] = iv[i];
 8006f3c:	4a45      	ldr	r2, [pc, #276]	; (8007054 <QuinticTrajectory_cal_and_set_coeff+0x328>)
 8006f3e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006f42:	4413      	add	r3, r2
 8006f44:	f993 1000 	ldrsb.w	r1, [r3]
 8006f48:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	005b      	lsls	r3, r3, #1
 8006f50:	4413      	add	r3, r2
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	ee07 1a90 	vmov	s15, r1
 8006f58:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f5c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8006f60:	00db      	lsls	r3, r3, #3
 8006f62:	4413      	add	r3, r2
 8006f64:	ed83 7b00 	vstr	d7, [r3]
		M[6 * i + 1] = iv1[i];
 8006f68:	4a3b      	ldr	r2, [pc, #236]	; (8007058 <QuinticTrajectory_cal_and_set_coeff+0x32c>)
 8006f6a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006f6e:	4413      	add	r3, r2
 8006f70:	f993 1000 	ldrsb.w	r1, [r3]
 8006f74:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8006f78:	4613      	mov	r3, r2
 8006f7a:	005b      	lsls	r3, r3, #1
 8006f7c:	4413      	add	r3, r2
 8006f7e:	005b      	lsls	r3, r3, #1
 8006f80:	3301      	adds	r3, #1
 8006f82:	ee07 1a90 	vmov	s15, r1
 8006f86:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006f8a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	4413      	add	r3, r2
 8006f92:	ed83 7b00 	vstr	d7, [r3]
		M[6 * i + 2] = iv2[i];
 8006f96:	4a31      	ldr	r2, [pc, #196]	; (800705c <QuinticTrajectory_cal_and_set_coeff+0x330>)
 8006f98:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f993 1000 	ldrsb.w	r1, [r3]
 8006fa2:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	005b      	lsls	r3, r3, #1
 8006faa:	4413      	add	r3, r2
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	3302      	adds	r3, #2
 8006fb0:	ee07 1a90 	vmov	s15, r1
 8006fb4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006fb8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8006fbc:	00db      	lsls	r3, r3, #3
 8006fbe:	4413      	add	r3, r2
 8006fc0:	ed83 7b00 	vstr	d7, [r3]
		ipiv[i] = (signed char) (i + 1);
 8006fc4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	3301      	adds	r3, #1
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	b259      	sxtb	r1, r3
 8006fd0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006fd4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006fd8:	4413      	add	r3, r2
 8006fda:	460a      	mov	r2, r1
 8006fdc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 6; i++) {
 8006fde:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8006fe8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8006fec:	2b05      	cmp	r3, #5
 8006fee:	dda5      	ble.n	8006f3c <QuinticTrajectory_cal_and_set_coeff+0x210>
	}
	for (j = 0; j < 5; j++) {
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8006ff6:	e1b8      	b.n	800736a <QuinticTrajectory_cal_and_set_coeff+0x63e>
		mmj_tmp = 4 - j;
 8006ff8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8006ffc:	f1c3 0304 	rsb	r3, r3, #4
 8007000:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
		b_tmp = j * 7;
 8007004:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8007008:	4613      	mov	r3, r2
 800700a:	00db      	lsls	r3, r3, #3
 800700c:	1a9b      	subs	r3, r3, r2
 800700e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
		jp1j = b_tmp + 2;
 8007012:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007016:	3302      	adds	r3, #2
 8007018:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
		jA = 6 - j;
 800701c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007020:	f1c3 0306 	rsb	r3, r3, #6
 8007024:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
		b_a = 0;
 8007028:	2300      	movs	r3, #0
 800702a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
		smax = fabs(M[b_tmp]);
 800702e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007032:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007036:	00db      	lsls	r3, r3, #3
 8007038:	4413      	add	r3, r2
 800703a:	ed93 7b00 	vldr	d7, [r3]
 800703e:	eeb0 7bc7 	vabs.f64	d7, d7
 8007042:	ed87 7b74 	vstr	d7, [r7, #464]	; 0x1d0
		for (k = 2; k <= jA; k++) {
 8007046:	2302      	movs	r3, #2
 8007048:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800704c:	e02f      	b.n	80070ae <QuinticTrajectory_cal_and_set_coeff+0x382>
 800704e:	bf00      	nop
 8007050:	3ff00000 	.word	0x3ff00000
 8007054:	080180a8 	.word	0x080180a8
 8007058:	080180b0 	.word	0x080180b0
 800705c:	080180b8 	.word	0x080180b8
			s = fabs(M[(b_tmp + k) - 1]);
 8007060:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8007064:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8007068:	4413      	add	r3, r2
 800706a:	3b01      	subs	r3, #1
 800706c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007070:	00db      	lsls	r3, r3, #3
 8007072:	4413      	add	r3, r2
 8007074:	ed93 7b00 	vldr	d7, [r3]
 8007078:	eeb0 7bc7 	vabs.f64	d7, d7
 800707c:	ed87 7b6c 	vstr	d7, [r7, #432]	; 0x1b0
			if (s > smax) {
 8007080:	ed97 6b6c 	vldr	d6, [r7, #432]	; 0x1b0
 8007084:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8007088:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800708c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007090:	dd08      	ble.n	80070a4 <QuinticTrajectory_cal_and_set_coeff+0x378>
				b_a = k - 1;
 8007092:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8007096:	3b01      	subs	r3, #1
 8007098:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
				smax = s;
 800709c:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 80070a0:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
		for (k = 2; k <= jA; k++) {
 80070a4:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80070a8:	3301      	adds	r3, #1
 80070aa:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 80070ae:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80070b2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80070b6:	429a      	cmp	r2, r3
 80070b8:	ddd2      	ble.n	8007060 <QuinticTrajectory_cal_and_set_coeff+0x334>
			}
		}
		if (M[b_tmp + b_a] != 0.0) {
 80070ba:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80070be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80070c2:	4413      	add	r3, r2
 80070c4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80070c8:	00db      	lsls	r3, r3, #3
 80070ca:	4413      	add	r3, r2
 80070cc:	ed93 7b00 	vldr	d7, [r3]
 80070d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80070d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070d8:	f000 8095 	beq.w	8007206 <QuinticTrajectory_cal_and_set_coeff+0x4da>
			if (b_a != 0) {
 80070dc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d05c      	beq.n	800719e <QuinticTrajectory_cal_and_set_coeff+0x472>
				jA = j + b_a;
 80070e4:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 80070e8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80070ec:	4413      	add	r3, r2
 80070ee:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
				ipiv[j] = (signed char) (jA + 1);
 80070f2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	3301      	adds	r3, #1
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	b259      	sxtb	r1, r3
 80070fe:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8007102:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007106:	4413      	add	r3, r2
 8007108:	460a      	mov	r2, r1
 800710a:	701a      	strb	r2, [r3, #0]
				for (k = 0; k < 6; k++) {
 800710c:	2300      	movs	r3, #0
 800710e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8007112:	e040      	b.n	8007196 <QuinticTrajectory_cal_and_set_coeff+0x46a>
					b_a = j + k * 6;
 8007114:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007118:	4613      	mov	r3, r2
 800711a:	005b      	lsls	r3, r3, #1
 800711c:	4413      	add	r3, r2
 800711e:	005b      	lsls	r3, r3, #1
 8007120:	461a      	mov	r2, r3
 8007122:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007126:	4413      	add	r3, r2
 8007128:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
					smax = M[b_a];
 800712c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007130:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007134:	00db      	lsls	r3, r3, #3
 8007136:	4413      	add	r3, r2
 8007138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713c:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
					b_M_tmp = jA + k * 6;
 8007140:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007144:	4613      	mov	r3, r2
 8007146:	005b      	lsls	r3, r3, #1
 8007148:	4413      	add	r3, r2
 800714a:	005b      	lsls	r3, r3, #1
 800714c:	461a      	mov	r2, r3
 800714e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007152:	4413      	add	r3, r2
 8007154:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
					M[b_a] = M[b_M_tmp];
 8007158:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800715c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007160:	00db      	lsls	r3, r3, #3
 8007162:	4413      	add	r3, r2
 8007164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007168:	f107 0078 	add.w	r0, r7, #120	; 0x78
 800716c:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 8007170:	00c9      	lsls	r1, r1, #3
 8007172:	4401      	add	r1, r0
 8007174:	e9c1 2300 	strd	r2, r3, [r1]
					M[b_M_tmp] = smax;
 8007178:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800717c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8007180:	00db      	lsls	r3, r3, #3
 8007182:	18d1      	adds	r1, r2, r3
 8007184:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 8007188:	e9c1 2300 	strd	r2, r3, [r1]
				for (k = 0; k < 6; k++) {
 800718c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8007190:	3301      	adds	r3, #1
 8007192:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8007196:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800719a:	2b05      	cmp	r3, #5
 800719c:	ddba      	ble.n	8007114 <QuinticTrajectory_cal_and_set_coeff+0x3e8>
				}
			}
			i = (b_tmp - j) + 6;
 800719e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80071a2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	3306      	adds	r3, #6
 80071aa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
			for (b_a = jp1j; b_a <= i; b_a++) {
 80071ae:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80071b2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80071b6:	e020      	b.n	80071fa <QuinticTrajectory_cal_and_set_coeff+0x4ce>
				M[b_a - 1] /= M[b_tmp];
 80071b8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80071bc:	3b01      	subs	r3, #1
 80071be:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80071c2:	00db      	lsls	r3, r3, #3
 80071c4:	4413      	add	r3, r2
 80071c6:	ed93 5b00 	vldr	d5, [r3]
 80071ca:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80071ce:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80071d2:	00db      	lsls	r3, r3, #3
 80071d4:	4413      	add	r3, r2
 80071d6:	ed93 6b00 	vldr	d6, [r3]
 80071da:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80071de:	3b01      	subs	r3, #1
 80071e0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80071e4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80071e8:	00db      	lsls	r3, r3, #3
 80071ea:	4413      	add	r3, r2
 80071ec:	ed83 7b00 	vstr	d7, [r3]
			for (b_a = jp1j; b_a <= i; b_a++) {
 80071f0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80071f4:	3301      	adds	r3, #1
 80071f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80071fa:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80071fe:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007202:	429a      	cmp	r2, r3
 8007204:	ddd8      	ble.n	80071b8 <QuinticTrajectory_cal_and_set_coeff+0x48c>
			}
		}
		jA = b_tmp;
 8007206:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800720a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
		for (b_a = 0; b_a <= mmj_tmp; b_a++) {
 800720e:	2300      	movs	r3, #0
 8007210:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8007214:	e069      	b.n	80072ea <QuinticTrajectory_cal_and_set_coeff+0x5be>
			smax = M[(b_tmp + b_a * 6) + 6];
 8007216:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 800721a:	4613      	mov	r3, r2
 800721c:	005b      	lsls	r3, r3, #1
 800721e:	4413      	add	r3, r2
 8007220:	005b      	lsls	r3, r3, #1
 8007222:	461a      	mov	r2, r3
 8007224:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007228:	4413      	add	r3, r2
 800722a:	3306      	adds	r3, #6
 800722c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007230:	00db      	lsls	r3, r3, #3
 8007232:	4413      	add	r3, r2
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
			if (smax != 0.0) {
 800723c:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8007240:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007248:	d045      	beq.n	80072d6 <QuinticTrajectory_cal_and_set_coeff+0x5aa>
				i = jA + 8;
 800724a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800724e:	3308      	adds	r3, #8
 8007250:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
				b_M_tmp = (jA - j) + 12;
 8007254:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8007258:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	330c      	adds	r3, #12
 8007260:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
				for (jp1j = i; jp1j <= b_M_tmp; jp1j++) {
 8007264:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8007268:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800726c:	e02d      	b.n	80072ca <QuinticTrajectory_cal_and_set_coeff+0x59e>
					M[jp1j - 1] += M[((b_tmp + jp1j) - jA) - 7] * -smax;
 800726e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8007272:	3b01      	subs	r3, #1
 8007274:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007278:	00db      	lsls	r3, r3, #3
 800727a:	4413      	add	r3, r2
 800727c:	ed93 6b00 	vldr	d6, [r3]
 8007280:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8007284:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8007288:	441a      	add	r2, r3
 800728a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	3b07      	subs	r3, #7
 8007292:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8007296:	00db      	lsls	r3, r3, #3
 8007298:	4413      	add	r3, r2
 800729a:	ed93 5b00 	vldr	d5, [r3]
 800729e:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 80072a2:	eeb1 7b47 	vneg.f64	d7, d7
 80072a6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80072aa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80072ae:	3b01      	subs	r3, #1
 80072b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80072b4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80072b8:	00db      	lsls	r3, r3, #3
 80072ba:	4413      	add	r3, r2
 80072bc:	ed83 7b00 	vstr	d7, [r3]
				for (jp1j = i; jp1j <= b_M_tmp; jp1j++) {
 80072c0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80072c4:	3301      	adds	r3, #1
 80072c6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80072ca:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80072ce:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80072d2:	429a      	cmp	r2, r3
 80072d4:	ddcb      	ble.n	800726e <QuinticTrajectory_cal_and_set_coeff+0x542>
				}
			}
			jA += 6;
 80072d6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80072da:	3306      	adds	r3, #6
 80072dc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
		for (b_a = 0; b_a <= mmj_tmp; b_a++) {
 80072e0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80072e4:	3301      	adds	r3, #1
 80072e6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80072ea:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80072ee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80072f2:	429a      	cmp	r2, r3
 80072f4:	dd8f      	ble.n	8007216 <QuinticTrajectory_cal_and_set_coeff+0x4ea>
		}
		i1 = ipiv[j];
 80072f6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80072fa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80072fe:	4413      	add	r3, r2
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	f887 319b 	strb.w	r3, [r7, #411]	; 0x19b
		if (i1 != j + 1) {
 8007306:	f997 219b 	ldrsb.w	r2, [r7, #411]	; 0x19b
 800730a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800730e:	3301      	adds	r3, #1
 8007310:	429a      	cmp	r2, r3
 8007312:	d025      	beq.n	8007360 <QuinticTrajectory_cal_and_set_coeff+0x634>
			smax = a[j];
 8007314:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007318:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800731c:	00db      	lsls	r3, r3, #3
 800731e:	4413      	add	r3, r2
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
			a[j] = a[i1 - 1];
 8007328:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 800732c:	3b01      	subs	r3, #1
 800732e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	4413      	add	r3, r2
 8007336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800733e:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 8007342:	00c9      	lsls	r1, r1, #3
 8007344:	4401      	add	r1, r0
 8007346:	e9c1 2300 	strd	r2, r3, [r1]
			a[i1 - 1] = smax;
 800734a:	f997 319b 	ldrsb.w	r3, [r7, #411]	; 0x19b
 800734e:	3b01      	subs	r3, #1
 8007350:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007354:	00db      	lsls	r3, r3, #3
 8007356:	18d1      	adds	r1, r2, r3
 8007358:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800735c:	e9c1 2300 	strd	r2, r3, [r1]
	for (j = 0; j < 5; j++) {
 8007360:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8007364:	3301      	adds	r3, #1
 8007366:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800736a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800736e:	2b04      	cmp	r3, #4
 8007370:	f77f ae42 	ble.w	8006ff8 <QuinticTrajectory_cal_and_set_coeff+0x2cc>
		}
	}
	for (k = 0; k < 6; k++) {
 8007374:	2300      	movs	r3, #0
 8007376:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800737a:	e056      	b.n	800742a <QuinticTrajectory_cal_and_set_coeff+0x6fe>
		jA = 6 * k;
 800737c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007380:	4613      	mov	r3, r2
 8007382:	005b      	lsls	r3, r3, #1
 8007384:	4413      	add	r3, r2
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
		if (a[k] != 0.0) {
 800738c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007390:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8007394:	00db      	lsls	r3, r3, #3
 8007396:	4413      	add	r3, r2
 8007398:	ed93 7b00 	vldr	d7, [r3]
 800739c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80073a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073a4:	d03c      	beq.n	8007420 <QuinticTrajectory_cal_and_set_coeff+0x6f4>
			i = k + 2;
 80073a6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80073aa:	3302      	adds	r3, #2
 80073ac:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
			for (b_a = i; b_a < 7; b_a++) {
 80073b0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80073b4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80073b8:	e02e      	b.n	8007418 <QuinticTrajectory_cal_and_set_coeff+0x6ec>
				a[b_a - 1] -= a[k] * M[(b_a + jA) - 1];
 80073ba:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80073be:	3b01      	subs	r3, #1
 80073c0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80073c4:	00db      	lsls	r3, r3, #3
 80073c6:	4413      	add	r3, r2
 80073c8:	ed93 6b00 	vldr	d6, [r3]
 80073cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80073d0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80073d4:	00db      	lsls	r3, r3, #3
 80073d6:	4413      	add	r3, r2
 80073d8:	ed93 5b00 	vldr	d5, [r3]
 80073dc:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80073e0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80073e4:	4413      	add	r3, r2
 80073e6:	3b01      	subs	r3, #1
 80073e8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80073ec:	00db      	lsls	r3, r3, #3
 80073ee:	4413      	add	r3, r2
 80073f0:	ed93 7b00 	vldr	d7, [r3]
 80073f4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80073f8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80073fc:	3b01      	subs	r3, #1
 80073fe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007402:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007406:	00db      	lsls	r3, r3, #3
 8007408:	4413      	add	r3, r2
 800740a:	ed83 7b00 	vstr	d7, [r3]
			for (b_a = i; b_a < 7; b_a++) {
 800740e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8007412:	3301      	adds	r3, #1
 8007414:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8007418:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800741c:	2b06      	cmp	r3, #6
 800741e:	ddcc      	ble.n	80073ba <QuinticTrajectory_cal_and_set_coeff+0x68e>
	for (k = 0; k < 6; k++) {
 8007420:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8007424:	3301      	adds	r3, #1
 8007426:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800742a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800742e:	2b05      	cmp	r3, #5
 8007430:	dda4      	ble.n	800737c <QuinticTrajectory_cal_and_set_coeff+0x650>
			}
		}
	}
	for (k = 5; k >= 0; k--) {
 8007432:	2305      	movs	r3, #5
 8007434:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8007438:	e06e      	b.n	8007518 <QuinticTrajectory_cal_and_set_coeff+0x7ec>
		jA = 6 * k;
 800743a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800743e:	4613      	mov	r3, r2
 8007440:	005b      	lsls	r3, r3, #1
 8007442:	4413      	add	r3, r2
 8007444:	005b      	lsls	r3, r3, #1
 8007446:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
		smax = a[k];
 800744a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800744e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	4413      	add	r3, r2
 8007456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745a:	e9c7 2374 	strd	r2, r3, [r7, #464]	; 0x1d0
		if (smax != 0.0) {
 800745e:	ed97 7b74 	vldr	d7, [r7, #464]	; 0x1d0
 8007462:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800746a:	d050      	beq.n	800750e <QuinticTrajectory_cal_and_set_coeff+0x7e2>
			smax /= M[k + jA];
 800746c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007470:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007474:	4413      	add	r3, r2
 8007476:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800747a:	00db      	lsls	r3, r3, #3
 800747c:	4413      	add	r3, r2
 800747e:	ed93 6b00 	vldr	d6, [r3]
 8007482:	ed97 5b74 	vldr	d5, [r7, #464]	; 0x1d0
 8007486:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800748a:	ed87 7b74 	vstr	d7, [r7, #464]	; 0x1d0
			a[k] = smax;
 800748e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8007492:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8007496:	00db      	lsls	r3, r3, #3
 8007498:	18d1      	adds	r1, r2, r3
 800749a:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 800749e:	e9c1 2300 	strd	r2, r3, [r1]
			for (b_a = 0; b_a < k; b_a++) {
 80074a2:	2300      	movs	r3, #0
 80074a4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80074a8:	e02b      	b.n	8007502 <QuinticTrajectory_cal_and_set_coeff+0x7d6>
				a[b_a] -= a[k] * M[b_a + jA];
 80074aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80074ae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	4413      	add	r3, r2
 80074b6:	ed93 6b00 	vldr	d6, [r3]
 80074ba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80074be:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80074c2:	00db      	lsls	r3, r3, #3
 80074c4:	4413      	add	r3, r2
 80074c6:	ed93 5b00 	vldr	d5, [r3]
 80074ca:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80074ce:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80074d2:	4413      	add	r3, r2
 80074d4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80074d8:	00db      	lsls	r3, r3, #3
 80074da:	4413      	add	r3, r2
 80074dc:	ed93 7b00 	vldr	d7, [r3]
 80074e0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80074e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80074e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80074ec:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80074f0:	00db      	lsls	r3, r3, #3
 80074f2:	4413      	add	r3, r2
 80074f4:	ed83 7b00 	vstr	d7, [r3]
			for (b_a = 0; b_a < k; b_a++) {
 80074f8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80074fc:	3301      	adds	r3, #1
 80074fe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8007502:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8007506:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800750a:	429a      	cmp	r2, r3
 800750c:	dbcd      	blt.n	80074aa <QuinticTrajectory_cal_and_set_coeff+0x77e>
	for (k = 5; k >= 0; k--) {
 800750e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8007512:	3b01      	subs	r3, #1
 8007514:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8007518:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800751c:	2b00      	cmp	r3, #0
 800751e:	da8c      	bge.n	800743a <QuinticTrajectory_cal_and_set_coeff+0x70e>
			}
		}
	}
	Traj->is_end = 0;
 8007520:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2200      	movs	r2, #0
 8007528:	701a      	strb	r2, [r3, #0]
	Traj->c0 = a[0];
 800752a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800752e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007532:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8007536:	6809      	ldr	r1, [r1, #0]
 8007538:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Traj->c1 = a[1];
 800753c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007540:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007544:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8007548:	6809      	ldr	r1, [r1, #0]
 800754a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	Traj->c2 = a[2];
 800754e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007552:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007556:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800755a:	6809      	ldr	r1, [r1, #0]
 800755c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	Traj->c3 = a[3];
 8007560:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007564:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007568:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800756c:	6809      	ldr	r1, [r1, #0]
 800756e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	Traj->c4 = a[4];
 8007572:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007576:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800757a:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800757e:	6809      	ldr	r1, [r1, #0]
 8007580:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	Traj->c5 = a[5];
 8007584:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007588:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800758c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8007590:	6809      	ldr	r1, [r1, #0]
 8007592:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	Traj->current_time = 0;
 8007596:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800759a:	6819      	ldr	r1, [r3, #0]
 800759c:	f04f 0200 	mov.w	r2, #0
 80075a0:	f04f 0300 	mov.w	r3, #0
 80075a4:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	Traj->time_max = tf;
 80075a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80075ac:	6819      	ldr	r1, [r3, #0]
 80075ae:	463b      	mov	r3, r7
 80075b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b4:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 80075b8:	bf00      	nop
 80075ba:	f507 77ec 	add.w	r7, r7, #472	; 0x1d8
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop

080075c4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b08c      	sub	sp, #48	; 0x30
 80075c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80075ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075ce:	2200      	movs	r2, #0
 80075d0:	601a      	str	r2, [r3, #0]
 80075d2:	605a      	str	r2, [r3, #4]
 80075d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80075d6:	463b      	mov	r3, r7
 80075d8:	2224      	movs	r2, #36	; 0x24
 80075da:	2100      	movs	r1, #0
 80075dc:	4618      	mov	r0, r3
 80075de:	f00c fe09 	bl	80141f4 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80075e2:	4b31      	ldr	r3, [pc, #196]	; (80076a8 <MX_ADC1_Init+0xe4>)
 80075e4:	4a31      	ldr	r2, [pc, #196]	; (80076ac <MX_ADC1_Init+0xe8>)
 80075e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80075e8:	4b2f      	ldr	r3, [pc, #188]	; (80076a8 <MX_ADC1_Init+0xe4>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80075ee:	4b2e      	ldr	r3, [pc, #184]	; (80076a8 <MX_ADC1_Init+0xe4>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80075f4:	4b2c      	ldr	r3, [pc, #176]	; (80076a8 <MX_ADC1_Init+0xe4>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80075fa:	4b2b      	ldr	r3, [pc, #172]	; (80076a8 <MX_ADC1_Init+0xe4>)
 80075fc:	2204      	movs	r2, #4
 80075fe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007600:	4b29      	ldr	r3, [pc, #164]	; (80076a8 <MX_ADC1_Init+0xe4>)
 8007602:	2200      	movs	r2, #0
 8007604:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007606:	4b28      	ldr	r3, [pc, #160]	; (80076a8 <MX_ADC1_Init+0xe4>)
 8007608:	2200      	movs	r2, #0
 800760a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800760c:	4b26      	ldr	r3, [pc, #152]	; (80076a8 <MX_ADC1_Init+0xe4>)
 800760e:	2201      	movs	r2, #1
 8007610:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007612:	4b25      	ldr	r3, [pc, #148]	; (80076a8 <MX_ADC1_Init+0xe4>)
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800761a:	4b23      	ldr	r3, [pc, #140]	; (80076a8 <MX_ADC1_Init+0xe4>)
 800761c:	2200      	movs	r2, #0
 800761e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007620:	4b21      	ldr	r3, [pc, #132]	; (80076a8 <MX_ADC1_Init+0xe4>)
 8007622:	2200      	movs	r2, #0
 8007624:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8007626:	4b20      	ldr	r3, [pc, #128]	; (80076a8 <MX_ADC1_Init+0xe4>)
 8007628:	2200      	movs	r2, #0
 800762a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800762c:	4b1e      	ldr	r3, [pc, #120]	; (80076a8 <MX_ADC1_Init+0xe4>)
 800762e:	2200      	movs	r2, #0
 8007630:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8007632:	4b1d      	ldr	r3, [pc, #116]	; (80076a8 <MX_ADC1_Init+0xe4>)
 8007634:	2200      	movs	r2, #0
 8007636:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8007638:	4b1b      	ldr	r3, [pc, #108]	; (80076a8 <MX_ADC1_Init+0xe4>)
 800763a:	2200      	movs	r2, #0
 800763c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007640:	4819      	ldr	r0, [pc, #100]	; (80076a8 <MX_ADC1_Init+0xe4>)
 8007642:	f003 f825 	bl	800a690 <HAL_ADC_Init>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800764c:	f001 f83b 	bl	80086c6 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007650:	2300      	movs	r3, #0
 8007652:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007658:	4619      	mov	r1, r3
 800765a:	4813      	ldr	r0, [pc, #76]	; (80076a8 <MX_ADC1_Init+0xe4>)
 800765c:	f004 f85e 	bl	800b71c <HAL_ADCEx_MultiModeConfigChannel>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d001      	beq.n	800766a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8007666:	f001 f82e 	bl	80086c6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800766a:	4b11      	ldr	r3, [pc, #68]	; (80076b0 <MX_ADC1_Init+0xec>)
 800766c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800766e:	2306      	movs	r3, #6
 8007670:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8007672:	2300      	movs	r3, #0
 8007674:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8007676:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800767a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800767c:	2304      	movs	r3, #4
 800767e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8007680:	2300      	movs	r3, #0
 8007682:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8007684:	2300      	movs	r3, #0
 8007686:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800768a:	463b      	mov	r3, r7
 800768c:	4619      	mov	r1, r3
 800768e:	4806      	ldr	r0, [pc, #24]	; (80076a8 <MX_ADC1_Init+0xe4>)
 8007690:	f003 fa06 	bl	800aaa0 <HAL_ADC_ConfigChannel>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d001      	beq.n	800769e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800769a:	f001 f814 	bl	80086c6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800769e:	bf00      	nop
 80076a0:	3730      	adds	r7, #48	; 0x30
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	24000428 	.word	0x24000428
 80076ac:	40022000 	.word	0x40022000
 80076b0:	2a000400 	.word	0x2a000400

080076b4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b08a      	sub	sp, #40	; 0x28
 80076b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80076ba:	1d3b      	adds	r3, r7, #4
 80076bc:	2224      	movs	r2, #36	; 0x24
 80076be:	2100      	movs	r1, #0
 80076c0:	4618      	mov	r0, r3
 80076c2:	f00c fd97 	bl	80141f4 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80076c6:	4b30      	ldr	r3, [pc, #192]	; (8007788 <MX_ADC3_Init+0xd4>)
 80076c8:	4a30      	ldr	r2, [pc, #192]	; (800778c <MX_ADC3_Init+0xd8>)
 80076ca:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80076cc:	4b2e      	ldr	r3, [pc, #184]	; (8007788 <MX_ADC3_Init+0xd4>)
 80076ce:	2200      	movs	r2, #0
 80076d0:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80076d2:	4b2d      	ldr	r3, [pc, #180]	; (8007788 <MX_ADC3_Init+0xd4>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80076d8:	4b2b      	ldr	r3, [pc, #172]	; (8007788 <MX_ADC3_Init+0xd4>)
 80076da:	2200      	movs	r2, #0
 80076dc:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80076de:	4b2a      	ldr	r3, [pc, #168]	; (8007788 <MX_ADC3_Init+0xd4>)
 80076e0:	2204      	movs	r2, #4
 80076e2:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80076e4:	4b28      	ldr	r3, [pc, #160]	; (8007788 <MX_ADC3_Init+0xd4>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80076ea:	4b27      	ldr	r3, [pc, #156]	; (8007788 <MX_ADC3_Init+0xd4>)
 80076ec:	2201      	movs	r2, #1
 80076ee:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80076f0:	4b25      	ldr	r3, [pc, #148]	; (8007788 <MX_ADC3_Init+0xd4>)
 80076f2:	2201      	movs	r2, #1
 80076f4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80076f6:	4b24      	ldr	r3, [pc, #144]	; (8007788 <MX_ADC3_Init+0xd4>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80076fe:	4b22      	ldr	r3, [pc, #136]	; (8007788 <MX_ADC3_Init+0xd4>)
 8007700:	2200      	movs	r2, #0
 8007702:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007704:	4b20      	ldr	r3, [pc, #128]	; (8007788 <MX_ADC3_Init+0xd4>)
 8007706:	2200      	movs	r2, #0
 8007708:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800770a:	4b1f      	ldr	r3, [pc, #124]	; (8007788 <MX_ADC3_Init+0xd4>)
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8007712:	4b1d      	ldr	r3, [pc, #116]	; (8007788 <MX_ADC3_Init+0xd4>)
 8007714:	2200      	movs	r2, #0
 8007716:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8007718:	4b1b      	ldr	r3, [pc, #108]	; (8007788 <MX_ADC3_Init+0xd4>)
 800771a:	2200      	movs	r2, #0
 800771c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800771e:	4b1a      	ldr	r3, [pc, #104]	; (8007788 <MX_ADC3_Init+0xd4>)
 8007720:	2200      	movs	r2, #0
 8007722:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8007724:	4b18      	ldr	r3, [pc, #96]	; (8007788 <MX_ADC3_Init+0xd4>)
 8007726:	2200      	movs	r2, #0
 8007728:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 800772a:	4b17      	ldr	r3, [pc, #92]	; (8007788 <MX_ADC3_Init+0xd4>)
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8007732:	4815      	ldr	r0, [pc, #84]	; (8007788 <MX_ADC3_Init+0xd4>)
 8007734:	f002 ffac 	bl	800a690 <HAL_ADC_Init>
 8007738:	4603      	mov	r3, r0
 800773a:	2b00      	cmp	r3, #0
 800773c:	d001      	beq.n	8007742 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800773e:	f000 ffc2 	bl	80086c6 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8007742:	4b13      	ldr	r3, [pc, #76]	; (8007790 <MX_ADC3_Init+0xdc>)
 8007744:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007746:	2306      	movs	r3, #6
 8007748:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_12CYCLES_5;
 800774a:	2302      	movs	r3, #2
 800774c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800774e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007752:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8007754:	2304      	movs	r3, #4
 8007756:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8007758:	2300      	movs	r3, #0
 800775a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800775c:	2300      	movs	r3, #0
 800775e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8007762:	2300      	movs	r3, #0
 8007764:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8007766:	2300      	movs	r3, #0
 8007768:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800776c:	1d3b      	adds	r3, r7, #4
 800776e:	4619      	mov	r1, r3
 8007770:	4805      	ldr	r0, [pc, #20]	; (8007788 <MX_ADC3_Init+0xd4>)
 8007772:	f003 f995 	bl	800aaa0 <HAL_ADC_ConfigChannel>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d001      	beq.n	8007780 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 800777c:	f000 ffa3 	bl	80086c6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8007780:	bf00      	nop
 8007782:	3728      	adds	r7, #40	; 0x28
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	24000498 	.word	0x24000498
 800778c:	58026000 	.word	0x58026000
 8007790:	c7520000 	.word	0xc7520000

08007794 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b08a      	sub	sp, #40	; 0x28
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800779c:	f107 0314 	add.w	r3, r7, #20
 80077a0:	2200      	movs	r2, #0
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	605a      	str	r2, [r3, #4]
 80077a6:	609a      	str	r2, [r3, #8]
 80077a8:	60da      	str	r2, [r3, #12]
 80077aa:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a22      	ldr	r2, [pc, #136]	; (800783c <HAL_ADC_MspInit+0xa8>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d12a      	bne.n	800780c <HAL_ADC_MspInit+0x78>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80077b6:	4b22      	ldr	r3, [pc, #136]	; (8007840 <HAL_ADC_MspInit+0xac>)
 80077b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80077bc:	4a20      	ldr	r2, [pc, #128]	; (8007840 <HAL_ADC_MspInit+0xac>)
 80077be:	f043 0320 	orr.w	r3, r3, #32
 80077c2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80077c6:	4b1e      	ldr	r3, [pc, #120]	; (8007840 <HAL_ADC_MspInit+0xac>)
 80077c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80077cc:	f003 0320 	and.w	r3, r3, #32
 80077d0:	613b      	str	r3, [r7, #16]
 80077d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80077d4:	4b1a      	ldr	r3, [pc, #104]	; (8007840 <HAL_ADC_MspInit+0xac>)
 80077d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80077da:	4a19      	ldr	r2, [pc, #100]	; (8007840 <HAL_ADC_MspInit+0xac>)
 80077dc:	f043 0304 	orr.w	r3, r3, #4
 80077e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80077e4:	4b16      	ldr	r3, [pc, #88]	; (8007840 <HAL_ADC_MspInit+0xac>)
 80077e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80077ea:	f003 0304 	and.w	r3, r3, #4
 80077ee:	60fb      	str	r3, [r7, #12]
 80077f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80077f2:	2301      	movs	r3, #1
 80077f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80077f6:	2303      	movs	r3, #3
 80077f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077fa:	2300      	movs	r3, #0
 80077fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077fe:	f107 0314 	add.w	r3, r7, #20
 8007802:	4619      	mov	r1, r3
 8007804:	480f      	ldr	r0, [pc, #60]	; (8007844 <HAL_ADC_MspInit+0xb0>)
 8007806:	f005 f8db 	bl	800c9c0 <HAL_GPIO_Init>
    __HAL_RCC_ADC3_CLK_ENABLE();
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800780a:	e013      	b.n	8007834 <HAL_ADC_MspInit+0xa0>
  else if(adcHandle->Instance==ADC3)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a0d      	ldr	r2, [pc, #52]	; (8007848 <HAL_ADC_MspInit+0xb4>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d10e      	bne.n	8007834 <HAL_ADC_MspInit+0xa0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8007816:	4b0a      	ldr	r3, [pc, #40]	; (8007840 <HAL_ADC_MspInit+0xac>)
 8007818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800781c:	4a08      	ldr	r2, [pc, #32]	; (8007840 <HAL_ADC_MspInit+0xac>)
 800781e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007822:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007826:	4b06      	ldr	r3, [pc, #24]	; (8007840 <HAL_ADC_MspInit+0xac>)
 8007828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800782c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007830:	60bb      	str	r3, [r7, #8]
 8007832:	68bb      	ldr	r3, [r7, #8]
}
 8007834:	bf00      	nop
 8007836:	3728      	adds	r7, #40	; 0x28
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	40022000 	.word	0x40022000
 8007840:	58024400 	.word	0x58024400
 8007844:	58020800 	.word	0x58020800
 8007848:	58026000 	.word	0x58026000

0800784c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8007850:	4b12      	ldr	r3, [pc, #72]	; (800789c <MX_CRC_Init+0x50>)
 8007852:	4a13      	ldr	r2, [pc, #76]	; (80078a0 <MX_CRC_Init+0x54>)
 8007854:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8007856:	4b11      	ldr	r3, [pc, #68]	; (800789c <MX_CRC_Init+0x50>)
 8007858:	2201      	movs	r2, #1
 800785a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 800785c:	4b0f      	ldr	r3, [pc, #60]	; (800789c <MX_CRC_Init+0x50>)
 800785e:	2201      	movs	r2, #1
 8007860:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 8007862:	4b0e      	ldr	r3, [pc, #56]	; (800789c <MX_CRC_Init+0x50>)
 8007864:	221d      	movs	r2, #29
 8007866:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8007868:	4b0c      	ldr	r3, [pc, #48]	; (800789c <MX_CRC_Init+0x50>)
 800786a:	2210      	movs	r2, #16
 800786c:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 800786e:	4b0b      	ldr	r3, [pc, #44]	; (800789c <MX_CRC_Init+0x50>)
 8007870:	22c4      	movs	r2, #196	; 0xc4
 8007872:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8007874:	4b09      	ldr	r3, [pc, #36]	; (800789c <MX_CRC_Init+0x50>)
 8007876:	2200      	movs	r2, #0
 8007878:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800787a:	4b08      	ldr	r3, [pc, #32]	; (800789c <MX_CRC_Init+0x50>)
 800787c:	2200      	movs	r2, #0
 800787e:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8007880:	4b06      	ldr	r3, [pc, #24]	; (800789c <MX_CRC_Init+0x50>)
 8007882:	2201      	movs	r2, #1
 8007884:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8007886:	4805      	ldr	r0, [pc, #20]	; (800789c <MX_CRC_Init+0x50>)
 8007888:	f004 f93a 	bl	800bb00 <HAL_CRC_Init>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8007892:	f000 ff18 	bl	80086c6 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8007896:	bf00      	nop
 8007898:	bd80      	pop	{r7, pc}
 800789a:	bf00      	nop
 800789c:	24000508 	.word	0x24000508
 80078a0:	58024c00 	.word	0x58024c00

080078a4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a0b      	ldr	r2, [pc, #44]	; (80078e0 <HAL_CRC_MspInit+0x3c>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d10e      	bne.n	80078d4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80078b6:	4b0b      	ldr	r3, [pc, #44]	; (80078e4 <HAL_CRC_MspInit+0x40>)
 80078b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078bc:	4a09      	ldr	r2, [pc, #36]	; (80078e4 <HAL_CRC_MspInit+0x40>)
 80078be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80078c6:	4b07      	ldr	r3, [pc, #28]	; (80078e4 <HAL_CRC_MspInit+0x40>)
 80078c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078d0:	60fb      	str	r3, [r7, #12]
 80078d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80078d4:	bf00      	nop
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	58024c00 	.word	0x58024c00
 80078e4:	58024400 	.word	0x58024400

080078e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b08c      	sub	sp, #48	; 0x30
 80078ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078ee:	f107 031c 	add.w	r3, r7, #28
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]
 80078f6:	605a      	str	r2, [r3, #4]
 80078f8:	609a      	str	r2, [r3, #8]
 80078fa:	60da      	str	r2, [r3, #12]
 80078fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80078fe:	4b65      	ldr	r3, [pc, #404]	; (8007a94 <MX_GPIO_Init+0x1ac>)
 8007900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007904:	4a63      	ldr	r2, [pc, #396]	; (8007a94 <MX_GPIO_Init+0x1ac>)
 8007906:	f043 0310 	orr.w	r3, r3, #16
 800790a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800790e:	4b61      	ldr	r3, [pc, #388]	; (8007a94 <MX_GPIO_Init+0x1ac>)
 8007910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007914:	f003 0310 	and.w	r3, r3, #16
 8007918:	61bb      	str	r3, [r7, #24]
 800791a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800791c:	4b5d      	ldr	r3, [pc, #372]	; (8007a94 <MX_GPIO_Init+0x1ac>)
 800791e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007922:	4a5c      	ldr	r2, [pc, #368]	; (8007a94 <MX_GPIO_Init+0x1ac>)
 8007924:	f043 0304 	orr.w	r3, r3, #4
 8007928:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800792c:	4b59      	ldr	r3, [pc, #356]	; (8007a94 <MX_GPIO_Init+0x1ac>)
 800792e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007932:	f003 0304 	and.w	r3, r3, #4
 8007936:	617b      	str	r3, [r7, #20]
 8007938:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800793a:	4b56      	ldr	r3, [pc, #344]	; (8007a94 <MX_GPIO_Init+0x1ac>)
 800793c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007940:	4a54      	ldr	r2, [pc, #336]	; (8007a94 <MX_GPIO_Init+0x1ac>)
 8007942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800794a:	4b52      	ldr	r3, [pc, #328]	; (8007a94 <MX_GPIO_Init+0x1ac>)
 800794c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007954:	613b      	str	r3, [r7, #16]
 8007956:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007958:	4b4e      	ldr	r3, [pc, #312]	; (8007a94 <MX_GPIO_Init+0x1ac>)
 800795a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800795e:	4a4d      	ldr	r2, [pc, #308]	; (8007a94 <MX_GPIO_Init+0x1ac>)
 8007960:	f043 0301 	orr.w	r3, r3, #1
 8007964:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007968:	4b4a      	ldr	r3, [pc, #296]	; (8007a94 <MX_GPIO_Init+0x1ac>)
 800796a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	60fb      	str	r3, [r7, #12]
 8007974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007976:	4b47      	ldr	r3, [pc, #284]	; (8007a94 <MX_GPIO_Init+0x1ac>)
 8007978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800797c:	4a45      	ldr	r2, [pc, #276]	; (8007a94 <MX_GPIO_Init+0x1ac>)
 800797e:	f043 0302 	orr.w	r3, r3, #2
 8007982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007986:	4b43      	ldr	r3, [pc, #268]	; (8007a94 <MX_GPIO_Init+0x1ac>)
 8007988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	60bb      	str	r3, [r7, #8]
 8007992:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007994:	4b3f      	ldr	r3, [pc, #252]	; (8007a94 <MX_GPIO_Init+0x1ac>)
 8007996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800799a:	4a3e      	ldr	r2, [pc, #248]	; (8007a94 <MX_GPIO_Init+0x1ac>)
 800799c:	f043 0308 	orr.w	r3, r3, #8
 80079a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80079a4:	4b3b      	ldr	r3, [pc, #236]	; (8007a94 <MX_GPIO_Init+0x1ac>)
 80079a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079aa:	f003 0308 	and.w	r3, r3, #8
 80079ae:	607b      	str	r3, [r7, #4]
 80079b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);
 80079b2:	2200      	movs	r2, #0
 80079b4:	2118      	movs	r1, #24
 80079b6:	4838      	ldr	r0, [pc, #224]	; (8007a98 <MX_GPIO_Init+0x1b0>)
 80079b8:	f005 f9aa 	bl	800cd10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DIR3_Pin|DIR4_Pin|DIR5_Pin|GPIO_PIN_8
 80079bc:	2200      	movs	r2, #0
 80079be:	f44f 4163 	mov.w	r1, #58112	; 0xe300
 80079c2:	4836      	ldr	r0, [pc, #216]	; (8007a9c <MX_GPIO_Init+0x1b4>)
 80079c4:	f005 f9a4 	bl	800cd10 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 80079c8:	2201      	movs	r2, #1
 80079ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80079ce:	4832      	ldr	r0, [pc, #200]	; (8007a98 <MX_GPIO_Init+0x1b0>)
 80079d0:	f005 f99e 	bl	800cd10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80079d4:	2200      	movs	r2, #0
 80079d6:	f644 7111 	movw	r1, #20241	; 0x4f11
 80079da:	4831      	ldr	r0, [pc, #196]	; (8007aa0 <MX_GPIO_Init+0x1b8>)
 80079dc:	f005 f998 	bl	800cd10 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14|SPI3_SS1_Pin|USART2_DE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin, GPIO_PIN_RESET);
 80079e0:	2200      	movs	r2, #0
 80079e2:	f44f 4103 	mov.w	r1, #33536	; 0x8300
 80079e6:	482f      	ldr	r0, [pc, #188]	; (8007aa4 <MX_GPIO_Init+0x1bc>)
 80079e8:	f005 f992 	bl	800cd10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80079ec:	2200      	movs	r2, #0
 80079ee:	21f0      	movs	r1, #240	; 0xf0
 80079f0:	482d      	ldr	r0, [pc, #180]	; (8007aa8 <MX_GPIO_Init+0x1c0>)
 80079f2:	f005 f98d 	bl	800cd10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin|OE_Pin;
 80079f6:	f44f 738c 	mov.w	r3, #280	; 0x118
 80079fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079fc:	2301      	movs	r3, #1
 80079fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a00:	2300      	movs	r3, #0
 8007a02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a04:	2300      	movs	r3, #0
 8007a06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007a08:	f107 031c 	add.w	r3, r7, #28
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	4822      	ldr	r0, [pc, #136]	; (8007a98 <MX_GPIO_Init+0x1b0>)
 8007a10:	f004 ffd6 	bl	800c9c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC8
                           PC9 */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|GPIO_PIN_8
 8007a14:	f44f 4363 	mov.w	r3, #58112	; 0xe300
 8007a18:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a22:	2300      	movs	r3, #0
 8007a24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a26:	f107 031c 	add.w	r3, r7, #28
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	481b      	ldr	r0, [pc, #108]	; (8007a9c <MX_GPIO_Init+0x1b4>)
 8007a2e:	f004 ffc7 	bl	800c9c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD14 PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8007a32:	f644 7311 	movw	r3, #20241	; 0x4f11
 8007a36:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14|SPI3_SS1_Pin|USART2_DE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a40:	2300      	movs	r3, #0
 8007a42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007a44:	f107 031c 	add.w	r3, r7, #28
 8007a48:	4619      	mov	r1, r3
 8007a4a:	4815      	ldr	r0, [pc, #84]	; (8007aa0 <MX_GPIO_Init+0x1b8>)
 8007a4c:	f004 ffb8 	bl	800c9c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PAPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|UART4_DE_Pin;
 8007a50:	f44f 4303 	mov.w	r3, #33536	; 0x8300
 8007a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a56:	2301      	movs	r3, #1
 8007a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a62:	f107 031c 	add.w	r3, r7, #28
 8007a66:	4619      	mov	r1, r3
 8007a68:	480e      	ldr	r0, [pc, #56]	; (8007aa4 <MX_GPIO_Init+0x1bc>)
 8007a6a:	f004 ffa9 	bl	800c9c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|LED2_Pin|LED1_Pin;
 8007a6e:	23f0      	movs	r3, #240	; 0xf0
 8007a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a72:	2301      	movs	r3, #1
 8007a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a76:	2300      	movs	r3, #0
 8007a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a7e:	f107 031c 	add.w	r3, r7, #28
 8007a82:	4619      	mov	r1, r3
 8007a84:	4808      	ldr	r0, [pc, #32]	; (8007aa8 <MX_GPIO_Init+0x1c0>)
 8007a86:	f004 ff9b 	bl	800c9c0 <HAL_GPIO_Init>

}
 8007a8a:	bf00      	nop
 8007a8c:	3730      	adds	r7, #48	; 0x30
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	58024400 	.word	0x58024400
 8007a98:	58021000 	.word	0x58021000
 8007a9c:	58020800 	.word	0x58020800
 8007aa0:	58020c00 	.word	0x58020c00
 8007aa4:	58020000 	.word	0x58020000
 8007aa8:	58020400 	.word	0x58020400
 8007aac:	00000000 	.word	0x00000000

08007ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007ab0:	b5b0      	push	{r4, r5, r7, lr}
 8007ab2:	b0d6      	sub	sp, #344	; 0x158
 8007ab4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007ab6:	f002 fb13 	bl	800a0e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007aba:	f000 fd5d 	bl	8008578 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8007abe:	f000 fdd5 	bl	800866c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007ac2:	f7ff ff11 	bl	80078e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8007ac6:	f7ff fd7d 	bl	80075c4 <MX_ADC1_Init>
  MX_ADC3_Init();
 8007aca:	f7ff fdf3 	bl	80076b4 <MX_ADC3_Init>
  MX_SPI3_Init();
 8007ace:	f000 fdff 	bl	80086d0 <MX_SPI3_Init>
  MX_TIM1_Init();
 8007ad2:	f001 f873 	bl	8008bbc <MX_TIM1_Init>
  MX_TIM2_Init();
 8007ad6:	f001 f91f 	bl	8008d18 <MX_TIM2_Init>
  MX_TIM3_Init();
 8007ada:	f001 f995 	bl	8008e08 <MX_TIM3_Init>
  MX_TIM4_Init();
 8007ade:	f001 fa0b 	bl	8008ef8 <MX_TIM4_Init>
  MX_TIM12_Init();
 8007ae2:	f001 fa81 	bl	8008fe8 <MX_TIM12_Init>
  MX_TIM13_Init();
 8007ae6:	f001 fae3 	bl	80090b0 <MX_TIM13_Init>
  MX_TIM14_Init();
 8007aea:	f001 fb05 	bl	80090f8 <MX_TIM14_Init>
  MX_TIM15_Init();
 8007aee:	f001 fb51 	bl	8009194 <MX_TIM15_Init>
  MX_TIM16_Init();
 8007af2:	f001 fbf3 	bl	80092dc <MX_TIM16_Init>
  MX_TIM17_Init();
 8007af6:	f001 fc6b 	bl	80093d0 <MX_TIM17_Init>
  MX_UART4_Init();
 8007afa:	f002 f845 	bl	8009b88 <MX_UART4_Init>
  MX_UART5_Init();
 8007afe:	f002 f88f 	bl	8009c20 <MX_UART5_Init>
  MX_USART2_UART_Init();
 8007b02:	f002 f8d9 	bl	8009cb8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8007b06:	f002 f923 	bl	8009d50 <MX_USART3_UART_Init>
  MX_TIM23_Init();
 8007b0a:	f001 fcdd 	bl	80094c8 <MX_TIM23_Init>
  MX_CRC_Init();
 8007b0e:	f7ff fe9d 	bl	800784c <MX_CRC_Init>
  MX_TIM24_Init();
 8007b12:	f001 fd29 	bl	8009568 <MX_TIM24_Init>
  /* USER CODE BEGIN 2 */
	ARMsProtocol_FUNC_Init();
 8007b16:	f7f8 fec9 	bl	80008ac <ARMsProtocol_FUNC_Init>

	/*
	 * Servo Initialise
	 */
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, 1);
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b20:	48b3      	ldr	r0, [pc, #716]	; (8007df0 <main+0x340>)
 8007b22:	f005 f8f5 	bl	800cd10 <HAL_GPIO_WritePin>
	servo_initialise(&servo_motor, &htim17, TIM_CHANNEL_1);
 8007b26:	2200      	movs	r2, #0
 8007b28:	49b2      	ldr	r1, [pc, #712]	; (8007df4 <main+0x344>)
 8007b2a:	48b3      	ldr	r0, [pc, #716]	; (8007df8 <main+0x348>)
 8007b2c:	f7fe fdd6 	bl	80066dc <servo_initialise>
	/*
	 * Encoder Initialise
	 */
	AMT21_initialise(&encoders[0], &huart2, 0x2C, USART2_DE_GPIO_Port,
 8007b30:	2310      	movs	r3, #16
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	4bb1      	ldr	r3, [pc, #708]	; (8007dfc <main+0x34c>)
 8007b36:	222c      	movs	r2, #44	; 0x2c
 8007b38:	49b1      	ldr	r1, [pc, #708]	; (8007e00 <main+0x350>)
 8007b3a:	48b2      	ldr	r0, [pc, #712]	; (8007e04 <main+0x354>)
 8007b3c:	f7f8 fdbc 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[1], &huart2, 0x70, USART2_DE_GPIO_Port,
 8007b40:	2310      	movs	r3, #16
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	4bad      	ldr	r3, [pc, #692]	; (8007dfc <main+0x34c>)
 8007b46:	2270      	movs	r2, #112	; 0x70
 8007b48:	49ad      	ldr	r1, [pc, #692]	; (8007e00 <main+0x350>)
 8007b4a:	48af      	ldr	r0, [pc, #700]	; (8007e08 <main+0x358>)
 8007b4c:	f7f8 fdb4 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[2], &huart2, 0x54, USART2_DE_GPIO_Port,
 8007b50:	2310      	movs	r3, #16
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	4ba9      	ldr	r3, [pc, #676]	; (8007dfc <main+0x34c>)
 8007b56:	2254      	movs	r2, #84	; 0x54
 8007b58:	49a9      	ldr	r1, [pc, #676]	; (8007e00 <main+0x350>)
 8007b5a:	48ac      	ldr	r0, [pc, #688]	; (8007e0c <main+0x35c>)
 8007b5c:	f7f8 fdac 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[4], &huart2, 0xE8, USART2_DE_GPIO_Port,
 8007b60:	2310      	movs	r3, #16
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	4ba5      	ldr	r3, [pc, #660]	; (8007dfc <main+0x34c>)
 8007b66:	22e8      	movs	r2, #232	; 0xe8
 8007b68:	49a5      	ldr	r1, [pc, #660]	; (8007e00 <main+0x350>)
 8007b6a:	48a9      	ldr	r0, [pc, #676]	; (8007e10 <main+0x360>)
 8007b6c:	f7f8 fda4 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	AMT21_initialise(&encoders[3], &huart2, 0xB4, USART2_DE_GPIO_Port,
 8007b70:	2310      	movs	r3, #16
 8007b72:	9300      	str	r3, [sp, #0]
 8007b74:	4ba1      	ldr	r3, [pc, #644]	; (8007dfc <main+0x34c>)
 8007b76:	22b4      	movs	r2, #180	; 0xb4
 8007b78:	49a1      	ldr	r1, [pc, #644]	; (8007e00 <main+0x350>)
 8007b7a:	48a6      	ldr	r0, [pc, #664]	; (8007e14 <main+0x364>)
 8007b7c:	f7f8 fd9c 	bl	80006b8 <AMT21_initialise>
	USART2_DE_Pin);
	/*
	 * Stepper Initialise
	 */
	stepper_initialise(&steppers[0], &htim1, TIM_CHANNEL_1, DIR1_GPIO_Port,
 8007b80:	2301      	movs	r3, #1
 8007b82:	9301      	str	r3, [sp, #4]
 8007b84:	2308      	movs	r3, #8
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	4b99      	ldr	r3, [pc, #612]	; (8007df0 <main+0x340>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	49a2      	ldr	r1, [pc, #648]	; (8007e18 <main+0x368>)
 8007b8e:	48a3      	ldr	r0, [pc, #652]	; (8007e1c <main+0x36c>)
 8007b90:	f7fe fd66 	bl	8006660 <stepper_initialise>
	DIR1_Pin, 1); //swap 0 -> 1
	stepper_initialise(&steppers[1], &htim2, TIM_CHANNEL_1, DIR2_GPIO_Port,
 8007b94:	2301      	movs	r3, #1
 8007b96:	9301      	str	r3, [sp, #4]
 8007b98:	2310      	movs	r3, #16
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	4b94      	ldr	r3, [pc, #592]	; (8007df0 <main+0x340>)
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	499f      	ldr	r1, [pc, #636]	; (8007e20 <main+0x370>)
 8007ba2:	48a0      	ldr	r0, [pc, #640]	; (8007e24 <main+0x374>)
 8007ba4:	f7fe fd5c 	bl	8006660 <stepper_initialise>
	DIR2_Pin, 1);
	stepper_initialise(&steppers[2], &htim3, TIM_CHANNEL_1, DIR3_GPIO_Port,
 8007ba8:	2300      	movs	r3, #0
 8007baa:	9301      	str	r3, [sp, #4]
 8007bac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bb0:	9300      	str	r3, [sp, #0]
 8007bb2:	4b9d      	ldr	r3, [pc, #628]	; (8007e28 <main+0x378>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	499d      	ldr	r1, [pc, #628]	; (8007e2c <main+0x37c>)
 8007bb8:	489d      	ldr	r0, [pc, #628]	; (8007e30 <main+0x380>)
 8007bba:	f7fe fd51 	bl	8006660 <stepper_initialise>
	DIR3_Pin, 0); //swap 1 -> 0
	stepper_initialise(&steppers[4], &htim4, TIM_CHANNEL_1, DIR4_GPIO_Port,
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	9301      	str	r3, [sp, #4]
 8007bc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007bc6:	9300      	str	r3, [sp, #0]
 8007bc8:	4b97      	ldr	r3, [pc, #604]	; (8007e28 <main+0x378>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	4999      	ldr	r1, [pc, #612]	; (8007e34 <main+0x384>)
 8007bce:	489a      	ldr	r0, [pc, #616]	; (8007e38 <main+0x388>)
 8007bd0:	f7fe fd46 	bl	8006660 <stepper_initialise>
	DIR4_Pin, 0);
	stepper_initialise(&steppers[3], &htim15, TIM_CHANNEL_1, DIR5_GPIO_Port,
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	9301      	str	r3, [sp, #4]
 8007bd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	4b92      	ldr	r3, [pc, #584]	; (8007e28 <main+0x378>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	4996      	ldr	r1, [pc, #600]	; (8007e3c <main+0x38c>)
 8007be4:	4896      	ldr	r0, [pc, #600]	; (8007e40 <main+0x390>)
 8007be6:	f7fe fd3b 	bl	8006660 <stepper_initialise>
	DIR5_Pin, 1);
	/*
	 * Kalman Filter Initialise
	 */
	KalmanFilter_initialise(&kalman_filter[0], 0, 0, 1, 0, 0, 1, KALMAN_R,
 8007bea:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 8007bee:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8007db0 <main+0x300>
 8007bf2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8007bf6:	ed9f 4b70 	vldr	d4, [pc, #448]	; 8007db8 <main+0x308>
 8007bfa:	ed9f 3b6f 	vldr	d3, [pc, #444]	; 8007db8 <main+0x308>
 8007bfe:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007c02:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 8007db8 <main+0x308>
 8007c06:	ed9f 0b6c 	vldr	d0, [pc, #432]	; 8007db8 <main+0x308>
 8007c0a:	488e      	ldr	r0, [pc, #568]	; (8007e44 <main+0x394>)
 8007c0c:	f7f9 fb68 	bl	80012e0 <KalmanFilter_initialise>
	KALMAN_Q);
	KalmanFilter_initialise(&kalman_filter[1], 0, 0, 1, 0, 0, 1, KALMAN_R,
 8007c10:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 8007c14:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8007db0 <main+0x300>
 8007c18:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8007c1c:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8007db8 <main+0x308>
 8007c20:	ed9f 3b65 	vldr	d3, [pc, #404]	; 8007db8 <main+0x308>
 8007c24:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007c28:	ed9f 1b63 	vldr	d1, [pc, #396]	; 8007db8 <main+0x308>
 8007c2c:	ed9f 0b62 	vldr	d0, [pc, #392]	; 8007db8 <main+0x308>
 8007c30:	4885      	ldr	r0, [pc, #532]	; (8007e48 <main+0x398>)
 8007c32:	f7f9 fb55 	bl	80012e0 <KalmanFilter_initialise>
	KALMAN_Q);
	KalmanFilter_initialise(&kalman_filter[2], 0, 0, 1, 0, 0, 1, KALMAN_R,
 8007c36:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 8007c3a:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8007db0 <main+0x300>
 8007c3e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8007c42:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 8007db8 <main+0x308>
 8007c46:	ed9f 3b5c 	vldr	d3, [pc, #368]	; 8007db8 <main+0x308>
 8007c4a:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007c4e:	ed9f 1b5a 	vldr	d1, [pc, #360]	; 8007db8 <main+0x308>
 8007c52:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8007db8 <main+0x308>
 8007c56:	487d      	ldr	r0, [pc, #500]	; (8007e4c <main+0x39c>)
 8007c58:	f7f9 fb42 	bl	80012e0 <KalmanFilter_initialise>
	KALMAN_Q);
	KalmanFilter_initialise(&kalman_filter[3], 0, 0, 1, 0, 0, 1, KALMAN_R,
 8007c5c:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 8007c60:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8007db0 <main+0x300>
 8007c64:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8007c68:	ed9f 4b53 	vldr	d4, [pc, #332]	; 8007db8 <main+0x308>
 8007c6c:	ed9f 3b52 	vldr	d3, [pc, #328]	; 8007db8 <main+0x308>
 8007c70:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007c74:	ed9f 1b50 	vldr	d1, [pc, #320]	; 8007db8 <main+0x308>
 8007c78:	ed9f 0b4f 	vldr	d0, [pc, #316]	; 8007db8 <main+0x308>
 8007c7c:	4874      	ldr	r0, [pc, #464]	; (8007e50 <main+0x3a0>)
 8007c7e:	f7f9 fb2f 	bl	80012e0 <KalmanFilter_initialise>
	KALMAN_Q);
	KalmanFilter_initialise(&kalman_filter[4], 0, 0, 1, 0, 0, 1, KALMAN_R,
 8007c82:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 8007c86:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8007db0 <main+0x300>
 8007c8a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8007c8e:	ed9f 4b4a 	vldr	d4, [pc, #296]	; 8007db8 <main+0x308>
 8007c92:	ed9f 3b49 	vldr	d3, [pc, #292]	; 8007db8 <main+0x308>
 8007c96:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8007c9a:	ed9f 1b47 	vldr	d1, [pc, #284]	; 8007db8 <main+0x308>
 8007c9e:	ed9f 0b46 	vldr	d0, [pc, #280]	; 8007db8 <main+0x308>
 8007ca2:	486c      	ldr	r0, [pc, #432]	; (8007e54 <main+0x3a4>)
 8007ca4:	f7f9 fb1c 	bl	80012e0 <KalmanFilter_initialise>
//	PIDController_initialise(&position_pid_controller[3], 40, 0, 0);
//	PIDController_initialise(&position_pid_controller[4], 40, 0, 0);
	/*
	 * Cascade Control
	 */
	PIDController_initialise(&position_pid_controller[0], 55, 0, 0); //120
 8007ca8:	ed9f 2b43 	vldr	d2, [pc, #268]	; 8007db8 <main+0x308>
 8007cac:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8007db8 <main+0x308>
 8007cb0:	ed9f 0b43 	vldr	d0, [pc, #268]	; 8007dc0 <main+0x310>
 8007cb4:	4868      	ldr	r0, [pc, #416]	; (8007e58 <main+0x3a8>)
 8007cb6:	f7fe fe93 	bl	80069e0 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[1], 15, 0, 0); //45
 8007cba:	ed9f 2b3f 	vldr	d2, [pc, #252]	; 8007db8 <main+0x308>
 8007cbe:	ed9f 1b3e 	vldr	d1, [pc, #248]	; 8007db8 <main+0x308>
 8007cc2:	eeb2 0b0e 	vmov.f64	d0, #46	; 0x41700000  15.0
 8007cc6:	4865      	ldr	r0, [pc, #404]	; (8007e5c <main+0x3ac>)
 8007cc8:	f7fe fe8a 	bl	80069e0 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[2], 15, 0, 0); // 40
 8007ccc:	ed9f 2b3a 	vldr	d2, [pc, #232]	; 8007db8 <main+0x308>
 8007cd0:	ed9f 1b39 	vldr	d1, [pc, #228]	; 8007db8 <main+0x308>
 8007cd4:	eeb2 0b0e 	vmov.f64	d0, #46	; 0x41700000  15.0
 8007cd8:	4861      	ldr	r0, [pc, #388]	; (8007e60 <main+0x3b0>)
 8007cda:	f7fe fe81 	bl	80069e0 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[3], 12.5, 0, 0); //25
 8007cde:	ed9f 2b36 	vldr	d2, [pc, #216]	; 8007db8 <main+0x308>
 8007ce2:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8007db8 <main+0x308>
 8007ce6:	eeb2 0b09 	vmov.f64	d0, #41	; 0x41480000  12.5
 8007cea:	485e      	ldr	r0, [pc, #376]	; (8007e64 <main+0x3b4>)
 8007cec:	f7fe fe78 	bl	80069e0 <PIDController_initialise>
	PIDController_initialise(&position_pid_controller[4], 12.5, 0, 0); //25
 8007cf0:	ed9f 2b31 	vldr	d2, [pc, #196]	; 8007db8 <main+0x308>
 8007cf4:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8007db8 <main+0x308>
 8007cf8:	eeb2 0b09 	vmov.f64	d0, #41	; 0x41480000  12.5
 8007cfc:	485a      	ldr	r0, [pc, #360]	; (8007e68 <main+0x3b8>)
 8007cfe:	f7fe fe6f 	bl	80069e0 <PIDController_initialise>
	 * Velocity Pid Initialise
	 */
	/*
	 * Cascade Control
	 */
	PIDController_initialise(&velocity_pid_controller[0], 60, 0, 0); //100 0.05 . 80
 8007d02:	ed9f 2b2d 	vldr	d2, [pc, #180]	; 8007db8 <main+0x308>
 8007d06:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8007db8 <main+0x308>
 8007d0a:	ed9f 0b2f 	vldr	d0, [pc, #188]	; 8007dc8 <main+0x318>
 8007d0e:	4857      	ldr	r0, [pc, #348]	; (8007e6c <main+0x3bc>)
 8007d10:	f7fe fe66 	bl	80069e0 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[1], 40, 0, 0); //60 0.05
 8007d14:	ed9f 2b28 	vldr	d2, [pc, #160]	; 8007db8 <main+0x308>
 8007d18:	ed9f 1b27 	vldr	d1, [pc, #156]	; 8007db8 <main+0x308>
 8007d1c:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 8007dd0 <main+0x320>
 8007d20:	4853      	ldr	r0, [pc, #332]	; (8007e70 <main+0x3c0>)
 8007d22:	f7fe fe5d 	bl	80069e0 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[2], 10, 0, 0); //10
 8007d26:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8007db8 <main+0x308>
 8007d2a:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007db8 <main+0x308>
 8007d2e:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8007d32:	4850      	ldr	r0, [pc, #320]	; (8007e74 <main+0x3c4>)
 8007d34:	f7fe fe54 	bl	80069e0 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[3], 7.5, 0, 0); //1
 8007d38:	ed9f 2b1f 	vldr	d2, [pc, #124]	; 8007db8 <main+0x308>
 8007d3c:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8007db8 <main+0x308>
 8007d40:	eeb1 0b0e 	vmov.f64	d0, #30	; 0x40f00000  7.5
 8007d44:	484c      	ldr	r0, [pc, #304]	; (8007e78 <main+0x3c8>)
 8007d46:	f7fe fe4b 	bl	80069e0 <PIDController_initialise>
	PIDController_initialise(&velocity_pid_controller[4], 7.5, 0, 0); //1
 8007d4a:	ed9f 2b1b 	vldr	d2, [pc, #108]	; 8007db8 <main+0x308>
 8007d4e:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8007db8 <main+0x308>
 8007d52:	eeb1 0b0e 	vmov.f64	d0, #30	; 0x40f00000  7.5
 8007d56:	4849      	ldr	r0, [pc, #292]	; (8007e7c <main+0x3cc>)
 8007d58:	f7fe fe42 	bl	80069e0 <PIDController_initialise>
	 *  40
	 *  10
	 *  7.5
	 *  7.5
	 */
	PIDController_set_limit(&velocity_pid_controller[0], 1000, 4000);
 8007d5c:	ed9f 1b1e 	vldr	d1, [pc, #120]	; 8007dd8 <main+0x328>
 8007d60:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8007de0 <main+0x330>
 8007d64:	4841      	ldr	r0, [pc, #260]	; (8007e6c <main+0x3bc>)
 8007d66:	f7fe fe61 	bl	8006a2c <PIDController_set_limit>
	PIDController_set_limit(&velocity_pid_controller[1], 1000, 3000);
 8007d6a:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8007de8 <main+0x338>
 8007d6e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8007de0 <main+0x330>
 8007d72:	483f      	ldr	r0, [pc, #252]	; (8007e70 <main+0x3c0>)
 8007d74:	f7fe fe5a 	bl	8006a2c <PIDController_set_limit>
	PIDController_set_limit(&velocity_pid_controller[2], 1000, 1000);
 8007d78:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8007de0 <main+0x330>
 8007d7c:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8007de0 <main+0x330>
 8007d80:	483c      	ldr	r0, [pc, #240]	; (8007e74 <main+0x3c4>)
 8007d82:	f7fe fe53 	bl	8006a2c <PIDController_set_limit>
	PIDController_set_limit(&velocity_pid_controller[3], 1000, 4000);
 8007d86:	ed9f 1b14 	vldr	d1, [pc, #80]	; 8007dd8 <main+0x328>
 8007d8a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8007de0 <main+0x330>
 8007d8e:	483a      	ldr	r0, [pc, #232]	; (8007e78 <main+0x3c8>)
 8007d90:	f7fe fe4c 	bl	8006a2c <PIDController_set_limit>
	PIDController_set_limit(&velocity_pid_controller[4], 1000, 4000);
 8007d94:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8007dd8 <main+0x328>
 8007d98:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8007de0 <main+0x330>
 8007d9c:	4837      	ldr	r0, [pc, #220]	; (8007e7c <main+0x3cc>)
 8007d9e:	f7fe fe45 	bl	8006a2c <PIDController_set_limit>
	/*
	 * Quintic Trajectory Following Initialise
	 */
	for (int i = 0; i < 5; i++) {
 8007da2:	2300      	movs	r3, #0
 8007da4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007da8:	e07c      	b.n	8007ea4 <main+0x3f4>
 8007daa:	bf00      	nop
 8007dac:	f3af 8000 	nop.w
 8007db0:	47ae147b 	.word	0x47ae147b
 8007db4:	3f847ae1 	.word	0x3f847ae1
	...
 8007dc4:	404b8000 	.word	0x404b8000
 8007dc8:	00000000 	.word	0x00000000
 8007dcc:	404e0000 	.word	0x404e0000
 8007dd0:	00000000 	.word	0x00000000
 8007dd4:	40440000 	.word	0x40440000
 8007dd8:	00000000 	.word	0x00000000
 8007ddc:	40af4000 	.word	0x40af4000
 8007de0:	00000000 	.word	0x00000000
 8007de4:	408f4000 	.word	0x408f4000
 8007de8:	00000000 	.word	0x00000000
 8007dec:	40a77000 	.word	0x40a77000
 8007df0:	58021000 	.word	0x58021000
 8007df4:	24000edc 	.word	0x24000edc
 8007df8:	240007b0 	.word	0x240007b0
 8007dfc:	58020c00 	.word	0x58020c00
 8007e00:	24001338 	.word	0x24001338
 8007e04:	240007bc 	.word	0x240007bc
 8007e08:	240007d0 	.word	0x240007d0
 8007e0c:	240007e4 	.word	0x240007e4
 8007e10:	2400080c 	.word	0x2400080c
 8007e14:	240007f8 	.word	0x240007f8
 8007e18:	24000fc0 	.word	0x24000fc0
 8007e1c:	24000710 	.word	0x24000710
 8007e20:	2400100c 	.word	0x2400100c
 8007e24:	24000730 	.word	0x24000730
 8007e28:	58020800 	.word	0x58020800
 8007e2c:	24000f28 	.word	0x24000f28
 8007e30:	24000750 	.word	0x24000750
 8007e34:	24000e44 	.word	0x24000e44
 8007e38:	24000790 	.word	0x24000790
 8007e3c:	24000e90 	.word	0x24000e90
 8007e40:	24000770 	.word	0x24000770
 8007e44:	24000a28 	.word	0x24000a28
 8007e48:	24000a68 	.word	0x24000a68
 8007e4c:	24000aa8 	.word	0x24000aa8
 8007e50:	24000ae8 	.word	0x24000ae8
 8007e54:	24000b28 	.word	0x24000b28
 8007e58:	24000b68 	.word	0x24000b68
 8007e5c:	24000bd0 	.word	0x24000bd0
 8007e60:	24000c38 	.word	0x24000c38
 8007e64:	24000ca0 	.word	0x24000ca0
 8007e68:	24000d08 	.word	0x24000d08
 8007e6c:	24000820 	.word	0x24000820
 8007e70:	24000888 	.word	0x24000888
 8007e74:	240008f0 	.word	0x240008f0
 8007e78:	24000958 	.word	0x24000958
 8007e7c:	240009c0 	.word	0x240009c0
		QuinticTrajectory_initialise(&quintic_trajectory[i], 0.01);
 8007e80:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8007e84:	4613      	mov	r3, r2
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	4413      	add	r3, r2
 8007e8a:	015b      	lsls	r3, r3, #5
 8007e8c:	4adc      	ldr	r2, [pc, #880]	; (8008200 <main+0x750>)
 8007e8e:	4413      	add	r3, r2
 8007e90:	ed9f 0bd9 	vldr	d0, [pc, #868]	; 80081f8 <main+0x748>
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7fe feee 	bl	8006c76 <QuinticTrajectory_initialise>
	for (int i = 0; i < 5; i++) {
 8007e9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007ea4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8007ea8:	2b04      	cmp	r3, #4
 8007eaa:	dde9      	ble.n	8007e80 <main+0x3d0>
	}
	int8_t j_num = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
	uint32_t timestamp1 = 0;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	uint32_t timestamp2 = 0;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	uint32_t timestamp3 = 0;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	HAL_StatusTypeDef rep = HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	int32_t encoder_unwrap_value[5] = { 0 };
 8007eca:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8007ece:	2200      	movs	r2, #0
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	605a      	str	r2, [r3, #4]
 8007ed4:	609a      	str	r2, [r3, #8]
 8007ed6:	60da      	str	r2, [r3, #12]
 8007ed8:	611a      	str	r2, [r3, #16]
	double q0[5] = {-2, 8, -10, 4, 4};
 8007eda:	4bca      	ldr	r3, [pc, #808]	; (8008204 <main+0x754>)
 8007edc:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8007ee0:	461d      	mov	r5, r3
 8007ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ee6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ee8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007eea:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007eee:	e884 0003 	stmia.w	r4, {r0, r1}
	double q1[5] = {2, -16, 8, -2.5, -2.5};
 8007ef2:	4bc5      	ldr	r3, [pc, #788]	; (8008208 <main+0x758>)
 8007ef4:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8007ef8:	461d      	mov	r5, r3
 8007efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007efc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007efe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f02:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007f06:	e884 0003 	stmia.w	r4, {r0, r1}
	double v0[5] = {0};
 8007f0a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007f0e:	2228      	movs	r2, #40	; 0x28
 8007f10:	2100      	movs	r1, #0
 8007f12:	4618      	mov	r0, r3
 8007f14:	f00c f96e 	bl	80141f4 <memset>
	double v1[5] = {0};
 8007f18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8007f1c:	2228      	movs	r2, #40	; 0x28
 8007f1e:	2100      	movs	r1, #0
 8007f20:	4618      	mov	r0, r3
 8007f22:	f00c f967 	bl	80141f4 <memset>
	double ac0[5] = {0};
 8007f26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	2328      	movs	r3, #40	; 0x28
 8007f2e:	461a      	mov	r2, r3
 8007f30:	2100      	movs	r1, #0
 8007f32:	f00c f95f 	bl	80141f4 <memset>
	double ac1[5] = {0};
 8007f36:	f107 0308 	add.w	r3, r7, #8
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	2328      	movs	r3, #40	; 0x28
 8007f3e:	461a      	mov	r2, r3
 8007f40:	2100      	movs	r1, #0
 8007f42:	f00c f957 	bl	80141f4 <memset>
	double tf = 10;
 8007f46:	f04f 0200 	mov.w	r2, #0
 8007f4a:	4bb0      	ldr	r3, [pc, #704]	; (800820c <main+0x75c>)
 8007f4c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	int8_t traj_buf = 0;
 8007f50:	2300      	movs	r3, #0
 8007f52:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
//			for (int i = 0; i < 5; i++) {
//				delta_khe[i] = 0;
//				desired_position[i] += delta_q[i];
//			}
//		}
		if (HAL_GetTick() - timestamp1 >= 100) {
 8007f56:	f002 f949 	bl	800a1ec <HAL_GetTick>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	2b63      	cmp	r3, #99	; 0x63
 8007f64:	d919      	bls.n	8007f9a <main+0x4ea>
			/*
			 * UART
			 */
			timestamp1 = HAL_GetTick();
 8007f66:	f002 f941 	bl	800a1ec <HAL_GetTick>
 8007f6a:	f8c7 0144 	str.w	r0, [r7, #324]	; 0x144
			ARMsProtocol_FUNC_Interface();
 8007f6e:	f7f8 fcc7 	bl	8000900 <ARMsProtocol_FUNC_Interface>
			if (servo_flag){
 8007f72:	4ba7      	ldr	r3, [pc, #668]	; (8008210 <main+0x760>)
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00f      	beq.n	8007f9a <main+0x4ea>
				/*
				 * Set Servo Degree
				 */
				servo_set_degree(&servo_motor, servo_degree);
 8007f7a:	4ba6      	ldr	r3, [pc, #664]	; (8008214 <main+0x764>)
 8007f7c:	ed93 7b00 	vldr	d7, [r3]
 8007f80:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8007f84:	edc7 7a01 	vstr	s15, [r7, #4]
 8007f88:	793b      	ldrb	r3, [r7, #4]
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	48a2      	ldr	r0, [pc, #648]	; (8008218 <main+0x768>)
 8007f90:	f7fe fc56 	bl	8006840 <servo_set_degree>
				servo_flag = 0;
 8007f94:	4b9e      	ldr	r3, [pc, #632]	; (8008210 <main+0x760>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	701a      	strb	r2, [r3, #0]
			}
		}
		if (HAL_GetTick() - timestamp2 >= 2) {
 8007f9a:	f002 f927 	bl	800a1ec <HAL_GetTick>
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	f240 80b1 	bls.w	800810e <main+0x65e>
			/*
			 * Read Encoders
			 */
			timestamp2 = HAL_GetTick();
 8007fac:	f002 f91e 	bl	800a1ec <HAL_GetTick>
 8007fb0:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
			rep = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
			encoder_unwrap_value[j_num] = 0;
 8007fba:	f997 314b 	ldrsb.w	r3, [r7, #331]	; 0x14b
 8007fbe:	009b      	lsls	r3, r3, #2
 8007fc0:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8007fc4:	4413      	add	r3, r2
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f843 2c54 	str.w	r2, [r3, #-84]
			while (1) {
				AMT21_read_value(&(encoders[j_num]));
 8007fcc:	f997 214b 	ldrsb.w	r2, [r7, #331]	; 0x14b
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	4413      	add	r3, r2
 8007fd6:	009b      	lsls	r3, r3, #2
 8007fd8:	4a90      	ldr	r2, [pc, #576]	; (800821c <main+0x76c>)
 8007fda:	4413      	add	r3, r2
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7f8 fb94 	bl	800070a <AMT21_read_value>
				rep = AMT21_check_value(&(encoders[j_num]));
 8007fe2:	f997 214b 	ldrsb.w	r2, [r7, #331]	; 0x14b
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4413      	add	r3, r2
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4a8b      	ldr	r2, [pc, #556]	; (800821c <main+0x76c>)
 8007ff0:	4413      	add	r3, r2
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7f8 fbc8 	bl	8000788 <AMT21_check_value>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				if (rep == HAL_OK) {
 8007ffe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1e2      	bne.n	8007fcc <main+0x51c>
					encoder_unwrap_value[j_num] = AMT21_unwrap(
							(int32_t) encoders[j_num].position,
 8008006:	f997 214b 	ldrsb.w	r2, [r7, #331]	; 0x14b
 800800a:	4984      	ldr	r1, [pc, #528]	; (800821c <main+0x76c>)
 800800c:	4613      	mov	r3, r2
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	4413      	add	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	440b      	add	r3, r1
 8008016:	330e      	adds	r3, #14
 8008018:	881b      	ldrh	r3, [r3, #0]
					encoder_unwrap_value[j_num] = AMT21_unwrap(
 800801a:	4618      	mov	r0, r3
							(int32_t) encoders[j_num].prev_position);
 800801c:	f997 214b 	ldrsb.w	r2, [r7, #331]	; 0x14b
 8008020:	497e      	ldr	r1, [pc, #504]	; (800821c <main+0x76c>)
 8008022:	4613      	mov	r3, r2
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	440b      	add	r3, r1
 800802c:	3310      	adds	r3, #16
 800802e:	881b      	ldrh	r3, [r3, #0]
					encoder_unwrap_value[j_num] = AMT21_unwrap(
 8008030:	f997 414b 	ldrsb.w	r4, [r7, #331]	; 0x14b
 8008034:	4619      	mov	r1, r3
 8008036:	f7f8 fc09 	bl	800084c <AMT21_unwrap>
 800803a:	4602      	mov	r2, r0
 800803c:	00a3      	lsls	r3, r4, #2
 800803e:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8008042:	440b      	add	r3, r1
 8008044:	f843 2c54 	str.w	r2, [r3, #-84]
					encoders[j_num].prev_position = encoders[j_num].position;
 8008048:	f997 114b 	ldrsb.w	r1, [r7, #331]	; 0x14b
 800804c:	f997 214b 	ldrsb.w	r2, [r7, #331]	; 0x14b
 8008050:	4872      	ldr	r0, [pc, #456]	; (800821c <main+0x76c>)
 8008052:	460b      	mov	r3, r1
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	440b      	add	r3, r1
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4403      	add	r3, r0
 800805c:	330e      	adds	r3, #14
 800805e:	8818      	ldrh	r0, [r3, #0]
 8008060:	496e      	ldr	r1, [pc, #440]	; (800821c <main+0x76c>)
 8008062:	4613      	mov	r3, r2
 8008064:	009b      	lsls	r3, r3, #2
 8008066:	4413      	add	r3, r2
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	440b      	add	r3, r1
 800806c:	3310      	adds	r3, #16
 800806e:	4602      	mov	r2, r0
 8008070:	801a      	strh	r2, [r3, #0]
					break;
 8008072:	bf00      	nop
				}
			}
			if ((j_num == 0) | (j_num == 2) | (j_num == 3)) {
 8008074:	f997 314b 	ldrsb.w	r3, [r7, #331]	; 0x14b
 8008078:	2b00      	cmp	r3, #0
 800807a:	bf0c      	ite	eq
 800807c:	2301      	moveq	r3, #1
 800807e:	2300      	movne	r3, #0
 8008080:	b2da      	uxtb	r2, r3
 8008082:	f997 314b 	ldrsb.w	r3, [r7, #331]	; 0x14b
 8008086:	2b02      	cmp	r3, #2
 8008088:	bf0c      	ite	eq
 800808a:	2301      	moveq	r3, #1
 800808c:	2300      	movne	r3, #0
 800808e:	b2db      	uxtb	r3, r3
 8008090:	4313      	orrs	r3, r2
 8008092:	b2db      	uxtb	r3, r3
 8008094:	461a      	mov	r2, r3
 8008096:	f997 314b 	ldrsb.w	r3, [r7, #331]	; 0x14b
 800809a:	2b03      	cmp	r3, #3
 800809c:	bf0c      	ite	eq
 800809e:	2301      	moveq	r3, #1
 80080a0:	2300      	movne	r3, #0
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	4313      	orrs	r3, r2
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d010      	beq.n	80080cc <main+0x61c>
				encoder_unwrap_value[j_num] = encoder_unwrap_value[j_num] * -1;
 80080aa:	f997 314b 	ldrsb.w	r3, [r7, #331]	; 0x14b
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80080b4:	4413      	add	r3, r2
 80080b6:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80080ba:	f997 314b 	ldrsb.w	r3, [r7, #331]	; 0x14b
 80080be:	4252      	negs	r2, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 80080c6:	440b      	add	r3, r1
 80080c8:	f843 2c54 	str.w	r2, [r3, #-84]
			}
			encoder_config[j_num] = encoder_config[j_num]
 80080cc:	f997 314b 	ldrsb.w	r3, [r7, #331]	; 0x14b
 80080d0:	4a53      	ldr	r2, [pc, #332]	; (8008220 <main+0x770>)
 80080d2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
					+ encoder_unwrap_value[j_num];
 80080d6:	f997 314b 	ldrsb.w	r3, [r7, #331]	; 0x14b
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80080e0:	4413      	add	r3, r2
 80080e2:	f853 2c54 	ldr.w	r2, [r3, #-84]
			encoder_config[j_num] = encoder_config[j_num]
 80080e6:	f997 314b 	ldrsb.w	r3, [r7, #331]	; 0x14b
					+ encoder_unwrap_value[j_num];
 80080ea:	440a      	add	r2, r1
			encoder_config[j_num] = encoder_config[j_num]
 80080ec:	494c      	ldr	r1, [pc, #304]	; (8008220 <main+0x770>)
 80080ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			j_num++;
 80080f2:	f997 314b 	ldrsb.w	r3, [r7, #331]	; 0x14b
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	3301      	adds	r3, #1
 80080fa:	b2db      	uxtb	r3, r3
 80080fc:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
			if (j_num == 5) {
 8008100:	f997 314b 	ldrsb.w	r3, [r7, #331]	; 0x14b
 8008104:	2b05      	cmp	r3, #5
 8008106:	d102      	bne.n	800810e <main+0x65e>
				j_num = 0;
 8008108:	2300      	movs	r3, #0
 800810a:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
			}
		}
		if (HAL_GetTick() - timestamp3 >= 10) {
 800810e:	f002 f86d 	bl	800a1ec <HAL_GetTick>
 8008112:	4602      	mov	r2, r0
 8008114:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	2b09      	cmp	r3, #9
 800811c:	f67f af1b 	bls.w	8007f56 <main+0x4a6>
			/*
			 * Control Loop
			 */
			timestamp3 = HAL_GetTick();
 8008120:	f002 f864 	bl	800a1ec <HAL_GetTick>
 8008124:	f8c7 013c 	str.w	r0, [r7, #316]	; 0x13c
			if (quintic_trajectory[0].is_end) {
 8008128:	4b35      	ldr	r3, [pc, #212]	; (8008200 <main+0x750>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	f000 80c8 	beq.w	80082c2 <main+0x812>
				if (traj_buf == 0) {
 8008132:	f997 313b 	ldrsb.w	r3, [r7, #315]	; 0x13b
 8008136:	2b00      	cmp	r3, #0
 8008138:	d153      	bne.n	80081e2 <main+0x732>
//							0, 0, 0.201481481481481, -0.040296296296296, 0.002149135802469, 7.5);
//					QuinticTrajectory_set_param(&(quintic_trajectory[3]), -2.75, 0,
//							0, 0.130370370370370, -0.026074074074074, 0.001390617283951, 7.5);
//					QuinticTrajectory_set_param(&(quintic_trajectory[4]), -2.75, 0,
//							0, 0.130370370370370, -0.026074074074074, 0.001390617283951, 7.5);
					for (int i =0; i <5 ;i ++){
 800813a:	2300      	movs	r3, #0
 800813c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8008140:	e047      	b.n	80081d2 <main+0x722>
						QuinticTrajectory_cal_and_set_coeff(&(quintic_trajectory[i]), q0[i], q1[i], v0[i], v1[i], ac0[i], ac1[i], tf);
 8008142:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8008146:	4613      	mov	r3, r2
 8008148:	005b      	lsls	r3, r3, #1
 800814a:	4413      	add	r3, r2
 800814c:	015b      	lsls	r3, r3, #5
 800814e:	4a2c      	ldr	r2, [pc, #176]	; (8008200 <main+0x750>)
 8008150:	1899      	adds	r1, r3, r2
 8008152:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008156:	00db      	lsls	r3, r3, #3
 8008158:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800815c:	4413      	add	r3, r2
 800815e:	3b80      	subs	r3, #128	; 0x80
 8008160:	ed93 7b00 	vldr	d7, [r3]
 8008164:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008168:	00db      	lsls	r3, r3, #3
 800816a:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800816e:	4413      	add	r3, r2
 8008170:	3ba8      	subs	r3, #168	; 0xa8
 8008172:	ed93 1b00 	vldr	d1, [r3]
 8008176:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800817a:	00db      	lsls	r3, r3, #3
 800817c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8008180:	4413      	add	r3, r2
 8008182:	3bd0      	subs	r3, #208	; 0xd0
 8008184:	ed93 2b00 	vldr	d2, [r3]
 8008188:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800818c:	00db      	lsls	r3, r3, #3
 800818e:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8008192:	4413      	add	r3, r2
 8008194:	3bf8      	subs	r3, #248	; 0xf8
 8008196:	ed93 3b00 	vldr	d3, [r3]
 800819a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800819e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80081a2:	00db      	lsls	r3, r3, #3
 80081a4:	4413      	add	r3, r2
 80081a6:	ed93 4b00 	vldr	d4, [r3]
 80081aa:	f107 0208 	add.w	r2, r7, #8
 80081ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80081b2:	00db      	lsls	r3, r3, #3
 80081b4:	4413      	add	r3, r2
 80081b6:	ed93 5b00 	vldr	d5, [r3]
 80081ba:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 80081be:	eeb0 0b47 	vmov.f64	d0, d7
 80081c2:	4608      	mov	r0, r1
 80081c4:	f7fe fdb2 	bl	8006d2c <QuinticTrajectory_cal_and_set_coeff>
					for (int i =0; i <5 ;i ++){
 80081c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80081cc:	3301      	adds	r3, #1
 80081ce:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80081d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80081d6:	2b04      	cmp	r3, #4
 80081d8:	ddb3      	ble.n	8008142 <main+0x692>
					}
					traj_buf = 1;
 80081da:	2301      	movs	r3, #1
 80081dc:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
 80081e0:	e06f      	b.n	80082c2 <main+0x812>
				} else if (traj_buf == 1) {
 80081e2:	f997 313b 	ldrsb.w	r3, [r7, #315]	; 0x13b
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d16b      	bne.n	80082c2 <main+0x812>
//							0, -0.201481481481481, 0.040296296296296, -0.002149135802469, 7.5);
//					QuinticTrajectory_set_param(&(quintic_trajectory[3]), 2.75, 0,
//							0, -0.130370370370370, 0.026074074074074, -0.001390617283951, 7.5);
//					QuinticTrajectory_set_param(&(quintic_trajectory[4]), 2.75, 0,
//							0, -0.130370370370370, 0.026074074074074, -0.001390617283951, 7.5);
					for (int i =0; i <5 ;i ++){
 80081ea:	2300      	movs	r3, #0
 80081ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80081f0:	e060      	b.n	80082b4 <main+0x804>
 80081f2:	bf00      	nop
 80081f4:	f3af 8000 	nop.w
 80081f8:	47ae147b 	.word	0x47ae147b
 80081fc:	3f847ae1 	.word	0x3f847ae1
 8008200:	24000530 	.word	0x24000530
 8008204:	08018058 	.word	0x08018058
 8008208:	08018080 	.word	0x08018080
 800820c:	40240000 	.word	0x40240000
 8008210:	24000280 	.word	0x24000280
 8008214:	24000288 	.word	0x24000288
 8008218:	240007b0 	.word	0x240007b0
 800821c:	240007bc 	.word	0x240007bc
 8008220:	24000290 	.word	0x24000290
						QuinticTrajectory_cal_and_set_coeff(&(quintic_trajectory[i]), q1[i], q0[i], v0[i], v1[i], ac0[i], ac1[i], tf);
 8008224:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8008228:	4613      	mov	r3, r2
 800822a:	005b      	lsls	r3, r3, #1
 800822c:	4413      	add	r3, r2
 800822e:	015b      	lsls	r3, r3, #5
 8008230:	4ac5      	ldr	r2, [pc, #788]	; (8008548 <main+0xa98>)
 8008232:	1899      	adds	r1, r3, r2
 8008234:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008238:	00db      	lsls	r3, r3, #3
 800823a:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800823e:	4413      	add	r3, r2
 8008240:	3ba8      	subs	r3, #168	; 0xa8
 8008242:	ed93 7b00 	vldr	d7, [r3]
 8008246:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800824a:	00db      	lsls	r3, r3, #3
 800824c:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8008250:	4413      	add	r3, r2
 8008252:	3b80      	subs	r3, #128	; 0x80
 8008254:	ed93 1b00 	vldr	d1, [r3]
 8008258:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800825c:	00db      	lsls	r3, r3, #3
 800825e:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8008262:	4413      	add	r3, r2
 8008264:	3bd0      	subs	r3, #208	; 0xd0
 8008266:	ed93 2b00 	vldr	d2, [r3]
 800826a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800826e:	00db      	lsls	r3, r3, #3
 8008270:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8008274:	4413      	add	r3, r2
 8008276:	3bf8      	subs	r3, #248	; 0xf8
 8008278:	ed93 3b00 	vldr	d3, [r3]
 800827c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8008280:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008284:	00db      	lsls	r3, r3, #3
 8008286:	4413      	add	r3, r2
 8008288:	ed93 4b00 	vldr	d4, [r3]
 800828c:	f107 0208 	add.w	r2, r7, #8
 8008290:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008294:	00db      	lsls	r3, r3, #3
 8008296:	4413      	add	r3, r2
 8008298:	ed93 5b00 	vldr	d5, [r3]
 800829c:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 80082a0:	eeb0 0b47 	vmov.f64	d0, d7
 80082a4:	4608      	mov	r0, r1
 80082a6:	f7fe fd41 	bl	8006d2c <QuinticTrajectory_cal_and_set_coeff>
					for (int i =0; i <5 ;i ++){
 80082aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80082ae:	3301      	adds	r3, #1
 80082b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80082b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	ddb3      	ble.n	8008224 <main+0x774>
					}
					traj_buf = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
				}
			}
			motor_config[0] = ((2 * M_PI * encoder_config[0]) / 16384.0)
 80082c2:	4ba2      	ldr	r3, [pc, #648]	; (800854c <main+0xa9c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	ee07 3a90 	vmov	s15, r3
 80082ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80082ce:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8008528 <main+0xa78>
 80082d2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80082d6:	ed9f 5b96 	vldr	d5, [pc, #600]	; 8008530 <main+0xa80>
 80082da:	ee86 7b05 	vdiv.f64	d7, d6, d5
					* (25.0 / 9.0);
 80082de:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8008538 <main+0xa88>
 80082e2:	ee27 7b06 	vmul.f64	d7, d7, d6
			motor_config[0] = ((2 * M_PI * encoder_config[0]) / 16384.0)
 80082e6:	4b9a      	ldr	r3, [pc, #616]	; (8008550 <main+0xaa0>)
 80082e8:	ed83 7b00 	vstr	d7, [r3]
			motor_config[1] = ((2 * M_PI * encoder_config[1]) / 16384.0) * 27.0;
 80082ec:	4b97      	ldr	r3, [pc, #604]	; (800854c <main+0xa9c>)
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	ee07 3a90 	vmov	s15, r3
 80082f4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80082f8:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8008528 <main+0xa78>
 80082fc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008300:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 8008530 <main+0xa80>
 8008304:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008308:	eeb3 6b0b 	vmov.f64	d6, #59	; 0x41d80000  27.0
 800830c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008310:	4b8f      	ldr	r3, [pc, #572]	; (8008550 <main+0xaa0>)
 8008312:	ed83 7b02 	vstr	d7, [r3, #8]
			motor_config[2] = 22.5
					* sin((2 * M_PI * encoder_config[2]) / 16384.0);
 8008316:	4b8d      	ldr	r3, [pc, #564]	; (800854c <main+0xa9c>)
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	ee07 3a90 	vmov	s15, r3
 800831e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008322:	ed9f 6b81 	vldr	d6, [pc, #516]	; 8008528 <main+0xa78>
 8008326:	ee27 7b06 	vmul.f64	d7, d7, d6
 800832a:	ed9f 5b81 	vldr	d5, [pc, #516]	; 8008530 <main+0xa80>
 800832e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8008332:	eeb0 0b46 	vmov.f64	d0, d6
 8008336:	f00e fee7 	bl	8017108 <sin>
 800833a:	eeb0 7b40 	vmov.f64	d7, d0
 800833e:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8008540 <main+0xa90>
 8008342:	ee27 7b06 	vmul.f64	d7, d7, d6
			motor_config[2] = 22.5
 8008346:	4b82      	ldr	r3, [pc, #520]	; (8008550 <main+0xaa0>)
 8008348:	ed83 7b04 	vstr	d7, [r3, #16]
			motor_config[3] = (2 * M_PI * encoder_config[3]) / 16384.0; //checked
 800834c:	4b7f      	ldr	r3, [pc, #508]	; (800854c <main+0xa9c>)
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	ee07 3a90 	vmov	s15, r3
 8008354:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008358:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8008528 <main+0xa78>
 800835c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008360:	ed9f 5b73 	vldr	d5, [pc, #460]	; 8008530 <main+0xa80>
 8008364:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008368:	4b79      	ldr	r3, [pc, #484]	; (8008550 <main+0xaa0>)
 800836a:	ed83 7b06 	vstr	d7, [r3, #24]
			motor_config[4] = (2 * M_PI * encoder_config[4]) / 16384.0; //checked
 800836e:	4b77      	ldr	r3, [pc, #476]	; (800854c <main+0xa9c>)
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	ee07 3a90 	vmov	s15, r3
 8008376:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800837a:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8008528 <main+0xa78>
 800837e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008382:	ed9f 5b6b 	vldr	d5, [pc, #428]	; 8008530 <main+0xa80>
 8008386:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800838a:	4b71      	ldr	r3, [pc, #452]	; (8008550 <main+0xaa0>)
 800838c:	ed83 7b08 	vstr	d7, [r3, #32]
			/*
			 * Trajectory Update
			 */
			for (int i = 0; i <5; i++){
 8008390:	2300      	movs	r3, #0
 8008392:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008396:	e015      	b.n	80083c4 <main+0x914>
//				QuinticTrajectory_update(&(quintic_trajectory[i]));
//				desired_position[i] = quintic_trajectory[i].pos_out;
//				desired_velocity[i] = quintic_trajectory[i].vel_out;
				KalmanFilter_Update(&(kalman_filter[i]), motor_config[i]);
 8008398:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800839c:	019b      	lsls	r3, r3, #6
 800839e:	4a6d      	ldr	r2, [pc, #436]	; (8008554 <main+0xaa4>)
 80083a0:	441a      	add	r2, r3
 80083a2:	496b      	ldr	r1, [pc, #428]	; (8008550 <main+0xaa0>)
 80083a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083a8:	00db      	lsls	r3, r3, #3
 80083aa:	440b      	add	r3, r1
 80083ac:	ed93 7b00 	vldr	d7, [r3]
 80083b0:	eeb0 0b47 	vmov.f64	d0, d7
 80083b4:	4610      	mov	r0, r2
 80083b6:	f7f8 ffd7 	bl	8001368 <KalmanFilter_Update>
			for (int i = 0; i <5; i++){
 80083ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083be:	3301      	adds	r3, #1
 80083c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80083c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80083c8:	2b04      	cmp	r3, #4
 80083ca:	dde5      	ble.n	8008398 <main+0x8e8>
			}
			/*
			 * Joint Limit
			 */
			for (int i = 0; i < 5; i++) {
 80083cc:	2300      	movs	r3, #0
 80083ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80083d2:	e046      	b.n	8008462 <main+0x9b2>
				if (desired_position[i] >= max_desired_position[i]) {
 80083d4:	4a60      	ldr	r2, [pc, #384]	; (8008558 <main+0xaa8>)
 80083d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083da:	00db      	lsls	r3, r3, #3
 80083dc:	4413      	add	r3, r2
 80083de:	ed93 6b00 	vldr	d6, [r3]
 80083e2:	4a5e      	ldr	r2, [pc, #376]	; (800855c <main+0xaac>)
 80083e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80083e8:	00db      	lsls	r3, r3, #3
 80083ea:	4413      	add	r3, r2
 80083ec:	ed93 7b00 	vldr	d7, [r3]
 80083f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80083f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083f8:	db0d      	blt.n	8008416 <main+0x966>
					desired_position[i] = max_desired_position[i];
 80083fa:	4a58      	ldr	r2, [pc, #352]	; (800855c <main+0xaac>)
 80083fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008400:	00db      	lsls	r3, r3, #3
 8008402:	4413      	add	r3, r2
 8008404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008408:	4853      	ldr	r0, [pc, #332]	; (8008558 <main+0xaa8>)
 800840a:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800840e:	00c9      	lsls	r1, r1, #3
 8008410:	4401      	add	r1, r0
 8008412:	e9c1 2300 	strd	r2, r3, [r1]
				}
				if (desired_position[i] <= min_desired_position[i]) {
 8008416:	4a50      	ldr	r2, [pc, #320]	; (8008558 <main+0xaa8>)
 8008418:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800841c:	00db      	lsls	r3, r3, #3
 800841e:	4413      	add	r3, r2
 8008420:	ed93 6b00 	vldr	d6, [r3]
 8008424:	4a4e      	ldr	r2, [pc, #312]	; (8008560 <main+0xab0>)
 8008426:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800842a:	00db      	lsls	r3, r3, #3
 800842c:	4413      	add	r3, r2
 800842e:	ed93 7b00 	vldr	d7, [r3]
 8008432:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800843a:	d80d      	bhi.n	8008458 <main+0x9a8>
					desired_position[i] = min_desired_position[i];
 800843c:	4a48      	ldr	r2, [pc, #288]	; (8008560 <main+0xab0>)
 800843e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008442:	00db      	lsls	r3, r3, #3
 8008444:	4413      	add	r3, r2
 8008446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844a:	4843      	ldr	r0, [pc, #268]	; (8008558 <main+0xaa8>)
 800844c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8008450:	00c9      	lsls	r1, r1, #3
 8008452:	4401      	add	r1, r0
 8008454:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i = 0; i < 5; i++) {
 8008458:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800845c:	3301      	adds	r3, #1
 800845e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008462:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008466:	2b04      	cmp	r3, #4
 8008468:	ddb4      	ble.n	80083d4 <main+0x924>
				}
			}
			/*
			 * Cascade Controller
			 */
			for (int i = 0	; i < 5; i++) {
 800846a:	2300      	movs	r3, #0
 800846c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8008470:	e034      	b.n	80084dc <main+0xa2c>
				cascade_out[i] = Cascade_PIDController_update(&(position_pid_controller[i]),
 8008472:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008476:	2268      	movs	r2, #104	; 0x68
 8008478:	fb02 f303 	mul.w	r3, r2, r3
 800847c:	4a39      	ldr	r2, [pc, #228]	; (8008564 <main+0xab4>)
 800847e:	1898      	adds	r0, r3, r2
 8008480:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008484:	2268      	movs	r2, #104	; 0x68
 8008486:	fb02 f303 	mul.w	r3, r2, r3
 800848a:	4a37      	ldr	r2, [pc, #220]	; (8008568 <main+0xab8>)
 800848c:	1899      	adds	r1, r3, r2
 800848e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8008492:	019b      	lsls	r3, r3, #6
 8008494:	4a2f      	ldr	r2, [pc, #188]	; (8008554 <main+0xaa4>)
 8008496:	441a      	add	r2, r3
 8008498:	4c2f      	ldr	r4, [pc, #188]	; (8008558 <main+0xaa8>)
 800849a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800849e:	00db      	lsls	r3, r3, #3
 80084a0:	4423      	add	r3, r4
 80084a2:	ed93 7b00 	vldr	d7, [r3]
 80084a6:	4c31      	ldr	r4, [pc, #196]	; (800856c <main+0xabc>)
 80084a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80084ac:	00db      	lsls	r3, r3, #3
 80084ae:	4423      	add	r3, r4
 80084b0:	ed93 6b00 	vldr	d6, [r3]
 80084b4:	eeb0 1b46 	vmov.f64	d1, d6
 80084b8:	eeb0 0b47 	vmov.f64	d0, d7
 80084bc:	f7fe fba7 	bl	8006c0e <Cascade_PIDController_update>
 80084c0:	eeb0 7b40 	vmov.f64	d7, d0
 80084c4:	4a2a      	ldr	r2, [pc, #168]	; (8008570 <main+0xac0>)
 80084c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80084ca:	00db      	lsls	r3, r3, #3
 80084cc:	4413      	add	r3, r2
 80084ce:	ed83 7b00 	vstr	d7, [r3]
			for (int i = 0	; i < 5; i++) {
 80084d2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80084d6:	3301      	adds	r3, #1
 80084d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80084dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80084e0:	2b04      	cmp	r3, #4
 80084e2:	ddc6      	ble.n	8008472 <main+0x9c2>
						&(velocity_pid_controller[i]),
						&(kalman_filter[i]), desired_position[i],
						desired_velocity[i]);
			}
			for (int i = 0; i < 5; i++) {
 80084e4:	2300      	movs	r3, #0
 80084e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80084ea:	e015      	b.n	8008518 <main+0xa68>
				stepper_set_speed(&steppers[i], cascade_out[i]);
 80084ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80084f0:	015b      	lsls	r3, r3, #5
 80084f2:	4a20      	ldr	r2, [pc, #128]	; (8008574 <main+0xac4>)
 80084f4:	441a      	add	r2, r3
 80084f6:	491e      	ldr	r1, [pc, #120]	; (8008570 <main+0xac0>)
 80084f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80084fc:	00db      	lsls	r3, r3, #3
 80084fe:	440b      	add	r3, r1
 8008500:	ed93 7b00 	vldr	d7, [r3]
 8008504:	eeb0 0b47 	vmov.f64	d0, d7
 8008508:	4610      	mov	r0, r2
 800850a:	f7fe f9dd 	bl	80068c8 <stepper_set_speed>
			for (int i = 0; i < 5; i++) {
 800850e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008512:	3301      	adds	r3, #1
 8008514:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008518:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800851c:	2b04      	cmp	r3, #4
 800851e:	dde5      	ble.n	80084ec <main+0xa3c>
		if (HAL_GetTick() - timestamp1 >= 100) {
 8008520:	e519      	b.n	8007f56 <main+0x4a6>
 8008522:	bf00      	nop
 8008524:	f3af 8000 	nop.w
 8008528:	54442d18 	.word	0x54442d18
 800852c:	401921fb 	.word	0x401921fb
 8008530:	00000000 	.word	0x00000000
 8008534:	40d00000 	.word	0x40d00000
 8008538:	8e38e38e 	.word	0x8e38e38e
 800853c:	400638e3 	.word	0x400638e3
 8008540:	00000000 	.word	0x00000000
 8008544:	40368000 	.word	0x40368000
 8008548:	24000530 	.word	0x24000530
 800854c:	24000290 	.word	0x24000290
 8008550:	240002f8 	.word	0x240002f8
 8008554:	24000a28 	.word	0x24000a28
 8008558:	24000258 	.word	0x24000258
 800855c:	24000028 	.word	0x24000028
 8008560:	24000000 	.word	0x24000000
 8008564:	24000b68 	.word	0x24000b68
 8008568:	24000820 	.word	0x24000820
 800856c:	240002d0 	.word	0x240002d0
 8008570:	240002a8 	.word	0x240002a8
 8008574:	24000710 	.word	0x24000710

08008578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b09c      	sub	sp, #112	; 0x70
 800857c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800857e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008582:	224c      	movs	r2, #76	; 0x4c
 8008584:	2100      	movs	r1, #0
 8008586:	4618      	mov	r0, r3
 8008588:	f00b fe34 	bl	80141f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800858c:	1d3b      	adds	r3, r7, #4
 800858e:	2220      	movs	r2, #32
 8008590:	2100      	movs	r1, #0
 8008592:	4618      	mov	r0, r3
 8008594:	f00b fe2e 	bl	80141f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8008598:	2002      	movs	r0, #2
 800859a:	f004 fbd3 	bl	800cd44 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800859e:	2300      	movs	r3, #0
 80085a0:	603b      	str	r3, [r7, #0]
 80085a2:	4b30      	ldr	r3, [pc, #192]	; (8008664 <SystemClock_Config+0xec>)
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	4a2f      	ldr	r2, [pc, #188]	; (8008664 <SystemClock_Config+0xec>)
 80085a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80085ac:	6193      	str	r3, [r2, #24]
 80085ae:	4b2d      	ldr	r3, [pc, #180]	; (8008664 <SystemClock_Config+0xec>)
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80085b6:	603b      	str	r3, [r7, #0]
 80085b8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80085ba:	bf00      	nop
 80085bc:	4b29      	ldr	r3, [pc, #164]	; (8008664 <SystemClock_Config+0xec>)
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085c8:	d1f8      	bne.n	80085bc <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80085ca:	4b27      	ldr	r3, [pc, #156]	; (8008668 <SystemClock_Config+0xf0>)
 80085cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ce:	f023 0303 	bic.w	r3, r3, #3
 80085d2:	4a25      	ldr	r2, [pc, #148]	; (8008668 <SystemClock_Config+0xf0>)
 80085d4:	f043 0302 	orr.w	r3, r3, #2
 80085d8:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80085da:	2301      	movs	r3, #1
 80085dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80085de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80085e4:	2302      	movs	r3, #2
 80085e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80085e8:	2302      	movs	r3, #2
 80085ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80085ec:	2302      	movs	r3, #2
 80085ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80085f0:	232c      	movs	r3, #44	; 0x2c
 80085f2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80085f4:	2301      	movs	r3, #1
 80085f6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80085f8:	2303      	movs	r3, #3
 80085fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80085fc:	2302      	movs	r3, #2
 80085fe:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8008600:	230c      	movs	r3, #12
 8008602:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8008604:	2300      	movs	r3, #0
 8008606:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8008608:	2300      	movs	r3, #0
 800860a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800860c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008610:	4618      	mov	r0, r3
 8008612:	f004 fbd1 	bl	800cdb8 <HAL_RCC_OscConfig>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d001      	beq.n	8008620 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800861c:	f000 f853 	bl	80086c6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008620:	233f      	movs	r3, #63	; 0x3f
 8008622:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008624:	2303      	movs	r3, #3
 8008626:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8008628:	2300      	movs	r3, #0
 800862a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800862c:	2308      	movs	r3, #8
 800862e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8008630:	2340      	movs	r3, #64	; 0x40
 8008632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8008634:	2340      	movs	r3, #64	; 0x40
 8008636:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8008638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800863c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800863e:	2340      	movs	r3, #64	; 0x40
 8008640:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8008642:	1d3b      	adds	r3, r7, #4
 8008644:	2103      	movs	r1, #3
 8008646:	4618      	mov	r0, r3
 8008648:	f004 ff62 	bl	800d510 <HAL_RCC_ClockConfig>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8008652:	f000 f838 	bl	80086c6 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8008656:	f005 f911 	bl	800d87c <HAL_RCC_EnableCSS>
}
 800865a:	bf00      	nop
 800865c:	3770      	adds	r7, #112	; 0x70
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	58024800 	.word	0x58024800
 8008668:	58024400 	.word	0x58024400

0800866c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b0ae      	sub	sp, #184	; 0xb8
 8008670:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008672:	1d3b      	adds	r3, r7, #4
 8008674:	22b4      	movs	r2, #180	; 0xb4
 8008676:	2100      	movs	r1, #0
 8008678:	4618      	mov	r0, r3
 800867a:	f00b fdbb 	bl	80141f4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800867e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008682:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8008684:	2302      	movs	r3, #2
 8008686:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 15;
 8008688:	230f      	movs	r3, #15
 800868a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800868c:	2302      	movs	r3, #2
 800868e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8008690:	2302      	movs	r3, #2
 8008692:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8008694:	2302      	movs	r3, #2
 8008696:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8008698:	23c0      	movs	r3, #192	; 0xc0
 800869a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800869c:	2300      	movs	r3, #0
 800869e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 2950;
 80086a0:	f640 3386 	movw	r3, #2950	; 0xb86
 80086a4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80086a6:	2300      	movs	r3, #0
 80086a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80086ac:	1d3b      	adds	r3, r7, #4
 80086ae:	4618      	mov	r0, r3
 80086b0:	f005 fae6 	bl	800dc80 <HAL_RCCEx_PeriphCLKConfig>
 80086b4:	4603      	mov	r3, r0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d001      	beq.n	80086be <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 80086ba:	f000 f804 	bl	80086c6 <Error_Handler>
  }
}
 80086be:	bf00      	nop
 80086c0:	37b8      	adds	r7, #184	; 0xb8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80086c6:	b480      	push	{r7}
 80086c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80086ca:	b672      	cpsid	i
}
 80086cc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80086ce:	e7fe      	b.n	80086ce <Error_Handler+0x8>

080086d0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80086d4:	4b27      	ldr	r3, [pc, #156]	; (8008774 <MX_SPI3_Init+0xa4>)
 80086d6:	4a28      	ldr	r2, [pc, #160]	; (8008778 <MX_SPI3_Init+0xa8>)
 80086d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80086da:	4b26      	ldr	r3, [pc, #152]	; (8008774 <MX_SPI3_Init+0xa4>)
 80086dc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80086e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80086e2:	4b24      	ldr	r3, [pc, #144]	; (8008774 <MX_SPI3_Init+0xa4>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80086e8:	4b22      	ldr	r3, [pc, #136]	; (8008774 <MX_SPI3_Init+0xa4>)
 80086ea:	2203      	movs	r2, #3
 80086ec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80086ee:	4b21      	ldr	r3, [pc, #132]	; (8008774 <MX_SPI3_Init+0xa4>)
 80086f0:	2200      	movs	r2, #0
 80086f2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80086f4:	4b1f      	ldr	r3, [pc, #124]	; (8008774 <MX_SPI3_Init+0xa4>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80086fa:	4b1e      	ldr	r3, [pc, #120]	; (8008774 <MX_SPI3_Init+0xa4>)
 80086fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008700:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008702:	4b1c      	ldr	r3, [pc, #112]	; (8008774 <MX_SPI3_Init+0xa4>)
 8008704:	2200      	movs	r2, #0
 8008706:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008708:	4b1a      	ldr	r3, [pc, #104]	; (8008774 <MX_SPI3_Init+0xa4>)
 800870a:	2200      	movs	r2, #0
 800870c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800870e:	4b19      	ldr	r3, [pc, #100]	; (8008774 <MX_SPI3_Init+0xa4>)
 8008710:	2200      	movs	r2, #0
 8008712:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008714:	4b17      	ldr	r3, [pc, #92]	; (8008774 <MX_SPI3_Init+0xa4>)
 8008716:	2200      	movs	r2, #0
 8008718:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800871a:	4b16      	ldr	r3, [pc, #88]	; (8008774 <MX_SPI3_Init+0xa4>)
 800871c:	2200      	movs	r2, #0
 800871e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8008720:	4b14      	ldr	r3, [pc, #80]	; (8008774 <MX_SPI3_Init+0xa4>)
 8008722:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008726:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8008728:	4b12      	ldr	r3, [pc, #72]	; (8008774 <MX_SPI3_Init+0xa4>)
 800872a:	2200      	movs	r2, #0
 800872c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800872e:	4b11      	ldr	r3, [pc, #68]	; (8008774 <MX_SPI3_Init+0xa4>)
 8008730:	2200      	movs	r2, #0
 8008732:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8008734:	4b0f      	ldr	r3, [pc, #60]	; (8008774 <MX_SPI3_Init+0xa4>)
 8008736:	2200      	movs	r2, #0
 8008738:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800873a:	4b0e      	ldr	r3, [pc, #56]	; (8008774 <MX_SPI3_Init+0xa4>)
 800873c:	2200      	movs	r2, #0
 800873e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8008740:	4b0c      	ldr	r3, [pc, #48]	; (8008774 <MX_SPI3_Init+0xa4>)
 8008742:	2200      	movs	r2, #0
 8008744:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8008746:	4b0b      	ldr	r3, [pc, #44]	; (8008774 <MX_SPI3_Init+0xa4>)
 8008748:	2200      	movs	r2, #0
 800874a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800874c:	4b09      	ldr	r3, [pc, #36]	; (8008774 <MX_SPI3_Init+0xa4>)
 800874e:	2200      	movs	r2, #0
 8008750:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8008752:	4b08      	ldr	r3, [pc, #32]	; (8008774 <MX_SPI3_Init+0xa4>)
 8008754:	2200      	movs	r2, #0
 8008756:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8008758:	4b06      	ldr	r3, [pc, #24]	; (8008774 <MX_SPI3_Init+0xa4>)
 800875a:	2200      	movs	r2, #0
 800875c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800875e:	4805      	ldr	r0, [pc, #20]	; (8008774 <MX_SPI3_Init+0xa4>)
 8008760:	f007 fb20 	bl	800fda4 <HAL_SPI_Init>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d001      	beq.n	800876e <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 800876a:	f7ff ffac 	bl	80086c6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800876e:	bf00      	nop
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	24000d70 	.word	0x24000d70
 8008778:	40003c00 	.word	0x40003c00

0800877c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b0b6      	sub	sp, #216	; 0xd8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008784:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8008788:	2200      	movs	r2, #0
 800878a:	601a      	str	r2, [r3, #0]
 800878c:	605a      	str	r2, [r3, #4]
 800878e:	609a      	str	r2, [r3, #8]
 8008790:	60da      	str	r2, [r3, #12]
 8008792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008794:	f107 0310 	add.w	r3, r7, #16
 8008798:	22b4      	movs	r2, #180	; 0xb4
 800879a:	2100      	movs	r1, #0
 800879c:	4618      	mov	r0, r3
 800879e:	f00b fd29 	bl	80141f4 <memset>
  if(spiHandle->Instance==SPI3)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a25      	ldr	r2, [pc, #148]	; (800883c <HAL_SPI_MspInit+0xc0>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d142      	bne.n	8008832 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80087ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087b0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80087b2:	2300      	movs	r3, #0
 80087b4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80087b6:	f107 0310 	add.w	r3, r7, #16
 80087ba:	4618      	mov	r0, r3
 80087bc:	f005 fa60 	bl	800dc80 <HAL_RCCEx_PeriphCLKConfig>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d001      	beq.n	80087ca <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80087c6:	f7ff ff7e 	bl	80086c6 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80087ca:	4b1d      	ldr	r3, [pc, #116]	; (8008840 <HAL_SPI_MspInit+0xc4>)
 80087cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80087d0:	4a1b      	ldr	r2, [pc, #108]	; (8008840 <HAL_SPI_MspInit+0xc4>)
 80087d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80087da:	4b19      	ldr	r3, [pc, #100]	; (8008840 <HAL_SPI_MspInit+0xc4>)
 80087dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80087e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087e4:	60fb      	str	r3, [r7, #12]
 80087e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80087e8:	4b15      	ldr	r3, [pc, #84]	; (8008840 <HAL_SPI_MspInit+0xc4>)
 80087ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087ee:	4a14      	ldr	r2, [pc, #80]	; (8008840 <HAL_SPI_MspInit+0xc4>)
 80087f0:	f043 0304 	orr.w	r3, r3, #4
 80087f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80087f8:	4b11      	ldr	r3, [pc, #68]	; (8008840 <HAL_SPI_MspInit+0xc4>)
 80087fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087fe:	f003 0304 	and.w	r3, r3, #4
 8008802:	60bb      	str	r3, [r7, #8]
 8008804:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8008806:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800880a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800880e:	2302      	movs	r3, #2
 8008810:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008814:	2300      	movs	r3, #0
 8008816:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800881a:	2300      	movs	r3, #0
 800881c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008820:	2306      	movs	r3, #6
 8008822:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008826:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800882a:	4619      	mov	r1, r3
 800882c:	4805      	ldr	r0, [pc, #20]	; (8008844 <HAL_SPI_MspInit+0xc8>)
 800882e:	f004 f8c7 	bl	800c9c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8008832:	bf00      	nop
 8008834:	37d8      	adds	r7, #216	; 0xd8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	40003c00 	.word	0x40003c00
 8008840:	58024400 	.word	0x58024400
 8008844:	58020800 	.word	0x58020800

08008848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800884e:	4b0a      	ldr	r3, [pc, #40]	; (8008878 <HAL_MspInit+0x30>)
 8008850:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008854:	4a08      	ldr	r2, [pc, #32]	; (8008878 <HAL_MspInit+0x30>)
 8008856:	f043 0302 	orr.w	r3, r3, #2
 800885a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800885e:	4b06      	ldr	r3, [pc, #24]	; (8008878 <HAL_MspInit+0x30>)
 8008860:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008864:	f003 0302 	and.w	r3, r3, #2
 8008868:	607b      	str	r3, [r7, #4]
 800886a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	58024400 	.word	0x58024400

0800887c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8008880:	f005 f9e2 	bl	800dc48 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008884:	e7fe      	b.n	8008884 <NMI_Handler+0x8>

08008886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008886:	b480      	push	{r7}
 8008888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800888a:	e7fe      	b.n	800888a <HardFault_Handler+0x4>

0800888c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800888c:	b480      	push	{r7}
 800888e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008890:	e7fe      	b.n	8008890 <MemManage_Handler+0x4>

08008892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008892:	b480      	push	{r7}
 8008894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008896:	e7fe      	b.n	8008896 <BusFault_Handler+0x4>

08008898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008898:	b480      	push	{r7}
 800889a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800889c:	e7fe      	b.n	800889c <UsageFault_Handler+0x4>

0800889e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800889e:	b480      	push	{r7}
 80088a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80088a2:	bf00      	nop
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80088ac:	b480      	push	{r7}
 80088ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80088b0:	bf00      	nop
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80088ba:	b480      	push	{r7}
 80088bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80088be:	bf00      	nop
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80088cc:	f001 fc7a 	bl	800a1c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80088d0:	bf00      	nop
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80088d8:	4802      	ldr	r0, [pc, #8]	; (80088e4 <USART3_IRQHandler+0x10>)
 80088da:	f008 ff99 	bl	8011810 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80088de:	bf00      	nop
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	24001188 	.word	0x24001188

080088e8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
	__HAL_UART_FLUSH_DRREGISTER(huart);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	699a      	ldr	r2, [r3, #24]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f042 0208 	orr.w	r2, r2, #8
 80088fe:	619a      	str	r2, [r3, #24]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	699a      	ldr	r2, [r3, #24]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f042 0210 	orr.w	r2, r2, #16
 800890e:	619a      	str	r2, [r3, #24]
	ARMsProtocol_FUNC_Rx_Callback(huart);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f7f8 f8d5 	bl	8000ac0 <ARMsProtocol_FUNC_Rx_Callback>
}
 8008916:	bf00      	nop
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
	//__HAL_UART_FLUSH_DRREGISTER(huart);
	ARMsProtocol_Data.Tx_flag = 0;
 8008928:	4b04      	ldr	r3, [pc, #16]	; (800893c <HAL_UART_TxCpltCallback+0x1c>)
 800892a:	2200      	movs	r2, #0
 800892c:	f883 20e6 	strb.w	r2, [r3, #230]	; 0xe6
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	24000338 	.word	0x24000338

08008940 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008940:	b480      	push	{r7}
 8008942:	af00      	add	r7, sp, #0
	return 1;
 8008944:	2301      	movs	r3, #1
}
 8008946:	4618      	mov	r0, r3
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <_kill>:

int _kill(int pid, int sig)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800895a:	f00b fc13 	bl	8014184 <__errno>
 800895e:	4603      	mov	r3, r0
 8008960:	2216      	movs	r2, #22
 8008962:	601a      	str	r2, [r3, #0]
	return -1;
 8008964:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008968:	4618      	mov	r0, r3
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}

08008970 <_exit>:

void _exit (int status)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008978:	f04f 31ff 	mov.w	r1, #4294967295
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f7ff ffe7 	bl	8008950 <_kill>
	while (1) {}		/* Make sure we hang here */
 8008982:	e7fe      	b.n	8008982 <_exit+0x12>

08008984 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008990:	2300      	movs	r3, #0
 8008992:	617b      	str	r3, [r7, #20]
 8008994:	e00a      	b.n	80089ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008996:	f3af 8000 	nop.w
 800899a:	4601      	mov	r1, r0
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	1c5a      	adds	r2, r3, #1
 80089a0:	60ba      	str	r2, [r7, #8]
 80089a2:	b2ca      	uxtb	r2, r1
 80089a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	3301      	adds	r3, #1
 80089aa:	617b      	str	r3, [r7, #20]
 80089ac:	697a      	ldr	r2, [r7, #20]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	dbf0      	blt.n	8008996 <_read+0x12>
	}

return len;
 80089b4:	687b      	ldr	r3, [r7, #4]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3718      	adds	r7, #24
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}

080089be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	b086      	sub	sp, #24
 80089c2:	af00      	add	r7, sp, #0
 80089c4:	60f8      	str	r0, [r7, #12]
 80089c6:	60b9      	str	r1, [r7, #8]
 80089c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80089ca:	2300      	movs	r3, #0
 80089cc:	617b      	str	r3, [r7, #20]
 80089ce:	e009      	b.n	80089e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	1c5a      	adds	r2, r3, #1
 80089d4:	60ba      	str	r2, [r7, #8]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	4618      	mov	r0, r3
 80089da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	3301      	adds	r3, #1
 80089e2:	617b      	str	r3, [r7, #20]
 80089e4:	697a      	ldr	r2, [r7, #20]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	dbf1      	blt.n	80089d0 <_write+0x12>
	}
	return len;
 80089ec:	687b      	ldr	r3, [r7, #4]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3718      	adds	r7, #24
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <_close>:

int _close(int file)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b083      	sub	sp, #12
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
	return -1;
 80089fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b083      	sub	sp, #12
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008a1e:	605a      	str	r2, [r3, #4]
	return 0;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <_isatty>:

int _isatty(int file)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b083      	sub	sp, #12
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
	return 1;
 8008a36:	2301      	movs	r3, #1
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	370c      	adds	r7, #12
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr

08008a44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b085      	sub	sp, #20
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
	return 0;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
	...

08008a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008a68:	4a14      	ldr	r2, [pc, #80]	; (8008abc <_sbrk+0x5c>)
 8008a6a:	4b15      	ldr	r3, [pc, #84]	; (8008ac0 <_sbrk+0x60>)
 8008a6c:	1ad3      	subs	r3, r2, r3
 8008a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008a74:	4b13      	ldr	r3, [pc, #76]	; (8008ac4 <_sbrk+0x64>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d102      	bne.n	8008a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008a7c:	4b11      	ldr	r3, [pc, #68]	; (8008ac4 <_sbrk+0x64>)
 8008a7e:	4a12      	ldr	r2, [pc, #72]	; (8008ac8 <_sbrk+0x68>)
 8008a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008a82:	4b10      	ldr	r3, [pc, #64]	; (8008ac4 <_sbrk+0x64>)
 8008a84:	681a      	ldr	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4413      	add	r3, r2
 8008a8a:	693a      	ldr	r2, [r7, #16]
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d207      	bcs.n	8008aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008a90:	f00b fb78 	bl	8014184 <__errno>
 8008a94:	4603      	mov	r3, r0
 8008a96:	220c      	movs	r2, #12
 8008a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a9e:	e009      	b.n	8008ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008aa0:	4b08      	ldr	r3, [pc, #32]	; (8008ac4 <_sbrk+0x64>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008aa6:	4b07      	ldr	r3, [pc, #28]	; (8008ac4 <_sbrk+0x64>)
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4413      	add	r3, r2
 8008aae:	4a05      	ldr	r2, [pc, #20]	; (8008ac4 <_sbrk+0x64>)
 8008ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3718      	adds	r7, #24
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	24050000 	.word	0x24050000
 8008ac0:	00000400 	.word	0x00000400
 8008ac4:	24000320 	.word	0x24000320
 8008ac8:	240013e0 	.word	0x240013e0

08008acc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008acc:	b480      	push	{r7}
 8008ace:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008ad0:	4b32      	ldr	r3, [pc, #200]	; (8008b9c <SystemInit+0xd0>)
 8008ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ad6:	4a31      	ldr	r2, [pc, #196]	; (8008b9c <SystemInit+0xd0>)
 8008ad8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008adc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008ae0:	4b2f      	ldr	r3, [pc, #188]	; (8008ba0 <SystemInit+0xd4>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f003 030f 	and.w	r3, r3, #15
 8008ae8:	2b06      	cmp	r3, #6
 8008aea:	d807      	bhi.n	8008afc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008aec:	4b2c      	ldr	r3, [pc, #176]	; (8008ba0 <SystemInit+0xd4>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f023 030f 	bic.w	r3, r3, #15
 8008af4:	4a2a      	ldr	r2, [pc, #168]	; (8008ba0 <SystemInit+0xd4>)
 8008af6:	f043 0307 	orr.w	r3, r3, #7
 8008afa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008afc:	4b29      	ldr	r3, [pc, #164]	; (8008ba4 <SystemInit+0xd8>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a28      	ldr	r2, [pc, #160]	; (8008ba4 <SystemInit+0xd8>)
 8008b02:	f043 0301 	orr.w	r3, r3, #1
 8008b06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008b08:	4b26      	ldr	r3, [pc, #152]	; (8008ba4 <SystemInit+0xd8>)
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008b0e:	4b25      	ldr	r3, [pc, #148]	; (8008ba4 <SystemInit+0xd8>)
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	4924      	ldr	r1, [pc, #144]	; (8008ba4 <SystemInit+0xd8>)
 8008b14:	4b24      	ldr	r3, [pc, #144]	; (8008ba8 <SystemInit+0xdc>)
 8008b16:	4013      	ands	r3, r2
 8008b18:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008b1a:	4b21      	ldr	r3, [pc, #132]	; (8008ba0 <SystemInit+0xd4>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f003 0308 	and.w	r3, r3, #8
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d007      	beq.n	8008b36 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008b26:	4b1e      	ldr	r3, [pc, #120]	; (8008ba0 <SystemInit+0xd4>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f023 030f 	bic.w	r3, r3, #15
 8008b2e:	4a1c      	ldr	r2, [pc, #112]	; (8008ba0 <SystemInit+0xd4>)
 8008b30:	f043 0307 	orr.w	r3, r3, #7
 8008b34:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008b36:	4b1b      	ldr	r3, [pc, #108]	; (8008ba4 <SystemInit+0xd8>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008b3c:	4b19      	ldr	r3, [pc, #100]	; (8008ba4 <SystemInit+0xd8>)
 8008b3e:	2200      	movs	r2, #0
 8008b40:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008b42:	4b18      	ldr	r3, [pc, #96]	; (8008ba4 <SystemInit+0xd8>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008b48:	4b16      	ldr	r3, [pc, #88]	; (8008ba4 <SystemInit+0xd8>)
 8008b4a:	4a18      	ldr	r2, [pc, #96]	; (8008bac <SystemInit+0xe0>)
 8008b4c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008b4e:	4b15      	ldr	r3, [pc, #84]	; (8008ba4 <SystemInit+0xd8>)
 8008b50:	4a17      	ldr	r2, [pc, #92]	; (8008bb0 <SystemInit+0xe4>)
 8008b52:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008b54:	4b13      	ldr	r3, [pc, #76]	; (8008ba4 <SystemInit+0xd8>)
 8008b56:	4a17      	ldr	r2, [pc, #92]	; (8008bb4 <SystemInit+0xe8>)
 8008b58:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008b5a:	4b12      	ldr	r3, [pc, #72]	; (8008ba4 <SystemInit+0xd8>)
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008b60:	4b10      	ldr	r3, [pc, #64]	; (8008ba4 <SystemInit+0xd8>)
 8008b62:	4a14      	ldr	r2, [pc, #80]	; (8008bb4 <SystemInit+0xe8>)
 8008b64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008b66:	4b0f      	ldr	r3, [pc, #60]	; (8008ba4 <SystemInit+0xd8>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008b6c:	4b0d      	ldr	r3, [pc, #52]	; (8008ba4 <SystemInit+0xd8>)
 8008b6e:	4a11      	ldr	r2, [pc, #68]	; (8008bb4 <SystemInit+0xe8>)
 8008b70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008b72:	4b0c      	ldr	r3, [pc, #48]	; (8008ba4 <SystemInit+0xd8>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008b78:	4b0a      	ldr	r3, [pc, #40]	; (8008ba4 <SystemInit+0xd8>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a09      	ldr	r2, [pc, #36]	; (8008ba4 <SystemInit+0xd8>)
 8008b7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008b84:	4b07      	ldr	r3, [pc, #28]	; (8008ba4 <SystemInit+0xd8>)
 8008b86:	2200      	movs	r2, #0
 8008b88:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008b8a:	4b0b      	ldr	r3, [pc, #44]	; (8008bb8 <SystemInit+0xec>)
 8008b8c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8008b90:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8008b92:	bf00      	nop
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr
 8008b9c:	e000ed00 	.word	0xe000ed00
 8008ba0:	52002000 	.word	0x52002000
 8008ba4:	58024400 	.word	0x58024400
 8008ba8:	eaf6ed7f 	.word	0xeaf6ed7f
 8008bac:	02020200 	.word	0x02020200
 8008bb0:	01ff0000 	.word	0x01ff0000
 8008bb4:	01010280 	.word	0x01010280
 8008bb8:	52004000 	.word	0x52004000

08008bbc <MX_TIM1_Init>:
TIM_HandleTypeDef htim23;
TIM_HandleTypeDef htim24;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b09c      	sub	sp, #112	; 0x70
 8008bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008bc2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	601a      	str	r2, [r3, #0]
 8008bca:	605a      	str	r2, [r3, #4]
 8008bcc:	609a      	str	r2, [r3, #8]
 8008bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008bd0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	605a      	str	r2, [r3, #4]
 8008bda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008bdc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008be0:	2200      	movs	r2, #0
 8008be2:	601a      	str	r2, [r3, #0]
 8008be4:	605a      	str	r2, [r3, #4]
 8008be6:	609a      	str	r2, [r3, #8]
 8008be8:	60da      	str	r2, [r3, #12]
 8008bea:	611a      	str	r2, [r3, #16]
 8008bec:	615a      	str	r2, [r3, #20]
 8008bee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008bf0:	1d3b      	adds	r3, r7, #4
 8008bf2:	2234      	movs	r2, #52	; 0x34
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f00b fafc 	bl	80141f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008bfc:	4b44      	ldr	r3, [pc, #272]	; (8008d10 <MX_TIM1_Init+0x154>)
 8008bfe:	4a45      	ldr	r2, [pc, #276]	; (8008d14 <MX_TIM1_Init+0x158>)
 8008c00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5500-1;
 8008c02:	4b43      	ldr	r3, [pc, #268]	; (8008d10 <MX_TIM1_Init+0x154>)
 8008c04:	f241 527b 	movw	r2, #5499	; 0x157b
 8008c08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c0a:	4b41      	ldr	r3, [pc, #260]	; (8008d10 <MX_TIM1_Init+0x154>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8008c10:	4b3f      	ldr	r3, [pc, #252]	; (8008d10 <MX_TIM1_Init+0x154>)
 8008c12:	f242 7210 	movw	r2, #10000	; 0x2710
 8008c16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c18:	4b3d      	ldr	r3, [pc, #244]	; (8008d10 <MX_TIM1_Init+0x154>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008c1e:	4b3c      	ldr	r3, [pc, #240]	; (8008d10 <MX_TIM1_Init+0x154>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008c24:	4b3a      	ldr	r3, [pc, #232]	; (8008d10 <MX_TIM1_Init+0x154>)
 8008c26:	2280      	movs	r2, #128	; 0x80
 8008c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008c2a:	4839      	ldr	r0, [pc, #228]	; (8008d10 <MX_TIM1_Init+0x154>)
 8008c2c:	f007 f9db 	bl	800ffe6 <HAL_TIM_Base_Init>
 8008c30:	4603      	mov	r3, r0
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d001      	beq.n	8008c3a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8008c36:	f7ff fd46 	bl	80086c6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c3e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008c40:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008c44:	4619      	mov	r1, r3
 8008c46:	4832      	ldr	r0, [pc, #200]	; (8008d10 <MX_TIM1_Init+0x154>)
 8008c48:	f007 fcb6 	bl	80105b8 <HAL_TIM_ConfigClockSource>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d001      	beq.n	8008c56 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8008c52:	f7ff fd38 	bl	80086c6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008c56:	482e      	ldr	r0, [pc, #184]	; (8008d10 <MX_TIM1_Init+0x154>)
 8008c58:	f007 fa1c 	bl	8010094 <HAL_TIM_PWM_Init>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8008c62:	f7ff fd30 	bl	80086c6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008c66:	2300      	movs	r3, #0
 8008c68:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008c72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008c76:	4619      	mov	r1, r3
 8008c78:	4825      	ldr	r0, [pc, #148]	; (8008d10 <MX_TIM1_Init+0x154>)
 8008c7a:	f008 f9d5 	bl	8011028 <HAL_TIMEx_MasterConfigSynchronization>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d001      	beq.n	8008c88 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8008c84:	f7ff fd1f 	bl	80086c6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008c88:	2360      	movs	r3, #96	; 0x60
 8008c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008c90:	2300      	movs	r3, #0
 8008c92:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008c94:	2300      	movs	r3, #0
 8008c96:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008ca4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008ca8:	2200      	movs	r2, #0
 8008caa:	4619      	mov	r1, r3
 8008cac:	4818      	ldr	r0, [pc, #96]	; (8008d10 <MX_TIM1_Init+0x154>)
 8008cae:	f007 fb6f 	bl	8010390 <HAL_TIM_PWM_ConfigChannel>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8008cb8:	f7ff fd05 	bl	80086c6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008ccc:	2300      	movs	r3, #0
 8008cce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008cd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008cd4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8008cde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008cec:	1d3b      	adds	r3, r7, #4
 8008cee:	4619      	mov	r1, r3
 8008cf0:	4807      	ldr	r0, [pc, #28]	; (8008d10 <MX_TIM1_Init+0x154>)
 8008cf2:	f008 fa35 	bl	8011160 <HAL_TIMEx_ConfigBreakDeadTime>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d001      	beq.n	8008d00 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8008cfc:	f7ff fce3 	bl	80086c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8008d00:	4803      	ldr	r0, [pc, #12]	; (8008d10 <MX_TIM1_Init+0x154>)
 8008d02:	f000 fdc3 	bl	800988c <HAL_TIM_MspPostInit>

}
 8008d06:	bf00      	nop
 8008d08:	3770      	adds	r7, #112	; 0x70
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	24000fc0 	.word	0x24000fc0
 8008d14:	40010000 	.word	0x40010000

08008d18 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b08e      	sub	sp, #56	; 0x38
 8008d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008d1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008d22:	2200      	movs	r2, #0
 8008d24:	601a      	str	r2, [r3, #0]
 8008d26:	605a      	str	r2, [r3, #4]
 8008d28:	609a      	str	r2, [r3, #8]
 8008d2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008d2c:	f107 031c 	add.w	r3, r7, #28
 8008d30:	2200      	movs	r2, #0
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	605a      	str	r2, [r3, #4]
 8008d36:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008d38:	463b      	mov	r3, r7
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	601a      	str	r2, [r3, #0]
 8008d3e:	605a      	str	r2, [r3, #4]
 8008d40:	609a      	str	r2, [r3, #8]
 8008d42:	60da      	str	r2, [r3, #12]
 8008d44:	611a      	str	r2, [r3, #16]
 8008d46:	615a      	str	r2, [r3, #20]
 8008d48:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008d4a:	4b2e      	ldr	r3, [pc, #184]	; (8008e04 <MX_TIM2_Init+0xec>)
 8008d4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008d50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5500- 1;
 8008d52:	4b2c      	ldr	r3, [pc, #176]	; (8008e04 <MX_TIM2_Init+0xec>)
 8008d54:	f241 527b 	movw	r2, #5499	; 0x157b
 8008d58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d5a:	4b2a      	ldr	r3, [pc, #168]	; (8008e04 <MX_TIM2_Init+0xec>)
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 8008d60:	4b28      	ldr	r3, [pc, #160]	; (8008e04 <MX_TIM2_Init+0xec>)
 8008d62:	f242 7210 	movw	r2, #10000	; 0x2710
 8008d66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008d68:	4b26      	ldr	r3, [pc, #152]	; (8008e04 <MX_TIM2_Init+0xec>)
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008d6e:	4b25      	ldr	r3, [pc, #148]	; (8008e04 <MX_TIM2_Init+0xec>)
 8008d70:	2280      	movs	r2, #128	; 0x80
 8008d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008d74:	4823      	ldr	r0, [pc, #140]	; (8008e04 <MX_TIM2_Init+0xec>)
 8008d76:	f007 f936 	bl	800ffe6 <HAL_TIM_Base_Init>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8008d80:	f7ff fca1 	bl	80086c6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d88:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008d8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008d8e:	4619      	mov	r1, r3
 8008d90:	481c      	ldr	r0, [pc, #112]	; (8008e04 <MX_TIM2_Init+0xec>)
 8008d92:	f007 fc11 	bl	80105b8 <HAL_TIM_ConfigClockSource>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d001      	beq.n	8008da0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8008d9c:	f7ff fc93 	bl	80086c6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008da0:	4818      	ldr	r0, [pc, #96]	; (8008e04 <MX_TIM2_Init+0xec>)
 8008da2:	f007 f977 	bl	8010094 <HAL_TIM_PWM_Init>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d001      	beq.n	8008db0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8008dac:	f7ff fc8b 	bl	80086c6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008db0:	2300      	movs	r3, #0
 8008db2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008db4:	2300      	movs	r3, #0
 8008db6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008db8:	f107 031c 	add.w	r3, r7, #28
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	4811      	ldr	r0, [pc, #68]	; (8008e04 <MX_TIM2_Init+0xec>)
 8008dc0:	f008 f932 	bl	8011028 <HAL_TIMEx_MasterConfigSynchronization>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d001      	beq.n	8008dce <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8008dca:	f7ff fc7c 	bl	80086c6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008dce:	2360      	movs	r3, #96	; 0x60
 8008dd0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008dde:	463b      	mov	r3, r7
 8008de0:	2200      	movs	r2, #0
 8008de2:	4619      	mov	r1, r3
 8008de4:	4807      	ldr	r0, [pc, #28]	; (8008e04 <MX_TIM2_Init+0xec>)
 8008de6:	f007 fad3 	bl	8010390 <HAL_TIM_PWM_ConfigChannel>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d001      	beq.n	8008df4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8008df0:	f7ff fc69 	bl	80086c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8008df4:	4803      	ldr	r0, [pc, #12]	; (8008e04 <MX_TIM2_Init+0xec>)
 8008df6:	f000 fd49 	bl	800988c <HAL_TIM_MspPostInit>

}
 8008dfa:	bf00      	nop
 8008dfc:	3738      	adds	r7, #56	; 0x38
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}
 8008e02:	bf00      	nop
 8008e04:	2400100c 	.word	0x2400100c

08008e08 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08e      	sub	sp, #56	; 0x38
 8008e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008e0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e12:	2200      	movs	r2, #0
 8008e14:	601a      	str	r2, [r3, #0]
 8008e16:	605a      	str	r2, [r3, #4]
 8008e18:	609a      	str	r2, [r3, #8]
 8008e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008e1c:	f107 031c 	add.w	r3, r7, #28
 8008e20:	2200      	movs	r2, #0
 8008e22:	601a      	str	r2, [r3, #0]
 8008e24:	605a      	str	r2, [r3, #4]
 8008e26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008e28:	463b      	mov	r3, r7
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	601a      	str	r2, [r3, #0]
 8008e2e:	605a      	str	r2, [r3, #4]
 8008e30:	609a      	str	r2, [r3, #8]
 8008e32:	60da      	str	r2, [r3, #12]
 8008e34:	611a      	str	r2, [r3, #16]
 8008e36:	615a      	str	r2, [r3, #20]
 8008e38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008e3a:	4b2d      	ldr	r3, [pc, #180]	; (8008ef0 <MX_TIM3_Init+0xe8>)
 8008e3c:	4a2d      	ldr	r2, [pc, #180]	; (8008ef4 <MX_TIM3_Init+0xec>)
 8008e3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5500 - 1;
 8008e40:	4b2b      	ldr	r3, [pc, #172]	; (8008ef0 <MX_TIM3_Init+0xe8>)
 8008e42:	f241 527b 	movw	r2, #5499	; 0x157b
 8008e46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008e48:	4b29      	ldr	r3, [pc, #164]	; (8008ef0 <MX_TIM3_Init+0xe8>)
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8008e4e:	4b28      	ldr	r3, [pc, #160]	; (8008ef0 <MX_TIM3_Init+0xe8>)
 8008e50:	f242 7210 	movw	r2, #10000	; 0x2710
 8008e54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008e56:	4b26      	ldr	r3, [pc, #152]	; (8008ef0 <MX_TIM3_Init+0xe8>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008e5c:	4b24      	ldr	r3, [pc, #144]	; (8008ef0 <MX_TIM3_Init+0xe8>)
 8008e5e:	2280      	movs	r2, #128	; 0x80
 8008e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008e62:	4823      	ldr	r0, [pc, #140]	; (8008ef0 <MX_TIM3_Init+0xe8>)
 8008e64:	f007 f8bf 	bl	800ffe6 <HAL_TIM_Base_Init>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d001      	beq.n	8008e72 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8008e6e:	f7ff fc2a 	bl	80086c6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008e78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	481c      	ldr	r0, [pc, #112]	; (8008ef0 <MX_TIM3_Init+0xe8>)
 8008e80:	f007 fb9a 	bl	80105b8 <HAL_TIM_ConfigClockSource>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d001      	beq.n	8008e8e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8008e8a:	f7ff fc1c 	bl	80086c6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008e8e:	4818      	ldr	r0, [pc, #96]	; (8008ef0 <MX_TIM3_Init+0xe8>)
 8008e90:	f007 f900 	bl	8010094 <HAL_TIM_PWM_Init>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d001      	beq.n	8008e9e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8008e9a:	f7ff fc14 	bl	80086c6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008ea6:	f107 031c 	add.w	r3, r7, #28
 8008eaa:	4619      	mov	r1, r3
 8008eac:	4810      	ldr	r0, [pc, #64]	; (8008ef0 <MX_TIM3_Init+0xe8>)
 8008eae:	f008 f8bb 	bl	8011028 <HAL_TIMEx_MasterConfigSynchronization>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d001      	beq.n	8008ebc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8008eb8:	f7ff fc05 	bl	80086c6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008ebc:	2360      	movs	r3, #96	; 0x60
 8008ebe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008ecc:	463b      	mov	r3, r7
 8008ece:	2200      	movs	r2, #0
 8008ed0:	4619      	mov	r1, r3
 8008ed2:	4807      	ldr	r0, [pc, #28]	; (8008ef0 <MX_TIM3_Init+0xe8>)
 8008ed4:	f007 fa5c 	bl	8010390 <HAL_TIM_PWM_ConfigChannel>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d001      	beq.n	8008ee2 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8008ede:	f7ff fbf2 	bl	80086c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008ee2:	4803      	ldr	r0, [pc, #12]	; (8008ef0 <MX_TIM3_Init+0xe8>)
 8008ee4:	f000 fcd2 	bl	800988c <HAL_TIM_MspPostInit>

}
 8008ee8:	bf00      	nop
 8008eea:	3738      	adds	r7, #56	; 0x38
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	24000f28 	.word	0x24000f28
 8008ef4:	40000400 	.word	0x40000400

08008ef8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b08e      	sub	sp, #56	; 0x38
 8008efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008efe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f02:	2200      	movs	r2, #0
 8008f04:	601a      	str	r2, [r3, #0]
 8008f06:	605a      	str	r2, [r3, #4]
 8008f08:	609a      	str	r2, [r3, #8]
 8008f0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008f0c:	f107 031c 	add.w	r3, r7, #28
 8008f10:	2200      	movs	r2, #0
 8008f12:	601a      	str	r2, [r3, #0]
 8008f14:	605a      	str	r2, [r3, #4]
 8008f16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008f18:	463b      	mov	r3, r7
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	601a      	str	r2, [r3, #0]
 8008f1e:	605a      	str	r2, [r3, #4]
 8008f20:	609a      	str	r2, [r3, #8]
 8008f22:	60da      	str	r2, [r3, #12]
 8008f24:	611a      	str	r2, [r3, #16]
 8008f26:	615a      	str	r2, [r3, #20]
 8008f28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8008f2a:	4b2d      	ldr	r3, [pc, #180]	; (8008fe0 <MX_TIM4_Init+0xe8>)
 8008f2c:	4a2d      	ldr	r2, [pc, #180]	; (8008fe4 <MX_TIM4_Init+0xec>)
 8008f2e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 5500-1;
 8008f30:	4b2b      	ldr	r3, [pc, #172]	; (8008fe0 <MX_TIM4_Init+0xe8>)
 8008f32:	f241 527b 	movw	r2, #5499	; 0x157b
 8008f36:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f38:	4b29      	ldr	r3, [pc, #164]	; (8008fe0 <MX_TIM4_Init+0xe8>)
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8008f3e:	4b28      	ldr	r3, [pc, #160]	; (8008fe0 <MX_TIM4_Init+0xe8>)
 8008f40:	f242 7210 	movw	r2, #10000	; 0x2710
 8008f44:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008f46:	4b26      	ldr	r3, [pc, #152]	; (8008fe0 <MX_TIM4_Init+0xe8>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008f4c:	4b24      	ldr	r3, [pc, #144]	; (8008fe0 <MX_TIM4_Init+0xe8>)
 8008f4e:	2280      	movs	r2, #128	; 0x80
 8008f50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008f52:	4823      	ldr	r0, [pc, #140]	; (8008fe0 <MX_TIM4_Init+0xe8>)
 8008f54:	f007 f847 	bl	800ffe6 <HAL_TIM_Base_Init>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d001      	beq.n	8008f62 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8008f5e:	f7ff fbb2 	bl	80086c6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008f62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f66:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008f68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	481c      	ldr	r0, [pc, #112]	; (8008fe0 <MX_TIM4_Init+0xe8>)
 8008f70:	f007 fb22 	bl	80105b8 <HAL_TIM_ConfigClockSource>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d001      	beq.n	8008f7e <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8008f7a:	f7ff fba4 	bl	80086c6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8008f7e:	4818      	ldr	r0, [pc, #96]	; (8008fe0 <MX_TIM4_Init+0xe8>)
 8008f80:	f007 f888 	bl	8010094 <HAL_TIM_PWM_Init>
 8008f84:	4603      	mov	r3, r0
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d001      	beq.n	8008f8e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8008f8a:	f7ff fb9c 	bl	80086c6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f92:	2300      	movs	r3, #0
 8008f94:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008f96:	f107 031c 	add.w	r3, r7, #28
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	4810      	ldr	r0, [pc, #64]	; (8008fe0 <MX_TIM4_Init+0xe8>)
 8008f9e:	f008 f843 	bl	8011028 <HAL_TIMEx_MasterConfigSynchronization>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d001      	beq.n	8008fac <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8008fa8:	f7ff fb8d 	bl	80086c6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008fac:	2360      	movs	r3, #96	; 0x60
 8008fae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008fbc:	463b      	mov	r3, r7
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	4807      	ldr	r0, [pc, #28]	; (8008fe0 <MX_TIM4_Init+0xe8>)
 8008fc4:	f007 f9e4 	bl	8010390 <HAL_TIM_PWM_ConfigChannel>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d001      	beq.n	8008fd2 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8008fce:	f7ff fb7a 	bl	80086c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8008fd2:	4803      	ldr	r0, [pc, #12]	; (8008fe0 <MX_TIM4_Init+0xe8>)
 8008fd4:	f000 fc5a 	bl	800988c <HAL_TIM_MspPostInit>

}
 8008fd8:	bf00      	nop
 8008fda:	3738      	adds	r7, #56	; 0x38
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	24000e44 	.word	0x24000e44
 8008fe4:	40000800 	.word	0x40000800

08008fe8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b08c      	sub	sp, #48	; 0x30
 8008fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008fee:	f107 0320 	add.w	r3, r7, #32
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	601a      	str	r2, [r3, #0]
 8008ff6:	605a      	str	r2, [r3, #4]
 8008ff8:	609a      	str	r2, [r3, #8]
 8008ffa:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008ffc:	1d3b      	adds	r3, r7, #4
 8008ffe:	2200      	movs	r2, #0
 8009000:	601a      	str	r2, [r3, #0]
 8009002:	605a      	str	r2, [r3, #4]
 8009004:	609a      	str	r2, [r3, #8]
 8009006:	60da      	str	r2, [r3, #12]
 8009008:	611a      	str	r2, [r3, #16]
 800900a:	615a      	str	r2, [r3, #20]
 800900c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800900e:	4b26      	ldr	r3, [pc, #152]	; (80090a8 <MX_TIM12_Init+0xc0>)
 8009010:	4a26      	ldr	r2, [pc, #152]	; (80090ac <MX_TIM12_Init+0xc4>)
 8009012:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 550 - 1;
 8009014:	4b24      	ldr	r3, [pc, #144]	; (80090a8 <MX_TIM12_Init+0xc0>)
 8009016:	f240 2225 	movw	r2, #549	; 0x225
 800901a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800901c:	4b22      	ldr	r3, [pc, #136]	; (80090a8 <MX_TIM12_Init+0xc0>)
 800901e:	2200      	movs	r2, #0
 8009020:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1 - 1;
 8009022:	4b21      	ldr	r3, [pc, #132]	; (80090a8 <MX_TIM12_Init+0xc0>)
 8009024:	2200      	movs	r2, #0
 8009026:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009028:	4b1f      	ldr	r3, [pc, #124]	; (80090a8 <MX_TIM12_Init+0xc0>)
 800902a:	2200      	movs	r2, #0
 800902c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800902e:	4b1e      	ldr	r3, [pc, #120]	; (80090a8 <MX_TIM12_Init+0xc0>)
 8009030:	2280      	movs	r2, #128	; 0x80
 8009032:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8009034:	481c      	ldr	r0, [pc, #112]	; (80090a8 <MX_TIM12_Init+0xc0>)
 8009036:	f006 ffd6 	bl	800ffe6 <HAL_TIM_Base_Init>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	d001      	beq.n	8009044 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8009040:	f7ff fb41 	bl	80086c6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009044:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009048:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800904a:	f107 0320 	add.w	r3, r7, #32
 800904e:	4619      	mov	r1, r3
 8009050:	4815      	ldr	r0, [pc, #84]	; (80090a8 <MX_TIM12_Init+0xc0>)
 8009052:	f007 fab1 	bl	80105b8 <HAL_TIM_ConfigClockSource>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d001      	beq.n	8009060 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800905c:	f7ff fb33 	bl	80086c6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8009060:	4811      	ldr	r0, [pc, #68]	; (80090a8 <MX_TIM12_Init+0xc0>)
 8009062:	f007 f817 	bl	8010094 <HAL_TIM_PWM_Init>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d001      	beq.n	8009070 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800906c:	f7ff fb2b 	bl	80086c6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009070:	2360      	movs	r3, #96	; 0x60
 8009072:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500 - 1;
 8009074:	f240 13f3 	movw	r3, #499	; 0x1f3
 8009078:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800907a:	2300      	movs	r3, #0
 800907c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800907e:	2300      	movs	r3, #0
 8009080:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009082:	1d3b      	adds	r3, r7, #4
 8009084:	2200      	movs	r2, #0
 8009086:	4619      	mov	r1, r3
 8009088:	4807      	ldr	r0, [pc, #28]	; (80090a8 <MX_TIM12_Init+0xc0>)
 800908a:	f007 f981 	bl	8010390 <HAL_TIM_PWM_ConfigChannel>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d001      	beq.n	8009098 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8009094:	f7ff fb17 	bl	80086c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8009098:	4803      	ldr	r0, [pc, #12]	; (80090a8 <MX_TIM12_Init+0xc0>)
 800909a:	f000 fbf7 	bl	800988c <HAL_TIM_MspPostInit>

}
 800909e:	bf00      	nop
 80090a0:	3730      	adds	r7, #48	; 0x30
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	240010f0 	.word	0x240010f0
 80090ac:	40001800 	.word	0x40001800

080090b0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80090b4:	4b0e      	ldr	r3, [pc, #56]	; (80090f0 <MX_TIM13_Init+0x40>)
 80090b6:	4a0f      	ldr	r2, [pc, #60]	; (80090f4 <MX_TIM13_Init+0x44>)
 80090b8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550 - 1;
 80090ba:	4b0d      	ldr	r3, [pc, #52]	; (80090f0 <MX_TIM13_Init+0x40>)
 80090bc:	f240 2225 	movw	r2, #549	; 0x225
 80090c0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80090c2:	4b0b      	ldr	r3, [pc, #44]	; (80090f0 <MX_TIM13_Init+0x40>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1-1;
 80090c8:	4b09      	ldr	r3, [pc, #36]	; (80090f0 <MX_TIM13_Init+0x40>)
 80090ca:	2200      	movs	r2, #0
 80090cc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80090ce:	4b08      	ldr	r3, [pc, #32]	; (80090f0 <MX_TIM13_Init+0x40>)
 80090d0:	2200      	movs	r2, #0
 80090d2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80090d4:	4b06      	ldr	r3, [pc, #24]	; (80090f0 <MX_TIM13_Init+0x40>)
 80090d6:	2280      	movs	r2, #128	; 0x80
 80090d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80090da:	4805      	ldr	r0, [pc, #20]	; (80090f0 <MX_TIM13_Init+0x40>)
 80090dc:	f006 ff83 	bl	800ffe6 <HAL_TIM_Base_Init>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80090e6:	f7ff faee 	bl	80086c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80090ea:	bf00      	nop
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	24000f74 	.word	0x24000f74
 80090f4:	40001c00 	.word	0x40001c00

080090f8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b088      	sub	sp, #32
 80090fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80090fe:	1d3b      	adds	r3, r7, #4
 8009100:	2200      	movs	r2, #0
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	605a      	str	r2, [r3, #4]
 8009106:	609a      	str	r2, [r3, #8]
 8009108:	60da      	str	r2, [r3, #12]
 800910a:	611a      	str	r2, [r3, #16]
 800910c:	615a      	str	r2, [r3, #20]
 800910e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8009110:	4b1e      	ldr	r3, [pc, #120]	; (800918c <MX_TIM14_Init+0x94>)
 8009112:	4a1f      	ldr	r2, [pc, #124]	; (8009190 <MX_TIM14_Init+0x98>)
 8009114:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 8009116:	4b1d      	ldr	r3, [pc, #116]	; (800918c <MX_TIM14_Init+0x94>)
 8009118:	f240 2225 	movw	r2, #549	; 0x225
 800911c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800911e:	4b1b      	ldr	r3, [pc, #108]	; (800918c <MX_TIM14_Init+0x94>)
 8009120:	2200      	movs	r2, #0
 8009122:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1-1;
 8009124:	4b19      	ldr	r3, [pc, #100]	; (800918c <MX_TIM14_Init+0x94>)
 8009126:	2200      	movs	r2, #0
 8009128:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800912a:	4b18      	ldr	r3, [pc, #96]	; (800918c <MX_TIM14_Init+0x94>)
 800912c:	2200      	movs	r2, #0
 800912e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009130:	4b16      	ldr	r3, [pc, #88]	; (800918c <MX_TIM14_Init+0x94>)
 8009132:	2280      	movs	r2, #128	; 0x80
 8009134:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8009136:	4815      	ldr	r0, [pc, #84]	; (800918c <MX_TIM14_Init+0x94>)
 8009138:	f006 ff55 	bl	800ffe6 <HAL_TIM_Base_Init>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d001      	beq.n	8009146 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8009142:	f7ff fac0 	bl	80086c6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8009146:	4811      	ldr	r0, [pc, #68]	; (800918c <MX_TIM14_Init+0x94>)
 8009148:	f006 ffa4 	bl	8010094 <HAL_TIM_PWM_Init>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8009152:	f7ff fab8 	bl	80086c6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009156:	2360      	movs	r3, #96	; 0x60
 8009158:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 800915a:	f240 13f3 	movw	r3, #499	; 0x1f3
 800915e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009160:	2300      	movs	r3, #0
 8009162:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009164:	2300      	movs	r3, #0
 8009166:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009168:	1d3b      	adds	r3, r7, #4
 800916a:	2200      	movs	r2, #0
 800916c:	4619      	mov	r1, r3
 800916e:	4807      	ldr	r0, [pc, #28]	; (800918c <MX_TIM14_Init+0x94>)
 8009170:	f007 f90e 	bl	8010390 <HAL_TIM_PWM_ConfigChannel>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d001      	beq.n	800917e <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 800917a:	f7ff faa4 	bl	80086c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800917e:	4803      	ldr	r0, [pc, #12]	; (800918c <MX_TIM14_Init+0x94>)
 8009180:	f000 fb84 	bl	800988c <HAL_TIM_MspPostInit>

}
 8009184:	bf00      	nop
 8009186:	3720      	adds	r7, #32
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	240010a4 	.word	0x240010a4
 8009190:	40002000 	.word	0x40002000

08009194 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b09c      	sub	sp, #112	; 0x70
 8009198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800919a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800919e:	2200      	movs	r2, #0
 80091a0:	601a      	str	r2, [r3, #0]
 80091a2:	605a      	str	r2, [r3, #4]
 80091a4:	609a      	str	r2, [r3, #8]
 80091a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80091a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80091ac:	2200      	movs	r2, #0
 80091ae:	601a      	str	r2, [r3, #0]
 80091b0:	605a      	str	r2, [r3, #4]
 80091b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80091b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80091b8:	2200      	movs	r2, #0
 80091ba:	601a      	str	r2, [r3, #0]
 80091bc:	605a      	str	r2, [r3, #4]
 80091be:	609a      	str	r2, [r3, #8]
 80091c0:	60da      	str	r2, [r3, #12]
 80091c2:	611a      	str	r2, [r3, #16]
 80091c4:	615a      	str	r2, [r3, #20]
 80091c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80091c8:	1d3b      	adds	r3, r7, #4
 80091ca:	2234      	movs	r2, #52	; 0x34
 80091cc:	2100      	movs	r1, #0
 80091ce:	4618      	mov	r0, r3
 80091d0:	f00b f810 	bl	80141f4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80091d4:	4b3f      	ldr	r3, [pc, #252]	; (80092d4 <MX_TIM15_Init+0x140>)
 80091d6:	4a40      	ldr	r2, [pc, #256]	; (80092d8 <MX_TIM15_Init+0x144>)
 80091d8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 550 - 1;
 80091da:	4b3e      	ldr	r3, [pc, #248]	; (80092d4 <MX_TIM15_Init+0x140>)
 80091dc:	f240 2225 	movw	r2, #549	; 0x225
 80091e0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80091e2:	4b3c      	ldr	r3, [pc, #240]	; (80092d4 <MX_TIM15_Init+0x140>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10000;
 80091e8:	4b3a      	ldr	r3, [pc, #232]	; (80092d4 <MX_TIM15_Init+0x140>)
 80091ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80091ee:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80091f0:	4b38      	ldr	r3, [pc, #224]	; (80092d4 <MX_TIM15_Init+0x140>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80091f6:	4b37      	ldr	r3, [pc, #220]	; (80092d4 <MX_TIM15_Init+0x140>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80091fc:	4b35      	ldr	r3, [pc, #212]	; (80092d4 <MX_TIM15_Init+0x140>)
 80091fe:	2280      	movs	r2, #128	; 0x80
 8009200:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8009202:	4834      	ldr	r0, [pc, #208]	; (80092d4 <MX_TIM15_Init+0x140>)
 8009204:	f006 feef 	bl	800ffe6 <HAL_TIM_Base_Init>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 800920e:	f7ff fa5a 	bl	80086c6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009216:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8009218:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800921c:	4619      	mov	r1, r3
 800921e:	482d      	ldr	r0, [pc, #180]	; (80092d4 <MX_TIM15_Init+0x140>)
 8009220:	f007 f9ca 	bl	80105b8 <HAL_TIM_ConfigClockSource>
 8009224:	4603      	mov	r3, r0
 8009226:	2b00      	cmp	r3, #0
 8009228:	d001      	beq.n	800922e <MX_TIM15_Init+0x9a>
  {
    Error_Handler();
 800922a:	f7ff fa4c 	bl	80086c6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800922e:	4829      	ldr	r0, [pc, #164]	; (80092d4 <MX_TIM15_Init+0x140>)
 8009230:	f006 ff30 	bl	8010094 <HAL_TIM_PWM_Init>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <MX_TIM15_Init+0xaa>
  {
    Error_Handler();
 800923a:	f7ff fa44 	bl	80086c6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800923e:	2300      	movs	r3, #0
 8009240:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009242:	2300      	movs	r3, #0
 8009244:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8009246:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800924a:	4619      	mov	r1, r3
 800924c:	4821      	ldr	r0, [pc, #132]	; (80092d4 <MX_TIM15_Init+0x140>)
 800924e:	f007 feeb 	bl	8011028 <HAL_TIMEx_MasterConfigSynchronization>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d001      	beq.n	800925c <MX_TIM15_Init+0xc8>
  {
    Error_Handler();
 8009258:	f7ff fa35 	bl	80086c6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800925c:	2360      	movs	r3, #96	; 0x60
 800925e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8009260:	2300      	movs	r3, #0
 8009262:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009264:	2300      	movs	r3, #0
 8009266:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009268:	2300      	movs	r3, #0
 800926a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800926c:	2300      	movs	r3, #0
 800926e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009270:	2300      	movs	r3, #0
 8009272:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009274:	2300      	movs	r3, #0
 8009276:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009278:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800927c:	2200      	movs	r2, #0
 800927e:	4619      	mov	r1, r3
 8009280:	4814      	ldr	r0, [pc, #80]	; (80092d4 <MX_TIM15_Init+0x140>)
 8009282:	f007 f885 	bl	8010390 <HAL_TIM_PWM_ConfigChannel>
 8009286:	4603      	mov	r3, r0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 800928c:	f7ff fa1b 	bl	80086c6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009290:	2300      	movs	r3, #0
 8009292:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009294:	2300      	movs	r3, #0
 8009296:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009298:	2300      	movs	r3, #0
 800929a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800929c:	2300      	movs	r3, #0
 800929e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80092a0:	2300      	movs	r3, #0
 80092a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80092a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80092a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80092ae:	2300      	movs	r3, #0
 80092b0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80092b2:	1d3b      	adds	r3, r7, #4
 80092b4:	4619      	mov	r1, r3
 80092b6:	4807      	ldr	r0, [pc, #28]	; (80092d4 <MX_TIM15_Init+0x140>)
 80092b8:	f007 ff52 	bl	8011160 <HAL_TIMEx_ConfigBreakDeadTime>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d001      	beq.n	80092c6 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 80092c2:	f7ff fa00 	bl	80086c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80092c6:	4803      	ldr	r0, [pc, #12]	; (80092d4 <MX_TIM15_Init+0x140>)
 80092c8:	f000 fae0 	bl	800988c <HAL_TIM_MspPostInit>

}
 80092cc:	bf00      	nop
 80092ce:	3770      	adds	r7, #112	; 0x70
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	24000e90 	.word	0x24000e90
 80092d8:	40014000 	.word	0x40014000

080092dc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b094      	sub	sp, #80	; 0x50
 80092e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80092e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80092e6:	2200      	movs	r2, #0
 80092e8:	601a      	str	r2, [r3, #0]
 80092ea:	605a      	str	r2, [r3, #4]
 80092ec:	609a      	str	r2, [r3, #8]
 80092ee:	60da      	str	r2, [r3, #12]
 80092f0:	611a      	str	r2, [r3, #16]
 80092f2:	615a      	str	r2, [r3, #20]
 80092f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80092f6:	463b      	mov	r3, r7
 80092f8:	2234      	movs	r2, #52	; 0x34
 80092fa:	2100      	movs	r1, #0
 80092fc:	4618      	mov	r0, r3
 80092fe:	f00a ff79 	bl	80141f4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8009302:	4b31      	ldr	r3, [pc, #196]	; (80093c8 <MX_TIM16_Init+0xec>)
 8009304:	4a31      	ldr	r2, [pc, #196]	; (80093cc <MX_TIM16_Init+0xf0>)
 8009306:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 8009308:	4b2f      	ldr	r3, [pc, #188]	; (80093c8 <MX_TIM16_Init+0xec>)
 800930a:	f240 2225 	movw	r2, #549	; 0x225
 800930e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009310:	4b2d      	ldr	r3, [pc, #180]	; (80093c8 <MX_TIM16_Init+0xec>)
 8009312:	2200      	movs	r2, #0
 8009314:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1-1;
 8009316:	4b2c      	ldr	r3, [pc, #176]	; (80093c8 <MX_TIM16_Init+0xec>)
 8009318:	2200      	movs	r2, #0
 800931a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800931c:	4b2a      	ldr	r3, [pc, #168]	; (80093c8 <MX_TIM16_Init+0xec>)
 800931e:	2200      	movs	r2, #0
 8009320:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8009322:	4b29      	ldr	r3, [pc, #164]	; (80093c8 <MX_TIM16_Init+0xec>)
 8009324:	2200      	movs	r2, #0
 8009326:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009328:	4b27      	ldr	r3, [pc, #156]	; (80093c8 <MX_TIM16_Init+0xec>)
 800932a:	2280      	movs	r2, #128	; 0x80
 800932c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800932e:	4826      	ldr	r0, [pc, #152]	; (80093c8 <MX_TIM16_Init+0xec>)
 8009330:	f006 fe59 	bl	800ffe6 <HAL_TIM_Base_Init>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d001      	beq.n	800933e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800933a:	f7ff f9c4 	bl	80086c6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800933e:	4822      	ldr	r0, [pc, #136]	; (80093c8 <MX_TIM16_Init+0xec>)
 8009340:	f006 fea8 	bl	8010094 <HAL_TIM_PWM_Init>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d001      	beq.n	800934e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800934a:	f7ff f9bc 	bl	80086c6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800934e:	2360      	movs	r3, #96	; 0x60
 8009350:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8009352:	f240 13f3 	movw	r3, #499	; 0x1f3
 8009356:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009358:	2300      	movs	r3, #0
 800935a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800935c:	2300      	movs	r3, #0
 800935e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009360:	2300      	movs	r3, #0
 8009362:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009364:	2300      	movs	r3, #0
 8009366:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009368:	2300      	movs	r3, #0
 800936a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800936c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009370:	2200      	movs	r2, #0
 8009372:	4619      	mov	r1, r3
 8009374:	4814      	ldr	r0, [pc, #80]	; (80093c8 <MX_TIM16_Init+0xec>)
 8009376:	f007 f80b 	bl	8010390 <HAL_TIM_PWM_ConfigChannel>
 800937a:	4603      	mov	r3, r0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d001      	beq.n	8009384 <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8009380:	f7ff f9a1 	bl	80086c6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009384:	2300      	movs	r3, #0
 8009386:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009388:	2300      	movs	r3, #0
 800938a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800938c:	2300      	movs	r3, #0
 800938e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009390:	2300      	movs	r3, #0
 8009392:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009394:	2300      	movs	r3, #0
 8009396:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800939c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800939e:	2300      	movs	r3, #0
 80093a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80093a2:	2300      	movs	r3, #0
 80093a4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80093a6:	463b      	mov	r3, r7
 80093a8:	4619      	mov	r1, r3
 80093aa:	4807      	ldr	r0, [pc, #28]	; (80093c8 <MX_TIM16_Init+0xec>)
 80093ac:	f007 fed8 	bl	8011160 <HAL_TIMEx_ConfigBreakDeadTime>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d001      	beq.n	80093ba <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 80093b6:	f7ff f986 	bl	80086c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80093ba:	4803      	ldr	r0, [pc, #12]	; (80093c8 <MX_TIM16_Init+0xec>)
 80093bc:	f000 fa66 	bl	800988c <HAL_TIM_MspPostInit>

}
 80093c0:	bf00      	nop
 80093c2:	3750      	adds	r7, #80	; 0x50
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	2400113c 	.word	0x2400113c
 80093cc:	40014400 	.word	0x40014400

080093d0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b094      	sub	sp, #80	; 0x50
 80093d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80093d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80093da:	2200      	movs	r2, #0
 80093dc:	601a      	str	r2, [r3, #0]
 80093de:	605a      	str	r2, [r3, #4]
 80093e0:	609a      	str	r2, [r3, #8]
 80093e2:	60da      	str	r2, [r3, #12]
 80093e4:	611a      	str	r2, [r3, #16]
 80093e6:	615a      	str	r2, [r3, #20]
 80093e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80093ea:	463b      	mov	r3, r7
 80093ec:	2234      	movs	r2, #52	; 0x34
 80093ee:	2100      	movs	r1, #0
 80093f0:	4618      	mov	r0, r3
 80093f2:	f00a feff 	bl	80141f4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80093f6:	4b32      	ldr	r3, [pc, #200]	; (80094c0 <MX_TIM17_Init+0xf0>)
 80093f8:	4a32      	ldr	r2, [pc, #200]	; (80094c4 <MX_TIM17_Init+0xf4>)
 80093fa:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 5500-1;
 80093fc:	4b30      	ldr	r3, [pc, #192]	; (80094c0 <MX_TIM17_Init+0xf0>)
 80093fe:	f241 527b 	movw	r2, #5499	; 0x157b
 8009402:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009404:	4b2e      	ldr	r3, [pc, #184]	; (80094c0 <MX_TIM17_Init+0xf0>)
 8009406:	2200      	movs	r2, #0
 8009408:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 800940a:	4b2d      	ldr	r3, [pc, #180]	; (80094c0 <MX_TIM17_Init+0xf0>)
 800940c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009410:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009412:	4b2b      	ldr	r3, [pc, #172]	; (80094c0 <MX_TIM17_Init+0xf0>)
 8009414:	2200      	movs	r2, #0
 8009416:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8009418:	4b29      	ldr	r3, [pc, #164]	; (80094c0 <MX_TIM17_Init+0xf0>)
 800941a:	2200      	movs	r2, #0
 800941c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800941e:	4b28      	ldr	r3, [pc, #160]	; (80094c0 <MX_TIM17_Init+0xf0>)
 8009420:	2280      	movs	r2, #128	; 0x80
 8009422:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8009424:	4826      	ldr	r0, [pc, #152]	; (80094c0 <MX_TIM17_Init+0xf0>)
 8009426:	f006 fdde 	bl	800ffe6 <HAL_TIM_Base_Init>
 800942a:	4603      	mov	r3, r0
 800942c:	2b00      	cmp	r3, #0
 800942e:	d001      	beq.n	8009434 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8009430:	f7ff f949 	bl	80086c6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8009434:	4822      	ldr	r0, [pc, #136]	; (80094c0 <MX_TIM17_Init+0xf0>)
 8009436:	f006 fe2d 	bl	8010094 <HAL_TIM_PWM_Init>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d001      	beq.n	8009444 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8009440:	f7ff f941 	bl	80086c6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009444:	2360      	movs	r3, #96	; 0x60
 8009446:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8009448:	f240 13f3 	movw	r3, #499	; 0x1f3
 800944c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800944e:	2300      	movs	r3, #0
 8009450:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009452:	2300      	movs	r3, #0
 8009454:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009456:	2300      	movs	r3, #0
 8009458:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800945a:	2300      	movs	r3, #0
 800945c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800945e:	2300      	movs	r3, #0
 8009460:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009462:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009466:	2200      	movs	r2, #0
 8009468:	4619      	mov	r1, r3
 800946a:	4815      	ldr	r0, [pc, #84]	; (80094c0 <MX_TIM17_Init+0xf0>)
 800946c:	f006 ff90 	bl	8010390 <HAL_TIM_PWM_ConfigChannel>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d001      	beq.n	800947a <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 8009476:	f7ff f926 	bl	80086c6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800947a:	2300      	movs	r3, #0
 800947c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800947e:	2300      	movs	r3, #0
 8009480:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009482:	2300      	movs	r3, #0
 8009484:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009486:	2300      	movs	r3, #0
 8009488:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800948a:	2300      	movs	r3, #0
 800948c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800948e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009492:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009494:	2300      	movs	r3, #0
 8009496:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009498:	2300      	movs	r3, #0
 800949a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800949c:	463b      	mov	r3, r7
 800949e:	4619      	mov	r1, r3
 80094a0:	4807      	ldr	r0, [pc, #28]	; (80094c0 <MX_TIM17_Init+0xf0>)
 80094a2:	f007 fe5d 	bl	8011160 <HAL_TIMEx_ConfigBreakDeadTime>
 80094a6:	4603      	mov	r3, r0
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d001      	beq.n	80094b0 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 80094ac:	f7ff f90b 	bl	80086c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80094b0:	4803      	ldr	r0, [pc, #12]	; (80094c0 <MX_TIM17_Init+0xf0>)
 80094b2:	f000 f9eb 	bl	800988c <HAL_TIM_MspPostInit>

}
 80094b6:	bf00      	nop
 80094b8:	3750      	adds	r7, #80	; 0x50
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	24000edc 	.word	0x24000edc
 80094c4:	40014800 	.word	0x40014800

080094c8 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b088      	sub	sp, #32
 80094cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80094ce:	f107 0310 	add.w	r3, r7, #16
 80094d2:	2200      	movs	r2, #0
 80094d4:	601a      	str	r2, [r3, #0]
 80094d6:	605a      	str	r2, [r3, #4]
 80094d8:	609a      	str	r2, [r3, #8]
 80094da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80094dc:	1d3b      	adds	r3, r7, #4
 80094de:	2200      	movs	r2, #0
 80094e0:	601a      	str	r2, [r3, #0]
 80094e2:	605a      	str	r2, [r3, #4]
 80094e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80094e6:	4b1e      	ldr	r3, [pc, #120]	; (8009560 <MX_TIM23_Init+0x98>)
 80094e8:	4a1e      	ldr	r2, [pc, #120]	; (8009564 <MX_TIM23_Init+0x9c>)
 80094ea:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 80094ec:	4b1c      	ldr	r3, [pc, #112]	; (8009560 <MX_TIM23_Init+0x98>)
 80094ee:	f44f 7289 	mov.w	r2, #274	; 0x112
 80094f2:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094f4:	4b1a      	ldr	r3, [pc, #104]	; (8009560 <MX_TIM23_Init+0x98>)
 80094f6:	2200      	movs	r2, #0
 80094f8:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 80094fa:	4b19      	ldr	r3, [pc, #100]	; (8009560 <MX_TIM23_Init+0x98>)
 80094fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009500:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009502:	4b17      	ldr	r3, [pc, #92]	; (8009560 <MX_TIM23_Init+0x98>)
 8009504:	2200      	movs	r2, #0
 8009506:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009508:	4b15      	ldr	r3, [pc, #84]	; (8009560 <MX_TIM23_Init+0x98>)
 800950a:	2200      	movs	r2, #0
 800950c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 800950e:	4814      	ldr	r0, [pc, #80]	; (8009560 <MX_TIM23_Init+0x98>)
 8009510:	f006 fd69 	bl	800ffe6 <HAL_TIM_Base_Init>
 8009514:	4603      	mov	r3, r0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d001      	beq.n	800951e <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 800951a:	f7ff f8d4 	bl	80086c6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800951e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009522:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8009524:	f107 0310 	add.w	r3, r7, #16
 8009528:	4619      	mov	r1, r3
 800952a:	480d      	ldr	r0, [pc, #52]	; (8009560 <MX_TIM23_Init+0x98>)
 800952c:	f007 f844 	bl	80105b8 <HAL_TIM_ConfigClockSource>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8009536:	f7ff f8c6 	bl	80086c6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800953a:	2300      	movs	r3, #0
 800953c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800953e:	2300      	movs	r3, #0
 8009540:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8009542:	1d3b      	adds	r3, r7, #4
 8009544:	4619      	mov	r1, r3
 8009546:	4806      	ldr	r0, [pc, #24]	; (8009560 <MX_TIM23_Init+0x98>)
 8009548:	f007 fd6e 	bl	8011028 <HAL_TIMEx_MasterConfigSynchronization>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d001      	beq.n	8009556 <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8009552:	f7ff f8b8 	bl	80086c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8009556:	bf00      	nop
 8009558:	3720      	adds	r7, #32
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	24001058 	.word	0x24001058
 8009564:	4000e000 	.word	0x4000e000

08009568 <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b088      	sub	sp, #32
 800956c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800956e:	f107 0310 	add.w	r3, r7, #16
 8009572:	2200      	movs	r2, #0
 8009574:	601a      	str	r2, [r3, #0]
 8009576:	605a      	str	r2, [r3, #4]
 8009578:	609a      	str	r2, [r3, #8]
 800957a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800957c:	1d3b      	adds	r3, r7, #4
 800957e:	2200      	movs	r2, #0
 8009580:	601a      	str	r2, [r3, #0]
 8009582:	605a      	str	r2, [r3, #4]
 8009584:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8009586:	4b1d      	ldr	r3, [pc, #116]	; (80095fc <MX_TIM24_Init+0x94>)
 8009588:	4a1d      	ldr	r2, [pc, #116]	; (8009600 <MX_TIM24_Init+0x98>)
 800958a:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 800958c:	4b1b      	ldr	r3, [pc, #108]	; (80095fc <MX_TIM24_Init+0x94>)
 800958e:	2200      	movs	r2, #0
 8009590:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009592:	4b1a      	ldr	r3, [pc, #104]	; (80095fc <MX_TIM24_Init+0x94>)
 8009594:	2200      	movs	r2, #0
 8009596:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8009598:	4b18      	ldr	r3, [pc, #96]	; (80095fc <MX_TIM24_Init+0x94>)
 800959a:	f04f 32ff 	mov.w	r2, #4294967295
 800959e:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80095a0:	4b16      	ldr	r3, [pc, #88]	; (80095fc <MX_TIM24_Init+0x94>)
 80095a2:	2200      	movs	r2, #0
 80095a4:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80095a6:	4b15      	ldr	r3, [pc, #84]	; (80095fc <MX_TIM24_Init+0x94>)
 80095a8:	2200      	movs	r2, #0
 80095aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 80095ac:	4813      	ldr	r0, [pc, #76]	; (80095fc <MX_TIM24_Init+0x94>)
 80095ae:	f006 fd1a 	bl	800ffe6 <HAL_TIM_Base_Init>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d001      	beq.n	80095bc <MX_TIM24_Init+0x54>
  {
    Error_Handler();
 80095b8:	f7ff f885 	bl	80086c6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80095bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 80095c2:	f107 0310 	add.w	r3, r7, #16
 80095c6:	4619      	mov	r1, r3
 80095c8:	480c      	ldr	r0, [pc, #48]	; (80095fc <MX_TIM24_Init+0x94>)
 80095ca:	f006 fff5 	bl	80105b8 <HAL_TIM_ConfigClockSource>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <MX_TIM24_Init+0x70>
  {
    Error_Handler();
 80095d4:	f7ff f877 	bl	80086c6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80095d8:	2300      	movs	r3, #0
 80095da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80095dc:	2300      	movs	r3, #0
 80095de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 80095e0:	1d3b      	adds	r3, r7, #4
 80095e2:	4619      	mov	r1, r3
 80095e4:	4805      	ldr	r0, [pc, #20]	; (80095fc <MX_TIM24_Init+0x94>)
 80095e6:	f007 fd1f 	bl	8011028 <HAL_TIMEx_MasterConfigSynchronization>
 80095ea:	4603      	mov	r3, r0
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d001      	beq.n	80095f4 <MX_TIM24_Init+0x8c>
  {
    Error_Handler();
 80095f0:	f7ff f869 	bl	80086c6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 80095f4:	bf00      	nop
 80095f6:	3720      	adds	r7, #32
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	24000df8 	.word	0x24000df8
 8009600:	4000e400 	.word	0x4000e400

08009604 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b094      	sub	sp, #80	; 0x50
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800960c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009610:	2200      	movs	r2, #0
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	605a      	str	r2, [r3, #4]
 8009616:	609a      	str	r2, [r3, #8]
 8009618:	60da      	str	r2, [r3, #12]
 800961a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a8d      	ldr	r2, [pc, #564]	; (8009858 <HAL_TIM_Base_MspInit+0x254>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d10f      	bne.n	8009646 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009626:	4b8d      	ldr	r3, [pc, #564]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 8009628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800962c:	4a8b      	ldr	r2, [pc, #556]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 800962e:	f043 0301 	orr.w	r3, r3, #1
 8009632:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8009636:	4b89      	ldr	r3, [pc, #548]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 8009638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	63bb      	str	r3, [r7, #56]	; 0x38
 8009642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_TIM24_CLK_ENABLE();
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 8009644:	e104      	b.n	8009850 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM2)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800964e:	d10f      	bne.n	8009670 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009650:	4b82      	ldr	r3, [pc, #520]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 8009652:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009656:	4a81      	ldr	r2, [pc, #516]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 8009658:	f043 0301 	orr.w	r3, r3, #1
 800965c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009660:	4b7e      	ldr	r3, [pc, #504]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 8009662:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009666:	f003 0301 	and.w	r3, r3, #1
 800966a:	637b      	str	r3, [r7, #52]	; 0x34
 800966c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800966e:	e0ef      	b.n	8009850 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM3)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	4a7a      	ldr	r2, [pc, #488]	; (8009860 <HAL_TIM_Base_MspInit+0x25c>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d10f      	bne.n	800969a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800967a:	4b78      	ldr	r3, [pc, #480]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 800967c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009680:	4a76      	ldr	r2, [pc, #472]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 8009682:	f043 0302 	orr.w	r3, r3, #2
 8009686:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800968a:	4b74      	ldr	r3, [pc, #464]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 800968c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009690:	f003 0302 	and.w	r3, r3, #2
 8009694:	633b      	str	r3, [r7, #48]	; 0x30
 8009696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8009698:	e0da      	b.n	8009850 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM4)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a71      	ldr	r2, [pc, #452]	; (8009864 <HAL_TIM_Base_MspInit+0x260>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d10f      	bne.n	80096c4 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80096a4:	4b6d      	ldr	r3, [pc, #436]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 80096a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80096aa:	4a6c      	ldr	r2, [pc, #432]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 80096ac:	f043 0304 	orr.w	r3, r3, #4
 80096b0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80096b4:	4b69      	ldr	r3, [pc, #420]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 80096b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80096ba:	f003 0304 	and.w	r3, r3, #4
 80096be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80096c2:	e0c5      	b.n	8009850 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM12)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a67      	ldr	r2, [pc, #412]	; (8009868 <HAL_TIM_Base_MspInit+0x264>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d10f      	bne.n	80096ee <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80096ce:	4b63      	ldr	r3, [pc, #396]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 80096d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80096d4:	4a61      	ldr	r2, [pc, #388]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 80096d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80096de:	4b5f      	ldr	r3, [pc, #380]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 80096e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80096e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80096ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80096ec:	e0b0      	b.n	8009850 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM13)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a5e      	ldr	r2, [pc, #376]	; (800986c <HAL_TIM_Base_MspInit+0x268>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d10f      	bne.n	8009718 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80096f8:	4b58      	ldr	r3, [pc, #352]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 80096fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80096fe:	4a57      	ldr	r2, [pc, #348]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 8009700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009704:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009708:	4b54      	ldr	r3, [pc, #336]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 800970a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800970e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009712:	627b      	str	r3, [r7, #36]	; 0x24
 8009714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009716:	e09b      	b.n	8009850 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM14)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a54      	ldr	r2, [pc, #336]	; (8009870 <HAL_TIM_Base_MspInit+0x26c>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d10f      	bne.n	8009742 <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8009722:	4b4e      	ldr	r3, [pc, #312]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 8009724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009728:	4a4c      	ldr	r2, [pc, #304]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 800972a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800972e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009732:	4b4a      	ldr	r3, [pc, #296]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 8009734:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800973c:	623b      	str	r3, [r7, #32]
 800973e:	6a3b      	ldr	r3, [r7, #32]
}
 8009740:	e086      	b.n	8009850 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM15)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4a4b      	ldr	r2, [pc, #300]	; (8009874 <HAL_TIM_Base_MspInit+0x270>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d12e      	bne.n	80097aa <HAL_TIM_Base_MspInit+0x1a6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800974c:	4b43      	ldr	r3, [pc, #268]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 800974e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009752:	4a42      	ldr	r2, [pc, #264]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 8009754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009758:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800975c:	4b3f      	ldr	r3, [pc, #252]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 800975e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009766:	61fb      	str	r3, [r7, #28]
 8009768:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800976a:	4b3c      	ldr	r3, [pc, #240]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 800976c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009770:	4a3a      	ldr	r2, [pc, #232]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 8009772:	f043 0301 	orr.w	r3, r3, #1
 8009776:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800977a:	4b38      	ldr	r3, [pc, #224]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 800977c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009780:	f003 0301 	and.w	r3, r3, #1
 8009784:	61bb      	str	r3, [r7, #24]
 8009786:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009788:	2308      	movs	r3, #8
 800978a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800978c:	2302      	movs	r3, #2
 800978e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009790:	2300      	movs	r3, #0
 8009792:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009794:	2300      	movs	r3, #0
 8009796:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8009798:	2304      	movs	r3, #4
 800979a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800979c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80097a0:	4619      	mov	r1, r3
 80097a2:	4835      	ldr	r0, [pc, #212]	; (8009878 <HAL_TIM_Base_MspInit+0x274>)
 80097a4:	f003 f90c 	bl	800c9c0 <HAL_GPIO_Init>
}
 80097a8:	e052      	b.n	8009850 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM16)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a33      	ldr	r2, [pc, #204]	; (800987c <HAL_TIM_Base_MspInit+0x278>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d10f      	bne.n	80097d4 <HAL_TIM_Base_MspInit+0x1d0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80097b4:	4b29      	ldr	r3, [pc, #164]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 80097b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80097ba:	4a28      	ldr	r2, [pc, #160]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 80097bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80097c4:	4b25      	ldr	r3, [pc, #148]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 80097c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80097ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097ce:	617b      	str	r3, [r7, #20]
 80097d0:	697b      	ldr	r3, [r7, #20]
}
 80097d2:	e03d      	b.n	8009850 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM17)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a29      	ldr	r2, [pc, #164]	; (8009880 <HAL_TIM_Base_MspInit+0x27c>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d10f      	bne.n	80097fe <HAL_TIM_Base_MspInit+0x1fa>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80097de:	4b1f      	ldr	r3, [pc, #124]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 80097e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80097e4:	4a1d      	ldr	r2, [pc, #116]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 80097e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80097ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80097ee:	4b1b      	ldr	r3, [pc, #108]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 80097f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80097f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097f8:	613b      	str	r3, [r7, #16]
 80097fa:	693b      	ldr	r3, [r7, #16]
}
 80097fc:	e028      	b.n	8009850 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM23)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a20      	ldr	r2, [pc, #128]	; (8009884 <HAL_TIM_Base_MspInit+0x280>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d10f      	bne.n	8009828 <HAL_TIM_Base_MspInit+0x224>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8009808:	4b14      	ldr	r3, [pc, #80]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 800980a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800980e:	4a13      	ldr	r2, [pc, #76]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 8009810:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009814:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8009818:	4b10      	ldr	r3, [pc, #64]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 800981a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800981e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009822:	60fb      	str	r3, [r7, #12]
 8009824:	68fb      	ldr	r3, [r7, #12]
}
 8009826:	e013      	b.n	8009850 <HAL_TIM_Base_MspInit+0x24c>
  else if(tim_baseHandle->Instance==TIM24)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a16      	ldr	r2, [pc, #88]	; (8009888 <HAL_TIM_Base_MspInit+0x284>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d10e      	bne.n	8009850 <HAL_TIM_Base_MspInit+0x24c>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8009832:	4b0a      	ldr	r3, [pc, #40]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 8009834:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009838:	4a08      	ldr	r2, [pc, #32]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 800983a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800983e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8009842:	4b06      	ldr	r3, [pc, #24]	; (800985c <HAL_TIM_Base_MspInit+0x258>)
 8009844:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800984c:	60bb      	str	r3, [r7, #8]
 800984e:	68bb      	ldr	r3, [r7, #8]
}
 8009850:	bf00      	nop
 8009852:	3750      	adds	r7, #80	; 0x50
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	40010000 	.word	0x40010000
 800985c:	58024400 	.word	0x58024400
 8009860:	40000400 	.word	0x40000400
 8009864:	40000800 	.word	0x40000800
 8009868:	40001800 	.word	0x40001800
 800986c:	40001c00 	.word	0x40001c00
 8009870:	40002000 	.word	0x40002000
 8009874:	40014000 	.word	0x40014000
 8009878:	58020000 	.word	0x58020000
 800987c:	40014400 	.word	0x40014400
 8009880:	40014800 	.word	0x40014800
 8009884:	4000e000 	.word	0x4000e000
 8009888:	4000e400 	.word	0x4000e400

0800988c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b090      	sub	sp, #64	; 0x40
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009894:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009898:	2200      	movs	r2, #0
 800989a:	601a      	str	r2, [r3, #0]
 800989c:	605a      	str	r2, [r3, #4]
 800989e:	609a      	str	r2, [r3, #8]
 80098a0:	60da      	str	r2, [r3, #12]
 80098a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4aa9      	ldr	r2, [pc, #676]	; (8009b50 <HAL_TIM_MspPostInit+0x2c4>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d120      	bne.n	80098f0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80098ae:	4ba9      	ldr	r3, [pc, #676]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 80098b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098b4:	4aa7      	ldr	r2, [pc, #668]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 80098b6:	f043 0310 	orr.w	r3, r3, #16
 80098ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80098be:	4ba5      	ldr	r3, [pc, #660]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 80098c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80098c4:	f003 0310 	and.w	r3, r3, #16
 80098c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80098ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80098cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098d2:	2302      	movs	r3, #2
 80098d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098d6:	2300      	movs	r3, #0
 80098d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098da:	2300      	movs	r3, #0
 80098dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80098de:	2301      	movs	r3, #1
 80098e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80098e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80098e6:	4619      	mov	r1, r3
 80098e8:	489b      	ldr	r0, [pc, #620]	; (8009b58 <HAL_TIM_MspPostInit+0x2cc>)
 80098ea:	f003 f869 	bl	800c9c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80098ee:	e12a      	b.n	8009b46 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM2)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098f8:	d11f      	bne.n	800993a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098fa:	4b96      	ldr	r3, [pc, #600]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 80098fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009900:	4a94      	ldr	r2, [pc, #592]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 8009902:	f043 0301 	orr.w	r3, r3, #1
 8009906:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800990a:	4b92      	ldr	r3, [pc, #584]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 800990c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009910:	f003 0301 	and.w	r3, r3, #1
 8009914:	627b      	str	r3, [r7, #36]	; 0x24
 8009916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8009918:	2301      	movs	r3, #1
 800991a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800991c:	2302      	movs	r3, #2
 800991e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009920:	2300      	movs	r3, #0
 8009922:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009924:	2300      	movs	r3, #0
 8009926:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009928:	2301      	movs	r3, #1
 800992a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800992c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009930:	4619      	mov	r1, r3
 8009932:	488a      	ldr	r0, [pc, #552]	; (8009b5c <HAL_TIM_MspPostInit+0x2d0>)
 8009934:	f003 f844 	bl	800c9c0 <HAL_GPIO_Init>
}
 8009938:	e105      	b.n	8009b46 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM3)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a88      	ldr	r2, [pc, #544]	; (8009b60 <HAL_TIM_MspPostInit+0x2d4>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d11f      	bne.n	8009984 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009944:	4b83      	ldr	r3, [pc, #524]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 8009946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800994a:	4a82      	ldr	r2, [pc, #520]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 800994c:	f043 0304 	orr.w	r3, r3, #4
 8009950:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009954:	4b7f      	ldr	r3, [pc, #508]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 8009956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800995a:	f003 0304 	and.w	r3, r3, #4
 800995e:	623b      	str	r3, [r7, #32]
 8009960:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009962:	2340      	movs	r3, #64	; 0x40
 8009964:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009966:	2302      	movs	r3, #2
 8009968:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800996a:	2300      	movs	r3, #0
 800996c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800996e:	2300      	movs	r3, #0
 8009970:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009972:	2302      	movs	r3, #2
 8009974:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009976:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800997a:	4619      	mov	r1, r3
 800997c:	4879      	ldr	r0, [pc, #484]	; (8009b64 <HAL_TIM_MspPostInit+0x2d8>)
 800997e:	f003 f81f 	bl	800c9c0 <HAL_GPIO_Init>
}
 8009982:	e0e0      	b.n	8009b46 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM4)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a77      	ldr	r2, [pc, #476]	; (8009b68 <HAL_TIM_MspPostInit+0x2dc>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d120      	bne.n	80099d0 <HAL_TIM_MspPostInit+0x144>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800998e:	4b71      	ldr	r3, [pc, #452]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 8009990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009994:	4a6f      	ldr	r2, [pc, #444]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 8009996:	f043 0308 	orr.w	r3, r3, #8
 800999a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800999e:	4b6d      	ldr	r3, [pc, #436]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 80099a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80099a4:	f003 0308 	and.w	r3, r3, #8
 80099a8:	61fb      	str	r3, [r7, #28]
 80099aa:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80099ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099b2:	2302      	movs	r3, #2
 80099b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099b6:	2300      	movs	r3, #0
 80099b8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099ba:	2300      	movs	r3, #0
 80099bc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80099be:	2302      	movs	r3, #2
 80099c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80099c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80099c6:	4619      	mov	r1, r3
 80099c8:	4868      	ldr	r0, [pc, #416]	; (8009b6c <HAL_TIM_MspPostInit+0x2e0>)
 80099ca:	f002 fff9 	bl	800c9c0 <HAL_GPIO_Init>
}
 80099ce:	e0ba      	b.n	8009b46 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM12)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a66      	ldr	r2, [pc, #408]	; (8009b70 <HAL_TIM_MspPostInit+0x2e4>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d120      	bne.n	8009a1c <HAL_TIM_MspPostInit+0x190>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80099da:	4b5e      	ldr	r3, [pc, #376]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 80099dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80099e0:	4a5c      	ldr	r2, [pc, #368]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 80099e2:	f043 0302 	orr.w	r3, r3, #2
 80099e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80099ea:	4b5a      	ldr	r3, [pc, #360]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 80099ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80099f0:	f003 0302 	and.w	r3, r3, #2
 80099f4:	61bb      	str	r3, [r7, #24]
 80099f6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80099f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80099fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099fe:	2302      	movs	r3, #2
 8009a00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a02:	2300      	movs	r3, #0
 8009a04:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a06:	2300      	movs	r3, #0
 8009a08:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8009a0a:	2302      	movs	r3, #2
 8009a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a12:	4619      	mov	r1, r3
 8009a14:	4857      	ldr	r0, [pc, #348]	; (8009b74 <HAL_TIM_MspPostInit+0x2e8>)
 8009a16:	f002 ffd3 	bl	800c9c0 <HAL_GPIO_Init>
}
 8009a1a:	e094      	b.n	8009b46 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM14)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a55      	ldr	r2, [pc, #340]	; (8009b78 <HAL_TIM_MspPostInit+0x2ec>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d11f      	bne.n	8009a66 <HAL_TIM_MspPostInit+0x1da>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a26:	4b4b      	ldr	r3, [pc, #300]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 8009a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a2c:	4a49      	ldr	r2, [pc, #292]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 8009a2e:	f043 0301 	orr.w	r3, r3, #1
 8009a32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009a36:	4b47      	ldr	r3, [pc, #284]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 8009a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a3c:	f003 0301 	and.w	r3, r3, #1
 8009a40:	617b      	str	r3, [r7, #20]
 8009a42:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8009a44:	2380      	movs	r3, #128	; 0x80
 8009a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a48:	2302      	movs	r3, #2
 8009a4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a50:	2300      	movs	r3, #0
 8009a52:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8009a54:	2309      	movs	r3, #9
 8009a56:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	483f      	ldr	r0, [pc, #252]	; (8009b5c <HAL_TIM_MspPostInit+0x2d0>)
 8009a60:	f002 ffae 	bl	800c9c0 <HAL_GPIO_Init>
}
 8009a64:	e06f      	b.n	8009b46 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM15)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a44      	ldr	r2, [pc, #272]	; (8009b7c <HAL_TIM_MspPostInit+0x2f0>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d11f      	bne.n	8009ab0 <HAL_TIM_MspPostInit+0x224>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009a70:	4b38      	ldr	r3, [pc, #224]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 8009a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a76:	4a37      	ldr	r2, [pc, #220]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 8009a78:	f043 0310 	orr.w	r3, r3, #16
 8009a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009a80:	4b34      	ldr	r3, [pc, #208]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 8009a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a86:	f003 0310 	and.w	r3, r3, #16
 8009a8a:	613b      	str	r3, [r7, #16]
 8009a8c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8009a8e:	2320      	movs	r3, #32
 8009a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a92:	2302      	movs	r3, #2
 8009a94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a96:	2300      	movs	r3, #0
 8009a98:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8009a9e:	2304      	movs	r3, #4
 8009aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009aa6:	4619      	mov	r1, r3
 8009aa8:	482b      	ldr	r0, [pc, #172]	; (8009b58 <HAL_TIM_MspPostInit+0x2cc>)
 8009aaa:	f002 ff89 	bl	800c9c0 <HAL_GPIO_Init>
}
 8009aae:	e04a      	b.n	8009b46 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM16)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a32      	ldr	r2, [pc, #200]	; (8009b80 <HAL_TIM_MspPostInit+0x2f4>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d120      	bne.n	8009afc <HAL_TIM_MspPostInit+0x270>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009aba:	4b26      	ldr	r3, [pc, #152]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 8009abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ac0:	4a24      	ldr	r2, [pc, #144]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 8009ac2:	f043 0302 	orr.w	r3, r3, #2
 8009ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009aca:	4b22      	ldr	r3, [pc, #136]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 8009acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ad0:	f003 0302 	and.w	r3, r3, #2
 8009ad4:	60fb      	str	r3, [r7, #12]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8009ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009adc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ade:	2302      	movs	r3, #2
 8009ae0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8009aea:	2301      	movs	r3, #1
 8009aec:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009aee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009af2:	4619      	mov	r1, r3
 8009af4:	481f      	ldr	r0, [pc, #124]	; (8009b74 <HAL_TIM_MspPostInit+0x2e8>)
 8009af6:	f002 ff63 	bl	800c9c0 <HAL_GPIO_Init>
}
 8009afa:	e024      	b.n	8009b46 <HAL_TIM_MspPostInit+0x2ba>
  else if(timHandle->Instance==TIM17)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4a20      	ldr	r2, [pc, #128]	; (8009b84 <HAL_TIM_MspPostInit+0x2f8>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d11f      	bne.n	8009b46 <HAL_TIM_MspPostInit+0x2ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b06:	4b13      	ldr	r3, [pc, #76]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 8009b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b0c:	4a11      	ldr	r2, [pc, #68]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 8009b0e:	f043 0302 	orr.w	r3, r3, #2
 8009b12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009b16:	4b0f      	ldr	r3, [pc, #60]	; (8009b54 <HAL_TIM_MspPostInit+0x2c8>)
 8009b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009b1c:	f003 0302 	and.w	r3, r3, #2
 8009b20:	60bb      	str	r3, [r7, #8]
 8009b22:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009b24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b2a:	2302      	movs	r3, #2
 8009b2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b32:	2300      	movs	r3, #0
 8009b34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8009b36:	2301      	movs	r3, #1
 8009b38:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009b3e:	4619      	mov	r1, r3
 8009b40:	480c      	ldr	r0, [pc, #48]	; (8009b74 <HAL_TIM_MspPostInit+0x2e8>)
 8009b42:	f002 ff3d 	bl	800c9c0 <HAL_GPIO_Init>
}
 8009b46:	bf00      	nop
 8009b48:	3740      	adds	r7, #64	; 0x40
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	40010000 	.word	0x40010000
 8009b54:	58024400 	.word	0x58024400
 8009b58:	58021000 	.word	0x58021000
 8009b5c:	58020000 	.word	0x58020000
 8009b60:	40000400 	.word	0x40000400
 8009b64:	58020800 	.word	0x58020800
 8009b68:	40000800 	.word	0x40000800
 8009b6c:	58020c00 	.word	0x58020c00
 8009b70:	40001800 	.word	0x40001800
 8009b74:	58020400 	.word	0x58020400
 8009b78:	40002000 	.word	0x40002000
 8009b7c:	40014000 	.word	0x40014000
 8009b80:	40014400 	.word	0x40014400
 8009b84:	40014800 	.word	0x40014800

08009b88 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8009b8c:	4b22      	ldr	r3, [pc, #136]	; (8009c18 <MX_UART4_Init+0x90>)
 8009b8e:	4a23      	ldr	r2, [pc, #140]	; (8009c1c <MX_UART4_Init+0x94>)
 8009b90:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8009b92:	4b21      	ldr	r3, [pc, #132]	; (8009c18 <MX_UART4_Init+0x90>)
 8009b94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009b98:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8009b9a:	4b1f      	ldr	r3, [pc, #124]	; (8009c18 <MX_UART4_Init+0x90>)
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8009ba0:	4b1d      	ldr	r3, [pc, #116]	; (8009c18 <MX_UART4_Init+0x90>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8009ba6:	4b1c      	ldr	r3, [pc, #112]	; (8009c18 <MX_UART4_Init+0x90>)
 8009ba8:	2200      	movs	r2, #0
 8009baa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8009bac:	4b1a      	ldr	r3, [pc, #104]	; (8009c18 <MX_UART4_Init+0x90>)
 8009bae:	220c      	movs	r2, #12
 8009bb0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009bb2:	4b19      	ldr	r3, [pc, #100]	; (8009c18 <MX_UART4_Init+0x90>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8009bb8:	4b17      	ldr	r3, [pc, #92]	; (8009c18 <MX_UART4_Init+0x90>)
 8009bba:	2200      	movs	r2, #0
 8009bbc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009bbe:	4b16      	ldr	r3, [pc, #88]	; (8009c18 <MX_UART4_Init+0x90>)
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009bc4:	4b14      	ldr	r3, [pc, #80]	; (8009c18 <MX_UART4_Init+0x90>)
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009bca:	4b13      	ldr	r3, [pc, #76]	; (8009c18 <MX_UART4_Init+0x90>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8009bd0:	4811      	ldr	r0, [pc, #68]	; (8009c18 <MX_UART4_Init+0x90>)
 8009bd2:	f007 fb65 	bl	80112a0 <HAL_UART_Init>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d001      	beq.n	8009be0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8009bdc:	f7fe fd73 	bl	80086c6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009be0:	2100      	movs	r1, #0
 8009be2:	480d      	ldr	r0, [pc, #52]	; (8009c18 <MX_UART4_Init+0x90>)
 8009be4:	f00a fa03 	bl	8013fee <HAL_UARTEx_SetTxFifoThreshold>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d001      	beq.n	8009bf2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8009bee:	f7fe fd6a 	bl	80086c6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	4808      	ldr	r0, [pc, #32]	; (8009c18 <MX_UART4_Init+0x90>)
 8009bf6:	f00a fa38 	bl	801406a <HAL_UARTEx_SetRxFifoThreshold>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d001      	beq.n	8009c04 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8009c00:	f7fe fd61 	bl	80086c6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8009c04:	4804      	ldr	r0, [pc, #16]	; (8009c18 <MX_UART4_Init+0x90>)
 8009c06:	f00a f9b9 	bl	8013f7c <HAL_UARTEx_DisableFifoMode>
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d001      	beq.n	8009c14 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8009c10:	f7fe fd59 	bl	80086c6 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8009c14:	bf00      	nop
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	240012a8 	.word	0x240012a8
 8009c1c:	40004c00 	.word	0x40004c00

08009c20 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8009c24:	4b22      	ldr	r3, [pc, #136]	; (8009cb0 <MX_UART5_Init+0x90>)
 8009c26:	4a23      	ldr	r2, [pc, #140]	; (8009cb4 <MX_UART5_Init+0x94>)
 8009c28:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8009c2a:	4b21      	ldr	r3, [pc, #132]	; (8009cb0 <MX_UART5_Init+0x90>)
 8009c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009c30:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8009c32:	4b1f      	ldr	r3, [pc, #124]	; (8009cb0 <MX_UART5_Init+0x90>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8009c38:	4b1d      	ldr	r3, [pc, #116]	; (8009cb0 <MX_UART5_Init+0x90>)
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8009c3e:	4b1c      	ldr	r3, [pc, #112]	; (8009cb0 <MX_UART5_Init+0x90>)
 8009c40:	2200      	movs	r2, #0
 8009c42:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8009c44:	4b1a      	ldr	r3, [pc, #104]	; (8009cb0 <MX_UART5_Init+0x90>)
 8009c46:	220c      	movs	r2, #12
 8009c48:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009c4a:	4b19      	ldr	r3, [pc, #100]	; (8009cb0 <MX_UART5_Init+0x90>)
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8009c50:	4b17      	ldr	r3, [pc, #92]	; (8009cb0 <MX_UART5_Init+0x90>)
 8009c52:	2200      	movs	r2, #0
 8009c54:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009c56:	4b16      	ldr	r3, [pc, #88]	; (8009cb0 <MX_UART5_Init+0x90>)
 8009c58:	2200      	movs	r2, #0
 8009c5a:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009c5c:	4b14      	ldr	r3, [pc, #80]	; (8009cb0 <MX_UART5_Init+0x90>)
 8009c5e:	2200      	movs	r2, #0
 8009c60:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009c62:	4b13      	ldr	r3, [pc, #76]	; (8009cb0 <MX_UART5_Init+0x90>)
 8009c64:	2200      	movs	r2, #0
 8009c66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8009c68:	4811      	ldr	r0, [pc, #68]	; (8009cb0 <MX_UART5_Init+0x90>)
 8009c6a:	f007 fb19 	bl	80112a0 <HAL_UART_Init>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8009c74:	f7fe fd27 	bl	80086c6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009c78:	2100      	movs	r1, #0
 8009c7a:	480d      	ldr	r0, [pc, #52]	; (8009cb0 <MX_UART5_Init+0x90>)
 8009c7c:	f00a f9b7 	bl	8013fee <HAL_UARTEx_SetTxFifoThreshold>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d001      	beq.n	8009c8a <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8009c86:	f7fe fd1e 	bl	80086c6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	4808      	ldr	r0, [pc, #32]	; (8009cb0 <MX_UART5_Init+0x90>)
 8009c8e:	f00a f9ec 	bl	801406a <HAL_UARTEx_SetRxFifoThreshold>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d001      	beq.n	8009c9c <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8009c98:	f7fe fd15 	bl	80086c6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8009c9c:	4804      	ldr	r0, [pc, #16]	; (8009cb0 <MX_UART5_Init+0x90>)
 8009c9e:	f00a f96d 	bl	8013f7c <HAL_UARTEx_DisableFifoMode>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d001      	beq.n	8009cac <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8009ca8:	f7fe fd0d 	bl	80086c6 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8009cac:	bf00      	nop
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	24001218 	.word	0x24001218
 8009cb4:	40005000 	.word	0x40005000

08009cb8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009cbc:	4b22      	ldr	r3, [pc, #136]	; (8009d48 <MX_USART2_UART_Init+0x90>)
 8009cbe:	4a23      	ldr	r2, [pc, #140]	; (8009d4c <MX_USART2_UART_Init+0x94>)
 8009cc0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8009cc2:	4b21      	ldr	r3, [pc, #132]	; (8009d48 <MX_USART2_UART_Init+0x90>)
 8009cc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009cc8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009cca:	4b1f      	ldr	r3, [pc, #124]	; (8009d48 <MX_USART2_UART_Init+0x90>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009cd0:	4b1d      	ldr	r3, [pc, #116]	; (8009d48 <MX_USART2_UART_Init+0x90>)
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009cd6:	4b1c      	ldr	r3, [pc, #112]	; (8009d48 <MX_USART2_UART_Init+0x90>)
 8009cd8:	2200      	movs	r2, #0
 8009cda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009cdc:	4b1a      	ldr	r3, [pc, #104]	; (8009d48 <MX_USART2_UART_Init+0x90>)
 8009cde:	220c      	movs	r2, #12
 8009ce0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009ce2:	4b19      	ldr	r3, [pc, #100]	; (8009d48 <MX_USART2_UART_Init+0x90>)
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009ce8:	4b17      	ldr	r3, [pc, #92]	; (8009d48 <MX_USART2_UART_Init+0x90>)
 8009cea:	2200      	movs	r2, #0
 8009cec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009cee:	4b16      	ldr	r3, [pc, #88]	; (8009d48 <MX_USART2_UART_Init+0x90>)
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009cf4:	4b14      	ldr	r3, [pc, #80]	; (8009d48 <MX_USART2_UART_Init+0x90>)
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009cfa:	4b13      	ldr	r3, [pc, #76]	; (8009d48 <MX_USART2_UART_Init+0x90>)
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009d00:	4811      	ldr	r0, [pc, #68]	; (8009d48 <MX_USART2_UART_Init+0x90>)
 8009d02:	f007 facd 	bl	80112a0 <HAL_UART_Init>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d001      	beq.n	8009d10 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8009d0c:	f7fe fcdb 	bl	80086c6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009d10:	2100      	movs	r1, #0
 8009d12:	480d      	ldr	r0, [pc, #52]	; (8009d48 <MX_USART2_UART_Init+0x90>)
 8009d14:	f00a f96b 	bl	8013fee <HAL_UARTEx_SetTxFifoThreshold>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d001      	beq.n	8009d22 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8009d1e:	f7fe fcd2 	bl	80086c6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009d22:	2100      	movs	r1, #0
 8009d24:	4808      	ldr	r0, [pc, #32]	; (8009d48 <MX_USART2_UART_Init+0x90>)
 8009d26:	f00a f9a0 	bl	801406a <HAL_UARTEx_SetRxFifoThreshold>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d001      	beq.n	8009d34 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8009d30:	f7fe fcc9 	bl	80086c6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8009d34:	4804      	ldr	r0, [pc, #16]	; (8009d48 <MX_USART2_UART_Init+0x90>)
 8009d36:	f00a f921 	bl	8013f7c <HAL_UARTEx_DisableFifoMode>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d001      	beq.n	8009d44 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8009d40:	f7fe fcc1 	bl	80086c6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009d44:	bf00      	nop
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	24001338 	.word	0x24001338
 8009d4c:	40004400 	.word	0x40004400

08009d50 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8009d54:	4b22      	ldr	r3, [pc, #136]	; (8009de0 <MX_USART3_UART_Init+0x90>)
 8009d56:	4a23      	ldr	r2, [pc, #140]	; (8009de4 <MX_USART3_UART_Init+0x94>)
 8009d58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8009d5a:	4b21      	ldr	r3, [pc, #132]	; (8009de0 <MX_USART3_UART_Init+0x90>)
 8009d5c:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8009d60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009d62:	4b1f      	ldr	r3, [pc, #124]	; (8009de0 <MX_USART3_UART_Init+0x90>)
 8009d64:	2200      	movs	r2, #0
 8009d66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009d68:	4b1d      	ldr	r3, [pc, #116]	; (8009de0 <MX_USART3_UART_Init+0x90>)
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009d6e:	4b1c      	ldr	r3, [pc, #112]	; (8009de0 <MX_USART3_UART_Init+0x90>)
 8009d70:	2200      	movs	r2, #0
 8009d72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009d74:	4b1a      	ldr	r3, [pc, #104]	; (8009de0 <MX_USART3_UART_Init+0x90>)
 8009d76:	220c      	movs	r2, #12
 8009d78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009d7a:	4b19      	ldr	r3, [pc, #100]	; (8009de0 <MX_USART3_UART_Init+0x90>)
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009d80:	4b17      	ldr	r3, [pc, #92]	; (8009de0 <MX_USART3_UART_Init+0x90>)
 8009d82:	2200      	movs	r2, #0
 8009d84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009d86:	4b16      	ldr	r3, [pc, #88]	; (8009de0 <MX_USART3_UART_Init+0x90>)
 8009d88:	2200      	movs	r2, #0
 8009d8a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009d8c:	4b14      	ldr	r3, [pc, #80]	; (8009de0 <MX_USART3_UART_Init+0x90>)
 8009d8e:	2200      	movs	r2, #0
 8009d90:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009d92:	4b13      	ldr	r3, [pc, #76]	; (8009de0 <MX_USART3_UART_Init+0x90>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009d98:	4811      	ldr	r0, [pc, #68]	; (8009de0 <MX_USART3_UART_Init+0x90>)
 8009d9a:	f007 fa81 	bl	80112a0 <HAL_UART_Init>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d001      	beq.n	8009da8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8009da4:	f7fe fc8f 	bl	80086c6 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009da8:	2100      	movs	r1, #0
 8009daa:	480d      	ldr	r0, [pc, #52]	; (8009de0 <MX_USART3_UART_Init+0x90>)
 8009dac:	f00a f91f 	bl	8013fee <HAL_UARTEx_SetTxFifoThreshold>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d001      	beq.n	8009dba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8009db6:	f7fe fc86 	bl	80086c6 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009dba:	2100      	movs	r1, #0
 8009dbc:	4808      	ldr	r0, [pc, #32]	; (8009de0 <MX_USART3_UART_Init+0x90>)
 8009dbe:	f00a f954 	bl	801406a <HAL_UARTEx_SetRxFifoThreshold>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d001      	beq.n	8009dcc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8009dc8:	f7fe fc7d 	bl	80086c6 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8009dcc:	4804      	ldr	r0, [pc, #16]	; (8009de0 <MX_USART3_UART_Init+0x90>)
 8009dce:	f00a f8d5 	bl	8013f7c <HAL_UARTEx_DisableFifoMode>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d001      	beq.n	8009ddc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8009dd8:	f7fe fc75 	bl	80086c6 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8009ddc:	bf00      	nop
 8009dde:	bd80      	pop	{r7, pc}
 8009de0:	24001188 	.word	0x24001188
 8009de4:	40004800 	.word	0x40004800

08009de8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b0bc      	sub	sp, #240	; 0xf0
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009df0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009df4:	2200      	movs	r2, #0
 8009df6:	601a      	str	r2, [r3, #0]
 8009df8:	605a      	str	r2, [r3, #4]
 8009dfa:	609a      	str	r2, [r3, #8]
 8009dfc:	60da      	str	r2, [r3, #12]
 8009dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009e00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009e04:	22b4      	movs	r2, #180	; 0xb4
 8009e06:	2100      	movs	r1, #0
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f00a f9f3 	bl	80141f4 <memset>
  if(uartHandle->Instance==UART4)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a96      	ldr	r2, [pc, #600]	; (800a06c <HAL_UART_MspInit+0x284>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d143      	bne.n	8009ea0 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8009e18:	2302      	movs	r3, #2
 8009e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009e22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009e26:	4618      	mov	r0, r3
 8009e28:	f003 ff2a 	bl	800dc80 <HAL_RCCEx_PeriphCLKConfig>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8009e32:	f7fe fc48 	bl	80086c6 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8009e36:	4b8e      	ldr	r3, [pc, #568]	; (800a070 <HAL_UART_MspInit+0x288>)
 8009e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009e3c:	4a8c      	ldr	r2, [pc, #560]	; (800a070 <HAL_UART_MspInit+0x288>)
 8009e3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009e46:	4b8a      	ldr	r3, [pc, #552]	; (800a070 <HAL_UART_MspInit+0x288>)
 8009e48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009e4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e50:	627b      	str	r3, [r7, #36]	; 0x24
 8009e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e54:	4b86      	ldr	r3, [pc, #536]	; (800a070 <HAL_UART_MspInit+0x288>)
 8009e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e5a:	4a85      	ldr	r2, [pc, #532]	; (800a070 <HAL_UART_MspInit+0x288>)
 8009e5c:	f043 0301 	orr.w	r3, r3, #1
 8009e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009e64:	4b82      	ldr	r3, [pc, #520]	; (800a070 <HAL_UART_MspInit+0x288>)
 8009e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e6a:	f003 0301 	and.w	r3, r3, #1
 8009e6e:	623b      	str	r3, [r7, #32]
 8009e70:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA11     ------> UART4_RX
    PA12     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009e72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009e76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e7a:	2302      	movs	r3, #2
 8009e7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e80:	2300      	movs	r3, #0
 8009e82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e86:	2300      	movs	r3, #0
 8009e88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8009e8c:	2306      	movs	r3, #6
 8009e8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e92:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009e96:	4619      	mov	r1, r3
 8009e98:	4876      	ldr	r0, [pc, #472]	; (800a074 <HAL_UART_MspInit+0x28c>)
 8009e9a:	f002 fd91 	bl	800c9c0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8009e9e:	e0e0      	b.n	800a062 <HAL_UART_MspInit+0x27a>
  else if(uartHandle->Instance==UART5)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a74      	ldr	r2, [pc, #464]	; (800a078 <HAL_UART_MspInit+0x290>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d143      	bne.n	8009f32 <HAL_UART_MspInit+0x14a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8009eaa:	2302      	movs	r3, #2
 8009eac:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009eb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f003 fee1 	bl	800dc80 <HAL_RCCEx_PeriphCLKConfig>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8009ec4:	f7fe fbff 	bl	80086c6 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8009ec8:	4b69      	ldr	r3, [pc, #420]	; (800a070 <HAL_UART_MspInit+0x288>)
 8009eca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009ece:	4a68      	ldr	r2, [pc, #416]	; (800a070 <HAL_UART_MspInit+0x288>)
 8009ed0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ed4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009ed8:	4b65      	ldr	r3, [pc, #404]	; (800a070 <HAL_UART_MspInit+0x288>)
 8009eda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ee2:	61fb      	str	r3, [r7, #28]
 8009ee4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ee6:	4b62      	ldr	r3, [pc, #392]	; (800a070 <HAL_UART_MspInit+0x288>)
 8009ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009eec:	4a60      	ldr	r2, [pc, #384]	; (800a070 <HAL_UART_MspInit+0x288>)
 8009eee:	f043 0302 	orr.w	r3, r3, #2
 8009ef2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009ef6:	4b5e      	ldr	r3, [pc, #376]	; (800a070 <HAL_UART_MspInit+0x288>)
 8009ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009efc:	f003 0302 	and.w	r3, r3, #2
 8009f00:	61bb      	str	r3, [r7, #24]
 8009f02:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8009f04:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8009f08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f0c:	2302      	movs	r3, #2
 8009f0e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f12:	2300      	movs	r3, #0
 8009f14:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8009f1e:	230e      	movs	r3, #14
 8009f20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009f24:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009f28:	4619      	mov	r1, r3
 8009f2a:	4854      	ldr	r0, [pc, #336]	; (800a07c <HAL_UART_MspInit+0x294>)
 8009f2c:	f002 fd48 	bl	800c9c0 <HAL_GPIO_Init>
}
 8009f30:	e097      	b.n	800a062 <HAL_UART_MspInit+0x27a>
  else if(uartHandle->Instance==USART2)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a52      	ldr	r2, [pc, #328]	; (800a080 <HAL_UART_MspInit+0x298>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d142      	bne.n	8009fc2 <HAL_UART_MspInit+0x1da>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8009f3c:	2302      	movs	r3, #2
 8009f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8009f40:	2300      	movs	r3, #0
 8009f42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009f46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f003 fe98 	bl	800dc80 <HAL_RCCEx_PeriphCLKConfig>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d001      	beq.n	8009f5a <HAL_UART_MspInit+0x172>
      Error_Handler();
 8009f56:	f7fe fbb6 	bl	80086c6 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009f5a:	4b45      	ldr	r3, [pc, #276]	; (800a070 <HAL_UART_MspInit+0x288>)
 8009f5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009f60:	4a43      	ldr	r2, [pc, #268]	; (800a070 <HAL_UART_MspInit+0x288>)
 8009f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009f6a:	4b41      	ldr	r3, [pc, #260]	; (800a070 <HAL_UART_MspInit+0x288>)
 8009f6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f74:	617b      	str	r3, [r7, #20]
 8009f76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009f78:	4b3d      	ldr	r3, [pc, #244]	; (800a070 <HAL_UART_MspInit+0x288>)
 8009f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f7e:	4a3c      	ldr	r2, [pc, #240]	; (800a070 <HAL_UART_MspInit+0x288>)
 8009f80:	f043 0308 	orr.w	r3, r3, #8
 8009f84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009f88:	4b39      	ldr	r3, [pc, #228]	; (800a070 <HAL_UART_MspInit+0x288>)
 8009f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f8e:	f003 0308 	and.w	r3, r3, #8
 8009f92:	613b      	str	r3, [r7, #16]
 8009f94:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8009f96:	2360      	movs	r3, #96	; 0x60
 8009f98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009fae:	2307      	movs	r3, #7
 8009fb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009fb4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8009fb8:	4619      	mov	r1, r3
 8009fba:	4832      	ldr	r0, [pc, #200]	; (800a084 <HAL_UART_MspInit+0x29c>)
 8009fbc:	f002 fd00 	bl	800c9c0 <HAL_GPIO_Init>
}
 8009fc0:	e04f      	b.n	800a062 <HAL_UART_MspInit+0x27a>
  else if(uartHandle->Instance==USART3)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a30      	ldr	r2, [pc, #192]	; (800a088 <HAL_UART_MspInit+0x2a0>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d14a      	bne.n	800a062 <HAL_UART_MspInit+0x27a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8009fcc:	2302      	movs	r3, #2
 8009fce:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009fd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f003 fe50 	bl	800dc80 <HAL_RCCEx_PeriphCLKConfig>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d001      	beq.n	8009fea <HAL_UART_MspInit+0x202>
      Error_Handler();
 8009fe6:	f7fe fb6e 	bl	80086c6 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8009fea:	4b21      	ldr	r3, [pc, #132]	; (800a070 <HAL_UART_MspInit+0x288>)
 8009fec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009ff0:	4a1f      	ldr	r2, [pc, #124]	; (800a070 <HAL_UART_MspInit+0x288>)
 8009ff2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ff6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8009ffa:	4b1d      	ldr	r3, [pc, #116]	; (800a070 <HAL_UART_MspInit+0x288>)
 8009ffc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a000:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a004:	60fb      	str	r3, [r7, #12]
 800a006:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a008:	4b19      	ldr	r3, [pc, #100]	; (800a070 <HAL_UART_MspInit+0x288>)
 800a00a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a00e:	4a18      	ldr	r2, [pc, #96]	; (800a070 <HAL_UART_MspInit+0x288>)
 800a010:	f043 0302 	orr.w	r3, r3, #2
 800a014:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a018:	4b15      	ldr	r3, [pc, #84]	; (800a070 <HAL_UART_MspInit+0x288>)
 800a01a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a01e:	f003 0302 	and.w	r3, r3, #2
 800a022:	60bb      	str	r3, [r7, #8]
 800a024:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a026:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a02a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a02e:	2302      	movs	r3, #2
 800a030:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a034:	2300      	movs	r3, #0
 800a036:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a03a:	2300      	movs	r3, #0
 800a03c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a040:	2307      	movs	r3, #7
 800a042:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a046:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800a04a:	4619      	mov	r1, r3
 800a04c:	480b      	ldr	r0, [pc, #44]	; (800a07c <HAL_UART_MspInit+0x294>)
 800a04e:	f002 fcb7 	bl	800c9c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800a052:	2200      	movs	r2, #0
 800a054:	2100      	movs	r1, #0
 800a056:	2027      	movs	r0, #39	; 0x27
 800a058:	f001 fd1d 	bl	800ba96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800a05c:	2027      	movs	r0, #39	; 0x27
 800a05e:	f001 fd34 	bl	800baca <HAL_NVIC_EnableIRQ>
}
 800a062:	bf00      	nop
 800a064:	37f0      	adds	r7, #240	; 0xf0
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	40004c00 	.word	0x40004c00
 800a070:	58024400 	.word	0x58024400
 800a074:	58020000 	.word	0x58020000
 800a078:	40005000 	.word	0x40005000
 800a07c:	58020400 	.word	0x58020400
 800a080:	40004400 	.word	0x40004400
 800a084:	58020c00 	.word	0x58020c00
 800a088:	40004800 	.word	0x40004800

0800a08c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800a08c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a0c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800a090:	f7fe fd1c 	bl	8008acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a094:	480c      	ldr	r0, [pc, #48]	; (800a0c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a096:	490d      	ldr	r1, [pc, #52]	; (800a0cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a098:	4a0d      	ldr	r2, [pc, #52]	; (800a0d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a09a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a09c:	e002      	b.n	800a0a4 <LoopCopyDataInit>

0800a09e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a09e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a0a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a0a2:	3304      	adds	r3, #4

0800a0a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a0a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a0a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a0a8:	d3f9      	bcc.n	800a09e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a0aa:	4a0a      	ldr	r2, [pc, #40]	; (800a0d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a0ac:	4c0a      	ldr	r4, [pc, #40]	; (800a0d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800a0ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a0b0:	e001      	b.n	800a0b6 <LoopFillZerobss>

0800a0b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a0b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a0b4:	3204      	adds	r2, #4

0800a0b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a0b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a0b8:	d3fb      	bcc.n	800a0b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a0ba:	f00a f869 	bl	8014190 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a0be:	f7fd fcf7 	bl	8007ab0 <main>
  bx  lr
 800a0c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800a0c4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800a0c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800a0cc:	24000234 	.word	0x24000234
  ldr r2, =_sidata
 800a0d0:	08019f80 	.word	0x08019f80
  ldr r2, =_sbss
 800a0d4:	24000238 	.word	0x24000238
  ldr r4, =_ebss
 800a0d8:	240013dc 	.word	0x240013dc

0800a0dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a0dc:	e7fe      	b.n	800a0dc <ADC3_IRQHandler>
	...

0800a0e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b082      	sub	sp, #8
 800a0e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a0e6:	2003      	movs	r0, #3
 800a0e8:	f001 fcca 	bl	800ba80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a0ec:	f003 fbd6 	bl	800d89c <HAL_RCC_GetSysClockFreq>
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	4b15      	ldr	r3, [pc, #84]	; (800a148 <HAL_Init+0x68>)
 800a0f4:	699b      	ldr	r3, [r3, #24]
 800a0f6:	0a1b      	lsrs	r3, r3, #8
 800a0f8:	f003 030f 	and.w	r3, r3, #15
 800a0fc:	4913      	ldr	r1, [pc, #76]	; (800a14c <HAL_Init+0x6c>)
 800a0fe:	5ccb      	ldrb	r3, [r1, r3]
 800a100:	f003 031f 	and.w	r3, r3, #31
 800a104:	fa22 f303 	lsr.w	r3, r2, r3
 800a108:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a10a:	4b0f      	ldr	r3, [pc, #60]	; (800a148 <HAL_Init+0x68>)
 800a10c:	699b      	ldr	r3, [r3, #24]
 800a10e:	f003 030f 	and.w	r3, r3, #15
 800a112:	4a0e      	ldr	r2, [pc, #56]	; (800a14c <HAL_Init+0x6c>)
 800a114:	5cd3      	ldrb	r3, [r2, r3]
 800a116:	f003 031f 	and.w	r3, r3, #31
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	fa22 f303 	lsr.w	r3, r2, r3
 800a120:	4a0b      	ldr	r2, [pc, #44]	; (800a150 <HAL_Init+0x70>)
 800a122:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a124:	4a0b      	ldr	r2, [pc, #44]	; (800a154 <HAL_Init+0x74>)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a12a:	2000      	movs	r0, #0
 800a12c:	f000 f814 	bl	800a158 <HAL_InitTick>
 800a130:	4603      	mov	r3, r0
 800a132:	2b00      	cmp	r3, #0
 800a134:	d001      	beq.n	800a13a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	e002      	b.n	800a140 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800a13a:	f7fe fb85 	bl	8008848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	58024400 	.word	0x58024400
 800a14c:	080180c0 	.word	0x080180c0
 800a150:	24000054 	.word	0x24000054
 800a154:	24000050 	.word	0x24000050

0800a158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800a160:	4b15      	ldr	r3, [pc, #84]	; (800a1b8 <HAL_InitTick+0x60>)
 800a162:	781b      	ldrb	r3, [r3, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d101      	bne.n	800a16c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	e021      	b.n	800a1b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800a16c:	4b13      	ldr	r3, [pc, #76]	; (800a1bc <HAL_InitTick+0x64>)
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	4b11      	ldr	r3, [pc, #68]	; (800a1b8 <HAL_InitTick+0x60>)
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	4619      	mov	r1, r3
 800a176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a17a:	fbb3 f3f1 	udiv	r3, r3, r1
 800a17e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a182:	4618      	mov	r0, r3
 800a184:	f001 fcaf 	bl	800bae6 <HAL_SYSTICK_Config>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d001      	beq.n	800a192 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e00e      	b.n	800a1b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2b0f      	cmp	r3, #15
 800a196:	d80a      	bhi.n	800a1ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a198:	2200      	movs	r2, #0
 800a19a:	6879      	ldr	r1, [r7, #4]
 800a19c:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a0:	f001 fc79 	bl	800ba96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a1a4:	4a06      	ldr	r2, [pc, #24]	; (800a1c0 <HAL_InitTick+0x68>)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	e000      	b.n	800a1b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}
 800a1b8:	2400005c 	.word	0x2400005c
 800a1bc:	24000050 	.word	0x24000050
 800a1c0:	24000058 	.word	0x24000058

0800a1c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800a1c8:	4b06      	ldr	r3, [pc, #24]	; (800a1e4 <HAL_IncTick+0x20>)
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	4b06      	ldr	r3, [pc, #24]	; (800a1e8 <HAL_IncTick+0x24>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	4a04      	ldr	r2, [pc, #16]	; (800a1e8 <HAL_IncTick+0x24>)
 800a1d6:	6013      	str	r3, [r2, #0]
}
 800a1d8:	bf00      	nop
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	2400005c 	.word	0x2400005c
 800a1e8:	240013c8 	.word	0x240013c8

0800a1ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	af00      	add	r7, sp, #0
  return uwTick;
 800a1f0:	4b03      	ldr	r3, [pc, #12]	; (800a200 <HAL_GetTick+0x14>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	240013c8 	.word	0x240013c8

0800a204 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	431a      	orrs	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	609a      	str	r2, [r3, #8]
}
 800a21e:	bf00      	nop
 800a220:	370c      	adds	r7, #12
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr

0800a22a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800a22a:	b480      	push	{r7}
 800a22c:	b083      	sub	sp, #12
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	431a      	orrs	r2, r3
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	609a      	str	r2, [r3, #8]
}
 800a244:	bf00      	nop
 800a246:	370c      	adds	r7, #12
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800a260:	4618      	mov	r0, r3
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b087      	sub	sp, #28
 800a270:	af00      	add	r7, sp, #0
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	607a      	str	r2, [r7, #4]
 800a278:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	3360      	adds	r3, #96	; 0x60
 800a27e:	461a      	mov	r2, r3
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	4413      	add	r3, r2
 800a286:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	4a10      	ldr	r2, [pc, #64]	; (800a2cc <LL_ADC_SetOffset+0x60>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d10b      	bne.n	800a2a8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800a2a6:	e00b      	b.n	800a2c0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	430b      	orrs	r3, r1
 800a2ba:	431a      	orrs	r2, r3
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	601a      	str	r2, [r3, #0]
}
 800a2c0:	bf00      	nop
 800a2c2:	371c      	adds	r7, #28
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr
 800a2cc:	58026000 	.word	0x58026000

0800a2d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	3360      	adds	r3, #96	; 0x60
 800a2de:	461a      	mov	r2, r3
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	4413      	add	r3, r2
 800a2e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3714      	adds	r7, #20
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	f003 031f 	and.w	r3, r3, #31
 800a316:	6879      	ldr	r1, [r7, #4]
 800a318:	fa01 f303 	lsl.w	r3, r1, r3
 800a31c:	431a      	orrs	r2, r3
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	611a      	str	r2, [r3, #16]
}
 800a322:	bf00      	nop
 800a324:	3714      	adds	r7, #20
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
	...

0800a330 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800a330:	b480      	push	{r7}
 800a332:	b087      	sub	sp, #28
 800a334:	af00      	add	r7, sp, #0
 800a336:	60f8      	str	r0, [r7, #12]
 800a338:	60b9      	str	r1, [r7, #8]
 800a33a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	4a0c      	ldr	r2, [pc, #48]	; (800a370 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d00e      	beq.n	800a362 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	3360      	adds	r3, #96	; 0x60
 800a348:	461a      	mov	r2, r3
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	4413      	add	r3, r2
 800a350:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	431a      	orrs	r2, r3
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	601a      	str	r2, [r3, #0]
  }
}
 800a362:	bf00      	nop
 800a364:	371c      	adds	r7, #28
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	58026000 	.word	0x58026000

0800a374 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800a374:	b480      	push	{r7}
 800a376:	b087      	sub	sp, #28
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	4a0c      	ldr	r2, [pc, #48]	; (800a3b4 <LL_ADC_SetOffsetSaturation+0x40>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d10e      	bne.n	800a3a6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	3360      	adds	r3, #96	; 0x60
 800a38c:	461a      	mov	r2, r3
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	009b      	lsls	r3, r3, #2
 800a392:	4413      	add	r3, r2
 800a394:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	431a      	orrs	r2, r3
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800a3a6:	bf00      	nop
 800a3a8:	371c      	adds	r7, #28
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr
 800a3b2:	bf00      	nop
 800a3b4:	58026000 	.word	0x58026000

0800a3b8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b087      	sub	sp, #28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	4a0c      	ldr	r2, [pc, #48]	; (800a3f8 <LL_ADC_SetOffsetSign+0x40>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d10e      	bne.n	800a3ea <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	3360      	adds	r3, #96	; 0x60
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	4413      	add	r3, r2
 800a3d8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	431a      	orrs	r2, r3
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800a3ea:	bf00      	nop
 800a3ec:	371c      	adds	r7, #28
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop
 800a3f8:	58026000 	.word	0x58026000

0800a3fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b087      	sub	sp, #28
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	3360      	adds	r3, #96	; 0x60
 800a40c:	461a      	mov	r2, r3
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	4413      	add	r3, r2
 800a414:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	4a0c      	ldr	r2, [pc, #48]	; (800a44c <LL_ADC_SetOffsetState+0x50>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d108      	bne.n	800a430 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	431a      	orrs	r2, r3
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800a42e:	e007      	b.n	800a440 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	431a      	orrs	r2, r3
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	601a      	str	r2, [r3, #0]
}
 800a440:	bf00      	nop
 800a442:	371c      	adds	r7, #28
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr
 800a44c:	58026000 	.word	0x58026000

0800a450 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800a450:	b480      	push	{r7}
 800a452:	b087      	sub	sp, #28
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	3330      	adds	r3, #48	; 0x30
 800a460:	461a      	mov	r2, r3
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	0a1b      	lsrs	r3, r3, #8
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	f003 030c 	and.w	r3, r3, #12
 800a46c:	4413      	add	r3, r2
 800a46e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	f003 031f 	and.w	r3, r3, #31
 800a47a:	211f      	movs	r1, #31
 800a47c:	fa01 f303 	lsl.w	r3, r1, r3
 800a480:	43db      	mvns	r3, r3
 800a482:	401a      	ands	r2, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	0e9b      	lsrs	r3, r3, #26
 800a488:	f003 011f 	and.w	r1, r3, #31
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	f003 031f 	and.w	r3, r3, #31
 800a492:	fa01 f303 	lsl.w	r3, r1, r3
 800a496:	431a      	orrs	r2, r3
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800a49c:	bf00      	nop
 800a49e:	371c      	adds	r7, #28
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a6:	4770      	bx	lr

0800a4a8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b087      	sub	sp, #28
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	3314      	adds	r3, #20
 800a4b8:	461a      	mov	r2, r3
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	0e5b      	lsrs	r3, r3, #25
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	f003 0304 	and.w	r3, r3, #4
 800a4c4:	4413      	add	r3, r2
 800a4c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	0d1b      	lsrs	r3, r3, #20
 800a4d0:	f003 031f 	and.w	r3, r3, #31
 800a4d4:	2107      	movs	r1, #7
 800a4d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a4da:	43db      	mvns	r3, r3
 800a4dc:	401a      	ands	r2, r3
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	0d1b      	lsrs	r3, r3, #20
 800a4e2:	f003 031f 	and.w	r3, r3, #31
 800a4e6:	6879      	ldr	r1, [r7, #4]
 800a4e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a4ec:	431a      	orrs	r2, r3
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800a4f2:	bf00      	nop
 800a4f4:	371c      	adds	r7, #28
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr
	...

0800a500 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800a500:	b480      	push	{r7}
 800a502:	b085      	sub	sp, #20
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	4a1a      	ldr	r2, [pc, #104]	; (800a578 <LL_ADC_SetChannelSingleDiff+0x78>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d115      	bne.n	800a540 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a520:	43db      	mvns	r3, r3
 800a522:	401a      	ands	r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f003 0318 	and.w	r3, r3, #24
 800a52a:	4914      	ldr	r1, [pc, #80]	; (800a57c <LL_ADC_SetChannelSingleDiff+0x7c>)
 800a52c:	40d9      	lsrs	r1, r3
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	400b      	ands	r3, r1
 800a532:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a536:	431a      	orrs	r2, r3
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800a53e:	e014      	b.n	800a56a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a54c:	43db      	mvns	r3, r3
 800a54e:	401a      	ands	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f003 0318 	and.w	r3, r3, #24
 800a556:	4909      	ldr	r1, [pc, #36]	; (800a57c <LL_ADC_SetChannelSingleDiff+0x7c>)
 800a558:	40d9      	lsrs	r1, r3
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	400b      	ands	r3, r1
 800a55e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a562:	431a      	orrs	r2, r3
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800a56a:	bf00      	nop
 800a56c:	3714      	adds	r7, #20
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	58026000 	.word	0x58026000
 800a57c:	000fffff 	.word	0x000fffff

0800a580 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	689a      	ldr	r2, [r3, #8]
 800a58c:	4b04      	ldr	r3, [pc, #16]	; (800a5a0 <LL_ADC_DisableDeepPowerDown+0x20>)
 800a58e:	4013      	ands	r3, r2
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	6093      	str	r3, [r2, #8]
}
 800a594:	bf00      	nop
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr
 800a5a0:	5fffffc0 	.word	0x5fffffc0

0800a5a4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b083      	sub	sp, #12
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5b8:	d101      	bne.n	800a5be <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e000      	b.n	800a5c0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800a5be:	2300      	movs	r3, #0
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	689a      	ldr	r2, [r3, #8]
 800a5d8:	4b05      	ldr	r3, [pc, #20]	; (800a5f0 <LL_ADC_EnableInternalRegulator+0x24>)
 800a5da:	4013      	ands	r3, r2
 800a5dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800a5e4:	bf00      	nop
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr
 800a5f0:	6fffffc0 	.word	0x6fffffc0

0800a5f4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a604:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a608:	d101      	bne.n	800a60e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800a60a:	2301      	movs	r3, #1
 800a60c:	e000      	b.n	800a610 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	f003 0301 	and.w	r3, r3, #1
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d101      	bne.n	800a634 <LL_ADC_IsEnabled+0x18>
 800a630:	2301      	movs	r3, #1
 800a632:	e000      	b.n	800a636 <LL_ADC_IsEnabled+0x1a>
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr

0800a642 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800a642:	b480      	push	{r7}
 800a644:	b083      	sub	sp, #12
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	f003 0304 	and.w	r3, r3, #4
 800a652:	2b04      	cmp	r3, #4
 800a654:	d101      	bne.n	800a65a <LL_ADC_REG_IsConversionOngoing+0x18>
 800a656:	2301      	movs	r3, #1
 800a658:	e000      	b.n	800a65c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a65a:	2300      	movs	r3, #0
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr

0800a668 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800a668:	b480      	push	{r7}
 800a66a:	b083      	sub	sp, #12
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	f003 0308 	and.w	r3, r3, #8
 800a678:	2b08      	cmp	r3, #8
 800a67a:	d101      	bne.n	800a680 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800a67c:	2301      	movs	r3, #1
 800a67e:	e000      	b.n	800a682 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	370c      	adds	r7, #12
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr
	...

0800a690 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a690:	b590      	push	{r4, r7, lr}
 800a692:	b089      	sub	sp, #36	; 0x24
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a698:	2300      	movs	r3, #0
 800a69a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800a69c:	2300      	movs	r3, #0
 800a69e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e1ee      	b.n	800aa88 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d109      	bne.n	800a6cc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f7fd f86b 	bl	8007794 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7ff ff67 	bl	800a5a4 <LL_ADC_IsDeepPowerDownEnabled>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d004      	beq.n	800a6e6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7ff ff4d 	bl	800a580 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f7ff ff82 	bl	800a5f4 <LL_ADC_IsInternalRegulatorEnabled>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d114      	bne.n	800a720 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7ff ff66 	bl	800a5cc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a700:	4b8e      	ldr	r3, [pc, #568]	; (800a93c <HAL_ADC_Init+0x2ac>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	099b      	lsrs	r3, r3, #6
 800a706:	4a8e      	ldr	r2, [pc, #568]	; (800a940 <HAL_ADC_Init+0x2b0>)
 800a708:	fba2 2303 	umull	r2, r3, r2, r3
 800a70c:	099b      	lsrs	r3, r3, #6
 800a70e:	3301      	adds	r3, #1
 800a710:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800a712:	e002      	b.n	800a71a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	3b01      	subs	r3, #1
 800a718:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d1f9      	bne.n	800a714 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	4618      	mov	r0, r3
 800a726:	f7ff ff65 	bl	800a5f4 <LL_ADC_IsInternalRegulatorEnabled>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10d      	bne.n	800a74c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a734:	f043 0210 	orr.w	r2, r3, #16
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a740:	f043 0201 	orr.w	r2, r3, #1
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 800a748:	2301      	movs	r3, #1
 800a74a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4618      	mov	r0, r3
 800a752:	f7ff ff76 	bl	800a642 <LL_ADC_REG_IsConversionOngoing>
 800a756:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a75c:	f003 0310 	and.w	r3, r3, #16
 800a760:	2b00      	cmp	r3, #0
 800a762:	f040 8188 	bne.w	800aa76 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f040 8184 	bne.w	800aa76 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a772:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800a776:	f043 0202 	orr.w	r2, r3, #2
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4618      	mov	r0, r3
 800a784:	f7ff ff4a 	bl	800a61c <LL_ADC_IsEnabled>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d136      	bne.n	800a7fc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a6c      	ldr	r2, [pc, #432]	; (800a944 <HAL_ADC_Init+0x2b4>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d004      	beq.n	800a7a2 <HAL_ADC_Init+0x112>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a6a      	ldr	r2, [pc, #424]	; (800a948 <HAL_ADC_Init+0x2b8>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d10e      	bne.n	800a7c0 <HAL_ADC_Init+0x130>
 800a7a2:	4868      	ldr	r0, [pc, #416]	; (800a944 <HAL_ADC_Init+0x2b4>)
 800a7a4:	f7ff ff3a 	bl	800a61c <LL_ADC_IsEnabled>
 800a7a8:	4604      	mov	r4, r0
 800a7aa:	4867      	ldr	r0, [pc, #412]	; (800a948 <HAL_ADC_Init+0x2b8>)
 800a7ac:	f7ff ff36 	bl	800a61c <LL_ADC_IsEnabled>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	4323      	orrs	r3, r4
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	bf0c      	ite	eq
 800a7b8:	2301      	moveq	r3, #1
 800a7ba:	2300      	movne	r3, #0
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	e008      	b.n	800a7d2 <HAL_ADC_Init+0x142>
 800a7c0:	4862      	ldr	r0, [pc, #392]	; (800a94c <HAL_ADC_Init+0x2bc>)
 800a7c2:	f7ff ff2b 	bl	800a61c <LL_ADC_IsEnabled>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	bf0c      	ite	eq
 800a7cc:	2301      	moveq	r3, #1
 800a7ce:	2300      	movne	r3, #0
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d012      	beq.n	800a7fc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a5a      	ldr	r2, [pc, #360]	; (800a944 <HAL_ADC_Init+0x2b4>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d004      	beq.n	800a7ea <HAL_ADC_Init+0x15a>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4a58      	ldr	r2, [pc, #352]	; (800a948 <HAL_ADC_Init+0x2b8>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d101      	bne.n	800a7ee <HAL_ADC_Init+0x15e>
 800a7ea:	4a59      	ldr	r2, [pc, #356]	; (800a950 <HAL_ADC_Init+0x2c0>)
 800a7ec:	e000      	b.n	800a7f0 <HAL_ADC_Init+0x160>
 800a7ee:	4a59      	ldr	r2, [pc, #356]	; (800a954 <HAL_ADC_Init+0x2c4>)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	4610      	mov	r0, r2
 800a7f8:	f7ff fd04 	bl	800a204 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a52      	ldr	r2, [pc, #328]	; (800a94c <HAL_ADC_Init+0x2bc>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d129      	bne.n	800a85a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	7e5b      	ldrb	r3, [r3, #25]
 800a80a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800a810:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800a816:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	2b08      	cmp	r3, #8
 800a81e:	d013      	beq.n	800a848 <HAL_ADC_Init+0x1b8>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	2b0c      	cmp	r3, #12
 800a826:	d00d      	beq.n	800a844 <HAL_ADC_Init+0x1b4>
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	2b1c      	cmp	r3, #28
 800a82e:	d007      	beq.n	800a840 <HAL_ADC_Init+0x1b0>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	2b18      	cmp	r3, #24
 800a836:	d101      	bne.n	800a83c <HAL_ADC_Init+0x1ac>
 800a838:	2318      	movs	r3, #24
 800a83a:	e006      	b.n	800a84a <HAL_ADC_Init+0x1ba>
 800a83c:	2300      	movs	r3, #0
 800a83e:	e004      	b.n	800a84a <HAL_ADC_Init+0x1ba>
 800a840:	2310      	movs	r3, #16
 800a842:	e002      	b.n	800a84a <HAL_ADC_Init+0x1ba>
 800a844:	2308      	movs	r3, #8
 800a846:	e000      	b.n	800a84a <HAL_ADC_Init+0x1ba>
 800a848:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800a84a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a852:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800a854:	4313      	orrs	r3, r2
 800a856:	61bb      	str	r3, [r7, #24]
 800a858:	e00e      	b.n	800a878 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	7e5b      	ldrb	r3, [r3, #25]
 800a85e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800a864:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800a86a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a872:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800a874:	4313      	orrs	r3, r2
 800a876:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d106      	bne.n	800a890 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a886:	3b01      	subs	r3, #1
 800a888:	045b      	lsls	r3, r3, #17
 800a88a:	69ba      	ldr	r2, [r7, #24]
 800a88c:	4313      	orrs	r3, r2
 800a88e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a894:	2b00      	cmp	r3, #0
 800a896:	d009      	beq.n	800a8ac <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a89c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a8a6:	69ba      	ldr	r2, [r7, #24]
 800a8a8:	4313      	orrs	r3, r2
 800a8aa:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a26      	ldr	r2, [pc, #152]	; (800a94c <HAL_ADC_Init+0x2bc>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d115      	bne.n	800a8e2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	68da      	ldr	r2, [r3, #12]
 800a8bc:	4b26      	ldr	r3, [pc, #152]	; (800a958 <HAL_ADC_Init+0x2c8>)
 800a8be:	4013      	ands	r3, r2
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	6812      	ldr	r2, [r2, #0]
 800a8c4:	69b9      	ldr	r1, [r7, #24]
 800a8c6:	430b      	orrs	r3, r1
 800a8c8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	691b      	ldr	r3, [r3, #16]
 800a8d0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	430a      	orrs	r2, r1
 800a8de:	611a      	str	r2, [r3, #16]
 800a8e0:	e009      	b.n	800a8f6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	68da      	ldr	r2, [r3, #12]
 800a8e8:	4b1c      	ldr	r3, [pc, #112]	; (800a95c <HAL_ADC_Init+0x2cc>)
 800a8ea:	4013      	ands	r3, r2
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	6812      	ldr	r2, [r2, #0]
 800a8f0:	69b9      	ldr	r1, [r7, #24]
 800a8f2:	430b      	orrs	r3, r1
 800a8f4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7ff fea1 	bl	800a642 <LL_ADC_REG_IsConversionOngoing>
 800a900:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4618      	mov	r0, r3
 800a908:	f7ff feae 	bl	800a668 <LL_ADC_INJ_IsConversionOngoing>
 800a90c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	2b00      	cmp	r3, #0
 800a912:	f040 808e 	bne.w	800aa32 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	f040 808a 	bne.w	800aa32 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a0a      	ldr	r2, [pc, #40]	; (800a94c <HAL_ADC_Init+0x2bc>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d11b      	bne.n	800a960 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	7e1b      	ldrb	r3, [r3, #24]
 800a92c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a934:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800a936:	4313      	orrs	r3, r2
 800a938:	61bb      	str	r3, [r7, #24]
 800a93a:	e018      	b.n	800a96e <HAL_ADC_Init+0x2de>
 800a93c:	24000050 	.word	0x24000050
 800a940:	053e2d63 	.word	0x053e2d63
 800a944:	40022000 	.word	0x40022000
 800a948:	40022100 	.word	0x40022100
 800a94c:	58026000 	.word	0x58026000
 800a950:	40022300 	.word	0x40022300
 800a954:	58026300 	.word	0x58026300
 800a958:	fff04007 	.word	0xfff04007
 800a95c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	7e1b      	ldrb	r3, [r3, #24]
 800a964:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800a96a:	4313      	orrs	r3, r2
 800a96c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	68da      	ldr	r2, [r3, #12]
 800a974:	4b46      	ldr	r3, [pc, #280]	; (800aa90 <HAL_ADC_Init+0x400>)
 800a976:	4013      	ands	r3, r2
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	6812      	ldr	r2, [r2, #0]
 800a97c:	69b9      	ldr	r1, [r7, #24]
 800a97e:	430b      	orrs	r3, r1
 800a980:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d137      	bne.n	800a9fc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a990:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	4a3f      	ldr	r2, [pc, #252]	; (800aa94 <HAL_ADC_Init+0x404>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d116      	bne.n	800a9ca <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	691a      	ldr	r2, [r3, #16]
 800a9a2:	4b3d      	ldr	r3, [pc, #244]	; (800aa98 <HAL_ADC_Init+0x408>)
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a9ae:	4311      	orrs	r1, r2
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a9b4:	4311      	orrs	r1, r2
 800a9b6:	687a      	ldr	r2, [r7, #4]
 800a9b8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a9ba:	430a      	orrs	r2, r1
 800a9bc:	431a      	orrs	r2, r3
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f042 0201 	orr.w	r2, r2, #1
 800a9c6:	611a      	str	r2, [r3, #16]
 800a9c8:	e020      	b.n	800aa0c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	691a      	ldr	r2, [r3, #16]
 800a9d0:	4b32      	ldr	r3, [pc, #200]	; (800aa9c <HAL_ADC_Init+0x40c>)
 800a9d2:	4013      	ands	r3, r2
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a9d8:	3a01      	subs	r2, #1
 800a9da:	0411      	lsls	r1, r2, #16
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a9e0:	4311      	orrs	r1, r2
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a9e6:	4311      	orrs	r1, r2
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a9ec:	430a      	orrs	r2, r1
 800a9ee:	431a      	orrs	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f042 0201 	orr.w	r2, r2, #1
 800a9f8:	611a      	str	r2, [r3, #16]
 800a9fa:	e007      	b.n	800aa0c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	691a      	ldr	r2, [r3, #16]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f022 0201 	bic.w	r2, r2, #1
 800aa0a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	691b      	ldr	r3, [r3, #16]
 800aa12:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	430a      	orrs	r2, r1
 800aa20:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	4a1b      	ldr	r2, [pc, #108]	; (800aa94 <HAL_ADC_Init+0x404>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d002      	beq.n	800aa32 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f000 fd63 	bl	800b4f8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d10c      	bne.n	800aa54 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa40:	f023 010f 	bic.w	r1, r3, #15
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	69db      	ldr	r3, [r3, #28]
 800aa48:	1e5a      	subs	r2, r3, #1
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	430a      	orrs	r2, r1
 800aa50:	631a      	str	r2, [r3, #48]	; 0x30
 800aa52:	e007      	b.n	800aa64 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f022 020f 	bic.w	r2, r2, #15
 800aa62:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa68:	f023 0303 	bic.w	r3, r3, #3
 800aa6c:	f043 0201 	orr.w	r2, r3, #1
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	661a      	str	r2, [r3, #96]	; 0x60
 800aa74:	e007      	b.n	800aa86 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa7a:	f043 0210 	orr.w	r2, r3, #16
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800aa82:	2301      	movs	r3, #1
 800aa84:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800aa86:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3724      	adds	r7, #36	; 0x24
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd90      	pop	{r4, r7, pc}
 800aa90:	ffffbffc 	.word	0xffffbffc
 800aa94:	58026000 	.word	0x58026000
 800aa98:	fc00f81f 	.word	0xfc00f81f
 800aa9c:	fc00f81e 	.word	0xfc00f81e

0800aaa0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800aaa0:	b590      	push	{r4, r7, lr}
 800aaa2:	b0b9      	sub	sp, #228	; 0xe4
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800aab0:	2300      	movs	r3, #0
 800aab2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aaba:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	68db      	ldr	r3, [r3, #12]
 800aac0:	4ab3      	ldr	r2, [pc, #716]	; (800ad90 <HAL_ADC_ConfigChannel+0x2f0>)
 800aac2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d102      	bne.n	800aad4 <HAL_ADC_ConfigChannel+0x34>
 800aace:	2302      	movs	r3, #2
 800aad0:	f000 bcfa 	b.w	800b4c8 <HAL_ADC_ConfigChannel+0xa28>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7ff fdae 	bl	800a642 <LL_ADC_REG_IsConversionOngoing>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	f040 84de 	bne.w	800b4aa <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4aa8      	ldr	r2, [pc, #672]	; (800ad94 <HAL_ADC_ConfigChannel+0x2f4>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d033      	beq.n	800ab60 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d108      	bne.n	800ab16 <HAL_ADC_ConfigChannel+0x76>
 800ab04:	683b      	ldr	r3, [r7, #0]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	0e9b      	lsrs	r3, r3, #26
 800ab0a:	f003 031f 	and.w	r3, r3, #31
 800ab0e:	2201      	movs	r2, #1
 800ab10:	fa02 f303 	lsl.w	r3, r2, r3
 800ab14:	e01d      	b.n	800ab52 <HAL_ADC_ConfigChannel+0xb2>
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ab22:	fa93 f3a3 	rbit	r3, r3
 800ab26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800ab2a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ab2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800ab32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d101      	bne.n	800ab3e <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800ab3a:	2320      	movs	r3, #32
 800ab3c:	e004      	b.n	800ab48 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800ab3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab42:	fab3 f383 	clz	r3, r3
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	f003 031f 	and.w	r3, r3, #31
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	6812      	ldr	r2, [r2, #0]
 800ab56:	69d1      	ldr	r1, [r2, #28]
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	6812      	ldr	r2, [r2, #0]
 800ab5c:	430b      	orrs	r3, r1
 800ab5e:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6818      	ldr	r0, [r3, #0]
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	6859      	ldr	r1, [r3, #4]
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	f7ff fc6f 	bl	800a450 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7ff fd63 	bl	800a642 <LL_ADC_REG_IsConversionOngoing>
 800ab7c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4618      	mov	r0, r3
 800ab86:	f7ff fd6f 	bl	800a668 <LL_ADC_INJ_IsConversionOngoing>
 800ab8a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800ab8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	f040 8270 	bne.w	800b078 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800ab98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f040 826b 	bne.w	800b078 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6818      	ldr	r0, [r3, #0]
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	6819      	ldr	r1, [r3, #0]
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	461a      	mov	r2, r3
 800abb0:	f7ff fc7a 	bl	800a4a8 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a76      	ldr	r2, [pc, #472]	; (800ad94 <HAL_ADC_ConfigChannel+0x2f4>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d10d      	bne.n	800abda <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	695a      	ldr	r2, [r3, #20]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	08db      	lsrs	r3, r3, #3
 800abca:	f003 0303 	and.w	r3, r3, #3
 800abce:	005b      	lsls	r3, r3, #1
 800abd0:	fa02 f303 	lsl.w	r3, r2, r3
 800abd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800abd8:	e032      	b.n	800ac40 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800abda:	4b6f      	ldr	r3, [pc, #444]	; (800ad98 <HAL_ADC_ConfigChannel+0x2f8>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800abe2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abe6:	d10b      	bne.n	800ac00 <HAL_ADC_ConfigChannel+0x160>
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	695a      	ldr	r2, [r3, #20]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	68db      	ldr	r3, [r3, #12]
 800abf2:	089b      	lsrs	r3, r3, #2
 800abf4:	f003 0307 	and.w	r3, r3, #7
 800abf8:	005b      	lsls	r3, r3, #1
 800abfa:	fa02 f303 	lsl.w	r3, r2, r3
 800abfe:	e01d      	b.n	800ac3c <HAL_ADC_ConfigChannel+0x19c>
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	f003 0310 	and.w	r3, r3, #16
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d10b      	bne.n	800ac26 <HAL_ADC_ConfigChannel+0x186>
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	695a      	ldr	r2, [r3, #20]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	089b      	lsrs	r3, r3, #2
 800ac1a:	f003 0307 	and.w	r3, r3, #7
 800ac1e:	005b      	lsls	r3, r3, #1
 800ac20:	fa02 f303 	lsl.w	r3, r2, r3
 800ac24:	e00a      	b.n	800ac3c <HAL_ADC_ConfigChannel+0x19c>
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	695a      	ldr	r2, [r3, #20]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	089b      	lsrs	r3, r3, #2
 800ac32:	f003 0304 	and.w	r3, r3, #4
 800ac36:	005b      	lsls	r3, r3, #1
 800ac38:	fa02 f303 	lsl.w	r3, r2, r3
 800ac3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	691b      	ldr	r3, [r3, #16]
 800ac44:	2b04      	cmp	r3, #4
 800ac46:	d048      	beq.n	800acda <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6818      	ldr	r0, [r3, #0]
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	6919      	ldr	r1, [r3, #16]
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac58:	f7ff fb08 	bl	800a26c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a4c      	ldr	r2, [pc, #304]	; (800ad94 <HAL_ADC_ConfigChannel+0x2f4>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d119      	bne.n	800ac9a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6818      	ldr	r0, [r3, #0]
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	6919      	ldr	r1, [r3, #16]
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	69db      	ldr	r3, [r3, #28]
 800ac72:	461a      	mov	r2, r3
 800ac74:	f7ff fba0 	bl	800a3b8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6818      	ldr	r0, [r3, #0]
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	6919      	ldr	r1, [r3, #16]
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d102      	bne.n	800ac90 <HAL_ADC_ConfigChannel+0x1f0>
 800ac8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ac8e:	e000      	b.n	800ac92 <HAL_ADC_ConfigChannel+0x1f2>
 800ac90:	2300      	movs	r3, #0
 800ac92:	461a      	mov	r2, r3
 800ac94:	f7ff fb6e 	bl	800a374 <LL_ADC_SetOffsetSaturation>
 800ac98:	e1ee      	b.n	800b078 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6818      	ldr	r0, [r3, #0]
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	6919      	ldr	r1, [r3, #16]
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d102      	bne.n	800acb2 <HAL_ADC_ConfigChannel+0x212>
 800acac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800acb0:	e000      	b.n	800acb4 <HAL_ADC_ConfigChannel+0x214>
 800acb2:	2300      	movs	r3, #0
 800acb4:	461a      	mov	r2, r3
 800acb6:	f7ff fb3b 	bl	800a330 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6818      	ldr	r0, [r3, #0]
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	6919      	ldr	r1, [r3, #16]
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	7e1b      	ldrb	r3, [r3, #24]
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d102      	bne.n	800acd0 <HAL_ADC_ConfigChannel+0x230>
 800acca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800acce:	e000      	b.n	800acd2 <HAL_ADC_ConfigChannel+0x232>
 800acd0:	2300      	movs	r3, #0
 800acd2:	461a      	mov	r2, r3
 800acd4:	f7ff fb12 	bl	800a2fc <LL_ADC_SetDataRightShift>
 800acd8:	e1ce      	b.n	800b078 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a2d      	ldr	r2, [pc, #180]	; (800ad94 <HAL_ADC_ConfigChannel+0x2f4>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	f040 8181 	bne.w	800afe8 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	2100      	movs	r1, #0
 800acec:	4618      	mov	r0, r3
 800acee:	f7ff faef 	bl	800a2d0 <LL_ADC_GetOffsetChannel>
 800acf2:	4603      	mov	r3, r0
 800acf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10a      	bne.n	800ad12 <HAL_ADC_ConfigChannel+0x272>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2100      	movs	r1, #0
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7ff fae4 	bl	800a2d0 <LL_ADC_GetOffsetChannel>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	0e9b      	lsrs	r3, r3, #26
 800ad0c:	f003 021f 	and.w	r2, r3, #31
 800ad10:	e01e      	b.n	800ad50 <HAL_ADC_ConfigChannel+0x2b0>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	2100      	movs	r1, #0
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7ff fad9 	bl	800a2d0 <LL_ADC_GetOffsetChannel>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ad28:	fa93 f3a3 	rbit	r3, r3
 800ad2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 800ad30:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ad34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800ad38:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d101      	bne.n	800ad44 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 800ad40:	2320      	movs	r3, #32
 800ad42:	e004      	b.n	800ad4e <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 800ad44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ad48:	fab3 f383 	clz	r3, r3
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	461a      	mov	r2, r3
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d105      	bne.n	800ad68 <HAL_ADC_ConfigChannel+0x2c8>
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	0e9b      	lsrs	r3, r3, #26
 800ad62:	f003 031f 	and.w	r3, r3, #31
 800ad66:	e01e      	b.n	800ada6 <HAL_ADC_ConfigChannel+0x306>
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad74:	fa93 f3a3 	rbit	r3, r3
 800ad78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800ad7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ad80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800ad84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d107      	bne.n	800ad9c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 800ad8c:	2320      	movs	r3, #32
 800ad8e:	e00a      	b.n	800ada6 <HAL_ADC_ConfigChannel+0x306>
 800ad90:	47ff0000 	.word	0x47ff0000
 800ad94:	58026000 	.word	0x58026000
 800ad98:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 800ad9c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ada0:	fab3 f383 	clz	r3, r3
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	429a      	cmp	r2, r3
 800ada8:	d106      	bne.n	800adb8 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	2200      	movs	r2, #0
 800adb0:	2100      	movs	r1, #0
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7ff fb22 	bl	800a3fc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	2101      	movs	r1, #1
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7ff fa86 	bl	800a2d0 <LL_ADC_GetOffsetChannel>
 800adc4:	4603      	mov	r3, r0
 800adc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d10a      	bne.n	800ade4 <HAL_ADC_ConfigChannel+0x344>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2101      	movs	r1, #1
 800add4:	4618      	mov	r0, r3
 800add6:	f7ff fa7b 	bl	800a2d0 <LL_ADC_GetOffsetChannel>
 800adda:	4603      	mov	r3, r0
 800addc:	0e9b      	lsrs	r3, r3, #26
 800adde:	f003 021f 	and.w	r2, r3, #31
 800ade2:	e01e      	b.n	800ae22 <HAL_ADC_ConfigChannel+0x382>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2101      	movs	r1, #1
 800adea:	4618      	mov	r0, r3
 800adec:	f7ff fa70 	bl	800a2d0 <LL_ADC_GetOffsetChannel>
 800adf0:	4603      	mov	r3, r0
 800adf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800adf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800adfa:	fa93 f3a3 	rbit	r3, r3
 800adfe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800ae02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800ae0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d101      	bne.n	800ae16 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800ae12:	2320      	movs	r3, #32
 800ae14:	e004      	b.n	800ae20 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800ae16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ae1a:	fab3 f383 	clz	r3, r3
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	461a      	mov	r2, r3
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d105      	bne.n	800ae3a <HAL_ADC_ConfigChannel+0x39a>
 800ae2e:	683b      	ldr	r3, [r7, #0]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	0e9b      	lsrs	r3, r3, #26
 800ae34:	f003 031f 	and.w	r3, r3, #31
 800ae38:	e018      	b.n	800ae6c <HAL_ADC_ConfigChannel+0x3cc>
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ae46:	fa93 f3a3 	rbit	r3, r3
 800ae4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800ae4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ae52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800ae56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d101      	bne.n	800ae62 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800ae5e:	2320      	movs	r3, #32
 800ae60:	e004      	b.n	800ae6c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800ae62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae66:	fab3 f383 	clz	r3, r3
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d106      	bne.n	800ae7e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2200      	movs	r2, #0
 800ae76:	2101      	movs	r1, #1
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7ff fabf 	bl	800a3fc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2102      	movs	r1, #2
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7ff fa23 	bl	800a2d0 <LL_ADC_GetOffsetChannel>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d10a      	bne.n	800aeaa <HAL_ADC_ConfigChannel+0x40a>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	2102      	movs	r1, #2
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	f7ff fa18 	bl	800a2d0 <LL_ADC_GetOffsetChannel>
 800aea0:	4603      	mov	r3, r0
 800aea2:	0e9b      	lsrs	r3, r3, #26
 800aea4:	f003 021f 	and.w	r2, r3, #31
 800aea8:	e01e      	b.n	800aee8 <HAL_ADC_ConfigChannel+0x448>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2102      	movs	r1, #2
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7ff fa0d 	bl	800a2d0 <LL_ADC_GetOffsetChannel>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aebc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aec0:	fa93 f3a3 	rbit	r3, r3
 800aec4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800aec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aecc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800aed0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d101      	bne.n	800aedc <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800aed8:	2320      	movs	r3, #32
 800aeda:	e004      	b.n	800aee6 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800aedc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aee0:	fab3 f383 	clz	r3, r3
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	461a      	mov	r2, r3
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d105      	bne.n	800af00 <HAL_ADC_ConfigChannel+0x460>
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	0e9b      	lsrs	r3, r3, #26
 800aefa:	f003 031f 	and.w	r3, r3, #31
 800aefe:	e014      	b.n	800af2a <HAL_ADC_ConfigChannel+0x48a>
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800af08:	fa93 f3a3 	rbit	r3, r3
 800af0c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 800af0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800af14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d101      	bne.n	800af20 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 800af1c:	2320      	movs	r3, #32
 800af1e:	e004      	b.n	800af2a <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 800af20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800af24:	fab3 f383 	clz	r3, r3
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d106      	bne.n	800af3c <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2200      	movs	r2, #0
 800af34:	2102      	movs	r1, #2
 800af36:	4618      	mov	r0, r3
 800af38:	f7ff fa60 	bl	800a3fc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2103      	movs	r1, #3
 800af42:	4618      	mov	r0, r3
 800af44:	f7ff f9c4 	bl	800a2d0 <LL_ADC_GetOffsetChannel>
 800af48:	4603      	mov	r3, r0
 800af4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d10a      	bne.n	800af68 <HAL_ADC_ConfigChannel+0x4c8>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2103      	movs	r1, #3
 800af58:	4618      	mov	r0, r3
 800af5a:	f7ff f9b9 	bl	800a2d0 <LL_ADC_GetOffsetChannel>
 800af5e:	4603      	mov	r3, r0
 800af60:	0e9b      	lsrs	r3, r3, #26
 800af62:	f003 021f 	and.w	r2, r3, #31
 800af66:	e017      	b.n	800af98 <HAL_ADC_ConfigChannel+0x4f8>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	2103      	movs	r1, #3
 800af6e:	4618      	mov	r0, r3
 800af70:	f7ff f9ae 	bl	800a2d0 <LL_ADC_GetOffsetChannel>
 800af74:	4603      	mov	r3, r0
 800af76:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af7a:	fa93 f3a3 	rbit	r3, r3
 800af7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800af80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af82:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800af84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af86:	2b00      	cmp	r3, #0
 800af88:	d101      	bne.n	800af8e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800af8a:	2320      	movs	r3, #32
 800af8c:	e003      	b.n	800af96 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800af8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af90:	fab3 f383 	clz	r3, r3
 800af94:	b2db      	uxtb	r3, r3
 800af96:	461a      	mov	r2, r3
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d105      	bne.n	800afb0 <HAL_ADC_ConfigChannel+0x510>
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	0e9b      	lsrs	r3, r3, #26
 800afaa:	f003 031f 	and.w	r3, r3, #31
 800afae:	e011      	b.n	800afd4 <HAL_ADC_ConfigChannel+0x534>
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afb8:	fa93 f3a3 	rbit	r3, r3
 800afbc:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800afbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afc0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800afc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d101      	bne.n	800afcc <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 800afc8:	2320      	movs	r3, #32
 800afca:	e003      	b.n	800afd4 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 800afcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800afce:	fab3 f383 	clz	r3, r3
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d14f      	bne.n	800b078 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2200      	movs	r2, #0
 800afde:	2103      	movs	r1, #3
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7ff fa0b 	bl	800a3fc <LL_ADC_SetOffsetState>
 800afe6:	e047      	b.n	800b078 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	069b      	lsls	r3, r3, #26
 800aff8:	429a      	cmp	r2, r3
 800affa:	d107      	bne.n	800b00c <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800b00a:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b012:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	069b      	lsls	r3, r3, #26
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d107      	bne.n	800b030 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800b02e:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b036:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	069b      	lsls	r3, r3, #26
 800b040:	429a      	cmp	r2, r3
 800b042:	d107      	bne.n	800b054 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800b052:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b05a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	069b      	lsls	r3, r3, #26
 800b064:	429a      	cmp	r2, r3
 800b066:	d107      	bne.n	800b078 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800b076:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4618      	mov	r0, r3
 800b07e:	f7ff facd 	bl	800a61c <LL_ADC_IsEnabled>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	f040 8219 	bne.w	800b4bc <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6818      	ldr	r0, [r3, #0]
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	6819      	ldr	r1, [r3, #0]
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	461a      	mov	r2, r3
 800b098:	f7ff fa32 	bl	800a500 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	68db      	ldr	r3, [r3, #12]
 800b0a0:	4aa1      	ldr	r2, [pc, #644]	; (800b328 <HAL_ADC_ConfigChannel+0x888>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	f040 812e 	bne.w	800b304 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d10b      	bne.n	800b0d0 <HAL_ADC_ConfigChannel+0x630>
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	0e9b      	lsrs	r3, r3, #26
 800b0be:	3301      	adds	r3, #1
 800b0c0:	f003 031f 	and.w	r3, r3, #31
 800b0c4:	2b09      	cmp	r3, #9
 800b0c6:	bf94      	ite	ls
 800b0c8:	2301      	movls	r3, #1
 800b0ca:	2300      	movhi	r3, #0
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	e019      	b.n	800b104 <HAL_ADC_ConfigChannel+0x664>
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b0d8:	fa93 f3a3 	rbit	r3, r3
 800b0dc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800b0de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800b0e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d101      	bne.n	800b0ec <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800b0e8:	2320      	movs	r3, #32
 800b0ea:	e003      	b.n	800b0f4 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 800b0ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0ee:	fab3 f383 	clz	r3, r3
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	f003 031f 	and.w	r3, r3, #31
 800b0fa:	2b09      	cmp	r3, #9
 800b0fc:	bf94      	ite	ls
 800b0fe:	2301      	movls	r3, #1
 800b100:	2300      	movhi	r3, #0
 800b102:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b104:	2b00      	cmp	r3, #0
 800b106:	d079      	beq.n	800b1fc <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b110:	2b00      	cmp	r3, #0
 800b112:	d107      	bne.n	800b124 <HAL_ADC_ConfigChannel+0x684>
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	0e9b      	lsrs	r3, r3, #26
 800b11a:	3301      	adds	r3, #1
 800b11c:	069b      	lsls	r3, r3, #26
 800b11e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b122:	e015      	b.n	800b150 <HAL_ADC_ConfigChannel+0x6b0>
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b12a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b12c:	fa93 f3a3 	rbit	r3, r3
 800b130:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800b132:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b134:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800b136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d101      	bne.n	800b140 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 800b13c:	2320      	movs	r3, #32
 800b13e:	e003      	b.n	800b148 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 800b140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b142:	fab3 f383 	clz	r3, r3
 800b146:	b2db      	uxtb	r3, r3
 800b148:	3301      	adds	r3, #1
 800b14a:	069b      	lsls	r3, r3, #26
 800b14c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d109      	bne.n	800b170 <HAL_ADC_ConfigChannel+0x6d0>
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	0e9b      	lsrs	r3, r3, #26
 800b162:	3301      	adds	r3, #1
 800b164:	f003 031f 	and.w	r3, r3, #31
 800b168:	2101      	movs	r1, #1
 800b16a:	fa01 f303 	lsl.w	r3, r1, r3
 800b16e:	e017      	b.n	800b1a0 <HAL_ADC_ConfigChannel+0x700>
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b178:	fa93 f3a3 	rbit	r3, r3
 800b17c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800b17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b180:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800b182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b184:	2b00      	cmp	r3, #0
 800b186:	d101      	bne.n	800b18c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 800b188:	2320      	movs	r3, #32
 800b18a:	e003      	b.n	800b194 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 800b18c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b18e:	fab3 f383 	clz	r3, r3
 800b192:	b2db      	uxtb	r3, r3
 800b194:	3301      	adds	r3, #1
 800b196:	f003 031f 	and.w	r3, r3, #31
 800b19a:	2101      	movs	r1, #1
 800b19c:	fa01 f303 	lsl.w	r3, r1, r3
 800b1a0:	ea42 0103 	orr.w	r1, r2, r3
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d10a      	bne.n	800b1c6 <HAL_ADC_ConfigChannel+0x726>
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	0e9b      	lsrs	r3, r3, #26
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	f003 021f 	and.w	r2, r3, #31
 800b1bc:	4613      	mov	r3, r2
 800b1be:	005b      	lsls	r3, r3, #1
 800b1c0:	4413      	add	r3, r2
 800b1c2:	051b      	lsls	r3, r3, #20
 800b1c4:	e018      	b.n	800b1f8 <HAL_ADC_ConfigChannel+0x758>
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ce:	fa93 f3a3 	rbit	r3, r3
 800b1d2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800b1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800b1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d101      	bne.n	800b1e2 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800b1de:	2320      	movs	r3, #32
 800b1e0:	e003      	b.n	800b1ea <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800b1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e4:	fab3 f383 	clz	r3, r3
 800b1e8:	b2db      	uxtb	r3, r3
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	f003 021f 	and.w	r2, r3, #31
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	005b      	lsls	r3, r3, #1
 800b1f4:	4413      	add	r3, r2
 800b1f6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b1f8:	430b      	orrs	r3, r1
 800b1fa:	e07e      	b.n	800b2fa <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b204:	2b00      	cmp	r3, #0
 800b206:	d107      	bne.n	800b218 <HAL_ADC_ConfigChannel+0x778>
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	0e9b      	lsrs	r3, r3, #26
 800b20e:	3301      	adds	r3, #1
 800b210:	069b      	lsls	r3, r3, #26
 800b212:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b216:	e015      	b.n	800b244 <HAL_ADC_ConfigChannel+0x7a4>
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b220:	fa93 f3a3 	rbit	r3, r3
 800b224:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800b226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b228:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800b22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d101      	bne.n	800b234 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 800b230:	2320      	movs	r3, #32
 800b232:	e003      	b.n	800b23c <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 800b234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b236:	fab3 f383 	clz	r3, r3
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	3301      	adds	r3, #1
 800b23e:	069b      	lsls	r3, r3, #26
 800b240:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d109      	bne.n	800b264 <HAL_ADC_ConfigChannel+0x7c4>
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	0e9b      	lsrs	r3, r3, #26
 800b256:	3301      	adds	r3, #1
 800b258:	f003 031f 	and.w	r3, r3, #31
 800b25c:	2101      	movs	r1, #1
 800b25e:	fa01 f303 	lsl.w	r3, r1, r3
 800b262:	e017      	b.n	800b294 <HAL_ADC_ConfigChannel+0x7f4>
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	fa93 f3a3 	rbit	r3, r3
 800b270:	61bb      	str	r3, [r7, #24]
  return result;
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800b276:	6a3b      	ldr	r3, [r7, #32]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d101      	bne.n	800b280 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 800b27c:	2320      	movs	r3, #32
 800b27e:	e003      	b.n	800b288 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 800b280:	6a3b      	ldr	r3, [r7, #32]
 800b282:	fab3 f383 	clz	r3, r3
 800b286:	b2db      	uxtb	r3, r3
 800b288:	3301      	adds	r3, #1
 800b28a:	f003 031f 	and.w	r3, r3, #31
 800b28e:	2101      	movs	r1, #1
 800b290:	fa01 f303 	lsl.w	r3, r1, r3
 800b294:	ea42 0103 	orr.w	r1, r2, r3
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d10d      	bne.n	800b2c0 <HAL_ADC_ConfigChannel+0x820>
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	0e9b      	lsrs	r3, r3, #26
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	f003 021f 	and.w	r2, r3, #31
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	005b      	lsls	r3, r3, #1
 800b2b4:	4413      	add	r3, r2
 800b2b6:	3b1e      	subs	r3, #30
 800b2b8:	051b      	lsls	r3, r3, #20
 800b2ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b2be:	e01b      	b.n	800b2f8 <HAL_ADC_ConfigChannel+0x858>
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	fa93 f3a3 	rbit	r3, r3
 800b2cc:	60fb      	str	r3, [r7, #12]
  return result;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d101      	bne.n	800b2dc <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 800b2d8:	2320      	movs	r3, #32
 800b2da:	e003      	b.n	800b2e4 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	fab3 f383 	clz	r3, r3
 800b2e2:	b2db      	uxtb	r3, r3
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	f003 021f 	and.w	r2, r3, #31
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	005b      	lsls	r3, r3, #1
 800b2ee:	4413      	add	r3, r2
 800b2f0:	3b1e      	subs	r3, #30
 800b2f2:	051b      	lsls	r3, r3, #20
 800b2f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b2f8:	430b      	orrs	r3, r1
 800b2fa:	683a      	ldr	r2, [r7, #0]
 800b2fc:	6892      	ldr	r2, [r2, #8]
 800b2fe:	4619      	mov	r1, r3
 800b300:	f7ff f8d2 	bl	800a4a8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	f280 80d7 	bge.w	800b4bc <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a06      	ldr	r2, [pc, #24]	; (800b32c <HAL_ADC_ConfigChannel+0x88c>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d004      	beq.n	800b322 <HAL_ADC_ConfigChannel+0x882>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a04      	ldr	r2, [pc, #16]	; (800b330 <HAL_ADC_ConfigChannel+0x890>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d10a      	bne.n	800b338 <HAL_ADC_ConfigChannel+0x898>
 800b322:	4b04      	ldr	r3, [pc, #16]	; (800b334 <HAL_ADC_ConfigChannel+0x894>)
 800b324:	e009      	b.n	800b33a <HAL_ADC_ConfigChannel+0x89a>
 800b326:	bf00      	nop
 800b328:	47ff0000 	.word	0x47ff0000
 800b32c:	40022000 	.word	0x40022000
 800b330:	40022100 	.word	0x40022100
 800b334:	40022300 	.word	0x40022300
 800b338:	4b65      	ldr	r3, [pc, #404]	; (800b4d0 <HAL_ADC_ConfigChannel+0xa30>)
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7fe ff88 	bl	800a250 <LL_ADC_GetCommonPathInternalCh>
 800b340:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a62      	ldr	r2, [pc, #392]	; (800b4d4 <HAL_ADC_ConfigChannel+0xa34>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d004      	beq.n	800b358 <HAL_ADC_ConfigChannel+0x8b8>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4a61      	ldr	r2, [pc, #388]	; (800b4d8 <HAL_ADC_ConfigChannel+0xa38>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d10e      	bne.n	800b376 <HAL_ADC_ConfigChannel+0x8d6>
 800b358:	485e      	ldr	r0, [pc, #376]	; (800b4d4 <HAL_ADC_ConfigChannel+0xa34>)
 800b35a:	f7ff f95f 	bl	800a61c <LL_ADC_IsEnabled>
 800b35e:	4604      	mov	r4, r0
 800b360:	485d      	ldr	r0, [pc, #372]	; (800b4d8 <HAL_ADC_ConfigChannel+0xa38>)
 800b362:	f7ff f95b 	bl	800a61c <LL_ADC_IsEnabled>
 800b366:	4603      	mov	r3, r0
 800b368:	4323      	orrs	r3, r4
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	bf0c      	ite	eq
 800b36e:	2301      	moveq	r3, #1
 800b370:	2300      	movne	r3, #0
 800b372:	b2db      	uxtb	r3, r3
 800b374:	e008      	b.n	800b388 <HAL_ADC_ConfigChannel+0x8e8>
 800b376:	4859      	ldr	r0, [pc, #356]	; (800b4dc <HAL_ADC_ConfigChannel+0xa3c>)
 800b378:	f7ff f950 	bl	800a61c <LL_ADC_IsEnabled>
 800b37c:	4603      	mov	r3, r0
 800b37e:	2b00      	cmp	r3, #0
 800b380:	bf0c      	ite	eq
 800b382:	2301      	moveq	r3, #1
 800b384:	2300      	movne	r3, #0
 800b386:	b2db      	uxtb	r3, r3
 800b388:	2b00      	cmp	r3, #0
 800b38a:	f000 8084 	beq.w	800b496 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	4a53      	ldr	r2, [pc, #332]	; (800b4e0 <HAL_ADC_ConfigChannel+0xa40>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d132      	bne.n	800b3fe <HAL_ADC_ConfigChannel+0x95e>
 800b398:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b39c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d12c      	bne.n	800b3fe <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a4c      	ldr	r2, [pc, #304]	; (800b4dc <HAL_ADC_ConfigChannel+0xa3c>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	f040 8086 	bne.w	800b4bc <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a47      	ldr	r2, [pc, #284]	; (800b4d4 <HAL_ADC_ConfigChannel+0xa34>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d004      	beq.n	800b3c4 <HAL_ADC_ConfigChannel+0x924>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a46      	ldr	r2, [pc, #280]	; (800b4d8 <HAL_ADC_ConfigChannel+0xa38>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d101      	bne.n	800b3c8 <HAL_ADC_ConfigChannel+0x928>
 800b3c4:	4a47      	ldr	r2, [pc, #284]	; (800b4e4 <HAL_ADC_ConfigChannel+0xa44>)
 800b3c6:	e000      	b.n	800b3ca <HAL_ADC_ConfigChannel+0x92a>
 800b3c8:	4a41      	ldr	r2, [pc, #260]	; (800b4d0 <HAL_ADC_ConfigChannel+0xa30>)
 800b3ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b3ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	4610      	mov	r0, r2
 800b3d6:	f7fe ff28 	bl	800a22a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b3da:	4b43      	ldr	r3, [pc, #268]	; (800b4e8 <HAL_ADC_ConfigChannel+0xa48>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	099b      	lsrs	r3, r3, #6
 800b3e0:	4a42      	ldr	r2, [pc, #264]	; (800b4ec <HAL_ADC_ConfigChannel+0xa4c>)
 800b3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b3e6:	099b      	lsrs	r3, r3, #6
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	005b      	lsls	r3, r3, #1
 800b3ec:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800b3ee:	e002      	b.n	800b3f6 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	3b01      	subs	r3, #1
 800b3f4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1f9      	bne.n	800b3f0 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b3fc:	e05e      	b.n	800b4bc <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4a3b      	ldr	r2, [pc, #236]	; (800b4f0 <HAL_ADC_ConfigChannel+0xa50>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d120      	bne.n	800b44a <HAL_ADC_ConfigChannel+0x9aa>
 800b408:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b40c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b410:	2b00      	cmp	r3, #0
 800b412:	d11a      	bne.n	800b44a <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a30      	ldr	r2, [pc, #192]	; (800b4dc <HAL_ADC_ConfigChannel+0xa3c>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d14e      	bne.n	800b4bc <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4a2c      	ldr	r2, [pc, #176]	; (800b4d4 <HAL_ADC_ConfigChannel+0xa34>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d004      	beq.n	800b432 <HAL_ADC_ConfigChannel+0x992>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a2a      	ldr	r2, [pc, #168]	; (800b4d8 <HAL_ADC_ConfigChannel+0xa38>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d101      	bne.n	800b436 <HAL_ADC_ConfigChannel+0x996>
 800b432:	4a2c      	ldr	r2, [pc, #176]	; (800b4e4 <HAL_ADC_ConfigChannel+0xa44>)
 800b434:	e000      	b.n	800b438 <HAL_ADC_ConfigChannel+0x998>
 800b436:	4a26      	ldr	r2, [pc, #152]	; (800b4d0 <HAL_ADC_ConfigChannel+0xa30>)
 800b438:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b43c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b440:	4619      	mov	r1, r3
 800b442:	4610      	mov	r0, r2
 800b444:	f7fe fef1 	bl	800a22a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b448:	e038      	b.n	800b4bc <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a29      	ldr	r2, [pc, #164]	; (800b4f4 <HAL_ADC_ConfigChannel+0xa54>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d133      	bne.n	800b4bc <HAL_ADC_ConfigChannel+0xa1c>
 800b454:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b458:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d12d      	bne.n	800b4bc <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4a1d      	ldr	r2, [pc, #116]	; (800b4dc <HAL_ADC_ConfigChannel+0xa3c>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d128      	bne.n	800b4bc <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4a19      	ldr	r2, [pc, #100]	; (800b4d4 <HAL_ADC_ConfigChannel+0xa34>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d004      	beq.n	800b47e <HAL_ADC_ConfigChannel+0x9de>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4a17      	ldr	r2, [pc, #92]	; (800b4d8 <HAL_ADC_ConfigChannel+0xa38>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d101      	bne.n	800b482 <HAL_ADC_ConfigChannel+0x9e2>
 800b47e:	4a19      	ldr	r2, [pc, #100]	; (800b4e4 <HAL_ADC_ConfigChannel+0xa44>)
 800b480:	e000      	b.n	800b484 <HAL_ADC_ConfigChannel+0x9e4>
 800b482:	4a13      	ldr	r2, [pc, #76]	; (800b4d0 <HAL_ADC_ConfigChannel+0xa30>)
 800b484:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b488:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b48c:	4619      	mov	r1, r3
 800b48e:	4610      	mov	r0, r2
 800b490:	f7fe fecb 	bl	800a22a <LL_ADC_SetCommonPathInternalCh>
 800b494:	e012      	b.n	800b4bc <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b49a:	f043 0220 	orr.w	r2, r3, #32
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800b4a2:	2301      	movs	r3, #1
 800b4a4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 800b4a8:	e008      	b.n	800b4bc <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4ae:	f043 0220 	orr.w	r2, r3, #32
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800b4c4:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	37e4      	adds	r7, #228	; 0xe4
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd90      	pop	{r4, r7, pc}
 800b4d0:	58026300 	.word	0x58026300
 800b4d4:	40022000 	.word	0x40022000
 800b4d8:	40022100 	.word	0x40022100
 800b4dc:	58026000 	.word	0x58026000
 800b4e0:	c7520000 	.word	0xc7520000
 800b4e4:	40022300 	.word	0x40022300
 800b4e8:	24000050 	.word	0x24000050
 800b4ec:	053e2d63 	.word	0x053e2d63
 800b4f0:	c3210000 	.word	0xc3210000
 800b4f4:	cb840000 	.word	0xcb840000

0800b4f8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a6b      	ldr	r2, [pc, #428]	; (800b6b4 <ADC_ConfigureBoostMode+0x1bc>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d004      	beq.n	800b514 <ADC_ConfigureBoostMode+0x1c>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	4a6a      	ldr	r2, [pc, #424]	; (800b6b8 <ADC_ConfigureBoostMode+0x1c0>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d109      	bne.n	800b528 <ADC_ConfigureBoostMode+0x30>
 800b514:	4b69      	ldr	r3, [pc, #420]	; (800b6bc <ADC_ConfigureBoostMode+0x1c4>)
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	bf14      	ite	ne
 800b520:	2301      	movne	r3, #1
 800b522:	2300      	moveq	r3, #0
 800b524:	b2db      	uxtb	r3, r3
 800b526:	e008      	b.n	800b53a <ADC_ConfigureBoostMode+0x42>
 800b528:	4b65      	ldr	r3, [pc, #404]	; (800b6c0 <ADC_ConfigureBoostMode+0x1c8>)
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b530:	2b00      	cmp	r3, #0
 800b532:	bf14      	ite	ne
 800b534:	2301      	movne	r3, #1
 800b536:	2300      	moveq	r3, #0
 800b538:	b2db      	uxtb	r3, r3
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d01c      	beq.n	800b578 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800b53e:	f002 fb27 	bl	800db90 <HAL_RCC_GetHCLKFreq>
 800b542:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b54c:	d010      	beq.n	800b570 <ADC_ConfigureBoostMode+0x78>
 800b54e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b552:	d871      	bhi.n	800b638 <ADC_ConfigureBoostMode+0x140>
 800b554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b558:	d002      	beq.n	800b560 <ADC_ConfigureBoostMode+0x68>
 800b55a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b55e:	d16b      	bne.n	800b638 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	0c1b      	lsrs	r3, r3, #16
 800b566:	68fa      	ldr	r2, [r7, #12]
 800b568:	fbb2 f3f3 	udiv	r3, r2, r3
 800b56c:	60fb      	str	r3, [r7, #12]
        break;
 800b56e:	e066      	b.n	800b63e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	089b      	lsrs	r3, r3, #2
 800b574:	60fb      	str	r3, [r7, #12]
        break;
 800b576:	e062      	b.n	800b63e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800b578:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800b57c:	f003 fa7a 	bl	800ea74 <HAL_RCCEx_GetPeriphCLKFreq>
 800b580:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800b58a:	d051      	beq.n	800b630 <ADC_ConfigureBoostMode+0x138>
 800b58c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800b590:	d854      	bhi.n	800b63c <ADC_ConfigureBoostMode+0x144>
 800b592:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800b596:	d047      	beq.n	800b628 <ADC_ConfigureBoostMode+0x130>
 800b598:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800b59c:	d84e      	bhi.n	800b63c <ADC_ConfigureBoostMode+0x144>
 800b59e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800b5a2:	d03d      	beq.n	800b620 <ADC_ConfigureBoostMode+0x128>
 800b5a4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800b5a8:	d848      	bhi.n	800b63c <ADC_ConfigureBoostMode+0x144>
 800b5aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5ae:	d033      	beq.n	800b618 <ADC_ConfigureBoostMode+0x120>
 800b5b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5b4:	d842      	bhi.n	800b63c <ADC_ConfigureBoostMode+0x144>
 800b5b6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800b5ba:	d029      	beq.n	800b610 <ADC_ConfigureBoostMode+0x118>
 800b5bc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800b5c0:	d83c      	bhi.n	800b63c <ADC_ConfigureBoostMode+0x144>
 800b5c2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800b5c6:	d01a      	beq.n	800b5fe <ADC_ConfigureBoostMode+0x106>
 800b5c8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800b5cc:	d836      	bhi.n	800b63c <ADC_ConfigureBoostMode+0x144>
 800b5ce:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800b5d2:	d014      	beq.n	800b5fe <ADC_ConfigureBoostMode+0x106>
 800b5d4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800b5d8:	d830      	bhi.n	800b63c <ADC_ConfigureBoostMode+0x144>
 800b5da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5de:	d00e      	beq.n	800b5fe <ADC_ConfigureBoostMode+0x106>
 800b5e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5e4:	d82a      	bhi.n	800b63c <ADC_ConfigureBoostMode+0x144>
 800b5e6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b5ea:	d008      	beq.n	800b5fe <ADC_ConfigureBoostMode+0x106>
 800b5ec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800b5f0:	d824      	bhi.n	800b63c <ADC_ConfigureBoostMode+0x144>
 800b5f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b5f6:	d002      	beq.n	800b5fe <ADC_ConfigureBoostMode+0x106>
 800b5f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b5fc:	d11e      	bne.n	800b63c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	0c9b      	lsrs	r3, r3, #18
 800b604:	005b      	lsls	r3, r3, #1
 800b606:	68fa      	ldr	r2, [r7, #12]
 800b608:	fbb2 f3f3 	udiv	r3, r2, r3
 800b60c:	60fb      	str	r3, [r7, #12]
        break;
 800b60e:	e016      	b.n	800b63e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	091b      	lsrs	r3, r3, #4
 800b614:	60fb      	str	r3, [r7, #12]
        break;
 800b616:	e012      	b.n	800b63e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	095b      	lsrs	r3, r3, #5
 800b61c:	60fb      	str	r3, [r7, #12]
        break;
 800b61e:	e00e      	b.n	800b63e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	099b      	lsrs	r3, r3, #6
 800b624:	60fb      	str	r3, [r7, #12]
        break;
 800b626:	e00a      	b.n	800b63e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	09db      	lsrs	r3, r3, #7
 800b62c:	60fb      	str	r3, [r7, #12]
        break;
 800b62e:	e006      	b.n	800b63e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	0a1b      	lsrs	r3, r3, #8
 800b634:	60fb      	str	r3, [r7, #12]
        break;
 800b636:	e002      	b.n	800b63e <ADC_ConfigureBoostMode+0x146>
        break;
 800b638:	bf00      	nop
 800b63a:	e000      	b.n	800b63e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 800b63c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	085b      	lsrs	r3, r3, #1
 800b642:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	4a1f      	ldr	r2, [pc, #124]	; (800b6c4 <ADC_ConfigureBoostMode+0x1cc>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d808      	bhi.n	800b65e <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	689a      	ldr	r2, [r3, #8]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b65a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800b65c:	e025      	b.n	800b6aa <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	4a19      	ldr	r2, [pc, #100]	; (800b6c8 <ADC_ConfigureBoostMode+0x1d0>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d80a      	bhi.n	800b67c <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b678:	609a      	str	r2, [r3, #8]
}
 800b67a:	e016      	b.n	800b6aa <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	4a13      	ldr	r2, [pc, #76]	; (800b6cc <ADC_ConfigureBoostMode+0x1d4>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d80a      	bhi.n	800b69a <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	689b      	ldr	r3, [r3, #8]
 800b68a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b696:	609a      	str	r2, [r3, #8]
}
 800b698:	e007      	b.n	800b6aa <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	689a      	ldr	r2, [r3, #8]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800b6a8:	609a      	str	r2, [r3, #8]
}
 800b6aa:	bf00      	nop
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}
 800b6b2:	bf00      	nop
 800b6b4:	40022000 	.word	0x40022000
 800b6b8:	40022100 	.word	0x40022100
 800b6bc:	40022300 	.word	0x40022300
 800b6c0:	58026300 	.word	0x58026300
 800b6c4:	005f5e10 	.word	0x005f5e10
 800b6c8:	00bebc20 	.word	0x00bebc20
 800b6cc:	017d7840 	.word	0x017d7840

0800b6d0 <LL_ADC_IsEnabled>:
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	b083      	sub	sp, #12
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	689b      	ldr	r3, [r3, #8]
 800b6dc:	f003 0301 	and.w	r3, r3, #1
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d101      	bne.n	800b6e8 <LL_ADC_IsEnabled+0x18>
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	e000      	b.n	800b6ea <LL_ADC_IsEnabled+0x1a>
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	370c      	adds	r7, #12
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr

0800b6f6 <LL_ADC_REG_IsConversionOngoing>:
{
 800b6f6:	b480      	push	{r7}
 800b6f8:	b083      	sub	sp, #12
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	f003 0304 	and.w	r3, r3, #4
 800b706:	2b04      	cmp	r3, #4
 800b708:	d101      	bne.n	800b70e <LL_ADC_REG_IsConversionOngoing+0x18>
 800b70a:	2301      	movs	r3, #1
 800b70c:	e000      	b.n	800b710 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b70e:	2300      	movs	r3, #0
}
 800b710:	4618      	mov	r0, r3
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800b71c:	b590      	push	{r4, r7, lr}
 800b71e:	b0a3      	sub	sp, #140	; 0x8c
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b726:	2300      	movs	r3, #0
 800b728:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b732:	2b01      	cmp	r3, #1
 800b734:	d101      	bne.n	800b73a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800b736:	2302      	movs	r3, #2
 800b738:	e0c1      	b.n	800b8be <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2201      	movs	r2, #1
 800b73e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800b742:	2300      	movs	r3, #0
 800b744:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800b746:	2300      	movs	r3, #0
 800b748:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	4a5e      	ldr	r2, [pc, #376]	; (800b8c8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d102      	bne.n	800b75a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800b754:	4b5d      	ldr	r3, [pc, #372]	; (800b8cc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800b756:	60fb      	str	r3, [r7, #12]
 800b758:	e001      	b.n	800b75e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800b75a:	2300      	movs	r3, #0
 800b75c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d10b      	bne.n	800b77c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b768:	f043 0220 	orr.w	r2, r3, #32
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2200      	movs	r2, #0
 800b774:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 800b778:	2301      	movs	r3, #1
 800b77a:	e0a0      	b.n	800b8be <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	4618      	mov	r0, r3
 800b780:	f7ff ffb9 	bl	800b6f6 <LL_ADC_REG_IsConversionOngoing>
 800b784:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4618      	mov	r0, r3
 800b78e:	f7ff ffb2 	bl	800b6f6 <LL_ADC_REG_IsConversionOngoing>
 800b792:	4603      	mov	r3, r0
 800b794:	2b00      	cmp	r3, #0
 800b796:	f040 8081 	bne.w	800b89c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800b79a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d17c      	bne.n	800b89c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a48      	ldr	r2, [pc, #288]	; (800b8c8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d004      	beq.n	800b7b6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4a46      	ldr	r2, [pc, #280]	; (800b8cc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800b7b2:	4293      	cmp	r3, r2
 800b7b4:	d101      	bne.n	800b7ba <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800b7b6:	4b46      	ldr	r3, [pc, #280]	; (800b8d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800b7b8:	e000      	b.n	800b7bc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800b7ba:	4b46      	ldr	r3, [pc, #280]	; (800b8d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800b7bc:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d039      	beq.n	800b83a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800b7c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b7ce:	683b      	ldr	r3, [r7, #0]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	431a      	orrs	r2, r3
 800b7d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b7d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a3a      	ldr	r2, [pc, #232]	; (800b8c8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d004      	beq.n	800b7ec <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a39      	ldr	r2, [pc, #228]	; (800b8cc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d10e      	bne.n	800b80a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800b7ec:	4836      	ldr	r0, [pc, #216]	; (800b8c8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800b7ee:	f7ff ff6f 	bl	800b6d0 <LL_ADC_IsEnabled>
 800b7f2:	4604      	mov	r4, r0
 800b7f4:	4835      	ldr	r0, [pc, #212]	; (800b8cc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800b7f6:	f7ff ff6b 	bl	800b6d0 <LL_ADC_IsEnabled>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	4323      	orrs	r3, r4
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	bf0c      	ite	eq
 800b802:	2301      	moveq	r3, #1
 800b804:	2300      	movne	r3, #0
 800b806:	b2db      	uxtb	r3, r3
 800b808:	e008      	b.n	800b81c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800b80a:	4833      	ldr	r0, [pc, #204]	; (800b8d8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800b80c:	f7ff ff60 	bl	800b6d0 <LL_ADC_IsEnabled>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	bf0c      	ite	eq
 800b816:	2301      	moveq	r3, #1
 800b818:	2300      	movne	r3, #0
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d047      	beq.n	800b8b0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800b820:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b822:	689a      	ldr	r2, [r3, #8]
 800b824:	4b2d      	ldr	r3, [pc, #180]	; (800b8dc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800b826:	4013      	ands	r3, r2
 800b828:	683a      	ldr	r2, [r7, #0]
 800b82a:	6811      	ldr	r1, [r2, #0]
 800b82c:	683a      	ldr	r2, [r7, #0]
 800b82e:	6892      	ldr	r2, [r2, #8]
 800b830:	430a      	orrs	r2, r1
 800b832:	431a      	orrs	r2, r3
 800b834:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b836:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800b838:	e03a      	b.n	800b8b0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800b83a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b842:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b844:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a1f      	ldr	r2, [pc, #124]	; (800b8c8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d004      	beq.n	800b85a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a1d      	ldr	r2, [pc, #116]	; (800b8cc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d10e      	bne.n	800b878 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800b85a:	481b      	ldr	r0, [pc, #108]	; (800b8c8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800b85c:	f7ff ff38 	bl	800b6d0 <LL_ADC_IsEnabled>
 800b860:	4604      	mov	r4, r0
 800b862:	481a      	ldr	r0, [pc, #104]	; (800b8cc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800b864:	f7ff ff34 	bl	800b6d0 <LL_ADC_IsEnabled>
 800b868:	4603      	mov	r3, r0
 800b86a:	4323      	orrs	r3, r4
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	bf0c      	ite	eq
 800b870:	2301      	moveq	r3, #1
 800b872:	2300      	movne	r3, #0
 800b874:	b2db      	uxtb	r3, r3
 800b876:	e008      	b.n	800b88a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800b878:	4817      	ldr	r0, [pc, #92]	; (800b8d8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800b87a:	f7ff ff29 	bl	800b6d0 <LL_ADC_IsEnabled>
 800b87e:	4603      	mov	r3, r0
 800b880:	2b00      	cmp	r3, #0
 800b882:	bf0c      	ite	eq
 800b884:	2301      	moveq	r3, #1
 800b886:	2300      	movne	r3, #0
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d010      	beq.n	800b8b0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800b88e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b890:	689a      	ldr	r2, [r3, #8]
 800b892:	4b12      	ldr	r3, [pc, #72]	; (800b8dc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800b894:	4013      	ands	r3, r2
 800b896:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b898:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800b89a:	e009      	b.n	800b8b0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8a0:	f043 0220 	orr.w	r2, r3, #32
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800b8ae:	e000      	b.n	800b8b2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800b8b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800b8ba:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	378c      	adds	r7, #140	; 0x8c
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd90      	pop	{r4, r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	40022000 	.word	0x40022000
 800b8cc:	40022100 	.word	0x40022100
 800b8d0:	40022300 	.word	0x40022300
 800b8d4:	58026300 	.word	0x58026300
 800b8d8:	58026000 	.word	0x58026000
 800b8dc:	fffff0e0 	.word	0xfffff0e0

0800b8e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f003 0307 	and.w	r3, r3, #7
 800b8ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b8f0:	4b0b      	ldr	r3, [pc, #44]	; (800b920 <__NVIC_SetPriorityGrouping+0x40>)
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b8f6:	68ba      	ldr	r2, [r7, #8]
 800b8f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b8fc:	4013      	ands	r3, r2
 800b8fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b908:	4b06      	ldr	r3, [pc, #24]	; (800b924 <__NVIC_SetPriorityGrouping+0x44>)
 800b90a:	4313      	orrs	r3, r2
 800b90c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b90e:	4a04      	ldr	r2, [pc, #16]	; (800b920 <__NVIC_SetPriorityGrouping+0x40>)
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	60d3      	str	r3, [r2, #12]
}
 800b914:	bf00      	nop
 800b916:	3714      	adds	r7, #20
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr
 800b920:	e000ed00 	.word	0xe000ed00
 800b924:	05fa0000 	.word	0x05fa0000

0800b928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b928:	b480      	push	{r7}
 800b92a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b92c:	4b04      	ldr	r3, [pc, #16]	; (800b940 <__NVIC_GetPriorityGrouping+0x18>)
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	0a1b      	lsrs	r3, r3, #8
 800b932:	f003 0307 	and.w	r3, r3, #7
}
 800b936:	4618      	mov	r0, r3
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr
 800b940:	e000ed00 	.word	0xe000ed00

0800b944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	4603      	mov	r3, r0
 800b94c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b94e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b952:	2b00      	cmp	r3, #0
 800b954:	db0b      	blt.n	800b96e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b956:	88fb      	ldrh	r3, [r7, #6]
 800b958:	f003 021f 	and.w	r2, r3, #31
 800b95c:	4907      	ldr	r1, [pc, #28]	; (800b97c <__NVIC_EnableIRQ+0x38>)
 800b95e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b962:	095b      	lsrs	r3, r3, #5
 800b964:	2001      	movs	r0, #1
 800b966:	fa00 f202 	lsl.w	r2, r0, r2
 800b96a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b96e:	bf00      	nop
 800b970:	370c      	adds	r7, #12
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr
 800b97a:	bf00      	nop
 800b97c:	e000e100 	.word	0xe000e100

0800b980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b980:	b480      	push	{r7}
 800b982:	b083      	sub	sp, #12
 800b984:	af00      	add	r7, sp, #0
 800b986:	4603      	mov	r3, r0
 800b988:	6039      	str	r1, [r7, #0]
 800b98a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b98c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b990:	2b00      	cmp	r3, #0
 800b992:	db0a      	blt.n	800b9aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	b2da      	uxtb	r2, r3
 800b998:	490c      	ldr	r1, [pc, #48]	; (800b9cc <__NVIC_SetPriority+0x4c>)
 800b99a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b99e:	0112      	lsls	r2, r2, #4
 800b9a0:	b2d2      	uxtb	r2, r2
 800b9a2:	440b      	add	r3, r1
 800b9a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b9a8:	e00a      	b.n	800b9c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	b2da      	uxtb	r2, r3
 800b9ae:	4908      	ldr	r1, [pc, #32]	; (800b9d0 <__NVIC_SetPriority+0x50>)
 800b9b0:	88fb      	ldrh	r3, [r7, #6]
 800b9b2:	f003 030f 	and.w	r3, r3, #15
 800b9b6:	3b04      	subs	r3, #4
 800b9b8:	0112      	lsls	r2, r2, #4
 800b9ba:	b2d2      	uxtb	r2, r2
 800b9bc:	440b      	add	r3, r1
 800b9be:	761a      	strb	r2, [r3, #24]
}
 800b9c0:	bf00      	nop
 800b9c2:	370c      	adds	r7, #12
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr
 800b9cc:	e000e100 	.word	0xe000e100
 800b9d0:	e000ed00 	.word	0xe000ed00

0800b9d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b089      	sub	sp, #36	; 0x24
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f003 0307 	and.w	r3, r3, #7
 800b9e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	f1c3 0307 	rsb	r3, r3, #7
 800b9ee:	2b04      	cmp	r3, #4
 800b9f0:	bf28      	it	cs
 800b9f2:	2304      	movcs	r3, #4
 800b9f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b9f6:	69fb      	ldr	r3, [r7, #28]
 800b9f8:	3304      	adds	r3, #4
 800b9fa:	2b06      	cmp	r3, #6
 800b9fc:	d902      	bls.n	800ba04 <NVIC_EncodePriority+0x30>
 800b9fe:	69fb      	ldr	r3, [r7, #28]
 800ba00:	3b03      	subs	r3, #3
 800ba02:	e000      	b.n	800ba06 <NVIC_EncodePriority+0x32>
 800ba04:	2300      	movs	r3, #0
 800ba06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ba08:	f04f 32ff 	mov.w	r2, #4294967295
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba12:	43da      	mvns	r2, r3
 800ba14:	68bb      	ldr	r3, [r7, #8]
 800ba16:	401a      	ands	r2, r3
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ba1c:	f04f 31ff 	mov.w	r1, #4294967295
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	fa01 f303 	lsl.w	r3, r1, r3
 800ba26:	43d9      	mvns	r1, r3
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ba2c:	4313      	orrs	r3, r2
         );
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3724      	adds	r7, #36	; 0x24
 800ba32:	46bd      	mov	sp, r7
 800ba34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba38:	4770      	bx	lr
	...

0800ba3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	3b01      	subs	r3, #1
 800ba48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ba4c:	d301      	bcc.n	800ba52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ba4e:	2301      	movs	r3, #1
 800ba50:	e00f      	b.n	800ba72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ba52:	4a0a      	ldr	r2, [pc, #40]	; (800ba7c <SysTick_Config+0x40>)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	3b01      	subs	r3, #1
 800ba58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ba5a:	210f      	movs	r1, #15
 800ba5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba60:	f7ff ff8e 	bl	800b980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ba64:	4b05      	ldr	r3, [pc, #20]	; (800ba7c <SysTick_Config+0x40>)
 800ba66:	2200      	movs	r2, #0
 800ba68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ba6a:	4b04      	ldr	r3, [pc, #16]	; (800ba7c <SysTick_Config+0x40>)
 800ba6c:	2207      	movs	r2, #7
 800ba6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ba70:	2300      	movs	r3, #0
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3708      	adds	r7, #8
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	e000e010 	.word	0xe000e010

0800ba80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b082      	sub	sp, #8
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ba88:	6878      	ldr	r0, [r7, #4]
 800ba8a:	f7ff ff29 	bl	800b8e0 <__NVIC_SetPriorityGrouping>
}
 800ba8e:	bf00      	nop
 800ba90:	3708      	adds	r7, #8
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b086      	sub	sp, #24
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	60b9      	str	r1, [r7, #8]
 800baa0:	607a      	str	r2, [r7, #4]
 800baa2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800baa4:	f7ff ff40 	bl	800b928 <__NVIC_GetPriorityGrouping>
 800baa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	68b9      	ldr	r1, [r7, #8]
 800baae:	6978      	ldr	r0, [r7, #20]
 800bab0:	f7ff ff90 	bl	800b9d4 <NVIC_EncodePriority>
 800bab4:	4602      	mov	r2, r0
 800bab6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800baba:	4611      	mov	r1, r2
 800babc:	4618      	mov	r0, r3
 800babe:	f7ff ff5f 	bl	800b980 <__NVIC_SetPriority>
}
 800bac2:	bf00      	nop
 800bac4:	3718      	adds	r7, #24
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b082      	sub	sp, #8
 800bace:	af00      	add	r7, sp, #0
 800bad0:	4603      	mov	r3, r0
 800bad2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bad4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bad8:	4618      	mov	r0, r3
 800bada:	f7ff ff33 	bl	800b944 <__NVIC_EnableIRQ>
}
 800bade:	bf00      	nop
 800bae0:	3708      	adds	r7, #8
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}

0800bae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800bae6:	b580      	push	{r7, lr}
 800bae8:	b082      	sub	sp, #8
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f7ff ffa4 	bl	800ba3c <SysTick_Config>
 800baf4:	4603      	mov	r3, r0
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3708      	adds	r7, #8
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
	...

0800bb00 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d101      	bne.n	800bb12 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e054      	b.n	800bbbc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	7f5b      	ldrb	r3, [r3, #29]
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d105      	bne.n	800bb28 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2200      	movs	r2, #0
 800bb20:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f7fb febe 	bl	80078a4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2202      	movs	r2, #2
 800bb2c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	791b      	ldrb	r3, [r3, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d10c      	bne.n	800bb50 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4a22      	ldr	r2, [pc, #136]	; (800bbc4 <HAL_CRC_Init+0xc4>)
 800bb3c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	689a      	ldr	r2, [r3, #8]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f022 0218 	bic.w	r2, r2, #24
 800bb4c:	609a      	str	r2, [r3, #8]
 800bb4e:	e00c      	b.n	800bb6a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6899      	ldr	r1, [r3, #8]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	461a      	mov	r2, r3
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 f948 	bl	800bdf0 <HAL_CRCEx_Polynomial_Set>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d001      	beq.n	800bb6a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800bb66:	2301      	movs	r3, #1
 800bb68:	e028      	b.n	800bbbc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	795b      	ldrb	r3, [r3, #5]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d105      	bne.n	800bb7e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f04f 32ff 	mov.w	r2, #4294967295
 800bb7a:	611a      	str	r2, [r3, #16]
 800bb7c:	e004      	b.n	800bb88 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	6912      	ldr	r2, [r2, #16]
 800bb86:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	689b      	ldr	r3, [r3, #8]
 800bb8e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	695a      	ldr	r2, [r3, #20]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	430a      	orrs	r2, r1
 800bb9c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	699a      	ldr	r2, [r3, #24]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	430a      	orrs	r2, r1
 800bbb2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800bbba:	2300      	movs	r3, #0
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3708      	adds	r7, #8
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	04c11db7 	.word	0x04c11db7

0800bbc8 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b086      	sub	sp, #24
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2202      	movs	r2, #2
 800bbdc:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	689a      	ldr	r2, [r3, #8]
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f042 0201 	orr.w	r2, r2, #1
 800bbec:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	6a1b      	ldr	r3, [r3, #32]
 800bbf2:	2b03      	cmp	r3, #3
 800bbf4:	d006      	beq.n	800bc04 <HAL_CRC_Calculate+0x3c>
 800bbf6:	2b03      	cmp	r3, #3
 800bbf8:	d829      	bhi.n	800bc4e <HAL_CRC_Calculate+0x86>
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d019      	beq.n	800bc32 <HAL_CRC_Calculate+0x6a>
 800bbfe:	2b02      	cmp	r3, #2
 800bc00:	d01e      	beq.n	800bc40 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800bc02:	e024      	b.n	800bc4e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 800bc04:	2300      	movs	r3, #0
 800bc06:	617b      	str	r3, [r7, #20]
 800bc08:	e00a      	b.n	800bc20 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	009b      	lsls	r3, r3, #2
 800bc0e:	68ba      	ldr	r2, [r7, #8]
 800bc10:	441a      	add	r2, r3
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	6812      	ldr	r2, [r2, #0]
 800bc18:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	617b      	str	r3, [r7, #20]
 800bc20:	697a      	ldr	r2, [r7, #20]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d3f0      	bcc.n	800bc0a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	613b      	str	r3, [r7, #16]
      break;
 800bc30:	e00e      	b.n	800bc50 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	68b9      	ldr	r1, [r7, #8]
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	f000 f812 	bl	800bc60 <CRC_Handle_8>
 800bc3c:	6138      	str	r0, [r7, #16]
      break;
 800bc3e:	e007      	b.n	800bc50 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	68b9      	ldr	r1, [r7, #8]
 800bc44:	68f8      	ldr	r0, [r7, #12]
 800bc46:	f000 f899 	bl	800bd7c <CRC_Handle_16>
 800bc4a:	6138      	str	r0, [r7, #16]
      break;
 800bc4c:	e000      	b.n	800bc50 <HAL_CRC_Calculate+0x88>
      break;
 800bc4e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2201      	movs	r2, #1
 800bc54:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800bc56:	693b      	ldr	r3, [r7, #16]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3718      	adds	r7, #24
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}

0800bc60 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b089      	sub	sp, #36	; 0x24
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	61fb      	str	r3, [r7, #28]
 800bc70:	e023      	b.n	800bcba <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800bc72:	69fb      	ldr	r3, [r7, #28]
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	68ba      	ldr	r2, [r7, #8]
 800bc78:	4413      	add	r3, r2
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800bc7e:	69fb      	ldr	r3, [r7, #28]
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	3301      	adds	r3, #1
 800bc84:	68b9      	ldr	r1, [r7, #8]
 800bc86:	440b      	add	r3, r1
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800bc8c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	3302      	adds	r3, #2
 800bc94:	68b9      	ldr	r1, [r7, #8]
 800bc96:	440b      	add	r3, r1
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800bc9c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	3303      	adds	r3, #3
 800bca4:	68b9      	ldr	r1, [r7, #8]
 800bca6:	440b      	add	r3, r1
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800bcb0:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800bcb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800bcb4:	69fb      	ldr	r3, [r7, #28]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	61fb      	str	r3, [r7, #28]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	089b      	lsrs	r3, r3, #2
 800bcbe:	69fa      	ldr	r2, [r7, #28]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d3d6      	bcc.n	800bc72 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f003 0303 	and.w	r3, r3, #3
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d04d      	beq.n	800bd6a <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f003 0303 	and.w	r3, r3, #3
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d107      	bne.n	800bce8 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800bcd8:	69fb      	ldr	r3, [r7, #28]
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	68ba      	ldr	r2, [r7, #8]
 800bcde:	4413      	add	r3, r2
 800bce0:	68fa      	ldr	r2, [r7, #12]
 800bce2:	6812      	ldr	r2, [r2, #0]
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f003 0303 	and.w	r3, r3, #3
 800bcee:	2b02      	cmp	r3, #2
 800bcf0:	d116      	bne.n	800bd20 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	68ba      	ldr	r2, [r7, #8]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	021b      	lsls	r3, r3, #8
 800bcfe:	b21a      	sxth	r2, r3
 800bd00:	69fb      	ldr	r3, [r7, #28]
 800bd02:	009b      	lsls	r3, r3, #2
 800bd04:	3301      	adds	r3, #1
 800bd06:	68b9      	ldr	r1, [r7, #8]
 800bd08:	440b      	add	r3, r1
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	b21b      	sxth	r3, r3
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	b21b      	sxth	r3, r3
 800bd12:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	8b7a      	ldrh	r2, [r7, #26]
 800bd1e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f003 0303 	and.w	r3, r3, #3
 800bd26:	2b03      	cmp	r3, #3
 800bd28:	d11f      	bne.n	800bd6a <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800bd2a:	69fb      	ldr	r3, [r7, #28]
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	68ba      	ldr	r2, [r7, #8]
 800bd30:	4413      	add	r3, r2
 800bd32:	781b      	ldrb	r3, [r3, #0]
 800bd34:	021b      	lsls	r3, r3, #8
 800bd36:	b21a      	sxth	r2, r3
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	3301      	adds	r3, #1
 800bd3e:	68b9      	ldr	r1, [r7, #8]
 800bd40:	440b      	add	r3, r1
 800bd42:	781b      	ldrb	r3, [r3, #0]
 800bd44:	b21b      	sxth	r3, r3
 800bd46:	4313      	orrs	r3, r2
 800bd48:	b21b      	sxth	r3, r3
 800bd4a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	8b7a      	ldrh	r2, [r7, #26]
 800bd56:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	3302      	adds	r3, #2
 800bd5e:	68ba      	ldr	r2, [r7, #8]
 800bd60:	4413      	add	r3, r2
 800bd62:	68fa      	ldr	r2, [r7, #12]
 800bd64:	6812      	ldr	r2, [r2, #0]
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	681b      	ldr	r3, [r3, #0]
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3724      	adds	r7, #36	; 0x24
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr

0800bd7c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b087      	sub	sp, #28
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800bd88:	2300      	movs	r3, #0
 800bd8a:	617b      	str	r3, [r7, #20]
 800bd8c:	e013      	b.n	800bdb6 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	68ba      	ldr	r2, [r7, #8]
 800bd94:	4413      	add	r3, r2
 800bd96:	881b      	ldrh	r3, [r3, #0]
 800bd98:	041a      	lsls	r2, r3, #16
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	3302      	adds	r3, #2
 800bda0:	68b9      	ldr	r1, [r7, #8]
 800bda2:	440b      	add	r3, r1
 800bda4:	881b      	ldrh	r3, [r3, #0]
 800bda6:	4619      	mov	r1, r3
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	430a      	orrs	r2, r1
 800bdae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	617b      	str	r3, [r7, #20]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	085b      	lsrs	r3, r3, #1
 800bdba:	697a      	ldr	r2, [r7, #20]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d3e6      	bcc.n	800bd8e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f003 0301 	and.w	r3, r3, #1
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d009      	beq.n	800bdde <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	68ba      	ldr	r2, [r7, #8]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	881a      	ldrh	r2, [r3, #0]
 800bdda:	693b      	ldr	r3, [r7, #16]
 800bddc:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	681b      	ldr	r3, [r3, #0]
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	371c      	adds	r7, #28
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr

0800bdf0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b087      	sub	sp, #28
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800be00:	231f      	movs	r3, #31
 800be02:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800be04:	bf00      	nop
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	1e5a      	subs	r2, r3, #1
 800be0a:	613a      	str	r2, [r7, #16]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d009      	beq.n	800be24 <HAL_CRCEx_Polynomial_Set+0x34>
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	f003 031f 	and.w	r3, r3, #31
 800be16:	68ba      	ldr	r2, [r7, #8]
 800be18:	fa22 f303 	lsr.w	r3, r2, r3
 800be1c:	f003 0301 	and.w	r3, r3, #1
 800be20:	2b00      	cmp	r3, #0
 800be22:	d0f0      	beq.n	800be06 <HAL_CRCEx_Polynomial_Set+0x16>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2b18      	cmp	r3, #24
 800be28:	d846      	bhi.n	800beb8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800be2a:	a201      	add	r2, pc, #4	; (adr r2, 800be30 <HAL_CRCEx_Polynomial_Set+0x40>)
 800be2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be30:	0800bebf 	.word	0x0800bebf
 800be34:	0800beb9 	.word	0x0800beb9
 800be38:	0800beb9 	.word	0x0800beb9
 800be3c:	0800beb9 	.word	0x0800beb9
 800be40:	0800beb9 	.word	0x0800beb9
 800be44:	0800beb9 	.word	0x0800beb9
 800be48:	0800beb9 	.word	0x0800beb9
 800be4c:	0800beb9 	.word	0x0800beb9
 800be50:	0800bead 	.word	0x0800bead
 800be54:	0800beb9 	.word	0x0800beb9
 800be58:	0800beb9 	.word	0x0800beb9
 800be5c:	0800beb9 	.word	0x0800beb9
 800be60:	0800beb9 	.word	0x0800beb9
 800be64:	0800beb9 	.word	0x0800beb9
 800be68:	0800beb9 	.word	0x0800beb9
 800be6c:	0800beb9 	.word	0x0800beb9
 800be70:	0800bea1 	.word	0x0800bea1
 800be74:	0800beb9 	.word	0x0800beb9
 800be78:	0800beb9 	.word	0x0800beb9
 800be7c:	0800beb9 	.word	0x0800beb9
 800be80:	0800beb9 	.word	0x0800beb9
 800be84:	0800beb9 	.word	0x0800beb9
 800be88:	0800beb9 	.word	0x0800beb9
 800be8c:	0800beb9 	.word	0x0800beb9
 800be90:	0800be95 	.word	0x0800be95
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	2b06      	cmp	r3, #6
 800be98:	d913      	bls.n	800bec2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800be9e:	e010      	b.n	800bec2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	2b07      	cmp	r3, #7
 800bea4:	d90f      	bls.n	800bec6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800bea6:	2301      	movs	r3, #1
 800bea8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800beaa:	e00c      	b.n	800bec6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	2b0f      	cmp	r3, #15
 800beb0:	d90b      	bls.n	800beca <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800beb2:	2301      	movs	r3, #1
 800beb4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800beb6:	e008      	b.n	800beca <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800beb8:	2301      	movs	r3, #1
 800beba:	75fb      	strb	r3, [r7, #23]
      break;
 800bebc:	e006      	b.n	800becc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800bebe:	bf00      	nop
 800bec0:	e004      	b.n	800becc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800bec2:	bf00      	nop
 800bec4:	e002      	b.n	800becc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800bec6:	bf00      	nop
 800bec8:	e000      	b.n	800becc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800beca:	bf00      	nop
  }
  if (status == HAL_OK)
 800becc:	7dfb      	ldrb	r3, [r7, #23]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d10d      	bne.n	800beee <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	68ba      	ldr	r2, [r7, #8]
 800bed8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	f023 0118 	bic.w	r1, r3, #24
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	430a      	orrs	r2, r1
 800beec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800beee:	7dfb      	ldrb	r3, [r7, #23]
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	371c      	adds	r7, #28
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr

0800befc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b086      	sub	sp, #24
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800bf04:	f7fe f972 	bl	800a1ec <HAL_GetTick>
 800bf08:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d101      	bne.n	800bf14 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800bf10:	2301      	movs	r3, #1
 800bf12:	e2dc      	b.n	800c4ce <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	2b02      	cmp	r3, #2
 800bf1e:	d008      	beq.n	800bf32 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2280      	movs	r2, #128	; 0x80
 800bf24:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800bf2e:	2301      	movs	r3, #1
 800bf30:	e2cd      	b.n	800c4ce <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a76      	ldr	r2, [pc, #472]	; (800c110 <HAL_DMA_Abort+0x214>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d04a      	beq.n	800bfd2 <HAL_DMA_Abort+0xd6>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a74      	ldr	r2, [pc, #464]	; (800c114 <HAL_DMA_Abort+0x218>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d045      	beq.n	800bfd2 <HAL_DMA_Abort+0xd6>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a73      	ldr	r2, [pc, #460]	; (800c118 <HAL_DMA_Abort+0x21c>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d040      	beq.n	800bfd2 <HAL_DMA_Abort+0xd6>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a71      	ldr	r2, [pc, #452]	; (800c11c <HAL_DMA_Abort+0x220>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d03b      	beq.n	800bfd2 <HAL_DMA_Abort+0xd6>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a70      	ldr	r2, [pc, #448]	; (800c120 <HAL_DMA_Abort+0x224>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d036      	beq.n	800bfd2 <HAL_DMA_Abort+0xd6>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a6e      	ldr	r2, [pc, #440]	; (800c124 <HAL_DMA_Abort+0x228>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d031      	beq.n	800bfd2 <HAL_DMA_Abort+0xd6>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4a6d      	ldr	r2, [pc, #436]	; (800c128 <HAL_DMA_Abort+0x22c>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d02c      	beq.n	800bfd2 <HAL_DMA_Abort+0xd6>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a6b      	ldr	r2, [pc, #428]	; (800c12c <HAL_DMA_Abort+0x230>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d027      	beq.n	800bfd2 <HAL_DMA_Abort+0xd6>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a6a      	ldr	r2, [pc, #424]	; (800c130 <HAL_DMA_Abort+0x234>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d022      	beq.n	800bfd2 <HAL_DMA_Abort+0xd6>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a68      	ldr	r2, [pc, #416]	; (800c134 <HAL_DMA_Abort+0x238>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d01d      	beq.n	800bfd2 <HAL_DMA_Abort+0xd6>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a67      	ldr	r2, [pc, #412]	; (800c138 <HAL_DMA_Abort+0x23c>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d018      	beq.n	800bfd2 <HAL_DMA_Abort+0xd6>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a65      	ldr	r2, [pc, #404]	; (800c13c <HAL_DMA_Abort+0x240>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d013      	beq.n	800bfd2 <HAL_DMA_Abort+0xd6>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4a64      	ldr	r2, [pc, #400]	; (800c140 <HAL_DMA_Abort+0x244>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d00e      	beq.n	800bfd2 <HAL_DMA_Abort+0xd6>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	4a62      	ldr	r2, [pc, #392]	; (800c144 <HAL_DMA_Abort+0x248>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d009      	beq.n	800bfd2 <HAL_DMA_Abort+0xd6>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4a61      	ldr	r2, [pc, #388]	; (800c148 <HAL_DMA_Abort+0x24c>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d004      	beq.n	800bfd2 <HAL_DMA_Abort+0xd6>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4a5f      	ldr	r2, [pc, #380]	; (800c14c <HAL_DMA_Abort+0x250>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d101      	bne.n	800bfd6 <HAL_DMA_Abort+0xda>
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	e000      	b.n	800bfd8 <HAL_DMA_Abort+0xdc>
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d013      	beq.n	800c004 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	681a      	ldr	r2, [r3, #0]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f022 021e 	bic.w	r2, r2, #30
 800bfea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	695a      	ldr	r2, [r3, #20]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bffa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	617b      	str	r3, [r7, #20]
 800c002:	e00a      	b.n	800c01a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f022 020e 	bic.w	r2, r2, #14
 800c012:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	4a3c      	ldr	r2, [pc, #240]	; (800c110 <HAL_DMA_Abort+0x214>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d072      	beq.n	800c10a <HAL_DMA_Abort+0x20e>
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4a3a      	ldr	r2, [pc, #232]	; (800c114 <HAL_DMA_Abort+0x218>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d06d      	beq.n	800c10a <HAL_DMA_Abort+0x20e>
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4a39      	ldr	r2, [pc, #228]	; (800c118 <HAL_DMA_Abort+0x21c>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d068      	beq.n	800c10a <HAL_DMA_Abort+0x20e>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4a37      	ldr	r2, [pc, #220]	; (800c11c <HAL_DMA_Abort+0x220>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d063      	beq.n	800c10a <HAL_DMA_Abort+0x20e>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	4a36      	ldr	r2, [pc, #216]	; (800c120 <HAL_DMA_Abort+0x224>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d05e      	beq.n	800c10a <HAL_DMA_Abort+0x20e>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	4a34      	ldr	r2, [pc, #208]	; (800c124 <HAL_DMA_Abort+0x228>)
 800c052:	4293      	cmp	r3, r2
 800c054:	d059      	beq.n	800c10a <HAL_DMA_Abort+0x20e>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a33      	ldr	r2, [pc, #204]	; (800c128 <HAL_DMA_Abort+0x22c>)
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d054      	beq.n	800c10a <HAL_DMA_Abort+0x20e>
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4a31      	ldr	r2, [pc, #196]	; (800c12c <HAL_DMA_Abort+0x230>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d04f      	beq.n	800c10a <HAL_DMA_Abort+0x20e>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4a30      	ldr	r2, [pc, #192]	; (800c130 <HAL_DMA_Abort+0x234>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d04a      	beq.n	800c10a <HAL_DMA_Abort+0x20e>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4a2e      	ldr	r2, [pc, #184]	; (800c134 <HAL_DMA_Abort+0x238>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d045      	beq.n	800c10a <HAL_DMA_Abort+0x20e>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4a2d      	ldr	r2, [pc, #180]	; (800c138 <HAL_DMA_Abort+0x23c>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d040      	beq.n	800c10a <HAL_DMA_Abort+0x20e>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	4a2b      	ldr	r2, [pc, #172]	; (800c13c <HAL_DMA_Abort+0x240>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d03b      	beq.n	800c10a <HAL_DMA_Abort+0x20e>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a2a      	ldr	r2, [pc, #168]	; (800c140 <HAL_DMA_Abort+0x244>)
 800c098:	4293      	cmp	r3, r2
 800c09a:	d036      	beq.n	800c10a <HAL_DMA_Abort+0x20e>
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4a28      	ldr	r2, [pc, #160]	; (800c144 <HAL_DMA_Abort+0x248>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d031      	beq.n	800c10a <HAL_DMA_Abort+0x20e>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a27      	ldr	r2, [pc, #156]	; (800c148 <HAL_DMA_Abort+0x24c>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d02c      	beq.n	800c10a <HAL_DMA_Abort+0x20e>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	4a25      	ldr	r2, [pc, #148]	; (800c14c <HAL_DMA_Abort+0x250>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d027      	beq.n	800c10a <HAL_DMA_Abort+0x20e>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	4a24      	ldr	r2, [pc, #144]	; (800c150 <HAL_DMA_Abort+0x254>)
 800c0c0:	4293      	cmp	r3, r2
 800c0c2:	d022      	beq.n	800c10a <HAL_DMA_Abort+0x20e>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4a22      	ldr	r2, [pc, #136]	; (800c154 <HAL_DMA_Abort+0x258>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d01d      	beq.n	800c10a <HAL_DMA_Abort+0x20e>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4a21      	ldr	r2, [pc, #132]	; (800c158 <HAL_DMA_Abort+0x25c>)
 800c0d4:	4293      	cmp	r3, r2
 800c0d6:	d018      	beq.n	800c10a <HAL_DMA_Abort+0x20e>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	4a1f      	ldr	r2, [pc, #124]	; (800c15c <HAL_DMA_Abort+0x260>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d013      	beq.n	800c10a <HAL_DMA_Abort+0x20e>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4a1e      	ldr	r2, [pc, #120]	; (800c160 <HAL_DMA_Abort+0x264>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d00e      	beq.n	800c10a <HAL_DMA_Abort+0x20e>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a1c      	ldr	r2, [pc, #112]	; (800c164 <HAL_DMA_Abort+0x268>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d009      	beq.n	800c10a <HAL_DMA_Abort+0x20e>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	4a1b      	ldr	r2, [pc, #108]	; (800c168 <HAL_DMA_Abort+0x26c>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d004      	beq.n	800c10a <HAL_DMA_Abort+0x20e>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	4a19      	ldr	r2, [pc, #100]	; (800c16c <HAL_DMA_Abort+0x270>)
 800c106:	4293      	cmp	r3, r2
 800c108:	d132      	bne.n	800c170 <HAL_DMA_Abort+0x274>
 800c10a:	2301      	movs	r3, #1
 800c10c:	e031      	b.n	800c172 <HAL_DMA_Abort+0x276>
 800c10e:	bf00      	nop
 800c110:	40020010 	.word	0x40020010
 800c114:	40020028 	.word	0x40020028
 800c118:	40020040 	.word	0x40020040
 800c11c:	40020058 	.word	0x40020058
 800c120:	40020070 	.word	0x40020070
 800c124:	40020088 	.word	0x40020088
 800c128:	400200a0 	.word	0x400200a0
 800c12c:	400200b8 	.word	0x400200b8
 800c130:	40020410 	.word	0x40020410
 800c134:	40020428 	.word	0x40020428
 800c138:	40020440 	.word	0x40020440
 800c13c:	40020458 	.word	0x40020458
 800c140:	40020470 	.word	0x40020470
 800c144:	40020488 	.word	0x40020488
 800c148:	400204a0 	.word	0x400204a0
 800c14c:	400204b8 	.word	0x400204b8
 800c150:	58025408 	.word	0x58025408
 800c154:	5802541c 	.word	0x5802541c
 800c158:	58025430 	.word	0x58025430
 800c15c:	58025444 	.word	0x58025444
 800c160:	58025458 	.word	0x58025458
 800c164:	5802546c 	.word	0x5802546c
 800c168:	58025480 	.word	0x58025480
 800c16c:	58025494 	.word	0x58025494
 800c170:	2300      	movs	r3, #0
 800c172:	2b00      	cmp	r3, #0
 800c174:	d007      	beq.n	800c186 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c184:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4a6d      	ldr	r2, [pc, #436]	; (800c340 <HAL_DMA_Abort+0x444>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d04a      	beq.n	800c226 <HAL_DMA_Abort+0x32a>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4a6b      	ldr	r2, [pc, #428]	; (800c344 <HAL_DMA_Abort+0x448>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d045      	beq.n	800c226 <HAL_DMA_Abort+0x32a>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4a6a      	ldr	r2, [pc, #424]	; (800c348 <HAL_DMA_Abort+0x44c>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d040      	beq.n	800c226 <HAL_DMA_Abort+0x32a>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	4a68      	ldr	r2, [pc, #416]	; (800c34c <HAL_DMA_Abort+0x450>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d03b      	beq.n	800c226 <HAL_DMA_Abort+0x32a>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	4a67      	ldr	r2, [pc, #412]	; (800c350 <HAL_DMA_Abort+0x454>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d036      	beq.n	800c226 <HAL_DMA_Abort+0x32a>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	4a65      	ldr	r2, [pc, #404]	; (800c354 <HAL_DMA_Abort+0x458>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d031      	beq.n	800c226 <HAL_DMA_Abort+0x32a>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4a64      	ldr	r2, [pc, #400]	; (800c358 <HAL_DMA_Abort+0x45c>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d02c      	beq.n	800c226 <HAL_DMA_Abort+0x32a>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4a62      	ldr	r2, [pc, #392]	; (800c35c <HAL_DMA_Abort+0x460>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d027      	beq.n	800c226 <HAL_DMA_Abort+0x32a>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a61      	ldr	r2, [pc, #388]	; (800c360 <HAL_DMA_Abort+0x464>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d022      	beq.n	800c226 <HAL_DMA_Abort+0x32a>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	4a5f      	ldr	r2, [pc, #380]	; (800c364 <HAL_DMA_Abort+0x468>)
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d01d      	beq.n	800c226 <HAL_DMA_Abort+0x32a>
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4a5e      	ldr	r2, [pc, #376]	; (800c368 <HAL_DMA_Abort+0x46c>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d018      	beq.n	800c226 <HAL_DMA_Abort+0x32a>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4a5c      	ldr	r2, [pc, #368]	; (800c36c <HAL_DMA_Abort+0x470>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d013      	beq.n	800c226 <HAL_DMA_Abort+0x32a>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	4a5b      	ldr	r2, [pc, #364]	; (800c370 <HAL_DMA_Abort+0x474>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d00e      	beq.n	800c226 <HAL_DMA_Abort+0x32a>
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	4a59      	ldr	r2, [pc, #356]	; (800c374 <HAL_DMA_Abort+0x478>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d009      	beq.n	800c226 <HAL_DMA_Abort+0x32a>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4a58      	ldr	r2, [pc, #352]	; (800c378 <HAL_DMA_Abort+0x47c>)
 800c218:	4293      	cmp	r3, r2
 800c21a:	d004      	beq.n	800c226 <HAL_DMA_Abort+0x32a>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	4a56      	ldr	r2, [pc, #344]	; (800c37c <HAL_DMA_Abort+0x480>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d108      	bne.n	800c238 <HAL_DMA_Abort+0x33c>
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f022 0201 	bic.w	r2, r2, #1
 800c234:	601a      	str	r2, [r3, #0]
 800c236:	e007      	b.n	800c248 <HAL_DMA_Abort+0x34c>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f022 0201 	bic.w	r2, r2, #1
 800c246:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c248:	e013      	b.n	800c272 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c24a:	f7fd ffcf 	bl	800a1ec <HAL_GetTick>
 800c24e:	4602      	mov	r2, r0
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	1ad3      	subs	r3, r2, r3
 800c254:	2b05      	cmp	r3, #5
 800c256:	d90c      	bls.n	800c272 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2220      	movs	r2, #32
 800c25c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2203      	movs	r2, #3
 800c262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2200      	movs	r2, #0
 800c26a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800c26e:	2301      	movs	r3, #1
 800c270:	e12d      	b.n	800c4ce <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f003 0301 	and.w	r3, r3, #1
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d1e5      	bne.n	800c24a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a2f      	ldr	r2, [pc, #188]	; (800c340 <HAL_DMA_Abort+0x444>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d04a      	beq.n	800c31e <HAL_DMA_Abort+0x422>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a2d      	ldr	r2, [pc, #180]	; (800c344 <HAL_DMA_Abort+0x448>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d045      	beq.n	800c31e <HAL_DMA_Abort+0x422>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a2c      	ldr	r2, [pc, #176]	; (800c348 <HAL_DMA_Abort+0x44c>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d040      	beq.n	800c31e <HAL_DMA_Abort+0x422>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a2a      	ldr	r2, [pc, #168]	; (800c34c <HAL_DMA_Abort+0x450>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d03b      	beq.n	800c31e <HAL_DMA_Abort+0x422>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a29      	ldr	r2, [pc, #164]	; (800c350 <HAL_DMA_Abort+0x454>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d036      	beq.n	800c31e <HAL_DMA_Abort+0x422>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a27      	ldr	r2, [pc, #156]	; (800c354 <HAL_DMA_Abort+0x458>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d031      	beq.n	800c31e <HAL_DMA_Abort+0x422>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a26      	ldr	r2, [pc, #152]	; (800c358 <HAL_DMA_Abort+0x45c>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d02c      	beq.n	800c31e <HAL_DMA_Abort+0x422>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a24      	ldr	r2, [pc, #144]	; (800c35c <HAL_DMA_Abort+0x460>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d027      	beq.n	800c31e <HAL_DMA_Abort+0x422>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4a23      	ldr	r2, [pc, #140]	; (800c360 <HAL_DMA_Abort+0x464>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d022      	beq.n	800c31e <HAL_DMA_Abort+0x422>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a21      	ldr	r2, [pc, #132]	; (800c364 <HAL_DMA_Abort+0x468>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d01d      	beq.n	800c31e <HAL_DMA_Abort+0x422>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4a20      	ldr	r2, [pc, #128]	; (800c368 <HAL_DMA_Abort+0x46c>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d018      	beq.n	800c31e <HAL_DMA_Abort+0x422>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4a1e      	ldr	r2, [pc, #120]	; (800c36c <HAL_DMA_Abort+0x470>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d013      	beq.n	800c31e <HAL_DMA_Abort+0x422>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4a1d      	ldr	r2, [pc, #116]	; (800c370 <HAL_DMA_Abort+0x474>)
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d00e      	beq.n	800c31e <HAL_DMA_Abort+0x422>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4a1b      	ldr	r2, [pc, #108]	; (800c374 <HAL_DMA_Abort+0x478>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d009      	beq.n	800c31e <HAL_DMA_Abort+0x422>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	4a1a      	ldr	r2, [pc, #104]	; (800c378 <HAL_DMA_Abort+0x47c>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d004      	beq.n	800c31e <HAL_DMA_Abort+0x422>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4a18      	ldr	r2, [pc, #96]	; (800c37c <HAL_DMA_Abort+0x480>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d101      	bne.n	800c322 <HAL_DMA_Abort+0x426>
 800c31e:	2301      	movs	r3, #1
 800c320:	e000      	b.n	800c324 <HAL_DMA_Abort+0x428>
 800c322:	2300      	movs	r3, #0
 800c324:	2b00      	cmp	r3, #0
 800c326:	d02b      	beq.n	800c380 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c32c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c332:	f003 031f 	and.w	r3, r3, #31
 800c336:	223f      	movs	r2, #63	; 0x3f
 800c338:	409a      	lsls	r2, r3
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	609a      	str	r2, [r3, #8]
 800c33e:	e02a      	b.n	800c396 <HAL_DMA_Abort+0x49a>
 800c340:	40020010 	.word	0x40020010
 800c344:	40020028 	.word	0x40020028
 800c348:	40020040 	.word	0x40020040
 800c34c:	40020058 	.word	0x40020058
 800c350:	40020070 	.word	0x40020070
 800c354:	40020088 	.word	0x40020088
 800c358:	400200a0 	.word	0x400200a0
 800c35c:	400200b8 	.word	0x400200b8
 800c360:	40020410 	.word	0x40020410
 800c364:	40020428 	.word	0x40020428
 800c368:	40020440 	.word	0x40020440
 800c36c:	40020458 	.word	0x40020458
 800c370:	40020470 	.word	0x40020470
 800c374:	40020488 	.word	0x40020488
 800c378:	400204a0 	.word	0x400204a0
 800c37c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c384:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c38a:	f003 031f 	and.w	r3, r3, #31
 800c38e:	2201      	movs	r2, #1
 800c390:	409a      	lsls	r2, r3
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4a4f      	ldr	r2, [pc, #316]	; (800c4d8 <HAL_DMA_Abort+0x5dc>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d072      	beq.n	800c486 <HAL_DMA_Abort+0x58a>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a4d      	ldr	r2, [pc, #308]	; (800c4dc <HAL_DMA_Abort+0x5e0>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d06d      	beq.n	800c486 <HAL_DMA_Abort+0x58a>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4a4c      	ldr	r2, [pc, #304]	; (800c4e0 <HAL_DMA_Abort+0x5e4>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d068      	beq.n	800c486 <HAL_DMA_Abort+0x58a>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	4a4a      	ldr	r2, [pc, #296]	; (800c4e4 <HAL_DMA_Abort+0x5e8>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d063      	beq.n	800c486 <HAL_DMA_Abort+0x58a>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4a49      	ldr	r2, [pc, #292]	; (800c4e8 <HAL_DMA_Abort+0x5ec>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d05e      	beq.n	800c486 <HAL_DMA_Abort+0x58a>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4a47      	ldr	r2, [pc, #284]	; (800c4ec <HAL_DMA_Abort+0x5f0>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d059      	beq.n	800c486 <HAL_DMA_Abort+0x58a>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4a46      	ldr	r2, [pc, #280]	; (800c4f0 <HAL_DMA_Abort+0x5f4>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d054      	beq.n	800c486 <HAL_DMA_Abort+0x58a>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4a44      	ldr	r2, [pc, #272]	; (800c4f4 <HAL_DMA_Abort+0x5f8>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d04f      	beq.n	800c486 <HAL_DMA_Abort+0x58a>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4a43      	ldr	r2, [pc, #268]	; (800c4f8 <HAL_DMA_Abort+0x5fc>)
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d04a      	beq.n	800c486 <HAL_DMA_Abort+0x58a>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a41      	ldr	r2, [pc, #260]	; (800c4fc <HAL_DMA_Abort+0x600>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d045      	beq.n	800c486 <HAL_DMA_Abort+0x58a>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a40      	ldr	r2, [pc, #256]	; (800c500 <HAL_DMA_Abort+0x604>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d040      	beq.n	800c486 <HAL_DMA_Abort+0x58a>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4a3e      	ldr	r2, [pc, #248]	; (800c504 <HAL_DMA_Abort+0x608>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d03b      	beq.n	800c486 <HAL_DMA_Abort+0x58a>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4a3d      	ldr	r2, [pc, #244]	; (800c508 <HAL_DMA_Abort+0x60c>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d036      	beq.n	800c486 <HAL_DMA_Abort+0x58a>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a3b      	ldr	r2, [pc, #236]	; (800c50c <HAL_DMA_Abort+0x610>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d031      	beq.n	800c486 <HAL_DMA_Abort+0x58a>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a3a      	ldr	r2, [pc, #232]	; (800c510 <HAL_DMA_Abort+0x614>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d02c      	beq.n	800c486 <HAL_DMA_Abort+0x58a>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a38      	ldr	r2, [pc, #224]	; (800c514 <HAL_DMA_Abort+0x618>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d027      	beq.n	800c486 <HAL_DMA_Abort+0x58a>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a37      	ldr	r2, [pc, #220]	; (800c518 <HAL_DMA_Abort+0x61c>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d022      	beq.n	800c486 <HAL_DMA_Abort+0x58a>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a35      	ldr	r2, [pc, #212]	; (800c51c <HAL_DMA_Abort+0x620>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d01d      	beq.n	800c486 <HAL_DMA_Abort+0x58a>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4a34      	ldr	r2, [pc, #208]	; (800c520 <HAL_DMA_Abort+0x624>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d018      	beq.n	800c486 <HAL_DMA_Abort+0x58a>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a32      	ldr	r2, [pc, #200]	; (800c524 <HAL_DMA_Abort+0x628>)
 800c45a:	4293      	cmp	r3, r2
 800c45c:	d013      	beq.n	800c486 <HAL_DMA_Abort+0x58a>
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4a31      	ldr	r2, [pc, #196]	; (800c528 <HAL_DMA_Abort+0x62c>)
 800c464:	4293      	cmp	r3, r2
 800c466:	d00e      	beq.n	800c486 <HAL_DMA_Abort+0x58a>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a2f      	ldr	r2, [pc, #188]	; (800c52c <HAL_DMA_Abort+0x630>)
 800c46e:	4293      	cmp	r3, r2
 800c470:	d009      	beq.n	800c486 <HAL_DMA_Abort+0x58a>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	4a2e      	ldr	r2, [pc, #184]	; (800c530 <HAL_DMA_Abort+0x634>)
 800c478:	4293      	cmp	r3, r2
 800c47a:	d004      	beq.n	800c486 <HAL_DMA_Abort+0x58a>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a2c      	ldr	r2, [pc, #176]	; (800c534 <HAL_DMA_Abort+0x638>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d101      	bne.n	800c48a <HAL_DMA_Abort+0x58e>
 800c486:	2301      	movs	r3, #1
 800c488:	e000      	b.n	800c48c <HAL_DMA_Abort+0x590>
 800c48a:	2300      	movs	r3, #0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d015      	beq.n	800c4bc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c498:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d00c      	beq.n	800c4bc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4a6:	681a      	ldr	r2, [r3, #0]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c4b0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c4ba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2201      	movs	r2, #1
 800c4c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800c4cc:	2300      	movs	r3, #0
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3718      	adds	r7, #24
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	40020010 	.word	0x40020010
 800c4dc:	40020028 	.word	0x40020028
 800c4e0:	40020040 	.word	0x40020040
 800c4e4:	40020058 	.word	0x40020058
 800c4e8:	40020070 	.word	0x40020070
 800c4ec:	40020088 	.word	0x40020088
 800c4f0:	400200a0 	.word	0x400200a0
 800c4f4:	400200b8 	.word	0x400200b8
 800c4f8:	40020410 	.word	0x40020410
 800c4fc:	40020428 	.word	0x40020428
 800c500:	40020440 	.word	0x40020440
 800c504:	40020458 	.word	0x40020458
 800c508:	40020470 	.word	0x40020470
 800c50c:	40020488 	.word	0x40020488
 800c510:	400204a0 	.word	0x400204a0
 800c514:	400204b8 	.word	0x400204b8
 800c518:	58025408 	.word	0x58025408
 800c51c:	5802541c 	.word	0x5802541c
 800c520:	58025430 	.word	0x58025430
 800c524:	58025444 	.word	0x58025444
 800c528:	58025458 	.word	0x58025458
 800c52c:	5802546c 	.word	0x5802546c
 800c530:	58025480 	.word	0x58025480
 800c534:	58025494 	.word	0x58025494

0800c538 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d101      	bne.n	800c54a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800c546:	2301      	movs	r3, #1
 800c548:	e205      	b.n	800c956 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c550:	b2db      	uxtb	r3, r3
 800c552:	2b02      	cmp	r3, #2
 800c554:	d004      	beq.n	800c560 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2280      	movs	r2, #128	; 0x80
 800c55a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c55c:	2301      	movs	r3, #1
 800c55e:	e1fa      	b.n	800c956 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a8c      	ldr	r2, [pc, #560]	; (800c798 <HAL_DMA_Abort_IT+0x260>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d04a      	beq.n	800c600 <HAL_DMA_Abort_IT+0xc8>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4a8b      	ldr	r2, [pc, #556]	; (800c79c <HAL_DMA_Abort_IT+0x264>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d045      	beq.n	800c600 <HAL_DMA_Abort_IT+0xc8>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	4a89      	ldr	r2, [pc, #548]	; (800c7a0 <HAL_DMA_Abort_IT+0x268>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d040      	beq.n	800c600 <HAL_DMA_Abort_IT+0xc8>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	4a88      	ldr	r2, [pc, #544]	; (800c7a4 <HAL_DMA_Abort_IT+0x26c>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d03b      	beq.n	800c600 <HAL_DMA_Abort_IT+0xc8>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	4a86      	ldr	r2, [pc, #536]	; (800c7a8 <HAL_DMA_Abort_IT+0x270>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d036      	beq.n	800c600 <HAL_DMA_Abort_IT+0xc8>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4a85      	ldr	r2, [pc, #532]	; (800c7ac <HAL_DMA_Abort_IT+0x274>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d031      	beq.n	800c600 <HAL_DMA_Abort_IT+0xc8>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	4a83      	ldr	r2, [pc, #524]	; (800c7b0 <HAL_DMA_Abort_IT+0x278>)
 800c5a2:	4293      	cmp	r3, r2
 800c5a4:	d02c      	beq.n	800c600 <HAL_DMA_Abort_IT+0xc8>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a82      	ldr	r2, [pc, #520]	; (800c7b4 <HAL_DMA_Abort_IT+0x27c>)
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	d027      	beq.n	800c600 <HAL_DMA_Abort_IT+0xc8>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	4a80      	ldr	r2, [pc, #512]	; (800c7b8 <HAL_DMA_Abort_IT+0x280>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d022      	beq.n	800c600 <HAL_DMA_Abort_IT+0xc8>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	4a7f      	ldr	r2, [pc, #508]	; (800c7bc <HAL_DMA_Abort_IT+0x284>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d01d      	beq.n	800c600 <HAL_DMA_Abort_IT+0xc8>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	4a7d      	ldr	r2, [pc, #500]	; (800c7c0 <HAL_DMA_Abort_IT+0x288>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d018      	beq.n	800c600 <HAL_DMA_Abort_IT+0xc8>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4a7c      	ldr	r2, [pc, #496]	; (800c7c4 <HAL_DMA_Abort_IT+0x28c>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d013      	beq.n	800c600 <HAL_DMA_Abort_IT+0xc8>
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4a7a      	ldr	r2, [pc, #488]	; (800c7c8 <HAL_DMA_Abort_IT+0x290>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d00e      	beq.n	800c600 <HAL_DMA_Abort_IT+0xc8>
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	4a79      	ldr	r2, [pc, #484]	; (800c7cc <HAL_DMA_Abort_IT+0x294>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d009      	beq.n	800c600 <HAL_DMA_Abort_IT+0xc8>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a77      	ldr	r2, [pc, #476]	; (800c7d0 <HAL_DMA_Abort_IT+0x298>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d004      	beq.n	800c600 <HAL_DMA_Abort_IT+0xc8>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a76      	ldr	r2, [pc, #472]	; (800c7d4 <HAL_DMA_Abort_IT+0x29c>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d101      	bne.n	800c604 <HAL_DMA_Abort_IT+0xcc>
 800c600:	2301      	movs	r3, #1
 800c602:	e000      	b.n	800c606 <HAL_DMA_Abort_IT+0xce>
 800c604:	2300      	movs	r3, #0
 800c606:	2b00      	cmp	r3, #0
 800c608:	d065      	beq.n	800c6d6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2204      	movs	r2, #4
 800c60e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	4a60      	ldr	r2, [pc, #384]	; (800c798 <HAL_DMA_Abort_IT+0x260>)
 800c618:	4293      	cmp	r3, r2
 800c61a:	d04a      	beq.n	800c6b2 <HAL_DMA_Abort_IT+0x17a>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4a5e      	ldr	r2, [pc, #376]	; (800c79c <HAL_DMA_Abort_IT+0x264>)
 800c622:	4293      	cmp	r3, r2
 800c624:	d045      	beq.n	800c6b2 <HAL_DMA_Abort_IT+0x17a>
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4a5d      	ldr	r2, [pc, #372]	; (800c7a0 <HAL_DMA_Abort_IT+0x268>)
 800c62c:	4293      	cmp	r3, r2
 800c62e:	d040      	beq.n	800c6b2 <HAL_DMA_Abort_IT+0x17a>
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	4a5b      	ldr	r2, [pc, #364]	; (800c7a4 <HAL_DMA_Abort_IT+0x26c>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d03b      	beq.n	800c6b2 <HAL_DMA_Abort_IT+0x17a>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4a5a      	ldr	r2, [pc, #360]	; (800c7a8 <HAL_DMA_Abort_IT+0x270>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d036      	beq.n	800c6b2 <HAL_DMA_Abort_IT+0x17a>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4a58      	ldr	r2, [pc, #352]	; (800c7ac <HAL_DMA_Abort_IT+0x274>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d031      	beq.n	800c6b2 <HAL_DMA_Abort_IT+0x17a>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4a57      	ldr	r2, [pc, #348]	; (800c7b0 <HAL_DMA_Abort_IT+0x278>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d02c      	beq.n	800c6b2 <HAL_DMA_Abort_IT+0x17a>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a55      	ldr	r2, [pc, #340]	; (800c7b4 <HAL_DMA_Abort_IT+0x27c>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d027      	beq.n	800c6b2 <HAL_DMA_Abort_IT+0x17a>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a54      	ldr	r2, [pc, #336]	; (800c7b8 <HAL_DMA_Abort_IT+0x280>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d022      	beq.n	800c6b2 <HAL_DMA_Abort_IT+0x17a>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4a52      	ldr	r2, [pc, #328]	; (800c7bc <HAL_DMA_Abort_IT+0x284>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d01d      	beq.n	800c6b2 <HAL_DMA_Abort_IT+0x17a>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4a51      	ldr	r2, [pc, #324]	; (800c7c0 <HAL_DMA_Abort_IT+0x288>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d018      	beq.n	800c6b2 <HAL_DMA_Abort_IT+0x17a>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a4f      	ldr	r2, [pc, #316]	; (800c7c4 <HAL_DMA_Abort_IT+0x28c>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d013      	beq.n	800c6b2 <HAL_DMA_Abort_IT+0x17a>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4a4e      	ldr	r2, [pc, #312]	; (800c7c8 <HAL_DMA_Abort_IT+0x290>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d00e      	beq.n	800c6b2 <HAL_DMA_Abort_IT+0x17a>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a4c      	ldr	r2, [pc, #304]	; (800c7cc <HAL_DMA_Abort_IT+0x294>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d009      	beq.n	800c6b2 <HAL_DMA_Abort_IT+0x17a>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a4b      	ldr	r2, [pc, #300]	; (800c7d0 <HAL_DMA_Abort_IT+0x298>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d004      	beq.n	800c6b2 <HAL_DMA_Abort_IT+0x17a>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a49      	ldr	r2, [pc, #292]	; (800c7d4 <HAL_DMA_Abort_IT+0x29c>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d108      	bne.n	800c6c4 <HAL_DMA_Abort_IT+0x18c>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	681a      	ldr	r2, [r3, #0]
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f022 0201 	bic.w	r2, r2, #1
 800c6c0:	601a      	str	r2, [r3, #0]
 800c6c2:	e147      	b.n	800c954 <HAL_DMA_Abort_IT+0x41c>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f022 0201 	bic.w	r2, r2, #1
 800c6d2:	601a      	str	r2, [r3, #0]
 800c6d4:	e13e      	b.n	800c954 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f022 020e 	bic.w	r2, r2, #14
 800c6e4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a2b      	ldr	r2, [pc, #172]	; (800c798 <HAL_DMA_Abort_IT+0x260>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d04a      	beq.n	800c786 <HAL_DMA_Abort_IT+0x24e>
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a29      	ldr	r2, [pc, #164]	; (800c79c <HAL_DMA_Abort_IT+0x264>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d045      	beq.n	800c786 <HAL_DMA_Abort_IT+0x24e>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4a28      	ldr	r2, [pc, #160]	; (800c7a0 <HAL_DMA_Abort_IT+0x268>)
 800c700:	4293      	cmp	r3, r2
 800c702:	d040      	beq.n	800c786 <HAL_DMA_Abort_IT+0x24e>
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a26      	ldr	r2, [pc, #152]	; (800c7a4 <HAL_DMA_Abort_IT+0x26c>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d03b      	beq.n	800c786 <HAL_DMA_Abort_IT+0x24e>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	4a25      	ldr	r2, [pc, #148]	; (800c7a8 <HAL_DMA_Abort_IT+0x270>)
 800c714:	4293      	cmp	r3, r2
 800c716:	d036      	beq.n	800c786 <HAL_DMA_Abort_IT+0x24e>
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4a23      	ldr	r2, [pc, #140]	; (800c7ac <HAL_DMA_Abort_IT+0x274>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d031      	beq.n	800c786 <HAL_DMA_Abort_IT+0x24e>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4a22      	ldr	r2, [pc, #136]	; (800c7b0 <HAL_DMA_Abort_IT+0x278>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d02c      	beq.n	800c786 <HAL_DMA_Abort_IT+0x24e>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a20      	ldr	r2, [pc, #128]	; (800c7b4 <HAL_DMA_Abort_IT+0x27c>)
 800c732:	4293      	cmp	r3, r2
 800c734:	d027      	beq.n	800c786 <HAL_DMA_Abort_IT+0x24e>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a1f      	ldr	r2, [pc, #124]	; (800c7b8 <HAL_DMA_Abort_IT+0x280>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d022      	beq.n	800c786 <HAL_DMA_Abort_IT+0x24e>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a1d      	ldr	r2, [pc, #116]	; (800c7bc <HAL_DMA_Abort_IT+0x284>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d01d      	beq.n	800c786 <HAL_DMA_Abort_IT+0x24e>
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4a1c      	ldr	r2, [pc, #112]	; (800c7c0 <HAL_DMA_Abort_IT+0x288>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d018      	beq.n	800c786 <HAL_DMA_Abort_IT+0x24e>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a1a      	ldr	r2, [pc, #104]	; (800c7c4 <HAL_DMA_Abort_IT+0x28c>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d013      	beq.n	800c786 <HAL_DMA_Abort_IT+0x24e>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	4a19      	ldr	r2, [pc, #100]	; (800c7c8 <HAL_DMA_Abort_IT+0x290>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d00e      	beq.n	800c786 <HAL_DMA_Abort_IT+0x24e>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a17      	ldr	r2, [pc, #92]	; (800c7cc <HAL_DMA_Abort_IT+0x294>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d009      	beq.n	800c786 <HAL_DMA_Abort_IT+0x24e>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4a16      	ldr	r2, [pc, #88]	; (800c7d0 <HAL_DMA_Abort_IT+0x298>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d004      	beq.n	800c786 <HAL_DMA_Abort_IT+0x24e>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a14      	ldr	r2, [pc, #80]	; (800c7d4 <HAL_DMA_Abort_IT+0x29c>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d128      	bne.n	800c7d8 <HAL_DMA_Abort_IT+0x2a0>
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f022 0201 	bic.w	r2, r2, #1
 800c794:	601a      	str	r2, [r3, #0]
 800c796:	e027      	b.n	800c7e8 <HAL_DMA_Abort_IT+0x2b0>
 800c798:	40020010 	.word	0x40020010
 800c79c:	40020028 	.word	0x40020028
 800c7a0:	40020040 	.word	0x40020040
 800c7a4:	40020058 	.word	0x40020058
 800c7a8:	40020070 	.word	0x40020070
 800c7ac:	40020088 	.word	0x40020088
 800c7b0:	400200a0 	.word	0x400200a0
 800c7b4:	400200b8 	.word	0x400200b8
 800c7b8:	40020410 	.word	0x40020410
 800c7bc:	40020428 	.word	0x40020428
 800c7c0:	40020440 	.word	0x40020440
 800c7c4:	40020458 	.word	0x40020458
 800c7c8:	40020470 	.word	0x40020470
 800c7cc:	40020488 	.word	0x40020488
 800c7d0:	400204a0 	.word	0x400204a0
 800c7d4:	400204b8 	.word	0x400204b8
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	681a      	ldr	r2, [r3, #0]
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f022 0201 	bic.w	r2, r2, #1
 800c7e6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4a5c      	ldr	r2, [pc, #368]	; (800c960 <HAL_DMA_Abort_IT+0x428>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d072      	beq.n	800c8d8 <HAL_DMA_Abort_IT+0x3a0>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4a5b      	ldr	r2, [pc, #364]	; (800c964 <HAL_DMA_Abort_IT+0x42c>)
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	d06d      	beq.n	800c8d8 <HAL_DMA_Abort_IT+0x3a0>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4a59      	ldr	r2, [pc, #356]	; (800c968 <HAL_DMA_Abort_IT+0x430>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d068      	beq.n	800c8d8 <HAL_DMA_Abort_IT+0x3a0>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a58      	ldr	r2, [pc, #352]	; (800c96c <HAL_DMA_Abort_IT+0x434>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d063      	beq.n	800c8d8 <HAL_DMA_Abort_IT+0x3a0>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a56      	ldr	r2, [pc, #344]	; (800c970 <HAL_DMA_Abort_IT+0x438>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d05e      	beq.n	800c8d8 <HAL_DMA_Abort_IT+0x3a0>
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4a55      	ldr	r2, [pc, #340]	; (800c974 <HAL_DMA_Abort_IT+0x43c>)
 800c820:	4293      	cmp	r3, r2
 800c822:	d059      	beq.n	800c8d8 <HAL_DMA_Abort_IT+0x3a0>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4a53      	ldr	r2, [pc, #332]	; (800c978 <HAL_DMA_Abort_IT+0x440>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d054      	beq.n	800c8d8 <HAL_DMA_Abort_IT+0x3a0>
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4a52      	ldr	r2, [pc, #328]	; (800c97c <HAL_DMA_Abort_IT+0x444>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d04f      	beq.n	800c8d8 <HAL_DMA_Abort_IT+0x3a0>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a50      	ldr	r2, [pc, #320]	; (800c980 <HAL_DMA_Abort_IT+0x448>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d04a      	beq.n	800c8d8 <HAL_DMA_Abort_IT+0x3a0>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4a4f      	ldr	r2, [pc, #316]	; (800c984 <HAL_DMA_Abort_IT+0x44c>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d045      	beq.n	800c8d8 <HAL_DMA_Abort_IT+0x3a0>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a4d      	ldr	r2, [pc, #308]	; (800c988 <HAL_DMA_Abort_IT+0x450>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d040      	beq.n	800c8d8 <HAL_DMA_Abort_IT+0x3a0>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4a4c      	ldr	r2, [pc, #304]	; (800c98c <HAL_DMA_Abort_IT+0x454>)
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d03b      	beq.n	800c8d8 <HAL_DMA_Abort_IT+0x3a0>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a4a      	ldr	r2, [pc, #296]	; (800c990 <HAL_DMA_Abort_IT+0x458>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d036      	beq.n	800c8d8 <HAL_DMA_Abort_IT+0x3a0>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	4a49      	ldr	r2, [pc, #292]	; (800c994 <HAL_DMA_Abort_IT+0x45c>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d031      	beq.n	800c8d8 <HAL_DMA_Abort_IT+0x3a0>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4a47      	ldr	r2, [pc, #284]	; (800c998 <HAL_DMA_Abort_IT+0x460>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d02c      	beq.n	800c8d8 <HAL_DMA_Abort_IT+0x3a0>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	4a46      	ldr	r2, [pc, #280]	; (800c99c <HAL_DMA_Abort_IT+0x464>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d027      	beq.n	800c8d8 <HAL_DMA_Abort_IT+0x3a0>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4a44      	ldr	r2, [pc, #272]	; (800c9a0 <HAL_DMA_Abort_IT+0x468>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d022      	beq.n	800c8d8 <HAL_DMA_Abort_IT+0x3a0>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	4a43      	ldr	r2, [pc, #268]	; (800c9a4 <HAL_DMA_Abort_IT+0x46c>)
 800c898:	4293      	cmp	r3, r2
 800c89a:	d01d      	beq.n	800c8d8 <HAL_DMA_Abort_IT+0x3a0>
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4a41      	ldr	r2, [pc, #260]	; (800c9a8 <HAL_DMA_Abort_IT+0x470>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d018      	beq.n	800c8d8 <HAL_DMA_Abort_IT+0x3a0>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4a40      	ldr	r2, [pc, #256]	; (800c9ac <HAL_DMA_Abort_IT+0x474>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d013      	beq.n	800c8d8 <HAL_DMA_Abort_IT+0x3a0>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	4a3e      	ldr	r2, [pc, #248]	; (800c9b0 <HAL_DMA_Abort_IT+0x478>)
 800c8b6:	4293      	cmp	r3, r2
 800c8b8:	d00e      	beq.n	800c8d8 <HAL_DMA_Abort_IT+0x3a0>
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a3d      	ldr	r2, [pc, #244]	; (800c9b4 <HAL_DMA_Abort_IT+0x47c>)
 800c8c0:	4293      	cmp	r3, r2
 800c8c2:	d009      	beq.n	800c8d8 <HAL_DMA_Abort_IT+0x3a0>
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4a3b      	ldr	r2, [pc, #236]	; (800c9b8 <HAL_DMA_Abort_IT+0x480>)
 800c8ca:	4293      	cmp	r3, r2
 800c8cc:	d004      	beq.n	800c8d8 <HAL_DMA_Abort_IT+0x3a0>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4a3a      	ldr	r2, [pc, #232]	; (800c9bc <HAL_DMA_Abort_IT+0x484>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d101      	bne.n	800c8dc <HAL_DMA_Abort_IT+0x3a4>
 800c8d8:	2301      	movs	r3, #1
 800c8da:	e000      	b.n	800c8de <HAL_DMA_Abort_IT+0x3a6>
 800c8dc:	2300      	movs	r3, #0
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d028      	beq.n	800c934 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c8f0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8f6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8fc:	f003 031f 	and.w	r3, r3, #31
 800c900:	2201      	movs	r2, #1
 800c902:	409a      	lsls	r2, r3
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c910:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c916:	2b00      	cmp	r3, #0
 800c918:	d00c      	beq.n	800c934 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c91e:	681a      	ldr	r2, [r3, #0]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c924:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c928:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c932:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2201      	movs	r2, #1
 800c938:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2200      	movs	r2, #0
 800c940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d003      	beq.n	800c954 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800c954:	2300      	movs	r3, #0
}
 800c956:	4618      	mov	r0, r3
 800c958:	3710      	adds	r7, #16
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	40020010 	.word	0x40020010
 800c964:	40020028 	.word	0x40020028
 800c968:	40020040 	.word	0x40020040
 800c96c:	40020058 	.word	0x40020058
 800c970:	40020070 	.word	0x40020070
 800c974:	40020088 	.word	0x40020088
 800c978:	400200a0 	.word	0x400200a0
 800c97c:	400200b8 	.word	0x400200b8
 800c980:	40020410 	.word	0x40020410
 800c984:	40020428 	.word	0x40020428
 800c988:	40020440 	.word	0x40020440
 800c98c:	40020458 	.word	0x40020458
 800c990:	40020470 	.word	0x40020470
 800c994:	40020488 	.word	0x40020488
 800c998:	400204a0 	.word	0x400204a0
 800c99c:	400204b8 	.word	0x400204b8
 800c9a0:	58025408 	.word	0x58025408
 800c9a4:	5802541c 	.word	0x5802541c
 800c9a8:	58025430 	.word	0x58025430
 800c9ac:	58025444 	.word	0x58025444
 800c9b0:	58025458 	.word	0x58025458
 800c9b4:	5802546c 	.word	0x5802546c
 800c9b8:	58025480 	.word	0x58025480
 800c9bc:	58025494 	.word	0x58025494

0800c9c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b089      	sub	sp, #36	; 0x24
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800c9ce:	4b86      	ldr	r3, [pc, #536]	; (800cbe8 <HAL_GPIO_Init+0x228>)
 800c9d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c9d2:	e18c      	b.n	800ccee <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	681a      	ldr	r2, [r3, #0]
 800c9d8:	2101      	movs	r1, #1
 800c9da:	69fb      	ldr	r3, [r7, #28]
 800c9dc:	fa01 f303 	lsl.w	r3, r1, r3
 800c9e0:	4013      	ands	r3, r2
 800c9e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800c9e4:	693b      	ldr	r3, [r7, #16]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	f000 817e 	beq.w	800cce8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	685b      	ldr	r3, [r3, #4]
 800c9f0:	f003 0303 	and.w	r3, r3, #3
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d005      	beq.n	800ca04 <HAL_GPIO_Init+0x44>
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	f003 0303 	and.w	r3, r3, #3
 800ca00:	2b02      	cmp	r3, #2
 800ca02:	d130      	bne.n	800ca66 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	689b      	ldr	r3, [r3, #8]
 800ca08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ca0a:	69fb      	ldr	r3, [r7, #28]
 800ca0c:	005b      	lsls	r3, r3, #1
 800ca0e:	2203      	movs	r2, #3
 800ca10:	fa02 f303 	lsl.w	r3, r2, r3
 800ca14:	43db      	mvns	r3, r3
 800ca16:	69ba      	ldr	r2, [r7, #24]
 800ca18:	4013      	ands	r3, r2
 800ca1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	68da      	ldr	r2, [r3, #12]
 800ca20:	69fb      	ldr	r3, [r7, #28]
 800ca22:	005b      	lsls	r3, r3, #1
 800ca24:	fa02 f303 	lsl.w	r3, r2, r3
 800ca28:	69ba      	ldr	r2, [r7, #24]
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	69ba      	ldr	r2, [r7, #24]
 800ca32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ca42:	43db      	mvns	r3, r3
 800ca44:	69ba      	ldr	r2, [r7, #24]
 800ca46:	4013      	ands	r3, r2
 800ca48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	091b      	lsrs	r3, r3, #4
 800ca50:	f003 0201 	and.w	r2, r3, #1
 800ca54:	69fb      	ldr	r3, [r7, #28]
 800ca56:	fa02 f303 	lsl.w	r3, r2, r3
 800ca5a:	69ba      	ldr	r2, [r7, #24]
 800ca5c:	4313      	orrs	r3, r2
 800ca5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	69ba      	ldr	r2, [r7, #24]
 800ca64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	f003 0303 	and.w	r3, r3, #3
 800ca6e:	2b03      	cmp	r3, #3
 800ca70:	d017      	beq.n	800caa2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	68db      	ldr	r3, [r3, #12]
 800ca76:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	005b      	lsls	r3, r3, #1
 800ca7c:	2203      	movs	r2, #3
 800ca7e:	fa02 f303 	lsl.w	r3, r2, r3
 800ca82:	43db      	mvns	r3, r3
 800ca84:	69ba      	ldr	r2, [r7, #24]
 800ca86:	4013      	ands	r3, r2
 800ca88:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	689a      	ldr	r2, [r3, #8]
 800ca8e:	69fb      	ldr	r3, [r7, #28]
 800ca90:	005b      	lsls	r3, r3, #1
 800ca92:	fa02 f303 	lsl.w	r3, r2, r3
 800ca96:	69ba      	ldr	r2, [r7, #24]
 800ca98:	4313      	orrs	r3, r2
 800ca9a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	69ba      	ldr	r2, [r7, #24]
 800caa0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	f003 0303 	and.w	r3, r3, #3
 800caaa:	2b02      	cmp	r3, #2
 800caac:	d123      	bne.n	800caf6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800caae:	69fb      	ldr	r3, [r7, #28]
 800cab0:	08da      	lsrs	r2, r3, #3
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	3208      	adds	r2, #8
 800cab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	f003 0307 	and.w	r3, r3, #7
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	220f      	movs	r2, #15
 800cac6:	fa02 f303 	lsl.w	r3, r2, r3
 800caca:	43db      	mvns	r3, r3
 800cacc:	69ba      	ldr	r2, [r7, #24]
 800cace:	4013      	ands	r3, r2
 800cad0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	691a      	ldr	r2, [r3, #16]
 800cad6:	69fb      	ldr	r3, [r7, #28]
 800cad8:	f003 0307 	and.w	r3, r3, #7
 800cadc:	009b      	lsls	r3, r3, #2
 800cade:	fa02 f303 	lsl.w	r3, r2, r3
 800cae2:	69ba      	ldr	r2, [r7, #24]
 800cae4:	4313      	orrs	r3, r2
 800cae6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	08da      	lsrs	r2, r3, #3
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	3208      	adds	r2, #8
 800caf0:	69b9      	ldr	r1, [r7, #24]
 800caf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800cafc:	69fb      	ldr	r3, [r7, #28]
 800cafe:	005b      	lsls	r3, r3, #1
 800cb00:	2203      	movs	r2, #3
 800cb02:	fa02 f303 	lsl.w	r3, r2, r3
 800cb06:	43db      	mvns	r3, r3
 800cb08:	69ba      	ldr	r2, [r7, #24]
 800cb0a:	4013      	ands	r3, r2
 800cb0c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	f003 0203 	and.w	r2, r3, #3
 800cb16:	69fb      	ldr	r3, [r7, #28]
 800cb18:	005b      	lsls	r3, r3, #1
 800cb1a:	fa02 f303 	lsl.w	r3, r2, r3
 800cb1e:	69ba      	ldr	r2, [r7, #24]
 800cb20:	4313      	orrs	r3, r2
 800cb22:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	69ba      	ldr	r2, [r7, #24]
 800cb28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	f000 80d8 	beq.w	800cce8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cb38:	4b2c      	ldr	r3, [pc, #176]	; (800cbec <HAL_GPIO_Init+0x22c>)
 800cb3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cb3e:	4a2b      	ldr	r2, [pc, #172]	; (800cbec <HAL_GPIO_Init+0x22c>)
 800cb40:	f043 0302 	orr.w	r3, r3, #2
 800cb44:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800cb48:	4b28      	ldr	r3, [pc, #160]	; (800cbec <HAL_GPIO_Init+0x22c>)
 800cb4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cb4e:	f003 0302 	and.w	r3, r3, #2
 800cb52:	60fb      	str	r3, [r7, #12]
 800cb54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cb56:	4a26      	ldr	r2, [pc, #152]	; (800cbf0 <HAL_GPIO_Init+0x230>)
 800cb58:	69fb      	ldr	r3, [r7, #28]
 800cb5a:	089b      	lsrs	r3, r3, #2
 800cb5c:	3302      	adds	r3, #2
 800cb5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	f003 0303 	and.w	r3, r3, #3
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	220f      	movs	r2, #15
 800cb6e:	fa02 f303 	lsl.w	r3, r2, r3
 800cb72:	43db      	mvns	r3, r3
 800cb74:	69ba      	ldr	r2, [r7, #24]
 800cb76:	4013      	ands	r3, r2
 800cb78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	4a1d      	ldr	r2, [pc, #116]	; (800cbf4 <HAL_GPIO_Init+0x234>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d04a      	beq.n	800cc18 <HAL_GPIO_Init+0x258>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	4a1c      	ldr	r2, [pc, #112]	; (800cbf8 <HAL_GPIO_Init+0x238>)
 800cb86:	4293      	cmp	r3, r2
 800cb88:	d02b      	beq.n	800cbe2 <HAL_GPIO_Init+0x222>
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	4a1b      	ldr	r2, [pc, #108]	; (800cbfc <HAL_GPIO_Init+0x23c>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d025      	beq.n	800cbde <HAL_GPIO_Init+0x21e>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	4a1a      	ldr	r2, [pc, #104]	; (800cc00 <HAL_GPIO_Init+0x240>)
 800cb96:	4293      	cmp	r3, r2
 800cb98:	d01f      	beq.n	800cbda <HAL_GPIO_Init+0x21a>
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	4a19      	ldr	r2, [pc, #100]	; (800cc04 <HAL_GPIO_Init+0x244>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d019      	beq.n	800cbd6 <HAL_GPIO_Init+0x216>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	4a18      	ldr	r2, [pc, #96]	; (800cc08 <HAL_GPIO_Init+0x248>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d013      	beq.n	800cbd2 <HAL_GPIO_Init+0x212>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	4a17      	ldr	r2, [pc, #92]	; (800cc0c <HAL_GPIO_Init+0x24c>)
 800cbae:	4293      	cmp	r3, r2
 800cbb0:	d00d      	beq.n	800cbce <HAL_GPIO_Init+0x20e>
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	4a16      	ldr	r2, [pc, #88]	; (800cc10 <HAL_GPIO_Init+0x250>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d007      	beq.n	800cbca <HAL_GPIO_Init+0x20a>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	4a15      	ldr	r2, [pc, #84]	; (800cc14 <HAL_GPIO_Init+0x254>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d101      	bne.n	800cbc6 <HAL_GPIO_Init+0x206>
 800cbc2:	2309      	movs	r3, #9
 800cbc4:	e029      	b.n	800cc1a <HAL_GPIO_Init+0x25a>
 800cbc6:	230a      	movs	r3, #10
 800cbc8:	e027      	b.n	800cc1a <HAL_GPIO_Init+0x25a>
 800cbca:	2307      	movs	r3, #7
 800cbcc:	e025      	b.n	800cc1a <HAL_GPIO_Init+0x25a>
 800cbce:	2306      	movs	r3, #6
 800cbd0:	e023      	b.n	800cc1a <HAL_GPIO_Init+0x25a>
 800cbd2:	2305      	movs	r3, #5
 800cbd4:	e021      	b.n	800cc1a <HAL_GPIO_Init+0x25a>
 800cbd6:	2304      	movs	r3, #4
 800cbd8:	e01f      	b.n	800cc1a <HAL_GPIO_Init+0x25a>
 800cbda:	2303      	movs	r3, #3
 800cbdc:	e01d      	b.n	800cc1a <HAL_GPIO_Init+0x25a>
 800cbde:	2302      	movs	r3, #2
 800cbe0:	e01b      	b.n	800cc1a <HAL_GPIO_Init+0x25a>
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	e019      	b.n	800cc1a <HAL_GPIO_Init+0x25a>
 800cbe6:	bf00      	nop
 800cbe8:	58000080 	.word	0x58000080
 800cbec:	58024400 	.word	0x58024400
 800cbf0:	58000400 	.word	0x58000400
 800cbf4:	58020000 	.word	0x58020000
 800cbf8:	58020400 	.word	0x58020400
 800cbfc:	58020800 	.word	0x58020800
 800cc00:	58020c00 	.word	0x58020c00
 800cc04:	58021000 	.word	0x58021000
 800cc08:	58021400 	.word	0x58021400
 800cc0c:	58021800 	.word	0x58021800
 800cc10:	58021c00 	.word	0x58021c00
 800cc14:	58022400 	.word	0x58022400
 800cc18:	2300      	movs	r3, #0
 800cc1a:	69fa      	ldr	r2, [r7, #28]
 800cc1c:	f002 0203 	and.w	r2, r2, #3
 800cc20:	0092      	lsls	r2, r2, #2
 800cc22:	4093      	lsls	r3, r2
 800cc24:	69ba      	ldr	r2, [r7, #24]
 800cc26:	4313      	orrs	r3, r2
 800cc28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cc2a:	4938      	ldr	r1, [pc, #224]	; (800cd0c <HAL_GPIO_Init+0x34c>)
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	089b      	lsrs	r3, r3, #2
 800cc30:	3302      	adds	r3, #2
 800cc32:	69ba      	ldr	r2, [r7, #24]
 800cc34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800cc38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	43db      	mvns	r3, r3
 800cc44:	69ba      	ldr	r2, [r7, #24]
 800cc46:	4013      	ands	r3, r2
 800cc48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d003      	beq.n	800cc5e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800cc56:	69ba      	ldr	r2, [r7, #24]
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	4313      	orrs	r3, r2
 800cc5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800cc5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cc62:	69bb      	ldr	r3, [r7, #24]
 800cc64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800cc66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	43db      	mvns	r3, r3
 800cc72:	69ba      	ldr	r2, [r7, #24]
 800cc74:	4013      	ands	r3, r2
 800cc76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d003      	beq.n	800cc8c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800cc84:	69ba      	ldr	r2, [r7, #24]
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	4313      	orrs	r3, r2
 800cc8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800cc8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cc90:	69bb      	ldr	r3, [r7, #24]
 800cc92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	43db      	mvns	r3, r3
 800cc9e:	69ba      	ldr	r2, [r7, #24]
 800cca0:	4013      	ands	r3, r2
 800cca2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	685b      	ldr	r3, [r3, #4]
 800cca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d003      	beq.n	800ccb8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800ccb0:	69ba      	ldr	r2, [r7, #24]
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	4313      	orrs	r3, r2
 800ccb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	69ba      	ldr	r2, [r7, #24]
 800ccbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	43db      	mvns	r3, r3
 800ccc8:	69ba      	ldr	r2, [r7, #24]
 800ccca:	4013      	ands	r3, r2
 800cccc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d003      	beq.n	800cce2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800ccda:	69ba      	ldr	r2, [r7, #24]
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	4313      	orrs	r3, r2
 800cce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	69ba      	ldr	r2, [r7, #24]
 800cce6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	3301      	adds	r3, #1
 800ccec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	681a      	ldr	r2, [r3, #0]
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	fa22 f303 	lsr.w	r3, r2, r3
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	f47f ae6b 	bne.w	800c9d4 <HAL_GPIO_Init+0x14>
  }
}
 800ccfe:	bf00      	nop
 800cd00:	bf00      	nop
 800cd02:	3724      	adds	r7, #36	; 0x24
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr
 800cd0c:	58000400 	.word	0x58000400

0800cd10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	460b      	mov	r3, r1
 800cd1a:	807b      	strh	r3, [r7, #2]
 800cd1c:	4613      	mov	r3, r2
 800cd1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800cd20:	787b      	ldrb	r3, [r7, #1]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d003      	beq.n	800cd2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800cd26:	887a      	ldrh	r2, [r7, #2]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800cd2c:	e003      	b.n	800cd36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800cd2e:	887b      	ldrh	r3, [r7, #2]
 800cd30:	041a      	lsls	r2, r3, #16
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	619a      	str	r2, [r3, #24]
}
 800cd36:	bf00      	nop
 800cd38:	370c      	adds	r7, #12
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr
	...

0800cd44 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b084      	sub	sp, #16
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800cd4c:	4b19      	ldr	r3, [pc, #100]	; (800cdb4 <HAL_PWREx_ConfigSupply+0x70>)
 800cd4e:	68db      	ldr	r3, [r3, #12]
 800cd50:	f003 0304 	and.w	r3, r3, #4
 800cd54:	2b04      	cmp	r3, #4
 800cd56:	d00a      	beq.n	800cd6e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800cd58:	4b16      	ldr	r3, [pc, #88]	; (800cdb4 <HAL_PWREx_ConfigSupply+0x70>)
 800cd5a:	68db      	ldr	r3, [r3, #12]
 800cd5c:	f003 0307 	and.w	r3, r3, #7
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d001      	beq.n	800cd6a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800cd66:	2301      	movs	r3, #1
 800cd68:	e01f      	b.n	800cdaa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	e01d      	b.n	800cdaa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800cd6e:	4b11      	ldr	r3, [pc, #68]	; (800cdb4 <HAL_PWREx_ConfigSupply+0x70>)
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	f023 0207 	bic.w	r2, r3, #7
 800cd76:	490f      	ldr	r1, [pc, #60]	; (800cdb4 <HAL_PWREx_ConfigSupply+0x70>)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800cd7e:	f7fd fa35 	bl	800a1ec <HAL_GetTick>
 800cd82:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800cd84:	e009      	b.n	800cd9a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800cd86:	f7fd fa31 	bl	800a1ec <HAL_GetTick>
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	1ad3      	subs	r3, r2, r3
 800cd90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd94:	d901      	bls.n	800cd9a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800cd96:	2301      	movs	r3, #1
 800cd98:	e007      	b.n	800cdaa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800cd9a:	4b06      	ldr	r3, [pc, #24]	; (800cdb4 <HAL_PWREx_ConfigSupply+0x70>)
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cda2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cda6:	d1ee      	bne.n	800cd86 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800cda8:	2300      	movs	r3, #0
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3710      	adds	r7, #16
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop
 800cdb4:	58024800 	.word	0x58024800

0800cdb8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b08c      	sub	sp, #48	; 0x30
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d101      	bne.n	800cdca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	e397      	b.n	800d4fa <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f003 0301 	and.w	r3, r3, #1
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	f000 8087 	beq.w	800cee6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cdd8:	4b9e      	ldr	r3, [pc, #632]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800cdda:	691b      	ldr	r3, [r3, #16]
 800cddc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cde0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cde2:	4b9c      	ldr	r3, [pc, #624]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800cde4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cde6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800cde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdea:	2b10      	cmp	r3, #16
 800cdec:	d007      	beq.n	800cdfe <HAL_RCC_OscConfig+0x46>
 800cdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf0:	2b18      	cmp	r3, #24
 800cdf2:	d110      	bne.n	800ce16 <HAL_RCC_OscConfig+0x5e>
 800cdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf6:	f003 0303 	and.w	r3, r3, #3
 800cdfa:	2b02      	cmp	r3, #2
 800cdfc:	d10b      	bne.n	800ce16 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cdfe:	4b95      	ldr	r3, [pc, #596]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d06c      	beq.n	800cee4 <HAL_RCC_OscConfig+0x12c>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d168      	bne.n	800cee4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800ce12:	2301      	movs	r3, #1
 800ce14:	e371      	b.n	800d4fa <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	685b      	ldr	r3, [r3, #4]
 800ce1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce1e:	d106      	bne.n	800ce2e <HAL_RCC_OscConfig+0x76>
 800ce20:	4b8c      	ldr	r3, [pc, #560]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	4a8b      	ldr	r2, [pc, #556]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800ce26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ce2a:	6013      	str	r3, [r2, #0]
 800ce2c:	e02e      	b.n	800ce8c <HAL_RCC_OscConfig+0xd4>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d10c      	bne.n	800ce50 <HAL_RCC_OscConfig+0x98>
 800ce36:	4b87      	ldr	r3, [pc, #540]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a86      	ldr	r2, [pc, #536]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800ce3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce40:	6013      	str	r3, [r2, #0]
 800ce42:	4b84      	ldr	r3, [pc, #528]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4a83      	ldr	r2, [pc, #524]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800ce48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ce4c:	6013      	str	r3, [r2, #0]
 800ce4e:	e01d      	b.n	800ce8c <HAL_RCC_OscConfig+0xd4>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ce58:	d10c      	bne.n	800ce74 <HAL_RCC_OscConfig+0xbc>
 800ce5a:	4b7e      	ldr	r3, [pc, #504]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	4a7d      	ldr	r2, [pc, #500]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800ce60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ce64:	6013      	str	r3, [r2, #0]
 800ce66:	4b7b      	ldr	r3, [pc, #492]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	4a7a      	ldr	r2, [pc, #488]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800ce6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ce70:	6013      	str	r3, [r2, #0]
 800ce72:	e00b      	b.n	800ce8c <HAL_RCC_OscConfig+0xd4>
 800ce74:	4b77      	ldr	r3, [pc, #476]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4a76      	ldr	r2, [pc, #472]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800ce7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ce7e:	6013      	str	r3, [r2, #0]
 800ce80:	4b74      	ldr	r3, [pc, #464]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	4a73      	ldr	r2, [pc, #460]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800ce86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ce8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d013      	beq.n	800cebc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce94:	f7fd f9aa 	bl	800a1ec <HAL_GetTick>
 800ce98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ce9a:	e008      	b.n	800ceae <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ce9c:	f7fd f9a6 	bl	800a1ec <HAL_GetTick>
 800cea0:	4602      	mov	r2, r0
 800cea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea4:	1ad3      	subs	r3, r2, r3
 800cea6:	2b64      	cmp	r3, #100	; 0x64
 800cea8:	d901      	bls.n	800ceae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ceaa:	2303      	movs	r3, #3
 800ceac:	e325      	b.n	800d4fa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ceae:	4b69      	ldr	r3, [pc, #420]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d0f0      	beq.n	800ce9c <HAL_RCC_OscConfig+0xe4>
 800ceba:	e014      	b.n	800cee6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cebc:	f7fd f996 	bl	800a1ec <HAL_GetTick>
 800cec0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800cec2:	e008      	b.n	800ced6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cec4:	f7fd f992 	bl	800a1ec <HAL_GetTick>
 800cec8:	4602      	mov	r2, r0
 800ceca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cecc:	1ad3      	subs	r3, r2, r3
 800cece:	2b64      	cmp	r3, #100	; 0x64
 800ced0:	d901      	bls.n	800ced6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ced2:	2303      	movs	r3, #3
 800ced4:	e311      	b.n	800d4fa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ced6:	4b5f      	ldr	r3, [pc, #380]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d1f0      	bne.n	800cec4 <HAL_RCC_OscConfig+0x10c>
 800cee2:	e000      	b.n	800cee6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f003 0302 	and.w	r3, r3, #2
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	f000 808a 	beq.w	800d008 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800cef4:	4b57      	ldr	r3, [pc, #348]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800cef6:	691b      	ldr	r3, [r3, #16]
 800cef8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cefc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800cefe:	4b55      	ldr	r3, [pc, #340]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800cf00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf02:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800cf04:	6a3b      	ldr	r3, [r7, #32]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d007      	beq.n	800cf1a <HAL_RCC_OscConfig+0x162>
 800cf0a:	6a3b      	ldr	r3, [r7, #32]
 800cf0c:	2b18      	cmp	r3, #24
 800cf0e:	d137      	bne.n	800cf80 <HAL_RCC_OscConfig+0x1c8>
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	f003 0303 	and.w	r3, r3, #3
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d132      	bne.n	800cf80 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cf1a:	4b4e      	ldr	r3, [pc, #312]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f003 0304 	and.w	r3, r3, #4
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d005      	beq.n	800cf32 <HAL_RCC_OscConfig+0x17a>
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	68db      	ldr	r3, [r3, #12]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d101      	bne.n	800cf32 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800cf2e:	2301      	movs	r3, #1
 800cf30:	e2e3      	b.n	800d4fa <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800cf32:	4b48      	ldr	r3, [pc, #288]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	f023 0219 	bic.w	r2, r3, #25
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	68db      	ldr	r3, [r3, #12]
 800cf3e:	4945      	ldr	r1, [pc, #276]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800cf40:	4313      	orrs	r3, r2
 800cf42:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cf44:	f7fd f952 	bl	800a1ec <HAL_GetTick>
 800cf48:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cf4a:	e008      	b.n	800cf5e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cf4c:	f7fd f94e 	bl	800a1ec <HAL_GetTick>
 800cf50:	4602      	mov	r2, r0
 800cf52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf54:	1ad3      	subs	r3, r2, r3
 800cf56:	2b02      	cmp	r3, #2
 800cf58:	d901      	bls.n	800cf5e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800cf5a:	2303      	movs	r3, #3
 800cf5c:	e2cd      	b.n	800d4fa <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cf5e:	4b3d      	ldr	r3, [pc, #244]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f003 0304 	and.w	r3, r3, #4
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d0f0      	beq.n	800cf4c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cf6a:	4b3a      	ldr	r3, [pc, #232]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800cf6c:	685b      	ldr	r3, [r3, #4]
 800cf6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	691b      	ldr	r3, [r3, #16]
 800cf76:	061b      	lsls	r3, r3, #24
 800cf78:	4936      	ldr	r1, [pc, #216]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cf7e:	e043      	b.n	800d008 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d026      	beq.n	800cfd6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800cf88:	4b32      	ldr	r3, [pc, #200]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f023 0219 	bic.w	r2, r3, #25
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	68db      	ldr	r3, [r3, #12]
 800cf94:	492f      	ldr	r1, [pc, #188]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800cf96:	4313      	orrs	r3, r2
 800cf98:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf9a:	f7fd f927 	bl	800a1ec <HAL_GetTick>
 800cf9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cfa0:	e008      	b.n	800cfb4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cfa2:	f7fd f923 	bl	800a1ec <HAL_GetTick>
 800cfa6:	4602      	mov	r2, r0
 800cfa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfaa:	1ad3      	subs	r3, r2, r3
 800cfac:	2b02      	cmp	r3, #2
 800cfae:	d901      	bls.n	800cfb4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800cfb0:	2303      	movs	r3, #3
 800cfb2:	e2a2      	b.n	800d4fa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cfb4:	4b27      	ldr	r3, [pc, #156]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f003 0304 	and.w	r3, r3, #4
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d0f0      	beq.n	800cfa2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cfc0:	4b24      	ldr	r3, [pc, #144]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800cfc2:	685b      	ldr	r3, [r3, #4]
 800cfc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	691b      	ldr	r3, [r3, #16]
 800cfcc:	061b      	lsls	r3, r3, #24
 800cfce:	4921      	ldr	r1, [pc, #132]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800cfd0:	4313      	orrs	r3, r2
 800cfd2:	604b      	str	r3, [r1, #4]
 800cfd4:	e018      	b.n	800d008 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cfd6:	4b1f      	ldr	r3, [pc, #124]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4a1e      	ldr	r2, [pc, #120]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800cfdc:	f023 0301 	bic.w	r3, r3, #1
 800cfe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfe2:	f7fd f903 	bl	800a1ec <HAL_GetTick>
 800cfe6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cfe8:	e008      	b.n	800cffc <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cfea:	f7fd f8ff 	bl	800a1ec <HAL_GetTick>
 800cfee:	4602      	mov	r2, r0
 800cff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff2:	1ad3      	subs	r3, r2, r3
 800cff4:	2b02      	cmp	r3, #2
 800cff6:	d901      	bls.n	800cffc <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 800cff8:	2303      	movs	r3, #3
 800cffa:	e27e      	b.n	800d4fa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800cffc:	4b15      	ldr	r3, [pc, #84]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f003 0304 	and.w	r3, r3, #4
 800d004:	2b00      	cmp	r3, #0
 800d006:	d1f0      	bne.n	800cfea <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f003 0310 	and.w	r3, r3, #16
 800d010:	2b00      	cmp	r3, #0
 800d012:	d06d      	beq.n	800d0f0 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d014:	4b0f      	ldr	r3, [pc, #60]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800d016:	691b      	ldr	r3, [r3, #16]
 800d018:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d01c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800d01e:	4b0d      	ldr	r3, [pc, #52]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800d020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d022:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800d024:	69bb      	ldr	r3, [r7, #24]
 800d026:	2b08      	cmp	r3, #8
 800d028:	d007      	beq.n	800d03a <HAL_RCC_OscConfig+0x282>
 800d02a:	69bb      	ldr	r3, [r7, #24]
 800d02c:	2b18      	cmp	r3, #24
 800d02e:	d11e      	bne.n	800d06e <HAL_RCC_OscConfig+0x2b6>
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	f003 0303 	and.w	r3, r3, #3
 800d036:	2b01      	cmp	r3, #1
 800d038:	d119      	bne.n	800d06e <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d03a:	4b06      	ldr	r3, [pc, #24]	; (800d054 <HAL_RCC_OscConfig+0x29c>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d042:	2b00      	cmp	r3, #0
 800d044:	d008      	beq.n	800d058 <HAL_RCC_OscConfig+0x2a0>
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	69db      	ldr	r3, [r3, #28]
 800d04a:	2b80      	cmp	r3, #128	; 0x80
 800d04c:	d004      	beq.n	800d058 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800d04e:	2301      	movs	r3, #1
 800d050:	e253      	b.n	800d4fa <HAL_RCC_OscConfig+0x742>
 800d052:	bf00      	nop
 800d054:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d058:	4ba3      	ldr	r3, [pc, #652]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d05a:	68db      	ldr	r3, [r3, #12]
 800d05c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6a1b      	ldr	r3, [r3, #32]
 800d064:	061b      	lsls	r3, r3, #24
 800d066:	49a0      	ldr	r1, [pc, #640]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d068:	4313      	orrs	r3, r2
 800d06a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800d06c:	e040      	b.n	800d0f0 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	69db      	ldr	r3, [r3, #28]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d023      	beq.n	800d0be <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800d076:	4b9c      	ldr	r3, [pc, #624]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4a9b      	ldr	r2, [pc, #620]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d07c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d082:	f7fd f8b3 	bl	800a1ec <HAL_GetTick>
 800d086:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d088:	e008      	b.n	800d09c <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800d08a:	f7fd f8af 	bl	800a1ec <HAL_GetTick>
 800d08e:	4602      	mov	r2, r0
 800d090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d092:	1ad3      	subs	r3, r2, r3
 800d094:	2b02      	cmp	r3, #2
 800d096:	d901      	bls.n	800d09c <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 800d098:	2303      	movs	r3, #3
 800d09a:	e22e      	b.n	800d4fa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d09c:	4b92      	ldr	r3, [pc, #584]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d0f0      	beq.n	800d08a <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800d0a8:	4b8f      	ldr	r3, [pc, #572]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6a1b      	ldr	r3, [r3, #32]
 800d0b4:	061b      	lsls	r3, r3, #24
 800d0b6:	498c      	ldr	r1, [pc, #560]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	60cb      	str	r3, [r1, #12]
 800d0bc:	e018      	b.n	800d0f0 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800d0be:	4b8a      	ldr	r3, [pc, #552]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	4a89      	ldr	r2, [pc, #548]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d0c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d0c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0ca:	f7fd f88f 	bl	800a1ec <HAL_GetTick>
 800d0ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d0d0:	e008      	b.n	800d0e4 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800d0d2:	f7fd f88b 	bl	800a1ec <HAL_GetTick>
 800d0d6:	4602      	mov	r2, r0
 800d0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0da:	1ad3      	subs	r3, r2, r3
 800d0dc:	2b02      	cmp	r3, #2
 800d0de:	d901      	bls.n	800d0e4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800d0e0:	2303      	movs	r3, #3
 800d0e2:	e20a      	b.n	800d4fa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800d0e4:	4b80      	ldr	r3, [pc, #512]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d1f0      	bne.n	800d0d2 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f003 0308 	and.w	r3, r3, #8
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d036      	beq.n	800d16a <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	695b      	ldr	r3, [r3, #20]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d019      	beq.n	800d138 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d104:	4b78      	ldr	r3, [pc, #480]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d108:	4a77      	ldr	r2, [pc, #476]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d10a:	f043 0301 	orr.w	r3, r3, #1
 800d10e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d110:	f7fd f86c 	bl	800a1ec <HAL_GetTick>
 800d114:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d116:	e008      	b.n	800d12a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d118:	f7fd f868 	bl	800a1ec <HAL_GetTick>
 800d11c:	4602      	mov	r2, r0
 800d11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d120:	1ad3      	subs	r3, r2, r3
 800d122:	2b02      	cmp	r3, #2
 800d124:	d901      	bls.n	800d12a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800d126:	2303      	movs	r3, #3
 800d128:	e1e7      	b.n	800d4fa <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800d12a:	4b6f      	ldr	r3, [pc, #444]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d12c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d12e:	f003 0302 	and.w	r3, r3, #2
 800d132:	2b00      	cmp	r3, #0
 800d134:	d0f0      	beq.n	800d118 <HAL_RCC_OscConfig+0x360>
 800d136:	e018      	b.n	800d16a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d138:	4b6b      	ldr	r3, [pc, #428]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d13a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d13c:	4a6a      	ldr	r2, [pc, #424]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d13e:	f023 0301 	bic.w	r3, r3, #1
 800d142:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d144:	f7fd f852 	bl	800a1ec <HAL_GetTick>
 800d148:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d14a:	e008      	b.n	800d15e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800d14c:	f7fd f84e 	bl	800a1ec <HAL_GetTick>
 800d150:	4602      	mov	r2, r0
 800d152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d154:	1ad3      	subs	r3, r2, r3
 800d156:	2b02      	cmp	r3, #2
 800d158:	d901      	bls.n	800d15e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800d15a:	2303      	movs	r3, #3
 800d15c:	e1cd      	b.n	800d4fa <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800d15e:	4b62      	ldr	r3, [pc, #392]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d162:	f003 0302 	and.w	r3, r3, #2
 800d166:	2b00      	cmp	r3, #0
 800d168:	d1f0      	bne.n	800d14c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f003 0320 	and.w	r3, r3, #32
 800d172:	2b00      	cmp	r3, #0
 800d174:	d036      	beq.n	800d1e4 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	699b      	ldr	r3, [r3, #24]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d019      	beq.n	800d1b2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d17e:	4b5a      	ldr	r3, [pc, #360]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4a59      	ldr	r2, [pc, #356]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d184:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d188:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d18a:	f7fd f82f 	bl	800a1ec <HAL_GetTick>
 800d18e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d190:	e008      	b.n	800d1a4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800d192:	f7fd f82b 	bl	800a1ec <HAL_GetTick>
 800d196:	4602      	mov	r2, r0
 800d198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19a:	1ad3      	subs	r3, r2, r3
 800d19c:	2b02      	cmp	r3, #2
 800d19e:	d901      	bls.n	800d1a4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800d1a0:	2303      	movs	r3, #3
 800d1a2:	e1aa      	b.n	800d4fa <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800d1a4:	4b50      	ldr	r3, [pc, #320]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d0f0      	beq.n	800d192 <HAL_RCC_OscConfig+0x3da>
 800d1b0:	e018      	b.n	800d1e4 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d1b2:	4b4d      	ldr	r3, [pc, #308]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	4a4c      	ldr	r2, [pc, #304]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d1b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d1bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800d1be:	f7fd f815 	bl	800a1ec <HAL_GetTick>
 800d1c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d1c4:	e008      	b.n	800d1d8 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800d1c6:	f7fd f811 	bl	800a1ec <HAL_GetTick>
 800d1ca:	4602      	mov	r2, r0
 800d1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ce:	1ad3      	subs	r3, r2, r3
 800d1d0:	2b02      	cmp	r3, #2
 800d1d2:	d901      	bls.n	800d1d8 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 800d1d4:	2303      	movs	r3, #3
 800d1d6:	e190      	b.n	800d4fa <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800d1d8:	4b43      	ldr	r3, [pc, #268]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d1f0      	bne.n	800d1c6 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f003 0304 	and.w	r3, r3, #4
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	f000 8085 	beq.w	800d2fc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d1f2:	4b3e      	ldr	r3, [pc, #248]	; (800d2ec <HAL_RCC_OscConfig+0x534>)
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4a3d      	ldr	r2, [pc, #244]	; (800d2ec <HAL_RCC_OscConfig+0x534>)
 800d1f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d1fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d1fe:	f7fc fff5 	bl	800a1ec <HAL_GetTick>
 800d202:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d204:	e008      	b.n	800d218 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800d206:	f7fc fff1 	bl	800a1ec <HAL_GetTick>
 800d20a:	4602      	mov	r2, r0
 800d20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20e:	1ad3      	subs	r3, r2, r3
 800d210:	2b64      	cmp	r3, #100	; 0x64
 800d212:	d901      	bls.n	800d218 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 800d214:	2303      	movs	r3, #3
 800d216:	e170      	b.n	800d4fa <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d218:	4b34      	ldr	r3, [pc, #208]	; (800d2ec <HAL_RCC_OscConfig+0x534>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d220:	2b00      	cmp	r3, #0
 800d222:	d0f0      	beq.n	800d206 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	689b      	ldr	r3, [r3, #8]
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d106      	bne.n	800d23a <HAL_RCC_OscConfig+0x482>
 800d22c:	4b2e      	ldr	r3, [pc, #184]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d22e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d230:	4a2d      	ldr	r2, [pc, #180]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d232:	f043 0301 	orr.w	r3, r3, #1
 800d236:	6713      	str	r3, [r2, #112]	; 0x70
 800d238:	e02d      	b.n	800d296 <HAL_RCC_OscConfig+0x4de>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	689b      	ldr	r3, [r3, #8]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d10c      	bne.n	800d25c <HAL_RCC_OscConfig+0x4a4>
 800d242:	4b29      	ldr	r3, [pc, #164]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d246:	4a28      	ldr	r2, [pc, #160]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d248:	f023 0301 	bic.w	r3, r3, #1
 800d24c:	6713      	str	r3, [r2, #112]	; 0x70
 800d24e:	4b26      	ldr	r3, [pc, #152]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d252:	4a25      	ldr	r2, [pc, #148]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d254:	f023 0304 	bic.w	r3, r3, #4
 800d258:	6713      	str	r3, [r2, #112]	; 0x70
 800d25a:	e01c      	b.n	800d296 <HAL_RCC_OscConfig+0x4de>
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	2b05      	cmp	r3, #5
 800d262:	d10c      	bne.n	800d27e <HAL_RCC_OscConfig+0x4c6>
 800d264:	4b20      	ldr	r3, [pc, #128]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d268:	4a1f      	ldr	r2, [pc, #124]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d26a:	f043 0304 	orr.w	r3, r3, #4
 800d26e:	6713      	str	r3, [r2, #112]	; 0x70
 800d270:	4b1d      	ldr	r3, [pc, #116]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d274:	4a1c      	ldr	r2, [pc, #112]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d276:	f043 0301 	orr.w	r3, r3, #1
 800d27a:	6713      	str	r3, [r2, #112]	; 0x70
 800d27c:	e00b      	b.n	800d296 <HAL_RCC_OscConfig+0x4de>
 800d27e:	4b1a      	ldr	r3, [pc, #104]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d282:	4a19      	ldr	r2, [pc, #100]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d284:	f023 0301 	bic.w	r3, r3, #1
 800d288:	6713      	str	r3, [r2, #112]	; 0x70
 800d28a:	4b17      	ldr	r3, [pc, #92]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d28c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d28e:	4a16      	ldr	r2, [pc, #88]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d290:	f023 0304 	bic.w	r3, r3, #4
 800d294:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	689b      	ldr	r3, [r3, #8]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d015      	beq.n	800d2ca <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d29e:	f7fc ffa5 	bl	800a1ec <HAL_GetTick>
 800d2a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d2a4:	e00a      	b.n	800d2bc <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d2a6:	f7fc ffa1 	bl	800a1ec <HAL_GetTick>
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ae:	1ad3      	subs	r3, r2, r3
 800d2b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d901      	bls.n	800d2bc <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800d2b8:	2303      	movs	r3, #3
 800d2ba:	e11e      	b.n	800d4fa <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d2bc:	4b0a      	ldr	r3, [pc, #40]	; (800d2e8 <HAL_RCC_OscConfig+0x530>)
 800d2be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2c0:	f003 0302 	and.w	r3, r3, #2
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d0ee      	beq.n	800d2a6 <HAL_RCC_OscConfig+0x4ee>
 800d2c8:	e018      	b.n	800d2fc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d2ca:	f7fc ff8f 	bl	800a1ec <HAL_GetTick>
 800d2ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d2d0:	e00e      	b.n	800d2f0 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800d2d2:	f7fc ff8b 	bl	800a1ec <HAL_GetTick>
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2da:	1ad3      	subs	r3, r2, r3
 800d2dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d905      	bls.n	800d2f0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800d2e4:	2303      	movs	r3, #3
 800d2e6:	e108      	b.n	800d4fa <HAL_RCC_OscConfig+0x742>
 800d2e8:	58024400 	.word	0x58024400
 800d2ec:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800d2f0:	4b84      	ldr	r3, [pc, #528]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d2f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2f4:	f003 0302 	and.w	r3, r3, #2
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d1ea      	bne.n	800d2d2 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d300:	2b00      	cmp	r3, #0
 800d302:	f000 80f9 	beq.w	800d4f8 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800d306:	4b7f      	ldr	r3, [pc, #508]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d308:	691b      	ldr	r3, [r3, #16]
 800d30a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d30e:	2b18      	cmp	r3, #24
 800d310:	f000 80b4 	beq.w	800d47c <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d318:	2b02      	cmp	r3, #2
 800d31a:	f040 8095 	bne.w	800d448 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d31e:	4b79      	ldr	r3, [pc, #484]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	4a78      	ldr	r2, [pc, #480]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d324:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d32a:	f7fc ff5f 	bl	800a1ec <HAL_GetTick>
 800d32e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d330:	e008      	b.n	800d344 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d332:	f7fc ff5b 	bl	800a1ec <HAL_GetTick>
 800d336:	4602      	mov	r2, r0
 800d338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33a:	1ad3      	subs	r3, r2, r3
 800d33c:	2b02      	cmp	r3, #2
 800d33e:	d901      	bls.n	800d344 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800d340:	2303      	movs	r3, #3
 800d342:	e0da      	b.n	800d4fa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d344:	4b6f      	ldr	r3, [pc, #444]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d1f0      	bne.n	800d332 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d350:	4b6c      	ldr	r3, [pc, #432]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d352:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d354:	4b6c      	ldr	r3, [pc, #432]	; (800d508 <HAL_RCC_OscConfig+0x750>)
 800d356:	4013      	ands	r3, r2
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d360:	0112      	lsls	r2, r2, #4
 800d362:	430a      	orrs	r2, r1
 800d364:	4967      	ldr	r1, [pc, #412]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d366:	4313      	orrs	r3, r2
 800d368:	628b      	str	r3, [r1, #40]	; 0x28
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d36e:	3b01      	subs	r3, #1
 800d370:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d378:	3b01      	subs	r3, #1
 800d37a:	025b      	lsls	r3, r3, #9
 800d37c:	b29b      	uxth	r3, r3
 800d37e:	431a      	orrs	r2, r3
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d384:	3b01      	subs	r3, #1
 800d386:	041b      	lsls	r3, r3, #16
 800d388:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d38c:	431a      	orrs	r2, r3
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d392:	3b01      	subs	r3, #1
 800d394:	061b      	lsls	r3, r3, #24
 800d396:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d39a:	495a      	ldr	r1, [pc, #360]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d39c:	4313      	orrs	r3, r2
 800d39e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800d3a0:	4b58      	ldr	r3, [pc, #352]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a4:	4a57      	ldr	r2, [pc, #348]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d3a6:	f023 0301 	bic.w	r3, r3, #1
 800d3aa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800d3ac:	4b55      	ldr	r3, [pc, #340]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d3ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3b0:	4b56      	ldr	r3, [pc, #344]	; (800d50c <HAL_RCC_OscConfig+0x754>)
 800d3b2:	4013      	ands	r3, r2
 800d3b4:	687a      	ldr	r2, [r7, #4]
 800d3b6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d3b8:	00d2      	lsls	r2, r2, #3
 800d3ba:	4952      	ldr	r1, [pc, #328]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d3bc:	4313      	orrs	r3, r2
 800d3be:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800d3c0:	4b50      	ldr	r3, [pc, #320]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c4:	f023 020c 	bic.w	r2, r3, #12
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3cc:	494d      	ldr	r1, [pc, #308]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800d3d2:	4b4c      	ldr	r3, [pc, #304]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d6:	f023 0202 	bic.w	r2, r3, #2
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3de:	4949      	ldr	r1, [pc, #292]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d3e0:	4313      	orrs	r3, r2
 800d3e2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800d3e4:	4b47      	ldr	r3, [pc, #284]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e8:	4a46      	ldr	r2, [pc, #280]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d3ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d3ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d3f0:	4b44      	ldr	r3, [pc, #272]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f4:	4a43      	ldr	r2, [pc, #268]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d3f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d3fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800d3fc:	4b41      	ldr	r3, [pc, #260]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d400:	4a40      	ldr	r2, [pc, #256]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d402:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d406:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800d408:	4b3e      	ldr	r3, [pc, #248]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d40c:	4a3d      	ldr	r2, [pc, #244]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d40e:	f043 0301 	orr.w	r3, r3, #1
 800d412:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d414:	4b3b      	ldr	r3, [pc, #236]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4a3a      	ldr	r2, [pc, #232]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d41a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d41e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d420:	f7fc fee4 	bl	800a1ec <HAL_GetTick>
 800d424:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d426:	e008      	b.n	800d43a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d428:	f7fc fee0 	bl	800a1ec <HAL_GetTick>
 800d42c:	4602      	mov	r2, r0
 800d42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d430:	1ad3      	subs	r3, r2, r3
 800d432:	2b02      	cmp	r3, #2
 800d434:	d901      	bls.n	800d43a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800d436:	2303      	movs	r3, #3
 800d438:	e05f      	b.n	800d4fa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d43a:	4b32      	ldr	r3, [pc, #200]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d442:	2b00      	cmp	r3, #0
 800d444:	d0f0      	beq.n	800d428 <HAL_RCC_OscConfig+0x670>
 800d446:	e057      	b.n	800d4f8 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d448:	4b2e      	ldr	r3, [pc, #184]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4a2d      	ldr	r2, [pc, #180]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d44e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d454:	f7fc feca 	bl	800a1ec <HAL_GetTick>
 800d458:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d45a:	e008      	b.n	800d46e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800d45c:	f7fc fec6 	bl	800a1ec <HAL_GetTick>
 800d460:	4602      	mov	r2, r0
 800d462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d464:	1ad3      	subs	r3, r2, r3
 800d466:	2b02      	cmp	r3, #2
 800d468:	d901      	bls.n	800d46e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800d46a:	2303      	movs	r3, #3
 800d46c:	e045      	b.n	800d4fa <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800d46e:	4b25      	ldr	r3, [pc, #148]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d476:	2b00      	cmp	r3, #0
 800d478:	d1f0      	bne.n	800d45c <HAL_RCC_OscConfig+0x6a4>
 800d47a:	e03d      	b.n	800d4f8 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800d47c:	4b21      	ldr	r3, [pc, #132]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d47e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d480:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800d482:	4b20      	ldr	r3, [pc, #128]	; (800d504 <HAL_RCC_OscConfig+0x74c>)
 800d484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d486:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d48c:	2b01      	cmp	r3, #1
 800d48e:	d031      	beq.n	800d4f4 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	f003 0203 	and.w	r2, r3, #3
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d49a:	429a      	cmp	r2, r3
 800d49c:	d12a      	bne.n	800d4f4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	091b      	lsrs	r3, r3, #4
 800d4a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d122      	bne.n	800d4f4 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d11a      	bne.n	800d4f4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	0a5b      	lsrs	r3, r3, #9
 800d4c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4ca:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d111      	bne.n	800d4f4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	0c1b      	lsrs	r3, r3, #16
 800d4d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4dc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d108      	bne.n	800d4f4 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	0e1b      	lsrs	r3, r3, #24
 800d4e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ee:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800d4f0:	429a      	cmp	r2, r3
 800d4f2:	d001      	beq.n	800d4f8 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 800d4f4:	2301      	movs	r3, #1
 800d4f6:	e000      	b.n	800d4fa <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 800d4f8:	2300      	movs	r3, #0
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3730      	adds	r7, #48	; 0x30
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}
 800d502:	bf00      	nop
 800d504:	58024400 	.word	0x58024400
 800d508:	fffffc0c 	.word	0xfffffc0c
 800d50c:	ffff0007 	.word	0xffff0007

0800d510 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b086      	sub	sp, #24
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d101      	bne.n	800d524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d520:	2301      	movs	r3, #1
 800d522:	e19c      	b.n	800d85e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800d524:	4b8a      	ldr	r3, [pc, #552]	; (800d750 <HAL_RCC_ClockConfig+0x240>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f003 030f 	and.w	r3, r3, #15
 800d52c:	683a      	ldr	r2, [r7, #0]
 800d52e:	429a      	cmp	r2, r3
 800d530:	d910      	bls.n	800d554 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d532:	4b87      	ldr	r3, [pc, #540]	; (800d750 <HAL_RCC_ClockConfig+0x240>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f023 020f 	bic.w	r2, r3, #15
 800d53a:	4985      	ldr	r1, [pc, #532]	; (800d750 <HAL_RCC_ClockConfig+0x240>)
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	4313      	orrs	r3, r2
 800d540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d542:	4b83      	ldr	r3, [pc, #524]	; (800d750 <HAL_RCC_ClockConfig+0x240>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f003 030f 	and.w	r3, r3, #15
 800d54a:	683a      	ldr	r2, [r7, #0]
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d001      	beq.n	800d554 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800d550:	2301      	movs	r3, #1
 800d552:	e184      	b.n	800d85e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	f003 0304 	and.w	r3, r3, #4
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d010      	beq.n	800d582 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	691a      	ldr	r2, [r3, #16]
 800d564:	4b7b      	ldr	r3, [pc, #492]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d566:	699b      	ldr	r3, [r3, #24]
 800d568:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d908      	bls.n	800d582 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d570:	4b78      	ldr	r3, [pc, #480]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d572:	699b      	ldr	r3, [r3, #24]
 800d574:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	691b      	ldr	r3, [r3, #16]
 800d57c:	4975      	ldr	r1, [pc, #468]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d57e:	4313      	orrs	r3, r2
 800d580:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	f003 0308 	and.w	r3, r3, #8
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d010      	beq.n	800d5b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	695a      	ldr	r2, [r3, #20]
 800d592:	4b70      	ldr	r3, [pc, #448]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d594:	69db      	ldr	r3, [r3, #28]
 800d596:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d908      	bls.n	800d5b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d59e:	4b6d      	ldr	r3, [pc, #436]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d5a0:	69db      	ldr	r3, [r3, #28]
 800d5a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	695b      	ldr	r3, [r3, #20]
 800d5aa:	496a      	ldr	r1, [pc, #424]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d5ac:	4313      	orrs	r3, r2
 800d5ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f003 0310 	and.w	r3, r3, #16
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d010      	beq.n	800d5de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	699a      	ldr	r2, [r3, #24]
 800d5c0:	4b64      	ldr	r3, [pc, #400]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d5c2:	69db      	ldr	r3, [r3, #28]
 800d5c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d908      	bls.n	800d5de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d5cc:	4b61      	ldr	r3, [pc, #388]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d5ce:	69db      	ldr	r3, [r3, #28]
 800d5d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	699b      	ldr	r3, [r3, #24]
 800d5d8:	495e      	ldr	r1, [pc, #376]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d5da:	4313      	orrs	r3, r2
 800d5dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	f003 0320 	and.w	r3, r3, #32
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d010      	beq.n	800d60c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	69da      	ldr	r2, [r3, #28]
 800d5ee:	4b59      	ldr	r3, [pc, #356]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d5f0:	6a1b      	ldr	r3, [r3, #32]
 800d5f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d908      	bls.n	800d60c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800d5fa:	4b56      	ldr	r3, [pc, #344]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d5fc:	6a1b      	ldr	r3, [r3, #32]
 800d5fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	69db      	ldr	r3, [r3, #28]
 800d606:	4953      	ldr	r1, [pc, #332]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d608:	4313      	orrs	r3, r2
 800d60a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f003 0302 	and.w	r3, r3, #2
 800d614:	2b00      	cmp	r3, #0
 800d616:	d010      	beq.n	800d63a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	68da      	ldr	r2, [r3, #12]
 800d61c:	4b4d      	ldr	r3, [pc, #308]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d61e:	699b      	ldr	r3, [r3, #24]
 800d620:	f003 030f 	and.w	r3, r3, #15
 800d624:	429a      	cmp	r2, r3
 800d626:	d908      	bls.n	800d63a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d628:	4b4a      	ldr	r3, [pc, #296]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d62a:	699b      	ldr	r3, [r3, #24]
 800d62c:	f023 020f 	bic.w	r2, r3, #15
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	4947      	ldr	r1, [pc, #284]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d636:	4313      	orrs	r3, r2
 800d638:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f003 0301 	and.w	r3, r3, #1
 800d642:	2b00      	cmp	r3, #0
 800d644:	d055      	beq.n	800d6f2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800d646:	4b43      	ldr	r3, [pc, #268]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d648:	699b      	ldr	r3, [r3, #24]
 800d64a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	689b      	ldr	r3, [r3, #8]
 800d652:	4940      	ldr	r1, [pc, #256]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d654:	4313      	orrs	r3, r2
 800d656:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	685b      	ldr	r3, [r3, #4]
 800d65c:	2b02      	cmp	r3, #2
 800d65e:	d107      	bne.n	800d670 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800d660:	4b3c      	ldr	r3, [pc, #240]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d121      	bne.n	800d6b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800d66c:	2301      	movs	r3, #1
 800d66e:	e0f6      	b.n	800d85e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	685b      	ldr	r3, [r3, #4]
 800d674:	2b03      	cmp	r3, #3
 800d676:	d107      	bne.n	800d688 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800d678:	4b36      	ldr	r3, [pc, #216]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d680:	2b00      	cmp	r3, #0
 800d682:	d115      	bne.n	800d6b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800d684:	2301      	movs	r3, #1
 800d686:	e0ea      	b.n	800d85e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d107      	bne.n	800d6a0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800d690:	4b30      	ldr	r3, [pc, #192]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d109      	bne.n	800d6b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800d69c:	2301      	movs	r3, #1
 800d69e:	e0de      	b.n	800d85e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800d6a0:	4b2c      	ldr	r3, [pc, #176]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f003 0304 	and.w	r3, r3, #4
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d101      	bne.n	800d6b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	e0d6      	b.n	800d85e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d6b0:	4b28      	ldr	r3, [pc, #160]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d6b2:	691b      	ldr	r3, [r3, #16]
 800d6b4:	f023 0207 	bic.w	r2, r3, #7
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	4925      	ldr	r1, [pc, #148]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d6be:	4313      	orrs	r3, r2
 800d6c0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d6c2:	f7fc fd93 	bl	800a1ec <HAL_GetTick>
 800d6c6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d6c8:	e00a      	b.n	800d6e0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d6ca:	f7fc fd8f 	bl	800a1ec <HAL_GetTick>
 800d6ce:	4602      	mov	r2, r0
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	1ad3      	subs	r3, r2, r3
 800d6d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d901      	bls.n	800d6e0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800d6dc:	2303      	movs	r3, #3
 800d6de:	e0be      	b.n	800d85e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d6e0:	4b1c      	ldr	r3, [pc, #112]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d6e2:	691b      	ldr	r3, [r3, #16]
 800d6e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	00db      	lsls	r3, r3, #3
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d1eb      	bne.n	800d6ca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	f003 0302 	and.w	r3, r3, #2
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d010      	beq.n	800d720 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	68da      	ldr	r2, [r3, #12]
 800d702:	4b14      	ldr	r3, [pc, #80]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d704:	699b      	ldr	r3, [r3, #24]
 800d706:	f003 030f 	and.w	r3, r3, #15
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d208      	bcs.n	800d720 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d70e:	4b11      	ldr	r3, [pc, #68]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d710:	699b      	ldr	r3, [r3, #24]
 800d712:	f023 020f 	bic.w	r2, r3, #15
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	68db      	ldr	r3, [r3, #12]
 800d71a:	490e      	ldr	r1, [pc, #56]	; (800d754 <HAL_RCC_ClockConfig+0x244>)
 800d71c:	4313      	orrs	r3, r2
 800d71e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800d720:	4b0b      	ldr	r3, [pc, #44]	; (800d750 <HAL_RCC_ClockConfig+0x240>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f003 030f 	and.w	r3, r3, #15
 800d728:	683a      	ldr	r2, [r7, #0]
 800d72a:	429a      	cmp	r2, r3
 800d72c:	d214      	bcs.n	800d758 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d72e:	4b08      	ldr	r3, [pc, #32]	; (800d750 <HAL_RCC_ClockConfig+0x240>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	f023 020f 	bic.w	r2, r3, #15
 800d736:	4906      	ldr	r1, [pc, #24]	; (800d750 <HAL_RCC_ClockConfig+0x240>)
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	4313      	orrs	r3, r2
 800d73c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800d73e:	4b04      	ldr	r3, [pc, #16]	; (800d750 <HAL_RCC_ClockConfig+0x240>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f003 030f 	and.w	r3, r3, #15
 800d746:	683a      	ldr	r2, [r7, #0]
 800d748:	429a      	cmp	r2, r3
 800d74a:	d005      	beq.n	800d758 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800d74c:	2301      	movs	r3, #1
 800d74e:	e086      	b.n	800d85e <HAL_RCC_ClockConfig+0x34e>
 800d750:	52002000 	.word	0x52002000
 800d754:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	f003 0304 	and.w	r3, r3, #4
 800d760:	2b00      	cmp	r3, #0
 800d762:	d010      	beq.n	800d786 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	691a      	ldr	r2, [r3, #16]
 800d768:	4b3f      	ldr	r3, [pc, #252]	; (800d868 <HAL_RCC_ClockConfig+0x358>)
 800d76a:	699b      	ldr	r3, [r3, #24]
 800d76c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d770:	429a      	cmp	r2, r3
 800d772:	d208      	bcs.n	800d786 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800d774:	4b3c      	ldr	r3, [pc, #240]	; (800d868 <HAL_RCC_ClockConfig+0x358>)
 800d776:	699b      	ldr	r3, [r3, #24]
 800d778:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	691b      	ldr	r3, [r3, #16]
 800d780:	4939      	ldr	r1, [pc, #228]	; (800d868 <HAL_RCC_ClockConfig+0x358>)
 800d782:	4313      	orrs	r3, r2
 800d784:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f003 0308 	and.w	r3, r3, #8
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d010      	beq.n	800d7b4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	695a      	ldr	r2, [r3, #20]
 800d796:	4b34      	ldr	r3, [pc, #208]	; (800d868 <HAL_RCC_ClockConfig+0x358>)
 800d798:	69db      	ldr	r3, [r3, #28]
 800d79a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d208      	bcs.n	800d7b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800d7a2:	4b31      	ldr	r3, [pc, #196]	; (800d868 <HAL_RCC_ClockConfig+0x358>)
 800d7a4:	69db      	ldr	r3, [r3, #28]
 800d7a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	695b      	ldr	r3, [r3, #20]
 800d7ae:	492e      	ldr	r1, [pc, #184]	; (800d868 <HAL_RCC_ClockConfig+0x358>)
 800d7b0:	4313      	orrs	r3, r2
 800d7b2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	f003 0310 	and.w	r3, r3, #16
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d010      	beq.n	800d7e2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	699a      	ldr	r2, [r3, #24]
 800d7c4:	4b28      	ldr	r3, [pc, #160]	; (800d868 <HAL_RCC_ClockConfig+0x358>)
 800d7c6:	69db      	ldr	r3, [r3, #28]
 800d7c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d7cc:	429a      	cmp	r2, r3
 800d7ce:	d208      	bcs.n	800d7e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800d7d0:	4b25      	ldr	r3, [pc, #148]	; (800d868 <HAL_RCC_ClockConfig+0x358>)
 800d7d2:	69db      	ldr	r3, [r3, #28]
 800d7d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	699b      	ldr	r3, [r3, #24]
 800d7dc:	4922      	ldr	r1, [pc, #136]	; (800d868 <HAL_RCC_ClockConfig+0x358>)
 800d7de:	4313      	orrs	r3, r2
 800d7e0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f003 0320 	and.w	r3, r3, #32
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d010      	beq.n	800d810 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	69da      	ldr	r2, [r3, #28]
 800d7f2:	4b1d      	ldr	r3, [pc, #116]	; (800d868 <HAL_RCC_ClockConfig+0x358>)
 800d7f4:	6a1b      	ldr	r3, [r3, #32]
 800d7f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d208      	bcs.n	800d810 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800d7fe:	4b1a      	ldr	r3, [pc, #104]	; (800d868 <HAL_RCC_ClockConfig+0x358>)
 800d800:	6a1b      	ldr	r3, [r3, #32]
 800d802:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	69db      	ldr	r3, [r3, #28]
 800d80a:	4917      	ldr	r1, [pc, #92]	; (800d868 <HAL_RCC_ClockConfig+0x358>)
 800d80c:	4313      	orrs	r3, r2
 800d80e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800d810:	f000 f844 	bl	800d89c <HAL_RCC_GetSysClockFreq>
 800d814:	4602      	mov	r2, r0
 800d816:	4b14      	ldr	r3, [pc, #80]	; (800d868 <HAL_RCC_ClockConfig+0x358>)
 800d818:	699b      	ldr	r3, [r3, #24]
 800d81a:	0a1b      	lsrs	r3, r3, #8
 800d81c:	f003 030f 	and.w	r3, r3, #15
 800d820:	4912      	ldr	r1, [pc, #72]	; (800d86c <HAL_RCC_ClockConfig+0x35c>)
 800d822:	5ccb      	ldrb	r3, [r1, r3]
 800d824:	f003 031f 	and.w	r3, r3, #31
 800d828:	fa22 f303 	lsr.w	r3, r2, r3
 800d82c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d82e:	4b0e      	ldr	r3, [pc, #56]	; (800d868 <HAL_RCC_ClockConfig+0x358>)
 800d830:	699b      	ldr	r3, [r3, #24]
 800d832:	f003 030f 	and.w	r3, r3, #15
 800d836:	4a0d      	ldr	r2, [pc, #52]	; (800d86c <HAL_RCC_ClockConfig+0x35c>)
 800d838:	5cd3      	ldrb	r3, [r2, r3]
 800d83a:	f003 031f 	and.w	r3, r3, #31
 800d83e:	693a      	ldr	r2, [r7, #16]
 800d840:	fa22 f303 	lsr.w	r3, r2, r3
 800d844:	4a0a      	ldr	r2, [pc, #40]	; (800d870 <HAL_RCC_ClockConfig+0x360>)
 800d846:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d848:	4a0a      	ldr	r2, [pc, #40]	; (800d874 <HAL_RCC_ClockConfig+0x364>)
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800d84e:	4b0a      	ldr	r3, [pc, #40]	; (800d878 <HAL_RCC_ClockConfig+0x368>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	4618      	mov	r0, r3
 800d854:	f7fc fc80 	bl	800a158 <HAL_InitTick>
 800d858:	4603      	mov	r3, r0
 800d85a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800d85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3718      	adds	r7, #24
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}
 800d866:	bf00      	nop
 800d868:	58024400 	.word	0x58024400
 800d86c:	080180c0 	.word	0x080180c0
 800d870:	24000054 	.word	0x24000054
 800d874:	24000050 	.word	0x24000050
 800d878:	24000058 	.word	0x24000058

0800d87c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800d87c:	b480      	push	{r7}
 800d87e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800d880:	4b05      	ldr	r3, [pc, #20]	; (800d898 <HAL_RCC_EnableCSS+0x1c>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4a04      	ldr	r2, [pc, #16]	; (800d898 <HAL_RCC_EnableCSS+0x1c>)
 800d886:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d88a:	6013      	str	r3, [r2, #0]
}
 800d88c:	bf00      	nop
 800d88e:	46bd      	mov	sp, r7
 800d890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d894:	4770      	bx	lr
 800d896:	bf00      	nop
 800d898:	58024400 	.word	0x58024400

0800d89c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b089      	sub	sp, #36	; 0x24
 800d8a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d8a2:	4bb3      	ldr	r3, [pc, #716]	; (800db70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d8a4:	691b      	ldr	r3, [r3, #16]
 800d8a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d8aa:	2b18      	cmp	r3, #24
 800d8ac:	f200 8155 	bhi.w	800db5a <HAL_RCC_GetSysClockFreq+0x2be>
 800d8b0:	a201      	add	r2, pc, #4	; (adr r2, 800d8b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800d8b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8b6:	bf00      	nop
 800d8b8:	0800d91d 	.word	0x0800d91d
 800d8bc:	0800db5b 	.word	0x0800db5b
 800d8c0:	0800db5b 	.word	0x0800db5b
 800d8c4:	0800db5b 	.word	0x0800db5b
 800d8c8:	0800db5b 	.word	0x0800db5b
 800d8cc:	0800db5b 	.word	0x0800db5b
 800d8d0:	0800db5b 	.word	0x0800db5b
 800d8d4:	0800db5b 	.word	0x0800db5b
 800d8d8:	0800d943 	.word	0x0800d943
 800d8dc:	0800db5b 	.word	0x0800db5b
 800d8e0:	0800db5b 	.word	0x0800db5b
 800d8e4:	0800db5b 	.word	0x0800db5b
 800d8e8:	0800db5b 	.word	0x0800db5b
 800d8ec:	0800db5b 	.word	0x0800db5b
 800d8f0:	0800db5b 	.word	0x0800db5b
 800d8f4:	0800db5b 	.word	0x0800db5b
 800d8f8:	0800d949 	.word	0x0800d949
 800d8fc:	0800db5b 	.word	0x0800db5b
 800d900:	0800db5b 	.word	0x0800db5b
 800d904:	0800db5b 	.word	0x0800db5b
 800d908:	0800db5b 	.word	0x0800db5b
 800d90c:	0800db5b 	.word	0x0800db5b
 800d910:	0800db5b 	.word	0x0800db5b
 800d914:	0800db5b 	.word	0x0800db5b
 800d918:	0800d94f 	.word	0x0800d94f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d91c:	4b94      	ldr	r3, [pc, #592]	; (800db70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f003 0320 	and.w	r3, r3, #32
 800d924:	2b00      	cmp	r3, #0
 800d926:	d009      	beq.n	800d93c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d928:	4b91      	ldr	r3, [pc, #580]	; (800db70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	08db      	lsrs	r3, r3, #3
 800d92e:	f003 0303 	and.w	r3, r3, #3
 800d932:	4a90      	ldr	r2, [pc, #576]	; (800db74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d934:	fa22 f303 	lsr.w	r3, r2, r3
 800d938:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800d93a:	e111      	b.n	800db60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800d93c:	4b8d      	ldr	r3, [pc, #564]	; (800db74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d93e:	61bb      	str	r3, [r7, #24]
    break;
 800d940:	e10e      	b.n	800db60 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800d942:	4b8d      	ldr	r3, [pc, #564]	; (800db78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d944:	61bb      	str	r3, [r7, #24]
    break;
 800d946:	e10b      	b.n	800db60 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800d948:	4b8c      	ldr	r3, [pc, #560]	; (800db7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800d94a:	61bb      	str	r3, [r7, #24]
    break;
 800d94c:	e108      	b.n	800db60 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d94e:	4b88      	ldr	r3, [pc, #544]	; (800db70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d952:	f003 0303 	and.w	r3, r3, #3
 800d956:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800d958:	4b85      	ldr	r3, [pc, #532]	; (800db70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d95a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d95c:	091b      	lsrs	r3, r3, #4
 800d95e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d962:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800d964:	4b82      	ldr	r3, [pc, #520]	; (800db70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d968:	f003 0301 	and.w	r3, r3, #1
 800d96c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800d96e:	4b80      	ldr	r3, [pc, #512]	; (800db70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d972:	08db      	lsrs	r3, r3, #3
 800d974:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d978:	68fa      	ldr	r2, [r7, #12]
 800d97a:	fb02 f303 	mul.w	r3, r2, r3
 800d97e:	ee07 3a90 	vmov	s15, r3
 800d982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d986:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	f000 80e1 	beq.w	800db54 <HAL_RCC_GetSysClockFreq+0x2b8>
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	2b02      	cmp	r3, #2
 800d996:	f000 8083 	beq.w	800daa0 <HAL_RCC_GetSysClockFreq+0x204>
 800d99a:	697b      	ldr	r3, [r7, #20]
 800d99c:	2b02      	cmp	r3, #2
 800d99e:	f200 80a1 	bhi.w	800dae4 <HAL_RCC_GetSysClockFreq+0x248>
 800d9a2:	697b      	ldr	r3, [r7, #20]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d003      	beq.n	800d9b0 <HAL_RCC_GetSysClockFreq+0x114>
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	2b01      	cmp	r3, #1
 800d9ac:	d056      	beq.n	800da5c <HAL_RCC_GetSysClockFreq+0x1c0>
 800d9ae:	e099      	b.n	800dae4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d9b0:	4b6f      	ldr	r3, [pc, #444]	; (800db70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f003 0320 	and.w	r3, r3, #32
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d02d      	beq.n	800da18 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d9bc:	4b6c      	ldr	r3, [pc, #432]	; (800db70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	08db      	lsrs	r3, r3, #3
 800d9c2:	f003 0303 	and.w	r3, r3, #3
 800d9c6:	4a6b      	ldr	r2, [pc, #428]	; (800db74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800d9c8:	fa22 f303 	lsr.w	r3, r2, r3
 800d9cc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	ee07 3a90 	vmov	s15, r3
 800d9d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9d8:	693b      	ldr	r3, [r7, #16]
 800d9da:	ee07 3a90 	vmov	s15, r3
 800d9de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9e6:	4b62      	ldr	r3, [pc, #392]	; (800db70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d9e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9ee:	ee07 3a90 	vmov	s15, r3
 800d9f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800d9fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 800db80 <HAL_RCC_GetSysClockFreq+0x2e4>
 800d9fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800da16:	e087      	b.n	800db28 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	ee07 3a90 	vmov	s15, r3
 800da1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da22:	eddf 6a58 	vldr	s13, [pc, #352]	; 800db84 <HAL_RCC_GetSysClockFreq+0x2e8>
 800da26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da2a:	4b51      	ldr	r3, [pc, #324]	; (800db70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800da2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da32:	ee07 3a90 	vmov	s15, r3
 800da36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da3a:	ed97 6a02 	vldr	s12, [r7, #8]
 800da3e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800db80 <HAL_RCC_GetSysClockFreq+0x2e4>
 800da42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da5a:	e065      	b.n	800db28 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	ee07 3a90 	vmov	s15, r3
 800da62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da66:	eddf 6a48 	vldr	s13, [pc, #288]	; 800db88 <HAL_RCC_GetSysClockFreq+0x2ec>
 800da6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da6e:	4b40      	ldr	r3, [pc, #256]	; (800db70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800da70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da76:	ee07 3a90 	vmov	s15, r3
 800da7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da7e:	ed97 6a02 	vldr	s12, [r7, #8]
 800da82:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800db80 <HAL_RCC_GetSysClockFreq+0x2e4>
 800da86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da9e:	e043      	b.n	800db28 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	ee07 3a90 	vmov	s15, r3
 800daa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daaa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800db8c <HAL_RCC_GetSysClockFreq+0x2f0>
 800daae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dab2:	4b2f      	ldr	r3, [pc, #188]	; (800db70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800dab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daba:	ee07 3a90 	vmov	s15, r3
 800dabe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dac2:	ed97 6a02 	vldr	s12, [r7, #8]
 800dac6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800db80 <HAL_RCC_GetSysClockFreq+0x2e4>
 800daca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dada:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dade:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dae2:	e021      	b.n	800db28 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800dae4:	693b      	ldr	r3, [r7, #16]
 800dae6:	ee07 3a90 	vmov	s15, r3
 800daea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daee:	eddf 6a26 	vldr	s13, [pc, #152]	; 800db88 <HAL_RCC_GetSysClockFreq+0x2ec>
 800daf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800daf6:	4b1e      	ldr	r3, [pc, #120]	; (800db70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800daf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dafa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dafe:	ee07 3a90 	vmov	s15, r3
 800db02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db06:	ed97 6a02 	vldr	s12, [r7, #8]
 800db0a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800db80 <HAL_RCC_GetSysClockFreq+0x2e4>
 800db0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800db1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db26:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800db28:	4b11      	ldr	r3, [pc, #68]	; (800db70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800db2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db2c:	0a5b      	lsrs	r3, r3, #9
 800db2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db32:	3301      	adds	r3, #1
 800db34:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	ee07 3a90 	vmov	s15, r3
 800db3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800db40:	edd7 6a07 	vldr	s13, [r7, #28]
 800db44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db4c:	ee17 3a90 	vmov	r3, s15
 800db50:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800db52:	e005      	b.n	800db60 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800db54:	2300      	movs	r3, #0
 800db56:	61bb      	str	r3, [r7, #24]
    break;
 800db58:	e002      	b.n	800db60 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800db5a:	4b07      	ldr	r3, [pc, #28]	; (800db78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800db5c:	61bb      	str	r3, [r7, #24]
    break;
 800db5e:	bf00      	nop
  }

  return sysclockfreq;
 800db60:	69bb      	ldr	r3, [r7, #24]
}
 800db62:	4618      	mov	r0, r3
 800db64:	3724      	adds	r7, #36	; 0x24
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop
 800db70:	58024400 	.word	0x58024400
 800db74:	03d09000 	.word	0x03d09000
 800db78:	003d0900 	.word	0x003d0900
 800db7c:	017d7840 	.word	0x017d7840
 800db80:	46000000 	.word	0x46000000
 800db84:	4c742400 	.word	0x4c742400
 800db88:	4a742400 	.word	0x4a742400
 800db8c:	4bbebc20 	.word	0x4bbebc20

0800db90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b082      	sub	sp, #8
 800db94:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800db96:	f7ff fe81 	bl	800d89c <HAL_RCC_GetSysClockFreq>
 800db9a:	4602      	mov	r2, r0
 800db9c:	4b10      	ldr	r3, [pc, #64]	; (800dbe0 <HAL_RCC_GetHCLKFreq+0x50>)
 800db9e:	699b      	ldr	r3, [r3, #24]
 800dba0:	0a1b      	lsrs	r3, r3, #8
 800dba2:	f003 030f 	and.w	r3, r3, #15
 800dba6:	490f      	ldr	r1, [pc, #60]	; (800dbe4 <HAL_RCC_GetHCLKFreq+0x54>)
 800dba8:	5ccb      	ldrb	r3, [r1, r3]
 800dbaa:	f003 031f 	and.w	r3, r3, #31
 800dbae:	fa22 f303 	lsr.w	r3, r2, r3
 800dbb2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800dbb4:	4b0a      	ldr	r3, [pc, #40]	; (800dbe0 <HAL_RCC_GetHCLKFreq+0x50>)
 800dbb6:	699b      	ldr	r3, [r3, #24]
 800dbb8:	f003 030f 	and.w	r3, r3, #15
 800dbbc:	4a09      	ldr	r2, [pc, #36]	; (800dbe4 <HAL_RCC_GetHCLKFreq+0x54>)
 800dbbe:	5cd3      	ldrb	r3, [r2, r3]
 800dbc0:	f003 031f 	and.w	r3, r3, #31
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	fa22 f303 	lsr.w	r3, r2, r3
 800dbca:	4a07      	ldr	r2, [pc, #28]	; (800dbe8 <HAL_RCC_GetHCLKFreq+0x58>)
 800dbcc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800dbce:	4a07      	ldr	r2, [pc, #28]	; (800dbec <HAL_RCC_GetHCLKFreq+0x5c>)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800dbd4:	4b04      	ldr	r3, [pc, #16]	; (800dbe8 <HAL_RCC_GetHCLKFreq+0x58>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3708      	adds	r7, #8
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	58024400 	.word	0x58024400
 800dbe4:	080180c0 	.word	0x080180c0
 800dbe8:	24000054 	.word	0x24000054
 800dbec:	24000050 	.word	0x24000050

0800dbf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800dbf4:	f7ff ffcc 	bl	800db90 <HAL_RCC_GetHCLKFreq>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	4b06      	ldr	r3, [pc, #24]	; (800dc14 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dbfc:	69db      	ldr	r3, [r3, #28]
 800dbfe:	091b      	lsrs	r3, r3, #4
 800dc00:	f003 0307 	and.w	r3, r3, #7
 800dc04:	4904      	ldr	r1, [pc, #16]	; (800dc18 <HAL_RCC_GetPCLK1Freq+0x28>)
 800dc06:	5ccb      	ldrb	r3, [r1, r3]
 800dc08:	f003 031f 	and.w	r3, r3, #31
 800dc0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	bd80      	pop	{r7, pc}
 800dc14:	58024400 	.word	0x58024400
 800dc18:	080180c0 	.word	0x080180c0

0800dc1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800dc20:	f7ff ffb6 	bl	800db90 <HAL_RCC_GetHCLKFreq>
 800dc24:	4602      	mov	r2, r0
 800dc26:	4b06      	ldr	r3, [pc, #24]	; (800dc40 <HAL_RCC_GetPCLK2Freq+0x24>)
 800dc28:	69db      	ldr	r3, [r3, #28]
 800dc2a:	0a1b      	lsrs	r3, r3, #8
 800dc2c:	f003 0307 	and.w	r3, r3, #7
 800dc30:	4904      	ldr	r1, [pc, #16]	; (800dc44 <HAL_RCC_GetPCLK2Freq+0x28>)
 800dc32:	5ccb      	ldrb	r3, [r1, r3]
 800dc34:	f003 031f 	and.w	r3, r3, #31
 800dc38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	58024400 	.word	0x58024400
 800dc44:	080180c0 	.word	0x080180c0

0800dc48 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800dc4c:	4b07      	ldr	r3, [pc, #28]	; (800dc6c <HAL_RCC_NMI_IRQHandler+0x24>)
 800dc4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dc54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc58:	d105      	bne.n	800dc66 <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800dc5a:	f000 f809 	bl	800dc70 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800dc5e:	4b03      	ldr	r3, [pc, #12]	; (800dc6c <HAL_RCC_NMI_IRQHandler+0x24>)
 800dc60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dc64:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800dc66:	bf00      	nop
 800dc68:	bd80      	pop	{r7, pc}
 800dc6a:	bf00      	nop
 800dc6c:	58024400 	.word	0x58024400

0800dc70 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 800dc70:	b480      	push	{r7}
 800dc72:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 800dc74:	bf00      	nop
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr
	...

0800dc80 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b086      	sub	sp, #24
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800dc88:	2300      	movs	r3, #0
 800dc8a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d03f      	beq.n	800dd1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dca0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800dca4:	d02a      	beq.n	800dcfc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800dca6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800dcaa:	d824      	bhi.n	800dcf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800dcac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dcb0:	d018      	beq.n	800dce4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800dcb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dcb6:	d81e      	bhi.n	800dcf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d003      	beq.n	800dcc4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800dcbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dcc0:	d007      	beq.n	800dcd2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800dcc2:	e018      	b.n	800dcf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dcc4:	4bab      	ldr	r3, [pc, #684]	; (800df74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dcc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcc8:	4aaa      	ldr	r2, [pc, #680]	; (800df74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dcca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dcce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800dcd0:	e015      	b.n	800dcfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	3304      	adds	r3, #4
 800dcd6:	2102      	movs	r1, #2
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f001 feff 	bl	800fadc <RCCEx_PLL2_Config>
 800dcde:	4603      	mov	r3, r0
 800dce0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800dce2:	e00c      	b.n	800dcfe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	3324      	adds	r3, #36	; 0x24
 800dce8:	2102      	movs	r1, #2
 800dcea:	4618      	mov	r0, r3
 800dcec:	f001 ffa8 	bl	800fc40 <RCCEx_PLL3_Config>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800dcf4:	e003      	b.n	800dcfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	75fb      	strb	r3, [r7, #23]
      break;
 800dcfa:	e000      	b.n	800dcfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800dcfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dcfe:	7dfb      	ldrb	r3, [r7, #23]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d109      	bne.n	800dd18 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800dd04:	4b9b      	ldr	r3, [pc, #620]	; (800df74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dd06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd10:	4998      	ldr	r1, [pc, #608]	; (800df74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dd12:	4313      	orrs	r3, r2
 800dd14:	650b      	str	r3, [r1, #80]	; 0x50
 800dd16:	e001      	b.n	800dd1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd18:	7dfb      	ldrb	r3, [r7, #23]
 800dd1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d03d      	beq.n	800dda4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd2c:	2b04      	cmp	r3, #4
 800dd2e:	d826      	bhi.n	800dd7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800dd30:	a201      	add	r2, pc, #4	; (adr r2, 800dd38 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800dd32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd36:	bf00      	nop
 800dd38:	0800dd4d 	.word	0x0800dd4d
 800dd3c:	0800dd5b 	.word	0x0800dd5b
 800dd40:	0800dd6d 	.word	0x0800dd6d
 800dd44:	0800dd85 	.word	0x0800dd85
 800dd48:	0800dd85 	.word	0x0800dd85
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dd4c:	4b89      	ldr	r3, [pc, #548]	; (800df74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd50:	4a88      	ldr	r2, [pc, #544]	; (800df74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dd52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dd56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800dd58:	e015      	b.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	3304      	adds	r3, #4
 800dd5e:	2100      	movs	r1, #0
 800dd60:	4618      	mov	r0, r3
 800dd62:	f001 febb 	bl	800fadc <RCCEx_PLL2_Config>
 800dd66:	4603      	mov	r3, r0
 800dd68:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800dd6a:	e00c      	b.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	3324      	adds	r3, #36	; 0x24
 800dd70:	2100      	movs	r1, #0
 800dd72:	4618      	mov	r0, r3
 800dd74:	f001 ff64 	bl	800fc40 <RCCEx_PLL3_Config>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800dd7c:	e003      	b.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800dd7e:	2301      	movs	r3, #1
 800dd80:	75fb      	strb	r3, [r7, #23]
      break;
 800dd82:	e000      	b.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800dd84:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dd86:	7dfb      	ldrb	r3, [r7, #23]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d109      	bne.n	800dda0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dd8c:	4b79      	ldr	r3, [pc, #484]	; (800df74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dd8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd90:	f023 0207 	bic.w	r2, r3, #7
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd98:	4976      	ldr	r1, [pc, #472]	; (800df74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dd9a:	4313      	orrs	r3, r2
 800dd9c:	650b      	str	r3, [r1, #80]	; 0x50
 800dd9e:	e001      	b.n	800dda4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dda0:	7dfb      	ldrb	r3, [r7, #23]
 800dda2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d051      	beq.n	800de54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ddb6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ddba:	d036      	beq.n	800de2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ddbc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ddc0:	d830      	bhi.n	800de24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800ddc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ddc6:	d032      	beq.n	800de2e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800ddc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ddcc:	d82a      	bhi.n	800de24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800ddce:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ddd2:	d02e      	beq.n	800de32 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800ddd4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ddd8:	d824      	bhi.n	800de24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800ddda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ddde:	d018      	beq.n	800de12 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800dde0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dde4:	d81e      	bhi.n	800de24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d003      	beq.n	800ddf2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800ddea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ddee:	d007      	beq.n	800de00 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800ddf0:	e018      	b.n	800de24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ddf2:	4b60      	ldr	r3, [pc, #384]	; (800df74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ddf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf6:	4a5f      	ldr	r2, [pc, #380]	; (800df74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ddf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ddfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ddfe:	e019      	b.n	800de34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	3304      	adds	r3, #4
 800de04:	2100      	movs	r1, #0
 800de06:	4618      	mov	r0, r3
 800de08:	f001 fe68 	bl	800fadc <RCCEx_PLL2_Config>
 800de0c:	4603      	mov	r3, r0
 800de0e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800de10:	e010      	b.n	800de34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	3324      	adds	r3, #36	; 0x24
 800de16:	2100      	movs	r1, #0
 800de18:	4618      	mov	r0, r3
 800de1a:	f001 ff11 	bl	800fc40 <RCCEx_PLL3_Config>
 800de1e:	4603      	mov	r3, r0
 800de20:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800de22:	e007      	b.n	800de34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800de24:	2301      	movs	r3, #1
 800de26:	75fb      	strb	r3, [r7, #23]
      break;
 800de28:	e004      	b.n	800de34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800de2a:	bf00      	nop
 800de2c:	e002      	b.n	800de34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800de2e:	bf00      	nop
 800de30:	e000      	b.n	800de34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800de32:	bf00      	nop
    }

    if(ret == HAL_OK)
 800de34:	7dfb      	ldrb	r3, [r7, #23]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d10a      	bne.n	800de50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800de3a:	4b4e      	ldr	r3, [pc, #312]	; (800df74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800de3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de3e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800de48:	494a      	ldr	r1, [pc, #296]	; (800df74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800de4a:	4313      	orrs	r3, r2
 800de4c:	658b      	str	r3, [r1, #88]	; 0x58
 800de4e:	e001      	b.n	800de54 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de50:	7dfb      	ldrb	r3, [r7, #23]
 800de52:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d051      	beq.n	800df04 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800de66:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800de6a:	d036      	beq.n	800deda <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800de6c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800de70:	d830      	bhi.n	800ded4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800de72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800de76:	d032      	beq.n	800dede <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800de78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800de7c:	d82a      	bhi.n	800ded4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800de7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800de82:	d02e      	beq.n	800dee2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 800de84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800de88:	d824      	bhi.n	800ded4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800de8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de8e:	d018      	beq.n	800dec2 <HAL_RCCEx_PeriphCLKConfig+0x242>
 800de90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800de94:	d81e      	bhi.n	800ded4 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800de96:	2b00      	cmp	r3, #0
 800de98:	d003      	beq.n	800dea2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800de9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800de9e:	d007      	beq.n	800deb0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800dea0:	e018      	b.n	800ded4 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dea2:	4b34      	ldr	r3, [pc, #208]	; (800df74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dea6:	4a33      	ldr	r2, [pc, #204]	; (800df74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800dea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800deac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800deae:	e019      	b.n	800dee4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	3304      	adds	r3, #4
 800deb4:	2100      	movs	r1, #0
 800deb6:	4618      	mov	r0, r3
 800deb8:	f001 fe10 	bl	800fadc <RCCEx_PLL2_Config>
 800debc:	4603      	mov	r3, r0
 800debe:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800dec0:	e010      	b.n	800dee4 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	3324      	adds	r3, #36	; 0x24
 800dec6:	2100      	movs	r1, #0
 800dec8:	4618      	mov	r0, r3
 800deca:	f001 feb9 	bl	800fc40 <RCCEx_PLL3_Config>
 800dece:	4603      	mov	r3, r0
 800ded0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ded2:	e007      	b.n	800dee4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800ded4:	2301      	movs	r3, #1
 800ded6:	75fb      	strb	r3, [r7, #23]
      break;
 800ded8:	e004      	b.n	800dee4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800deda:	bf00      	nop
 800dedc:	e002      	b.n	800dee4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800dede:	bf00      	nop
 800dee0:	e000      	b.n	800dee4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800dee2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dee4:	7dfb      	ldrb	r3, [r7, #23]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d10a      	bne.n	800df00 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800deea:	4b22      	ldr	r3, [pc, #136]	; (800df74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800deec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800deee:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800def8:	491e      	ldr	r1, [pc, #120]	; (800df74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800defa:	4313      	orrs	r3, r2
 800defc:	658b      	str	r3, [r1, #88]	; 0x58
 800defe:	e001      	b.n	800df04 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df00:	7dfb      	ldrb	r3, [r7, #23]
 800df02:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d035      	beq.n	800df7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df14:	2b30      	cmp	r3, #48	; 0x30
 800df16:	d01c      	beq.n	800df52 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800df18:	2b30      	cmp	r3, #48	; 0x30
 800df1a:	d817      	bhi.n	800df4c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800df1c:	2b20      	cmp	r3, #32
 800df1e:	d00c      	beq.n	800df3a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800df20:	2b20      	cmp	r3, #32
 800df22:	d813      	bhi.n	800df4c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800df24:	2b00      	cmp	r3, #0
 800df26:	d016      	beq.n	800df56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800df28:	2b10      	cmp	r3, #16
 800df2a:	d10f      	bne.n	800df4c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800df2c:	4b11      	ldr	r3, [pc, #68]	; (800df74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800df2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df30:	4a10      	ldr	r2, [pc, #64]	; (800df74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800df32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800df36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800df38:	e00e      	b.n	800df58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	3304      	adds	r3, #4
 800df3e:	2102      	movs	r1, #2
 800df40:	4618      	mov	r0, r3
 800df42:	f001 fdcb 	bl	800fadc <RCCEx_PLL2_Config>
 800df46:	4603      	mov	r3, r0
 800df48:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800df4a:	e005      	b.n	800df58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800df4c:	2301      	movs	r3, #1
 800df4e:	75fb      	strb	r3, [r7, #23]
      break;
 800df50:	e002      	b.n	800df58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800df52:	bf00      	nop
 800df54:	e000      	b.n	800df58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800df56:	bf00      	nop
    }

    if(ret == HAL_OK)
 800df58:	7dfb      	ldrb	r3, [r7, #23]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d10c      	bne.n	800df78 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800df5e:	4b05      	ldr	r3, [pc, #20]	; (800df74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800df60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df62:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df6a:	4902      	ldr	r1, [pc, #8]	; (800df74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800df6c:	4313      	orrs	r3, r2
 800df6e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800df70:	e004      	b.n	800df7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800df72:	bf00      	nop
 800df74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df78:	7dfb      	ldrb	r3, [r7, #23]
 800df7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800df84:	2b00      	cmp	r3, #0
 800df86:	d047      	beq.n	800e018 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800df90:	d030      	beq.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800df92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800df96:	d82a      	bhi.n	800dfee <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800df98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800df9c:	d02c      	beq.n	800dff8 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800df9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800dfa2:	d824      	bhi.n	800dfee <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800dfa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dfa8:	d018      	beq.n	800dfdc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800dfaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dfae:	d81e      	bhi.n	800dfee <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d003      	beq.n	800dfbc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800dfb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfb8:	d007      	beq.n	800dfca <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800dfba:	e018      	b.n	800dfee <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dfbc:	4bac      	ldr	r3, [pc, #688]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800dfbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfc0:	4aab      	ldr	r2, [pc, #684]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800dfc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dfc6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800dfc8:	e017      	b.n	800dffa <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	3304      	adds	r3, #4
 800dfce:	2100      	movs	r1, #0
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f001 fd83 	bl	800fadc <RCCEx_PLL2_Config>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800dfda:	e00e      	b.n	800dffa <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	3324      	adds	r3, #36	; 0x24
 800dfe0:	2100      	movs	r1, #0
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f001 fe2c 	bl	800fc40 <RCCEx_PLL3_Config>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800dfec:	e005      	b.n	800dffa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800dfee:	2301      	movs	r3, #1
 800dff0:	75fb      	strb	r3, [r7, #23]
      break;
 800dff2:	e002      	b.n	800dffa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800dff4:	bf00      	nop
 800dff6:	e000      	b.n	800dffa <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800dff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800dffa:	7dfb      	ldrb	r3, [r7, #23]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d109      	bne.n	800e014 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800e000:	4b9b      	ldr	r3, [pc, #620]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e004:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e00c:	4998      	ldr	r1, [pc, #608]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e00e:	4313      	orrs	r3, r2
 800e010:	650b      	str	r3, [r1, #80]	; 0x50
 800e012:	e001      	b.n	800e018 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e014:	7dfb      	ldrb	r3, [r7, #23]
 800e016:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e020:	2b00      	cmp	r3, #0
 800e022:	d049      	beq.n	800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e028:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e02c:	d02e      	beq.n	800e08c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800e02e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e032:	d828      	bhi.n	800e086 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e034:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e038:	d02a      	beq.n	800e090 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800e03a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e03e:	d822      	bhi.n	800e086 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e040:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e044:	d026      	beq.n	800e094 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800e046:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800e04a:	d81c      	bhi.n	800e086 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e04c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e050:	d010      	beq.n	800e074 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800e052:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e056:	d816      	bhi.n	800e086 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d01d      	beq.n	800e098 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800e05c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e060:	d111      	bne.n	800e086 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	3304      	adds	r3, #4
 800e066:	2101      	movs	r1, #1
 800e068:	4618      	mov	r0, r3
 800e06a:	f001 fd37 	bl	800fadc <RCCEx_PLL2_Config>
 800e06e:	4603      	mov	r3, r0
 800e070:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800e072:	e012      	b.n	800e09a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	3324      	adds	r3, #36	; 0x24
 800e078:	2101      	movs	r1, #1
 800e07a:	4618      	mov	r0, r3
 800e07c:	f001 fde0 	bl	800fc40 <RCCEx_PLL3_Config>
 800e080:	4603      	mov	r3, r0
 800e082:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800e084:	e009      	b.n	800e09a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e086:	2301      	movs	r3, #1
 800e088:	75fb      	strb	r3, [r7, #23]
      break;
 800e08a:	e006      	b.n	800e09a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e08c:	bf00      	nop
 800e08e:	e004      	b.n	800e09a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e090:	bf00      	nop
 800e092:	e002      	b.n	800e09a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e094:	bf00      	nop
 800e096:	e000      	b.n	800e09a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800e098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e09a:	7dfb      	ldrb	r3, [r7, #23]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d109      	bne.n	800e0b4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800e0a0:	4b73      	ldr	r3, [pc, #460]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e0a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0a4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0ac:	4970      	ldr	r1, [pc, #448]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e0ae:	4313      	orrs	r3, r2
 800e0b0:	650b      	str	r3, [r1, #80]	; 0x50
 800e0b2:	e001      	b.n	800e0b8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0b4:	7dfb      	ldrb	r3, [r7, #23]
 800e0b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d04b      	beq.n	800e15c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e0ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e0ce:	d02e      	beq.n	800e12e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800e0d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e0d4:	d828      	bhi.n	800e128 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e0d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0da:	d02a      	beq.n	800e132 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800e0dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e0e0:	d822      	bhi.n	800e128 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e0e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e0e6:	d026      	beq.n	800e136 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800e0e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e0ec:	d81c      	bhi.n	800e128 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e0ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e0f2:	d010      	beq.n	800e116 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800e0f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e0f8:	d816      	bhi.n	800e128 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d01d      	beq.n	800e13a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800e0fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e102:	d111      	bne.n	800e128 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	3304      	adds	r3, #4
 800e108:	2101      	movs	r1, #1
 800e10a:	4618      	mov	r0, r3
 800e10c:	f001 fce6 	bl	800fadc <RCCEx_PLL2_Config>
 800e110:	4603      	mov	r3, r0
 800e112:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800e114:	e012      	b.n	800e13c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	3324      	adds	r3, #36	; 0x24
 800e11a:	2101      	movs	r1, #1
 800e11c:	4618      	mov	r0, r3
 800e11e:	f001 fd8f 	bl	800fc40 <RCCEx_PLL3_Config>
 800e122:	4603      	mov	r3, r0
 800e124:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800e126:	e009      	b.n	800e13c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800e128:	2301      	movs	r3, #1
 800e12a:	75fb      	strb	r3, [r7, #23]
      break;
 800e12c:	e006      	b.n	800e13c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e12e:	bf00      	nop
 800e130:	e004      	b.n	800e13c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e132:	bf00      	nop
 800e134:	e002      	b.n	800e13c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e136:	bf00      	nop
 800e138:	e000      	b.n	800e13c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800e13a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e13c:	7dfb      	ldrb	r3, [r7, #23]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d10a      	bne.n	800e158 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800e142:	4b4b      	ldr	r3, [pc, #300]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e146:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e150:	4947      	ldr	r1, [pc, #284]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e152:	4313      	orrs	r3, r2
 800e154:	658b      	str	r3, [r1, #88]	; 0x58
 800e156:	e001      	b.n	800e15c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e158:	7dfb      	ldrb	r3, [r7, #23]
 800e15a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e164:	2b00      	cmp	r3, #0
 800e166:	d02f      	beq.n	800e1c8 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e16c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e170:	d00e      	beq.n	800e190 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800e172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e176:	d814      	bhi.n	800e1a2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d015      	beq.n	800e1a8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800e17c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e180:	d10f      	bne.n	800e1a2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e182:	4b3b      	ldr	r3, [pc, #236]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e186:	4a3a      	ldr	r2, [pc, #232]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e18c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800e18e:	e00c      	b.n	800e1aa <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	3304      	adds	r3, #4
 800e194:	2101      	movs	r1, #1
 800e196:	4618      	mov	r0, r3
 800e198:	f001 fca0 	bl	800fadc <RCCEx_PLL2_Config>
 800e19c:	4603      	mov	r3, r0
 800e19e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800e1a0:	e003      	b.n	800e1aa <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	75fb      	strb	r3, [r7, #23]
      break;
 800e1a6:	e000      	b.n	800e1aa <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800e1a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e1aa:	7dfb      	ldrb	r3, [r7, #23]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d109      	bne.n	800e1c4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800e1b0:	4b2f      	ldr	r3, [pc, #188]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e1b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1bc:	492c      	ldr	r1, [pc, #176]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e1be:	4313      	orrs	r3, r2
 800e1c0:	650b      	str	r3, [r1, #80]	; 0x50
 800e1c2:	e001      	b.n	800e1c8 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1c4:	7dfb      	ldrb	r3, [r7, #23]
 800e1c6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d032      	beq.n	800e23a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1d8:	2b03      	cmp	r3, #3
 800e1da:	d81b      	bhi.n	800e214 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800e1dc:	a201      	add	r2, pc, #4	; (adr r2, 800e1e4 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800e1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1e2:	bf00      	nop
 800e1e4:	0800e21b 	.word	0x0800e21b
 800e1e8:	0800e1f5 	.word	0x0800e1f5
 800e1ec:	0800e203 	.word	0x0800e203
 800e1f0:	0800e21b 	.word	0x0800e21b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e1f4:	4b1e      	ldr	r3, [pc, #120]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e1f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1f8:	4a1d      	ldr	r2, [pc, #116]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e1fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e1fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800e200:	e00c      	b.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	3304      	adds	r3, #4
 800e206:	2102      	movs	r1, #2
 800e208:	4618      	mov	r0, r3
 800e20a:	f001 fc67 	bl	800fadc <RCCEx_PLL2_Config>
 800e20e:	4603      	mov	r3, r0
 800e210:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800e212:	e003      	b.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800e214:	2301      	movs	r3, #1
 800e216:	75fb      	strb	r3, [r7, #23]
      break;
 800e218:	e000      	b.n	800e21c <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800e21a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e21c:	7dfb      	ldrb	r3, [r7, #23]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d109      	bne.n	800e236 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800e222:	4b13      	ldr	r3, [pc, #76]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e226:	f023 0203 	bic.w	r2, r3, #3
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e22e:	4910      	ldr	r1, [pc, #64]	; (800e270 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800e230:	4313      	orrs	r3, r2
 800e232:	64cb      	str	r3, [r1, #76]	; 0x4c
 800e234:	e001      	b.n	800e23a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e236:	7dfb      	ldrb	r3, [r7, #23]
 800e238:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e242:	2b00      	cmp	r3, #0
 800e244:	f000 808a 	beq.w	800e35c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e248:	4b0a      	ldr	r3, [pc, #40]	; (800e274 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	4a09      	ldr	r2, [pc, #36]	; (800e274 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800e24e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e252:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e254:	f7fb ffca 	bl	800a1ec <HAL_GetTick>
 800e258:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e25a:	e00d      	b.n	800e278 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e25c:	f7fb ffc6 	bl	800a1ec <HAL_GetTick>
 800e260:	4602      	mov	r2, r0
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	1ad3      	subs	r3, r2, r3
 800e266:	2b64      	cmp	r3, #100	; 0x64
 800e268:	d906      	bls.n	800e278 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800e26a:	2303      	movs	r3, #3
 800e26c:	75fb      	strb	r3, [r7, #23]
        break;
 800e26e:	e009      	b.n	800e284 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800e270:	58024400 	.word	0x58024400
 800e274:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e278:	4bb9      	ldr	r3, [pc, #740]	; (800e560 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e280:	2b00      	cmp	r3, #0
 800e282:	d0eb      	beq.n	800e25c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800e284:	7dfb      	ldrb	r3, [r7, #23]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d166      	bne.n	800e358 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800e28a:	4bb6      	ldr	r3, [pc, #728]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e28c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e294:	4053      	eors	r3, r2
 800e296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d013      	beq.n	800e2c6 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e29e:	4bb1      	ldr	r3, [pc, #708]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e2a6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e2a8:	4bae      	ldr	r3, [pc, #696]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e2aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2ac:	4aad      	ldr	r2, [pc, #692]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e2ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e2b2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e2b4:	4bab      	ldr	r3, [pc, #684]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e2b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2b8:	4aaa      	ldr	r2, [pc, #680]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e2ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e2be:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800e2c0:	4aa8      	ldr	r2, [pc, #672]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e2cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e2d0:	d115      	bne.n	800e2fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e2d2:	f7fb ff8b 	bl	800a1ec <HAL_GetTick>
 800e2d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e2d8:	e00b      	b.n	800e2f2 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e2da:	f7fb ff87 	bl	800a1ec <HAL_GetTick>
 800e2de:	4602      	mov	r2, r0
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	1ad3      	subs	r3, r2, r3
 800e2e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d902      	bls.n	800e2f2 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800e2ec:	2303      	movs	r3, #3
 800e2ee:	75fb      	strb	r3, [r7, #23]
            break;
 800e2f0:	e005      	b.n	800e2fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800e2f2:	4b9c      	ldr	r3, [pc, #624]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e2f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2f6:	f003 0302 	and.w	r3, r3, #2
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d0ed      	beq.n	800e2da <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800e2fe:	7dfb      	ldrb	r3, [r7, #23]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d126      	bne.n	800e352 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e30a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e30e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e312:	d10d      	bne.n	800e330 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800e314:	4b93      	ldr	r3, [pc, #588]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e316:	691b      	ldr	r3, [r3, #16]
 800e318:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e322:	0919      	lsrs	r1, r3, #4
 800e324:	4b90      	ldr	r3, [pc, #576]	; (800e568 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800e326:	400b      	ands	r3, r1
 800e328:	498e      	ldr	r1, [pc, #568]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e32a:	4313      	orrs	r3, r2
 800e32c:	610b      	str	r3, [r1, #16]
 800e32e:	e005      	b.n	800e33c <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800e330:	4b8c      	ldr	r3, [pc, #560]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e332:	691b      	ldr	r3, [r3, #16]
 800e334:	4a8b      	ldr	r2, [pc, #556]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e336:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e33a:	6113      	str	r3, [r2, #16]
 800e33c:	4b89      	ldr	r3, [pc, #548]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e33e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800e346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e34a:	4986      	ldr	r1, [pc, #536]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e34c:	4313      	orrs	r3, r2
 800e34e:	670b      	str	r3, [r1, #112]	; 0x70
 800e350:	e004      	b.n	800e35c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e352:	7dfb      	ldrb	r3, [r7, #23]
 800e354:	75bb      	strb	r3, [r7, #22]
 800e356:	e001      	b.n	800e35c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e358:	7dfb      	ldrb	r3, [r7, #23]
 800e35a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	f003 0301 	and.w	r3, r3, #1
 800e364:	2b00      	cmp	r3, #0
 800e366:	d07e      	beq.n	800e466 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e36c:	2b28      	cmp	r3, #40	; 0x28
 800e36e:	d867      	bhi.n	800e440 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800e370:	a201      	add	r2, pc, #4	; (adr r2, 800e378 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800e372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e376:	bf00      	nop
 800e378:	0800e447 	.word	0x0800e447
 800e37c:	0800e441 	.word	0x0800e441
 800e380:	0800e441 	.word	0x0800e441
 800e384:	0800e441 	.word	0x0800e441
 800e388:	0800e441 	.word	0x0800e441
 800e38c:	0800e441 	.word	0x0800e441
 800e390:	0800e441 	.word	0x0800e441
 800e394:	0800e441 	.word	0x0800e441
 800e398:	0800e41d 	.word	0x0800e41d
 800e39c:	0800e441 	.word	0x0800e441
 800e3a0:	0800e441 	.word	0x0800e441
 800e3a4:	0800e441 	.word	0x0800e441
 800e3a8:	0800e441 	.word	0x0800e441
 800e3ac:	0800e441 	.word	0x0800e441
 800e3b0:	0800e441 	.word	0x0800e441
 800e3b4:	0800e441 	.word	0x0800e441
 800e3b8:	0800e42f 	.word	0x0800e42f
 800e3bc:	0800e441 	.word	0x0800e441
 800e3c0:	0800e441 	.word	0x0800e441
 800e3c4:	0800e441 	.word	0x0800e441
 800e3c8:	0800e441 	.word	0x0800e441
 800e3cc:	0800e441 	.word	0x0800e441
 800e3d0:	0800e441 	.word	0x0800e441
 800e3d4:	0800e441 	.word	0x0800e441
 800e3d8:	0800e447 	.word	0x0800e447
 800e3dc:	0800e441 	.word	0x0800e441
 800e3e0:	0800e441 	.word	0x0800e441
 800e3e4:	0800e441 	.word	0x0800e441
 800e3e8:	0800e441 	.word	0x0800e441
 800e3ec:	0800e441 	.word	0x0800e441
 800e3f0:	0800e441 	.word	0x0800e441
 800e3f4:	0800e441 	.word	0x0800e441
 800e3f8:	0800e447 	.word	0x0800e447
 800e3fc:	0800e441 	.word	0x0800e441
 800e400:	0800e441 	.word	0x0800e441
 800e404:	0800e441 	.word	0x0800e441
 800e408:	0800e441 	.word	0x0800e441
 800e40c:	0800e441 	.word	0x0800e441
 800e410:	0800e441 	.word	0x0800e441
 800e414:	0800e441 	.word	0x0800e441
 800e418:	0800e447 	.word	0x0800e447
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	3304      	adds	r3, #4
 800e420:	2101      	movs	r1, #1
 800e422:	4618      	mov	r0, r3
 800e424:	f001 fb5a 	bl	800fadc <RCCEx_PLL2_Config>
 800e428:	4603      	mov	r3, r0
 800e42a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800e42c:	e00c      	b.n	800e448 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	3324      	adds	r3, #36	; 0x24
 800e432:	2101      	movs	r1, #1
 800e434:	4618      	mov	r0, r3
 800e436:	f001 fc03 	bl	800fc40 <RCCEx_PLL3_Config>
 800e43a:	4603      	mov	r3, r0
 800e43c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800e43e:	e003      	b.n	800e448 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e440:	2301      	movs	r3, #1
 800e442:	75fb      	strb	r3, [r7, #23]
      break;
 800e444:	e000      	b.n	800e448 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800e446:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e448:	7dfb      	ldrb	r3, [r7, #23]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d109      	bne.n	800e462 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800e44e:	4b45      	ldr	r3, [pc, #276]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e452:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e45a:	4942      	ldr	r1, [pc, #264]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e45c:	4313      	orrs	r3, r2
 800e45e:	654b      	str	r3, [r1, #84]	; 0x54
 800e460:	e001      	b.n	800e466 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e462:	7dfb      	ldrb	r3, [r7, #23]
 800e464:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	f003 0302 	and.w	r3, r3, #2
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d037      	beq.n	800e4e2 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e476:	2b05      	cmp	r3, #5
 800e478:	d820      	bhi.n	800e4bc <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800e47a:	a201      	add	r2, pc, #4	; (adr r2, 800e480 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800e47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e480:	0800e4c3 	.word	0x0800e4c3
 800e484:	0800e499 	.word	0x0800e499
 800e488:	0800e4ab 	.word	0x0800e4ab
 800e48c:	0800e4c3 	.word	0x0800e4c3
 800e490:	0800e4c3 	.word	0x0800e4c3
 800e494:	0800e4c3 	.word	0x0800e4c3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	3304      	adds	r3, #4
 800e49c:	2101      	movs	r1, #1
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f001 fb1c 	bl	800fadc <RCCEx_PLL2_Config>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800e4a8:	e00c      	b.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	3324      	adds	r3, #36	; 0x24
 800e4ae:	2101      	movs	r1, #1
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f001 fbc5 	bl	800fc40 <RCCEx_PLL3_Config>
 800e4b6:	4603      	mov	r3, r0
 800e4b8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800e4ba:	e003      	b.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	75fb      	strb	r3, [r7, #23]
      break;
 800e4c0:	e000      	b.n	800e4c4 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800e4c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e4c4:	7dfb      	ldrb	r3, [r7, #23]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d109      	bne.n	800e4de <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800e4ca:	4b26      	ldr	r3, [pc, #152]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e4cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4ce:	f023 0207 	bic.w	r2, r3, #7
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4d6:	4923      	ldr	r1, [pc, #140]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e4d8:	4313      	orrs	r3, r2
 800e4da:	654b      	str	r3, [r1, #84]	; 0x54
 800e4dc:	e001      	b.n	800e4e2 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e4de:	7dfb      	ldrb	r3, [r7, #23]
 800e4e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	f003 0304 	and.w	r3, r3, #4
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d040      	beq.n	800e570 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4f4:	2b05      	cmp	r3, #5
 800e4f6:	d821      	bhi.n	800e53c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800e4f8:	a201      	add	r2, pc, #4	; (adr r2, 800e500 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800e4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4fe:	bf00      	nop
 800e500:	0800e543 	.word	0x0800e543
 800e504:	0800e519 	.word	0x0800e519
 800e508:	0800e52b 	.word	0x0800e52b
 800e50c:	0800e543 	.word	0x0800e543
 800e510:	0800e543 	.word	0x0800e543
 800e514:	0800e543 	.word	0x0800e543
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	3304      	adds	r3, #4
 800e51c:	2101      	movs	r1, #1
 800e51e:	4618      	mov	r0, r3
 800e520:	f001 fadc 	bl	800fadc <RCCEx_PLL2_Config>
 800e524:	4603      	mov	r3, r0
 800e526:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800e528:	e00c      	b.n	800e544 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	3324      	adds	r3, #36	; 0x24
 800e52e:	2101      	movs	r1, #1
 800e530:	4618      	mov	r0, r3
 800e532:	f001 fb85 	bl	800fc40 <RCCEx_PLL3_Config>
 800e536:	4603      	mov	r3, r0
 800e538:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800e53a:	e003      	b.n	800e544 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e53c:	2301      	movs	r3, #1
 800e53e:	75fb      	strb	r3, [r7, #23]
      break;
 800e540:	e000      	b.n	800e544 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800e542:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e544:	7dfb      	ldrb	r3, [r7, #23]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d110      	bne.n	800e56c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e54a:	4b06      	ldr	r3, [pc, #24]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e54c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e54e:	f023 0207 	bic.w	r2, r3, #7
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e558:	4902      	ldr	r1, [pc, #8]	; (800e564 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800e55a:	4313      	orrs	r3, r2
 800e55c:	658b      	str	r3, [r1, #88]	; 0x58
 800e55e:	e007      	b.n	800e570 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800e560:	58024800 	.word	0x58024800
 800e564:	58024400 	.word	0x58024400
 800e568:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e56c:	7dfb      	ldrb	r3, [r7, #23]
 800e56e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	f003 0320 	and.w	r3, r3, #32
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d04b      	beq.n	800e614 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e582:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e586:	d02e      	beq.n	800e5e6 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800e588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e58c:	d828      	bhi.n	800e5e0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800e58e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e592:	d02a      	beq.n	800e5ea <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800e594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e598:	d822      	bhi.n	800e5e0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800e59a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e59e:	d026      	beq.n	800e5ee <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800e5a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e5a4:	d81c      	bhi.n	800e5e0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800e5a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e5aa:	d010      	beq.n	800e5ce <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800e5ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e5b0:	d816      	bhi.n	800e5e0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d01d      	beq.n	800e5f2 <HAL_RCCEx_PeriphCLKConfig+0x972>
 800e5b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e5ba:	d111      	bne.n	800e5e0 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	3304      	adds	r3, #4
 800e5c0:	2100      	movs	r1, #0
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f001 fa8a 	bl	800fadc <RCCEx_PLL2_Config>
 800e5c8:	4603      	mov	r3, r0
 800e5ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800e5cc:	e012      	b.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	3324      	adds	r3, #36	; 0x24
 800e5d2:	2102      	movs	r1, #2
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f001 fb33 	bl	800fc40 <RCCEx_PLL3_Config>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800e5de:	e009      	b.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	75fb      	strb	r3, [r7, #23]
      break;
 800e5e4:	e006      	b.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800e5e6:	bf00      	nop
 800e5e8:	e004      	b.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800e5ea:	bf00      	nop
 800e5ec:	e002      	b.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800e5ee:	bf00      	nop
 800e5f0:	e000      	b.n	800e5f4 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800e5f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e5f4:	7dfb      	ldrb	r3, [r7, #23]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d10a      	bne.n	800e610 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e5fa:	4bb2      	ldr	r3, [pc, #712]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e5fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e608:	49ae      	ldr	r1, [pc, #696]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e60a:	4313      	orrs	r3, r2
 800e60c:	654b      	str	r3, [r1, #84]	; 0x54
 800e60e:	e001      	b.n	800e614 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e610:	7dfb      	ldrb	r3, [r7, #23]
 800e612:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d04b      	beq.n	800e6b8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e626:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e62a:	d02e      	beq.n	800e68a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800e62c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800e630:	d828      	bhi.n	800e684 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800e632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e636:	d02a      	beq.n	800e68e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800e638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e63c:	d822      	bhi.n	800e684 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800e63e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e642:	d026      	beq.n	800e692 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800e644:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e648:	d81c      	bhi.n	800e684 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800e64a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e64e:	d010      	beq.n	800e672 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800e650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e654:	d816      	bhi.n	800e684 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800e656:	2b00      	cmp	r3, #0
 800e658:	d01d      	beq.n	800e696 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800e65a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e65e:	d111      	bne.n	800e684 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	3304      	adds	r3, #4
 800e664:	2100      	movs	r1, #0
 800e666:	4618      	mov	r0, r3
 800e668:	f001 fa38 	bl	800fadc <RCCEx_PLL2_Config>
 800e66c:	4603      	mov	r3, r0
 800e66e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800e670:	e012      	b.n	800e698 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	3324      	adds	r3, #36	; 0x24
 800e676:	2102      	movs	r1, #2
 800e678:	4618      	mov	r0, r3
 800e67a:	f001 fae1 	bl	800fc40 <RCCEx_PLL3_Config>
 800e67e:	4603      	mov	r3, r0
 800e680:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800e682:	e009      	b.n	800e698 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e684:	2301      	movs	r3, #1
 800e686:	75fb      	strb	r3, [r7, #23]
      break;
 800e688:	e006      	b.n	800e698 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800e68a:	bf00      	nop
 800e68c:	e004      	b.n	800e698 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800e68e:	bf00      	nop
 800e690:	e002      	b.n	800e698 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800e692:	bf00      	nop
 800e694:	e000      	b.n	800e698 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800e696:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e698:	7dfb      	ldrb	r3, [r7, #23]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d10a      	bne.n	800e6b4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e69e:	4b89      	ldr	r3, [pc, #548]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e6a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e6ac:	4985      	ldr	r1, [pc, #532]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	658b      	str	r3, [r1, #88]	; 0x58
 800e6b2:	e001      	b.n	800e6b8 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e6b4:	7dfb      	ldrb	r3, [r7, #23]
 800e6b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d04b      	beq.n	800e75c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e6ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e6ce:	d02e      	beq.n	800e72e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800e6d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800e6d4:	d828      	bhi.n	800e728 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800e6d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6da:	d02a      	beq.n	800e732 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800e6dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6e0:	d822      	bhi.n	800e728 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800e6e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e6e6:	d026      	beq.n	800e736 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800e6e8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800e6ec:	d81c      	bhi.n	800e728 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800e6ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e6f2:	d010      	beq.n	800e716 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800e6f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e6f8:	d816      	bhi.n	800e728 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d01d      	beq.n	800e73a <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800e6fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e702:	d111      	bne.n	800e728 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	3304      	adds	r3, #4
 800e708:	2100      	movs	r1, #0
 800e70a:	4618      	mov	r0, r3
 800e70c:	f001 f9e6 	bl	800fadc <RCCEx_PLL2_Config>
 800e710:	4603      	mov	r3, r0
 800e712:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800e714:	e012      	b.n	800e73c <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	3324      	adds	r3, #36	; 0x24
 800e71a:	2102      	movs	r1, #2
 800e71c:	4618      	mov	r0, r3
 800e71e:	f001 fa8f 	bl	800fc40 <RCCEx_PLL3_Config>
 800e722:	4603      	mov	r3, r0
 800e724:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800e726:	e009      	b.n	800e73c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e728:	2301      	movs	r3, #1
 800e72a:	75fb      	strb	r3, [r7, #23]
      break;
 800e72c:	e006      	b.n	800e73c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800e72e:	bf00      	nop
 800e730:	e004      	b.n	800e73c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800e732:	bf00      	nop
 800e734:	e002      	b.n	800e73c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800e736:	bf00      	nop
 800e738:	e000      	b.n	800e73c <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800e73a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e73c:	7dfb      	ldrb	r3, [r7, #23]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d10a      	bne.n	800e758 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800e742:	4b60      	ldr	r3, [pc, #384]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e750:	495c      	ldr	r1, [pc, #368]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e752:	4313      	orrs	r3, r2
 800e754:	658b      	str	r3, [r1, #88]	; 0x58
 800e756:	e001      	b.n	800e75c <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e758:	7dfb      	ldrb	r3, [r7, #23]
 800e75a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	f003 0308 	and.w	r3, r3, #8
 800e764:	2b00      	cmp	r3, #0
 800e766:	d018      	beq.n	800e79a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e76c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e770:	d10a      	bne.n	800e788 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	3324      	adds	r3, #36	; 0x24
 800e776:	2102      	movs	r1, #2
 800e778:	4618      	mov	r0, r3
 800e77a:	f001 fa61 	bl	800fc40 <RCCEx_PLL3_Config>
 800e77e:	4603      	mov	r3, r0
 800e780:	2b00      	cmp	r3, #0
 800e782:	d001      	beq.n	800e788 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800e784:	2301      	movs	r3, #1
 800e786:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800e788:	4b4e      	ldr	r3, [pc, #312]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e78a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e78c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e794:	494b      	ldr	r1, [pc, #300]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e796:	4313      	orrs	r3, r2
 800e798:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	f003 0310 	and.w	r3, r3, #16
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d01a      	beq.n	800e7dc <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7b0:	d10a      	bne.n	800e7c8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	3324      	adds	r3, #36	; 0x24
 800e7b6:	2102      	movs	r1, #2
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f001 fa41 	bl	800fc40 <RCCEx_PLL3_Config>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d001      	beq.n	800e7c8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e7c8:	4b3e      	ldr	r3, [pc, #248]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e7ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e7cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7d6:	493b      	ldr	r1, [pc, #236]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e7d8:	4313      	orrs	r3, r2
 800e7da:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d034      	beq.n	800e852 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e7ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e7f2:	d01d      	beq.n	800e830 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800e7f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e7f8:	d817      	bhi.n	800e82a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d003      	beq.n	800e806 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800e7fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e802:	d009      	beq.n	800e818 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800e804:	e011      	b.n	800e82a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	3304      	adds	r3, #4
 800e80a:	2100      	movs	r1, #0
 800e80c:	4618      	mov	r0, r3
 800e80e:	f001 f965 	bl	800fadc <RCCEx_PLL2_Config>
 800e812:	4603      	mov	r3, r0
 800e814:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800e816:	e00c      	b.n	800e832 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	3324      	adds	r3, #36	; 0x24
 800e81c:	2102      	movs	r1, #2
 800e81e:	4618      	mov	r0, r3
 800e820:	f001 fa0e 	bl	800fc40 <RCCEx_PLL3_Config>
 800e824:	4603      	mov	r3, r0
 800e826:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800e828:	e003      	b.n	800e832 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e82a:	2301      	movs	r3, #1
 800e82c:	75fb      	strb	r3, [r7, #23]
      break;
 800e82e:	e000      	b.n	800e832 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800e830:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e832:	7dfb      	ldrb	r3, [r7, #23]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d10a      	bne.n	800e84e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e838:	4b22      	ldr	r3, [pc, #136]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e83a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e83c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800e846:	491f      	ldr	r1, [pc, #124]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e848:	4313      	orrs	r3, r2
 800e84a:	658b      	str	r3, [r1, #88]	; 0x58
 800e84c:	e001      	b.n	800e852 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e84e:	7dfb      	ldrb	r3, [r7, #23]
 800e850:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d036      	beq.n	800e8cc <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e864:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e868:	d01c      	beq.n	800e8a4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800e86a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e86e:	d816      	bhi.n	800e89e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800e870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e874:	d003      	beq.n	800e87e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800e876:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e87a:	d007      	beq.n	800e88c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800e87c:	e00f      	b.n	800e89e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e87e:	4b11      	ldr	r3, [pc, #68]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e882:	4a10      	ldr	r2, [pc, #64]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e888:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800e88a:	e00c      	b.n	800e8a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	3324      	adds	r3, #36	; 0x24
 800e890:	2101      	movs	r1, #1
 800e892:	4618      	mov	r0, r3
 800e894:	f001 f9d4 	bl	800fc40 <RCCEx_PLL3_Config>
 800e898:	4603      	mov	r3, r0
 800e89a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800e89c:	e003      	b.n	800e8a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e89e:	2301      	movs	r3, #1
 800e8a0:	75fb      	strb	r3, [r7, #23]
      break;
 800e8a2:	e000      	b.n	800e8a6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800e8a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e8a6:	7dfb      	ldrb	r3, [r7, #23]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d10d      	bne.n	800e8c8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e8ac:	4b05      	ldr	r3, [pc, #20]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e8ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8ba:	4902      	ldr	r1, [pc, #8]	; (800e8c4 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800e8bc:	4313      	orrs	r3, r2
 800e8be:	654b      	str	r3, [r1, #84]	; 0x54
 800e8c0:	e004      	b.n	800e8cc <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800e8c2:	bf00      	nop
 800e8c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e8c8:	7dfb      	ldrb	r3, [r7, #23]
 800e8ca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d029      	beq.n	800e92c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d003      	beq.n	800e8e8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800e8e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8e4:	d007      	beq.n	800e8f6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800e8e6:	e00f      	b.n	800e908 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e8e8:	4b61      	ldr	r3, [pc, #388]	; (800ea70 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ec:	4a60      	ldr	r2, [pc, #384]	; (800ea70 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e8ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e8f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800e8f4:	e00b      	b.n	800e90e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	3304      	adds	r3, #4
 800e8fa:	2102      	movs	r1, #2
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f001 f8ed 	bl	800fadc <RCCEx_PLL2_Config>
 800e902:	4603      	mov	r3, r0
 800e904:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800e906:	e002      	b.n	800e90e <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800e908:	2301      	movs	r3, #1
 800e90a:	75fb      	strb	r3, [r7, #23]
      break;
 800e90c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e90e:	7dfb      	ldrb	r3, [r7, #23]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d109      	bne.n	800e928 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e914:	4b56      	ldr	r3, [pc, #344]	; (800ea70 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e918:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e920:	4953      	ldr	r1, [pc, #332]	; (800ea70 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e922:	4313      	orrs	r3, r2
 800e924:	64cb      	str	r3, [r1, #76]	; 0x4c
 800e926:	e001      	b.n	800e92c <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e928:	7dfb      	ldrb	r3, [r7, #23]
 800e92a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e934:	2b00      	cmp	r3, #0
 800e936:	d00a      	beq.n	800e94e <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	3324      	adds	r3, #36	; 0x24
 800e93c:	2102      	movs	r1, #2
 800e93e:	4618      	mov	r0, r3
 800e940:	f001 f97e 	bl	800fc40 <RCCEx_PLL3_Config>
 800e944:	4603      	mov	r3, r0
 800e946:	2b00      	cmp	r3, #0
 800e948:	d001      	beq.n	800e94e <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800e94a:	2301      	movs	r3, #1
 800e94c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e956:	2b00      	cmp	r3, #0
 800e958:	d030      	beq.n	800e9bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e95e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e962:	d017      	beq.n	800e994 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800e964:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e968:	d811      	bhi.n	800e98e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800e96a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e96e:	d013      	beq.n	800e998 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800e970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e974:	d80b      	bhi.n	800e98e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800e976:	2b00      	cmp	r3, #0
 800e978:	d010      	beq.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800e97a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e97e:	d106      	bne.n	800e98e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e980:	4b3b      	ldr	r3, [pc, #236]	; (800ea70 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e984:	4a3a      	ldr	r2, [pc, #232]	; (800ea70 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e98a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800e98c:	e007      	b.n	800e99e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800e98e:	2301      	movs	r3, #1
 800e990:	75fb      	strb	r3, [r7, #23]
      break;
 800e992:	e004      	b.n	800e99e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800e994:	bf00      	nop
 800e996:	e002      	b.n	800e99e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800e998:	bf00      	nop
 800e99a:	e000      	b.n	800e99e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800e99c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800e99e:	7dfb      	ldrb	r3, [r7, #23]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d109      	bne.n	800e9b8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e9a4:	4b32      	ldr	r3, [pc, #200]	; (800ea70 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e9a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e9b0:	492f      	ldr	r1, [pc, #188]	; (800ea70 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e9b2:	4313      	orrs	r3, r2
 800e9b4:	654b      	str	r3, [r1, #84]	; 0x54
 800e9b6:	e001      	b.n	800e9bc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9b8:	7dfb      	ldrb	r3, [r7, #23]
 800e9ba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d008      	beq.n	800e9da <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e9c8:	4b29      	ldr	r3, [pc, #164]	; (800ea70 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e9ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9d4:	4926      	ldr	r1, [pc, #152]	; (800ea70 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e9d6:	4313      	orrs	r3, r2
 800e9d8:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d008      	beq.n	800e9f8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e9e6:	4b22      	ldr	r3, [pc, #136]	; (800ea70 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e9e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e9f2:	491f      	ldr	r1, [pc, #124]	; (800ea70 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800e9f4:	4313      	orrs	r3, r2
 800e9f6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d00d      	beq.n	800ea20 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ea04:	4b1a      	ldr	r3, [pc, #104]	; (800ea70 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ea06:	691b      	ldr	r3, [r3, #16]
 800ea08:	4a19      	ldr	r2, [pc, #100]	; (800ea70 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ea0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ea0e:	6113      	str	r3, [r2, #16]
 800ea10:	4b17      	ldr	r3, [pc, #92]	; (800ea70 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ea12:	691a      	ldr	r2, [r3, #16]
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ea1a:	4915      	ldr	r1, [pc, #84]	; (800ea70 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ea1c:	4313      	orrs	r3, r2
 800ea1e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	da08      	bge.n	800ea3a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ea28:	4b11      	ldr	r3, [pc, #68]	; (800ea70 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ea2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea34:	490e      	ldr	r1, [pc, #56]	; (800ea70 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ea36:	4313      	orrs	r3, r2
 800ea38:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d009      	beq.n	800ea5a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ea46:	4b0a      	ldr	r3, [pc, #40]	; (800ea70 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ea48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea54:	4906      	ldr	r1, [pc, #24]	; (800ea70 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ea56:	4313      	orrs	r3, r2
 800ea58:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800ea5a:	7dbb      	ldrb	r3, [r7, #22]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d101      	bne.n	800ea64 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800ea60:	2300      	movs	r3, #0
 800ea62:	e000      	b.n	800ea66 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800ea64:	2301      	movs	r3, #1
}
 800ea66:	4618      	mov	r0, r3
 800ea68:	3718      	adds	r7, #24
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}
 800ea6e:	bf00      	nop
 800ea70:	58024400 	.word	0x58024400

0800ea74 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b090      	sub	sp, #64	; 0x40
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea82:	f040 8089 	bne.w	800eb98 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800ea86:	4b95      	ldr	r3, [pc, #596]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ea88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea8a:	f003 0307 	and.w	r3, r3, #7
 800ea8e:	633b      	str	r3, [r7, #48]	; 0x30
 800ea90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea92:	2b04      	cmp	r3, #4
 800ea94:	d87d      	bhi.n	800eb92 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800ea96:	a201      	add	r2, pc, #4	; (adr r2, 800ea9c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800ea98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea9c:	0800eab1 	.word	0x0800eab1
 800eaa0:	0800ead5 	.word	0x0800ead5
 800eaa4:	0800eaf9 	.word	0x0800eaf9
 800eaa8:	0800eb8d 	.word	0x0800eb8d
 800eaac:	0800eb1d 	.word	0x0800eb1d

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800eab0:	4b8a      	ldr	r3, [pc, #552]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eab8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eabc:	d107      	bne.n	800eace <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eabe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eac2:	4618      	mov	r0, r3
 800eac4:	f000 feb8 	bl	800f838 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800eac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800eacc:	e3ed      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800eace:	2300      	movs	r3, #0
 800ead0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ead2:	e3ea      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ead4:	4b81      	ldr	r3, [pc, #516]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eadc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eae0:	d107      	bne.n	800eaf2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eae2:	f107 0318 	add.w	r3, r7, #24
 800eae6:	4618      	mov	r0, r3
 800eae8:	f000 fbfe 	bl	800f2e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800eaec:	69bb      	ldr	r3, [r7, #24]
 800eaee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800eaf0:	e3db      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800eaf6:	e3d8      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800eaf8:	4b78      	ldr	r3, [pc, #480]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eb00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eb04:	d107      	bne.n	800eb16 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb06:	f107 030c 	add.w	r3, r7, #12
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	f000 fd40 	bl	800f590 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800eb14:	e3c9      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800eb16:	2300      	movs	r3, #0
 800eb18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800eb1a:	e3c6      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800eb1c:	4b6f      	ldr	r3, [pc, #444]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800eb1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800eb24:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800eb26:	4b6d      	ldr	r3, [pc, #436]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	f003 0304 	and.w	r3, r3, #4
 800eb2e:	2b04      	cmp	r3, #4
 800eb30:	d10c      	bne.n	800eb4c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800eb32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d109      	bne.n	800eb4c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800eb38:	4b68      	ldr	r3, [pc, #416]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	08db      	lsrs	r3, r3, #3
 800eb3e:	f003 0303 	and.w	r3, r3, #3
 800eb42:	4a67      	ldr	r2, [pc, #412]	; (800ece0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800eb44:	fa22 f303 	lsr.w	r3, r2, r3
 800eb48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb4a:	e01e      	b.n	800eb8a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800eb4c:	4b63      	ldr	r3, [pc, #396]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb58:	d106      	bne.n	800eb68 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800eb5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eb60:	d102      	bne.n	800eb68 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800eb62:	4b60      	ldr	r3, [pc, #384]	; (800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eb64:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb66:	e010      	b.n	800eb8a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800eb68:	4b5c      	ldr	r3, [pc, #368]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eb70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800eb74:	d106      	bne.n	800eb84 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800eb76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eb7c:	d102      	bne.n	800eb84 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800eb7e:	4b5a      	ldr	r3, [pc, #360]	; (800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800eb80:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eb82:	e002      	b.n	800eb8a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800eb84:	2300      	movs	r3, #0
 800eb86:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800eb88:	e38f      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800eb8a:	e38e      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800eb8c:	4b57      	ldr	r3, [pc, #348]	; (800ecec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800eb8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800eb90:	e38b      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800eb92:	2300      	movs	r3, #0
 800eb94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800eb96:	e388      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eb9e:	f040 80a7 	bne.w	800ecf0 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800eba2:	4b4e      	ldr	r3, [pc, #312]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800eba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eba6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ebaa:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ebac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ebb2:	d054      	beq.n	800ec5e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800ebb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ebba:	f200 808b 	bhi.w	800ecd4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800ebbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ebc4:	f000 8083 	beq.w	800ecce <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ebc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ebce:	f200 8081 	bhi.w	800ecd4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800ebd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ebd8:	d02f      	beq.n	800ec3a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800ebda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ebe0:	d878      	bhi.n	800ecd4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800ebe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d004      	beq.n	800ebf2 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800ebe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ebee:	d012      	beq.n	800ec16 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800ebf0:	e070      	b.n	800ecd4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ebf2:	4b3a      	ldr	r3, [pc, #232]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ebfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ebfe:	d107      	bne.n	800ec10 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ec00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec04:	4618      	mov	r0, r3
 800ec06:	f000 fe17 	bl	800f838 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ec0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ec0e:	e34c      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ec10:	2300      	movs	r3, #0
 800ec12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ec14:	e349      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ec16:	4b31      	ldr	r3, [pc, #196]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ec1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ec22:	d107      	bne.n	800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec24:	f107 0318 	add.w	r3, r7, #24
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f000 fb5d 	bl	800f2e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ec2e:	69bb      	ldr	r3, [r7, #24]
 800ec30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ec32:	e33a      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ec34:	2300      	movs	r3, #0
 800ec36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ec38:	e337      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ec3a:	4b28      	ldr	r3, [pc, #160]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ec42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ec46:	d107      	bne.n	800ec58 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec48:	f107 030c 	add.w	r3, r7, #12
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f000 fc9f 	bl	800f590 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ec56:	e328      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ec5c:	e325      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ec5e:	4b1f      	ldr	r3, [pc, #124]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ec60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec62:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ec66:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ec68:	4b1c      	ldr	r3, [pc, #112]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f003 0304 	and.w	r3, r3, #4
 800ec70:	2b04      	cmp	r3, #4
 800ec72:	d10c      	bne.n	800ec8e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800ec74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d109      	bne.n	800ec8e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ec7a:	4b18      	ldr	r3, [pc, #96]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	08db      	lsrs	r3, r3, #3
 800ec80:	f003 0303 	and.w	r3, r3, #3
 800ec84:	4a16      	ldr	r2, [pc, #88]	; (800ece0 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800ec86:	fa22 f303 	lsr.w	r3, r2, r3
 800ec8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec8c:	e01e      	b.n	800eccc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ec8e:	4b13      	ldr	r3, [pc, #76]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec9a:	d106      	bne.n	800ecaa <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800ec9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eca2:	d102      	bne.n	800ecaa <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800eca4:	4b0f      	ldr	r3, [pc, #60]	; (800ece4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800eca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800eca8:	e010      	b.n	800eccc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ecaa:	4b0c      	ldr	r3, [pc, #48]	; (800ecdc <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ecb2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ecb6:	d106      	bne.n	800ecc6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800ecb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ecbe:	d102      	bne.n	800ecc6 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ecc0:	4b09      	ldr	r3, [pc, #36]	; (800ece8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800ecc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ecc4:	e002      	b.n	800eccc <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ecca:	e2ee      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800eccc:	e2ed      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ecce:	4b07      	ldr	r3, [pc, #28]	; (800ecec <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ecd0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ecd2:	e2ea      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ecd8:	e2e7      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800ecda:	bf00      	nop
 800ecdc:	58024400 	.word	0x58024400
 800ece0:	03d09000 	.word	0x03d09000
 800ece4:	003d0900 	.word	0x003d0900
 800ece8:	017d7840 	.word	0x017d7840
 800ecec:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ecf6:	f040 809c 	bne.w	800ee32 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800ecfa:	4b9e      	ldr	r3, [pc, #632]	; (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ecfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecfe:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ed02:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800ed04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ed0a:	d054      	beq.n	800edb6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ed0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ed12:	f200 808b 	bhi.w	800ee2c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800ed16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ed1c:	f000 8083 	beq.w	800ee26 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ed20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed22:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ed26:	f200 8081 	bhi.w	800ee2c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800ed2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ed30:	d02f      	beq.n	800ed92 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ed32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ed38:	d878      	bhi.n	800ee2c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800ed3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d004      	beq.n	800ed4a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800ed40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ed46:	d012      	beq.n	800ed6e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ed48:	e070      	b.n	800ee2c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ed4a:	4b8a      	ldr	r3, [pc, #552]	; (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ed56:	d107      	bne.n	800ed68 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ed58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f000 fd6b 	bl	800f838 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ed62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed64:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ed66:	e2a0      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ed6c:	e29d      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ed6e:	4b81      	ldr	r3, [pc, #516]	; (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ed76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ed7a:	d107      	bne.n	800ed8c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed7c:	f107 0318 	add.w	r3, r7, #24
 800ed80:	4618      	mov	r0, r3
 800ed82:	f000 fab1 	bl	800f2e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ed86:	69bb      	ldr	r3, [r7, #24]
 800ed88:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800ed8a:	e28e      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ed90:	e28b      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ed92:	4b78      	ldr	r3, [pc, #480]	; (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ed9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ed9e:	d107      	bne.n	800edb0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eda0:	f107 030c 	add.w	r3, r7, #12
 800eda4:	4618      	mov	r0, r3
 800eda6:	f000 fbf3 	bl	800f590 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800edae:	e27c      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800edb0:	2300      	movs	r3, #0
 800edb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800edb4:	e279      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800edb6:	4b6f      	ldr	r3, [pc, #444]	; (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800edb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800edba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800edbe:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800edc0:	4b6c      	ldr	r3, [pc, #432]	; (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	f003 0304 	and.w	r3, r3, #4
 800edc8:	2b04      	cmp	r3, #4
 800edca:	d10c      	bne.n	800ede6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800edcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d109      	bne.n	800ede6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800edd2:	4b68      	ldr	r3, [pc, #416]	; (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	08db      	lsrs	r3, r3, #3
 800edd8:	f003 0303 	and.w	r3, r3, #3
 800eddc:	4a66      	ldr	r2, [pc, #408]	; (800ef78 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800edde:	fa22 f303 	lsr.w	r3, r2, r3
 800ede2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ede4:	e01e      	b.n	800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ede6:	4b63      	ldr	r3, [pc, #396]	; (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800edf2:	d106      	bne.n	800ee02 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800edf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800edfa:	d102      	bne.n	800ee02 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800edfc:	4b5f      	ldr	r3, [pc, #380]	; (800ef7c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800edfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee00:	e010      	b.n	800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ee02:	4b5c      	ldr	r3, [pc, #368]	; (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ee0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ee0e:	d106      	bne.n	800ee1e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800ee10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ee16:	d102      	bne.n	800ee1e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ee18:	4b59      	ldr	r3, [pc, #356]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800ee1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ee1c:	e002      	b.n	800ee24 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ee22:	e242      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800ee24:	e241      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ee26:	4b57      	ldr	r3, [pc, #348]	; (800ef84 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800ee28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ee2a:	e23e      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ee30:	e23b      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee38:	f040 80a6 	bne.w	800ef88 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800ee3c:	4b4d      	ldr	r3, [pc, #308]	; (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ee3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee40:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ee44:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ee46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee4c:	d054      	beq.n	800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800ee4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ee54:	f200 808b 	bhi.w	800ef6e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800ee58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ee5e:	f000 8083 	beq.w	800ef68 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800ee62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ee68:	f200 8081 	bhi.w	800ef6e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800ee6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee72:	d02f      	beq.n	800eed4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800ee74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee7a:	d878      	bhi.n	800ef6e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800ee7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d004      	beq.n	800ee8c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800ee82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee88:	d012      	beq.n	800eeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800ee8a:	e070      	b.n	800ef6e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ee8c:	4b39      	ldr	r3, [pc, #228]	; (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ee94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ee98:	d107      	bne.n	800eeaa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ee9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee9e:	4618      	mov	r0, r3
 800eea0:	f000 fcca 	bl	800f838 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800eea8:	e1ff      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800eeae:	e1fc      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800eeb0:	4b30      	ldr	r3, [pc, #192]	; (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eeb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eebc:	d107      	bne.n	800eece <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eebe:	f107 0318 	add.w	r3, r7, #24
 800eec2:	4618      	mov	r0, r3
 800eec4:	f000 fa10 	bl	800f2e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800eec8:	69bb      	ldr	r3, [r7, #24]
 800eeca:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800eecc:	e1ed      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800eece:	2300      	movs	r3, #0
 800eed0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800eed2:	e1ea      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800eed4:	4b27      	ldr	r3, [pc, #156]	; (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800eedc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800eee0:	d107      	bne.n	800eef2 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eee2:	f107 030c 	add.w	r3, r7, #12
 800eee6:	4618      	mov	r0, r3
 800eee8:	f000 fb52 	bl	800f590 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800eef0:	e1db      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800eef2:	2300      	movs	r3, #0
 800eef4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800eef6:	e1d8      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800eef8:	4b1e      	ldr	r3, [pc, #120]	; (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800eefa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eefc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ef00:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ef02:	4b1c      	ldr	r3, [pc, #112]	; (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	f003 0304 	and.w	r3, r3, #4
 800ef0a:	2b04      	cmp	r3, #4
 800ef0c:	d10c      	bne.n	800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800ef0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d109      	bne.n	800ef28 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ef14:	4b17      	ldr	r3, [pc, #92]	; (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	08db      	lsrs	r3, r3, #3
 800ef1a:	f003 0303 	and.w	r3, r3, #3
 800ef1e:	4a16      	ldr	r2, [pc, #88]	; (800ef78 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ef20:	fa22 f303 	lsr.w	r3, r2, r3
 800ef24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef26:	e01e      	b.n	800ef66 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ef28:	4b12      	ldr	r3, [pc, #72]	; (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ef34:	d106      	bne.n	800ef44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800ef36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ef3c:	d102      	bne.n	800ef44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ef3e:	4b0f      	ldr	r3, [pc, #60]	; (800ef7c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800ef40:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef42:	e010      	b.n	800ef66 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ef44:	4b0b      	ldr	r3, [pc, #44]	; (800ef74 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ef50:	d106      	bne.n	800ef60 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800ef52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ef58:	d102      	bne.n	800ef60 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ef5a:	4b09      	ldr	r3, [pc, #36]	; (800ef80 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800ef5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ef5e:	e002      	b.n	800ef66 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ef60:	2300      	movs	r3, #0
 800ef62:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ef64:	e1a1      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800ef66:	e1a0      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ef68:	4b06      	ldr	r3, [pc, #24]	; (800ef84 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800ef6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ef6c:	e19d      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ef72:	e19a      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800ef74:	58024400 	.word	0x58024400
 800ef78:	03d09000 	.word	0x03d09000
 800ef7c:	003d0900 	.word	0x003d0900
 800ef80:	017d7840 	.word	0x017d7840
 800ef84:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ef8e:	d173      	bne.n	800f078 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800ef90:	4b9a      	ldr	r3, [pc, #616]	; (800f1fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800ef92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ef98:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ef9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800efa0:	d02f      	beq.n	800f002 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800efa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800efa8:	d863      	bhi.n	800f072 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800efaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efac:	2b00      	cmp	r3, #0
 800efae:	d004      	beq.n	800efba <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800efb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efb6:	d012      	beq.n	800efde <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800efb8:	e05b      	b.n	800f072 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800efba:	4b90      	ldr	r3, [pc, #576]	; (800f1fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800efc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800efc6:	d107      	bne.n	800efd8 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800efc8:	f107 0318 	add.w	r3, r7, #24
 800efcc:	4618      	mov	r0, r3
 800efce:	f000 f98b 	bl	800f2e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800efd2:	69bb      	ldr	r3, [r7, #24]
 800efd4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800efd6:	e168      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800efd8:	2300      	movs	r3, #0
 800efda:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800efdc:	e165      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800efde:	4b87      	ldr	r3, [pc, #540]	; (800f1fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800efe6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800efea:	d107      	bne.n	800effc <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800efec:	f107 030c 	add.w	r3, r7, #12
 800eff0:	4618      	mov	r0, r3
 800eff2:	f000 facd 	bl	800f590 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800effa:	e156      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800effc:	2300      	movs	r3, #0
 800effe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f000:	e153      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800f002:	4b7e      	ldr	r3, [pc, #504]	; (800f1fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f006:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f00a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800f00c:	4b7b      	ldr	r3, [pc, #492]	; (800f1fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	f003 0304 	and.w	r3, r3, #4
 800f014:	2b04      	cmp	r3, #4
 800f016:	d10c      	bne.n	800f032 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 800f018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d109      	bne.n	800f032 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f01e:	4b77      	ldr	r3, [pc, #476]	; (800f1fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	08db      	lsrs	r3, r3, #3
 800f024:	f003 0303 	and.w	r3, r3, #3
 800f028:	4a75      	ldr	r2, [pc, #468]	; (800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f02a:	fa22 f303 	lsr.w	r3, r2, r3
 800f02e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f030:	e01e      	b.n	800f070 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800f032:	4b72      	ldr	r3, [pc, #456]	; (800f1fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f03a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f03e:	d106      	bne.n	800f04e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800f040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f042:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f046:	d102      	bne.n	800f04e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800f048:	4b6e      	ldr	r3, [pc, #440]	; (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800f04a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f04c:	e010      	b.n	800f070 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800f04e:	4b6b      	ldr	r3, [pc, #428]	; (800f1fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f056:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f05a:	d106      	bne.n	800f06a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800f05c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f05e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f062:	d102      	bne.n	800f06a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800f064:	4b68      	ldr	r3, [pc, #416]	; (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800f066:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f068:	e002      	b.n	800f070 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800f06a:	2300      	movs	r3, #0
 800f06c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800f06e:	e11c      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800f070:	e11b      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800f072:	2300      	movs	r3, #0
 800f074:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f076:	e118      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f07e:	d133      	bne.n	800f0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800f080:	4b5e      	ldr	r3, [pc, #376]	; (800f1fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f088:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d004      	beq.n	800f09a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800f090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f096:	d012      	beq.n	800f0be <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800f098:	e023      	b.n	800f0e2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f09a:	4b58      	ldr	r3, [pc, #352]	; (800f1fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f0a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f0a6:	d107      	bne.n	800f0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f0a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f000 fbc3 	bl	800f838 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f0b6:	e0f8      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f0bc:	e0f5      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f0be:	4b4f      	ldr	r3, [pc, #316]	; (800f1fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f0c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f0ca:	d107      	bne.n	800f0dc <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f0cc:	f107 0318 	add.w	r3, r7, #24
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f000 f909 	bl	800f2e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800f0d6:	6a3b      	ldr	r3, [r7, #32]
 800f0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f0da:	e0e6      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f0dc:	2300      	movs	r3, #0
 800f0de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f0e0:	e0e3      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f0e6:	e0e0      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f0ee:	f040 808d 	bne.w	800f20c <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800f0f2:	4b42      	ldr	r3, [pc, #264]	; (800f1fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f0f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f0f6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800f0fa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f102:	d06b      	beq.n	800f1dc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800f104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f106:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f10a:	d874      	bhi.n	800f1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800f10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f10e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f112:	d056      	beq.n	800f1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800f114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f11a:	d86c      	bhi.n	800f1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800f11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f11e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f122:	d03b      	beq.n	800f19c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800f124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f126:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f12a:	d864      	bhi.n	800f1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800f12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f12e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f132:	d021      	beq.n	800f178 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800f134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f13a:	d85c      	bhi.n	800f1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800f13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d004      	beq.n	800f14c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800f142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f144:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f148:	d004      	beq.n	800f154 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800f14a:	e054      	b.n	800f1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800f14c:	f000 f8b6 	bl	800f2bc <HAL_RCCEx_GetD3PCLK1Freq>
 800f150:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800f152:	e0aa      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f154:	4b29      	ldr	r3, [pc, #164]	; (800f1fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f15c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f160:	d107      	bne.n	800f172 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f162:	f107 0318 	add.w	r3, r7, #24
 800f166:	4618      	mov	r0, r3
 800f168:	f000 f8be 	bl	800f2e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f16c:	69fb      	ldr	r3, [r7, #28]
 800f16e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f170:	e09b      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f172:	2300      	movs	r3, #0
 800f174:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f176:	e098      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800f178:	4b20      	ldr	r3, [pc, #128]	; (800f1fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f180:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f184:	d107      	bne.n	800f196 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f186:	f107 030c 	add.w	r3, r7, #12
 800f18a:	4618      	mov	r0, r3
 800f18c:	f000 fa00 	bl	800f590 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800f190:	693b      	ldr	r3, [r7, #16]
 800f192:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f194:	e089      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f196:	2300      	movs	r3, #0
 800f198:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f19a:	e086      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800f19c:	4b17      	ldr	r3, [pc, #92]	; (800f1fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	f003 0304 	and.w	r3, r3, #4
 800f1a4:	2b04      	cmp	r3, #4
 800f1a6:	d109      	bne.n	800f1bc <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f1a8:	4b14      	ldr	r3, [pc, #80]	; (800f1fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	08db      	lsrs	r3, r3, #3
 800f1ae:	f003 0303 	and.w	r3, r3, #3
 800f1b2:	4a13      	ldr	r2, [pc, #76]	; (800f200 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800f1b4:	fa22 f303 	lsr.w	r3, r2, r3
 800f1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f1ba:	e076      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f1bc:	2300      	movs	r3, #0
 800f1be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f1c0:	e073      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800f1c2:	4b0e      	ldr	r3, [pc, #56]	; (800f1fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f1ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1ce:	d102      	bne.n	800f1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 800f1d0:	4b0c      	ldr	r3, [pc, #48]	; (800f204 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800f1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800f1d4:	e069      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f1da:	e066      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f1dc:	4b07      	ldr	r3, [pc, #28]	; (800f1fc <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f1e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f1e8:	d102      	bne.n	800f1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800f1ea:	4b07      	ldr	r3, [pc, #28]	; (800f208 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800f1ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f1ee:	e05c      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f1f4:	e059      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f1fa:	e056      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800f1fc:	58024400 	.word	0x58024400
 800f200:	03d09000 	.word	0x03d09000
 800f204:	003d0900 	.word	0x003d0900
 800f208:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f212:	d148      	bne.n	800f2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800f214:	4b27      	ldr	r3, [pc, #156]	; (800f2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f218:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f21c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800f21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f224:	d02a      	beq.n	800f27c <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800f226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f22c:	d838      	bhi.n	800f2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800f22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f230:	2b00      	cmp	r3, #0
 800f232:	d004      	beq.n	800f23e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800f234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f236:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f23a:	d00d      	beq.n	800f258 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800f23c:	e030      	b.n	800f2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f23e:	4b1d      	ldr	r3, [pc, #116]	; (800f2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f246:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f24a:	d102      	bne.n	800f252 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800f24c:	4b1a      	ldr	r3, [pc, #104]	; (800f2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800f24e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f250:	e02b      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f252:	2300      	movs	r3, #0
 800f254:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f256:	e028      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800f258:	4b16      	ldr	r3, [pc, #88]	; (800f2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f260:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f264:	d107      	bne.n	800f276 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800f266:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f26a:	4618      	mov	r0, r3
 800f26c:	f000 fae4 	bl	800f838 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800f270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f272:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f274:	e019      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f276:	2300      	movs	r3, #0
 800f278:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f27a:	e016      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800f27c:	4b0d      	ldr	r3, [pc, #52]	; (800f2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800f288:	d107      	bne.n	800f29a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f28a:	f107 0318 	add.w	r3, r7, #24
 800f28e:	4618      	mov	r0, r3
 800f290:	f000 f82a 	bl	800f2e8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800f294:	69fb      	ldr	r3, [r7, #28]
 800f296:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800f298:	e007      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800f29a:	2300      	movs	r3, #0
 800f29c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f29e:	e004      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800f2a4:	e001      	b.n	800f2aa <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800f2aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3740      	adds	r7, #64	; 0x40
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}
 800f2b4:	58024400 	.word	0x58024400
 800f2b8:	017d7840 	.word	0x017d7840

0800f2bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800f2c0:	f7fe fc66 	bl	800db90 <HAL_RCC_GetHCLKFreq>
 800f2c4:	4602      	mov	r2, r0
 800f2c6:	4b06      	ldr	r3, [pc, #24]	; (800f2e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800f2c8:	6a1b      	ldr	r3, [r3, #32]
 800f2ca:	091b      	lsrs	r3, r3, #4
 800f2cc:	f003 0307 	and.w	r3, r3, #7
 800f2d0:	4904      	ldr	r1, [pc, #16]	; (800f2e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800f2d2:	5ccb      	ldrb	r3, [r1, r3]
 800f2d4:	f003 031f 	and.w	r3, r3, #31
 800f2d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	58024400 	.word	0x58024400
 800f2e4:	080180c0 	.word	0x080180c0

0800f2e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800f2e8:	b480      	push	{r7}
 800f2ea:	b089      	sub	sp, #36	; 0x24
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f2f0:	4ba1      	ldr	r3, [pc, #644]	; (800f578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f2f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2f4:	f003 0303 	and.w	r3, r3, #3
 800f2f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800f2fa:	4b9f      	ldr	r3, [pc, #636]	; (800f578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f2fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2fe:	0b1b      	lsrs	r3, r3, #12
 800f300:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f304:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800f306:	4b9c      	ldr	r3, [pc, #624]	; (800f578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f30a:	091b      	lsrs	r3, r3, #4
 800f30c:	f003 0301 	and.w	r3, r3, #1
 800f310:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800f312:	4b99      	ldr	r3, [pc, #612]	; (800f578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f316:	08db      	lsrs	r3, r3, #3
 800f318:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f31c:	693a      	ldr	r2, [r7, #16]
 800f31e:	fb02 f303 	mul.w	r3, r2, r3
 800f322:	ee07 3a90 	vmov	s15, r3
 800f326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f32a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	2b00      	cmp	r3, #0
 800f332:	f000 8111 	beq.w	800f558 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800f336:	69bb      	ldr	r3, [r7, #24]
 800f338:	2b02      	cmp	r3, #2
 800f33a:	f000 8083 	beq.w	800f444 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800f33e:	69bb      	ldr	r3, [r7, #24]
 800f340:	2b02      	cmp	r3, #2
 800f342:	f200 80a1 	bhi.w	800f488 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800f346:	69bb      	ldr	r3, [r7, #24]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d003      	beq.n	800f354 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800f34c:	69bb      	ldr	r3, [r7, #24]
 800f34e:	2b01      	cmp	r3, #1
 800f350:	d056      	beq.n	800f400 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800f352:	e099      	b.n	800f488 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f354:	4b88      	ldr	r3, [pc, #544]	; (800f578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	f003 0320 	and.w	r3, r3, #32
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d02d      	beq.n	800f3bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f360:	4b85      	ldr	r3, [pc, #532]	; (800f578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	08db      	lsrs	r3, r3, #3
 800f366:	f003 0303 	and.w	r3, r3, #3
 800f36a:	4a84      	ldr	r2, [pc, #528]	; (800f57c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800f36c:	fa22 f303 	lsr.w	r3, r2, r3
 800f370:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f372:	68bb      	ldr	r3, [r7, #8]
 800f374:	ee07 3a90 	vmov	s15, r3
 800f378:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	ee07 3a90 	vmov	s15, r3
 800f382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f38a:	4b7b      	ldr	r3, [pc, #492]	; (800f578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f38e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f392:	ee07 3a90 	vmov	s15, r3
 800f396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f39a:	ed97 6a03 	vldr	s12, [r7, #12]
 800f39e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800f580 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f3a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f3a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f3aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f3ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f3b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800f3ba:	e087      	b.n	800f4cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f3bc:	697b      	ldr	r3, [r7, #20]
 800f3be:	ee07 3a90 	vmov	s15, r3
 800f3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f584 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f3ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f3ce:	4b6a      	ldr	r3, [pc, #424]	; (800f578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3d6:	ee07 3a90 	vmov	s15, r3
 800f3da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f3de:	ed97 6a03 	vldr	s12, [r7, #12]
 800f3e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800f580 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f3e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f3ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f3ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f3f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f3f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f3fe:	e065      	b.n	800f4cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f400:	697b      	ldr	r3, [r7, #20]
 800f402:	ee07 3a90 	vmov	s15, r3
 800f406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f40a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f588 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f40e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f412:	4b59      	ldr	r3, [pc, #356]	; (800f578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f41a:	ee07 3a90 	vmov	s15, r3
 800f41e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f422:	ed97 6a03 	vldr	s12, [r7, #12]
 800f426:	eddf 5a56 	vldr	s11, [pc, #344]	; 800f580 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f42a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f42e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f43a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f43e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f442:	e043      	b.n	800f4cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f444:	697b      	ldr	r3, [r7, #20]
 800f446:	ee07 3a90 	vmov	s15, r3
 800f44a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f44e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800f58c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f456:	4b48      	ldr	r3, [pc, #288]	; (800f578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f45a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f45e:	ee07 3a90 	vmov	s15, r3
 800f462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f466:	ed97 6a03 	vldr	s12, [r7, #12]
 800f46a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f580 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f46e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f47a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f47e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f482:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f486:	e021      	b.n	800f4cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800f488:	697b      	ldr	r3, [r7, #20]
 800f48a:	ee07 3a90 	vmov	s15, r3
 800f48e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f492:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f588 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f49a:	4b37      	ldr	r3, [pc, #220]	; (800f578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f49e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f4a2:	ee07 3a90 	vmov	s15, r3
 800f4a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f4aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800f4ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 800f580 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f4b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f4b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f4ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f4be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f4c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f4ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800f4cc:	4b2a      	ldr	r3, [pc, #168]	; (800f578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4d0:	0a5b      	lsrs	r3, r3, #9
 800f4d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4d6:	ee07 3a90 	vmov	s15, r3
 800f4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f4e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f4e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800f4ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f4ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f4f2:	ee17 2a90 	vmov	r2, s15
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800f4fa:	4b1f      	ldr	r3, [pc, #124]	; (800f578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4fe:	0c1b      	lsrs	r3, r3, #16
 800f500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f504:	ee07 3a90 	vmov	s15, r3
 800f508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f50c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f510:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f514:	edd7 6a07 	vldr	s13, [r7, #28]
 800f518:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f51c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f520:	ee17 2a90 	vmov	r2, s15
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800f528:	4b13      	ldr	r3, [pc, #76]	; (800f578 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f52c:	0e1b      	lsrs	r3, r3, #24
 800f52e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f532:	ee07 3a90 	vmov	s15, r3
 800f536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f53a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f53e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f542:	edd7 6a07 	vldr	s13, [r7, #28]
 800f546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f54a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f54e:	ee17 2a90 	vmov	r2, s15
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f556:	e008      	b.n	800f56a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2200      	movs	r2, #0
 800f55c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2200      	movs	r2, #0
 800f562:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2200      	movs	r2, #0
 800f568:	609a      	str	r2, [r3, #8]
}
 800f56a:	bf00      	nop
 800f56c:	3724      	adds	r7, #36	; 0x24
 800f56e:	46bd      	mov	sp, r7
 800f570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f574:	4770      	bx	lr
 800f576:	bf00      	nop
 800f578:	58024400 	.word	0x58024400
 800f57c:	03d09000 	.word	0x03d09000
 800f580:	46000000 	.word	0x46000000
 800f584:	4c742400 	.word	0x4c742400
 800f588:	4a742400 	.word	0x4a742400
 800f58c:	4bbebc20 	.word	0x4bbebc20

0800f590 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800f590:	b480      	push	{r7}
 800f592:	b089      	sub	sp, #36	; 0x24
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f598:	4ba1      	ldr	r3, [pc, #644]	; (800f820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f59a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f59c:	f003 0303 	and.w	r3, r3, #3
 800f5a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800f5a2:	4b9f      	ldr	r3, [pc, #636]	; (800f820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f5a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5a6:	0d1b      	lsrs	r3, r3, #20
 800f5a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f5ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f5ae:	4b9c      	ldr	r3, [pc, #624]	; (800f820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5b2:	0a1b      	lsrs	r3, r3, #8
 800f5b4:	f003 0301 	and.w	r3, r3, #1
 800f5b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800f5ba:	4b99      	ldr	r3, [pc, #612]	; (800f820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f5bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f5be:	08db      	lsrs	r3, r3, #3
 800f5c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f5c4:	693a      	ldr	r2, [r7, #16]
 800f5c6:	fb02 f303 	mul.w	r3, r2, r3
 800f5ca:	ee07 3a90 	vmov	s15, r3
 800f5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f5d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	f000 8111 	beq.w	800f800 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f5de:	69bb      	ldr	r3, [r7, #24]
 800f5e0:	2b02      	cmp	r3, #2
 800f5e2:	f000 8083 	beq.w	800f6ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f5e6:	69bb      	ldr	r3, [r7, #24]
 800f5e8:	2b02      	cmp	r3, #2
 800f5ea:	f200 80a1 	bhi.w	800f730 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f5ee:	69bb      	ldr	r3, [r7, #24]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d003      	beq.n	800f5fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f5f4:	69bb      	ldr	r3, [r7, #24]
 800f5f6:	2b01      	cmp	r3, #1
 800f5f8:	d056      	beq.n	800f6a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f5fa:	e099      	b.n	800f730 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f5fc:	4b88      	ldr	r3, [pc, #544]	; (800f820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	f003 0320 	and.w	r3, r3, #32
 800f604:	2b00      	cmp	r3, #0
 800f606:	d02d      	beq.n	800f664 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f608:	4b85      	ldr	r3, [pc, #532]	; (800f820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	08db      	lsrs	r3, r3, #3
 800f60e:	f003 0303 	and.w	r3, r3, #3
 800f612:	4a84      	ldr	r2, [pc, #528]	; (800f824 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f614:	fa22 f303 	lsr.w	r3, r2, r3
 800f618:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f61a:	68bb      	ldr	r3, [r7, #8]
 800f61c:	ee07 3a90 	vmov	s15, r3
 800f620:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	ee07 3a90 	vmov	s15, r3
 800f62a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f62e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f632:	4b7b      	ldr	r3, [pc, #492]	; (800f820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f63a:	ee07 3a90 	vmov	s15, r3
 800f63e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f642:	ed97 6a03 	vldr	s12, [r7, #12]
 800f646:	eddf 5a78 	vldr	s11, [pc, #480]	; 800f828 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f64a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f64e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f65a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f65e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800f662:	e087      	b.n	800f774 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	ee07 3a90 	vmov	s15, r3
 800f66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f66e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800f82c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f676:	4b6a      	ldr	r3, [pc, #424]	; (800f820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f67a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f67e:	ee07 3a90 	vmov	s15, r3
 800f682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f686:	ed97 6a03 	vldr	s12, [r7, #12]
 800f68a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800f828 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f68e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f69a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f69e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f6a6:	e065      	b.n	800f774 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f6a8:	697b      	ldr	r3, [r7, #20]
 800f6aa:	ee07 3a90 	vmov	s15, r3
 800f6ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800f830 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f6b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f6ba:	4b59      	ldr	r3, [pc, #356]	; (800f820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f6bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6c2:	ee07 3a90 	vmov	s15, r3
 800f6c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f6ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800f6ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 800f828 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f6d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f6d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f6da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f6de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f6e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f6e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f6ea:	e043      	b.n	800f774 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	ee07 3a90 	vmov	s15, r3
 800f6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800f834 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800f6fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f6fe:	4b48      	ldr	r3, [pc, #288]	; (800f820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f706:	ee07 3a90 	vmov	s15, r3
 800f70a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f70e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f712:	eddf 5a45 	vldr	s11, [pc, #276]	; 800f828 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f71a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f71e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f72a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f72e:	e021      	b.n	800f774 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800f730:	697b      	ldr	r3, [r7, #20]
 800f732:	ee07 3a90 	vmov	s15, r3
 800f736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f73a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800f830 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f73e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f742:	4b37      	ldr	r3, [pc, #220]	; (800f820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f74a:	ee07 3a90 	vmov	s15, r3
 800f74e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f752:	ed97 6a03 	vldr	s12, [r7, #12]
 800f756:	eddf 5a34 	vldr	s11, [pc, #208]	; 800f828 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f75a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f75e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f76a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f76e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f772:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800f774:	4b2a      	ldr	r3, [pc, #168]	; (800f820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f778:	0a5b      	lsrs	r3, r3, #9
 800f77a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f77e:	ee07 3a90 	vmov	s15, r3
 800f782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f786:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f78a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f78e:	edd7 6a07 	vldr	s13, [r7, #28]
 800f792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f79a:	ee17 2a90 	vmov	r2, s15
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800f7a2:	4b1f      	ldr	r3, [pc, #124]	; (800f820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7a6:	0c1b      	lsrs	r3, r3, #16
 800f7a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7ac:	ee07 3a90 	vmov	s15, r3
 800f7b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f7b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f7bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800f7c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f7c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f7c8:	ee17 2a90 	vmov	r2, s15
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800f7d0:	4b13      	ldr	r3, [pc, #76]	; (800f820 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f7d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7d4:	0e1b      	lsrs	r3, r3, #24
 800f7d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7da:	ee07 3a90 	vmov	s15, r3
 800f7de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f7e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f7e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f7ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800f7ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f7f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f7f6:	ee17 2a90 	vmov	r2, s15
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f7fe:	e008      	b.n	800f812 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2200      	movs	r2, #0
 800f804:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2200      	movs	r2, #0
 800f80a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2200      	movs	r2, #0
 800f810:	609a      	str	r2, [r3, #8]
}
 800f812:	bf00      	nop
 800f814:	3724      	adds	r7, #36	; 0x24
 800f816:	46bd      	mov	sp, r7
 800f818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81c:	4770      	bx	lr
 800f81e:	bf00      	nop
 800f820:	58024400 	.word	0x58024400
 800f824:	03d09000 	.word	0x03d09000
 800f828:	46000000 	.word	0x46000000
 800f82c:	4c742400 	.word	0x4c742400
 800f830:	4a742400 	.word	0x4a742400
 800f834:	4bbebc20 	.word	0x4bbebc20

0800f838 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800f838:	b480      	push	{r7}
 800f83a:	b089      	sub	sp, #36	; 0x24
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f840:	4ba0      	ldr	r3, [pc, #640]	; (800fac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f844:	f003 0303 	and.w	r3, r3, #3
 800f848:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800f84a:	4b9e      	ldr	r3, [pc, #632]	; (800fac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f84e:	091b      	lsrs	r3, r3, #4
 800f850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f854:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800f856:	4b9b      	ldr	r3, [pc, #620]	; (800fac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f85a:	f003 0301 	and.w	r3, r3, #1
 800f85e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f860:	4b98      	ldr	r3, [pc, #608]	; (800fac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f864:	08db      	lsrs	r3, r3, #3
 800f866:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f86a:	693a      	ldr	r2, [r7, #16]
 800f86c:	fb02 f303 	mul.w	r3, r2, r3
 800f870:	ee07 3a90 	vmov	s15, r3
 800f874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f878:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	f000 8111 	beq.w	800faa6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800f884:	69bb      	ldr	r3, [r7, #24]
 800f886:	2b02      	cmp	r3, #2
 800f888:	f000 8083 	beq.w	800f992 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800f88c:	69bb      	ldr	r3, [r7, #24]
 800f88e:	2b02      	cmp	r3, #2
 800f890:	f200 80a1 	bhi.w	800f9d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800f894:	69bb      	ldr	r3, [r7, #24]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d003      	beq.n	800f8a2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800f89a:	69bb      	ldr	r3, [r7, #24]
 800f89c:	2b01      	cmp	r3, #1
 800f89e:	d056      	beq.n	800f94e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800f8a0:	e099      	b.n	800f9d6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f8a2:	4b88      	ldr	r3, [pc, #544]	; (800fac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	f003 0320 	and.w	r3, r3, #32
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d02d      	beq.n	800f90a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f8ae:	4b85      	ldr	r3, [pc, #532]	; (800fac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	08db      	lsrs	r3, r3, #3
 800f8b4:	f003 0303 	and.w	r3, r3, #3
 800f8b8:	4a83      	ldr	r2, [pc, #524]	; (800fac8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800f8ba:	fa22 f303 	lsr.w	r3, r2, r3
 800f8be:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f8c0:	68bb      	ldr	r3, [r7, #8]
 800f8c2:	ee07 3a90 	vmov	s15, r3
 800f8c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	ee07 3a90 	vmov	s15, r3
 800f8d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f8d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f8d8:	4b7a      	ldr	r3, [pc, #488]	; (800fac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f8da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f8e0:	ee07 3a90 	vmov	s15, r3
 800f8e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f8e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800f8ec:	eddf 5a77 	vldr	s11, [pc, #476]	; 800facc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f8f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f8f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f8f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f8fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f900:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f904:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800f908:	e087      	b.n	800fa1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f90a:	697b      	ldr	r3, [r7, #20]
 800f90c:	ee07 3a90 	vmov	s15, r3
 800f910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f914:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800fad0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f918:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f91c:	4b69      	ldr	r3, [pc, #420]	; (800fac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f91e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f924:	ee07 3a90 	vmov	s15, r3
 800f928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f92c:	ed97 6a03 	vldr	s12, [r7, #12]
 800f930:	eddf 5a66 	vldr	s11, [pc, #408]	; 800facc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f934:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f938:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f93c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f940:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f944:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f948:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f94c:	e065      	b.n	800fa1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f94e:	697b      	ldr	r3, [r7, #20]
 800f950:	ee07 3a90 	vmov	s15, r3
 800f954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f958:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800fad4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800f95c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f960:	4b58      	ldr	r3, [pc, #352]	; (800fac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f968:	ee07 3a90 	vmov	s15, r3
 800f96c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f970:	ed97 6a03 	vldr	s12, [r7, #12]
 800f974:	eddf 5a55 	vldr	s11, [pc, #340]	; 800facc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f978:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f97c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f980:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f984:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f98c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f990:	e043      	b.n	800fa1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	ee07 3a90 	vmov	s15, r3
 800f998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f99c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800fad8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800f9a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f9a4:	4b47      	ldr	r3, [pc, #284]	; (800fac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f9a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9ac:	ee07 3a90 	vmov	s15, r3
 800f9b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f9b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800f9b8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800facc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f9bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f9c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f9c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f9c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f9cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800f9d4:	e021      	b.n	800fa1a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	ee07 3a90 	vmov	s15, r3
 800f9dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f9e0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800fad0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f9e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f9e8:	4b36      	ldr	r3, [pc, #216]	; (800fac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f9ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9f0:	ee07 3a90 	vmov	s15, r3
 800f9f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f9f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800f9fc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800facc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800fa00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fa04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fa08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fa0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fa10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800fa18:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800fa1a:	4b2a      	ldr	r3, [pc, #168]	; (800fac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fa1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa1e:	0a5b      	lsrs	r3, r3, #9
 800fa20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa24:	ee07 3a90 	vmov	s15, r3
 800fa28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fa30:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fa34:	edd7 6a07 	vldr	s13, [r7, #28]
 800fa38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fa3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa40:	ee17 2a90 	vmov	r2, s15
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800fa48:	4b1e      	ldr	r3, [pc, #120]	; (800fac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fa4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa4c:	0c1b      	lsrs	r3, r3, #16
 800fa4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa52:	ee07 3a90 	vmov	s15, r3
 800fa56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fa5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fa62:	edd7 6a07 	vldr	s13, [r7, #28]
 800fa66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fa6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa6e:	ee17 2a90 	vmov	r2, s15
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800fa76:	4b13      	ldr	r3, [pc, #76]	; (800fac4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800fa78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa7a:	0e1b      	lsrs	r3, r3, #24
 800fa7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa80:	ee07 3a90 	vmov	s15, r3
 800fa84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fa88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fa8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800fa90:	edd7 6a07 	vldr	s13, [r7, #28]
 800fa94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fa98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fa9c:	ee17 2a90 	vmov	r2, s15
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800faa4:	e008      	b.n	800fab8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2200      	movs	r2, #0
 800faaa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	2200      	movs	r2, #0
 800fab0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	2200      	movs	r2, #0
 800fab6:	609a      	str	r2, [r3, #8]
}
 800fab8:	bf00      	nop
 800faba:	3724      	adds	r7, #36	; 0x24
 800fabc:	46bd      	mov	sp, r7
 800fabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac2:	4770      	bx	lr
 800fac4:	58024400 	.word	0x58024400
 800fac8:	03d09000 	.word	0x03d09000
 800facc:	46000000 	.word	0x46000000
 800fad0:	4c742400 	.word	0x4c742400
 800fad4:	4a742400 	.word	0x4a742400
 800fad8:	4bbebc20 	.word	0x4bbebc20

0800fadc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b084      	sub	sp, #16
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
 800fae4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fae6:	2300      	movs	r3, #0
 800fae8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800faea:	4b53      	ldr	r3, [pc, #332]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800faec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faee:	f003 0303 	and.w	r3, r3, #3
 800faf2:	2b03      	cmp	r3, #3
 800faf4:	d101      	bne.n	800fafa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800faf6:	2301      	movs	r3, #1
 800faf8:	e099      	b.n	800fc2e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800fafa:	4b4f      	ldr	r3, [pc, #316]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	4a4e      	ldr	r2, [pc, #312]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fb00:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fb04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fb06:	f7fa fb71 	bl	800a1ec <HAL_GetTick>
 800fb0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fb0c:	e008      	b.n	800fb20 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800fb0e:	f7fa fb6d 	bl	800a1ec <HAL_GetTick>
 800fb12:	4602      	mov	r2, r0
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	1ad3      	subs	r3, r2, r3
 800fb18:	2b02      	cmp	r3, #2
 800fb1a:	d901      	bls.n	800fb20 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fb1c:	2303      	movs	r3, #3
 800fb1e:	e086      	b.n	800fc2e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800fb20:	4b45      	ldr	r3, [pc, #276]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d1f0      	bne.n	800fb0e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800fb2c:	4b42      	ldr	r3, [pc, #264]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fb2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb30:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	031b      	lsls	r3, r3, #12
 800fb3a:	493f      	ldr	r1, [pc, #252]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fb3c:	4313      	orrs	r3, r2
 800fb3e:	628b      	str	r3, [r1, #40]	; 0x28
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	685b      	ldr	r3, [r3, #4]
 800fb44:	3b01      	subs	r3, #1
 800fb46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	689b      	ldr	r3, [r3, #8]
 800fb4e:	3b01      	subs	r3, #1
 800fb50:	025b      	lsls	r3, r3, #9
 800fb52:	b29b      	uxth	r3, r3
 800fb54:	431a      	orrs	r2, r3
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	68db      	ldr	r3, [r3, #12]
 800fb5a:	3b01      	subs	r3, #1
 800fb5c:	041b      	lsls	r3, r3, #16
 800fb5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800fb62:	431a      	orrs	r2, r3
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	691b      	ldr	r3, [r3, #16]
 800fb68:	3b01      	subs	r3, #1
 800fb6a:	061b      	lsls	r3, r3, #24
 800fb6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800fb70:	4931      	ldr	r1, [pc, #196]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fb72:	4313      	orrs	r3, r2
 800fb74:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800fb76:	4b30      	ldr	r3, [pc, #192]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fb78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	695b      	ldr	r3, [r3, #20]
 800fb82:	492d      	ldr	r1, [pc, #180]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fb84:	4313      	orrs	r3, r2
 800fb86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800fb88:	4b2b      	ldr	r3, [pc, #172]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fb8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb8c:	f023 0220 	bic.w	r2, r3, #32
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	699b      	ldr	r3, [r3, #24]
 800fb94:	4928      	ldr	r1, [pc, #160]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fb96:	4313      	orrs	r3, r2
 800fb98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800fb9a:	4b27      	ldr	r3, [pc, #156]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb9e:	4a26      	ldr	r2, [pc, #152]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fba0:	f023 0310 	bic.w	r3, r3, #16
 800fba4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800fba6:	4b24      	ldr	r3, [pc, #144]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fba8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fbaa:	4b24      	ldr	r3, [pc, #144]	; (800fc3c <RCCEx_PLL2_Config+0x160>)
 800fbac:	4013      	ands	r3, r2
 800fbae:	687a      	ldr	r2, [r7, #4]
 800fbb0:	69d2      	ldr	r2, [r2, #28]
 800fbb2:	00d2      	lsls	r2, r2, #3
 800fbb4:	4920      	ldr	r1, [pc, #128]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fbb6:	4313      	orrs	r3, r2
 800fbb8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800fbba:	4b1f      	ldr	r3, [pc, #124]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fbbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbbe:	4a1e      	ldr	r2, [pc, #120]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fbc0:	f043 0310 	orr.w	r3, r3, #16
 800fbc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d106      	bne.n	800fbda <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800fbcc:	4b1a      	ldr	r3, [pc, #104]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fbce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbd0:	4a19      	ldr	r2, [pc, #100]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fbd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fbd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800fbd8:	e00f      	b.n	800fbfa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	2b01      	cmp	r3, #1
 800fbde:	d106      	bne.n	800fbee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800fbe0:	4b15      	ldr	r3, [pc, #84]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbe4:	4a14      	ldr	r2, [pc, #80]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fbe6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fbea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800fbec:	e005      	b.n	800fbfa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800fbee:	4b12      	ldr	r3, [pc, #72]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fbf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf2:	4a11      	ldr	r2, [pc, #68]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fbf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fbf8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800fbfa:	4b0f      	ldr	r3, [pc, #60]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	4a0e      	ldr	r2, [pc, #56]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fc00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fc04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fc06:	f7fa faf1 	bl	800a1ec <HAL_GetTick>
 800fc0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fc0c:	e008      	b.n	800fc20 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800fc0e:	f7fa faed 	bl	800a1ec <HAL_GetTick>
 800fc12:	4602      	mov	r2, r0
 800fc14:	68bb      	ldr	r3, [r7, #8]
 800fc16:	1ad3      	subs	r3, r2, r3
 800fc18:	2b02      	cmp	r3, #2
 800fc1a:	d901      	bls.n	800fc20 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800fc1c:	2303      	movs	r3, #3
 800fc1e:	e006      	b.n	800fc2e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800fc20:	4b05      	ldr	r3, [pc, #20]	; (800fc38 <RCCEx_PLL2_Config+0x15c>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d0f0      	beq.n	800fc0e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800fc2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3710      	adds	r7, #16
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
 800fc36:	bf00      	nop
 800fc38:	58024400 	.word	0x58024400
 800fc3c:	ffff0007 	.word	0xffff0007

0800fc40 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b084      	sub	sp, #16
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800fc4e:	4b53      	ldr	r3, [pc, #332]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fc50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc52:	f003 0303 	and.w	r3, r3, #3
 800fc56:	2b03      	cmp	r3, #3
 800fc58:	d101      	bne.n	800fc5e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	e099      	b.n	800fd92 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800fc5e:	4b4f      	ldr	r3, [pc, #316]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	4a4e      	ldr	r2, [pc, #312]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fc64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fc68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fc6a:	f7fa fabf 	bl	800a1ec <HAL_GetTick>
 800fc6e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fc70:	e008      	b.n	800fc84 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800fc72:	f7fa fabb 	bl	800a1ec <HAL_GetTick>
 800fc76:	4602      	mov	r2, r0
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	1ad3      	subs	r3, r2, r3
 800fc7c:	2b02      	cmp	r3, #2
 800fc7e:	d901      	bls.n	800fc84 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800fc80:	2303      	movs	r3, #3
 800fc82:	e086      	b.n	800fd92 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800fc84:	4b45      	ldr	r3, [pc, #276]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d1f0      	bne.n	800fc72 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800fc90:	4b42      	ldr	r3, [pc, #264]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fc92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc94:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	051b      	lsls	r3, r3, #20
 800fc9e:	493f      	ldr	r1, [pc, #252]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fca0:	4313      	orrs	r3, r2
 800fca2:	628b      	str	r3, [r1, #40]	; 0x28
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	685b      	ldr	r3, [r3, #4]
 800fca8:	3b01      	subs	r3, #1
 800fcaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	689b      	ldr	r3, [r3, #8]
 800fcb2:	3b01      	subs	r3, #1
 800fcb4:	025b      	lsls	r3, r3, #9
 800fcb6:	b29b      	uxth	r3, r3
 800fcb8:	431a      	orrs	r2, r3
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	68db      	ldr	r3, [r3, #12]
 800fcbe:	3b01      	subs	r3, #1
 800fcc0:	041b      	lsls	r3, r3, #16
 800fcc2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800fcc6:	431a      	orrs	r2, r3
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	691b      	ldr	r3, [r3, #16]
 800fccc:	3b01      	subs	r3, #1
 800fcce:	061b      	lsls	r3, r3, #24
 800fcd0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800fcd4:	4931      	ldr	r1, [pc, #196]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fcd6:	4313      	orrs	r3, r2
 800fcd8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800fcda:	4b30      	ldr	r3, [pc, #192]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fcdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcde:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	695b      	ldr	r3, [r3, #20]
 800fce6:	492d      	ldr	r1, [pc, #180]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fce8:	4313      	orrs	r3, r2
 800fcea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800fcec:	4b2b      	ldr	r3, [pc, #172]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fcee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcf0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	699b      	ldr	r3, [r3, #24]
 800fcf8:	4928      	ldr	r1, [pc, #160]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fcfa:	4313      	orrs	r3, r2
 800fcfc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800fcfe:	4b27      	ldr	r3, [pc, #156]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fd00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd02:	4a26      	ldr	r2, [pc, #152]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fd04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800fd0a:	4b24      	ldr	r3, [pc, #144]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fd0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fd0e:	4b24      	ldr	r3, [pc, #144]	; (800fda0 <RCCEx_PLL3_Config+0x160>)
 800fd10:	4013      	ands	r3, r2
 800fd12:	687a      	ldr	r2, [r7, #4]
 800fd14:	69d2      	ldr	r2, [r2, #28]
 800fd16:	00d2      	lsls	r2, r2, #3
 800fd18:	4920      	ldr	r1, [pc, #128]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fd1a:	4313      	orrs	r3, r2
 800fd1c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800fd1e:	4b1f      	ldr	r3, [pc, #124]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fd20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd22:	4a1e      	ldr	r2, [pc, #120]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fd24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fd28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d106      	bne.n	800fd3e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800fd30:	4b1a      	ldr	r3, [pc, #104]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fd32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd34:	4a19      	ldr	r2, [pc, #100]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fd36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800fd3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800fd3c:	e00f      	b.n	800fd5e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800fd3e:	683b      	ldr	r3, [r7, #0]
 800fd40:	2b01      	cmp	r3, #1
 800fd42:	d106      	bne.n	800fd52 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800fd44:	4b15      	ldr	r3, [pc, #84]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd48:	4a14      	ldr	r2, [pc, #80]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fd4a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800fd4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800fd50:	e005      	b.n	800fd5e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800fd52:	4b12      	ldr	r3, [pc, #72]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd56:	4a11      	ldr	r2, [pc, #68]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fd58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fd5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800fd5e:	4b0f      	ldr	r3, [pc, #60]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	4a0e      	ldr	r2, [pc, #56]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fd64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fd6a:	f7fa fa3f 	bl	800a1ec <HAL_GetTick>
 800fd6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fd70:	e008      	b.n	800fd84 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800fd72:	f7fa fa3b 	bl	800a1ec <HAL_GetTick>
 800fd76:	4602      	mov	r2, r0
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	1ad3      	subs	r3, r2, r3
 800fd7c:	2b02      	cmp	r3, #2
 800fd7e:	d901      	bls.n	800fd84 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800fd80:	2303      	movs	r3, #3
 800fd82:	e006      	b.n	800fd92 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800fd84:	4b05      	ldr	r3, [pc, #20]	; (800fd9c <RCCEx_PLL3_Config+0x15c>)
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d0f0      	beq.n	800fd72 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800fd90:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3710      	adds	r7, #16
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	bf00      	nop
 800fd9c:	58024400 	.word	0x58024400
 800fda0:	ffff0007 	.word	0xffff0007

0800fda4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d101      	bne.n	800fdb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	e0f1      	b.n	800ff9a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2200      	movs	r2, #0
 800fdba:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	4a78      	ldr	r2, [pc, #480]	; (800ffa4 <HAL_SPI_Init+0x200>)
 800fdc2:	4293      	cmp	r3, r2
 800fdc4:	d00f      	beq.n	800fde6 <HAL_SPI_Init+0x42>
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	4a77      	ldr	r2, [pc, #476]	; (800ffa8 <HAL_SPI_Init+0x204>)
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	d00a      	beq.n	800fde6 <HAL_SPI_Init+0x42>
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	4a75      	ldr	r2, [pc, #468]	; (800ffac <HAL_SPI_Init+0x208>)
 800fdd6:	4293      	cmp	r3, r2
 800fdd8:	d005      	beq.n	800fde6 <HAL_SPI_Init+0x42>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	68db      	ldr	r3, [r3, #12]
 800fdde:	2b0f      	cmp	r3, #15
 800fde0:	d901      	bls.n	800fde6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800fde2:	2301      	movs	r3, #1
 800fde4:	e0d9      	b.n	800ff9a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f000 f8e2 	bl	800ffb0 <SPI_GetPacketSize>
 800fdec:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	4a6c      	ldr	r2, [pc, #432]	; (800ffa4 <HAL_SPI_Init+0x200>)
 800fdf4:	4293      	cmp	r3, r2
 800fdf6:	d00c      	beq.n	800fe12 <HAL_SPI_Init+0x6e>
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	4a6a      	ldr	r2, [pc, #424]	; (800ffa8 <HAL_SPI_Init+0x204>)
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d007      	beq.n	800fe12 <HAL_SPI_Init+0x6e>
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	4a69      	ldr	r2, [pc, #420]	; (800ffac <HAL_SPI_Init+0x208>)
 800fe08:	4293      	cmp	r3, r2
 800fe0a:	d002      	beq.n	800fe12 <HAL_SPI_Init+0x6e>
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2b08      	cmp	r3, #8
 800fe10:	d811      	bhi.n	800fe36 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800fe16:	4a63      	ldr	r2, [pc, #396]	; (800ffa4 <HAL_SPI_Init+0x200>)
 800fe18:	4293      	cmp	r3, r2
 800fe1a:	d009      	beq.n	800fe30 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	4a61      	ldr	r2, [pc, #388]	; (800ffa8 <HAL_SPI_Init+0x204>)
 800fe22:	4293      	cmp	r3, r2
 800fe24:	d004      	beq.n	800fe30 <HAL_SPI_Init+0x8c>
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	4a60      	ldr	r2, [pc, #384]	; (800ffac <HAL_SPI_Init+0x208>)
 800fe2c:	4293      	cmp	r3, r2
 800fe2e:	d104      	bne.n	800fe3a <HAL_SPI_Init+0x96>
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	2b10      	cmp	r3, #16
 800fe34:	d901      	bls.n	800fe3a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800fe36:	2301      	movs	r3, #1
 800fe38:	e0af      	b.n	800ff9a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fe40:	b2db      	uxtb	r3, r3
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d106      	bne.n	800fe54 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2200      	movs	r2, #0
 800fe4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	f7f8 fc94 	bl	800877c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2202      	movs	r2, #2
 800fe58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	681a      	ldr	r2, [r3, #0]
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	f022 0201 	bic.w	r2, r2, #1
 800fe6a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	689b      	ldr	r3, [r3, #8]
 800fe72:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800fe76:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	699b      	ldr	r3, [r3, #24]
 800fe7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800fe80:	d119      	bne.n	800feb6 <HAL_SPI_Init+0x112>
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	685b      	ldr	r3, [r3, #4]
 800fe86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fe8a:	d103      	bne.n	800fe94 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d008      	beq.n	800fea6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d10c      	bne.n	800feb6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800fea0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fea4:	d107      	bne.n	800feb6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	681a      	ldr	r2, [r3, #0]
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800feb4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	69da      	ldr	r2, [r3, #28]
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800febe:	431a      	orrs	r2, r3
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	431a      	orrs	r2, r3
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fec8:	ea42 0103 	orr.w	r1, r2, r3
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	68da      	ldr	r2, [r3, #12]
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	430a      	orrs	r2, r1
 800fed6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fee0:	431a      	orrs	r2, r3
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fee6:	431a      	orrs	r2, r3
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	699b      	ldr	r3, [r3, #24]
 800feec:	431a      	orrs	r2, r3
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	691b      	ldr	r3, [r3, #16]
 800fef2:	431a      	orrs	r2, r3
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	695b      	ldr	r3, [r3, #20]
 800fef8:	431a      	orrs	r2, r3
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6a1b      	ldr	r3, [r3, #32]
 800fefe:	431a      	orrs	r2, r3
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	685b      	ldr	r3, [r3, #4]
 800ff04:	431a      	orrs	r2, r3
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ff0a:	431a      	orrs	r2, r3
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	689b      	ldr	r3, [r3, #8]
 800ff10:	431a      	orrs	r2, r3
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ff16:	ea42 0103 	orr.w	r1, r2, r3
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	430a      	orrs	r2, r1
 800ff24:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d113      	bne.n	800ff56 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	689b      	ldr	r3, [r3, #8]
 800ff34:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ff40:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	689b      	ldr	r3, [r3, #8]
 800ff48:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ff54:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	f022 0201 	bic.w	r2, r2, #1
 800ff64:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	685b      	ldr	r3, [r3, #4]
 800ff6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d00a      	beq.n	800ff88 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	68db      	ldr	r3, [r3, #12]
 800ff78:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	430a      	orrs	r2, r1
 800ff86:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	2201      	movs	r2, #1
 800ff94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ff98:	2300      	movs	r3, #0
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	3710      	adds	r7, #16
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}
 800ffa2:	bf00      	nop
 800ffa4:	40013000 	.word	0x40013000
 800ffa8:	40003800 	.word	0x40003800
 800ffac:	40003c00 	.word	0x40003c00

0800ffb0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b085      	sub	sp, #20
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ffbc:	095b      	lsrs	r3, r3, #5
 800ffbe:	3301      	adds	r3, #1
 800ffc0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	68db      	ldr	r3, [r3, #12]
 800ffc6:	3301      	adds	r3, #1
 800ffc8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	3307      	adds	r3, #7
 800ffce:	08db      	lsrs	r3, r3, #3
 800ffd0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	68fa      	ldr	r2, [r7, #12]
 800ffd6:	fb02 f303 	mul.w	r3, r2, r3
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3714      	adds	r7, #20
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe4:	4770      	bx	lr

0800ffe6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ffe6:	b580      	push	{r7, lr}
 800ffe8:	b082      	sub	sp, #8
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d101      	bne.n	800fff8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fff4:	2301      	movs	r3, #1
 800fff6:	e049      	b.n	801008c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fffe:	b2db      	uxtb	r3, r3
 8010000:	2b00      	cmp	r3, #0
 8010002:	d106      	bne.n	8010012 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	2200      	movs	r2, #0
 8010008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f7f9 faf9 	bl	8009604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2202      	movs	r2, #2
 8010016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681a      	ldr	r2, [r3, #0]
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	3304      	adds	r3, #4
 8010022:	4619      	mov	r1, r3
 8010024:	4610      	mov	r0, r2
 8010026:	f000 fbbf 	bl	80107a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	2201      	movs	r2, #1
 801002e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2201      	movs	r2, #1
 8010036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2201      	movs	r2, #1
 801003e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2201      	movs	r2, #1
 8010046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2201      	movs	r2, #1
 801004e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	2201      	movs	r2, #1
 8010056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	2201      	movs	r2, #1
 801005e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2201      	movs	r2, #1
 8010066:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2201      	movs	r2, #1
 801006e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2201      	movs	r2, #1
 8010076:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	2201      	movs	r2, #1
 801007e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2201      	movs	r2, #1
 8010086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801008a:	2300      	movs	r3, #0
}
 801008c:	4618      	mov	r0, r3
 801008e:	3708      	adds	r7, #8
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}

08010094 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b082      	sub	sp, #8
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d101      	bne.n	80100a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80100a2:	2301      	movs	r3, #1
 80100a4:	e049      	b.n	801013a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80100ac:	b2db      	uxtb	r3, r3
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d106      	bne.n	80100c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2200      	movs	r2, #0
 80100b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80100ba:	6878      	ldr	r0, [r7, #4]
 80100bc:	f000 f841 	bl	8010142 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2202      	movs	r2, #2
 80100c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	681a      	ldr	r2, [r3, #0]
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	3304      	adds	r3, #4
 80100d0:	4619      	mov	r1, r3
 80100d2:	4610      	mov	r0, r2
 80100d4:	f000 fb68 	bl	80107a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	2201      	movs	r2, #1
 80100dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	2201      	movs	r2, #1
 80100e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2201      	movs	r2, #1
 80100ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2201      	movs	r2, #1
 80100f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2201      	movs	r2, #1
 80100fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2201      	movs	r2, #1
 8010104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2201      	movs	r2, #1
 801010c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2201      	movs	r2, #1
 8010114:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2201      	movs	r2, #1
 801011c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2201      	movs	r2, #1
 8010124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2201      	movs	r2, #1
 801012c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2201      	movs	r2, #1
 8010134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010138:	2300      	movs	r3, #0
}
 801013a:	4618      	mov	r0, r3
 801013c:	3708      	adds	r7, #8
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}

08010142 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8010142:	b480      	push	{r7}
 8010144:	b083      	sub	sp, #12
 8010146:	af00      	add	r7, sp, #0
 8010148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801014a:	bf00      	nop
 801014c:	370c      	adds	r7, #12
 801014e:	46bd      	mov	sp, r7
 8010150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010154:	4770      	bx	lr
	...

08010158 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b084      	sub	sp, #16
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
 8010160:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d109      	bne.n	801017c <HAL_TIM_PWM_Start+0x24>
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801016e:	b2db      	uxtb	r3, r3
 8010170:	2b01      	cmp	r3, #1
 8010172:	bf14      	ite	ne
 8010174:	2301      	movne	r3, #1
 8010176:	2300      	moveq	r3, #0
 8010178:	b2db      	uxtb	r3, r3
 801017a:	e03c      	b.n	80101f6 <HAL_TIM_PWM_Start+0x9e>
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	2b04      	cmp	r3, #4
 8010180:	d109      	bne.n	8010196 <HAL_TIM_PWM_Start+0x3e>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010188:	b2db      	uxtb	r3, r3
 801018a:	2b01      	cmp	r3, #1
 801018c:	bf14      	ite	ne
 801018e:	2301      	movne	r3, #1
 8010190:	2300      	moveq	r3, #0
 8010192:	b2db      	uxtb	r3, r3
 8010194:	e02f      	b.n	80101f6 <HAL_TIM_PWM_Start+0x9e>
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	2b08      	cmp	r3, #8
 801019a:	d109      	bne.n	80101b0 <HAL_TIM_PWM_Start+0x58>
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80101a2:	b2db      	uxtb	r3, r3
 80101a4:	2b01      	cmp	r3, #1
 80101a6:	bf14      	ite	ne
 80101a8:	2301      	movne	r3, #1
 80101aa:	2300      	moveq	r3, #0
 80101ac:	b2db      	uxtb	r3, r3
 80101ae:	e022      	b.n	80101f6 <HAL_TIM_PWM_Start+0x9e>
 80101b0:	683b      	ldr	r3, [r7, #0]
 80101b2:	2b0c      	cmp	r3, #12
 80101b4:	d109      	bne.n	80101ca <HAL_TIM_PWM_Start+0x72>
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80101bc:	b2db      	uxtb	r3, r3
 80101be:	2b01      	cmp	r3, #1
 80101c0:	bf14      	ite	ne
 80101c2:	2301      	movne	r3, #1
 80101c4:	2300      	moveq	r3, #0
 80101c6:	b2db      	uxtb	r3, r3
 80101c8:	e015      	b.n	80101f6 <HAL_TIM_PWM_Start+0x9e>
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	2b10      	cmp	r3, #16
 80101ce:	d109      	bne.n	80101e4 <HAL_TIM_PWM_Start+0x8c>
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	2b01      	cmp	r3, #1
 80101da:	bf14      	ite	ne
 80101dc:	2301      	movne	r3, #1
 80101de:	2300      	moveq	r3, #0
 80101e0:	b2db      	uxtb	r3, r3
 80101e2:	e008      	b.n	80101f6 <HAL_TIM_PWM_Start+0x9e>
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80101ea:	b2db      	uxtb	r3, r3
 80101ec:	2b01      	cmp	r3, #1
 80101ee:	bf14      	ite	ne
 80101f0:	2301      	movne	r3, #1
 80101f2:	2300      	moveq	r3, #0
 80101f4:	b2db      	uxtb	r3, r3
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d001      	beq.n	80101fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80101fa:	2301      	movs	r3, #1
 80101fc:	e0ab      	b.n	8010356 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80101fe:	683b      	ldr	r3, [r7, #0]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d104      	bne.n	801020e <HAL_TIM_PWM_Start+0xb6>
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	2202      	movs	r2, #2
 8010208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801020c:	e023      	b.n	8010256 <HAL_TIM_PWM_Start+0xfe>
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	2b04      	cmp	r3, #4
 8010212:	d104      	bne.n	801021e <HAL_TIM_PWM_Start+0xc6>
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2202      	movs	r2, #2
 8010218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801021c:	e01b      	b.n	8010256 <HAL_TIM_PWM_Start+0xfe>
 801021e:	683b      	ldr	r3, [r7, #0]
 8010220:	2b08      	cmp	r3, #8
 8010222:	d104      	bne.n	801022e <HAL_TIM_PWM_Start+0xd6>
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2202      	movs	r2, #2
 8010228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801022c:	e013      	b.n	8010256 <HAL_TIM_PWM_Start+0xfe>
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	2b0c      	cmp	r3, #12
 8010232:	d104      	bne.n	801023e <HAL_TIM_PWM_Start+0xe6>
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	2202      	movs	r2, #2
 8010238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801023c:	e00b      	b.n	8010256 <HAL_TIM_PWM_Start+0xfe>
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	2b10      	cmp	r3, #16
 8010242:	d104      	bne.n	801024e <HAL_TIM_PWM_Start+0xf6>
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2202      	movs	r2, #2
 8010248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801024c:	e003      	b.n	8010256 <HAL_TIM_PWM_Start+0xfe>
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2202      	movs	r2, #2
 8010252:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	2201      	movs	r2, #1
 801025c:	6839      	ldr	r1, [r7, #0]
 801025e:	4618      	mov	r0, r3
 8010260:	f000 febc 	bl	8010fdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	4a3d      	ldr	r2, [pc, #244]	; (8010360 <HAL_TIM_PWM_Start+0x208>)
 801026a:	4293      	cmp	r3, r2
 801026c:	d013      	beq.n	8010296 <HAL_TIM_PWM_Start+0x13e>
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	4a3c      	ldr	r2, [pc, #240]	; (8010364 <HAL_TIM_PWM_Start+0x20c>)
 8010274:	4293      	cmp	r3, r2
 8010276:	d00e      	beq.n	8010296 <HAL_TIM_PWM_Start+0x13e>
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	4a3a      	ldr	r2, [pc, #232]	; (8010368 <HAL_TIM_PWM_Start+0x210>)
 801027e:	4293      	cmp	r3, r2
 8010280:	d009      	beq.n	8010296 <HAL_TIM_PWM_Start+0x13e>
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	4a39      	ldr	r2, [pc, #228]	; (801036c <HAL_TIM_PWM_Start+0x214>)
 8010288:	4293      	cmp	r3, r2
 801028a:	d004      	beq.n	8010296 <HAL_TIM_PWM_Start+0x13e>
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	4a37      	ldr	r2, [pc, #220]	; (8010370 <HAL_TIM_PWM_Start+0x218>)
 8010292:	4293      	cmp	r3, r2
 8010294:	d101      	bne.n	801029a <HAL_TIM_PWM_Start+0x142>
 8010296:	2301      	movs	r3, #1
 8010298:	e000      	b.n	801029c <HAL_TIM_PWM_Start+0x144>
 801029a:	2300      	movs	r3, #0
 801029c:	2b00      	cmp	r3, #0
 801029e:	d007      	beq.n	80102b0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80102ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	4a2a      	ldr	r2, [pc, #168]	; (8010360 <HAL_TIM_PWM_Start+0x208>)
 80102b6:	4293      	cmp	r3, r2
 80102b8:	d02c      	beq.n	8010314 <HAL_TIM_PWM_Start+0x1bc>
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80102c2:	d027      	beq.n	8010314 <HAL_TIM_PWM_Start+0x1bc>
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	4a2a      	ldr	r2, [pc, #168]	; (8010374 <HAL_TIM_PWM_Start+0x21c>)
 80102ca:	4293      	cmp	r3, r2
 80102cc:	d022      	beq.n	8010314 <HAL_TIM_PWM_Start+0x1bc>
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	4a29      	ldr	r2, [pc, #164]	; (8010378 <HAL_TIM_PWM_Start+0x220>)
 80102d4:	4293      	cmp	r3, r2
 80102d6:	d01d      	beq.n	8010314 <HAL_TIM_PWM_Start+0x1bc>
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	4a27      	ldr	r2, [pc, #156]	; (801037c <HAL_TIM_PWM_Start+0x224>)
 80102de:	4293      	cmp	r3, r2
 80102e0:	d018      	beq.n	8010314 <HAL_TIM_PWM_Start+0x1bc>
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	4a1f      	ldr	r2, [pc, #124]	; (8010364 <HAL_TIM_PWM_Start+0x20c>)
 80102e8:	4293      	cmp	r3, r2
 80102ea:	d013      	beq.n	8010314 <HAL_TIM_PWM_Start+0x1bc>
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	4a23      	ldr	r2, [pc, #140]	; (8010380 <HAL_TIM_PWM_Start+0x228>)
 80102f2:	4293      	cmp	r3, r2
 80102f4:	d00e      	beq.n	8010314 <HAL_TIM_PWM_Start+0x1bc>
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	4a1b      	ldr	r2, [pc, #108]	; (8010368 <HAL_TIM_PWM_Start+0x210>)
 80102fc:	4293      	cmp	r3, r2
 80102fe:	d009      	beq.n	8010314 <HAL_TIM_PWM_Start+0x1bc>
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	4a1f      	ldr	r2, [pc, #124]	; (8010384 <HAL_TIM_PWM_Start+0x22c>)
 8010306:	4293      	cmp	r3, r2
 8010308:	d004      	beq.n	8010314 <HAL_TIM_PWM_Start+0x1bc>
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	4a1e      	ldr	r2, [pc, #120]	; (8010388 <HAL_TIM_PWM_Start+0x230>)
 8010310:	4293      	cmp	r3, r2
 8010312:	d115      	bne.n	8010340 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	689a      	ldr	r2, [r3, #8]
 801031a:	4b1c      	ldr	r3, [pc, #112]	; (801038c <HAL_TIM_PWM_Start+0x234>)
 801031c:	4013      	ands	r3, r2
 801031e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	2b06      	cmp	r3, #6
 8010324:	d015      	beq.n	8010352 <HAL_TIM_PWM_Start+0x1fa>
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801032c:	d011      	beq.n	8010352 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	681a      	ldr	r2, [r3, #0]
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	f042 0201 	orr.w	r2, r2, #1
 801033c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801033e:	e008      	b.n	8010352 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	681a      	ldr	r2, [r3, #0]
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	f042 0201 	orr.w	r2, r2, #1
 801034e:	601a      	str	r2, [r3, #0]
 8010350:	e000      	b.n	8010354 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010352:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010354:	2300      	movs	r3, #0
}
 8010356:	4618      	mov	r0, r3
 8010358:	3710      	adds	r7, #16
 801035a:	46bd      	mov	sp, r7
 801035c:	bd80      	pop	{r7, pc}
 801035e:	bf00      	nop
 8010360:	40010000 	.word	0x40010000
 8010364:	40010400 	.word	0x40010400
 8010368:	40014000 	.word	0x40014000
 801036c:	40014400 	.word	0x40014400
 8010370:	40014800 	.word	0x40014800
 8010374:	40000400 	.word	0x40000400
 8010378:	40000800 	.word	0x40000800
 801037c:	40000c00 	.word	0x40000c00
 8010380:	40001800 	.word	0x40001800
 8010384:	4000e000 	.word	0x4000e000
 8010388:	4000e400 	.word	0x4000e400
 801038c:	00010007 	.word	0x00010007

08010390 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b086      	sub	sp, #24
 8010394:	af00      	add	r7, sp, #0
 8010396:	60f8      	str	r0, [r7, #12]
 8010398:	60b9      	str	r1, [r7, #8]
 801039a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801039c:	2300      	movs	r3, #0
 801039e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80103a6:	2b01      	cmp	r3, #1
 80103a8:	d101      	bne.n	80103ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80103aa:	2302      	movs	r3, #2
 80103ac:	e0ff      	b.n	80105ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	2201      	movs	r2, #1
 80103b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2b14      	cmp	r3, #20
 80103ba:	f200 80f0 	bhi.w	801059e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80103be:	a201      	add	r2, pc, #4	; (adr r2, 80103c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80103c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103c4:	08010419 	.word	0x08010419
 80103c8:	0801059f 	.word	0x0801059f
 80103cc:	0801059f 	.word	0x0801059f
 80103d0:	0801059f 	.word	0x0801059f
 80103d4:	08010459 	.word	0x08010459
 80103d8:	0801059f 	.word	0x0801059f
 80103dc:	0801059f 	.word	0x0801059f
 80103e0:	0801059f 	.word	0x0801059f
 80103e4:	0801049b 	.word	0x0801049b
 80103e8:	0801059f 	.word	0x0801059f
 80103ec:	0801059f 	.word	0x0801059f
 80103f0:	0801059f 	.word	0x0801059f
 80103f4:	080104db 	.word	0x080104db
 80103f8:	0801059f 	.word	0x0801059f
 80103fc:	0801059f 	.word	0x0801059f
 8010400:	0801059f 	.word	0x0801059f
 8010404:	0801051d 	.word	0x0801051d
 8010408:	0801059f 	.word	0x0801059f
 801040c:	0801059f 	.word	0x0801059f
 8010410:	0801059f 	.word	0x0801059f
 8010414:	0801055d 	.word	0x0801055d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	68b9      	ldr	r1, [r7, #8]
 801041e:	4618      	mov	r0, r3
 8010420:	f000 fa68 	bl	80108f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	699a      	ldr	r2, [r3, #24]
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	f042 0208 	orr.w	r2, r2, #8
 8010432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	699a      	ldr	r2, [r3, #24]
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	f022 0204 	bic.w	r2, r2, #4
 8010442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	6999      	ldr	r1, [r3, #24]
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	691a      	ldr	r2, [r3, #16]
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	430a      	orrs	r2, r1
 8010454:	619a      	str	r2, [r3, #24]
      break;
 8010456:	e0a5      	b.n	80105a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	681b      	ldr	r3, [r3, #0]
 801045c:	68b9      	ldr	r1, [r7, #8]
 801045e:	4618      	mov	r0, r3
 8010460:	f000 fad8 	bl	8010a14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	699a      	ldr	r2, [r3, #24]
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	699a      	ldr	r2, [r3, #24]
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	6999      	ldr	r1, [r3, #24]
 801048a:	68bb      	ldr	r3, [r7, #8]
 801048c:	691b      	ldr	r3, [r3, #16]
 801048e:	021a      	lsls	r2, r3, #8
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	430a      	orrs	r2, r1
 8010496:	619a      	str	r2, [r3, #24]
      break;
 8010498:	e084      	b.n	80105a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	68b9      	ldr	r1, [r7, #8]
 80104a0:	4618      	mov	r0, r3
 80104a2:	f000 fb41 	bl	8010b28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	69da      	ldr	r2, [r3, #28]
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	f042 0208 	orr.w	r2, r2, #8
 80104b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	69da      	ldr	r2, [r3, #28]
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	f022 0204 	bic.w	r2, r2, #4
 80104c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	69d9      	ldr	r1, [r3, #28]
 80104cc:	68bb      	ldr	r3, [r7, #8]
 80104ce:	691a      	ldr	r2, [r3, #16]
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	430a      	orrs	r2, r1
 80104d6:	61da      	str	r2, [r3, #28]
      break;
 80104d8:	e064      	b.n	80105a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	68b9      	ldr	r1, [r7, #8]
 80104e0:	4618      	mov	r0, r3
 80104e2:	f000 fba9 	bl	8010c38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	69da      	ldr	r2, [r3, #28]
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80104f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	69da      	ldr	r2, [r3, #28]
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	69d9      	ldr	r1, [r3, #28]
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	691b      	ldr	r3, [r3, #16]
 8010510:	021a      	lsls	r2, r3, #8
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	430a      	orrs	r2, r1
 8010518:	61da      	str	r2, [r3, #28]
      break;
 801051a:	e043      	b.n	80105a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	68b9      	ldr	r1, [r7, #8]
 8010522:	4618      	mov	r0, r3
 8010524:	f000 fbf2 	bl	8010d0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	f042 0208 	orr.w	r2, r2, #8
 8010536:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	f022 0204 	bic.w	r2, r2, #4
 8010546:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	691a      	ldr	r2, [r3, #16]
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	430a      	orrs	r2, r1
 8010558:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801055a:	e023      	b.n	80105a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	68b9      	ldr	r1, [r7, #8]
 8010562:	4618      	mov	r0, r3
 8010564:	f000 fc36 	bl	8010dd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010576:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010586:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	691b      	ldr	r3, [r3, #16]
 8010592:	021a      	lsls	r2, r3, #8
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	430a      	orrs	r2, r1
 801059a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801059c:	e002      	b.n	80105a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801059e:	2301      	movs	r3, #1
 80105a0:	75fb      	strb	r3, [r7, #23]
      break;
 80105a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	2200      	movs	r2, #0
 80105a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80105ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	3718      	adds	r7, #24
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}
 80105b6:	bf00      	nop

080105b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80105b8:	b580      	push	{r7, lr}
 80105ba:	b084      	sub	sp, #16
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
 80105c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80105c2:	2300      	movs	r3, #0
 80105c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80105cc:	2b01      	cmp	r3, #1
 80105ce:	d101      	bne.n	80105d4 <HAL_TIM_ConfigClockSource+0x1c>
 80105d0:	2302      	movs	r3, #2
 80105d2:	e0dc      	b.n	801078e <HAL_TIM_ConfigClockSource+0x1d6>
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2201      	movs	r2, #1
 80105d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2202      	movs	r2, #2
 80105e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	689b      	ldr	r3, [r3, #8]
 80105ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80105ec:	68ba      	ldr	r2, [r7, #8]
 80105ee:	4b6a      	ldr	r3, [pc, #424]	; (8010798 <HAL_TIM_ConfigClockSource+0x1e0>)
 80105f0:	4013      	ands	r3, r2
 80105f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80105f4:	68bb      	ldr	r3, [r7, #8]
 80105f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80105fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	68ba      	ldr	r2, [r7, #8]
 8010602:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	4a64      	ldr	r2, [pc, #400]	; (801079c <HAL_TIM_ConfigClockSource+0x1e4>)
 801060a:	4293      	cmp	r3, r2
 801060c:	f000 80a9 	beq.w	8010762 <HAL_TIM_ConfigClockSource+0x1aa>
 8010610:	4a62      	ldr	r2, [pc, #392]	; (801079c <HAL_TIM_ConfigClockSource+0x1e4>)
 8010612:	4293      	cmp	r3, r2
 8010614:	f200 80ae 	bhi.w	8010774 <HAL_TIM_ConfigClockSource+0x1bc>
 8010618:	4a61      	ldr	r2, [pc, #388]	; (80107a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 801061a:	4293      	cmp	r3, r2
 801061c:	f000 80a1 	beq.w	8010762 <HAL_TIM_ConfigClockSource+0x1aa>
 8010620:	4a5f      	ldr	r2, [pc, #380]	; (80107a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8010622:	4293      	cmp	r3, r2
 8010624:	f200 80a6 	bhi.w	8010774 <HAL_TIM_ConfigClockSource+0x1bc>
 8010628:	4a5e      	ldr	r2, [pc, #376]	; (80107a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 801062a:	4293      	cmp	r3, r2
 801062c:	f000 8099 	beq.w	8010762 <HAL_TIM_ConfigClockSource+0x1aa>
 8010630:	4a5c      	ldr	r2, [pc, #368]	; (80107a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8010632:	4293      	cmp	r3, r2
 8010634:	f200 809e 	bhi.w	8010774 <HAL_TIM_ConfigClockSource+0x1bc>
 8010638:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801063c:	f000 8091 	beq.w	8010762 <HAL_TIM_ConfigClockSource+0x1aa>
 8010640:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010644:	f200 8096 	bhi.w	8010774 <HAL_TIM_ConfigClockSource+0x1bc>
 8010648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801064c:	f000 8089 	beq.w	8010762 <HAL_TIM_ConfigClockSource+0x1aa>
 8010650:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010654:	f200 808e 	bhi.w	8010774 <HAL_TIM_ConfigClockSource+0x1bc>
 8010658:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801065c:	d03e      	beq.n	80106dc <HAL_TIM_ConfigClockSource+0x124>
 801065e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010662:	f200 8087 	bhi.w	8010774 <HAL_TIM_ConfigClockSource+0x1bc>
 8010666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801066a:	f000 8086 	beq.w	801077a <HAL_TIM_ConfigClockSource+0x1c2>
 801066e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010672:	d87f      	bhi.n	8010774 <HAL_TIM_ConfigClockSource+0x1bc>
 8010674:	2b70      	cmp	r3, #112	; 0x70
 8010676:	d01a      	beq.n	80106ae <HAL_TIM_ConfigClockSource+0xf6>
 8010678:	2b70      	cmp	r3, #112	; 0x70
 801067a:	d87b      	bhi.n	8010774 <HAL_TIM_ConfigClockSource+0x1bc>
 801067c:	2b60      	cmp	r3, #96	; 0x60
 801067e:	d050      	beq.n	8010722 <HAL_TIM_ConfigClockSource+0x16a>
 8010680:	2b60      	cmp	r3, #96	; 0x60
 8010682:	d877      	bhi.n	8010774 <HAL_TIM_ConfigClockSource+0x1bc>
 8010684:	2b50      	cmp	r3, #80	; 0x50
 8010686:	d03c      	beq.n	8010702 <HAL_TIM_ConfigClockSource+0x14a>
 8010688:	2b50      	cmp	r3, #80	; 0x50
 801068a:	d873      	bhi.n	8010774 <HAL_TIM_ConfigClockSource+0x1bc>
 801068c:	2b40      	cmp	r3, #64	; 0x40
 801068e:	d058      	beq.n	8010742 <HAL_TIM_ConfigClockSource+0x18a>
 8010690:	2b40      	cmp	r3, #64	; 0x40
 8010692:	d86f      	bhi.n	8010774 <HAL_TIM_ConfigClockSource+0x1bc>
 8010694:	2b30      	cmp	r3, #48	; 0x30
 8010696:	d064      	beq.n	8010762 <HAL_TIM_ConfigClockSource+0x1aa>
 8010698:	2b30      	cmp	r3, #48	; 0x30
 801069a:	d86b      	bhi.n	8010774 <HAL_TIM_ConfigClockSource+0x1bc>
 801069c:	2b20      	cmp	r3, #32
 801069e:	d060      	beq.n	8010762 <HAL_TIM_ConfigClockSource+0x1aa>
 80106a0:	2b20      	cmp	r3, #32
 80106a2:	d867      	bhi.n	8010774 <HAL_TIM_ConfigClockSource+0x1bc>
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d05c      	beq.n	8010762 <HAL_TIM_ConfigClockSource+0x1aa>
 80106a8:	2b10      	cmp	r3, #16
 80106aa:	d05a      	beq.n	8010762 <HAL_TIM_ConfigClockSource+0x1aa>
 80106ac:	e062      	b.n	8010774 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6818      	ldr	r0, [r3, #0]
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	6899      	ldr	r1, [r3, #8]
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	685a      	ldr	r2, [r3, #4]
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	68db      	ldr	r3, [r3, #12]
 80106be:	f000 fc6d 	bl	8010f9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	689b      	ldr	r3, [r3, #8]
 80106c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80106d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	68ba      	ldr	r2, [r7, #8]
 80106d8:	609a      	str	r2, [r3, #8]
      break;
 80106da:	e04f      	b.n	801077c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	6818      	ldr	r0, [r3, #0]
 80106e0:	683b      	ldr	r3, [r7, #0]
 80106e2:	6899      	ldr	r1, [r3, #8]
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	685a      	ldr	r2, [r3, #4]
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	68db      	ldr	r3, [r3, #12]
 80106ec:	f000 fc56 	bl	8010f9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	689a      	ldr	r2, [r3, #8]
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80106fe:	609a      	str	r2, [r3, #8]
      break;
 8010700:	e03c      	b.n	801077c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	6818      	ldr	r0, [r3, #0]
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	6859      	ldr	r1, [r3, #4]
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	68db      	ldr	r3, [r3, #12]
 801070e:	461a      	mov	r2, r3
 8010710:	f000 fbc6 	bl	8010ea0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	2150      	movs	r1, #80	; 0x50
 801071a:	4618      	mov	r0, r3
 801071c:	f000 fc20 	bl	8010f60 <TIM_ITRx_SetConfig>
      break;
 8010720:	e02c      	b.n	801077c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6818      	ldr	r0, [r3, #0]
 8010726:	683b      	ldr	r3, [r7, #0]
 8010728:	6859      	ldr	r1, [r3, #4]
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	68db      	ldr	r3, [r3, #12]
 801072e:	461a      	mov	r2, r3
 8010730:	f000 fbe5 	bl	8010efe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	2160      	movs	r1, #96	; 0x60
 801073a:	4618      	mov	r0, r3
 801073c:	f000 fc10 	bl	8010f60 <TIM_ITRx_SetConfig>
      break;
 8010740:	e01c      	b.n	801077c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	6818      	ldr	r0, [r3, #0]
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	6859      	ldr	r1, [r3, #4]
 801074a:	683b      	ldr	r3, [r7, #0]
 801074c:	68db      	ldr	r3, [r3, #12]
 801074e:	461a      	mov	r2, r3
 8010750:	f000 fba6 	bl	8010ea0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	2140      	movs	r1, #64	; 0x40
 801075a:	4618      	mov	r0, r3
 801075c:	f000 fc00 	bl	8010f60 <TIM_ITRx_SetConfig>
      break;
 8010760:	e00c      	b.n	801077c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	681a      	ldr	r2, [r3, #0]
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	4619      	mov	r1, r3
 801076c:	4610      	mov	r0, r2
 801076e:	f000 fbf7 	bl	8010f60 <TIM_ITRx_SetConfig>
      break;
 8010772:	e003      	b.n	801077c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8010774:	2301      	movs	r3, #1
 8010776:	73fb      	strb	r3, [r7, #15]
      break;
 8010778:	e000      	b.n	801077c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801077a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	2201      	movs	r2, #1
 8010780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2200      	movs	r2, #0
 8010788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801078c:	7bfb      	ldrb	r3, [r7, #15]
}
 801078e:	4618      	mov	r0, r3
 8010790:	3710      	adds	r7, #16
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop
 8010798:	ffceff88 	.word	0xffceff88
 801079c:	00100040 	.word	0x00100040
 80107a0:	00100030 	.word	0x00100030
 80107a4:	00100020 	.word	0x00100020

080107a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80107a8:	b480      	push	{r7}
 80107aa:	b085      	sub	sp, #20
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	4a44      	ldr	r2, [pc, #272]	; (80108cc <TIM_Base_SetConfig+0x124>)
 80107bc:	4293      	cmp	r3, r2
 80107be:	d013      	beq.n	80107e8 <TIM_Base_SetConfig+0x40>
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80107c6:	d00f      	beq.n	80107e8 <TIM_Base_SetConfig+0x40>
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	4a41      	ldr	r2, [pc, #260]	; (80108d0 <TIM_Base_SetConfig+0x128>)
 80107cc:	4293      	cmp	r3, r2
 80107ce:	d00b      	beq.n	80107e8 <TIM_Base_SetConfig+0x40>
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	4a40      	ldr	r2, [pc, #256]	; (80108d4 <TIM_Base_SetConfig+0x12c>)
 80107d4:	4293      	cmp	r3, r2
 80107d6:	d007      	beq.n	80107e8 <TIM_Base_SetConfig+0x40>
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	4a3f      	ldr	r2, [pc, #252]	; (80108d8 <TIM_Base_SetConfig+0x130>)
 80107dc:	4293      	cmp	r3, r2
 80107de:	d003      	beq.n	80107e8 <TIM_Base_SetConfig+0x40>
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	4a3e      	ldr	r2, [pc, #248]	; (80108dc <TIM_Base_SetConfig+0x134>)
 80107e4:	4293      	cmp	r3, r2
 80107e6:	d108      	bne.n	80107fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80107ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	685b      	ldr	r3, [r3, #4]
 80107f4:	68fa      	ldr	r2, [r7, #12]
 80107f6:	4313      	orrs	r3, r2
 80107f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	4a33      	ldr	r2, [pc, #204]	; (80108cc <TIM_Base_SetConfig+0x124>)
 80107fe:	4293      	cmp	r3, r2
 8010800:	d027      	beq.n	8010852 <TIM_Base_SetConfig+0xaa>
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010808:	d023      	beq.n	8010852 <TIM_Base_SetConfig+0xaa>
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	4a30      	ldr	r2, [pc, #192]	; (80108d0 <TIM_Base_SetConfig+0x128>)
 801080e:	4293      	cmp	r3, r2
 8010810:	d01f      	beq.n	8010852 <TIM_Base_SetConfig+0xaa>
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	4a2f      	ldr	r2, [pc, #188]	; (80108d4 <TIM_Base_SetConfig+0x12c>)
 8010816:	4293      	cmp	r3, r2
 8010818:	d01b      	beq.n	8010852 <TIM_Base_SetConfig+0xaa>
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	4a2e      	ldr	r2, [pc, #184]	; (80108d8 <TIM_Base_SetConfig+0x130>)
 801081e:	4293      	cmp	r3, r2
 8010820:	d017      	beq.n	8010852 <TIM_Base_SetConfig+0xaa>
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	4a2d      	ldr	r2, [pc, #180]	; (80108dc <TIM_Base_SetConfig+0x134>)
 8010826:	4293      	cmp	r3, r2
 8010828:	d013      	beq.n	8010852 <TIM_Base_SetConfig+0xaa>
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	4a2c      	ldr	r2, [pc, #176]	; (80108e0 <TIM_Base_SetConfig+0x138>)
 801082e:	4293      	cmp	r3, r2
 8010830:	d00f      	beq.n	8010852 <TIM_Base_SetConfig+0xaa>
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	4a2b      	ldr	r2, [pc, #172]	; (80108e4 <TIM_Base_SetConfig+0x13c>)
 8010836:	4293      	cmp	r3, r2
 8010838:	d00b      	beq.n	8010852 <TIM_Base_SetConfig+0xaa>
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	4a2a      	ldr	r2, [pc, #168]	; (80108e8 <TIM_Base_SetConfig+0x140>)
 801083e:	4293      	cmp	r3, r2
 8010840:	d007      	beq.n	8010852 <TIM_Base_SetConfig+0xaa>
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	4a29      	ldr	r2, [pc, #164]	; (80108ec <TIM_Base_SetConfig+0x144>)
 8010846:	4293      	cmp	r3, r2
 8010848:	d003      	beq.n	8010852 <TIM_Base_SetConfig+0xaa>
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	4a28      	ldr	r2, [pc, #160]	; (80108f0 <TIM_Base_SetConfig+0x148>)
 801084e:	4293      	cmp	r3, r2
 8010850:	d108      	bne.n	8010864 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	68db      	ldr	r3, [r3, #12]
 801085e:	68fa      	ldr	r2, [r7, #12]
 8010860:	4313      	orrs	r3, r2
 8010862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	695b      	ldr	r3, [r3, #20]
 801086e:	4313      	orrs	r3, r2
 8010870:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	68fa      	ldr	r2, [r7, #12]
 8010876:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010878:	683b      	ldr	r3, [r7, #0]
 801087a:	689a      	ldr	r2, [r3, #8]
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	681a      	ldr	r2, [r3, #0]
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	4a10      	ldr	r2, [pc, #64]	; (80108cc <TIM_Base_SetConfig+0x124>)
 801088c:	4293      	cmp	r3, r2
 801088e:	d00f      	beq.n	80108b0 <TIM_Base_SetConfig+0x108>
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	4a12      	ldr	r2, [pc, #72]	; (80108dc <TIM_Base_SetConfig+0x134>)
 8010894:	4293      	cmp	r3, r2
 8010896:	d00b      	beq.n	80108b0 <TIM_Base_SetConfig+0x108>
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	4a11      	ldr	r2, [pc, #68]	; (80108e0 <TIM_Base_SetConfig+0x138>)
 801089c:	4293      	cmp	r3, r2
 801089e:	d007      	beq.n	80108b0 <TIM_Base_SetConfig+0x108>
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	4a10      	ldr	r2, [pc, #64]	; (80108e4 <TIM_Base_SetConfig+0x13c>)
 80108a4:	4293      	cmp	r3, r2
 80108a6:	d003      	beq.n	80108b0 <TIM_Base_SetConfig+0x108>
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	4a0f      	ldr	r2, [pc, #60]	; (80108e8 <TIM_Base_SetConfig+0x140>)
 80108ac:	4293      	cmp	r3, r2
 80108ae:	d103      	bne.n	80108b8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	691a      	ldr	r2, [r3, #16]
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	2201      	movs	r2, #1
 80108bc:	615a      	str	r2, [r3, #20]
}
 80108be:	bf00      	nop
 80108c0:	3714      	adds	r7, #20
 80108c2:	46bd      	mov	sp, r7
 80108c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c8:	4770      	bx	lr
 80108ca:	bf00      	nop
 80108cc:	40010000 	.word	0x40010000
 80108d0:	40000400 	.word	0x40000400
 80108d4:	40000800 	.word	0x40000800
 80108d8:	40000c00 	.word	0x40000c00
 80108dc:	40010400 	.word	0x40010400
 80108e0:	40014000 	.word	0x40014000
 80108e4:	40014400 	.word	0x40014400
 80108e8:	40014800 	.word	0x40014800
 80108ec:	4000e000 	.word	0x4000e000
 80108f0:	4000e400 	.word	0x4000e400

080108f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80108f4:	b480      	push	{r7}
 80108f6:	b087      	sub	sp, #28
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
 80108fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6a1b      	ldr	r3, [r3, #32]
 8010902:	f023 0201 	bic.w	r2, r3, #1
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	6a1b      	ldr	r3, [r3, #32]
 801090e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	685b      	ldr	r3, [r3, #4]
 8010914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	699b      	ldr	r3, [r3, #24]
 801091a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801091c:	68fa      	ldr	r2, [r7, #12]
 801091e:	4b37      	ldr	r3, [pc, #220]	; (80109fc <TIM_OC1_SetConfig+0x108>)
 8010920:	4013      	ands	r3, r2
 8010922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	f023 0303 	bic.w	r3, r3, #3
 801092a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	68fa      	ldr	r2, [r7, #12]
 8010932:	4313      	orrs	r3, r2
 8010934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	f023 0302 	bic.w	r3, r3, #2
 801093c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	689b      	ldr	r3, [r3, #8]
 8010942:	697a      	ldr	r2, [r7, #20]
 8010944:	4313      	orrs	r3, r2
 8010946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	4a2d      	ldr	r2, [pc, #180]	; (8010a00 <TIM_OC1_SetConfig+0x10c>)
 801094c:	4293      	cmp	r3, r2
 801094e:	d00f      	beq.n	8010970 <TIM_OC1_SetConfig+0x7c>
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	4a2c      	ldr	r2, [pc, #176]	; (8010a04 <TIM_OC1_SetConfig+0x110>)
 8010954:	4293      	cmp	r3, r2
 8010956:	d00b      	beq.n	8010970 <TIM_OC1_SetConfig+0x7c>
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	4a2b      	ldr	r2, [pc, #172]	; (8010a08 <TIM_OC1_SetConfig+0x114>)
 801095c:	4293      	cmp	r3, r2
 801095e:	d007      	beq.n	8010970 <TIM_OC1_SetConfig+0x7c>
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	4a2a      	ldr	r2, [pc, #168]	; (8010a0c <TIM_OC1_SetConfig+0x118>)
 8010964:	4293      	cmp	r3, r2
 8010966:	d003      	beq.n	8010970 <TIM_OC1_SetConfig+0x7c>
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	4a29      	ldr	r2, [pc, #164]	; (8010a10 <TIM_OC1_SetConfig+0x11c>)
 801096c:	4293      	cmp	r3, r2
 801096e:	d10c      	bne.n	801098a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	f023 0308 	bic.w	r3, r3, #8
 8010976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	68db      	ldr	r3, [r3, #12]
 801097c:	697a      	ldr	r2, [r7, #20]
 801097e:	4313      	orrs	r3, r2
 8010980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	f023 0304 	bic.w	r3, r3, #4
 8010988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	4a1c      	ldr	r2, [pc, #112]	; (8010a00 <TIM_OC1_SetConfig+0x10c>)
 801098e:	4293      	cmp	r3, r2
 8010990:	d00f      	beq.n	80109b2 <TIM_OC1_SetConfig+0xbe>
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	4a1b      	ldr	r2, [pc, #108]	; (8010a04 <TIM_OC1_SetConfig+0x110>)
 8010996:	4293      	cmp	r3, r2
 8010998:	d00b      	beq.n	80109b2 <TIM_OC1_SetConfig+0xbe>
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	4a1a      	ldr	r2, [pc, #104]	; (8010a08 <TIM_OC1_SetConfig+0x114>)
 801099e:	4293      	cmp	r3, r2
 80109a0:	d007      	beq.n	80109b2 <TIM_OC1_SetConfig+0xbe>
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	4a19      	ldr	r2, [pc, #100]	; (8010a0c <TIM_OC1_SetConfig+0x118>)
 80109a6:	4293      	cmp	r3, r2
 80109a8:	d003      	beq.n	80109b2 <TIM_OC1_SetConfig+0xbe>
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	4a18      	ldr	r2, [pc, #96]	; (8010a10 <TIM_OC1_SetConfig+0x11c>)
 80109ae:	4293      	cmp	r3, r2
 80109b0:	d111      	bne.n	80109d6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80109b2:	693b      	ldr	r3, [r7, #16]
 80109b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80109b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80109ba:	693b      	ldr	r3, [r7, #16]
 80109bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80109c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	695b      	ldr	r3, [r3, #20]
 80109c6:	693a      	ldr	r2, [r7, #16]
 80109c8:	4313      	orrs	r3, r2
 80109ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80109cc:	683b      	ldr	r3, [r7, #0]
 80109ce:	699b      	ldr	r3, [r3, #24]
 80109d0:	693a      	ldr	r2, [r7, #16]
 80109d2:	4313      	orrs	r3, r2
 80109d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	693a      	ldr	r2, [r7, #16]
 80109da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	68fa      	ldr	r2, [r7, #12]
 80109e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	685a      	ldr	r2, [r3, #4]
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	697a      	ldr	r2, [r7, #20]
 80109ee:	621a      	str	r2, [r3, #32]
}
 80109f0:	bf00      	nop
 80109f2:	371c      	adds	r7, #28
 80109f4:	46bd      	mov	sp, r7
 80109f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fa:	4770      	bx	lr
 80109fc:	fffeff8f 	.word	0xfffeff8f
 8010a00:	40010000 	.word	0x40010000
 8010a04:	40010400 	.word	0x40010400
 8010a08:	40014000 	.word	0x40014000
 8010a0c:	40014400 	.word	0x40014400
 8010a10:	40014800 	.word	0x40014800

08010a14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010a14:	b480      	push	{r7}
 8010a16:	b087      	sub	sp, #28
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
 8010a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	6a1b      	ldr	r3, [r3, #32]
 8010a22:	f023 0210 	bic.w	r2, r3, #16
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	6a1b      	ldr	r3, [r3, #32]
 8010a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	685b      	ldr	r3, [r3, #4]
 8010a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	699b      	ldr	r3, [r3, #24]
 8010a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010a3c:	68fa      	ldr	r2, [r7, #12]
 8010a3e:	4b34      	ldr	r3, [pc, #208]	; (8010b10 <TIM_OC2_SetConfig+0xfc>)
 8010a40:	4013      	ands	r3, r2
 8010a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010a4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010a4c:	683b      	ldr	r3, [r7, #0]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	021b      	lsls	r3, r3, #8
 8010a52:	68fa      	ldr	r2, [r7, #12]
 8010a54:	4313      	orrs	r3, r2
 8010a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010a58:	697b      	ldr	r3, [r7, #20]
 8010a5a:	f023 0320 	bic.w	r3, r3, #32
 8010a5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010a60:	683b      	ldr	r3, [r7, #0]
 8010a62:	689b      	ldr	r3, [r3, #8]
 8010a64:	011b      	lsls	r3, r3, #4
 8010a66:	697a      	ldr	r2, [r7, #20]
 8010a68:	4313      	orrs	r3, r2
 8010a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	4a29      	ldr	r2, [pc, #164]	; (8010b14 <TIM_OC2_SetConfig+0x100>)
 8010a70:	4293      	cmp	r3, r2
 8010a72:	d003      	beq.n	8010a7c <TIM_OC2_SetConfig+0x68>
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	4a28      	ldr	r2, [pc, #160]	; (8010b18 <TIM_OC2_SetConfig+0x104>)
 8010a78:	4293      	cmp	r3, r2
 8010a7a:	d10d      	bne.n	8010a98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010a7c:	697b      	ldr	r3, [r7, #20]
 8010a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010a84:	683b      	ldr	r3, [r7, #0]
 8010a86:	68db      	ldr	r3, [r3, #12]
 8010a88:	011b      	lsls	r3, r3, #4
 8010a8a:	697a      	ldr	r2, [r7, #20]
 8010a8c:	4313      	orrs	r3, r2
 8010a8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	4a1e      	ldr	r2, [pc, #120]	; (8010b14 <TIM_OC2_SetConfig+0x100>)
 8010a9c:	4293      	cmp	r3, r2
 8010a9e:	d00f      	beq.n	8010ac0 <TIM_OC2_SetConfig+0xac>
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	4a1d      	ldr	r2, [pc, #116]	; (8010b18 <TIM_OC2_SetConfig+0x104>)
 8010aa4:	4293      	cmp	r3, r2
 8010aa6:	d00b      	beq.n	8010ac0 <TIM_OC2_SetConfig+0xac>
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	4a1c      	ldr	r2, [pc, #112]	; (8010b1c <TIM_OC2_SetConfig+0x108>)
 8010aac:	4293      	cmp	r3, r2
 8010aae:	d007      	beq.n	8010ac0 <TIM_OC2_SetConfig+0xac>
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	4a1b      	ldr	r2, [pc, #108]	; (8010b20 <TIM_OC2_SetConfig+0x10c>)
 8010ab4:	4293      	cmp	r3, r2
 8010ab6:	d003      	beq.n	8010ac0 <TIM_OC2_SetConfig+0xac>
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	4a1a      	ldr	r2, [pc, #104]	; (8010b24 <TIM_OC2_SetConfig+0x110>)
 8010abc:	4293      	cmp	r3, r2
 8010abe:	d113      	bne.n	8010ae8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010ac0:	693b      	ldr	r3, [r7, #16]
 8010ac2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010ac6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010ac8:	693b      	ldr	r3, [r7, #16]
 8010aca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010ace:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	695b      	ldr	r3, [r3, #20]
 8010ad4:	009b      	lsls	r3, r3, #2
 8010ad6:	693a      	ldr	r2, [r7, #16]
 8010ad8:	4313      	orrs	r3, r2
 8010ada:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010adc:	683b      	ldr	r3, [r7, #0]
 8010ade:	699b      	ldr	r3, [r3, #24]
 8010ae0:	009b      	lsls	r3, r3, #2
 8010ae2:	693a      	ldr	r2, [r7, #16]
 8010ae4:	4313      	orrs	r3, r2
 8010ae6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	693a      	ldr	r2, [r7, #16]
 8010aec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	68fa      	ldr	r2, [r7, #12]
 8010af2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	685a      	ldr	r2, [r3, #4]
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	697a      	ldr	r2, [r7, #20]
 8010b00:	621a      	str	r2, [r3, #32]
}
 8010b02:	bf00      	nop
 8010b04:	371c      	adds	r7, #28
 8010b06:	46bd      	mov	sp, r7
 8010b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0c:	4770      	bx	lr
 8010b0e:	bf00      	nop
 8010b10:	feff8fff 	.word	0xfeff8fff
 8010b14:	40010000 	.word	0x40010000
 8010b18:	40010400 	.word	0x40010400
 8010b1c:	40014000 	.word	0x40014000
 8010b20:	40014400 	.word	0x40014400
 8010b24:	40014800 	.word	0x40014800

08010b28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010b28:	b480      	push	{r7}
 8010b2a:	b087      	sub	sp, #28
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
 8010b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	6a1b      	ldr	r3, [r3, #32]
 8010b36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	6a1b      	ldr	r3, [r3, #32]
 8010b42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	685b      	ldr	r3, [r3, #4]
 8010b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	69db      	ldr	r3, [r3, #28]
 8010b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010b50:	68fa      	ldr	r2, [r7, #12]
 8010b52:	4b33      	ldr	r3, [pc, #204]	; (8010c20 <TIM_OC3_SetConfig+0xf8>)
 8010b54:	4013      	ands	r3, r2
 8010b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	f023 0303 	bic.w	r3, r3, #3
 8010b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	68fa      	ldr	r2, [r7, #12]
 8010b66:	4313      	orrs	r3, r2
 8010b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	689b      	ldr	r3, [r3, #8]
 8010b76:	021b      	lsls	r3, r3, #8
 8010b78:	697a      	ldr	r2, [r7, #20]
 8010b7a:	4313      	orrs	r3, r2
 8010b7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	4a28      	ldr	r2, [pc, #160]	; (8010c24 <TIM_OC3_SetConfig+0xfc>)
 8010b82:	4293      	cmp	r3, r2
 8010b84:	d003      	beq.n	8010b8e <TIM_OC3_SetConfig+0x66>
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	4a27      	ldr	r2, [pc, #156]	; (8010c28 <TIM_OC3_SetConfig+0x100>)
 8010b8a:	4293      	cmp	r3, r2
 8010b8c:	d10d      	bne.n	8010baa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010b8e:	697b      	ldr	r3, [r7, #20]
 8010b90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010b94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	68db      	ldr	r3, [r3, #12]
 8010b9a:	021b      	lsls	r3, r3, #8
 8010b9c:	697a      	ldr	r2, [r7, #20]
 8010b9e:	4313      	orrs	r3, r2
 8010ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010ba2:	697b      	ldr	r3, [r7, #20]
 8010ba4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	4a1d      	ldr	r2, [pc, #116]	; (8010c24 <TIM_OC3_SetConfig+0xfc>)
 8010bae:	4293      	cmp	r3, r2
 8010bb0:	d00f      	beq.n	8010bd2 <TIM_OC3_SetConfig+0xaa>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	4a1c      	ldr	r2, [pc, #112]	; (8010c28 <TIM_OC3_SetConfig+0x100>)
 8010bb6:	4293      	cmp	r3, r2
 8010bb8:	d00b      	beq.n	8010bd2 <TIM_OC3_SetConfig+0xaa>
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	4a1b      	ldr	r2, [pc, #108]	; (8010c2c <TIM_OC3_SetConfig+0x104>)
 8010bbe:	4293      	cmp	r3, r2
 8010bc0:	d007      	beq.n	8010bd2 <TIM_OC3_SetConfig+0xaa>
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	4a1a      	ldr	r2, [pc, #104]	; (8010c30 <TIM_OC3_SetConfig+0x108>)
 8010bc6:	4293      	cmp	r3, r2
 8010bc8:	d003      	beq.n	8010bd2 <TIM_OC3_SetConfig+0xaa>
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	4a19      	ldr	r2, [pc, #100]	; (8010c34 <TIM_OC3_SetConfig+0x10c>)
 8010bce:	4293      	cmp	r3, r2
 8010bd0:	d113      	bne.n	8010bfa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010bd2:	693b      	ldr	r3, [r7, #16]
 8010bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010bda:	693b      	ldr	r3, [r7, #16]
 8010bdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010be2:	683b      	ldr	r3, [r7, #0]
 8010be4:	695b      	ldr	r3, [r3, #20]
 8010be6:	011b      	lsls	r3, r3, #4
 8010be8:	693a      	ldr	r2, [r7, #16]
 8010bea:	4313      	orrs	r3, r2
 8010bec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	699b      	ldr	r3, [r3, #24]
 8010bf2:	011b      	lsls	r3, r3, #4
 8010bf4:	693a      	ldr	r2, [r7, #16]
 8010bf6:	4313      	orrs	r3, r2
 8010bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	693a      	ldr	r2, [r7, #16]
 8010bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	68fa      	ldr	r2, [r7, #12]
 8010c04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010c06:	683b      	ldr	r3, [r7, #0]
 8010c08:	685a      	ldr	r2, [r3, #4]
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	697a      	ldr	r2, [r7, #20]
 8010c12:	621a      	str	r2, [r3, #32]
}
 8010c14:	bf00      	nop
 8010c16:	371c      	adds	r7, #28
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1e:	4770      	bx	lr
 8010c20:	fffeff8f 	.word	0xfffeff8f
 8010c24:	40010000 	.word	0x40010000
 8010c28:	40010400 	.word	0x40010400
 8010c2c:	40014000 	.word	0x40014000
 8010c30:	40014400 	.word	0x40014400
 8010c34:	40014800 	.word	0x40014800

08010c38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010c38:	b480      	push	{r7}
 8010c3a:	b087      	sub	sp, #28
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
 8010c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	6a1b      	ldr	r3, [r3, #32]
 8010c46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	6a1b      	ldr	r3, [r3, #32]
 8010c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	69db      	ldr	r3, [r3, #28]
 8010c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010c60:	68fa      	ldr	r2, [r7, #12]
 8010c62:	4b24      	ldr	r3, [pc, #144]	; (8010cf4 <TIM_OC4_SetConfig+0xbc>)
 8010c64:	4013      	ands	r3, r2
 8010c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010c6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	021b      	lsls	r3, r3, #8
 8010c76:	68fa      	ldr	r2, [r7, #12]
 8010c78:	4313      	orrs	r3, r2
 8010c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010c7c:	693b      	ldr	r3, [r7, #16]
 8010c7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010c82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	689b      	ldr	r3, [r3, #8]
 8010c88:	031b      	lsls	r3, r3, #12
 8010c8a:	693a      	ldr	r2, [r7, #16]
 8010c8c:	4313      	orrs	r3, r2
 8010c8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	4a19      	ldr	r2, [pc, #100]	; (8010cf8 <TIM_OC4_SetConfig+0xc0>)
 8010c94:	4293      	cmp	r3, r2
 8010c96:	d00f      	beq.n	8010cb8 <TIM_OC4_SetConfig+0x80>
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	4a18      	ldr	r2, [pc, #96]	; (8010cfc <TIM_OC4_SetConfig+0xc4>)
 8010c9c:	4293      	cmp	r3, r2
 8010c9e:	d00b      	beq.n	8010cb8 <TIM_OC4_SetConfig+0x80>
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	4a17      	ldr	r2, [pc, #92]	; (8010d00 <TIM_OC4_SetConfig+0xc8>)
 8010ca4:	4293      	cmp	r3, r2
 8010ca6:	d007      	beq.n	8010cb8 <TIM_OC4_SetConfig+0x80>
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	4a16      	ldr	r2, [pc, #88]	; (8010d04 <TIM_OC4_SetConfig+0xcc>)
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d003      	beq.n	8010cb8 <TIM_OC4_SetConfig+0x80>
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	4a15      	ldr	r2, [pc, #84]	; (8010d08 <TIM_OC4_SetConfig+0xd0>)
 8010cb4:	4293      	cmp	r3, r2
 8010cb6:	d109      	bne.n	8010ccc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010cbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	695b      	ldr	r3, [r3, #20]
 8010cc4:	019b      	lsls	r3, r3, #6
 8010cc6:	697a      	ldr	r2, [r7, #20]
 8010cc8:	4313      	orrs	r3, r2
 8010cca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	697a      	ldr	r2, [r7, #20]
 8010cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	68fa      	ldr	r2, [r7, #12]
 8010cd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010cd8:	683b      	ldr	r3, [r7, #0]
 8010cda:	685a      	ldr	r2, [r3, #4]
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	693a      	ldr	r2, [r7, #16]
 8010ce4:	621a      	str	r2, [r3, #32]
}
 8010ce6:	bf00      	nop
 8010ce8:	371c      	adds	r7, #28
 8010cea:	46bd      	mov	sp, r7
 8010cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf0:	4770      	bx	lr
 8010cf2:	bf00      	nop
 8010cf4:	feff8fff 	.word	0xfeff8fff
 8010cf8:	40010000 	.word	0x40010000
 8010cfc:	40010400 	.word	0x40010400
 8010d00:	40014000 	.word	0x40014000
 8010d04:	40014400 	.word	0x40014400
 8010d08:	40014800 	.word	0x40014800

08010d0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b087      	sub	sp, #28
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	6a1b      	ldr	r3, [r3, #32]
 8010d1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	6a1b      	ldr	r3, [r3, #32]
 8010d26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	685b      	ldr	r3, [r3, #4]
 8010d2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010d34:	68fa      	ldr	r2, [r7, #12]
 8010d36:	4b21      	ldr	r3, [pc, #132]	; (8010dbc <TIM_OC5_SetConfig+0xb0>)
 8010d38:	4013      	ands	r3, r2
 8010d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	68fa      	ldr	r2, [r7, #12]
 8010d42:	4313      	orrs	r3, r2
 8010d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010d46:	693b      	ldr	r3, [r7, #16]
 8010d48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010d4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010d4e:	683b      	ldr	r3, [r7, #0]
 8010d50:	689b      	ldr	r3, [r3, #8]
 8010d52:	041b      	lsls	r3, r3, #16
 8010d54:	693a      	ldr	r2, [r7, #16]
 8010d56:	4313      	orrs	r3, r2
 8010d58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	4a18      	ldr	r2, [pc, #96]	; (8010dc0 <TIM_OC5_SetConfig+0xb4>)
 8010d5e:	4293      	cmp	r3, r2
 8010d60:	d00f      	beq.n	8010d82 <TIM_OC5_SetConfig+0x76>
 8010d62:	687b      	ldr	r3, [r7, #4]
 8010d64:	4a17      	ldr	r2, [pc, #92]	; (8010dc4 <TIM_OC5_SetConfig+0xb8>)
 8010d66:	4293      	cmp	r3, r2
 8010d68:	d00b      	beq.n	8010d82 <TIM_OC5_SetConfig+0x76>
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	4a16      	ldr	r2, [pc, #88]	; (8010dc8 <TIM_OC5_SetConfig+0xbc>)
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	d007      	beq.n	8010d82 <TIM_OC5_SetConfig+0x76>
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	4a15      	ldr	r2, [pc, #84]	; (8010dcc <TIM_OC5_SetConfig+0xc0>)
 8010d76:	4293      	cmp	r3, r2
 8010d78:	d003      	beq.n	8010d82 <TIM_OC5_SetConfig+0x76>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	4a14      	ldr	r2, [pc, #80]	; (8010dd0 <TIM_OC5_SetConfig+0xc4>)
 8010d7e:	4293      	cmp	r3, r2
 8010d80:	d109      	bne.n	8010d96 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010d88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010d8a:	683b      	ldr	r3, [r7, #0]
 8010d8c:	695b      	ldr	r3, [r3, #20]
 8010d8e:	021b      	lsls	r3, r3, #8
 8010d90:	697a      	ldr	r2, [r7, #20]
 8010d92:	4313      	orrs	r3, r2
 8010d94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	697a      	ldr	r2, [r7, #20]
 8010d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	68fa      	ldr	r2, [r7, #12]
 8010da0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	685a      	ldr	r2, [r3, #4]
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	693a      	ldr	r2, [r7, #16]
 8010dae:	621a      	str	r2, [r3, #32]
}
 8010db0:	bf00      	nop
 8010db2:	371c      	adds	r7, #28
 8010db4:	46bd      	mov	sp, r7
 8010db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dba:	4770      	bx	lr
 8010dbc:	fffeff8f 	.word	0xfffeff8f
 8010dc0:	40010000 	.word	0x40010000
 8010dc4:	40010400 	.word	0x40010400
 8010dc8:	40014000 	.word	0x40014000
 8010dcc:	40014400 	.word	0x40014400
 8010dd0:	40014800 	.word	0x40014800

08010dd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010dd4:	b480      	push	{r7}
 8010dd6:	b087      	sub	sp, #28
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	6a1b      	ldr	r3, [r3, #32]
 8010de2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6a1b      	ldr	r3, [r3, #32]
 8010dee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	685b      	ldr	r3, [r3, #4]
 8010df4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010dfc:	68fa      	ldr	r2, [r7, #12]
 8010dfe:	4b22      	ldr	r3, [pc, #136]	; (8010e88 <TIM_OC6_SetConfig+0xb4>)
 8010e00:	4013      	ands	r3, r2
 8010e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	021b      	lsls	r3, r3, #8
 8010e0a:	68fa      	ldr	r2, [r7, #12]
 8010e0c:	4313      	orrs	r3, r2
 8010e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010e10:	693b      	ldr	r3, [r7, #16]
 8010e12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010e16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010e18:	683b      	ldr	r3, [r7, #0]
 8010e1a:	689b      	ldr	r3, [r3, #8]
 8010e1c:	051b      	lsls	r3, r3, #20
 8010e1e:	693a      	ldr	r2, [r7, #16]
 8010e20:	4313      	orrs	r3, r2
 8010e22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	4a19      	ldr	r2, [pc, #100]	; (8010e8c <TIM_OC6_SetConfig+0xb8>)
 8010e28:	4293      	cmp	r3, r2
 8010e2a:	d00f      	beq.n	8010e4c <TIM_OC6_SetConfig+0x78>
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	4a18      	ldr	r2, [pc, #96]	; (8010e90 <TIM_OC6_SetConfig+0xbc>)
 8010e30:	4293      	cmp	r3, r2
 8010e32:	d00b      	beq.n	8010e4c <TIM_OC6_SetConfig+0x78>
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	4a17      	ldr	r2, [pc, #92]	; (8010e94 <TIM_OC6_SetConfig+0xc0>)
 8010e38:	4293      	cmp	r3, r2
 8010e3a:	d007      	beq.n	8010e4c <TIM_OC6_SetConfig+0x78>
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	4a16      	ldr	r2, [pc, #88]	; (8010e98 <TIM_OC6_SetConfig+0xc4>)
 8010e40:	4293      	cmp	r3, r2
 8010e42:	d003      	beq.n	8010e4c <TIM_OC6_SetConfig+0x78>
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	4a15      	ldr	r2, [pc, #84]	; (8010e9c <TIM_OC6_SetConfig+0xc8>)
 8010e48:	4293      	cmp	r3, r2
 8010e4a:	d109      	bne.n	8010e60 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010e4c:	697b      	ldr	r3, [r7, #20]
 8010e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010e52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	695b      	ldr	r3, [r3, #20]
 8010e58:	029b      	lsls	r3, r3, #10
 8010e5a:	697a      	ldr	r2, [r7, #20]
 8010e5c:	4313      	orrs	r3, r2
 8010e5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	697a      	ldr	r2, [r7, #20]
 8010e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	68fa      	ldr	r2, [r7, #12]
 8010e6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	685a      	ldr	r2, [r3, #4]
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	693a      	ldr	r2, [r7, #16]
 8010e78:	621a      	str	r2, [r3, #32]
}
 8010e7a:	bf00      	nop
 8010e7c:	371c      	adds	r7, #28
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e84:	4770      	bx	lr
 8010e86:	bf00      	nop
 8010e88:	feff8fff 	.word	0xfeff8fff
 8010e8c:	40010000 	.word	0x40010000
 8010e90:	40010400 	.word	0x40010400
 8010e94:	40014000 	.word	0x40014000
 8010e98:	40014400 	.word	0x40014400
 8010e9c:	40014800 	.word	0x40014800

08010ea0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010ea0:	b480      	push	{r7}
 8010ea2:	b087      	sub	sp, #28
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	60f8      	str	r0, [r7, #12]
 8010ea8:	60b9      	str	r1, [r7, #8]
 8010eaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	6a1b      	ldr	r3, [r3, #32]
 8010eb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	6a1b      	ldr	r3, [r3, #32]
 8010eb6:	f023 0201 	bic.w	r2, r3, #1
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	699b      	ldr	r3, [r3, #24]
 8010ec2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010ec4:	693b      	ldr	r3, [r7, #16]
 8010ec6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8010eca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	011b      	lsls	r3, r3, #4
 8010ed0:	693a      	ldr	r2, [r7, #16]
 8010ed2:	4313      	orrs	r3, r2
 8010ed4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010ed6:	697b      	ldr	r3, [r7, #20]
 8010ed8:	f023 030a 	bic.w	r3, r3, #10
 8010edc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8010ede:	697a      	ldr	r2, [r7, #20]
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	4313      	orrs	r3, r2
 8010ee4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	693a      	ldr	r2, [r7, #16]
 8010eea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	697a      	ldr	r2, [r7, #20]
 8010ef0:	621a      	str	r2, [r3, #32]
}
 8010ef2:	bf00      	nop
 8010ef4:	371c      	adds	r7, #28
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efc:	4770      	bx	lr

08010efe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8010efe:	b480      	push	{r7}
 8010f00:	b087      	sub	sp, #28
 8010f02:	af00      	add	r7, sp, #0
 8010f04:	60f8      	str	r0, [r7, #12]
 8010f06:	60b9      	str	r1, [r7, #8]
 8010f08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	6a1b      	ldr	r3, [r3, #32]
 8010f0e:	f023 0210 	bic.w	r2, r3, #16
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	699b      	ldr	r3, [r3, #24]
 8010f1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	6a1b      	ldr	r3, [r3, #32]
 8010f20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010f22:	697b      	ldr	r3, [r7, #20]
 8010f24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8010f28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	031b      	lsls	r3, r3, #12
 8010f2e:	697a      	ldr	r2, [r7, #20]
 8010f30:	4313      	orrs	r3, r2
 8010f32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010f34:	693b      	ldr	r3, [r7, #16]
 8010f36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010f3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8010f3c:	68bb      	ldr	r3, [r7, #8]
 8010f3e:	011b      	lsls	r3, r3, #4
 8010f40:	693a      	ldr	r2, [r7, #16]
 8010f42:	4313      	orrs	r3, r2
 8010f44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	697a      	ldr	r2, [r7, #20]
 8010f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	693a      	ldr	r2, [r7, #16]
 8010f50:	621a      	str	r2, [r3, #32]
}
 8010f52:	bf00      	nop
 8010f54:	371c      	adds	r7, #28
 8010f56:	46bd      	mov	sp, r7
 8010f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5c:	4770      	bx	lr
	...

08010f60 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8010f60:	b480      	push	{r7}
 8010f62:	b085      	sub	sp, #20
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
 8010f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	689b      	ldr	r3, [r3, #8]
 8010f6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8010f70:	68fa      	ldr	r2, [r7, #12]
 8010f72:	4b09      	ldr	r3, [pc, #36]	; (8010f98 <TIM_ITRx_SetConfig+0x38>)
 8010f74:	4013      	ands	r3, r2
 8010f76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8010f78:	683a      	ldr	r2, [r7, #0]
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	4313      	orrs	r3, r2
 8010f7e:	f043 0307 	orr.w	r3, r3, #7
 8010f82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	68fa      	ldr	r2, [r7, #12]
 8010f88:	609a      	str	r2, [r3, #8]
}
 8010f8a:	bf00      	nop
 8010f8c:	3714      	adds	r7, #20
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f94:	4770      	bx	lr
 8010f96:	bf00      	nop
 8010f98:	ffcfff8f 	.word	0xffcfff8f

08010f9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8010f9c:	b480      	push	{r7}
 8010f9e:	b087      	sub	sp, #28
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	60f8      	str	r0, [r7, #12]
 8010fa4:	60b9      	str	r1, [r7, #8]
 8010fa6:	607a      	str	r2, [r7, #4]
 8010fa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	689b      	ldr	r3, [r3, #8]
 8010fae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010fb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8010fb8:	683b      	ldr	r3, [r7, #0]
 8010fba:	021a      	lsls	r2, r3, #8
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	431a      	orrs	r2, r3
 8010fc0:	68bb      	ldr	r3, [r7, #8]
 8010fc2:	4313      	orrs	r3, r2
 8010fc4:	697a      	ldr	r2, [r7, #20]
 8010fc6:	4313      	orrs	r3, r2
 8010fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	697a      	ldr	r2, [r7, #20]
 8010fce:	609a      	str	r2, [r3, #8]
}
 8010fd0:	bf00      	nop
 8010fd2:	371c      	adds	r7, #28
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fda:	4770      	bx	lr

08010fdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010fdc:	b480      	push	{r7}
 8010fde:	b087      	sub	sp, #28
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	60f8      	str	r0, [r7, #12]
 8010fe4:	60b9      	str	r1, [r7, #8]
 8010fe6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010fe8:	68bb      	ldr	r3, [r7, #8]
 8010fea:	f003 031f 	and.w	r3, r3, #31
 8010fee:	2201      	movs	r2, #1
 8010ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8010ff4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	6a1a      	ldr	r2, [r3, #32]
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	43db      	mvns	r3, r3
 8010ffe:	401a      	ands	r2, r3
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	6a1a      	ldr	r2, [r3, #32]
 8011008:	68bb      	ldr	r3, [r7, #8]
 801100a:	f003 031f 	and.w	r3, r3, #31
 801100e:	6879      	ldr	r1, [r7, #4]
 8011010:	fa01 f303 	lsl.w	r3, r1, r3
 8011014:	431a      	orrs	r2, r3
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	621a      	str	r2, [r3, #32]
}
 801101a:	bf00      	nop
 801101c:	371c      	adds	r7, #28
 801101e:	46bd      	mov	sp, r7
 8011020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011024:	4770      	bx	lr
	...

08011028 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011028:	b480      	push	{r7}
 801102a:	b085      	sub	sp, #20
 801102c:	af00      	add	r7, sp, #0
 801102e:	6078      	str	r0, [r7, #4]
 8011030:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011038:	2b01      	cmp	r3, #1
 801103a:	d101      	bne.n	8011040 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801103c:	2302      	movs	r3, #2
 801103e:	e077      	b.n	8011130 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2201      	movs	r2, #1
 8011044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	2202      	movs	r2, #2
 801104c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	685b      	ldr	r3, [r3, #4]
 8011056:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	689b      	ldr	r3, [r3, #8]
 801105e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	4a35      	ldr	r2, [pc, #212]	; (801113c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011066:	4293      	cmp	r3, r2
 8011068:	d004      	beq.n	8011074 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	4a34      	ldr	r2, [pc, #208]	; (8011140 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011070:	4293      	cmp	r3, r2
 8011072:	d108      	bne.n	8011086 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801107a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	685b      	ldr	r3, [r3, #4]
 8011080:	68fa      	ldr	r2, [r7, #12]
 8011082:	4313      	orrs	r3, r2
 8011084:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801108c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801108e:	683b      	ldr	r3, [r7, #0]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	68fa      	ldr	r2, [r7, #12]
 8011094:	4313      	orrs	r3, r2
 8011096:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	68fa      	ldr	r2, [r7, #12]
 801109e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	4a25      	ldr	r2, [pc, #148]	; (801113c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80110a6:	4293      	cmp	r3, r2
 80110a8:	d02c      	beq.n	8011104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80110b2:	d027      	beq.n	8011104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	4a22      	ldr	r2, [pc, #136]	; (8011144 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80110ba:	4293      	cmp	r3, r2
 80110bc:	d022      	beq.n	8011104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	4a21      	ldr	r2, [pc, #132]	; (8011148 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80110c4:	4293      	cmp	r3, r2
 80110c6:	d01d      	beq.n	8011104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	4a1f      	ldr	r2, [pc, #124]	; (801114c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80110ce:	4293      	cmp	r3, r2
 80110d0:	d018      	beq.n	8011104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	4a1a      	ldr	r2, [pc, #104]	; (8011140 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80110d8:	4293      	cmp	r3, r2
 80110da:	d013      	beq.n	8011104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	4a1b      	ldr	r2, [pc, #108]	; (8011150 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80110e2:	4293      	cmp	r3, r2
 80110e4:	d00e      	beq.n	8011104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	4a1a      	ldr	r2, [pc, #104]	; (8011154 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80110ec:	4293      	cmp	r3, r2
 80110ee:	d009      	beq.n	8011104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	4a18      	ldr	r2, [pc, #96]	; (8011158 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80110f6:	4293      	cmp	r3, r2
 80110f8:	d004      	beq.n	8011104 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	4a17      	ldr	r2, [pc, #92]	; (801115c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011100:	4293      	cmp	r3, r2
 8011102:	d10c      	bne.n	801111e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011104:	68bb      	ldr	r3, [r7, #8]
 8011106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801110a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	689b      	ldr	r3, [r3, #8]
 8011110:	68ba      	ldr	r2, [r7, #8]
 8011112:	4313      	orrs	r3, r2
 8011114:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	68ba      	ldr	r2, [r7, #8]
 801111c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2201      	movs	r2, #1
 8011122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	2200      	movs	r2, #0
 801112a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801112e:	2300      	movs	r3, #0
}
 8011130:	4618      	mov	r0, r3
 8011132:	3714      	adds	r7, #20
 8011134:	46bd      	mov	sp, r7
 8011136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113a:	4770      	bx	lr
 801113c:	40010000 	.word	0x40010000
 8011140:	40010400 	.word	0x40010400
 8011144:	40000400 	.word	0x40000400
 8011148:	40000800 	.word	0x40000800
 801114c:	40000c00 	.word	0x40000c00
 8011150:	40001800 	.word	0x40001800
 8011154:	40014000 	.word	0x40014000
 8011158:	4000e000 	.word	0x4000e000
 801115c:	4000e400 	.word	0x4000e400

08011160 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011160:	b480      	push	{r7}
 8011162:	b085      	sub	sp, #20
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
 8011168:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801116a:	2300      	movs	r3, #0
 801116c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011174:	2b01      	cmp	r3, #1
 8011176:	d101      	bne.n	801117c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011178:	2302      	movs	r3, #2
 801117a:	e087      	b.n	801128c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2201      	movs	r2, #1
 8011180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801118a:	683b      	ldr	r3, [r7, #0]
 801118c:	68db      	ldr	r3, [r3, #12]
 801118e:	4313      	orrs	r3, r2
 8011190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	689b      	ldr	r3, [r3, #8]
 801119c:	4313      	orrs	r3, r2
 801119e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	685b      	ldr	r3, [r3, #4]
 80111aa:	4313      	orrs	r3, r2
 80111ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	4313      	orrs	r3, r2
 80111ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	691b      	ldr	r3, [r3, #16]
 80111c6:	4313      	orrs	r3, r2
 80111c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80111d0:	683b      	ldr	r3, [r7, #0]
 80111d2:	695b      	ldr	r3, [r3, #20]
 80111d4:	4313      	orrs	r3, r2
 80111d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111e2:	4313      	orrs	r3, r2
 80111e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	699b      	ldr	r3, [r3, #24]
 80111f0:	041b      	lsls	r3, r3, #16
 80111f2:	4313      	orrs	r3, r2
 80111f4:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	4a27      	ldr	r2, [pc, #156]	; (8011298 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80111fc:	4293      	cmp	r3, r2
 80111fe:	d004      	beq.n	801120a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	4a25      	ldr	r2, [pc, #148]	; (801129c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8011206:	4293      	cmp	r3, r2
 8011208:	d106      	bne.n	8011218 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8011210:	683b      	ldr	r3, [r7, #0]
 8011212:	69db      	ldr	r3, [r3, #28]
 8011214:	4313      	orrs	r3, r2
 8011216:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	4a1e      	ldr	r2, [pc, #120]	; (8011298 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801121e:	4293      	cmp	r3, r2
 8011220:	d004      	beq.n	801122c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	4a1d      	ldr	r2, [pc, #116]	; (801129c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8011228:	4293      	cmp	r3, r2
 801122a:	d126      	bne.n	801127a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011236:	051b      	lsls	r3, r3, #20
 8011238:	4313      	orrs	r3, r2
 801123a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	6a1b      	ldr	r3, [r3, #32]
 8011246:	4313      	orrs	r3, r2
 8011248:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011254:	4313      	orrs	r3, r2
 8011256:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	4a0e      	ldr	r2, [pc, #56]	; (8011298 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801125e:	4293      	cmp	r3, r2
 8011260:	d004      	beq.n	801126c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	4a0d      	ldr	r2, [pc, #52]	; (801129c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8011268:	4293      	cmp	r3, r2
 801126a:	d106      	bne.n	801127a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8011272:	683b      	ldr	r3, [r7, #0]
 8011274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011276:	4313      	orrs	r3, r2
 8011278:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	68fa      	ldr	r2, [r7, #12]
 8011280:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	2200      	movs	r2, #0
 8011286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801128a:	2300      	movs	r3, #0
}
 801128c:	4618      	mov	r0, r3
 801128e:	3714      	adds	r7, #20
 8011290:	46bd      	mov	sp, r7
 8011292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011296:	4770      	bx	lr
 8011298:	40010000 	.word	0x40010000
 801129c:	40010400 	.word	0x40010400

080112a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b082      	sub	sp, #8
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d101      	bne.n	80112b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80112ae:	2301      	movs	r3, #1
 80112b0:	e042      	b.n	8011338 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d106      	bne.n	80112ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	2200      	movs	r2, #0
 80112c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f7f8 fd8f 	bl	8009de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	2224      	movs	r2, #36	; 0x24
 80112ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	681a      	ldr	r2, [r3, #0]
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	f022 0201 	bic.w	r2, r2, #1
 80112e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80112e2:	6878      	ldr	r0, [r7, #4]
 80112e4:	f000 fe48 	bl	8011f78 <UART_SetConfig>
 80112e8:	4603      	mov	r3, r0
 80112ea:	2b01      	cmp	r3, #1
 80112ec:	d101      	bne.n	80112f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80112ee:	2301      	movs	r3, #1
 80112f0:	e022      	b.n	8011338 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d002      	beq.n	8011300 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80112fa:	6878      	ldr	r0, [r7, #4]
 80112fc:	f001 fc9a 	bl	8012c34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	685a      	ldr	r2, [r3, #4]
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801130e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	689a      	ldr	r2, [r3, #8]
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801131e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	681a      	ldr	r2, [r3, #0]
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	f042 0201 	orr.w	r2, r2, #1
 801132e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011330:	6878      	ldr	r0, [r7, #4]
 8011332:	f001 fd21 	bl	8012d78 <UART_CheckIdleState>
 8011336:	4603      	mov	r3, r0
}
 8011338:	4618      	mov	r0, r3
 801133a:	3708      	adds	r7, #8
 801133c:	46bd      	mov	sp, r7
 801133e:	bd80      	pop	{r7, pc}

08011340 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b08a      	sub	sp, #40	; 0x28
 8011344:	af02      	add	r7, sp, #8
 8011346:	60f8      	str	r0, [r7, #12]
 8011348:	60b9      	str	r1, [r7, #8]
 801134a:	603b      	str	r3, [r7, #0]
 801134c:	4613      	mov	r3, r2
 801134e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011356:	2b20      	cmp	r3, #32
 8011358:	f040 8083 	bne.w	8011462 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 801135c:	68bb      	ldr	r3, [r7, #8]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d002      	beq.n	8011368 <HAL_UART_Transmit+0x28>
 8011362:	88fb      	ldrh	r3, [r7, #6]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d101      	bne.n	801136c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8011368:	2301      	movs	r3, #1
 801136a:	e07b      	b.n	8011464 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011372:	2b01      	cmp	r3, #1
 8011374:	d101      	bne.n	801137a <HAL_UART_Transmit+0x3a>
 8011376:	2302      	movs	r3, #2
 8011378:	e074      	b.n	8011464 <HAL_UART_Transmit+0x124>
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	2201      	movs	r2, #1
 801137e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	2200      	movs	r2, #0
 8011386:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	2221      	movs	r2, #33	; 0x21
 801138e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011392:	f7f8 ff2b 	bl	800a1ec <HAL_GetTick>
 8011396:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	88fa      	ldrh	r2, [r7, #6]
 801139c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	88fa      	ldrh	r2, [r7, #6]
 80113a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	689b      	ldr	r3, [r3, #8]
 80113ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80113b0:	d108      	bne.n	80113c4 <HAL_UART_Transmit+0x84>
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	691b      	ldr	r3, [r3, #16]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d104      	bne.n	80113c4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80113ba:	2300      	movs	r3, #0
 80113bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80113be:	68bb      	ldr	r3, [r7, #8]
 80113c0:	61bb      	str	r3, [r7, #24]
 80113c2:	e003      	b.n	80113cc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80113c4:	68bb      	ldr	r3, [r7, #8]
 80113c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80113c8:	2300      	movs	r3, #0
 80113ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	2200      	movs	r2, #0
 80113d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80113d4:	e02c      	b.n	8011430 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	9300      	str	r3, [sp, #0]
 80113da:	697b      	ldr	r3, [r7, #20]
 80113dc:	2200      	movs	r2, #0
 80113de:	2180      	movs	r1, #128	; 0x80
 80113e0:	68f8      	ldr	r0, [r7, #12]
 80113e2:	f001 fd14 	bl	8012e0e <UART_WaitOnFlagUntilTimeout>
 80113e6:	4603      	mov	r3, r0
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d001      	beq.n	80113f0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80113ec:	2303      	movs	r3, #3
 80113ee:	e039      	b.n	8011464 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80113f0:	69fb      	ldr	r3, [r7, #28]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d10b      	bne.n	801140e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80113f6:	69bb      	ldr	r3, [r7, #24]
 80113f8:	881b      	ldrh	r3, [r3, #0]
 80113fa:	461a      	mov	r2, r3
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011404:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8011406:	69bb      	ldr	r3, [r7, #24]
 8011408:	3302      	adds	r3, #2
 801140a:	61bb      	str	r3, [r7, #24]
 801140c:	e007      	b.n	801141e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801140e:	69fb      	ldr	r3, [r7, #28]
 8011410:	781a      	ldrb	r2, [r3, #0]
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8011418:	69fb      	ldr	r3, [r7, #28]
 801141a:	3301      	adds	r3, #1
 801141c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011424:	b29b      	uxth	r3, r3
 8011426:	3b01      	subs	r3, #1
 8011428:	b29a      	uxth	r2, r3
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011436:	b29b      	uxth	r3, r3
 8011438:	2b00      	cmp	r3, #0
 801143a:	d1cc      	bne.n	80113d6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	9300      	str	r3, [sp, #0]
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	2200      	movs	r2, #0
 8011444:	2140      	movs	r1, #64	; 0x40
 8011446:	68f8      	ldr	r0, [r7, #12]
 8011448:	f001 fce1 	bl	8012e0e <UART_WaitOnFlagUntilTimeout>
 801144c:	4603      	mov	r3, r0
 801144e:	2b00      	cmp	r3, #0
 8011450:	d001      	beq.n	8011456 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8011452:	2303      	movs	r3, #3
 8011454:	e006      	b.n	8011464 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	2220      	movs	r2, #32
 801145a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801145e:	2300      	movs	r3, #0
 8011460:	e000      	b.n	8011464 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8011462:	2302      	movs	r3, #2
  }
}
 8011464:	4618      	mov	r0, r3
 8011466:	3720      	adds	r7, #32
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}

0801146c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b08a      	sub	sp, #40	; 0x28
 8011470:	af02      	add	r7, sp, #8
 8011472:	60f8      	str	r0, [r7, #12]
 8011474:	60b9      	str	r1, [r7, #8]
 8011476:	603b      	str	r3, [r7, #0]
 8011478:	4613      	mov	r3, r2
 801147a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011482:	2b20      	cmp	r3, #32
 8011484:	f040 80c0 	bne.w	8011608 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	2b00      	cmp	r3, #0
 801148c:	d002      	beq.n	8011494 <HAL_UART_Receive+0x28>
 801148e:	88fb      	ldrh	r3, [r7, #6]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d101      	bne.n	8011498 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8011494:	2301      	movs	r3, #1
 8011496:	e0b8      	b.n	801160a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801149e:	2b01      	cmp	r3, #1
 80114a0:	d101      	bne.n	80114a6 <HAL_UART_Receive+0x3a>
 80114a2:	2302      	movs	r3, #2
 80114a4:	e0b1      	b.n	801160a <HAL_UART_Receive+0x19e>
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	2201      	movs	r2, #1
 80114aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	2200      	movs	r2, #0
 80114b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	2222      	movs	r2, #34	; 0x22
 80114ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	2200      	movs	r2, #0
 80114c2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80114c4:	f7f8 fe92 	bl	800a1ec <HAL_GetTick>
 80114c8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	88fa      	ldrh	r2, [r7, #6]
 80114ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	88fa      	ldrh	r2, [r7, #6]
 80114d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	689b      	ldr	r3, [r3, #8]
 80114de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80114e2:	d10e      	bne.n	8011502 <HAL_UART_Receive+0x96>
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	691b      	ldr	r3, [r3, #16]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d105      	bne.n	80114f8 <HAL_UART_Receive+0x8c>
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80114f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80114f6:	e02d      	b.n	8011554 <HAL_UART_Receive+0xe8>
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	22ff      	movs	r2, #255	; 0xff
 80114fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011500:	e028      	b.n	8011554 <HAL_UART_Receive+0xe8>
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	689b      	ldr	r3, [r3, #8]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d10d      	bne.n	8011526 <HAL_UART_Receive+0xba>
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	691b      	ldr	r3, [r3, #16]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d104      	bne.n	801151c <HAL_UART_Receive+0xb0>
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	22ff      	movs	r2, #255	; 0xff
 8011516:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801151a:	e01b      	b.n	8011554 <HAL_UART_Receive+0xe8>
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	227f      	movs	r2, #127	; 0x7f
 8011520:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011524:	e016      	b.n	8011554 <HAL_UART_Receive+0xe8>
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	689b      	ldr	r3, [r3, #8]
 801152a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801152e:	d10d      	bne.n	801154c <HAL_UART_Receive+0xe0>
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	691b      	ldr	r3, [r3, #16]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d104      	bne.n	8011542 <HAL_UART_Receive+0xd6>
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	227f      	movs	r2, #127	; 0x7f
 801153c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011540:	e008      	b.n	8011554 <HAL_UART_Receive+0xe8>
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	223f      	movs	r2, #63	; 0x3f
 8011546:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801154a:	e003      	b.n	8011554 <HAL_UART_Receive+0xe8>
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	2200      	movs	r2, #0
 8011550:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801155a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	689b      	ldr	r3, [r3, #8]
 8011560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011564:	d108      	bne.n	8011578 <HAL_UART_Receive+0x10c>
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	691b      	ldr	r3, [r3, #16]
 801156a:	2b00      	cmp	r3, #0
 801156c:	d104      	bne.n	8011578 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 801156e:	2300      	movs	r3, #0
 8011570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8011572:	68bb      	ldr	r3, [r7, #8]
 8011574:	61bb      	str	r3, [r7, #24]
 8011576:	e003      	b.n	8011580 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 8011578:	68bb      	ldr	r3, [r7, #8]
 801157a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801157c:	2300      	movs	r3, #0
 801157e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	2200      	movs	r2, #0
 8011584:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8011588:	e032      	b.n	80115f0 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	9300      	str	r3, [sp, #0]
 801158e:	697b      	ldr	r3, [r7, #20]
 8011590:	2200      	movs	r2, #0
 8011592:	2120      	movs	r1, #32
 8011594:	68f8      	ldr	r0, [r7, #12]
 8011596:	f001 fc3a 	bl	8012e0e <UART_WaitOnFlagUntilTimeout>
 801159a:	4603      	mov	r3, r0
 801159c:	2b00      	cmp	r3, #0
 801159e:	d001      	beq.n	80115a4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 80115a0:	2303      	movs	r3, #3
 80115a2:	e032      	b.n	801160a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 80115a4:	69fb      	ldr	r3, [r7, #28]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d10c      	bne.n	80115c4 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115b0:	b29a      	uxth	r2, r3
 80115b2:	8a7b      	ldrh	r3, [r7, #18]
 80115b4:	4013      	ands	r3, r2
 80115b6:	b29a      	uxth	r2, r3
 80115b8:	69bb      	ldr	r3, [r7, #24]
 80115ba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80115bc:	69bb      	ldr	r3, [r7, #24]
 80115be:	3302      	adds	r3, #2
 80115c0:	61bb      	str	r3, [r7, #24]
 80115c2:	e00c      	b.n	80115de <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115ca:	b2da      	uxtb	r2, r3
 80115cc:	8a7b      	ldrh	r3, [r7, #18]
 80115ce:	b2db      	uxtb	r3, r3
 80115d0:	4013      	ands	r3, r2
 80115d2:	b2da      	uxtb	r2, r3
 80115d4:	69fb      	ldr	r3, [r7, #28]
 80115d6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80115d8:	69fb      	ldr	r3, [r7, #28]
 80115da:	3301      	adds	r3, #1
 80115dc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80115e4:	b29b      	uxth	r3, r3
 80115e6:	3b01      	subs	r3, #1
 80115e8:	b29a      	uxth	r2, r3
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80115f6:	b29b      	uxth	r3, r3
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d1c6      	bne.n	801158a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	2220      	movs	r2, #32
 8011600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8011604:	2300      	movs	r3, #0
 8011606:	e000      	b.n	801160a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 8011608:	2302      	movs	r3, #2
  }
}
 801160a:	4618      	mov	r0, r3
 801160c:	3720      	adds	r7, #32
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}
	...

08011614 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8011614:	b480      	push	{r7}
 8011616:	b091      	sub	sp, #68	; 0x44
 8011618:	af00      	add	r7, sp, #0
 801161a:	60f8      	str	r0, [r7, #12]
 801161c:	60b9      	str	r1, [r7, #8]
 801161e:	4613      	mov	r3, r2
 8011620:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011628:	2b20      	cmp	r3, #32
 801162a:	f040 808c 	bne.w	8011746 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 801162e:	68bb      	ldr	r3, [r7, #8]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d002      	beq.n	801163a <HAL_UART_Transmit_IT+0x26>
 8011634:	88fb      	ldrh	r3, [r7, #6]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d101      	bne.n	801163e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 801163a:	2301      	movs	r3, #1
 801163c:	e084      	b.n	8011748 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011644:	2b01      	cmp	r3, #1
 8011646:	d101      	bne.n	801164c <HAL_UART_Transmit_IT+0x38>
 8011648:	2302      	movs	r3, #2
 801164a:	e07d      	b.n	8011748 <HAL_UART_Transmit_IT+0x134>
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	2201      	movs	r2, #1
 8011650:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	68ba      	ldr	r2, [r7, #8]
 8011658:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	88fa      	ldrh	r2, [r7, #6]
 801165e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	88fa      	ldrh	r2, [r7, #6]
 8011666:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	2200      	movs	r2, #0
 801166e:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	2200      	movs	r2, #0
 8011674:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	2221      	movs	r2, #33	; 0x21
 801167c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011684:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011688:	d12e      	bne.n	80116e8 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	689b      	ldr	r3, [r3, #8]
 801168e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011692:	d107      	bne.n	80116a4 <HAL_UART_Transmit_IT+0x90>
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	691b      	ldr	r3, [r3, #16]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d103      	bne.n	80116a4 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	4a2d      	ldr	r2, [pc, #180]	; (8011754 <HAL_UART_Transmit_IT+0x140>)
 80116a0:	675a      	str	r2, [r3, #116]	; 0x74
 80116a2:	e002      	b.n	80116aa <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	4a2c      	ldr	r2, [pc, #176]	; (8011758 <HAL_UART_Transmit_IT+0x144>)
 80116a8:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	2200      	movs	r2, #0
 80116ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	681b      	ldr	r3, [r3, #0]
 80116b6:	3308      	adds	r3, #8
 80116b8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116bc:	e853 3f00 	ldrex	r3, [r3]
 80116c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80116c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80116c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	3308      	adds	r3, #8
 80116d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80116d2:	637a      	str	r2, [r7, #52]	; 0x34
 80116d4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80116d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80116da:	e841 2300 	strex	r3, r2, [r1]
 80116de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80116e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d1e5      	bne.n	80116b2 <HAL_UART_Transmit_IT+0x9e>
 80116e6:	e02c      	b.n	8011742 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	689b      	ldr	r3, [r3, #8]
 80116ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80116f0:	d107      	bne.n	8011702 <HAL_UART_Transmit_IT+0xee>
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	691b      	ldr	r3, [r3, #16]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d103      	bne.n	8011702 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	4a17      	ldr	r2, [pc, #92]	; (801175c <HAL_UART_Transmit_IT+0x148>)
 80116fe:	675a      	str	r2, [r3, #116]	; 0x74
 8011700:	e002      	b.n	8011708 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	4a16      	ldr	r2, [pc, #88]	; (8011760 <HAL_UART_Transmit_IT+0x14c>)
 8011706:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	2200      	movs	r2, #0
 801170c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011716:	697b      	ldr	r3, [r7, #20]
 8011718:	e853 3f00 	ldrex	r3, [r3]
 801171c:	613b      	str	r3, [r7, #16]
   return(result);
 801171e:	693b      	ldr	r3, [r7, #16]
 8011720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011724:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	461a      	mov	r2, r3
 801172c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801172e:	623b      	str	r3, [r7, #32]
 8011730:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011732:	69f9      	ldr	r1, [r7, #28]
 8011734:	6a3a      	ldr	r2, [r7, #32]
 8011736:	e841 2300 	strex	r3, r2, [r1]
 801173a:	61bb      	str	r3, [r7, #24]
   return(result);
 801173c:	69bb      	ldr	r3, [r7, #24]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d1e6      	bne.n	8011710 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8011742:	2300      	movs	r3, #0
 8011744:	e000      	b.n	8011748 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8011746:	2302      	movs	r3, #2
  }
}
 8011748:	4618      	mov	r0, r3
 801174a:	3744      	adds	r7, #68	; 0x44
 801174c:	46bd      	mov	sp, r7
 801174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011752:	4770      	bx	lr
 8011754:	08013547 	.word	0x08013547
 8011758:	08013467 	.word	0x08013467
 801175c:	080133a5 	.word	0x080133a5
 8011760:	080132ed 	.word	0x080132ed

08011764 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b08a      	sub	sp, #40	; 0x28
 8011768:	af00      	add	r7, sp, #0
 801176a:	60f8      	str	r0, [r7, #12]
 801176c:	60b9      	str	r1, [r7, #8]
 801176e:	4613      	mov	r3, r2
 8011770:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011778:	2b20      	cmp	r3, #32
 801177a:	d142      	bne.n	8011802 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 801177c:	68bb      	ldr	r3, [r7, #8]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d002      	beq.n	8011788 <HAL_UART_Receive_IT+0x24>
 8011782:	88fb      	ldrh	r3, [r7, #6]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d101      	bne.n	801178c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8011788:	2301      	movs	r3, #1
 801178a:	e03b      	b.n	8011804 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011792:	2b01      	cmp	r3, #1
 8011794:	d101      	bne.n	801179a <HAL_UART_Receive_IT+0x36>
 8011796:	2302      	movs	r3, #2
 8011798:	e034      	b.n	8011804 <HAL_UART_Receive_IT+0xa0>
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	2201      	movs	r2, #1
 801179e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	2200      	movs	r2, #0
 80117a6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	4a17      	ldr	r2, [pc, #92]	; (801180c <HAL_UART_Receive_IT+0xa8>)
 80117ae:	4293      	cmp	r3, r2
 80117b0:	d01f      	beq.n	80117f2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80117b2:	68fb      	ldr	r3, [r7, #12]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	685b      	ldr	r3, [r3, #4]
 80117b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d018      	beq.n	80117f2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117c6:	697b      	ldr	r3, [r7, #20]
 80117c8:	e853 3f00 	ldrex	r3, [r3]
 80117cc:	613b      	str	r3, [r7, #16]
   return(result);
 80117ce:	693b      	ldr	r3, [r7, #16]
 80117d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80117d4:	627b      	str	r3, [r7, #36]	; 0x24
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	461a      	mov	r2, r3
 80117dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117de:	623b      	str	r3, [r7, #32]
 80117e0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117e2:	69f9      	ldr	r1, [r7, #28]
 80117e4:	6a3a      	ldr	r2, [r7, #32]
 80117e6:	e841 2300 	strex	r3, r2, [r1]
 80117ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80117ec:	69bb      	ldr	r3, [r7, #24]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d1e6      	bne.n	80117c0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80117f2:	88fb      	ldrh	r3, [r7, #6]
 80117f4:	461a      	mov	r2, r3
 80117f6:	68b9      	ldr	r1, [r7, #8]
 80117f8:	68f8      	ldr	r0, [r7, #12]
 80117fa:	f001 fbd1 	bl	8012fa0 <UART_Start_Receive_IT>
 80117fe:	4603      	mov	r3, r0
 8011800:	e000      	b.n	8011804 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8011802:	2302      	movs	r3, #2
  }
}
 8011804:	4618      	mov	r0, r3
 8011806:	3728      	adds	r7, #40	; 0x28
 8011808:	46bd      	mov	sp, r7
 801180a:	bd80      	pop	{r7, pc}
 801180c:	58000c00 	.word	0x58000c00

08011810 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011810:	b580      	push	{r7, lr}
 8011812:	b0ba      	sub	sp, #232	; 0xe8
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	69db      	ldr	r3, [r3, #28]
 801181e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	689b      	ldr	r3, [r3, #8]
 8011832:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011836:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801183a:	f640 030f 	movw	r3, #2063	; 0x80f
 801183e:	4013      	ands	r3, r2
 8011840:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8011844:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011848:	2b00      	cmp	r3, #0
 801184a:	d11b      	bne.n	8011884 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801184c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011850:	f003 0320 	and.w	r3, r3, #32
 8011854:	2b00      	cmp	r3, #0
 8011856:	d015      	beq.n	8011884 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801185c:	f003 0320 	and.w	r3, r3, #32
 8011860:	2b00      	cmp	r3, #0
 8011862:	d105      	bne.n	8011870 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801186c:	2b00      	cmp	r3, #0
 801186e:	d009      	beq.n	8011884 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011874:	2b00      	cmp	r3, #0
 8011876:	f000 835a 	beq.w	8011f2e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801187e:	6878      	ldr	r0, [r7, #4]
 8011880:	4798      	blx	r3
      }
      return;
 8011882:	e354      	b.n	8011f2e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8011884:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011888:	2b00      	cmp	r3, #0
 801188a:	f000 811f 	beq.w	8011acc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801188e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8011892:	4b8b      	ldr	r3, [pc, #556]	; (8011ac0 <HAL_UART_IRQHandler+0x2b0>)
 8011894:	4013      	ands	r3, r2
 8011896:	2b00      	cmp	r3, #0
 8011898:	d106      	bne.n	80118a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801189a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801189e:	4b89      	ldr	r3, [pc, #548]	; (8011ac4 <HAL_UART_IRQHandler+0x2b4>)
 80118a0:	4013      	ands	r3, r2
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	f000 8112 	beq.w	8011acc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80118a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80118ac:	f003 0301 	and.w	r3, r3, #1
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d011      	beq.n	80118d8 <HAL_UART_IRQHandler+0xc8>
 80118b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80118b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d00b      	beq.n	80118d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	2201      	movs	r2, #1
 80118c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118ce:	f043 0201 	orr.w	r2, r3, #1
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80118d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80118dc:	f003 0302 	and.w	r3, r3, #2
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d011      	beq.n	8011908 <HAL_UART_IRQHandler+0xf8>
 80118e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80118e8:	f003 0301 	and.w	r3, r3, #1
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d00b      	beq.n	8011908 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	2202      	movs	r2, #2
 80118f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118fe:	f043 0204 	orr.w	r2, r3, #4
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801190c:	f003 0304 	and.w	r3, r3, #4
 8011910:	2b00      	cmp	r3, #0
 8011912:	d011      	beq.n	8011938 <HAL_UART_IRQHandler+0x128>
 8011914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011918:	f003 0301 	and.w	r3, r3, #1
 801191c:	2b00      	cmp	r3, #0
 801191e:	d00b      	beq.n	8011938 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	2204      	movs	r2, #4
 8011926:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801192e:	f043 0202 	orr.w	r2, r3, #2
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801193c:	f003 0308 	and.w	r3, r3, #8
 8011940:	2b00      	cmp	r3, #0
 8011942:	d017      	beq.n	8011974 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011948:	f003 0320 	and.w	r3, r3, #32
 801194c:	2b00      	cmp	r3, #0
 801194e:	d105      	bne.n	801195c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8011950:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8011954:	4b5a      	ldr	r3, [pc, #360]	; (8011ac0 <HAL_UART_IRQHandler+0x2b0>)
 8011956:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011958:	2b00      	cmp	r3, #0
 801195a:	d00b      	beq.n	8011974 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	2208      	movs	r2, #8
 8011962:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801196a:	f043 0208 	orr.w	r2, r3, #8
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801197c:	2b00      	cmp	r3, #0
 801197e:	d012      	beq.n	80119a6 <HAL_UART_IRQHandler+0x196>
 8011980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011984:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011988:	2b00      	cmp	r3, #0
 801198a:	d00c      	beq.n	80119a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011994:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801199c:	f043 0220 	orr.w	r2, r3, #32
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	f000 82c0 	beq.w	8011f32 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80119b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80119b6:	f003 0320 	and.w	r3, r3, #32
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d013      	beq.n	80119e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80119be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80119c2:	f003 0320 	and.w	r3, r3, #32
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d105      	bne.n	80119d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80119ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80119ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d007      	beq.n	80119e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d003      	beq.n	80119e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80119ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	689b      	ldr	r3, [r3, #8]
 80119f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119fa:	2b40      	cmp	r3, #64	; 0x40
 80119fc:	d005      	beq.n	8011a0a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80119fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011a02:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d04f      	beq.n	8011aaa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011a0a:	6878      	ldr	r0, [r7, #4]
 8011a0c:	f001 fbf2 	bl	80131f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	689b      	ldr	r3, [r3, #8]
 8011a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a1a:	2b40      	cmp	r3, #64	; 0x40
 8011a1c:	d141      	bne.n	8011aa2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	3308      	adds	r3, #8
 8011a24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011a2c:	e853 3f00 	ldrex	r3, [r3]
 8011a30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8011a34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	3308      	adds	r3, #8
 8011a46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8011a4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8011a4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8011a56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011a5a:	e841 2300 	strex	r3, r2, [r1]
 8011a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8011a62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d1d9      	bne.n	8011a1e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d013      	beq.n	8011a9a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011a76:	4a14      	ldr	r2, [pc, #80]	; (8011ac8 <HAL_UART_IRQHandler+0x2b8>)
 8011a78:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f7fa fd5a 	bl	800c538 <HAL_DMA_Abort_IT>
 8011a84:	4603      	mov	r3, r0
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d017      	beq.n	8011aba <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a90:	687a      	ldr	r2, [r7, #4]
 8011a92:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8011a94:	4610      	mov	r0, r2
 8011a96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011a98:	e00f      	b.n	8011aba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f000 fa56 	bl	8011f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011aa0:	e00b      	b.n	8011aba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011aa2:	6878      	ldr	r0, [r7, #4]
 8011aa4:	f000 fa52 	bl	8011f4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011aa8:	e007      	b.n	8011aba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011aaa:	6878      	ldr	r0, [r7, #4]
 8011aac:	f000 fa4e 	bl	8011f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	2200      	movs	r2, #0
 8011ab4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8011ab8:	e23b      	b.n	8011f32 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011aba:	bf00      	nop
    return;
 8011abc:	e239      	b.n	8011f32 <HAL_UART_IRQHandler+0x722>
 8011abe:	bf00      	nop
 8011ac0:	10000001 	.word	0x10000001
 8011ac4:	04000120 	.word	0x04000120
 8011ac8:	080132c1 	.word	0x080132c1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ad0:	2b01      	cmp	r3, #1
 8011ad2:	f040 81ce 	bne.w	8011e72 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8011ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011ada:	f003 0310 	and.w	r3, r3, #16
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	f000 81c7 	beq.w	8011e72 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011ae8:	f003 0310 	and.w	r3, r3, #16
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	f000 81c0 	beq.w	8011e72 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	2210      	movs	r2, #16
 8011af8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	689b      	ldr	r3, [r3, #8]
 8011b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b04:	2b40      	cmp	r3, #64	; 0x40
 8011b06:	f040 813b 	bne.w	8011d80 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	4a8b      	ldr	r2, [pc, #556]	; (8011d40 <HAL_UART_IRQHandler+0x530>)
 8011b12:	4293      	cmp	r3, r2
 8011b14:	d059      	beq.n	8011bca <HAL_UART_IRQHandler+0x3ba>
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	4a89      	ldr	r2, [pc, #548]	; (8011d44 <HAL_UART_IRQHandler+0x534>)
 8011b1e:	4293      	cmp	r3, r2
 8011b20:	d053      	beq.n	8011bca <HAL_UART_IRQHandler+0x3ba>
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	4a87      	ldr	r2, [pc, #540]	; (8011d48 <HAL_UART_IRQHandler+0x538>)
 8011b2a:	4293      	cmp	r3, r2
 8011b2c:	d04d      	beq.n	8011bca <HAL_UART_IRQHandler+0x3ba>
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	4a85      	ldr	r2, [pc, #532]	; (8011d4c <HAL_UART_IRQHandler+0x53c>)
 8011b36:	4293      	cmp	r3, r2
 8011b38:	d047      	beq.n	8011bca <HAL_UART_IRQHandler+0x3ba>
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b3e:	681b      	ldr	r3, [r3, #0]
 8011b40:	4a83      	ldr	r2, [pc, #524]	; (8011d50 <HAL_UART_IRQHandler+0x540>)
 8011b42:	4293      	cmp	r3, r2
 8011b44:	d041      	beq.n	8011bca <HAL_UART_IRQHandler+0x3ba>
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	4a81      	ldr	r2, [pc, #516]	; (8011d54 <HAL_UART_IRQHandler+0x544>)
 8011b4e:	4293      	cmp	r3, r2
 8011b50:	d03b      	beq.n	8011bca <HAL_UART_IRQHandler+0x3ba>
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	4a7f      	ldr	r2, [pc, #508]	; (8011d58 <HAL_UART_IRQHandler+0x548>)
 8011b5a:	4293      	cmp	r3, r2
 8011b5c:	d035      	beq.n	8011bca <HAL_UART_IRQHandler+0x3ba>
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	4a7d      	ldr	r2, [pc, #500]	; (8011d5c <HAL_UART_IRQHandler+0x54c>)
 8011b66:	4293      	cmp	r3, r2
 8011b68:	d02f      	beq.n	8011bca <HAL_UART_IRQHandler+0x3ba>
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	4a7b      	ldr	r2, [pc, #492]	; (8011d60 <HAL_UART_IRQHandler+0x550>)
 8011b72:	4293      	cmp	r3, r2
 8011b74:	d029      	beq.n	8011bca <HAL_UART_IRQHandler+0x3ba>
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	4a79      	ldr	r2, [pc, #484]	; (8011d64 <HAL_UART_IRQHandler+0x554>)
 8011b7e:	4293      	cmp	r3, r2
 8011b80:	d023      	beq.n	8011bca <HAL_UART_IRQHandler+0x3ba>
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	4a77      	ldr	r2, [pc, #476]	; (8011d68 <HAL_UART_IRQHandler+0x558>)
 8011b8a:	4293      	cmp	r3, r2
 8011b8c:	d01d      	beq.n	8011bca <HAL_UART_IRQHandler+0x3ba>
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	4a75      	ldr	r2, [pc, #468]	; (8011d6c <HAL_UART_IRQHandler+0x55c>)
 8011b96:	4293      	cmp	r3, r2
 8011b98:	d017      	beq.n	8011bca <HAL_UART_IRQHandler+0x3ba>
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	4a73      	ldr	r2, [pc, #460]	; (8011d70 <HAL_UART_IRQHandler+0x560>)
 8011ba2:	4293      	cmp	r3, r2
 8011ba4:	d011      	beq.n	8011bca <HAL_UART_IRQHandler+0x3ba>
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	4a71      	ldr	r2, [pc, #452]	; (8011d74 <HAL_UART_IRQHandler+0x564>)
 8011bae:	4293      	cmp	r3, r2
 8011bb0:	d00b      	beq.n	8011bca <HAL_UART_IRQHandler+0x3ba>
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	4a6f      	ldr	r2, [pc, #444]	; (8011d78 <HAL_UART_IRQHandler+0x568>)
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	d005      	beq.n	8011bca <HAL_UART_IRQHandler+0x3ba>
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	4a6d      	ldr	r2, [pc, #436]	; (8011d7c <HAL_UART_IRQHandler+0x56c>)
 8011bc6:	4293      	cmp	r3, r2
 8011bc8:	d105      	bne.n	8011bd6 <HAL_UART_IRQHandler+0x3c6>
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	685b      	ldr	r3, [r3, #4]
 8011bd2:	b29b      	uxth	r3, r3
 8011bd4:	e004      	b.n	8011be0 <HAL_UART_IRQHandler+0x3d0>
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	685b      	ldr	r3, [r3, #4]
 8011bde:	b29b      	uxth	r3, r3
 8011be0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8011be4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	f000 81a4 	beq.w	8011f36 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011bf4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011bf8:	429a      	cmp	r2, r3
 8011bfa:	f080 819c 	bcs.w	8011f36 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011c04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c0c:	69db      	ldr	r3, [r3, #28]
 8011c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c12:	f000 8086 	beq.w	8011d22 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011c22:	e853 3f00 	ldrex	r3, [r3]
 8011c26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8011c2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011c2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011c32:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	461a      	mov	r2, r3
 8011c3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011c40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011c44:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c48:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011c4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011c50:	e841 2300 	strex	r3, r2, [r1]
 8011c54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8011c58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d1da      	bne.n	8011c16 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	3308      	adds	r3, #8
 8011c66:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011c6a:	e853 3f00 	ldrex	r3, [r3]
 8011c6e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8011c70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011c72:	f023 0301 	bic.w	r3, r3, #1
 8011c76:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	3308      	adds	r3, #8
 8011c80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011c84:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8011c88:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c8a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8011c8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011c90:	e841 2300 	strex	r3, r2, [r1]
 8011c94:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8011c96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d1e1      	bne.n	8011c60 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	3308      	adds	r3, #8
 8011ca2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ca4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011ca6:	e853 3f00 	ldrex	r3, [r3]
 8011caa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011cb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	3308      	adds	r3, #8
 8011cbc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8011cc0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8011cc2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cc4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011cc6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011cc8:	e841 2300 	strex	r3, r2, [r1]
 8011ccc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011cce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d1e3      	bne.n	8011c9c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2220      	movs	r2, #32
 8011cd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	2200      	movs	r2, #0
 8011ce0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cea:	e853 3f00 	ldrex	r3, [r3]
 8011cee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cf2:	f023 0310 	bic.w	r3, r3, #16
 8011cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	461a      	mov	r2, r3
 8011d00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011d04:	65bb      	str	r3, [r7, #88]	; 0x58
 8011d06:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011d0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011d0c:	e841 2300 	strex	r3, r2, [r1]
 8011d10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d1e4      	bne.n	8011ce2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f7fa f8ed 	bl	800befc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011d2e:	b29b      	uxth	r3, r3
 8011d30:	1ad3      	subs	r3, r2, r3
 8011d32:	b29b      	uxth	r3, r3
 8011d34:	4619      	mov	r1, r3
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f000 f912 	bl	8011f60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011d3c:	e0fb      	b.n	8011f36 <HAL_UART_IRQHandler+0x726>
 8011d3e:	bf00      	nop
 8011d40:	40020010 	.word	0x40020010
 8011d44:	40020028 	.word	0x40020028
 8011d48:	40020040 	.word	0x40020040
 8011d4c:	40020058 	.word	0x40020058
 8011d50:	40020070 	.word	0x40020070
 8011d54:	40020088 	.word	0x40020088
 8011d58:	400200a0 	.word	0x400200a0
 8011d5c:	400200b8 	.word	0x400200b8
 8011d60:	40020410 	.word	0x40020410
 8011d64:	40020428 	.word	0x40020428
 8011d68:	40020440 	.word	0x40020440
 8011d6c:	40020458 	.word	0x40020458
 8011d70:	40020470 	.word	0x40020470
 8011d74:	40020488 	.word	0x40020488
 8011d78:	400204a0 	.word	0x400204a0
 8011d7c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011d8c:	b29b      	uxth	r3, r3
 8011d8e:	1ad3      	subs	r3, r2, r3
 8011d90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011d9a:	b29b      	uxth	r3, r3
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	f000 80cc 	beq.w	8011f3a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8011da2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	f000 80c7 	beq.w	8011f3a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db4:	e853 3f00 	ldrex	r3, [r3]
 8011db8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011dc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	461a      	mov	r2, r3
 8011dca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011dce:	647b      	str	r3, [r7, #68]	; 0x44
 8011dd0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011dd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011dd6:	e841 2300 	strex	r3, r2, [r1]
 8011dda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d1e4      	bne.n	8011dac <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	3308      	adds	r3, #8
 8011de8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dec:	e853 3f00 	ldrex	r3, [r3]
 8011df0:	623b      	str	r3, [r7, #32]
   return(result);
 8011df2:	6a3a      	ldr	r2, [r7, #32]
 8011df4:	4b54      	ldr	r3, [pc, #336]	; (8011f48 <HAL_UART_IRQHandler+0x738>)
 8011df6:	4013      	ands	r3, r2
 8011df8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	3308      	adds	r3, #8
 8011e02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011e06:	633a      	str	r2, [r7, #48]	; 0x30
 8011e08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e0e:	e841 2300 	strex	r3, r2, [r1]
 8011e12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d1e3      	bne.n	8011de2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	2220      	movs	r2, #32
 8011e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	2200      	movs	r2, #0
 8011e26:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	2200      	movs	r2, #0
 8011e2c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e34:	693b      	ldr	r3, [r7, #16]
 8011e36:	e853 3f00 	ldrex	r3, [r3]
 8011e3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	f023 0310 	bic.w	r3, r3, #16
 8011e42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	461a      	mov	r2, r3
 8011e4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011e50:	61fb      	str	r3, [r7, #28]
 8011e52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e54:	69b9      	ldr	r1, [r7, #24]
 8011e56:	69fa      	ldr	r2, [r7, #28]
 8011e58:	e841 2300 	strex	r3, r2, [r1]
 8011e5c:	617b      	str	r3, [r7, #20]
   return(result);
 8011e5e:	697b      	ldr	r3, [r7, #20]
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d1e4      	bne.n	8011e2e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011e64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011e68:	4619      	mov	r1, r3
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f000 f878 	bl	8011f60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011e70:	e063      	b.n	8011f3a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d00e      	beq.n	8011e9c <HAL_UART_IRQHandler+0x68c>
 8011e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d008      	beq.n	8011e9c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011e92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8011e94:	6878      	ldr	r0, [r7, #4]
 8011e96:	f002 f853 	bl	8013f40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011e9a:	e051      	b.n	8011f40 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8011e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d014      	beq.n	8011ed2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8011ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d105      	bne.n	8011ec0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8011eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d008      	beq.n	8011ed2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d03a      	beq.n	8011f3e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	4798      	blx	r3
    }
    return;
 8011ed0:	e035      	b.n	8011f3e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d009      	beq.n	8011ef2 <HAL_UART_IRQHandler+0x6e2>
 8011ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d003      	beq.n	8011ef2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8011eea:	6878      	ldr	r0, [r7, #4]
 8011eec:	f001 fba0 	bl	8013630 <UART_EndTransmit_IT>
    return;
 8011ef0:	e026      	b.n	8011f40 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8011ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d009      	beq.n	8011f12 <HAL_UART_IRQHandler+0x702>
 8011efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011f02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d003      	beq.n	8011f12 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8011f0a:	6878      	ldr	r0, [r7, #4]
 8011f0c:	f002 f82c 	bl	8013f68 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011f10:	e016      	b.n	8011f40 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8011f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011f16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d010      	beq.n	8011f40 <HAL_UART_IRQHandler+0x730>
 8011f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	da0c      	bge.n	8011f40 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f002 f814 	bl	8013f54 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011f2c:	e008      	b.n	8011f40 <HAL_UART_IRQHandler+0x730>
      return;
 8011f2e:	bf00      	nop
 8011f30:	e006      	b.n	8011f40 <HAL_UART_IRQHandler+0x730>
    return;
 8011f32:	bf00      	nop
 8011f34:	e004      	b.n	8011f40 <HAL_UART_IRQHandler+0x730>
      return;
 8011f36:	bf00      	nop
 8011f38:	e002      	b.n	8011f40 <HAL_UART_IRQHandler+0x730>
      return;
 8011f3a:	bf00      	nop
 8011f3c:	e000      	b.n	8011f40 <HAL_UART_IRQHandler+0x730>
    return;
 8011f3e:	bf00      	nop
  }
}
 8011f40:	37e8      	adds	r7, #232	; 0xe8
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}
 8011f46:	bf00      	nop
 8011f48:	effffffe 	.word	0xeffffffe

08011f4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011f4c:	b480      	push	{r7}
 8011f4e:	b083      	sub	sp, #12
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011f54:	bf00      	nop
 8011f56:	370c      	adds	r7, #12
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5e:	4770      	bx	lr

08011f60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011f60:	b480      	push	{r7}
 8011f62:	b083      	sub	sp, #12
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
 8011f68:	460b      	mov	r3, r1
 8011f6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011f6c:	bf00      	nop
 8011f6e:	370c      	adds	r7, #12
 8011f70:	46bd      	mov	sp, r7
 8011f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f76:	4770      	bx	lr

08011f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011f78:	b5b0      	push	{r4, r5, r7, lr}
 8011f7a:	b08e      	sub	sp, #56	; 0x38
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011f80:	2300      	movs	r3, #0
 8011f82:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	689a      	ldr	r2, [r3, #8]
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	691b      	ldr	r3, [r3, #16]
 8011f8e:	431a      	orrs	r2, r3
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	695b      	ldr	r3, [r3, #20]
 8011f94:	431a      	orrs	r2, r3
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	69db      	ldr	r3, [r3, #28]
 8011f9a:	4313      	orrs	r3, r2
 8011f9c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	681a      	ldr	r2, [r3, #0]
 8011fa4:	4bbf      	ldr	r3, [pc, #764]	; (80122a4 <UART_SetConfig+0x32c>)
 8011fa6:	4013      	ands	r3, r2
 8011fa8:	687a      	ldr	r2, [r7, #4]
 8011faa:	6812      	ldr	r2, [r2, #0]
 8011fac:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011fae:	430b      	orrs	r3, r1
 8011fb0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	68da      	ldr	r2, [r3, #12]
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	430a      	orrs	r2, r1
 8011fc6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	699b      	ldr	r3, [r3, #24]
 8011fcc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	4ab5      	ldr	r2, [pc, #724]	; (80122a8 <UART_SetConfig+0x330>)
 8011fd4:	4293      	cmp	r3, r2
 8011fd6:	d004      	beq.n	8011fe2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	6a1b      	ldr	r3, [r3, #32]
 8011fdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011fde:	4313      	orrs	r3, r2
 8011fe0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	689a      	ldr	r2, [r3, #8]
 8011fe8:	4bb0      	ldr	r3, [pc, #704]	; (80122ac <UART_SetConfig+0x334>)
 8011fea:	4013      	ands	r3, r2
 8011fec:	687a      	ldr	r2, [r7, #4]
 8011fee:	6812      	ldr	r2, [r2, #0]
 8011ff0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011ff2:	430b      	orrs	r3, r1
 8011ff4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ffc:	f023 010f 	bic.w	r1, r3, #15
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	430a      	orrs	r2, r1
 801200a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	4aa7      	ldr	r2, [pc, #668]	; (80122b0 <UART_SetConfig+0x338>)
 8012012:	4293      	cmp	r3, r2
 8012014:	d176      	bne.n	8012104 <UART_SetConfig+0x18c>
 8012016:	4ba7      	ldr	r3, [pc, #668]	; (80122b4 <UART_SetConfig+0x33c>)
 8012018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801201a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801201e:	2b28      	cmp	r3, #40	; 0x28
 8012020:	d86c      	bhi.n	80120fc <UART_SetConfig+0x184>
 8012022:	a201      	add	r2, pc, #4	; (adr r2, 8012028 <UART_SetConfig+0xb0>)
 8012024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012028:	080120cd 	.word	0x080120cd
 801202c:	080120fd 	.word	0x080120fd
 8012030:	080120fd 	.word	0x080120fd
 8012034:	080120fd 	.word	0x080120fd
 8012038:	080120fd 	.word	0x080120fd
 801203c:	080120fd 	.word	0x080120fd
 8012040:	080120fd 	.word	0x080120fd
 8012044:	080120fd 	.word	0x080120fd
 8012048:	080120d5 	.word	0x080120d5
 801204c:	080120fd 	.word	0x080120fd
 8012050:	080120fd 	.word	0x080120fd
 8012054:	080120fd 	.word	0x080120fd
 8012058:	080120fd 	.word	0x080120fd
 801205c:	080120fd 	.word	0x080120fd
 8012060:	080120fd 	.word	0x080120fd
 8012064:	080120fd 	.word	0x080120fd
 8012068:	080120dd 	.word	0x080120dd
 801206c:	080120fd 	.word	0x080120fd
 8012070:	080120fd 	.word	0x080120fd
 8012074:	080120fd 	.word	0x080120fd
 8012078:	080120fd 	.word	0x080120fd
 801207c:	080120fd 	.word	0x080120fd
 8012080:	080120fd 	.word	0x080120fd
 8012084:	080120fd 	.word	0x080120fd
 8012088:	080120e5 	.word	0x080120e5
 801208c:	080120fd 	.word	0x080120fd
 8012090:	080120fd 	.word	0x080120fd
 8012094:	080120fd 	.word	0x080120fd
 8012098:	080120fd 	.word	0x080120fd
 801209c:	080120fd 	.word	0x080120fd
 80120a0:	080120fd 	.word	0x080120fd
 80120a4:	080120fd 	.word	0x080120fd
 80120a8:	080120ed 	.word	0x080120ed
 80120ac:	080120fd 	.word	0x080120fd
 80120b0:	080120fd 	.word	0x080120fd
 80120b4:	080120fd 	.word	0x080120fd
 80120b8:	080120fd 	.word	0x080120fd
 80120bc:	080120fd 	.word	0x080120fd
 80120c0:	080120fd 	.word	0x080120fd
 80120c4:	080120fd 	.word	0x080120fd
 80120c8:	080120f5 	.word	0x080120f5
 80120cc:	2301      	movs	r3, #1
 80120ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80120d2:	e326      	b.n	8012722 <UART_SetConfig+0x7aa>
 80120d4:	2304      	movs	r3, #4
 80120d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80120da:	e322      	b.n	8012722 <UART_SetConfig+0x7aa>
 80120dc:	2308      	movs	r3, #8
 80120de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80120e2:	e31e      	b.n	8012722 <UART_SetConfig+0x7aa>
 80120e4:	2310      	movs	r3, #16
 80120e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80120ea:	e31a      	b.n	8012722 <UART_SetConfig+0x7aa>
 80120ec:	2320      	movs	r3, #32
 80120ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80120f2:	e316      	b.n	8012722 <UART_SetConfig+0x7aa>
 80120f4:	2340      	movs	r3, #64	; 0x40
 80120f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80120fa:	e312      	b.n	8012722 <UART_SetConfig+0x7aa>
 80120fc:	2380      	movs	r3, #128	; 0x80
 80120fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012102:	e30e      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	4a6b      	ldr	r2, [pc, #428]	; (80122b8 <UART_SetConfig+0x340>)
 801210a:	4293      	cmp	r3, r2
 801210c:	d130      	bne.n	8012170 <UART_SetConfig+0x1f8>
 801210e:	4b69      	ldr	r3, [pc, #420]	; (80122b4 <UART_SetConfig+0x33c>)
 8012110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012112:	f003 0307 	and.w	r3, r3, #7
 8012116:	2b05      	cmp	r3, #5
 8012118:	d826      	bhi.n	8012168 <UART_SetConfig+0x1f0>
 801211a:	a201      	add	r2, pc, #4	; (adr r2, 8012120 <UART_SetConfig+0x1a8>)
 801211c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012120:	08012139 	.word	0x08012139
 8012124:	08012141 	.word	0x08012141
 8012128:	08012149 	.word	0x08012149
 801212c:	08012151 	.word	0x08012151
 8012130:	08012159 	.word	0x08012159
 8012134:	08012161 	.word	0x08012161
 8012138:	2300      	movs	r3, #0
 801213a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801213e:	e2f0      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012140:	2304      	movs	r3, #4
 8012142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012146:	e2ec      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012148:	2308      	movs	r3, #8
 801214a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801214e:	e2e8      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012150:	2310      	movs	r3, #16
 8012152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012156:	e2e4      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012158:	2320      	movs	r3, #32
 801215a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801215e:	e2e0      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012160:	2340      	movs	r3, #64	; 0x40
 8012162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012166:	e2dc      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012168:	2380      	movs	r3, #128	; 0x80
 801216a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801216e:	e2d8      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	4a51      	ldr	r2, [pc, #324]	; (80122bc <UART_SetConfig+0x344>)
 8012176:	4293      	cmp	r3, r2
 8012178:	d130      	bne.n	80121dc <UART_SetConfig+0x264>
 801217a:	4b4e      	ldr	r3, [pc, #312]	; (80122b4 <UART_SetConfig+0x33c>)
 801217c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801217e:	f003 0307 	and.w	r3, r3, #7
 8012182:	2b05      	cmp	r3, #5
 8012184:	d826      	bhi.n	80121d4 <UART_SetConfig+0x25c>
 8012186:	a201      	add	r2, pc, #4	; (adr r2, 801218c <UART_SetConfig+0x214>)
 8012188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801218c:	080121a5 	.word	0x080121a5
 8012190:	080121ad 	.word	0x080121ad
 8012194:	080121b5 	.word	0x080121b5
 8012198:	080121bd 	.word	0x080121bd
 801219c:	080121c5 	.word	0x080121c5
 80121a0:	080121cd 	.word	0x080121cd
 80121a4:	2300      	movs	r3, #0
 80121a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80121aa:	e2ba      	b.n	8012722 <UART_SetConfig+0x7aa>
 80121ac:	2304      	movs	r3, #4
 80121ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80121b2:	e2b6      	b.n	8012722 <UART_SetConfig+0x7aa>
 80121b4:	2308      	movs	r3, #8
 80121b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80121ba:	e2b2      	b.n	8012722 <UART_SetConfig+0x7aa>
 80121bc:	2310      	movs	r3, #16
 80121be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80121c2:	e2ae      	b.n	8012722 <UART_SetConfig+0x7aa>
 80121c4:	2320      	movs	r3, #32
 80121c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80121ca:	e2aa      	b.n	8012722 <UART_SetConfig+0x7aa>
 80121cc:	2340      	movs	r3, #64	; 0x40
 80121ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80121d2:	e2a6      	b.n	8012722 <UART_SetConfig+0x7aa>
 80121d4:	2380      	movs	r3, #128	; 0x80
 80121d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80121da:	e2a2      	b.n	8012722 <UART_SetConfig+0x7aa>
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	4a37      	ldr	r2, [pc, #220]	; (80122c0 <UART_SetConfig+0x348>)
 80121e2:	4293      	cmp	r3, r2
 80121e4:	d130      	bne.n	8012248 <UART_SetConfig+0x2d0>
 80121e6:	4b33      	ldr	r3, [pc, #204]	; (80122b4 <UART_SetConfig+0x33c>)
 80121e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80121ea:	f003 0307 	and.w	r3, r3, #7
 80121ee:	2b05      	cmp	r3, #5
 80121f0:	d826      	bhi.n	8012240 <UART_SetConfig+0x2c8>
 80121f2:	a201      	add	r2, pc, #4	; (adr r2, 80121f8 <UART_SetConfig+0x280>)
 80121f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121f8:	08012211 	.word	0x08012211
 80121fc:	08012219 	.word	0x08012219
 8012200:	08012221 	.word	0x08012221
 8012204:	08012229 	.word	0x08012229
 8012208:	08012231 	.word	0x08012231
 801220c:	08012239 	.word	0x08012239
 8012210:	2300      	movs	r3, #0
 8012212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012216:	e284      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012218:	2304      	movs	r3, #4
 801221a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801221e:	e280      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012220:	2308      	movs	r3, #8
 8012222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012226:	e27c      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012228:	2310      	movs	r3, #16
 801222a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801222e:	e278      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012230:	2320      	movs	r3, #32
 8012232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012236:	e274      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012238:	2340      	movs	r3, #64	; 0x40
 801223a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801223e:	e270      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012240:	2380      	movs	r3, #128	; 0x80
 8012242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012246:	e26c      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	4a1d      	ldr	r2, [pc, #116]	; (80122c4 <UART_SetConfig+0x34c>)
 801224e:	4293      	cmp	r3, r2
 8012250:	d142      	bne.n	80122d8 <UART_SetConfig+0x360>
 8012252:	4b18      	ldr	r3, [pc, #96]	; (80122b4 <UART_SetConfig+0x33c>)
 8012254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012256:	f003 0307 	and.w	r3, r3, #7
 801225a:	2b05      	cmp	r3, #5
 801225c:	d838      	bhi.n	80122d0 <UART_SetConfig+0x358>
 801225e:	a201      	add	r2, pc, #4	; (adr r2, 8012264 <UART_SetConfig+0x2ec>)
 8012260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012264:	0801227d 	.word	0x0801227d
 8012268:	08012285 	.word	0x08012285
 801226c:	0801228d 	.word	0x0801228d
 8012270:	08012295 	.word	0x08012295
 8012274:	0801229d 	.word	0x0801229d
 8012278:	080122c9 	.word	0x080122c9
 801227c:	2300      	movs	r3, #0
 801227e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012282:	e24e      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012284:	2304      	movs	r3, #4
 8012286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801228a:	e24a      	b.n	8012722 <UART_SetConfig+0x7aa>
 801228c:	2308      	movs	r3, #8
 801228e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012292:	e246      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012294:	2310      	movs	r3, #16
 8012296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801229a:	e242      	b.n	8012722 <UART_SetConfig+0x7aa>
 801229c:	2320      	movs	r3, #32
 801229e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80122a2:	e23e      	b.n	8012722 <UART_SetConfig+0x7aa>
 80122a4:	cfff69f3 	.word	0xcfff69f3
 80122a8:	58000c00 	.word	0x58000c00
 80122ac:	11fff4ff 	.word	0x11fff4ff
 80122b0:	40011000 	.word	0x40011000
 80122b4:	58024400 	.word	0x58024400
 80122b8:	40004400 	.word	0x40004400
 80122bc:	40004800 	.word	0x40004800
 80122c0:	40004c00 	.word	0x40004c00
 80122c4:	40005000 	.word	0x40005000
 80122c8:	2340      	movs	r3, #64	; 0x40
 80122ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80122ce:	e228      	b.n	8012722 <UART_SetConfig+0x7aa>
 80122d0:	2380      	movs	r3, #128	; 0x80
 80122d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80122d6:	e224      	b.n	8012722 <UART_SetConfig+0x7aa>
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	4ab1      	ldr	r2, [pc, #708]	; (80125a4 <UART_SetConfig+0x62c>)
 80122de:	4293      	cmp	r3, r2
 80122e0:	d176      	bne.n	80123d0 <UART_SetConfig+0x458>
 80122e2:	4bb1      	ldr	r3, [pc, #708]	; (80125a8 <UART_SetConfig+0x630>)
 80122e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80122e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80122ea:	2b28      	cmp	r3, #40	; 0x28
 80122ec:	d86c      	bhi.n	80123c8 <UART_SetConfig+0x450>
 80122ee:	a201      	add	r2, pc, #4	; (adr r2, 80122f4 <UART_SetConfig+0x37c>)
 80122f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122f4:	08012399 	.word	0x08012399
 80122f8:	080123c9 	.word	0x080123c9
 80122fc:	080123c9 	.word	0x080123c9
 8012300:	080123c9 	.word	0x080123c9
 8012304:	080123c9 	.word	0x080123c9
 8012308:	080123c9 	.word	0x080123c9
 801230c:	080123c9 	.word	0x080123c9
 8012310:	080123c9 	.word	0x080123c9
 8012314:	080123a1 	.word	0x080123a1
 8012318:	080123c9 	.word	0x080123c9
 801231c:	080123c9 	.word	0x080123c9
 8012320:	080123c9 	.word	0x080123c9
 8012324:	080123c9 	.word	0x080123c9
 8012328:	080123c9 	.word	0x080123c9
 801232c:	080123c9 	.word	0x080123c9
 8012330:	080123c9 	.word	0x080123c9
 8012334:	080123a9 	.word	0x080123a9
 8012338:	080123c9 	.word	0x080123c9
 801233c:	080123c9 	.word	0x080123c9
 8012340:	080123c9 	.word	0x080123c9
 8012344:	080123c9 	.word	0x080123c9
 8012348:	080123c9 	.word	0x080123c9
 801234c:	080123c9 	.word	0x080123c9
 8012350:	080123c9 	.word	0x080123c9
 8012354:	080123b1 	.word	0x080123b1
 8012358:	080123c9 	.word	0x080123c9
 801235c:	080123c9 	.word	0x080123c9
 8012360:	080123c9 	.word	0x080123c9
 8012364:	080123c9 	.word	0x080123c9
 8012368:	080123c9 	.word	0x080123c9
 801236c:	080123c9 	.word	0x080123c9
 8012370:	080123c9 	.word	0x080123c9
 8012374:	080123b9 	.word	0x080123b9
 8012378:	080123c9 	.word	0x080123c9
 801237c:	080123c9 	.word	0x080123c9
 8012380:	080123c9 	.word	0x080123c9
 8012384:	080123c9 	.word	0x080123c9
 8012388:	080123c9 	.word	0x080123c9
 801238c:	080123c9 	.word	0x080123c9
 8012390:	080123c9 	.word	0x080123c9
 8012394:	080123c1 	.word	0x080123c1
 8012398:	2301      	movs	r3, #1
 801239a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801239e:	e1c0      	b.n	8012722 <UART_SetConfig+0x7aa>
 80123a0:	2304      	movs	r3, #4
 80123a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80123a6:	e1bc      	b.n	8012722 <UART_SetConfig+0x7aa>
 80123a8:	2308      	movs	r3, #8
 80123aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80123ae:	e1b8      	b.n	8012722 <UART_SetConfig+0x7aa>
 80123b0:	2310      	movs	r3, #16
 80123b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80123b6:	e1b4      	b.n	8012722 <UART_SetConfig+0x7aa>
 80123b8:	2320      	movs	r3, #32
 80123ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80123be:	e1b0      	b.n	8012722 <UART_SetConfig+0x7aa>
 80123c0:	2340      	movs	r3, #64	; 0x40
 80123c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80123c6:	e1ac      	b.n	8012722 <UART_SetConfig+0x7aa>
 80123c8:	2380      	movs	r3, #128	; 0x80
 80123ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80123ce:	e1a8      	b.n	8012722 <UART_SetConfig+0x7aa>
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	4a75      	ldr	r2, [pc, #468]	; (80125ac <UART_SetConfig+0x634>)
 80123d6:	4293      	cmp	r3, r2
 80123d8:	d130      	bne.n	801243c <UART_SetConfig+0x4c4>
 80123da:	4b73      	ldr	r3, [pc, #460]	; (80125a8 <UART_SetConfig+0x630>)
 80123dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80123de:	f003 0307 	and.w	r3, r3, #7
 80123e2:	2b05      	cmp	r3, #5
 80123e4:	d826      	bhi.n	8012434 <UART_SetConfig+0x4bc>
 80123e6:	a201      	add	r2, pc, #4	; (adr r2, 80123ec <UART_SetConfig+0x474>)
 80123e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123ec:	08012405 	.word	0x08012405
 80123f0:	0801240d 	.word	0x0801240d
 80123f4:	08012415 	.word	0x08012415
 80123f8:	0801241d 	.word	0x0801241d
 80123fc:	08012425 	.word	0x08012425
 8012400:	0801242d 	.word	0x0801242d
 8012404:	2300      	movs	r3, #0
 8012406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801240a:	e18a      	b.n	8012722 <UART_SetConfig+0x7aa>
 801240c:	2304      	movs	r3, #4
 801240e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012412:	e186      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012414:	2308      	movs	r3, #8
 8012416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801241a:	e182      	b.n	8012722 <UART_SetConfig+0x7aa>
 801241c:	2310      	movs	r3, #16
 801241e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012422:	e17e      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012424:	2320      	movs	r3, #32
 8012426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801242a:	e17a      	b.n	8012722 <UART_SetConfig+0x7aa>
 801242c:	2340      	movs	r3, #64	; 0x40
 801242e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012432:	e176      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012434:	2380      	movs	r3, #128	; 0x80
 8012436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801243a:	e172      	b.n	8012722 <UART_SetConfig+0x7aa>
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	4a5b      	ldr	r2, [pc, #364]	; (80125b0 <UART_SetConfig+0x638>)
 8012442:	4293      	cmp	r3, r2
 8012444:	d130      	bne.n	80124a8 <UART_SetConfig+0x530>
 8012446:	4b58      	ldr	r3, [pc, #352]	; (80125a8 <UART_SetConfig+0x630>)
 8012448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801244a:	f003 0307 	and.w	r3, r3, #7
 801244e:	2b05      	cmp	r3, #5
 8012450:	d826      	bhi.n	80124a0 <UART_SetConfig+0x528>
 8012452:	a201      	add	r2, pc, #4	; (adr r2, 8012458 <UART_SetConfig+0x4e0>)
 8012454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012458:	08012471 	.word	0x08012471
 801245c:	08012479 	.word	0x08012479
 8012460:	08012481 	.word	0x08012481
 8012464:	08012489 	.word	0x08012489
 8012468:	08012491 	.word	0x08012491
 801246c:	08012499 	.word	0x08012499
 8012470:	2300      	movs	r3, #0
 8012472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012476:	e154      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012478:	2304      	movs	r3, #4
 801247a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801247e:	e150      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012480:	2308      	movs	r3, #8
 8012482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012486:	e14c      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012488:	2310      	movs	r3, #16
 801248a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801248e:	e148      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012490:	2320      	movs	r3, #32
 8012492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012496:	e144      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012498:	2340      	movs	r3, #64	; 0x40
 801249a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801249e:	e140      	b.n	8012722 <UART_SetConfig+0x7aa>
 80124a0:	2380      	movs	r3, #128	; 0x80
 80124a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80124a6:	e13c      	b.n	8012722 <UART_SetConfig+0x7aa>
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	4a41      	ldr	r2, [pc, #260]	; (80125b4 <UART_SetConfig+0x63c>)
 80124ae:	4293      	cmp	r3, r2
 80124b0:	f040 8082 	bne.w	80125b8 <UART_SetConfig+0x640>
 80124b4:	4b3c      	ldr	r3, [pc, #240]	; (80125a8 <UART_SetConfig+0x630>)
 80124b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80124b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80124bc:	2b28      	cmp	r3, #40	; 0x28
 80124be:	d86d      	bhi.n	801259c <UART_SetConfig+0x624>
 80124c0:	a201      	add	r2, pc, #4	; (adr r2, 80124c8 <UART_SetConfig+0x550>)
 80124c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124c6:	bf00      	nop
 80124c8:	0801256d 	.word	0x0801256d
 80124cc:	0801259d 	.word	0x0801259d
 80124d0:	0801259d 	.word	0x0801259d
 80124d4:	0801259d 	.word	0x0801259d
 80124d8:	0801259d 	.word	0x0801259d
 80124dc:	0801259d 	.word	0x0801259d
 80124e0:	0801259d 	.word	0x0801259d
 80124e4:	0801259d 	.word	0x0801259d
 80124e8:	08012575 	.word	0x08012575
 80124ec:	0801259d 	.word	0x0801259d
 80124f0:	0801259d 	.word	0x0801259d
 80124f4:	0801259d 	.word	0x0801259d
 80124f8:	0801259d 	.word	0x0801259d
 80124fc:	0801259d 	.word	0x0801259d
 8012500:	0801259d 	.word	0x0801259d
 8012504:	0801259d 	.word	0x0801259d
 8012508:	0801257d 	.word	0x0801257d
 801250c:	0801259d 	.word	0x0801259d
 8012510:	0801259d 	.word	0x0801259d
 8012514:	0801259d 	.word	0x0801259d
 8012518:	0801259d 	.word	0x0801259d
 801251c:	0801259d 	.word	0x0801259d
 8012520:	0801259d 	.word	0x0801259d
 8012524:	0801259d 	.word	0x0801259d
 8012528:	08012585 	.word	0x08012585
 801252c:	0801259d 	.word	0x0801259d
 8012530:	0801259d 	.word	0x0801259d
 8012534:	0801259d 	.word	0x0801259d
 8012538:	0801259d 	.word	0x0801259d
 801253c:	0801259d 	.word	0x0801259d
 8012540:	0801259d 	.word	0x0801259d
 8012544:	0801259d 	.word	0x0801259d
 8012548:	0801258d 	.word	0x0801258d
 801254c:	0801259d 	.word	0x0801259d
 8012550:	0801259d 	.word	0x0801259d
 8012554:	0801259d 	.word	0x0801259d
 8012558:	0801259d 	.word	0x0801259d
 801255c:	0801259d 	.word	0x0801259d
 8012560:	0801259d 	.word	0x0801259d
 8012564:	0801259d 	.word	0x0801259d
 8012568:	08012595 	.word	0x08012595
 801256c:	2301      	movs	r3, #1
 801256e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012572:	e0d6      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012574:	2304      	movs	r3, #4
 8012576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801257a:	e0d2      	b.n	8012722 <UART_SetConfig+0x7aa>
 801257c:	2308      	movs	r3, #8
 801257e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012582:	e0ce      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012584:	2310      	movs	r3, #16
 8012586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801258a:	e0ca      	b.n	8012722 <UART_SetConfig+0x7aa>
 801258c:	2320      	movs	r3, #32
 801258e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012592:	e0c6      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012594:	2340      	movs	r3, #64	; 0x40
 8012596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801259a:	e0c2      	b.n	8012722 <UART_SetConfig+0x7aa>
 801259c:	2380      	movs	r3, #128	; 0x80
 801259e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80125a2:	e0be      	b.n	8012722 <UART_SetConfig+0x7aa>
 80125a4:	40011400 	.word	0x40011400
 80125a8:	58024400 	.word	0x58024400
 80125ac:	40007800 	.word	0x40007800
 80125b0:	40007c00 	.word	0x40007c00
 80125b4:	40011800 	.word	0x40011800
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	4aad      	ldr	r2, [pc, #692]	; (8012874 <UART_SetConfig+0x8fc>)
 80125be:	4293      	cmp	r3, r2
 80125c0:	d176      	bne.n	80126b0 <UART_SetConfig+0x738>
 80125c2:	4bad      	ldr	r3, [pc, #692]	; (8012878 <UART_SetConfig+0x900>)
 80125c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80125c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80125ca:	2b28      	cmp	r3, #40	; 0x28
 80125cc:	d86c      	bhi.n	80126a8 <UART_SetConfig+0x730>
 80125ce:	a201      	add	r2, pc, #4	; (adr r2, 80125d4 <UART_SetConfig+0x65c>)
 80125d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125d4:	08012679 	.word	0x08012679
 80125d8:	080126a9 	.word	0x080126a9
 80125dc:	080126a9 	.word	0x080126a9
 80125e0:	080126a9 	.word	0x080126a9
 80125e4:	080126a9 	.word	0x080126a9
 80125e8:	080126a9 	.word	0x080126a9
 80125ec:	080126a9 	.word	0x080126a9
 80125f0:	080126a9 	.word	0x080126a9
 80125f4:	08012681 	.word	0x08012681
 80125f8:	080126a9 	.word	0x080126a9
 80125fc:	080126a9 	.word	0x080126a9
 8012600:	080126a9 	.word	0x080126a9
 8012604:	080126a9 	.word	0x080126a9
 8012608:	080126a9 	.word	0x080126a9
 801260c:	080126a9 	.word	0x080126a9
 8012610:	080126a9 	.word	0x080126a9
 8012614:	08012689 	.word	0x08012689
 8012618:	080126a9 	.word	0x080126a9
 801261c:	080126a9 	.word	0x080126a9
 8012620:	080126a9 	.word	0x080126a9
 8012624:	080126a9 	.word	0x080126a9
 8012628:	080126a9 	.word	0x080126a9
 801262c:	080126a9 	.word	0x080126a9
 8012630:	080126a9 	.word	0x080126a9
 8012634:	08012691 	.word	0x08012691
 8012638:	080126a9 	.word	0x080126a9
 801263c:	080126a9 	.word	0x080126a9
 8012640:	080126a9 	.word	0x080126a9
 8012644:	080126a9 	.word	0x080126a9
 8012648:	080126a9 	.word	0x080126a9
 801264c:	080126a9 	.word	0x080126a9
 8012650:	080126a9 	.word	0x080126a9
 8012654:	08012699 	.word	0x08012699
 8012658:	080126a9 	.word	0x080126a9
 801265c:	080126a9 	.word	0x080126a9
 8012660:	080126a9 	.word	0x080126a9
 8012664:	080126a9 	.word	0x080126a9
 8012668:	080126a9 	.word	0x080126a9
 801266c:	080126a9 	.word	0x080126a9
 8012670:	080126a9 	.word	0x080126a9
 8012674:	080126a1 	.word	0x080126a1
 8012678:	2301      	movs	r3, #1
 801267a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801267e:	e050      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012680:	2304      	movs	r3, #4
 8012682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012686:	e04c      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012688:	2308      	movs	r3, #8
 801268a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801268e:	e048      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012690:	2310      	movs	r3, #16
 8012692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012696:	e044      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012698:	2320      	movs	r3, #32
 801269a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801269e:	e040      	b.n	8012722 <UART_SetConfig+0x7aa>
 80126a0:	2340      	movs	r3, #64	; 0x40
 80126a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80126a6:	e03c      	b.n	8012722 <UART_SetConfig+0x7aa>
 80126a8:	2380      	movs	r3, #128	; 0x80
 80126aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80126ae:	e038      	b.n	8012722 <UART_SetConfig+0x7aa>
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	4a71      	ldr	r2, [pc, #452]	; (801287c <UART_SetConfig+0x904>)
 80126b6:	4293      	cmp	r3, r2
 80126b8:	d130      	bne.n	801271c <UART_SetConfig+0x7a4>
 80126ba:	4b6f      	ldr	r3, [pc, #444]	; (8012878 <UART_SetConfig+0x900>)
 80126bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80126be:	f003 0307 	and.w	r3, r3, #7
 80126c2:	2b05      	cmp	r3, #5
 80126c4:	d826      	bhi.n	8012714 <UART_SetConfig+0x79c>
 80126c6:	a201      	add	r2, pc, #4	; (adr r2, 80126cc <UART_SetConfig+0x754>)
 80126c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126cc:	080126e5 	.word	0x080126e5
 80126d0:	080126ed 	.word	0x080126ed
 80126d4:	080126f5 	.word	0x080126f5
 80126d8:	080126fd 	.word	0x080126fd
 80126dc:	08012705 	.word	0x08012705
 80126e0:	0801270d 	.word	0x0801270d
 80126e4:	2302      	movs	r3, #2
 80126e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80126ea:	e01a      	b.n	8012722 <UART_SetConfig+0x7aa>
 80126ec:	2304      	movs	r3, #4
 80126ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80126f2:	e016      	b.n	8012722 <UART_SetConfig+0x7aa>
 80126f4:	2308      	movs	r3, #8
 80126f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80126fa:	e012      	b.n	8012722 <UART_SetConfig+0x7aa>
 80126fc:	2310      	movs	r3, #16
 80126fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012702:	e00e      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012704:	2320      	movs	r3, #32
 8012706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801270a:	e00a      	b.n	8012722 <UART_SetConfig+0x7aa>
 801270c:	2340      	movs	r3, #64	; 0x40
 801270e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012712:	e006      	b.n	8012722 <UART_SetConfig+0x7aa>
 8012714:	2380      	movs	r3, #128	; 0x80
 8012716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801271a:	e002      	b.n	8012722 <UART_SetConfig+0x7aa>
 801271c:	2380      	movs	r3, #128	; 0x80
 801271e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	4a55      	ldr	r2, [pc, #340]	; (801287c <UART_SetConfig+0x904>)
 8012728:	4293      	cmp	r3, r2
 801272a:	f040 80f0 	bne.w	801290e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801272e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012732:	2b20      	cmp	r3, #32
 8012734:	dc46      	bgt.n	80127c4 <UART_SetConfig+0x84c>
 8012736:	2b02      	cmp	r3, #2
 8012738:	db75      	blt.n	8012826 <UART_SetConfig+0x8ae>
 801273a:	3b02      	subs	r3, #2
 801273c:	2b1e      	cmp	r3, #30
 801273e:	d872      	bhi.n	8012826 <UART_SetConfig+0x8ae>
 8012740:	a201      	add	r2, pc, #4	; (adr r2, 8012748 <UART_SetConfig+0x7d0>)
 8012742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012746:	bf00      	nop
 8012748:	080127cb 	.word	0x080127cb
 801274c:	08012827 	.word	0x08012827
 8012750:	080127d3 	.word	0x080127d3
 8012754:	08012827 	.word	0x08012827
 8012758:	08012827 	.word	0x08012827
 801275c:	08012827 	.word	0x08012827
 8012760:	080127e3 	.word	0x080127e3
 8012764:	08012827 	.word	0x08012827
 8012768:	08012827 	.word	0x08012827
 801276c:	08012827 	.word	0x08012827
 8012770:	08012827 	.word	0x08012827
 8012774:	08012827 	.word	0x08012827
 8012778:	08012827 	.word	0x08012827
 801277c:	08012827 	.word	0x08012827
 8012780:	080127f3 	.word	0x080127f3
 8012784:	08012827 	.word	0x08012827
 8012788:	08012827 	.word	0x08012827
 801278c:	08012827 	.word	0x08012827
 8012790:	08012827 	.word	0x08012827
 8012794:	08012827 	.word	0x08012827
 8012798:	08012827 	.word	0x08012827
 801279c:	08012827 	.word	0x08012827
 80127a0:	08012827 	.word	0x08012827
 80127a4:	08012827 	.word	0x08012827
 80127a8:	08012827 	.word	0x08012827
 80127ac:	08012827 	.word	0x08012827
 80127b0:	08012827 	.word	0x08012827
 80127b4:	08012827 	.word	0x08012827
 80127b8:	08012827 	.word	0x08012827
 80127bc:	08012827 	.word	0x08012827
 80127c0:	08012819 	.word	0x08012819
 80127c4:	2b40      	cmp	r3, #64	; 0x40
 80127c6:	d02a      	beq.n	801281e <UART_SetConfig+0x8a6>
 80127c8:	e02d      	b.n	8012826 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80127ca:	f7fc fd77 	bl	800f2bc <HAL_RCCEx_GetD3PCLK1Freq>
 80127ce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80127d0:	e02f      	b.n	8012832 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80127d2:	f107 0314 	add.w	r3, r7, #20
 80127d6:	4618      	mov	r0, r3
 80127d8:	f7fc fd86 	bl	800f2e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80127dc:	69bb      	ldr	r3, [r7, #24]
 80127de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80127e0:	e027      	b.n	8012832 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80127e2:	f107 0308 	add.w	r3, r7, #8
 80127e6:	4618      	mov	r0, r3
 80127e8:	f7fc fed2 	bl	800f590 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80127f0:	e01f      	b.n	8012832 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80127f2:	4b21      	ldr	r3, [pc, #132]	; (8012878 <UART_SetConfig+0x900>)
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	f003 0320 	and.w	r3, r3, #32
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d009      	beq.n	8012812 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80127fe:	4b1e      	ldr	r3, [pc, #120]	; (8012878 <UART_SetConfig+0x900>)
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	08db      	lsrs	r3, r3, #3
 8012804:	f003 0303 	and.w	r3, r3, #3
 8012808:	4a1d      	ldr	r2, [pc, #116]	; (8012880 <UART_SetConfig+0x908>)
 801280a:	fa22 f303 	lsr.w	r3, r2, r3
 801280e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012810:	e00f      	b.n	8012832 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8012812:	4b1b      	ldr	r3, [pc, #108]	; (8012880 <UART_SetConfig+0x908>)
 8012814:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012816:	e00c      	b.n	8012832 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012818:	4b1a      	ldr	r3, [pc, #104]	; (8012884 <UART_SetConfig+0x90c>)
 801281a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801281c:	e009      	b.n	8012832 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801281e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012822:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012824:	e005      	b.n	8012832 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8012826:	2300      	movs	r3, #0
 8012828:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801282a:	2301      	movs	r3, #1
 801282c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8012830:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012834:	2b00      	cmp	r3, #0
 8012836:	f000 81e6 	beq.w	8012c06 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801283e:	4a12      	ldr	r2, [pc, #72]	; (8012888 <UART_SetConfig+0x910>)
 8012840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012844:	461a      	mov	r2, r3
 8012846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012848:	fbb3 f3f2 	udiv	r3, r3, r2
 801284c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	685a      	ldr	r2, [r3, #4]
 8012852:	4613      	mov	r3, r2
 8012854:	005b      	lsls	r3, r3, #1
 8012856:	4413      	add	r3, r2
 8012858:	6a3a      	ldr	r2, [r7, #32]
 801285a:	429a      	cmp	r2, r3
 801285c:	d305      	bcc.n	801286a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	685b      	ldr	r3, [r3, #4]
 8012862:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012864:	6a3a      	ldr	r2, [r7, #32]
 8012866:	429a      	cmp	r2, r3
 8012868:	d910      	bls.n	801288c <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 801286a:	2301      	movs	r3, #1
 801286c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8012870:	e1c9      	b.n	8012c06 <UART_SetConfig+0xc8e>
 8012872:	bf00      	nop
 8012874:	40011c00 	.word	0x40011c00
 8012878:	58024400 	.word	0x58024400
 801287c:	58000c00 	.word	0x58000c00
 8012880:	03d09000 	.word	0x03d09000
 8012884:	003d0900 	.word	0x003d0900
 8012888:	080180d0 	.word	0x080180d0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801288c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801288e:	4618      	mov	r0, r3
 8012890:	f04f 0100 	mov.w	r1, #0
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012898:	4ac1      	ldr	r2, [pc, #772]	; (8012ba0 <UART_SetConfig+0xc28>)
 801289a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801289e:	b29a      	uxth	r2, r3
 80128a0:	f04f 0300 	mov.w	r3, #0
 80128a4:	f7ed fd8c 	bl	80003c0 <__aeabi_uldivmod>
 80128a8:	4602      	mov	r2, r0
 80128aa:	460b      	mov	r3, r1
 80128ac:	4610      	mov	r0, r2
 80128ae:	4619      	mov	r1, r3
 80128b0:	f04f 0200 	mov.w	r2, #0
 80128b4:	f04f 0300 	mov.w	r3, #0
 80128b8:	020b      	lsls	r3, r1, #8
 80128ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80128be:	0202      	lsls	r2, r0, #8
 80128c0:	6879      	ldr	r1, [r7, #4]
 80128c2:	6849      	ldr	r1, [r1, #4]
 80128c4:	0849      	lsrs	r1, r1, #1
 80128c6:	4608      	mov	r0, r1
 80128c8:	f04f 0100 	mov.w	r1, #0
 80128cc:	1814      	adds	r4, r2, r0
 80128ce:	eb43 0501 	adc.w	r5, r3, r1
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	685b      	ldr	r3, [r3, #4]
 80128d6:	461a      	mov	r2, r3
 80128d8:	f04f 0300 	mov.w	r3, #0
 80128dc:	4620      	mov	r0, r4
 80128de:	4629      	mov	r1, r5
 80128e0:	f7ed fd6e 	bl	80003c0 <__aeabi_uldivmod>
 80128e4:	4602      	mov	r2, r0
 80128e6:	460b      	mov	r3, r1
 80128e8:	4613      	mov	r3, r2
 80128ea:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80128ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80128f2:	d308      	bcc.n	8012906 <UART_SetConfig+0x98e>
 80128f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80128fa:	d204      	bcs.n	8012906 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012902:	60da      	str	r2, [r3, #12]
 8012904:	e17f      	b.n	8012c06 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8012906:	2301      	movs	r3, #1
 8012908:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801290c:	e17b      	b.n	8012c06 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	69db      	ldr	r3, [r3, #28]
 8012912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012916:	f040 80bd 	bne.w	8012a94 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 801291a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801291e:	2b20      	cmp	r3, #32
 8012920:	dc48      	bgt.n	80129b4 <UART_SetConfig+0xa3c>
 8012922:	2b00      	cmp	r3, #0
 8012924:	db7b      	blt.n	8012a1e <UART_SetConfig+0xaa6>
 8012926:	2b20      	cmp	r3, #32
 8012928:	d879      	bhi.n	8012a1e <UART_SetConfig+0xaa6>
 801292a:	a201      	add	r2, pc, #4	; (adr r2, 8012930 <UART_SetConfig+0x9b8>)
 801292c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012930:	080129bb 	.word	0x080129bb
 8012934:	080129c3 	.word	0x080129c3
 8012938:	08012a1f 	.word	0x08012a1f
 801293c:	08012a1f 	.word	0x08012a1f
 8012940:	080129cb 	.word	0x080129cb
 8012944:	08012a1f 	.word	0x08012a1f
 8012948:	08012a1f 	.word	0x08012a1f
 801294c:	08012a1f 	.word	0x08012a1f
 8012950:	080129db 	.word	0x080129db
 8012954:	08012a1f 	.word	0x08012a1f
 8012958:	08012a1f 	.word	0x08012a1f
 801295c:	08012a1f 	.word	0x08012a1f
 8012960:	08012a1f 	.word	0x08012a1f
 8012964:	08012a1f 	.word	0x08012a1f
 8012968:	08012a1f 	.word	0x08012a1f
 801296c:	08012a1f 	.word	0x08012a1f
 8012970:	080129eb 	.word	0x080129eb
 8012974:	08012a1f 	.word	0x08012a1f
 8012978:	08012a1f 	.word	0x08012a1f
 801297c:	08012a1f 	.word	0x08012a1f
 8012980:	08012a1f 	.word	0x08012a1f
 8012984:	08012a1f 	.word	0x08012a1f
 8012988:	08012a1f 	.word	0x08012a1f
 801298c:	08012a1f 	.word	0x08012a1f
 8012990:	08012a1f 	.word	0x08012a1f
 8012994:	08012a1f 	.word	0x08012a1f
 8012998:	08012a1f 	.word	0x08012a1f
 801299c:	08012a1f 	.word	0x08012a1f
 80129a0:	08012a1f 	.word	0x08012a1f
 80129a4:	08012a1f 	.word	0x08012a1f
 80129a8:	08012a1f 	.word	0x08012a1f
 80129ac:	08012a1f 	.word	0x08012a1f
 80129b0:	08012a11 	.word	0x08012a11
 80129b4:	2b40      	cmp	r3, #64	; 0x40
 80129b6:	d02e      	beq.n	8012a16 <UART_SetConfig+0xa9e>
 80129b8:	e031      	b.n	8012a1e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80129ba:	f7fb f919 	bl	800dbf0 <HAL_RCC_GetPCLK1Freq>
 80129be:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80129c0:	e033      	b.n	8012a2a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80129c2:	f7fb f92b 	bl	800dc1c <HAL_RCC_GetPCLK2Freq>
 80129c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80129c8:	e02f      	b.n	8012a2a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80129ca:	f107 0314 	add.w	r3, r7, #20
 80129ce:	4618      	mov	r0, r3
 80129d0:	f7fc fc8a 	bl	800f2e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80129d4:	69bb      	ldr	r3, [r7, #24]
 80129d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80129d8:	e027      	b.n	8012a2a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80129da:	f107 0308 	add.w	r3, r7, #8
 80129de:	4618      	mov	r0, r3
 80129e0:	f7fc fdd6 	bl	800f590 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80129e8:	e01f      	b.n	8012a2a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80129ea:	4b6e      	ldr	r3, [pc, #440]	; (8012ba4 <UART_SetConfig+0xc2c>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	f003 0320 	and.w	r3, r3, #32
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d009      	beq.n	8012a0a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80129f6:	4b6b      	ldr	r3, [pc, #428]	; (8012ba4 <UART_SetConfig+0xc2c>)
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	08db      	lsrs	r3, r3, #3
 80129fc:	f003 0303 	and.w	r3, r3, #3
 8012a00:	4a69      	ldr	r2, [pc, #420]	; (8012ba8 <UART_SetConfig+0xc30>)
 8012a02:	fa22 f303 	lsr.w	r3, r2, r3
 8012a06:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012a08:	e00f      	b.n	8012a2a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8012a0a:	4b67      	ldr	r3, [pc, #412]	; (8012ba8 <UART_SetConfig+0xc30>)
 8012a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012a0e:	e00c      	b.n	8012a2a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012a10:	4b66      	ldr	r3, [pc, #408]	; (8012bac <UART_SetConfig+0xc34>)
 8012a12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012a14:	e009      	b.n	8012a2a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012a1c:	e005      	b.n	8012a2a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8012a1e:	2300      	movs	r3, #0
 8012a20:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8012a22:	2301      	movs	r3, #1
 8012a24:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8012a28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	f000 80ea 	beq.w	8012c06 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a36:	4a5a      	ldr	r2, [pc, #360]	; (8012ba0 <UART_SetConfig+0xc28>)
 8012a38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012a3c:	461a      	mov	r2, r3
 8012a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a40:	fbb3 f3f2 	udiv	r3, r3, r2
 8012a44:	005a      	lsls	r2, r3, #1
 8012a46:	687b      	ldr	r3, [r7, #4]
 8012a48:	685b      	ldr	r3, [r3, #4]
 8012a4a:	085b      	lsrs	r3, r3, #1
 8012a4c:	441a      	add	r2, r3
 8012a4e:	687b      	ldr	r3, [r7, #4]
 8012a50:	685b      	ldr	r3, [r3, #4]
 8012a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8012a56:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a5a:	2b0f      	cmp	r3, #15
 8012a5c:	d916      	bls.n	8012a8c <UART_SetConfig+0xb14>
 8012a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012a64:	d212      	bcs.n	8012a8c <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a68:	b29b      	uxth	r3, r3
 8012a6a:	f023 030f 	bic.w	r3, r3, #15
 8012a6e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a72:	085b      	lsrs	r3, r3, #1
 8012a74:	b29b      	uxth	r3, r3
 8012a76:	f003 0307 	and.w	r3, r3, #7
 8012a7a:	b29a      	uxth	r2, r3
 8012a7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012a7e:	4313      	orrs	r3, r2
 8012a80:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012a88:	60da      	str	r2, [r3, #12]
 8012a8a:	e0bc      	b.n	8012c06 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8012a8c:	2301      	movs	r3, #1
 8012a8e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8012a92:	e0b8      	b.n	8012c06 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012a94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012a98:	2b20      	cmp	r3, #32
 8012a9a:	dc4b      	bgt.n	8012b34 <UART_SetConfig+0xbbc>
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	f2c0 8087 	blt.w	8012bb0 <UART_SetConfig+0xc38>
 8012aa2:	2b20      	cmp	r3, #32
 8012aa4:	f200 8084 	bhi.w	8012bb0 <UART_SetConfig+0xc38>
 8012aa8:	a201      	add	r2, pc, #4	; (adr r2, 8012ab0 <UART_SetConfig+0xb38>)
 8012aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aae:	bf00      	nop
 8012ab0:	08012b3b 	.word	0x08012b3b
 8012ab4:	08012b43 	.word	0x08012b43
 8012ab8:	08012bb1 	.word	0x08012bb1
 8012abc:	08012bb1 	.word	0x08012bb1
 8012ac0:	08012b4b 	.word	0x08012b4b
 8012ac4:	08012bb1 	.word	0x08012bb1
 8012ac8:	08012bb1 	.word	0x08012bb1
 8012acc:	08012bb1 	.word	0x08012bb1
 8012ad0:	08012b5b 	.word	0x08012b5b
 8012ad4:	08012bb1 	.word	0x08012bb1
 8012ad8:	08012bb1 	.word	0x08012bb1
 8012adc:	08012bb1 	.word	0x08012bb1
 8012ae0:	08012bb1 	.word	0x08012bb1
 8012ae4:	08012bb1 	.word	0x08012bb1
 8012ae8:	08012bb1 	.word	0x08012bb1
 8012aec:	08012bb1 	.word	0x08012bb1
 8012af0:	08012b6b 	.word	0x08012b6b
 8012af4:	08012bb1 	.word	0x08012bb1
 8012af8:	08012bb1 	.word	0x08012bb1
 8012afc:	08012bb1 	.word	0x08012bb1
 8012b00:	08012bb1 	.word	0x08012bb1
 8012b04:	08012bb1 	.word	0x08012bb1
 8012b08:	08012bb1 	.word	0x08012bb1
 8012b0c:	08012bb1 	.word	0x08012bb1
 8012b10:	08012bb1 	.word	0x08012bb1
 8012b14:	08012bb1 	.word	0x08012bb1
 8012b18:	08012bb1 	.word	0x08012bb1
 8012b1c:	08012bb1 	.word	0x08012bb1
 8012b20:	08012bb1 	.word	0x08012bb1
 8012b24:	08012bb1 	.word	0x08012bb1
 8012b28:	08012bb1 	.word	0x08012bb1
 8012b2c:	08012bb1 	.word	0x08012bb1
 8012b30:	08012b91 	.word	0x08012b91
 8012b34:	2b40      	cmp	r3, #64	; 0x40
 8012b36:	d02e      	beq.n	8012b96 <UART_SetConfig+0xc1e>
 8012b38:	e03a      	b.n	8012bb0 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012b3a:	f7fb f859 	bl	800dbf0 <HAL_RCC_GetPCLK1Freq>
 8012b3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8012b40:	e03c      	b.n	8012bbc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012b42:	f7fb f86b 	bl	800dc1c <HAL_RCC_GetPCLK2Freq>
 8012b46:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8012b48:	e038      	b.n	8012bbc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012b4a:	f107 0314 	add.w	r3, r7, #20
 8012b4e:	4618      	mov	r0, r3
 8012b50:	f7fc fbca 	bl	800f2e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012b54:	69bb      	ldr	r3, [r7, #24]
 8012b56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012b58:	e030      	b.n	8012bbc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012b5a:	f107 0308 	add.w	r3, r7, #8
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f7fc fd16 	bl	800f590 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012b68:	e028      	b.n	8012bbc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012b6a:	4b0e      	ldr	r3, [pc, #56]	; (8012ba4 <UART_SetConfig+0xc2c>)
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	f003 0320 	and.w	r3, r3, #32
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d009      	beq.n	8012b8a <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012b76:	4b0b      	ldr	r3, [pc, #44]	; (8012ba4 <UART_SetConfig+0xc2c>)
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	08db      	lsrs	r3, r3, #3
 8012b7c:	f003 0303 	and.w	r3, r3, #3
 8012b80:	4a09      	ldr	r2, [pc, #36]	; (8012ba8 <UART_SetConfig+0xc30>)
 8012b82:	fa22 f303 	lsr.w	r3, r2, r3
 8012b86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012b88:	e018      	b.n	8012bbc <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8012b8a:	4b07      	ldr	r3, [pc, #28]	; (8012ba8 <UART_SetConfig+0xc30>)
 8012b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012b8e:	e015      	b.n	8012bbc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012b90:	4b06      	ldr	r3, [pc, #24]	; (8012bac <UART_SetConfig+0xc34>)
 8012b92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012b94:	e012      	b.n	8012bbc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012b9c:	e00e      	b.n	8012bbc <UART_SetConfig+0xc44>
 8012b9e:	bf00      	nop
 8012ba0:	080180d0 	.word	0x080180d0
 8012ba4:	58024400 	.word	0x58024400
 8012ba8:	03d09000 	.word	0x03d09000
 8012bac:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8012bb4:	2301      	movs	r3, #1
 8012bb6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8012bba:	bf00      	nop
    }

    if (pclk != 0U)
 8012bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d021      	beq.n	8012c06 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bc6:	4a1a      	ldr	r2, [pc, #104]	; (8012c30 <UART_SetConfig+0xcb8>)
 8012bc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012bcc:	461a      	mov	r2, r3
 8012bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bd0:	fbb3 f2f2 	udiv	r2, r3, r2
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	685b      	ldr	r3, [r3, #4]
 8012bd8:	085b      	lsrs	r3, r3, #1
 8012bda:	441a      	add	r2, r3
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	685b      	ldr	r3, [r3, #4]
 8012be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8012be4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be8:	2b0f      	cmp	r3, #15
 8012bea:	d909      	bls.n	8012c00 <UART_SetConfig+0xc88>
 8012bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012bf2:	d205      	bcs.n	8012c00 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf6:	b29a      	uxth	r2, r3
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	60da      	str	r2, [r3, #12]
 8012bfe:	e002      	b.n	8012c06 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8012c00:	2301      	movs	r3, #1
 8012c02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	2201      	movs	r2, #1
 8012c0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	2201      	movs	r2, #1
 8012c12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	2200      	movs	r2, #0
 8012c1a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	2200      	movs	r2, #0
 8012c20:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8012c22:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8012c26:	4618      	mov	r0, r3
 8012c28:	3738      	adds	r7, #56	; 0x38
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8012c2e:	bf00      	nop
 8012c30:	080180d0 	.word	0x080180d0

08012c34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012c34:	b480      	push	{r7}
 8012c36:	b083      	sub	sp, #12
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c40:	f003 0301 	and.w	r3, r3, #1
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d00a      	beq.n	8012c5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	685b      	ldr	r3, [r3, #4]
 8012c4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	430a      	orrs	r2, r1
 8012c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c62:	f003 0302 	and.w	r3, r3, #2
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d00a      	beq.n	8012c80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	685b      	ldr	r3, [r3, #4]
 8012c70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	430a      	orrs	r2, r1
 8012c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c84:	f003 0304 	and.w	r3, r3, #4
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d00a      	beq.n	8012ca2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	685b      	ldr	r3, [r3, #4]
 8012c92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	430a      	orrs	r2, r1
 8012ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ca6:	f003 0308 	and.w	r3, r3, #8
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d00a      	beq.n	8012cc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	681b      	ldr	r3, [r3, #0]
 8012cb2:	685b      	ldr	r3, [r3, #4]
 8012cb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	430a      	orrs	r2, r1
 8012cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cc8:	f003 0310 	and.w	r3, r3, #16
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d00a      	beq.n	8012ce6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	689b      	ldr	r3, [r3, #8]
 8012cd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	430a      	orrs	r2, r1
 8012ce4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cea:	f003 0320 	and.w	r3, r3, #32
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d00a      	beq.n	8012d08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	689b      	ldr	r3, [r3, #8]
 8012cf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	430a      	orrs	r2, r1
 8012d06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d01a      	beq.n	8012d4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	685b      	ldr	r3, [r3, #4]
 8012d1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	430a      	orrs	r2, r1
 8012d28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012d32:	d10a      	bne.n	8012d4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	681b      	ldr	r3, [r3, #0]
 8012d38:	685b      	ldr	r3, [r3, #4]
 8012d3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	430a      	orrs	r2, r1
 8012d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d00a      	beq.n	8012d6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	685b      	ldr	r3, [r3, #4]
 8012d5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	430a      	orrs	r2, r1
 8012d6a:	605a      	str	r2, [r3, #4]
  }
}
 8012d6c:	bf00      	nop
 8012d6e:	370c      	adds	r7, #12
 8012d70:	46bd      	mov	sp, r7
 8012d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d76:	4770      	bx	lr

08012d78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b086      	sub	sp, #24
 8012d7c:	af02      	add	r7, sp, #8
 8012d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	2200      	movs	r2, #0
 8012d84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012d88:	f7f7 fa30 	bl	800a1ec <HAL_GetTick>
 8012d8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	f003 0308 	and.w	r3, r3, #8
 8012d98:	2b08      	cmp	r3, #8
 8012d9a:	d10e      	bne.n	8012dba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012d9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012da0:	9300      	str	r3, [sp, #0]
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	2200      	movs	r2, #0
 8012da6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012daa:	6878      	ldr	r0, [r7, #4]
 8012dac:	f000 f82f 	bl	8012e0e <UART_WaitOnFlagUntilTimeout>
 8012db0:	4603      	mov	r3, r0
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d001      	beq.n	8012dba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012db6:	2303      	movs	r3, #3
 8012db8:	e025      	b.n	8012e06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	f003 0304 	and.w	r3, r3, #4
 8012dc4:	2b04      	cmp	r3, #4
 8012dc6:	d10e      	bne.n	8012de6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012dc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012dcc:	9300      	str	r3, [sp, #0]
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012dd6:	6878      	ldr	r0, [r7, #4]
 8012dd8:	f000 f819 	bl	8012e0e <UART_WaitOnFlagUntilTimeout>
 8012ddc:	4603      	mov	r3, r0
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d001      	beq.n	8012de6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012de2:	2303      	movs	r3, #3
 8012de4:	e00f      	b.n	8012e06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	2220      	movs	r2, #32
 8012dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2220      	movs	r2, #32
 8012df2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	2200      	movs	r2, #0
 8012dfa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	2200      	movs	r2, #0
 8012e00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012e04:	2300      	movs	r3, #0
}
 8012e06:	4618      	mov	r0, r3
 8012e08:	3710      	adds	r7, #16
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	bd80      	pop	{r7, pc}

08012e0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012e0e:	b580      	push	{r7, lr}
 8012e10:	b09c      	sub	sp, #112	; 0x70
 8012e12:	af00      	add	r7, sp, #0
 8012e14:	60f8      	str	r0, [r7, #12]
 8012e16:	60b9      	str	r1, [r7, #8]
 8012e18:	603b      	str	r3, [r7, #0]
 8012e1a:	4613      	mov	r3, r2
 8012e1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012e1e:	e0a9      	b.n	8012f74 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012e20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e26:	f000 80a5 	beq.w	8012f74 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012e2a:	f7f7 f9df 	bl	800a1ec <HAL_GetTick>
 8012e2e:	4602      	mov	r2, r0
 8012e30:	683b      	ldr	r3, [r7, #0]
 8012e32:	1ad3      	subs	r3, r2, r3
 8012e34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012e36:	429a      	cmp	r2, r3
 8012e38:	d302      	bcc.n	8012e40 <UART_WaitOnFlagUntilTimeout+0x32>
 8012e3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d140      	bne.n	8012ec2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012e48:	e853 3f00 	ldrex	r3, [r3]
 8012e4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8012e54:	667b      	str	r3, [r7, #100]	; 0x64
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	461a      	mov	r2, r3
 8012e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012e60:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012e64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012e66:	e841 2300 	strex	r3, r2, [r1]
 8012e6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8012e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d1e6      	bne.n	8012e40 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	3308      	adds	r3, #8
 8012e78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e7c:	e853 3f00 	ldrex	r3, [r3]
 8012e80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e84:	f023 0301 	bic.w	r3, r3, #1
 8012e88:	663b      	str	r3, [r7, #96]	; 0x60
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	3308      	adds	r3, #8
 8012e90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8012e92:	64ba      	str	r2, [r7, #72]	; 0x48
 8012e94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012e98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012e9a:	e841 2300 	strex	r3, r2, [r1]
 8012e9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8012ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d1e5      	bne.n	8012e72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8012ea6:	68fb      	ldr	r3, [r7, #12]
 8012ea8:	2220      	movs	r2, #32
 8012eaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	2220      	movs	r2, #32
 8012eb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	2200      	movs	r2, #0
 8012eba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8012ebe:	2303      	movs	r3, #3
 8012ec0:	e069      	b.n	8012f96 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	f003 0304 	and.w	r3, r3, #4
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d051      	beq.n	8012f74 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	69db      	ldr	r3, [r3, #28]
 8012ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012eda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012ede:	d149      	bne.n	8012f74 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012ee8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ef2:	e853 3f00 	ldrex	r3, [r3]
 8012ef6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012efa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8012efe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	461a      	mov	r2, r3
 8012f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012f08:	637b      	str	r3, [r7, #52]	; 0x34
 8012f0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012f0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012f10:	e841 2300 	strex	r3, r2, [r1]
 8012f14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8012f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d1e6      	bne.n	8012eea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	3308      	adds	r3, #8
 8012f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012f24:	697b      	ldr	r3, [r7, #20]
 8012f26:	e853 3f00 	ldrex	r3, [r3]
 8012f2a:	613b      	str	r3, [r7, #16]
   return(result);
 8012f2c:	693b      	ldr	r3, [r7, #16]
 8012f2e:	f023 0301 	bic.w	r3, r3, #1
 8012f32:	66bb      	str	r3, [r7, #104]	; 0x68
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	3308      	adds	r3, #8
 8012f3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012f3c:	623a      	str	r2, [r7, #32]
 8012f3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012f40:	69f9      	ldr	r1, [r7, #28]
 8012f42:	6a3a      	ldr	r2, [r7, #32]
 8012f44:	e841 2300 	strex	r3, r2, [r1]
 8012f48:	61bb      	str	r3, [r7, #24]
   return(result);
 8012f4a:	69bb      	ldr	r3, [r7, #24]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d1e5      	bne.n	8012f1c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	2220      	movs	r2, #32
 8012f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	2220      	movs	r2, #32
 8012f5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	2220      	movs	r2, #32
 8012f64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8012f70:	2303      	movs	r3, #3
 8012f72:	e010      	b.n	8012f96 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	69da      	ldr	r2, [r3, #28]
 8012f7a:	68bb      	ldr	r3, [r7, #8]
 8012f7c:	4013      	ands	r3, r2
 8012f7e:	68ba      	ldr	r2, [r7, #8]
 8012f80:	429a      	cmp	r2, r3
 8012f82:	bf0c      	ite	eq
 8012f84:	2301      	moveq	r3, #1
 8012f86:	2300      	movne	r3, #0
 8012f88:	b2db      	uxtb	r3, r3
 8012f8a:	461a      	mov	r2, r3
 8012f8c:	79fb      	ldrb	r3, [r7, #7]
 8012f8e:	429a      	cmp	r2, r3
 8012f90:	f43f af46 	beq.w	8012e20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012f94:	2300      	movs	r3, #0
}
 8012f96:	4618      	mov	r0, r3
 8012f98:	3770      	adds	r7, #112	; 0x70
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	bd80      	pop	{r7, pc}
	...

08012fa0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012fa0:	b480      	push	{r7}
 8012fa2:	b0a3      	sub	sp, #140	; 0x8c
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	60f8      	str	r0, [r7, #12]
 8012fa8:	60b9      	str	r1, [r7, #8]
 8012faa:	4613      	mov	r3, r2
 8012fac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	68ba      	ldr	r2, [r7, #8]
 8012fb2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	88fa      	ldrh	r2, [r7, #6]
 8012fb8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8012fbc:	68fb      	ldr	r3, [r7, #12]
 8012fbe:	88fa      	ldrh	r2, [r7, #6]
 8012fc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	2200      	movs	r2, #0
 8012fc8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	689b      	ldr	r3, [r3, #8]
 8012fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012fd2:	d10e      	bne.n	8012ff2 <UART_Start_Receive_IT+0x52>
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	691b      	ldr	r3, [r3, #16]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d105      	bne.n	8012fe8 <UART_Start_Receive_IT+0x48>
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	f240 12ff 	movw	r2, #511	; 0x1ff
 8012fe2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012fe6:	e02d      	b.n	8013044 <UART_Start_Receive_IT+0xa4>
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	22ff      	movs	r2, #255	; 0xff
 8012fec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8012ff0:	e028      	b.n	8013044 <UART_Start_Receive_IT+0xa4>
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	689b      	ldr	r3, [r3, #8]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d10d      	bne.n	8013016 <UART_Start_Receive_IT+0x76>
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	691b      	ldr	r3, [r3, #16]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d104      	bne.n	801300c <UART_Start_Receive_IT+0x6c>
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	22ff      	movs	r2, #255	; 0xff
 8013006:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801300a:	e01b      	b.n	8013044 <UART_Start_Receive_IT+0xa4>
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	227f      	movs	r2, #127	; 0x7f
 8013010:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013014:	e016      	b.n	8013044 <UART_Start_Receive_IT+0xa4>
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	689b      	ldr	r3, [r3, #8]
 801301a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801301e:	d10d      	bne.n	801303c <UART_Start_Receive_IT+0x9c>
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	691b      	ldr	r3, [r3, #16]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d104      	bne.n	8013032 <UART_Start_Receive_IT+0x92>
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	227f      	movs	r2, #127	; 0x7f
 801302c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013030:	e008      	b.n	8013044 <UART_Start_Receive_IT+0xa4>
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	223f      	movs	r2, #63	; 0x3f
 8013036:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801303a:	e003      	b.n	8013044 <UART_Start_Receive_IT+0xa4>
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	2200      	movs	r2, #0
 8013040:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	2200      	movs	r2, #0
 8013048:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801304c:	68fb      	ldr	r3, [r7, #12]
 801304e:	2222      	movs	r2, #34	; 0x22
 8013050:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	3308      	adds	r3, #8
 801305a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801305c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801305e:	e853 3f00 	ldrex	r3, [r3]
 8013062:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8013064:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013066:	f043 0301 	orr.w	r3, r3, #1
 801306a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	3308      	adds	r3, #8
 8013074:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013078:	673a      	str	r2, [r7, #112]	; 0x70
 801307a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801307c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801307e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013080:	e841 2300 	strex	r3, r2, [r1]
 8013084:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8013086:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013088:	2b00      	cmp	r3, #0
 801308a:	d1e3      	bne.n	8013054 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013090:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013094:	d153      	bne.n	801313e <UART_Start_Receive_IT+0x19e>
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801309c:	88fa      	ldrh	r2, [r7, #6]
 801309e:	429a      	cmp	r2, r3
 80130a0:	d34d      	bcc.n	801313e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	689b      	ldr	r3, [r3, #8]
 80130a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80130aa:	d107      	bne.n	80130bc <UART_Start_Receive_IT+0x11c>
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	691b      	ldr	r3, [r3, #16]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d103      	bne.n	80130bc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	4a4b      	ldr	r2, [pc, #300]	; (80131e4 <UART_Start_Receive_IT+0x244>)
 80130b8:	671a      	str	r2, [r3, #112]	; 0x70
 80130ba:	e002      	b.n	80130c2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	4a4a      	ldr	r2, [pc, #296]	; (80131e8 <UART_Start_Receive_IT+0x248>)
 80130c0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	2200      	movs	r2, #0
 80130c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80130ca:	68fb      	ldr	r3, [r7, #12]
 80130cc:	691b      	ldr	r3, [r3, #16]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d01a      	beq.n	8013108 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80130d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130da:	e853 3f00 	ldrex	r3, [r3]
 80130de:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80130e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80130e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80130e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	461a      	mov	r2, r3
 80130f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80130f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80130f6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80130f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80130fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80130fc:	e841 2300 	strex	r3, r2, [r1]
 8013100:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8013102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013104:	2b00      	cmp	r3, #0
 8013106:	d1e4      	bne.n	80130d2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	3308      	adds	r3, #8
 801310e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013112:	e853 3f00 	ldrex	r3, [r3]
 8013116:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801311a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801311e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013120:	68fb      	ldr	r3, [r7, #12]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	3308      	adds	r3, #8
 8013126:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013128:	64ba      	str	r2, [r7, #72]	; 0x48
 801312a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801312c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801312e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013130:	e841 2300 	strex	r3, r2, [r1]
 8013134:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8013136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013138:	2b00      	cmp	r3, #0
 801313a:	d1e5      	bne.n	8013108 <UART_Start_Receive_IT+0x168>
 801313c:	e04a      	b.n	80131d4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	689b      	ldr	r3, [r3, #8]
 8013142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013146:	d107      	bne.n	8013158 <UART_Start_Receive_IT+0x1b8>
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	691b      	ldr	r3, [r3, #16]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d103      	bne.n	8013158 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	4a26      	ldr	r2, [pc, #152]	; (80131ec <UART_Start_Receive_IT+0x24c>)
 8013154:	671a      	str	r2, [r3, #112]	; 0x70
 8013156:	e002      	b.n	801315e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	4a25      	ldr	r2, [pc, #148]	; (80131f0 <UART_Start_Receive_IT+0x250>)
 801315c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	2200      	movs	r2, #0
 8013162:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	691b      	ldr	r3, [r3, #16]
 801316a:	2b00      	cmp	r3, #0
 801316c:	d019      	beq.n	80131a2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013176:	e853 3f00 	ldrex	r3, [r3]
 801317a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801317e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8013182:	677b      	str	r3, [r7, #116]	; 0x74
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	461a      	mov	r2, r3
 801318a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801318c:	637b      	str	r3, [r7, #52]	; 0x34
 801318e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013190:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013192:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013194:	e841 2300 	strex	r3, r2, [r1]
 8013198:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801319a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801319c:	2b00      	cmp	r3, #0
 801319e:	d1e6      	bne.n	801316e <UART_Start_Receive_IT+0x1ce>
 80131a0:	e018      	b.n	80131d4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80131a8:	697b      	ldr	r3, [r7, #20]
 80131aa:	e853 3f00 	ldrex	r3, [r3]
 80131ae:	613b      	str	r3, [r7, #16]
   return(result);
 80131b0:	693b      	ldr	r3, [r7, #16]
 80131b2:	f043 0320 	orr.w	r3, r3, #32
 80131b6:	67bb      	str	r3, [r7, #120]	; 0x78
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	461a      	mov	r2, r3
 80131be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80131c0:	623b      	str	r3, [r7, #32]
 80131c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80131c4:	69f9      	ldr	r1, [r7, #28]
 80131c6:	6a3a      	ldr	r2, [r7, #32]
 80131c8:	e841 2300 	strex	r3, r2, [r1]
 80131cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80131ce:	69bb      	ldr	r3, [r7, #24]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d1e6      	bne.n	80131a2 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80131d4:	2300      	movs	r3, #0
}
 80131d6:	4618      	mov	r0, r3
 80131d8:	378c      	adds	r7, #140	; 0x8c
 80131da:	46bd      	mov	sp, r7
 80131dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e0:	4770      	bx	lr
 80131e2:	bf00      	nop
 80131e4:	08013c41 	.word	0x08013c41
 80131e8:	08013949 	.word	0x08013949
 80131ec:	080137e7 	.word	0x080137e7
 80131f0:	08013687 	.word	0x08013687

080131f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80131f4:	b480      	push	{r7}
 80131f6:	b095      	sub	sp, #84	; 0x54
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013204:	e853 3f00 	ldrex	r3, [r3]
 8013208:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801320c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013210:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	461a      	mov	r2, r3
 8013218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801321a:	643b      	str	r3, [r7, #64]	; 0x40
 801321c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801321e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013220:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013222:	e841 2300 	strex	r3, r2, [r1]
 8013226:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801322a:	2b00      	cmp	r3, #0
 801322c:	d1e6      	bne.n	80131fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	3308      	adds	r3, #8
 8013234:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013236:	6a3b      	ldr	r3, [r7, #32]
 8013238:	e853 3f00 	ldrex	r3, [r3]
 801323c:	61fb      	str	r3, [r7, #28]
   return(result);
 801323e:	69fa      	ldr	r2, [r7, #28]
 8013240:	4b1e      	ldr	r3, [pc, #120]	; (80132bc <UART_EndRxTransfer+0xc8>)
 8013242:	4013      	ands	r3, r2
 8013244:	64bb      	str	r3, [r7, #72]	; 0x48
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	3308      	adds	r3, #8
 801324c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801324e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013250:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013252:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013256:	e841 2300 	strex	r3, r2, [r1]
 801325a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801325e:	2b00      	cmp	r3, #0
 8013260:	d1e5      	bne.n	801322e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013266:	2b01      	cmp	r3, #1
 8013268:	d118      	bne.n	801329c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	681b      	ldr	r3, [r3, #0]
 801326e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	e853 3f00 	ldrex	r3, [r3]
 8013276:	60bb      	str	r3, [r7, #8]
   return(result);
 8013278:	68bb      	ldr	r3, [r7, #8]
 801327a:	f023 0310 	bic.w	r3, r3, #16
 801327e:	647b      	str	r3, [r7, #68]	; 0x44
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	461a      	mov	r2, r3
 8013286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013288:	61bb      	str	r3, [r7, #24]
 801328a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801328c:	6979      	ldr	r1, [r7, #20]
 801328e:	69ba      	ldr	r2, [r7, #24]
 8013290:	e841 2300 	strex	r3, r2, [r1]
 8013294:	613b      	str	r3, [r7, #16]
   return(result);
 8013296:	693b      	ldr	r3, [r7, #16]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d1e6      	bne.n	801326a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	2220      	movs	r2, #32
 80132a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	2200      	movs	r2, #0
 80132a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	2200      	movs	r2, #0
 80132ae:	671a      	str	r2, [r3, #112]	; 0x70
}
 80132b0:	bf00      	nop
 80132b2:	3754      	adds	r7, #84	; 0x54
 80132b4:	46bd      	mov	sp, r7
 80132b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ba:	4770      	bx	lr
 80132bc:	effffffe 	.word	0xeffffffe

080132c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b084      	sub	sp, #16
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	2200      	movs	r2, #0
 80132d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	2200      	movs	r2, #0
 80132da:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80132de:	68f8      	ldr	r0, [r7, #12]
 80132e0:	f7fe fe34 	bl	8011f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80132e4:	bf00      	nop
 80132e6:	3710      	adds	r7, #16
 80132e8:	46bd      	mov	sp, r7
 80132ea:	bd80      	pop	{r7, pc}

080132ec <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80132ec:	b480      	push	{r7}
 80132ee:	b08f      	sub	sp, #60	; 0x3c
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80132fa:	2b21      	cmp	r3, #33	; 0x21
 80132fc:	d14c      	bne.n	8013398 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013304:	b29b      	uxth	r3, r3
 8013306:	2b00      	cmp	r3, #0
 8013308:	d132      	bne.n	8013370 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013310:	6a3b      	ldr	r3, [r7, #32]
 8013312:	e853 3f00 	ldrex	r3, [r3]
 8013316:	61fb      	str	r3, [r7, #28]
   return(result);
 8013318:	69fb      	ldr	r3, [r7, #28]
 801331a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801331e:	637b      	str	r3, [r7, #52]	; 0x34
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	461a      	mov	r2, r3
 8013326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013328:	62fb      	str	r3, [r7, #44]	; 0x2c
 801332a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801332c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801332e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013330:	e841 2300 	strex	r3, r2, [r1]
 8013334:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013338:	2b00      	cmp	r3, #0
 801333a:	d1e6      	bne.n	801330a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	e853 3f00 	ldrex	r3, [r3]
 8013348:	60bb      	str	r3, [r7, #8]
   return(result);
 801334a:	68bb      	ldr	r3, [r7, #8]
 801334c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013350:	633b      	str	r3, [r7, #48]	; 0x30
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	461a      	mov	r2, r3
 8013358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801335a:	61bb      	str	r3, [r7, #24]
 801335c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801335e:	6979      	ldr	r1, [r7, #20]
 8013360:	69ba      	ldr	r2, [r7, #24]
 8013362:	e841 2300 	strex	r3, r2, [r1]
 8013366:	613b      	str	r3, [r7, #16]
   return(result);
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	2b00      	cmp	r3, #0
 801336c:	d1e6      	bne.n	801333c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 801336e:	e013      	b.n	8013398 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013374:	781a      	ldrb	r2, [r3, #0]
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013380:	1c5a      	adds	r2, r3, #1
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801338c:	b29b      	uxth	r3, r3
 801338e:	3b01      	subs	r3, #1
 8013390:	b29a      	uxth	r2, r3
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8013398:	bf00      	nop
 801339a:	373c      	adds	r7, #60	; 0x3c
 801339c:	46bd      	mov	sp, r7
 801339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a2:	4770      	bx	lr

080133a4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80133a4:	b480      	push	{r7}
 80133a6:	b091      	sub	sp, #68	; 0x44
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80133b2:	2b21      	cmp	r3, #33	; 0x21
 80133b4:	d151      	bne.n	801345a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80133bc:	b29b      	uxth	r3, r3
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d132      	bne.n	8013428 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ca:	e853 3f00 	ldrex	r3, [r3]
 80133ce:	623b      	str	r3, [r7, #32]
   return(result);
 80133d0:	6a3b      	ldr	r3, [r7, #32]
 80133d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80133d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	461a      	mov	r2, r3
 80133de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133e0:	633b      	str	r3, [r7, #48]	; 0x30
 80133e2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80133e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80133e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133e8:	e841 2300 	strex	r3, r2, [r1]
 80133ec:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80133ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d1e6      	bne.n	80133c2 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80133fa:	693b      	ldr	r3, [r7, #16]
 80133fc:	e853 3f00 	ldrex	r3, [r3]
 8013400:	60fb      	str	r3, [r7, #12]
   return(result);
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013408:	637b      	str	r3, [r7, #52]	; 0x34
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	461a      	mov	r2, r3
 8013410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013412:	61fb      	str	r3, [r7, #28]
 8013414:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013416:	69b9      	ldr	r1, [r7, #24]
 8013418:	69fa      	ldr	r2, [r7, #28]
 801341a:	e841 2300 	strex	r3, r2, [r1]
 801341e:	617b      	str	r3, [r7, #20]
   return(result);
 8013420:	697b      	ldr	r3, [r7, #20]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d1e6      	bne.n	80133f4 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8013426:	e018      	b.n	801345a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801342c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801342e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013430:	881b      	ldrh	r3, [r3, #0]
 8013432:	461a      	mov	r2, r3
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801343c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013442:	1c9a      	adds	r2, r3, #2
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801344e:	b29b      	uxth	r3, r3
 8013450:	3b01      	subs	r3, #1
 8013452:	b29a      	uxth	r2, r3
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 801345a:	bf00      	nop
 801345c:	3744      	adds	r7, #68	; 0x44
 801345e:	46bd      	mov	sp, r7
 8013460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013464:	4770      	bx	lr

08013466 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8013466:	b480      	push	{r7}
 8013468:	b091      	sub	sp, #68	; 0x44
 801346a:	af00      	add	r7, sp, #0
 801346c:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013474:	2b21      	cmp	r3, #33	; 0x21
 8013476:	d160      	bne.n	801353a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801347e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8013480:	e057      	b.n	8013532 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013488:	b29b      	uxth	r3, r3
 801348a:	2b00      	cmp	r3, #0
 801348c:	d133      	bne.n	80134f6 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	3308      	adds	r3, #8
 8013494:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013498:	e853 3f00 	ldrex	r3, [r3]
 801349c:	623b      	str	r3, [r7, #32]
   return(result);
 801349e:	6a3b      	ldr	r3, [r7, #32]
 80134a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80134a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	3308      	adds	r3, #8
 80134ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80134ae:	633a      	str	r2, [r7, #48]	; 0x30
 80134b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80134b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80134b6:	e841 2300 	strex	r3, r2, [r1]
 80134ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80134bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d1e5      	bne.n	801348e <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134c8:	693b      	ldr	r3, [r7, #16]
 80134ca:	e853 3f00 	ldrex	r3, [r3]
 80134ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134d6:	637b      	str	r3, [r7, #52]	; 0x34
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	461a      	mov	r2, r3
 80134de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134e0:	61fb      	str	r3, [r7, #28]
 80134e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134e4:	69b9      	ldr	r1, [r7, #24]
 80134e6:	69fa      	ldr	r2, [r7, #28]
 80134e8:	e841 2300 	strex	r3, r2, [r1]
 80134ec:	617b      	str	r3, [r7, #20]
   return(result);
 80134ee:	697b      	ldr	r3, [r7, #20]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d1e6      	bne.n	80134c2 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80134f4:	e021      	b.n	801353a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	69db      	ldr	r3, [r3, #28]
 80134fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013500:	2b00      	cmp	r3, #0
 8013502:	d013      	beq.n	801352c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013508:	781a      	ldrb	r2, [r3, #0]
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013514:	1c5a      	adds	r2, r3, #1
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013520:	b29b      	uxth	r3, r3
 8013522:	3b01      	subs	r3, #1
 8013524:	b29a      	uxth	r2, r3
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801352c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801352e:	3b01      	subs	r3, #1
 8013530:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8013532:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013534:	2b00      	cmp	r3, #0
 8013536:	d1a4      	bne.n	8013482 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8013538:	e7ff      	b.n	801353a <UART_TxISR_8BIT_FIFOEN+0xd4>
 801353a:	bf00      	nop
 801353c:	3744      	adds	r7, #68	; 0x44
 801353e:	46bd      	mov	sp, r7
 8013540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013544:	4770      	bx	lr

08013546 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8013546:	b480      	push	{r7}
 8013548:	b091      	sub	sp, #68	; 0x44
 801354a:	af00      	add	r7, sp, #0
 801354c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013554:	2b21      	cmp	r3, #33	; 0x21
 8013556:	d165      	bne.n	8013624 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801355e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8013560:	e05c      	b.n	801361c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013568:	b29b      	uxth	r3, r3
 801356a:	2b00      	cmp	r3, #0
 801356c:	d133      	bne.n	80135d6 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	681b      	ldr	r3, [r3, #0]
 8013572:	3308      	adds	r3, #8
 8013574:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013576:	6a3b      	ldr	r3, [r7, #32]
 8013578:	e853 3f00 	ldrex	r3, [r3]
 801357c:	61fb      	str	r3, [r7, #28]
   return(result);
 801357e:	69fb      	ldr	r3, [r7, #28]
 8013580:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8013584:	637b      	str	r3, [r7, #52]	; 0x34
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	3308      	adds	r3, #8
 801358c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801358e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013590:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013592:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013596:	e841 2300 	strex	r3, r2, [r1]
 801359a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d1e5      	bne.n	801356e <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	e853 3f00 	ldrex	r3, [r3]
 80135ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80135b0:	68bb      	ldr	r3, [r7, #8]
 80135b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80135b6:	633b      	str	r3, [r7, #48]	; 0x30
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	461a      	mov	r2, r3
 80135be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135c0:	61bb      	str	r3, [r7, #24]
 80135c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135c4:	6979      	ldr	r1, [r7, #20]
 80135c6:	69ba      	ldr	r2, [r7, #24]
 80135c8:	e841 2300 	strex	r3, r2, [r1]
 80135cc:	613b      	str	r3, [r7, #16]
   return(result);
 80135ce:	693b      	ldr	r3, [r7, #16]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d1e6      	bne.n	80135a2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80135d4:	e026      	b.n	8013624 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	69db      	ldr	r3, [r3, #28]
 80135dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d018      	beq.n	8013616 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135e8:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80135ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ec:	881b      	ldrh	r3, [r3, #0]
 80135ee:	461a      	mov	r2, r3
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80135f8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135fe:	1c9a      	adds	r2, r3, #2
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801360a:	b29b      	uxth	r3, r3
 801360c:	3b01      	subs	r3, #1
 801360e:	b29a      	uxth	r2, r3
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8013616:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013618:	3b01      	subs	r3, #1
 801361a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801361c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801361e:	2b00      	cmp	r3, #0
 8013620:	d19f      	bne.n	8013562 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8013622:	e7ff      	b.n	8013624 <UART_TxISR_16BIT_FIFOEN+0xde>
 8013624:	bf00      	nop
 8013626:	3744      	adds	r7, #68	; 0x44
 8013628:	46bd      	mov	sp, r7
 801362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801362e:	4770      	bx	lr

08013630 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013630:	b580      	push	{r7, lr}
 8013632:	b088      	sub	sp, #32
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	e853 3f00 	ldrex	r3, [r3]
 8013644:	60bb      	str	r3, [r7, #8]
   return(result);
 8013646:	68bb      	ldr	r3, [r7, #8]
 8013648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801364c:	61fb      	str	r3, [r7, #28]
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	461a      	mov	r2, r3
 8013654:	69fb      	ldr	r3, [r7, #28]
 8013656:	61bb      	str	r3, [r7, #24]
 8013658:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801365a:	6979      	ldr	r1, [r7, #20]
 801365c:	69ba      	ldr	r2, [r7, #24]
 801365e:	e841 2300 	strex	r3, r2, [r1]
 8013662:	613b      	str	r3, [r7, #16]
   return(result);
 8013664:	693b      	ldr	r3, [r7, #16]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d1e6      	bne.n	8013638 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	2220      	movs	r2, #32
 801366e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	2200      	movs	r2, #0
 8013676:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013678:	6878      	ldr	r0, [r7, #4]
 801367a:	f7f5 f951 	bl	8008920 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801367e:	bf00      	nop
 8013680:	3720      	adds	r7, #32
 8013682:	46bd      	mov	sp, r7
 8013684:	bd80      	pop	{r7, pc}

08013686 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8013686:	b580      	push	{r7, lr}
 8013688:	b096      	sub	sp, #88	; 0x58
 801368a:	af00      	add	r7, sp, #0
 801368c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013694:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801369e:	2b22      	cmp	r3, #34	; 0x22
 80136a0:	f040 8095 	bne.w	80137ce <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136aa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80136ae:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80136b2:	b2d9      	uxtb	r1, r3
 80136b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80136b8:	b2da      	uxtb	r2, r3
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80136be:	400a      	ands	r2, r1
 80136c0:	b2d2      	uxtb	r2, r2
 80136c2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80136c8:	1c5a      	adds	r2, r3, #1
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80136d4:	b29b      	uxth	r3, r3
 80136d6:	3b01      	subs	r3, #1
 80136d8:	b29a      	uxth	r2, r3
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80136e6:	b29b      	uxth	r3, r3
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d178      	bne.n	80137de <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80136f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136f4:	e853 3f00 	ldrex	r3, [r3]
 80136f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80136fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013700:	653b      	str	r3, [r7, #80]	; 0x50
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	461a      	mov	r2, r3
 8013708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801370a:	647b      	str	r3, [r7, #68]	; 0x44
 801370c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801370e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013710:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013712:	e841 2300 	strex	r3, r2, [r1]
 8013716:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801371a:	2b00      	cmp	r3, #0
 801371c:	d1e6      	bne.n	80136ec <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	3308      	adds	r3, #8
 8013724:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013728:	e853 3f00 	ldrex	r3, [r3]
 801372c:	623b      	str	r3, [r7, #32]
   return(result);
 801372e:	6a3b      	ldr	r3, [r7, #32]
 8013730:	f023 0301 	bic.w	r3, r3, #1
 8013734:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	3308      	adds	r3, #8
 801373c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801373e:	633a      	str	r2, [r7, #48]	; 0x30
 8013740:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013742:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013746:	e841 2300 	strex	r3, r2, [r1]
 801374a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801374e:	2b00      	cmp	r3, #0
 8013750:	d1e5      	bne.n	801371e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	2220      	movs	r2, #32
 8013756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	2200      	movs	r2, #0
 801375e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013764:	2b01      	cmp	r3, #1
 8013766:	d12e      	bne.n	80137c6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	2200      	movs	r2, #0
 801376c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013774:	693b      	ldr	r3, [r7, #16]
 8013776:	e853 3f00 	ldrex	r3, [r3]
 801377a:	60fb      	str	r3, [r7, #12]
   return(result);
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	f023 0310 	bic.w	r3, r3, #16
 8013782:	64bb      	str	r3, [r7, #72]	; 0x48
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	461a      	mov	r2, r3
 801378a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801378c:	61fb      	str	r3, [r7, #28]
 801378e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013790:	69b9      	ldr	r1, [r7, #24]
 8013792:	69fa      	ldr	r2, [r7, #28]
 8013794:	e841 2300 	strex	r3, r2, [r1]
 8013798:	617b      	str	r3, [r7, #20]
   return(result);
 801379a:	697b      	ldr	r3, [r7, #20]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d1e6      	bne.n	801376e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	69db      	ldr	r3, [r3, #28]
 80137a6:	f003 0310 	and.w	r3, r3, #16
 80137aa:	2b10      	cmp	r3, #16
 80137ac:	d103      	bne.n	80137b6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	2210      	movs	r2, #16
 80137b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80137bc:	4619      	mov	r1, r3
 80137be:	6878      	ldr	r0, [r7, #4]
 80137c0:	f7fe fbce 	bl	8011f60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80137c4:	e00b      	b.n	80137de <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80137c6:	6878      	ldr	r0, [r7, #4]
 80137c8:	f7f5 f88e 	bl	80088e8 <HAL_UART_RxCpltCallback>
}
 80137cc:	e007      	b.n	80137de <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	699a      	ldr	r2, [r3, #24]
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	f042 0208 	orr.w	r2, r2, #8
 80137dc:	619a      	str	r2, [r3, #24]
}
 80137de:	bf00      	nop
 80137e0:	3758      	adds	r7, #88	; 0x58
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bd80      	pop	{r7, pc}

080137e6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80137e6:	b580      	push	{r7, lr}
 80137e8:	b096      	sub	sp, #88	; 0x58
 80137ea:	af00      	add	r7, sp, #0
 80137ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80137f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80137fe:	2b22      	cmp	r3, #34	; 0x22
 8013800:	f040 8095 	bne.w	801392e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801380a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013812:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8013814:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8013818:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801381c:	4013      	ands	r3, r2
 801381e:	b29a      	uxth	r2, r3
 8013820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013822:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013828:	1c9a      	adds	r2, r3, #2
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013834:	b29b      	uxth	r3, r3
 8013836:	3b01      	subs	r3, #1
 8013838:	b29a      	uxth	r2, r3
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013846:	b29b      	uxth	r3, r3
 8013848:	2b00      	cmp	r3, #0
 801384a:	d178      	bne.n	801393e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013854:	e853 3f00 	ldrex	r3, [r3]
 8013858:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801385a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801385c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013860:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	461a      	mov	r2, r3
 8013868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801386a:	643b      	str	r3, [r7, #64]	; 0x40
 801386c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801386e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013870:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013872:	e841 2300 	strex	r3, r2, [r1]
 8013876:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801387a:	2b00      	cmp	r3, #0
 801387c:	d1e6      	bne.n	801384c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	3308      	adds	r3, #8
 8013884:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013886:	6a3b      	ldr	r3, [r7, #32]
 8013888:	e853 3f00 	ldrex	r3, [r3]
 801388c:	61fb      	str	r3, [r7, #28]
   return(result);
 801388e:	69fb      	ldr	r3, [r7, #28]
 8013890:	f023 0301 	bic.w	r3, r3, #1
 8013894:	64bb      	str	r3, [r7, #72]	; 0x48
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	3308      	adds	r3, #8
 801389c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801389e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80138a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80138a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138a6:	e841 2300 	strex	r3, r2, [r1]
 80138aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80138ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d1e5      	bne.n	801387e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	2220      	movs	r2, #32
 80138b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	2200      	movs	r2, #0
 80138be:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138c4:	2b01      	cmp	r3, #1
 80138c6:	d12e      	bne.n	8013926 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	2200      	movs	r2, #0
 80138cc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	e853 3f00 	ldrex	r3, [r3]
 80138da:	60bb      	str	r3, [r7, #8]
   return(result);
 80138dc:	68bb      	ldr	r3, [r7, #8]
 80138de:	f023 0310 	bic.w	r3, r3, #16
 80138e2:	647b      	str	r3, [r7, #68]	; 0x44
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	461a      	mov	r2, r3
 80138ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138ec:	61bb      	str	r3, [r7, #24]
 80138ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138f0:	6979      	ldr	r1, [r7, #20]
 80138f2:	69ba      	ldr	r2, [r7, #24]
 80138f4:	e841 2300 	strex	r3, r2, [r1]
 80138f8:	613b      	str	r3, [r7, #16]
   return(result);
 80138fa:	693b      	ldr	r3, [r7, #16]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d1e6      	bne.n	80138ce <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	69db      	ldr	r3, [r3, #28]
 8013906:	f003 0310 	and.w	r3, r3, #16
 801390a:	2b10      	cmp	r3, #16
 801390c:	d103      	bne.n	8013916 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	2210      	movs	r2, #16
 8013914:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801391c:	4619      	mov	r1, r3
 801391e:	6878      	ldr	r0, [r7, #4]
 8013920:	f7fe fb1e 	bl	8011f60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013924:	e00b      	b.n	801393e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8013926:	6878      	ldr	r0, [r7, #4]
 8013928:	f7f4 ffde 	bl	80088e8 <HAL_UART_RxCpltCallback>
}
 801392c:	e007      	b.n	801393e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	699a      	ldr	r2, [r3, #24]
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	f042 0208 	orr.w	r2, r2, #8
 801393c:	619a      	str	r2, [r3, #24]
}
 801393e:	bf00      	nop
 8013940:	3758      	adds	r7, #88	; 0x58
 8013942:	46bd      	mov	sp, r7
 8013944:	bd80      	pop	{r7, pc}
	...

08013948 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b0a6      	sub	sp, #152	; 0x98
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013956:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	69db      	ldr	r3, [r3, #28]
 8013960:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	689b      	ldr	r3, [r3, #8]
 8013974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801397e:	2b22      	cmp	r3, #34	; 0x22
 8013980:	f040 814d 	bne.w	8013c1e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801398a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801398e:	e0f4      	b.n	8013b7a <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013996:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801399a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 801399e:	b2d9      	uxtb	r1, r3
 80139a0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80139a4:	b2da      	uxtb	r2, r3
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139aa:	400a      	ands	r2, r1
 80139ac:	b2d2      	uxtb	r2, r2
 80139ae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80139b4:	1c5a      	adds	r2, r3, #1
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80139c0:	b29b      	uxth	r3, r3
 80139c2:	3b01      	subs	r3, #1
 80139c4:	b29a      	uxth	r2, r3
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	69db      	ldr	r3, [r3, #28]
 80139d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80139d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80139da:	f003 0307 	and.w	r3, r3, #7
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d053      	beq.n	8013a8a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80139e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80139e6:	f003 0301 	and.w	r3, r3, #1
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d011      	beq.n	8013a12 <UART_RxISR_8BIT_FIFOEN+0xca>
 80139ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80139f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d00b      	beq.n	8013a12 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	2201      	movs	r2, #1
 8013a00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013a08:	f043 0201 	orr.w	r2, r3, #1
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013a12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013a16:	f003 0302 	and.w	r3, r3, #2
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d011      	beq.n	8013a42 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8013a1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013a22:	f003 0301 	and.w	r3, r3, #1
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d00b      	beq.n	8013a42 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	2202      	movs	r2, #2
 8013a30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013a38:	f043 0204 	orr.w	r2, r3, #4
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013a42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013a46:	f003 0304 	and.w	r3, r3, #4
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d011      	beq.n	8013a72 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8013a4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013a52:	f003 0301 	and.w	r3, r3, #1
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d00b      	beq.n	8013a72 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	2204      	movs	r2, #4
 8013a60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013a68:	f043 0202 	orr.w	r2, r3, #2
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013a72:	687b      	ldr	r3, [r7, #4]
 8013a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d006      	beq.n	8013a8a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013a7c:	6878      	ldr	r0, [r7, #4]
 8013a7e:	f7fe fa65 	bl	8011f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	2200      	movs	r2, #0
 8013a86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013a90:	b29b      	uxth	r3, r3
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d171      	bne.n	8013b7a <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013a9e:	e853 3f00 	ldrex	r3, [r3]
 8013aa2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8013aa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013aa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013aaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	461a      	mov	r2, r3
 8013ab4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013ab8:	66bb      	str	r3, [r7, #104]	; 0x68
 8013aba:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013abc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8013abe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013ac0:	e841 2300 	strex	r3, r2, [r1]
 8013ac4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8013ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d1e4      	bne.n	8013a96 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	3308      	adds	r3, #8
 8013ad2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ad6:	e853 3f00 	ldrex	r3, [r3]
 8013ada:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8013adc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013ade:	4b56      	ldr	r3, [pc, #344]	; (8013c38 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8013ae0:	4013      	ands	r3, r2
 8013ae2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	3308      	adds	r3, #8
 8013aea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013aec:	657a      	str	r2, [r7, #84]	; 0x54
 8013aee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013af0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013af2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013af4:	e841 2300 	strex	r3, r2, [r1]
 8013af8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d1e5      	bne.n	8013acc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	2220      	movs	r2, #32
 8013b04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b12:	2b01      	cmp	r3, #1
 8013b14:	d12e      	bne.n	8013b74 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	2200      	movs	r2, #0
 8013b1a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b24:	e853 3f00 	ldrex	r3, [r3]
 8013b28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b2c:	f023 0310 	bic.w	r3, r3, #16
 8013b30:	67bb      	str	r3, [r7, #120]	; 0x78
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	461a      	mov	r2, r3
 8013b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013b3a:	643b      	str	r3, [r7, #64]	; 0x40
 8013b3c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013b40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013b42:	e841 2300 	strex	r3, r2, [r1]
 8013b46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d1e6      	bne.n	8013b1c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	69db      	ldr	r3, [r3, #28]
 8013b54:	f003 0310 	and.w	r3, r3, #16
 8013b58:	2b10      	cmp	r3, #16
 8013b5a:	d103      	bne.n	8013b64 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	2210      	movs	r2, #16
 8013b62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013b6a:	4619      	mov	r1, r3
 8013b6c:	6878      	ldr	r0, [r7, #4]
 8013b6e:	f7fe f9f7 	bl	8011f60 <HAL_UARTEx_RxEventCallback>
 8013b72:	e002      	b.n	8013b7a <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8013b74:	6878      	ldr	r0, [r7, #4]
 8013b76:	f7f4 feb7 	bl	80088e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013b7a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d006      	beq.n	8013b90 <UART_RxISR_8BIT_FIFOEN+0x248>
 8013b82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013b86:	f003 0320 	and.w	r3, r3, #32
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	f47f af00 	bne.w	8013990 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013b96:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8013b9a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d045      	beq.n	8013c2e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013ba8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013bac:	429a      	cmp	r2, r3
 8013bae:	d23e      	bcs.n	8013c2e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	3308      	adds	r3, #8
 8013bb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bb8:	6a3b      	ldr	r3, [r7, #32]
 8013bba:	e853 3f00 	ldrex	r3, [r3]
 8013bbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8013bc0:	69fb      	ldr	r3, [r7, #28]
 8013bc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013bc6:	673b      	str	r3, [r7, #112]	; 0x70
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	3308      	adds	r3, #8
 8013bce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013bd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013bd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013bd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013bd8:	e841 2300 	strex	r3, r2, [r1]
 8013bdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d1e5      	bne.n	8013bb0 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	4a15      	ldr	r2, [pc, #84]	; (8013c3c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8013be8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	e853 3f00 	ldrex	r3, [r3]
 8013bf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8013bf8:	68bb      	ldr	r3, [r7, #8]
 8013bfa:	f043 0320 	orr.w	r3, r3, #32
 8013bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	461a      	mov	r2, r3
 8013c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013c08:	61bb      	str	r3, [r7, #24]
 8013c0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c0c:	6979      	ldr	r1, [r7, #20]
 8013c0e:	69ba      	ldr	r2, [r7, #24]
 8013c10:	e841 2300 	strex	r3, r2, [r1]
 8013c14:	613b      	str	r3, [r7, #16]
   return(result);
 8013c16:	693b      	ldr	r3, [r7, #16]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d1e6      	bne.n	8013bea <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013c1c:	e007      	b.n	8013c2e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	699a      	ldr	r2, [r3, #24]
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	f042 0208 	orr.w	r2, r2, #8
 8013c2c:	619a      	str	r2, [r3, #24]
}
 8013c2e:	bf00      	nop
 8013c30:	3798      	adds	r7, #152	; 0x98
 8013c32:	46bd      	mov	sp, r7
 8013c34:	bd80      	pop	{r7, pc}
 8013c36:	bf00      	nop
 8013c38:	effffffe 	.word	0xeffffffe
 8013c3c:	08013687 	.word	0x08013687

08013c40 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b0a8      	sub	sp, #160	; 0xa0
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013c4e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	681b      	ldr	r3, [r3, #0]
 8013c56:	69db      	ldr	r3, [r3, #28]
 8013c58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	689b      	ldr	r3, [r3, #8]
 8013c6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013c76:	2b22      	cmp	r3, #34	; 0x22
 8013c78:	f040 8151 	bne.w	8013f1e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013c82:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013c86:	e0f8      	b.n	8013e7a <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c8e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8013c92:	687b      	ldr	r3, [r7, #4]
 8013c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8013c9a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8013c9e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8013ca2:	4013      	ands	r3, r2
 8013ca4:	b29a      	uxth	r2, r3
 8013ca6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013caa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013cb0:	1c9a      	adds	r2, r3, #2
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013cbc:	b29b      	uxth	r3, r3
 8013cbe:	3b01      	subs	r3, #1
 8013cc0:	b29a      	uxth	r2, r3
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	69db      	ldr	r3, [r3, #28]
 8013cce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8013cd2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013cd6:	f003 0307 	and.w	r3, r3, #7
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d053      	beq.n	8013d86 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013cde:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013ce2:	f003 0301 	and.w	r3, r3, #1
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d011      	beq.n	8013d0e <UART_RxISR_16BIT_FIFOEN+0xce>
 8013cea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d00b      	beq.n	8013d0e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	2201      	movs	r2, #1
 8013cfc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013d04:	f043 0201 	orr.w	r2, r3, #1
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013d0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013d12:	f003 0302 	and.w	r3, r3, #2
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d011      	beq.n	8013d3e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8013d1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013d1e:	f003 0301 	and.w	r3, r3, #1
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d00b      	beq.n	8013d3e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	2202      	movs	r2, #2
 8013d2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013d34:	f043 0204 	orr.w	r2, r3, #4
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013d3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013d42:	f003 0304 	and.w	r3, r3, #4
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d011      	beq.n	8013d6e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8013d4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013d4e:	f003 0301 	and.w	r3, r3, #1
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d00b      	beq.n	8013d6e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	2204      	movs	r2, #4
 8013d5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013d64:	f043 0202 	orr.w	r2, r3, #2
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d006      	beq.n	8013d86 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013d78:	6878      	ldr	r0, [r7, #4]
 8013d7a:	f7fe f8e7 	bl	8011f4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	2200      	movs	r2, #0
 8013d82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013d8c:	b29b      	uxth	r3, r3
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d173      	bne.n	8013e7a <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013d98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013d9a:	e853 3f00 	ldrex	r3, [r3]
 8013d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8013da0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013da2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013da6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	461a      	mov	r2, r3
 8013db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013db4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013db6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013db8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8013dba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8013dbc:	e841 2300 	strex	r3, r2, [r1]
 8013dc0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8013dc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	d1e4      	bne.n	8013d92 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	3308      	adds	r3, #8
 8013dce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013dd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013dd2:	e853 3f00 	ldrex	r3, [r3]
 8013dd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8013dd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013dda:	4b57      	ldr	r3, [pc, #348]	; (8013f38 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8013ddc:	4013      	ands	r3, r2
 8013dde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	3308      	adds	r3, #8
 8013de8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013dec:	65ba      	str	r2, [r7, #88]	; 0x58
 8013dee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013df0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013df2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013df4:	e841 2300 	strex	r3, r2, [r1]
 8013df8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8013dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d1e3      	bne.n	8013dc8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	2220      	movs	r2, #32
 8013e04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e12:	2b01      	cmp	r3, #1
 8013e14:	d12e      	bne.n	8013e74 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	2200      	movs	r2, #0
 8013e1a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e24:	e853 3f00 	ldrex	r3, [r3]
 8013e28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e2c:	f023 0310 	bic.w	r3, r3, #16
 8013e30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	461a      	mov	r2, r3
 8013e38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8013e3c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013e3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013e40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013e42:	e841 2300 	strex	r3, r2, [r1]
 8013e46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d1e6      	bne.n	8013e1c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	69db      	ldr	r3, [r3, #28]
 8013e54:	f003 0310 	and.w	r3, r3, #16
 8013e58:	2b10      	cmp	r3, #16
 8013e5a:	d103      	bne.n	8013e64 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	2210      	movs	r2, #16
 8013e62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013e6a:	4619      	mov	r1, r3
 8013e6c:	6878      	ldr	r0, [r7, #4]
 8013e6e:	f7fe f877 	bl	8011f60 <HAL_UARTEx_RxEventCallback>
 8013e72:	e002      	b.n	8013e7a <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8013e74:	6878      	ldr	r0, [r7, #4]
 8013e76:	f7f4 fd37 	bl	80088e8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013e7a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d006      	beq.n	8013e90 <UART_RxISR_16BIT_FIFOEN+0x250>
 8013e82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013e86:	f003 0320 	and.w	r3, r3, #32
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	f47f aefc 	bne.w	8013c88 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013e96:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8013e9a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d045      	beq.n	8013f2e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013ea8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8013eac:	429a      	cmp	r2, r3
 8013eae:	d23e      	bcs.n	8013f2e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	3308      	adds	r3, #8
 8013eb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eba:	e853 3f00 	ldrex	r3, [r3]
 8013ebe:	623b      	str	r3, [r7, #32]
   return(result);
 8013ec0:	6a3b      	ldr	r3, [r7, #32]
 8013ec2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013ec6:	677b      	str	r3, [r7, #116]	; 0x74
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	3308      	adds	r3, #8
 8013ece:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8013ed0:	633a      	str	r2, [r7, #48]	; 0x30
 8013ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ed4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ed8:	e841 2300 	strex	r3, r2, [r1]
 8013edc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d1e5      	bne.n	8013eb0 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	4a15      	ldr	r2, [pc, #84]	; (8013f3c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8013ee8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ef0:	693b      	ldr	r3, [r7, #16]
 8013ef2:	e853 3f00 	ldrex	r3, [r3]
 8013ef6:	60fb      	str	r3, [r7, #12]
   return(result);
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	f043 0320 	orr.w	r3, r3, #32
 8013efe:	673b      	str	r3, [r7, #112]	; 0x70
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	461a      	mov	r2, r3
 8013f06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013f08:	61fb      	str	r3, [r7, #28]
 8013f0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f0c:	69b9      	ldr	r1, [r7, #24]
 8013f0e:	69fa      	ldr	r2, [r7, #28]
 8013f10:	e841 2300 	strex	r3, r2, [r1]
 8013f14:	617b      	str	r3, [r7, #20]
   return(result);
 8013f16:	697b      	ldr	r3, [r7, #20]
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d1e6      	bne.n	8013eea <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013f1c:	e007      	b.n	8013f2e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	699a      	ldr	r2, [r3, #24]
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	f042 0208 	orr.w	r2, r2, #8
 8013f2c:	619a      	str	r2, [r3, #24]
}
 8013f2e:	bf00      	nop
 8013f30:	37a0      	adds	r7, #160	; 0xa0
 8013f32:	46bd      	mov	sp, r7
 8013f34:	bd80      	pop	{r7, pc}
 8013f36:	bf00      	nop
 8013f38:	effffffe 	.word	0xeffffffe
 8013f3c:	080137e7 	.word	0x080137e7

08013f40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8013f40:	b480      	push	{r7}
 8013f42:	b083      	sub	sp, #12
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8013f48:	bf00      	nop
 8013f4a:	370c      	adds	r7, #12
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f52:	4770      	bx	lr

08013f54 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8013f54:	b480      	push	{r7}
 8013f56:	b083      	sub	sp, #12
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8013f5c:	bf00      	nop
 8013f5e:	370c      	adds	r7, #12
 8013f60:	46bd      	mov	sp, r7
 8013f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f66:	4770      	bx	lr

08013f68 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8013f68:	b480      	push	{r7}
 8013f6a:	b083      	sub	sp, #12
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8013f70:	bf00      	nop
 8013f72:	370c      	adds	r7, #12
 8013f74:	46bd      	mov	sp, r7
 8013f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f7a:	4770      	bx	lr

08013f7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013f7c:	b480      	push	{r7}
 8013f7e:	b085      	sub	sp, #20
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8013f8a:	2b01      	cmp	r3, #1
 8013f8c:	d101      	bne.n	8013f92 <HAL_UARTEx_DisableFifoMode+0x16>
 8013f8e:	2302      	movs	r3, #2
 8013f90:	e027      	b.n	8013fe2 <HAL_UARTEx_DisableFifoMode+0x66>
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	2201      	movs	r2, #1
 8013f96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	2224      	movs	r2, #36	; 0x24
 8013f9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	681a      	ldr	r2, [r3, #0]
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	f022 0201 	bic.w	r2, r2, #1
 8013fb8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8013fc0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	68fa      	ldr	r2, [r7, #12]
 8013fce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	2220      	movs	r2, #32
 8013fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	2200      	movs	r2, #0
 8013fdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013fe0:	2300      	movs	r3, #0
}
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	3714      	adds	r7, #20
 8013fe6:	46bd      	mov	sp, r7
 8013fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fec:	4770      	bx	lr

08013fee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013fee:	b580      	push	{r7, lr}
 8013ff0:	b084      	sub	sp, #16
 8013ff2:	af00      	add	r7, sp, #0
 8013ff4:	6078      	str	r0, [r7, #4]
 8013ff6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8013ffe:	2b01      	cmp	r3, #1
 8014000:	d101      	bne.n	8014006 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8014002:	2302      	movs	r3, #2
 8014004:	e02d      	b.n	8014062 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	2201      	movs	r2, #1
 801400a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	2224      	movs	r2, #36	; 0x24
 8014012:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	681a      	ldr	r2, [r3, #0]
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	f022 0201 	bic.w	r2, r2, #1
 801402c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	689b      	ldr	r3, [r3, #8]
 8014034:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	683a      	ldr	r2, [r7, #0]
 801403e:	430a      	orrs	r2, r1
 8014040:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014042:	6878      	ldr	r0, [r7, #4]
 8014044:	f000 f850 	bl	80140e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	68fa      	ldr	r2, [r7, #12]
 801404e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	2220      	movs	r2, #32
 8014054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	2200      	movs	r2, #0
 801405c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8014060:	2300      	movs	r3, #0
}
 8014062:	4618      	mov	r0, r3
 8014064:	3710      	adds	r7, #16
 8014066:	46bd      	mov	sp, r7
 8014068:	bd80      	pop	{r7, pc}

0801406a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801406a:	b580      	push	{r7, lr}
 801406c:	b084      	sub	sp, #16
 801406e:	af00      	add	r7, sp, #0
 8014070:	6078      	str	r0, [r7, #4]
 8014072:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801407a:	2b01      	cmp	r3, #1
 801407c:	d101      	bne.n	8014082 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801407e:	2302      	movs	r3, #2
 8014080:	e02d      	b.n	80140de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	2201      	movs	r2, #1
 8014086:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	2224      	movs	r2, #36	; 0x24
 801408e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	681a      	ldr	r2, [r3, #0]
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	f022 0201 	bic.w	r2, r2, #1
 80140a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	689b      	ldr	r3, [r3, #8]
 80140b0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	683a      	ldr	r2, [r7, #0]
 80140ba:	430a      	orrs	r2, r1
 80140bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80140be:	6878      	ldr	r0, [r7, #4]
 80140c0:	f000 f812 	bl	80140e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	68fa      	ldr	r2, [r7, #12]
 80140ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	2220      	movs	r2, #32
 80140d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	2200      	movs	r2, #0
 80140d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80140dc:	2300      	movs	r3, #0
}
 80140de:	4618      	mov	r0, r3
 80140e0:	3710      	adds	r7, #16
 80140e2:	46bd      	mov	sp, r7
 80140e4:	bd80      	pop	{r7, pc}
	...

080140e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80140e8:	b480      	push	{r7}
 80140ea:	b085      	sub	sp, #20
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d108      	bne.n	801410a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	2201      	movs	r2, #1
 80140fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	2201      	movs	r2, #1
 8014104:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8014108:	e031      	b.n	801416e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801410a:	2310      	movs	r3, #16
 801410c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801410e:	2310      	movs	r3, #16
 8014110:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	689b      	ldr	r3, [r3, #8]
 8014118:	0e5b      	lsrs	r3, r3, #25
 801411a:	b2db      	uxtb	r3, r3
 801411c:	f003 0307 	and.w	r3, r3, #7
 8014120:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	689b      	ldr	r3, [r3, #8]
 8014128:	0f5b      	lsrs	r3, r3, #29
 801412a:	b2db      	uxtb	r3, r3
 801412c:	f003 0307 	and.w	r3, r3, #7
 8014130:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014132:	7bbb      	ldrb	r3, [r7, #14]
 8014134:	7b3a      	ldrb	r2, [r7, #12]
 8014136:	4911      	ldr	r1, [pc, #68]	; (801417c <UARTEx_SetNbDataToProcess+0x94>)
 8014138:	5c8a      	ldrb	r2, [r1, r2]
 801413a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801413e:	7b3a      	ldrb	r2, [r7, #12]
 8014140:	490f      	ldr	r1, [pc, #60]	; (8014180 <UARTEx_SetNbDataToProcess+0x98>)
 8014142:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014144:	fb93 f3f2 	sdiv	r3, r3, r2
 8014148:	b29a      	uxth	r2, r3
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014150:	7bfb      	ldrb	r3, [r7, #15]
 8014152:	7b7a      	ldrb	r2, [r7, #13]
 8014154:	4909      	ldr	r1, [pc, #36]	; (801417c <UARTEx_SetNbDataToProcess+0x94>)
 8014156:	5c8a      	ldrb	r2, [r1, r2]
 8014158:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801415c:	7b7a      	ldrb	r2, [r7, #13]
 801415e:	4908      	ldr	r1, [pc, #32]	; (8014180 <UARTEx_SetNbDataToProcess+0x98>)
 8014160:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014162:	fb93 f3f2 	sdiv	r3, r3, r2
 8014166:	b29a      	uxth	r2, r3
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801416e:	bf00      	nop
 8014170:	3714      	adds	r7, #20
 8014172:	46bd      	mov	sp, r7
 8014174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014178:	4770      	bx	lr
 801417a:	bf00      	nop
 801417c:	080180e8 	.word	0x080180e8
 8014180:	080180f0 	.word	0x080180f0

08014184 <__errno>:
 8014184:	4b01      	ldr	r3, [pc, #4]	; (801418c <__errno+0x8>)
 8014186:	6818      	ldr	r0, [r3, #0]
 8014188:	4770      	bx	lr
 801418a:	bf00      	nop
 801418c:	24000060 	.word	0x24000060

08014190 <__libc_init_array>:
 8014190:	b570      	push	{r4, r5, r6, lr}
 8014192:	4d0d      	ldr	r5, [pc, #52]	; (80141c8 <__libc_init_array+0x38>)
 8014194:	4c0d      	ldr	r4, [pc, #52]	; (80141cc <__libc_init_array+0x3c>)
 8014196:	1b64      	subs	r4, r4, r5
 8014198:	10a4      	asrs	r4, r4, #2
 801419a:	2600      	movs	r6, #0
 801419c:	42a6      	cmp	r6, r4
 801419e:	d109      	bne.n	80141b4 <__libc_init_array+0x24>
 80141a0:	4d0b      	ldr	r5, [pc, #44]	; (80141d0 <__libc_init_array+0x40>)
 80141a2:	4c0c      	ldr	r4, [pc, #48]	; (80141d4 <__libc_init_array+0x44>)
 80141a4:	f003 ff4a 	bl	801803c <_init>
 80141a8:	1b64      	subs	r4, r4, r5
 80141aa:	10a4      	asrs	r4, r4, #2
 80141ac:	2600      	movs	r6, #0
 80141ae:	42a6      	cmp	r6, r4
 80141b0:	d105      	bne.n	80141be <__libc_init_array+0x2e>
 80141b2:	bd70      	pop	{r4, r5, r6, pc}
 80141b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80141b8:	4798      	blx	r3
 80141ba:	3601      	adds	r6, #1
 80141bc:	e7ee      	b.n	801419c <__libc_init_array+0xc>
 80141be:	f855 3b04 	ldr.w	r3, [r5], #4
 80141c2:	4798      	blx	r3
 80141c4:	3601      	adds	r6, #1
 80141c6:	e7f2      	b.n	80141ae <__libc_init_array+0x1e>
 80141c8:	08019f78 	.word	0x08019f78
 80141cc:	08019f78 	.word	0x08019f78
 80141d0:	08019f78 	.word	0x08019f78
 80141d4:	08019f7c 	.word	0x08019f7c

080141d8 <memcpy>:
 80141d8:	440a      	add	r2, r1
 80141da:	4291      	cmp	r1, r2
 80141dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80141e0:	d100      	bne.n	80141e4 <memcpy+0xc>
 80141e2:	4770      	bx	lr
 80141e4:	b510      	push	{r4, lr}
 80141e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80141ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80141ee:	4291      	cmp	r1, r2
 80141f0:	d1f9      	bne.n	80141e6 <memcpy+0xe>
 80141f2:	bd10      	pop	{r4, pc}

080141f4 <memset>:
 80141f4:	4402      	add	r2, r0
 80141f6:	4603      	mov	r3, r0
 80141f8:	4293      	cmp	r3, r2
 80141fa:	d100      	bne.n	80141fe <memset+0xa>
 80141fc:	4770      	bx	lr
 80141fe:	f803 1b01 	strb.w	r1, [r3], #1
 8014202:	e7f9      	b.n	80141f8 <memset+0x4>

08014204 <__cvt>:
 8014204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014206:	ed2d 8b02 	vpush	{d8}
 801420a:	eeb0 8b40 	vmov.f64	d8, d0
 801420e:	b085      	sub	sp, #20
 8014210:	4617      	mov	r7, r2
 8014212:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8014214:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014216:	ee18 2a90 	vmov	r2, s17
 801421a:	f025 0520 	bic.w	r5, r5, #32
 801421e:	2a00      	cmp	r2, #0
 8014220:	bfb6      	itet	lt
 8014222:	222d      	movlt	r2, #45	; 0x2d
 8014224:	2200      	movge	r2, #0
 8014226:	eeb1 8b40 	vneglt.f64	d8, d0
 801422a:	2d46      	cmp	r5, #70	; 0x46
 801422c:	460c      	mov	r4, r1
 801422e:	701a      	strb	r2, [r3, #0]
 8014230:	d004      	beq.n	801423c <__cvt+0x38>
 8014232:	2d45      	cmp	r5, #69	; 0x45
 8014234:	d100      	bne.n	8014238 <__cvt+0x34>
 8014236:	3401      	adds	r4, #1
 8014238:	2102      	movs	r1, #2
 801423a:	e000      	b.n	801423e <__cvt+0x3a>
 801423c:	2103      	movs	r1, #3
 801423e:	ab03      	add	r3, sp, #12
 8014240:	9301      	str	r3, [sp, #4]
 8014242:	ab02      	add	r3, sp, #8
 8014244:	9300      	str	r3, [sp, #0]
 8014246:	4622      	mov	r2, r4
 8014248:	4633      	mov	r3, r6
 801424a:	eeb0 0b48 	vmov.f64	d0, d8
 801424e:	f000 fcab 	bl	8014ba8 <_dtoa_r>
 8014252:	2d47      	cmp	r5, #71	; 0x47
 8014254:	d109      	bne.n	801426a <__cvt+0x66>
 8014256:	07fb      	lsls	r3, r7, #31
 8014258:	d407      	bmi.n	801426a <__cvt+0x66>
 801425a:	9b03      	ldr	r3, [sp, #12]
 801425c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801425e:	1a1b      	subs	r3, r3, r0
 8014260:	6013      	str	r3, [r2, #0]
 8014262:	b005      	add	sp, #20
 8014264:	ecbd 8b02 	vpop	{d8}
 8014268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801426a:	2d46      	cmp	r5, #70	; 0x46
 801426c:	eb00 0204 	add.w	r2, r0, r4
 8014270:	d10c      	bne.n	801428c <__cvt+0x88>
 8014272:	7803      	ldrb	r3, [r0, #0]
 8014274:	2b30      	cmp	r3, #48	; 0x30
 8014276:	d107      	bne.n	8014288 <__cvt+0x84>
 8014278:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801427c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014280:	bf1c      	itt	ne
 8014282:	f1c4 0401 	rsbne	r4, r4, #1
 8014286:	6034      	strne	r4, [r6, #0]
 8014288:	6833      	ldr	r3, [r6, #0]
 801428a:	441a      	add	r2, r3
 801428c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014294:	bf08      	it	eq
 8014296:	9203      	streq	r2, [sp, #12]
 8014298:	2130      	movs	r1, #48	; 0x30
 801429a:	9b03      	ldr	r3, [sp, #12]
 801429c:	4293      	cmp	r3, r2
 801429e:	d2dc      	bcs.n	801425a <__cvt+0x56>
 80142a0:	1c5c      	adds	r4, r3, #1
 80142a2:	9403      	str	r4, [sp, #12]
 80142a4:	7019      	strb	r1, [r3, #0]
 80142a6:	e7f8      	b.n	801429a <__cvt+0x96>

080142a8 <__exponent>:
 80142a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80142aa:	4603      	mov	r3, r0
 80142ac:	2900      	cmp	r1, #0
 80142ae:	bfb8      	it	lt
 80142b0:	4249      	neglt	r1, r1
 80142b2:	f803 2b02 	strb.w	r2, [r3], #2
 80142b6:	bfb4      	ite	lt
 80142b8:	222d      	movlt	r2, #45	; 0x2d
 80142ba:	222b      	movge	r2, #43	; 0x2b
 80142bc:	2909      	cmp	r1, #9
 80142be:	7042      	strb	r2, [r0, #1]
 80142c0:	dd2a      	ble.n	8014318 <__exponent+0x70>
 80142c2:	f10d 0407 	add.w	r4, sp, #7
 80142c6:	46a4      	mov	ip, r4
 80142c8:	270a      	movs	r7, #10
 80142ca:	46a6      	mov	lr, r4
 80142cc:	460a      	mov	r2, r1
 80142ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80142d2:	fb07 1516 	mls	r5, r7, r6, r1
 80142d6:	3530      	adds	r5, #48	; 0x30
 80142d8:	2a63      	cmp	r2, #99	; 0x63
 80142da:	f104 34ff 	add.w	r4, r4, #4294967295
 80142de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80142e2:	4631      	mov	r1, r6
 80142e4:	dcf1      	bgt.n	80142ca <__exponent+0x22>
 80142e6:	3130      	adds	r1, #48	; 0x30
 80142e8:	f1ae 0502 	sub.w	r5, lr, #2
 80142ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 80142f0:	1c44      	adds	r4, r0, #1
 80142f2:	4629      	mov	r1, r5
 80142f4:	4561      	cmp	r1, ip
 80142f6:	d30a      	bcc.n	801430e <__exponent+0x66>
 80142f8:	f10d 0209 	add.w	r2, sp, #9
 80142fc:	eba2 020e 	sub.w	r2, r2, lr
 8014300:	4565      	cmp	r5, ip
 8014302:	bf88      	it	hi
 8014304:	2200      	movhi	r2, #0
 8014306:	4413      	add	r3, r2
 8014308:	1a18      	subs	r0, r3, r0
 801430a:	b003      	add	sp, #12
 801430c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801430e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014312:	f804 2f01 	strb.w	r2, [r4, #1]!
 8014316:	e7ed      	b.n	80142f4 <__exponent+0x4c>
 8014318:	2330      	movs	r3, #48	; 0x30
 801431a:	3130      	adds	r1, #48	; 0x30
 801431c:	7083      	strb	r3, [r0, #2]
 801431e:	70c1      	strb	r1, [r0, #3]
 8014320:	1d03      	adds	r3, r0, #4
 8014322:	e7f1      	b.n	8014308 <__exponent+0x60>
 8014324:	0000      	movs	r0, r0
	...

08014328 <_printf_float>:
 8014328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801432c:	b08b      	sub	sp, #44	; 0x2c
 801432e:	460c      	mov	r4, r1
 8014330:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8014334:	4616      	mov	r6, r2
 8014336:	461f      	mov	r7, r3
 8014338:	4605      	mov	r5, r0
 801433a:	f001 f9b7 	bl	80156ac <_localeconv_r>
 801433e:	f8d0 b000 	ldr.w	fp, [r0]
 8014342:	4658      	mov	r0, fp
 8014344:	f7eb ffe4 	bl	8000310 <strlen>
 8014348:	2300      	movs	r3, #0
 801434a:	9308      	str	r3, [sp, #32]
 801434c:	f8d8 3000 	ldr.w	r3, [r8]
 8014350:	f894 9018 	ldrb.w	r9, [r4, #24]
 8014354:	6822      	ldr	r2, [r4, #0]
 8014356:	3307      	adds	r3, #7
 8014358:	f023 0307 	bic.w	r3, r3, #7
 801435c:	f103 0108 	add.w	r1, r3, #8
 8014360:	f8c8 1000 	str.w	r1, [r8]
 8014364:	4682      	mov	sl, r0
 8014366:	e9d3 0100 	ldrd	r0, r1, [r3]
 801436a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801436e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80145d0 <_printf_float+0x2a8>
 8014372:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8014376:	eeb0 6bc0 	vabs.f64	d6, d0
 801437a:	eeb4 6b47 	vcmp.f64	d6, d7
 801437e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014382:	dd24      	ble.n	80143ce <_printf_float+0xa6>
 8014384:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8014388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801438c:	d502      	bpl.n	8014394 <_printf_float+0x6c>
 801438e:	232d      	movs	r3, #45	; 0x2d
 8014390:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014394:	4b90      	ldr	r3, [pc, #576]	; (80145d8 <_printf_float+0x2b0>)
 8014396:	4891      	ldr	r0, [pc, #580]	; (80145dc <_printf_float+0x2b4>)
 8014398:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801439c:	bf94      	ite	ls
 801439e:	4698      	movls	r8, r3
 80143a0:	4680      	movhi	r8, r0
 80143a2:	2303      	movs	r3, #3
 80143a4:	6123      	str	r3, [r4, #16]
 80143a6:	f022 0204 	bic.w	r2, r2, #4
 80143aa:	2300      	movs	r3, #0
 80143ac:	6022      	str	r2, [r4, #0]
 80143ae:	9304      	str	r3, [sp, #16]
 80143b0:	9700      	str	r7, [sp, #0]
 80143b2:	4633      	mov	r3, r6
 80143b4:	aa09      	add	r2, sp, #36	; 0x24
 80143b6:	4621      	mov	r1, r4
 80143b8:	4628      	mov	r0, r5
 80143ba:	f000 f9d3 	bl	8014764 <_printf_common>
 80143be:	3001      	adds	r0, #1
 80143c0:	f040 808a 	bne.w	80144d8 <_printf_float+0x1b0>
 80143c4:	f04f 30ff 	mov.w	r0, #4294967295
 80143c8:	b00b      	add	sp, #44	; 0x2c
 80143ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143ce:	eeb4 0b40 	vcmp.f64	d0, d0
 80143d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143d6:	d709      	bvc.n	80143ec <_printf_float+0xc4>
 80143d8:	ee10 3a90 	vmov	r3, s1
 80143dc:	2b00      	cmp	r3, #0
 80143de:	bfbc      	itt	lt
 80143e0:	232d      	movlt	r3, #45	; 0x2d
 80143e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80143e6:	487e      	ldr	r0, [pc, #504]	; (80145e0 <_printf_float+0x2b8>)
 80143e8:	4b7e      	ldr	r3, [pc, #504]	; (80145e4 <_printf_float+0x2bc>)
 80143ea:	e7d5      	b.n	8014398 <_printf_float+0x70>
 80143ec:	6863      	ldr	r3, [r4, #4]
 80143ee:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80143f2:	9104      	str	r1, [sp, #16]
 80143f4:	1c59      	adds	r1, r3, #1
 80143f6:	d13c      	bne.n	8014472 <_printf_float+0x14a>
 80143f8:	2306      	movs	r3, #6
 80143fa:	6063      	str	r3, [r4, #4]
 80143fc:	2300      	movs	r3, #0
 80143fe:	9303      	str	r3, [sp, #12]
 8014400:	ab08      	add	r3, sp, #32
 8014402:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8014406:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801440a:	ab07      	add	r3, sp, #28
 801440c:	6861      	ldr	r1, [r4, #4]
 801440e:	9300      	str	r3, [sp, #0]
 8014410:	6022      	str	r2, [r4, #0]
 8014412:	f10d 031b 	add.w	r3, sp, #27
 8014416:	4628      	mov	r0, r5
 8014418:	f7ff fef4 	bl	8014204 <__cvt>
 801441c:	9b04      	ldr	r3, [sp, #16]
 801441e:	9907      	ldr	r1, [sp, #28]
 8014420:	2b47      	cmp	r3, #71	; 0x47
 8014422:	4680      	mov	r8, r0
 8014424:	d108      	bne.n	8014438 <_printf_float+0x110>
 8014426:	1cc8      	adds	r0, r1, #3
 8014428:	db02      	blt.n	8014430 <_printf_float+0x108>
 801442a:	6863      	ldr	r3, [r4, #4]
 801442c:	4299      	cmp	r1, r3
 801442e:	dd41      	ble.n	80144b4 <_printf_float+0x18c>
 8014430:	f1a9 0902 	sub.w	r9, r9, #2
 8014434:	fa5f f989 	uxtb.w	r9, r9
 8014438:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801443c:	d820      	bhi.n	8014480 <_printf_float+0x158>
 801443e:	3901      	subs	r1, #1
 8014440:	464a      	mov	r2, r9
 8014442:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014446:	9107      	str	r1, [sp, #28]
 8014448:	f7ff ff2e 	bl	80142a8 <__exponent>
 801444c:	9a08      	ldr	r2, [sp, #32]
 801444e:	9004      	str	r0, [sp, #16]
 8014450:	1813      	adds	r3, r2, r0
 8014452:	2a01      	cmp	r2, #1
 8014454:	6123      	str	r3, [r4, #16]
 8014456:	dc02      	bgt.n	801445e <_printf_float+0x136>
 8014458:	6822      	ldr	r2, [r4, #0]
 801445a:	07d2      	lsls	r2, r2, #31
 801445c:	d501      	bpl.n	8014462 <_printf_float+0x13a>
 801445e:	3301      	adds	r3, #1
 8014460:	6123      	str	r3, [r4, #16]
 8014462:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d0a2      	beq.n	80143b0 <_printf_float+0x88>
 801446a:	232d      	movs	r3, #45	; 0x2d
 801446c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014470:	e79e      	b.n	80143b0 <_printf_float+0x88>
 8014472:	9904      	ldr	r1, [sp, #16]
 8014474:	2947      	cmp	r1, #71	; 0x47
 8014476:	d1c1      	bne.n	80143fc <_printf_float+0xd4>
 8014478:	2b00      	cmp	r3, #0
 801447a:	d1bf      	bne.n	80143fc <_printf_float+0xd4>
 801447c:	2301      	movs	r3, #1
 801447e:	e7bc      	b.n	80143fa <_printf_float+0xd2>
 8014480:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8014484:	d118      	bne.n	80144b8 <_printf_float+0x190>
 8014486:	2900      	cmp	r1, #0
 8014488:	6863      	ldr	r3, [r4, #4]
 801448a:	dd0b      	ble.n	80144a4 <_printf_float+0x17c>
 801448c:	6121      	str	r1, [r4, #16]
 801448e:	b913      	cbnz	r3, 8014496 <_printf_float+0x16e>
 8014490:	6822      	ldr	r2, [r4, #0]
 8014492:	07d0      	lsls	r0, r2, #31
 8014494:	d502      	bpl.n	801449c <_printf_float+0x174>
 8014496:	3301      	adds	r3, #1
 8014498:	440b      	add	r3, r1
 801449a:	6123      	str	r3, [r4, #16]
 801449c:	2300      	movs	r3, #0
 801449e:	65a1      	str	r1, [r4, #88]	; 0x58
 80144a0:	9304      	str	r3, [sp, #16]
 80144a2:	e7de      	b.n	8014462 <_printf_float+0x13a>
 80144a4:	b913      	cbnz	r3, 80144ac <_printf_float+0x184>
 80144a6:	6822      	ldr	r2, [r4, #0]
 80144a8:	07d2      	lsls	r2, r2, #31
 80144aa:	d501      	bpl.n	80144b0 <_printf_float+0x188>
 80144ac:	3302      	adds	r3, #2
 80144ae:	e7f4      	b.n	801449a <_printf_float+0x172>
 80144b0:	2301      	movs	r3, #1
 80144b2:	e7f2      	b.n	801449a <_printf_float+0x172>
 80144b4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80144b8:	9b08      	ldr	r3, [sp, #32]
 80144ba:	4299      	cmp	r1, r3
 80144bc:	db05      	blt.n	80144ca <_printf_float+0x1a2>
 80144be:	6823      	ldr	r3, [r4, #0]
 80144c0:	6121      	str	r1, [r4, #16]
 80144c2:	07d8      	lsls	r0, r3, #31
 80144c4:	d5ea      	bpl.n	801449c <_printf_float+0x174>
 80144c6:	1c4b      	adds	r3, r1, #1
 80144c8:	e7e7      	b.n	801449a <_printf_float+0x172>
 80144ca:	2900      	cmp	r1, #0
 80144cc:	bfd4      	ite	le
 80144ce:	f1c1 0202 	rsble	r2, r1, #2
 80144d2:	2201      	movgt	r2, #1
 80144d4:	4413      	add	r3, r2
 80144d6:	e7e0      	b.n	801449a <_printf_float+0x172>
 80144d8:	6823      	ldr	r3, [r4, #0]
 80144da:	055a      	lsls	r2, r3, #21
 80144dc:	d407      	bmi.n	80144ee <_printf_float+0x1c6>
 80144de:	6923      	ldr	r3, [r4, #16]
 80144e0:	4642      	mov	r2, r8
 80144e2:	4631      	mov	r1, r6
 80144e4:	4628      	mov	r0, r5
 80144e6:	47b8      	blx	r7
 80144e8:	3001      	adds	r0, #1
 80144ea:	d12a      	bne.n	8014542 <_printf_float+0x21a>
 80144ec:	e76a      	b.n	80143c4 <_printf_float+0x9c>
 80144ee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80144f2:	f240 80e2 	bls.w	80146ba <_printf_float+0x392>
 80144f6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80144fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80144fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014502:	d133      	bne.n	801456c <_printf_float+0x244>
 8014504:	4a38      	ldr	r2, [pc, #224]	; (80145e8 <_printf_float+0x2c0>)
 8014506:	2301      	movs	r3, #1
 8014508:	4631      	mov	r1, r6
 801450a:	4628      	mov	r0, r5
 801450c:	47b8      	blx	r7
 801450e:	3001      	adds	r0, #1
 8014510:	f43f af58 	beq.w	80143c4 <_printf_float+0x9c>
 8014514:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014518:	429a      	cmp	r2, r3
 801451a:	db02      	blt.n	8014522 <_printf_float+0x1fa>
 801451c:	6823      	ldr	r3, [r4, #0]
 801451e:	07d8      	lsls	r0, r3, #31
 8014520:	d50f      	bpl.n	8014542 <_printf_float+0x21a>
 8014522:	4653      	mov	r3, sl
 8014524:	465a      	mov	r2, fp
 8014526:	4631      	mov	r1, r6
 8014528:	4628      	mov	r0, r5
 801452a:	47b8      	blx	r7
 801452c:	3001      	adds	r0, #1
 801452e:	f43f af49 	beq.w	80143c4 <_printf_float+0x9c>
 8014532:	f04f 0800 	mov.w	r8, #0
 8014536:	f104 091a 	add.w	r9, r4, #26
 801453a:	9b08      	ldr	r3, [sp, #32]
 801453c:	3b01      	subs	r3, #1
 801453e:	4543      	cmp	r3, r8
 8014540:	dc09      	bgt.n	8014556 <_printf_float+0x22e>
 8014542:	6823      	ldr	r3, [r4, #0]
 8014544:	079b      	lsls	r3, r3, #30
 8014546:	f100 8108 	bmi.w	801475a <_printf_float+0x432>
 801454a:	68e0      	ldr	r0, [r4, #12]
 801454c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801454e:	4298      	cmp	r0, r3
 8014550:	bfb8      	it	lt
 8014552:	4618      	movlt	r0, r3
 8014554:	e738      	b.n	80143c8 <_printf_float+0xa0>
 8014556:	2301      	movs	r3, #1
 8014558:	464a      	mov	r2, r9
 801455a:	4631      	mov	r1, r6
 801455c:	4628      	mov	r0, r5
 801455e:	47b8      	blx	r7
 8014560:	3001      	adds	r0, #1
 8014562:	f43f af2f 	beq.w	80143c4 <_printf_float+0x9c>
 8014566:	f108 0801 	add.w	r8, r8, #1
 801456a:	e7e6      	b.n	801453a <_printf_float+0x212>
 801456c:	9b07      	ldr	r3, [sp, #28]
 801456e:	2b00      	cmp	r3, #0
 8014570:	dc3c      	bgt.n	80145ec <_printf_float+0x2c4>
 8014572:	4a1d      	ldr	r2, [pc, #116]	; (80145e8 <_printf_float+0x2c0>)
 8014574:	2301      	movs	r3, #1
 8014576:	4631      	mov	r1, r6
 8014578:	4628      	mov	r0, r5
 801457a:	47b8      	blx	r7
 801457c:	3001      	adds	r0, #1
 801457e:	f43f af21 	beq.w	80143c4 <_printf_float+0x9c>
 8014582:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8014586:	4313      	orrs	r3, r2
 8014588:	d102      	bne.n	8014590 <_printf_float+0x268>
 801458a:	6823      	ldr	r3, [r4, #0]
 801458c:	07d9      	lsls	r1, r3, #31
 801458e:	d5d8      	bpl.n	8014542 <_printf_float+0x21a>
 8014590:	4653      	mov	r3, sl
 8014592:	465a      	mov	r2, fp
 8014594:	4631      	mov	r1, r6
 8014596:	4628      	mov	r0, r5
 8014598:	47b8      	blx	r7
 801459a:	3001      	adds	r0, #1
 801459c:	f43f af12 	beq.w	80143c4 <_printf_float+0x9c>
 80145a0:	f04f 0900 	mov.w	r9, #0
 80145a4:	f104 0a1a 	add.w	sl, r4, #26
 80145a8:	9b07      	ldr	r3, [sp, #28]
 80145aa:	425b      	negs	r3, r3
 80145ac:	454b      	cmp	r3, r9
 80145ae:	dc01      	bgt.n	80145b4 <_printf_float+0x28c>
 80145b0:	9b08      	ldr	r3, [sp, #32]
 80145b2:	e795      	b.n	80144e0 <_printf_float+0x1b8>
 80145b4:	2301      	movs	r3, #1
 80145b6:	4652      	mov	r2, sl
 80145b8:	4631      	mov	r1, r6
 80145ba:	4628      	mov	r0, r5
 80145bc:	47b8      	blx	r7
 80145be:	3001      	adds	r0, #1
 80145c0:	f43f af00 	beq.w	80143c4 <_printf_float+0x9c>
 80145c4:	f109 0901 	add.w	r9, r9, #1
 80145c8:	e7ee      	b.n	80145a8 <_printf_float+0x280>
 80145ca:	bf00      	nop
 80145cc:	f3af 8000 	nop.w
 80145d0:	ffffffff 	.word	0xffffffff
 80145d4:	7fefffff 	.word	0x7fefffff
 80145d8:	080180fc 	.word	0x080180fc
 80145dc:	08018100 	.word	0x08018100
 80145e0:	08018108 	.word	0x08018108
 80145e4:	08018104 	.word	0x08018104
 80145e8:	0801810c 	.word	0x0801810c
 80145ec:	9a08      	ldr	r2, [sp, #32]
 80145ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80145f0:	429a      	cmp	r2, r3
 80145f2:	bfa8      	it	ge
 80145f4:	461a      	movge	r2, r3
 80145f6:	2a00      	cmp	r2, #0
 80145f8:	4691      	mov	r9, r2
 80145fa:	dc38      	bgt.n	801466e <_printf_float+0x346>
 80145fc:	2300      	movs	r3, #0
 80145fe:	9305      	str	r3, [sp, #20]
 8014600:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014604:	f104 021a 	add.w	r2, r4, #26
 8014608:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801460a:	9905      	ldr	r1, [sp, #20]
 801460c:	9304      	str	r3, [sp, #16]
 801460e:	eba3 0309 	sub.w	r3, r3, r9
 8014612:	428b      	cmp	r3, r1
 8014614:	dc33      	bgt.n	801467e <_printf_float+0x356>
 8014616:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801461a:	429a      	cmp	r2, r3
 801461c:	db3c      	blt.n	8014698 <_printf_float+0x370>
 801461e:	6823      	ldr	r3, [r4, #0]
 8014620:	07da      	lsls	r2, r3, #31
 8014622:	d439      	bmi.n	8014698 <_printf_float+0x370>
 8014624:	9a08      	ldr	r2, [sp, #32]
 8014626:	9b04      	ldr	r3, [sp, #16]
 8014628:	9907      	ldr	r1, [sp, #28]
 801462a:	1ad3      	subs	r3, r2, r3
 801462c:	eba2 0901 	sub.w	r9, r2, r1
 8014630:	4599      	cmp	r9, r3
 8014632:	bfa8      	it	ge
 8014634:	4699      	movge	r9, r3
 8014636:	f1b9 0f00 	cmp.w	r9, #0
 801463a:	dc35      	bgt.n	80146a8 <_printf_float+0x380>
 801463c:	f04f 0800 	mov.w	r8, #0
 8014640:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014644:	f104 0a1a 	add.w	sl, r4, #26
 8014648:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801464c:	1a9b      	subs	r3, r3, r2
 801464e:	eba3 0309 	sub.w	r3, r3, r9
 8014652:	4543      	cmp	r3, r8
 8014654:	f77f af75 	ble.w	8014542 <_printf_float+0x21a>
 8014658:	2301      	movs	r3, #1
 801465a:	4652      	mov	r2, sl
 801465c:	4631      	mov	r1, r6
 801465e:	4628      	mov	r0, r5
 8014660:	47b8      	blx	r7
 8014662:	3001      	adds	r0, #1
 8014664:	f43f aeae 	beq.w	80143c4 <_printf_float+0x9c>
 8014668:	f108 0801 	add.w	r8, r8, #1
 801466c:	e7ec      	b.n	8014648 <_printf_float+0x320>
 801466e:	4613      	mov	r3, r2
 8014670:	4631      	mov	r1, r6
 8014672:	4642      	mov	r2, r8
 8014674:	4628      	mov	r0, r5
 8014676:	47b8      	blx	r7
 8014678:	3001      	adds	r0, #1
 801467a:	d1bf      	bne.n	80145fc <_printf_float+0x2d4>
 801467c:	e6a2      	b.n	80143c4 <_printf_float+0x9c>
 801467e:	2301      	movs	r3, #1
 8014680:	4631      	mov	r1, r6
 8014682:	4628      	mov	r0, r5
 8014684:	9204      	str	r2, [sp, #16]
 8014686:	47b8      	blx	r7
 8014688:	3001      	adds	r0, #1
 801468a:	f43f ae9b 	beq.w	80143c4 <_printf_float+0x9c>
 801468e:	9b05      	ldr	r3, [sp, #20]
 8014690:	9a04      	ldr	r2, [sp, #16]
 8014692:	3301      	adds	r3, #1
 8014694:	9305      	str	r3, [sp, #20]
 8014696:	e7b7      	b.n	8014608 <_printf_float+0x2e0>
 8014698:	4653      	mov	r3, sl
 801469a:	465a      	mov	r2, fp
 801469c:	4631      	mov	r1, r6
 801469e:	4628      	mov	r0, r5
 80146a0:	47b8      	blx	r7
 80146a2:	3001      	adds	r0, #1
 80146a4:	d1be      	bne.n	8014624 <_printf_float+0x2fc>
 80146a6:	e68d      	b.n	80143c4 <_printf_float+0x9c>
 80146a8:	9a04      	ldr	r2, [sp, #16]
 80146aa:	464b      	mov	r3, r9
 80146ac:	4442      	add	r2, r8
 80146ae:	4631      	mov	r1, r6
 80146b0:	4628      	mov	r0, r5
 80146b2:	47b8      	blx	r7
 80146b4:	3001      	adds	r0, #1
 80146b6:	d1c1      	bne.n	801463c <_printf_float+0x314>
 80146b8:	e684      	b.n	80143c4 <_printf_float+0x9c>
 80146ba:	9a08      	ldr	r2, [sp, #32]
 80146bc:	2a01      	cmp	r2, #1
 80146be:	dc01      	bgt.n	80146c4 <_printf_float+0x39c>
 80146c0:	07db      	lsls	r3, r3, #31
 80146c2:	d537      	bpl.n	8014734 <_printf_float+0x40c>
 80146c4:	2301      	movs	r3, #1
 80146c6:	4642      	mov	r2, r8
 80146c8:	4631      	mov	r1, r6
 80146ca:	4628      	mov	r0, r5
 80146cc:	47b8      	blx	r7
 80146ce:	3001      	adds	r0, #1
 80146d0:	f43f ae78 	beq.w	80143c4 <_printf_float+0x9c>
 80146d4:	4653      	mov	r3, sl
 80146d6:	465a      	mov	r2, fp
 80146d8:	4631      	mov	r1, r6
 80146da:	4628      	mov	r0, r5
 80146dc:	47b8      	blx	r7
 80146de:	3001      	adds	r0, #1
 80146e0:	f43f ae70 	beq.w	80143c4 <_printf_float+0x9c>
 80146e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80146e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80146ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146f0:	d01b      	beq.n	801472a <_printf_float+0x402>
 80146f2:	9b08      	ldr	r3, [sp, #32]
 80146f4:	f108 0201 	add.w	r2, r8, #1
 80146f8:	3b01      	subs	r3, #1
 80146fa:	4631      	mov	r1, r6
 80146fc:	4628      	mov	r0, r5
 80146fe:	47b8      	blx	r7
 8014700:	3001      	adds	r0, #1
 8014702:	d10e      	bne.n	8014722 <_printf_float+0x3fa>
 8014704:	e65e      	b.n	80143c4 <_printf_float+0x9c>
 8014706:	2301      	movs	r3, #1
 8014708:	464a      	mov	r2, r9
 801470a:	4631      	mov	r1, r6
 801470c:	4628      	mov	r0, r5
 801470e:	47b8      	blx	r7
 8014710:	3001      	adds	r0, #1
 8014712:	f43f ae57 	beq.w	80143c4 <_printf_float+0x9c>
 8014716:	f108 0801 	add.w	r8, r8, #1
 801471a:	9b08      	ldr	r3, [sp, #32]
 801471c:	3b01      	subs	r3, #1
 801471e:	4543      	cmp	r3, r8
 8014720:	dcf1      	bgt.n	8014706 <_printf_float+0x3de>
 8014722:	9b04      	ldr	r3, [sp, #16]
 8014724:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014728:	e6db      	b.n	80144e2 <_printf_float+0x1ba>
 801472a:	f04f 0800 	mov.w	r8, #0
 801472e:	f104 091a 	add.w	r9, r4, #26
 8014732:	e7f2      	b.n	801471a <_printf_float+0x3f2>
 8014734:	2301      	movs	r3, #1
 8014736:	4642      	mov	r2, r8
 8014738:	e7df      	b.n	80146fa <_printf_float+0x3d2>
 801473a:	2301      	movs	r3, #1
 801473c:	464a      	mov	r2, r9
 801473e:	4631      	mov	r1, r6
 8014740:	4628      	mov	r0, r5
 8014742:	47b8      	blx	r7
 8014744:	3001      	adds	r0, #1
 8014746:	f43f ae3d 	beq.w	80143c4 <_printf_float+0x9c>
 801474a:	f108 0801 	add.w	r8, r8, #1
 801474e:	68e3      	ldr	r3, [r4, #12]
 8014750:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014752:	1a5b      	subs	r3, r3, r1
 8014754:	4543      	cmp	r3, r8
 8014756:	dcf0      	bgt.n	801473a <_printf_float+0x412>
 8014758:	e6f7      	b.n	801454a <_printf_float+0x222>
 801475a:	f04f 0800 	mov.w	r8, #0
 801475e:	f104 0919 	add.w	r9, r4, #25
 8014762:	e7f4      	b.n	801474e <_printf_float+0x426>

08014764 <_printf_common>:
 8014764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014768:	4616      	mov	r6, r2
 801476a:	4699      	mov	r9, r3
 801476c:	688a      	ldr	r2, [r1, #8]
 801476e:	690b      	ldr	r3, [r1, #16]
 8014770:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014774:	4293      	cmp	r3, r2
 8014776:	bfb8      	it	lt
 8014778:	4613      	movlt	r3, r2
 801477a:	6033      	str	r3, [r6, #0]
 801477c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014780:	4607      	mov	r7, r0
 8014782:	460c      	mov	r4, r1
 8014784:	b10a      	cbz	r2, 801478a <_printf_common+0x26>
 8014786:	3301      	adds	r3, #1
 8014788:	6033      	str	r3, [r6, #0]
 801478a:	6823      	ldr	r3, [r4, #0]
 801478c:	0699      	lsls	r1, r3, #26
 801478e:	bf42      	ittt	mi
 8014790:	6833      	ldrmi	r3, [r6, #0]
 8014792:	3302      	addmi	r3, #2
 8014794:	6033      	strmi	r3, [r6, #0]
 8014796:	6825      	ldr	r5, [r4, #0]
 8014798:	f015 0506 	ands.w	r5, r5, #6
 801479c:	d106      	bne.n	80147ac <_printf_common+0x48>
 801479e:	f104 0a19 	add.w	sl, r4, #25
 80147a2:	68e3      	ldr	r3, [r4, #12]
 80147a4:	6832      	ldr	r2, [r6, #0]
 80147a6:	1a9b      	subs	r3, r3, r2
 80147a8:	42ab      	cmp	r3, r5
 80147aa:	dc26      	bgt.n	80147fa <_printf_common+0x96>
 80147ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80147b0:	1e13      	subs	r3, r2, #0
 80147b2:	6822      	ldr	r2, [r4, #0]
 80147b4:	bf18      	it	ne
 80147b6:	2301      	movne	r3, #1
 80147b8:	0692      	lsls	r2, r2, #26
 80147ba:	d42b      	bmi.n	8014814 <_printf_common+0xb0>
 80147bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80147c0:	4649      	mov	r1, r9
 80147c2:	4638      	mov	r0, r7
 80147c4:	47c0      	blx	r8
 80147c6:	3001      	adds	r0, #1
 80147c8:	d01e      	beq.n	8014808 <_printf_common+0xa4>
 80147ca:	6823      	ldr	r3, [r4, #0]
 80147cc:	68e5      	ldr	r5, [r4, #12]
 80147ce:	6832      	ldr	r2, [r6, #0]
 80147d0:	f003 0306 	and.w	r3, r3, #6
 80147d4:	2b04      	cmp	r3, #4
 80147d6:	bf08      	it	eq
 80147d8:	1aad      	subeq	r5, r5, r2
 80147da:	68a3      	ldr	r3, [r4, #8]
 80147dc:	6922      	ldr	r2, [r4, #16]
 80147de:	bf0c      	ite	eq
 80147e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80147e4:	2500      	movne	r5, #0
 80147e6:	4293      	cmp	r3, r2
 80147e8:	bfc4      	itt	gt
 80147ea:	1a9b      	subgt	r3, r3, r2
 80147ec:	18ed      	addgt	r5, r5, r3
 80147ee:	2600      	movs	r6, #0
 80147f0:	341a      	adds	r4, #26
 80147f2:	42b5      	cmp	r5, r6
 80147f4:	d11a      	bne.n	801482c <_printf_common+0xc8>
 80147f6:	2000      	movs	r0, #0
 80147f8:	e008      	b.n	801480c <_printf_common+0xa8>
 80147fa:	2301      	movs	r3, #1
 80147fc:	4652      	mov	r2, sl
 80147fe:	4649      	mov	r1, r9
 8014800:	4638      	mov	r0, r7
 8014802:	47c0      	blx	r8
 8014804:	3001      	adds	r0, #1
 8014806:	d103      	bne.n	8014810 <_printf_common+0xac>
 8014808:	f04f 30ff 	mov.w	r0, #4294967295
 801480c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014810:	3501      	adds	r5, #1
 8014812:	e7c6      	b.n	80147a2 <_printf_common+0x3e>
 8014814:	18e1      	adds	r1, r4, r3
 8014816:	1c5a      	adds	r2, r3, #1
 8014818:	2030      	movs	r0, #48	; 0x30
 801481a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801481e:	4422      	add	r2, r4
 8014820:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014824:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014828:	3302      	adds	r3, #2
 801482a:	e7c7      	b.n	80147bc <_printf_common+0x58>
 801482c:	2301      	movs	r3, #1
 801482e:	4622      	mov	r2, r4
 8014830:	4649      	mov	r1, r9
 8014832:	4638      	mov	r0, r7
 8014834:	47c0      	blx	r8
 8014836:	3001      	adds	r0, #1
 8014838:	d0e6      	beq.n	8014808 <_printf_common+0xa4>
 801483a:	3601      	adds	r6, #1
 801483c:	e7d9      	b.n	80147f2 <_printf_common+0x8e>
	...

08014840 <_printf_i>:
 8014840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014844:	460c      	mov	r4, r1
 8014846:	4691      	mov	r9, r2
 8014848:	7e27      	ldrb	r7, [r4, #24]
 801484a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801484c:	2f78      	cmp	r7, #120	; 0x78
 801484e:	4680      	mov	r8, r0
 8014850:	469a      	mov	sl, r3
 8014852:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014856:	d807      	bhi.n	8014868 <_printf_i+0x28>
 8014858:	2f62      	cmp	r7, #98	; 0x62
 801485a:	d80a      	bhi.n	8014872 <_printf_i+0x32>
 801485c:	2f00      	cmp	r7, #0
 801485e:	f000 80d8 	beq.w	8014a12 <_printf_i+0x1d2>
 8014862:	2f58      	cmp	r7, #88	; 0x58
 8014864:	f000 80a3 	beq.w	80149ae <_printf_i+0x16e>
 8014868:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801486c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014870:	e03a      	b.n	80148e8 <_printf_i+0xa8>
 8014872:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014876:	2b15      	cmp	r3, #21
 8014878:	d8f6      	bhi.n	8014868 <_printf_i+0x28>
 801487a:	a001      	add	r0, pc, #4	; (adr r0, 8014880 <_printf_i+0x40>)
 801487c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014880:	080148d9 	.word	0x080148d9
 8014884:	080148ed 	.word	0x080148ed
 8014888:	08014869 	.word	0x08014869
 801488c:	08014869 	.word	0x08014869
 8014890:	08014869 	.word	0x08014869
 8014894:	08014869 	.word	0x08014869
 8014898:	080148ed 	.word	0x080148ed
 801489c:	08014869 	.word	0x08014869
 80148a0:	08014869 	.word	0x08014869
 80148a4:	08014869 	.word	0x08014869
 80148a8:	08014869 	.word	0x08014869
 80148ac:	080149f9 	.word	0x080149f9
 80148b0:	0801491d 	.word	0x0801491d
 80148b4:	080149db 	.word	0x080149db
 80148b8:	08014869 	.word	0x08014869
 80148bc:	08014869 	.word	0x08014869
 80148c0:	08014a1b 	.word	0x08014a1b
 80148c4:	08014869 	.word	0x08014869
 80148c8:	0801491d 	.word	0x0801491d
 80148cc:	08014869 	.word	0x08014869
 80148d0:	08014869 	.word	0x08014869
 80148d4:	080149e3 	.word	0x080149e3
 80148d8:	680b      	ldr	r3, [r1, #0]
 80148da:	1d1a      	adds	r2, r3, #4
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	600a      	str	r2, [r1, #0]
 80148e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80148e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80148e8:	2301      	movs	r3, #1
 80148ea:	e0a3      	b.n	8014a34 <_printf_i+0x1f4>
 80148ec:	6825      	ldr	r5, [r4, #0]
 80148ee:	6808      	ldr	r0, [r1, #0]
 80148f0:	062e      	lsls	r6, r5, #24
 80148f2:	f100 0304 	add.w	r3, r0, #4
 80148f6:	d50a      	bpl.n	801490e <_printf_i+0xce>
 80148f8:	6805      	ldr	r5, [r0, #0]
 80148fa:	600b      	str	r3, [r1, #0]
 80148fc:	2d00      	cmp	r5, #0
 80148fe:	da03      	bge.n	8014908 <_printf_i+0xc8>
 8014900:	232d      	movs	r3, #45	; 0x2d
 8014902:	426d      	negs	r5, r5
 8014904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014908:	485e      	ldr	r0, [pc, #376]	; (8014a84 <_printf_i+0x244>)
 801490a:	230a      	movs	r3, #10
 801490c:	e019      	b.n	8014942 <_printf_i+0x102>
 801490e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8014912:	6805      	ldr	r5, [r0, #0]
 8014914:	600b      	str	r3, [r1, #0]
 8014916:	bf18      	it	ne
 8014918:	b22d      	sxthne	r5, r5
 801491a:	e7ef      	b.n	80148fc <_printf_i+0xbc>
 801491c:	680b      	ldr	r3, [r1, #0]
 801491e:	6825      	ldr	r5, [r4, #0]
 8014920:	1d18      	adds	r0, r3, #4
 8014922:	6008      	str	r0, [r1, #0]
 8014924:	0628      	lsls	r0, r5, #24
 8014926:	d501      	bpl.n	801492c <_printf_i+0xec>
 8014928:	681d      	ldr	r5, [r3, #0]
 801492a:	e002      	b.n	8014932 <_printf_i+0xf2>
 801492c:	0669      	lsls	r1, r5, #25
 801492e:	d5fb      	bpl.n	8014928 <_printf_i+0xe8>
 8014930:	881d      	ldrh	r5, [r3, #0]
 8014932:	4854      	ldr	r0, [pc, #336]	; (8014a84 <_printf_i+0x244>)
 8014934:	2f6f      	cmp	r7, #111	; 0x6f
 8014936:	bf0c      	ite	eq
 8014938:	2308      	moveq	r3, #8
 801493a:	230a      	movne	r3, #10
 801493c:	2100      	movs	r1, #0
 801493e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014942:	6866      	ldr	r6, [r4, #4]
 8014944:	60a6      	str	r6, [r4, #8]
 8014946:	2e00      	cmp	r6, #0
 8014948:	bfa2      	ittt	ge
 801494a:	6821      	ldrge	r1, [r4, #0]
 801494c:	f021 0104 	bicge.w	r1, r1, #4
 8014950:	6021      	strge	r1, [r4, #0]
 8014952:	b90d      	cbnz	r5, 8014958 <_printf_i+0x118>
 8014954:	2e00      	cmp	r6, #0
 8014956:	d04d      	beq.n	80149f4 <_printf_i+0x1b4>
 8014958:	4616      	mov	r6, r2
 801495a:	fbb5 f1f3 	udiv	r1, r5, r3
 801495e:	fb03 5711 	mls	r7, r3, r1, r5
 8014962:	5dc7      	ldrb	r7, [r0, r7]
 8014964:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014968:	462f      	mov	r7, r5
 801496a:	42bb      	cmp	r3, r7
 801496c:	460d      	mov	r5, r1
 801496e:	d9f4      	bls.n	801495a <_printf_i+0x11a>
 8014970:	2b08      	cmp	r3, #8
 8014972:	d10b      	bne.n	801498c <_printf_i+0x14c>
 8014974:	6823      	ldr	r3, [r4, #0]
 8014976:	07df      	lsls	r7, r3, #31
 8014978:	d508      	bpl.n	801498c <_printf_i+0x14c>
 801497a:	6923      	ldr	r3, [r4, #16]
 801497c:	6861      	ldr	r1, [r4, #4]
 801497e:	4299      	cmp	r1, r3
 8014980:	bfde      	ittt	le
 8014982:	2330      	movle	r3, #48	; 0x30
 8014984:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014988:	f106 36ff 	addle.w	r6, r6, #4294967295
 801498c:	1b92      	subs	r2, r2, r6
 801498e:	6122      	str	r2, [r4, #16]
 8014990:	f8cd a000 	str.w	sl, [sp]
 8014994:	464b      	mov	r3, r9
 8014996:	aa03      	add	r2, sp, #12
 8014998:	4621      	mov	r1, r4
 801499a:	4640      	mov	r0, r8
 801499c:	f7ff fee2 	bl	8014764 <_printf_common>
 80149a0:	3001      	adds	r0, #1
 80149a2:	d14c      	bne.n	8014a3e <_printf_i+0x1fe>
 80149a4:	f04f 30ff 	mov.w	r0, #4294967295
 80149a8:	b004      	add	sp, #16
 80149aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149ae:	4835      	ldr	r0, [pc, #212]	; (8014a84 <_printf_i+0x244>)
 80149b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80149b4:	6823      	ldr	r3, [r4, #0]
 80149b6:	680e      	ldr	r6, [r1, #0]
 80149b8:	061f      	lsls	r7, r3, #24
 80149ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80149be:	600e      	str	r6, [r1, #0]
 80149c0:	d514      	bpl.n	80149ec <_printf_i+0x1ac>
 80149c2:	07d9      	lsls	r1, r3, #31
 80149c4:	bf44      	itt	mi
 80149c6:	f043 0320 	orrmi.w	r3, r3, #32
 80149ca:	6023      	strmi	r3, [r4, #0]
 80149cc:	b91d      	cbnz	r5, 80149d6 <_printf_i+0x196>
 80149ce:	6823      	ldr	r3, [r4, #0]
 80149d0:	f023 0320 	bic.w	r3, r3, #32
 80149d4:	6023      	str	r3, [r4, #0]
 80149d6:	2310      	movs	r3, #16
 80149d8:	e7b0      	b.n	801493c <_printf_i+0xfc>
 80149da:	6823      	ldr	r3, [r4, #0]
 80149dc:	f043 0320 	orr.w	r3, r3, #32
 80149e0:	6023      	str	r3, [r4, #0]
 80149e2:	2378      	movs	r3, #120	; 0x78
 80149e4:	4828      	ldr	r0, [pc, #160]	; (8014a88 <_printf_i+0x248>)
 80149e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80149ea:	e7e3      	b.n	80149b4 <_printf_i+0x174>
 80149ec:	065e      	lsls	r6, r3, #25
 80149ee:	bf48      	it	mi
 80149f0:	b2ad      	uxthmi	r5, r5
 80149f2:	e7e6      	b.n	80149c2 <_printf_i+0x182>
 80149f4:	4616      	mov	r6, r2
 80149f6:	e7bb      	b.n	8014970 <_printf_i+0x130>
 80149f8:	680b      	ldr	r3, [r1, #0]
 80149fa:	6826      	ldr	r6, [r4, #0]
 80149fc:	6960      	ldr	r0, [r4, #20]
 80149fe:	1d1d      	adds	r5, r3, #4
 8014a00:	600d      	str	r5, [r1, #0]
 8014a02:	0635      	lsls	r5, r6, #24
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	d501      	bpl.n	8014a0c <_printf_i+0x1cc>
 8014a08:	6018      	str	r0, [r3, #0]
 8014a0a:	e002      	b.n	8014a12 <_printf_i+0x1d2>
 8014a0c:	0671      	lsls	r1, r6, #25
 8014a0e:	d5fb      	bpl.n	8014a08 <_printf_i+0x1c8>
 8014a10:	8018      	strh	r0, [r3, #0]
 8014a12:	2300      	movs	r3, #0
 8014a14:	6123      	str	r3, [r4, #16]
 8014a16:	4616      	mov	r6, r2
 8014a18:	e7ba      	b.n	8014990 <_printf_i+0x150>
 8014a1a:	680b      	ldr	r3, [r1, #0]
 8014a1c:	1d1a      	adds	r2, r3, #4
 8014a1e:	600a      	str	r2, [r1, #0]
 8014a20:	681e      	ldr	r6, [r3, #0]
 8014a22:	6862      	ldr	r2, [r4, #4]
 8014a24:	2100      	movs	r1, #0
 8014a26:	4630      	mov	r0, r6
 8014a28:	f7eb fc7a 	bl	8000320 <memchr>
 8014a2c:	b108      	cbz	r0, 8014a32 <_printf_i+0x1f2>
 8014a2e:	1b80      	subs	r0, r0, r6
 8014a30:	6060      	str	r0, [r4, #4]
 8014a32:	6863      	ldr	r3, [r4, #4]
 8014a34:	6123      	str	r3, [r4, #16]
 8014a36:	2300      	movs	r3, #0
 8014a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014a3c:	e7a8      	b.n	8014990 <_printf_i+0x150>
 8014a3e:	6923      	ldr	r3, [r4, #16]
 8014a40:	4632      	mov	r2, r6
 8014a42:	4649      	mov	r1, r9
 8014a44:	4640      	mov	r0, r8
 8014a46:	47d0      	blx	sl
 8014a48:	3001      	adds	r0, #1
 8014a4a:	d0ab      	beq.n	80149a4 <_printf_i+0x164>
 8014a4c:	6823      	ldr	r3, [r4, #0]
 8014a4e:	079b      	lsls	r3, r3, #30
 8014a50:	d413      	bmi.n	8014a7a <_printf_i+0x23a>
 8014a52:	68e0      	ldr	r0, [r4, #12]
 8014a54:	9b03      	ldr	r3, [sp, #12]
 8014a56:	4298      	cmp	r0, r3
 8014a58:	bfb8      	it	lt
 8014a5a:	4618      	movlt	r0, r3
 8014a5c:	e7a4      	b.n	80149a8 <_printf_i+0x168>
 8014a5e:	2301      	movs	r3, #1
 8014a60:	4632      	mov	r2, r6
 8014a62:	4649      	mov	r1, r9
 8014a64:	4640      	mov	r0, r8
 8014a66:	47d0      	blx	sl
 8014a68:	3001      	adds	r0, #1
 8014a6a:	d09b      	beq.n	80149a4 <_printf_i+0x164>
 8014a6c:	3501      	adds	r5, #1
 8014a6e:	68e3      	ldr	r3, [r4, #12]
 8014a70:	9903      	ldr	r1, [sp, #12]
 8014a72:	1a5b      	subs	r3, r3, r1
 8014a74:	42ab      	cmp	r3, r5
 8014a76:	dcf2      	bgt.n	8014a5e <_printf_i+0x21e>
 8014a78:	e7eb      	b.n	8014a52 <_printf_i+0x212>
 8014a7a:	2500      	movs	r5, #0
 8014a7c:	f104 0619 	add.w	r6, r4, #25
 8014a80:	e7f5      	b.n	8014a6e <_printf_i+0x22e>
 8014a82:	bf00      	nop
 8014a84:	0801810e 	.word	0x0801810e
 8014a88:	0801811f 	.word	0x0801811f

08014a8c <quorem>:
 8014a8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a90:	6903      	ldr	r3, [r0, #16]
 8014a92:	690c      	ldr	r4, [r1, #16]
 8014a94:	42a3      	cmp	r3, r4
 8014a96:	4607      	mov	r7, r0
 8014a98:	f2c0 8081 	blt.w	8014b9e <quorem+0x112>
 8014a9c:	3c01      	subs	r4, #1
 8014a9e:	f101 0814 	add.w	r8, r1, #20
 8014aa2:	f100 0514 	add.w	r5, r0, #20
 8014aa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014aaa:	9301      	str	r3, [sp, #4]
 8014aac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014ab0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014ab4:	3301      	adds	r3, #1
 8014ab6:	429a      	cmp	r2, r3
 8014ab8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014abc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014ac0:	fbb2 f6f3 	udiv	r6, r2, r3
 8014ac4:	d331      	bcc.n	8014b2a <quorem+0x9e>
 8014ac6:	f04f 0e00 	mov.w	lr, #0
 8014aca:	4640      	mov	r0, r8
 8014acc:	46ac      	mov	ip, r5
 8014ace:	46f2      	mov	sl, lr
 8014ad0:	f850 2b04 	ldr.w	r2, [r0], #4
 8014ad4:	b293      	uxth	r3, r2
 8014ad6:	fb06 e303 	mla	r3, r6, r3, lr
 8014ada:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014ade:	b29b      	uxth	r3, r3
 8014ae0:	ebaa 0303 	sub.w	r3, sl, r3
 8014ae4:	0c12      	lsrs	r2, r2, #16
 8014ae6:	f8dc a000 	ldr.w	sl, [ip]
 8014aea:	fb06 e202 	mla	r2, r6, r2, lr
 8014aee:	fa13 f38a 	uxtah	r3, r3, sl
 8014af2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014af6:	fa1f fa82 	uxth.w	sl, r2
 8014afa:	f8dc 2000 	ldr.w	r2, [ip]
 8014afe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8014b02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014b06:	b29b      	uxth	r3, r3
 8014b08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014b0c:	4581      	cmp	r9, r0
 8014b0e:	f84c 3b04 	str.w	r3, [ip], #4
 8014b12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014b16:	d2db      	bcs.n	8014ad0 <quorem+0x44>
 8014b18:	f855 300b 	ldr.w	r3, [r5, fp]
 8014b1c:	b92b      	cbnz	r3, 8014b2a <quorem+0x9e>
 8014b1e:	9b01      	ldr	r3, [sp, #4]
 8014b20:	3b04      	subs	r3, #4
 8014b22:	429d      	cmp	r5, r3
 8014b24:	461a      	mov	r2, r3
 8014b26:	d32e      	bcc.n	8014b86 <quorem+0xfa>
 8014b28:	613c      	str	r4, [r7, #16]
 8014b2a:	4638      	mov	r0, r7
 8014b2c:	f001 f848 	bl	8015bc0 <__mcmp>
 8014b30:	2800      	cmp	r0, #0
 8014b32:	db24      	blt.n	8014b7e <quorem+0xf2>
 8014b34:	3601      	adds	r6, #1
 8014b36:	4628      	mov	r0, r5
 8014b38:	f04f 0c00 	mov.w	ip, #0
 8014b3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8014b40:	f8d0 e000 	ldr.w	lr, [r0]
 8014b44:	b293      	uxth	r3, r2
 8014b46:	ebac 0303 	sub.w	r3, ip, r3
 8014b4a:	0c12      	lsrs	r2, r2, #16
 8014b4c:	fa13 f38e 	uxtah	r3, r3, lr
 8014b50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014b54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014b58:	b29b      	uxth	r3, r3
 8014b5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014b5e:	45c1      	cmp	r9, r8
 8014b60:	f840 3b04 	str.w	r3, [r0], #4
 8014b64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014b68:	d2e8      	bcs.n	8014b3c <quorem+0xb0>
 8014b6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014b6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014b72:	b922      	cbnz	r2, 8014b7e <quorem+0xf2>
 8014b74:	3b04      	subs	r3, #4
 8014b76:	429d      	cmp	r5, r3
 8014b78:	461a      	mov	r2, r3
 8014b7a:	d30a      	bcc.n	8014b92 <quorem+0x106>
 8014b7c:	613c      	str	r4, [r7, #16]
 8014b7e:	4630      	mov	r0, r6
 8014b80:	b003      	add	sp, #12
 8014b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b86:	6812      	ldr	r2, [r2, #0]
 8014b88:	3b04      	subs	r3, #4
 8014b8a:	2a00      	cmp	r2, #0
 8014b8c:	d1cc      	bne.n	8014b28 <quorem+0x9c>
 8014b8e:	3c01      	subs	r4, #1
 8014b90:	e7c7      	b.n	8014b22 <quorem+0x96>
 8014b92:	6812      	ldr	r2, [r2, #0]
 8014b94:	3b04      	subs	r3, #4
 8014b96:	2a00      	cmp	r2, #0
 8014b98:	d1f0      	bne.n	8014b7c <quorem+0xf0>
 8014b9a:	3c01      	subs	r4, #1
 8014b9c:	e7eb      	b.n	8014b76 <quorem+0xea>
 8014b9e:	2000      	movs	r0, #0
 8014ba0:	e7ee      	b.n	8014b80 <quorem+0xf4>
 8014ba2:	0000      	movs	r0, r0
 8014ba4:	0000      	movs	r0, r0
	...

08014ba8 <_dtoa_r>:
 8014ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bac:	ec59 8b10 	vmov	r8, r9, d0
 8014bb0:	b095      	sub	sp, #84	; 0x54
 8014bb2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014bb4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8014bb6:	9107      	str	r1, [sp, #28]
 8014bb8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8014bbc:	4606      	mov	r6, r0
 8014bbe:	9209      	str	r2, [sp, #36]	; 0x24
 8014bc0:	9310      	str	r3, [sp, #64]	; 0x40
 8014bc2:	b975      	cbnz	r5, 8014be2 <_dtoa_r+0x3a>
 8014bc4:	2010      	movs	r0, #16
 8014bc6:	f000 fd75 	bl	80156b4 <malloc>
 8014bca:	4602      	mov	r2, r0
 8014bcc:	6270      	str	r0, [r6, #36]	; 0x24
 8014bce:	b920      	cbnz	r0, 8014bda <_dtoa_r+0x32>
 8014bd0:	4bab      	ldr	r3, [pc, #684]	; (8014e80 <_dtoa_r+0x2d8>)
 8014bd2:	21ea      	movs	r1, #234	; 0xea
 8014bd4:	48ab      	ldr	r0, [pc, #684]	; (8014e84 <_dtoa_r+0x2dc>)
 8014bd6:	f001 f9bd 	bl	8015f54 <__assert_func>
 8014bda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014bde:	6005      	str	r5, [r0, #0]
 8014be0:	60c5      	str	r5, [r0, #12]
 8014be2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014be4:	6819      	ldr	r1, [r3, #0]
 8014be6:	b151      	cbz	r1, 8014bfe <_dtoa_r+0x56>
 8014be8:	685a      	ldr	r2, [r3, #4]
 8014bea:	604a      	str	r2, [r1, #4]
 8014bec:	2301      	movs	r3, #1
 8014bee:	4093      	lsls	r3, r2
 8014bf0:	608b      	str	r3, [r1, #8]
 8014bf2:	4630      	mov	r0, r6
 8014bf4:	f000 fda6 	bl	8015744 <_Bfree>
 8014bf8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	601a      	str	r2, [r3, #0]
 8014bfe:	f1b9 0300 	subs.w	r3, r9, #0
 8014c02:	bfbb      	ittet	lt
 8014c04:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014c08:	9303      	strlt	r3, [sp, #12]
 8014c0a:	2300      	movge	r3, #0
 8014c0c:	2201      	movlt	r2, #1
 8014c0e:	bfac      	ite	ge
 8014c10:	6023      	strge	r3, [r4, #0]
 8014c12:	6022      	strlt	r2, [r4, #0]
 8014c14:	4b9c      	ldr	r3, [pc, #624]	; (8014e88 <_dtoa_r+0x2e0>)
 8014c16:	9c03      	ldr	r4, [sp, #12]
 8014c18:	43a3      	bics	r3, r4
 8014c1a:	d11a      	bne.n	8014c52 <_dtoa_r+0xaa>
 8014c1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014c1e:	f242 730f 	movw	r3, #9999	; 0x270f
 8014c22:	6013      	str	r3, [r2, #0]
 8014c24:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8014c28:	ea53 0308 	orrs.w	r3, r3, r8
 8014c2c:	f000 8512 	beq.w	8015654 <_dtoa_r+0xaac>
 8014c30:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014c32:	b953      	cbnz	r3, 8014c4a <_dtoa_r+0xa2>
 8014c34:	4b95      	ldr	r3, [pc, #596]	; (8014e8c <_dtoa_r+0x2e4>)
 8014c36:	e01f      	b.n	8014c78 <_dtoa_r+0xd0>
 8014c38:	4b95      	ldr	r3, [pc, #596]	; (8014e90 <_dtoa_r+0x2e8>)
 8014c3a:	9300      	str	r3, [sp, #0]
 8014c3c:	3308      	adds	r3, #8
 8014c3e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014c40:	6013      	str	r3, [r2, #0]
 8014c42:	9800      	ldr	r0, [sp, #0]
 8014c44:	b015      	add	sp, #84	; 0x54
 8014c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c4a:	4b90      	ldr	r3, [pc, #576]	; (8014e8c <_dtoa_r+0x2e4>)
 8014c4c:	9300      	str	r3, [sp, #0]
 8014c4e:	3303      	adds	r3, #3
 8014c50:	e7f5      	b.n	8014c3e <_dtoa_r+0x96>
 8014c52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014c56:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c5e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8014c62:	d10b      	bne.n	8014c7c <_dtoa_r+0xd4>
 8014c64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8014c66:	2301      	movs	r3, #1
 8014c68:	6013      	str	r3, [r2, #0]
 8014c6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	f000 84ee 	beq.w	801564e <_dtoa_r+0xaa6>
 8014c72:	4888      	ldr	r0, [pc, #544]	; (8014e94 <_dtoa_r+0x2ec>)
 8014c74:	6018      	str	r0, [r3, #0]
 8014c76:	1e43      	subs	r3, r0, #1
 8014c78:	9300      	str	r3, [sp, #0]
 8014c7a:	e7e2      	b.n	8014c42 <_dtoa_r+0x9a>
 8014c7c:	a913      	add	r1, sp, #76	; 0x4c
 8014c7e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8014c82:	aa12      	add	r2, sp, #72	; 0x48
 8014c84:	4630      	mov	r0, r6
 8014c86:	f001 f83f 	bl	8015d08 <__d2b>
 8014c8a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8014c8e:	4605      	mov	r5, r0
 8014c90:	9812      	ldr	r0, [sp, #72]	; 0x48
 8014c92:	2900      	cmp	r1, #0
 8014c94:	d047      	beq.n	8014d26 <_dtoa_r+0x17e>
 8014c96:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8014c98:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014c9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014ca0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8014ca4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014ca8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8014cac:	2400      	movs	r4, #0
 8014cae:	ec43 2b16 	vmov	d6, r2, r3
 8014cb2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8014cb6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8014e68 <_dtoa_r+0x2c0>
 8014cba:	ee36 7b47 	vsub.f64	d7, d6, d7
 8014cbe:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8014e70 <_dtoa_r+0x2c8>
 8014cc2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014cc6:	eeb0 7b46 	vmov.f64	d7, d6
 8014cca:	ee06 1a90 	vmov	s13, r1
 8014cce:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8014cd2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8014e78 <_dtoa_r+0x2d0>
 8014cd6:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014cda:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8014cde:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ce6:	ee16 ba90 	vmov	fp, s13
 8014cea:	9411      	str	r4, [sp, #68]	; 0x44
 8014cec:	d508      	bpl.n	8014d00 <_dtoa_r+0x158>
 8014cee:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014cf2:	eeb4 6b47 	vcmp.f64	d6, d7
 8014cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cfa:	bf18      	it	ne
 8014cfc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8014d00:	f1bb 0f16 	cmp.w	fp, #22
 8014d04:	d832      	bhi.n	8014d6c <_dtoa_r+0x1c4>
 8014d06:	4b64      	ldr	r3, [pc, #400]	; (8014e98 <_dtoa_r+0x2f0>)
 8014d08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014d0c:	ed93 7b00 	vldr	d7, [r3]
 8014d10:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8014d14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d1c:	d501      	bpl.n	8014d22 <_dtoa_r+0x17a>
 8014d1e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014d22:	2300      	movs	r3, #0
 8014d24:	e023      	b.n	8014d6e <_dtoa_r+0x1c6>
 8014d26:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8014d28:	4401      	add	r1, r0
 8014d2a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8014d2e:	2b20      	cmp	r3, #32
 8014d30:	bfc3      	ittte	gt
 8014d32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014d36:	fa04 f303 	lslgt.w	r3, r4, r3
 8014d3a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8014d3e:	f1c3 0320 	rsble	r3, r3, #32
 8014d42:	bfc6      	itte	gt
 8014d44:	fa28 f804 	lsrgt.w	r8, r8, r4
 8014d48:	ea43 0308 	orrgt.w	r3, r3, r8
 8014d4c:	fa08 f303 	lslle.w	r3, r8, r3
 8014d50:	ee07 3a90 	vmov	s15, r3
 8014d54:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014d58:	3901      	subs	r1, #1
 8014d5a:	ed8d 7b00 	vstr	d7, [sp]
 8014d5e:	9c01      	ldr	r4, [sp, #4]
 8014d60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014d64:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8014d68:	2401      	movs	r4, #1
 8014d6a:	e7a0      	b.n	8014cae <_dtoa_r+0x106>
 8014d6c:	2301      	movs	r3, #1
 8014d6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014d70:	1a43      	subs	r3, r0, r1
 8014d72:	1e5a      	subs	r2, r3, #1
 8014d74:	bf45      	ittet	mi
 8014d76:	f1c3 0301 	rsbmi	r3, r3, #1
 8014d7a:	9305      	strmi	r3, [sp, #20]
 8014d7c:	2300      	movpl	r3, #0
 8014d7e:	2300      	movmi	r3, #0
 8014d80:	9206      	str	r2, [sp, #24]
 8014d82:	bf54      	ite	pl
 8014d84:	9305      	strpl	r3, [sp, #20]
 8014d86:	9306      	strmi	r3, [sp, #24]
 8014d88:	f1bb 0f00 	cmp.w	fp, #0
 8014d8c:	db18      	blt.n	8014dc0 <_dtoa_r+0x218>
 8014d8e:	9b06      	ldr	r3, [sp, #24]
 8014d90:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8014d94:	445b      	add	r3, fp
 8014d96:	9306      	str	r3, [sp, #24]
 8014d98:	2300      	movs	r3, #0
 8014d9a:	9a07      	ldr	r2, [sp, #28]
 8014d9c:	2a09      	cmp	r2, #9
 8014d9e:	d849      	bhi.n	8014e34 <_dtoa_r+0x28c>
 8014da0:	2a05      	cmp	r2, #5
 8014da2:	bfc4      	itt	gt
 8014da4:	3a04      	subgt	r2, #4
 8014da6:	9207      	strgt	r2, [sp, #28]
 8014da8:	9a07      	ldr	r2, [sp, #28]
 8014daa:	f1a2 0202 	sub.w	r2, r2, #2
 8014dae:	bfcc      	ite	gt
 8014db0:	2400      	movgt	r4, #0
 8014db2:	2401      	movle	r4, #1
 8014db4:	2a03      	cmp	r2, #3
 8014db6:	d848      	bhi.n	8014e4a <_dtoa_r+0x2a2>
 8014db8:	e8df f002 	tbb	[pc, r2]
 8014dbc:	3a2c2e0b 	.word	0x3a2c2e0b
 8014dc0:	9b05      	ldr	r3, [sp, #20]
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	eba3 030b 	sub.w	r3, r3, fp
 8014dc8:	9305      	str	r3, [sp, #20]
 8014dca:	920e      	str	r2, [sp, #56]	; 0x38
 8014dcc:	f1cb 0300 	rsb	r3, fp, #0
 8014dd0:	e7e3      	b.n	8014d9a <_dtoa_r+0x1f2>
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	9208      	str	r2, [sp, #32]
 8014dd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014dd8:	2a00      	cmp	r2, #0
 8014dda:	dc39      	bgt.n	8014e50 <_dtoa_r+0x2a8>
 8014ddc:	f04f 0a01 	mov.w	sl, #1
 8014de0:	46d1      	mov	r9, sl
 8014de2:	4652      	mov	r2, sl
 8014de4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8014de8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8014dea:	2100      	movs	r1, #0
 8014dec:	6079      	str	r1, [r7, #4]
 8014dee:	2004      	movs	r0, #4
 8014df0:	f100 0c14 	add.w	ip, r0, #20
 8014df4:	4594      	cmp	ip, r2
 8014df6:	6879      	ldr	r1, [r7, #4]
 8014df8:	d92f      	bls.n	8014e5a <_dtoa_r+0x2b2>
 8014dfa:	4630      	mov	r0, r6
 8014dfc:	930c      	str	r3, [sp, #48]	; 0x30
 8014dfe:	f000 fc61 	bl	80156c4 <_Balloc>
 8014e02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014e04:	9000      	str	r0, [sp, #0]
 8014e06:	4602      	mov	r2, r0
 8014e08:	2800      	cmp	r0, #0
 8014e0a:	d149      	bne.n	8014ea0 <_dtoa_r+0x2f8>
 8014e0c:	4b23      	ldr	r3, [pc, #140]	; (8014e9c <_dtoa_r+0x2f4>)
 8014e0e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014e12:	e6df      	b.n	8014bd4 <_dtoa_r+0x2c>
 8014e14:	2201      	movs	r2, #1
 8014e16:	e7dd      	b.n	8014dd4 <_dtoa_r+0x22c>
 8014e18:	2200      	movs	r2, #0
 8014e1a:	9208      	str	r2, [sp, #32]
 8014e1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e1e:	eb0b 0a02 	add.w	sl, fp, r2
 8014e22:	f10a 0901 	add.w	r9, sl, #1
 8014e26:	464a      	mov	r2, r9
 8014e28:	2a01      	cmp	r2, #1
 8014e2a:	bfb8      	it	lt
 8014e2c:	2201      	movlt	r2, #1
 8014e2e:	e7db      	b.n	8014de8 <_dtoa_r+0x240>
 8014e30:	2201      	movs	r2, #1
 8014e32:	e7f2      	b.n	8014e1a <_dtoa_r+0x272>
 8014e34:	2401      	movs	r4, #1
 8014e36:	2200      	movs	r2, #0
 8014e38:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8014e3c:	f04f 3aff 	mov.w	sl, #4294967295
 8014e40:	2100      	movs	r1, #0
 8014e42:	46d1      	mov	r9, sl
 8014e44:	2212      	movs	r2, #18
 8014e46:	9109      	str	r1, [sp, #36]	; 0x24
 8014e48:	e7ce      	b.n	8014de8 <_dtoa_r+0x240>
 8014e4a:	2201      	movs	r2, #1
 8014e4c:	9208      	str	r2, [sp, #32]
 8014e4e:	e7f5      	b.n	8014e3c <_dtoa_r+0x294>
 8014e50:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8014e54:	46d1      	mov	r9, sl
 8014e56:	4652      	mov	r2, sl
 8014e58:	e7c6      	b.n	8014de8 <_dtoa_r+0x240>
 8014e5a:	3101      	adds	r1, #1
 8014e5c:	6079      	str	r1, [r7, #4]
 8014e5e:	0040      	lsls	r0, r0, #1
 8014e60:	e7c6      	b.n	8014df0 <_dtoa_r+0x248>
 8014e62:	bf00      	nop
 8014e64:	f3af 8000 	nop.w
 8014e68:	636f4361 	.word	0x636f4361
 8014e6c:	3fd287a7 	.word	0x3fd287a7
 8014e70:	8b60c8b3 	.word	0x8b60c8b3
 8014e74:	3fc68a28 	.word	0x3fc68a28
 8014e78:	509f79fb 	.word	0x509f79fb
 8014e7c:	3fd34413 	.word	0x3fd34413
 8014e80:	0801813d 	.word	0x0801813d
 8014e84:	08018154 	.word	0x08018154
 8014e88:	7ff00000 	.word	0x7ff00000
 8014e8c:	08018139 	.word	0x08018139
 8014e90:	08018130 	.word	0x08018130
 8014e94:	0801810d 	.word	0x0801810d
 8014e98:	08018250 	.word	0x08018250
 8014e9c:	080181b3 	.word	0x080181b3
 8014ea0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8014ea2:	9900      	ldr	r1, [sp, #0]
 8014ea4:	6011      	str	r1, [r2, #0]
 8014ea6:	f1b9 0f0e 	cmp.w	r9, #14
 8014eaa:	d872      	bhi.n	8014f92 <_dtoa_r+0x3ea>
 8014eac:	2c00      	cmp	r4, #0
 8014eae:	d070      	beq.n	8014f92 <_dtoa_r+0x3ea>
 8014eb0:	f1bb 0f00 	cmp.w	fp, #0
 8014eb4:	f340 80a6 	ble.w	8015004 <_dtoa_r+0x45c>
 8014eb8:	49ca      	ldr	r1, [pc, #808]	; (80151e4 <_dtoa_r+0x63c>)
 8014eba:	f00b 020f 	and.w	r2, fp, #15
 8014ebe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8014ec2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8014ec6:	ed92 7b00 	vldr	d7, [r2]
 8014eca:	ea4f 112b 	mov.w	r1, fp, asr #4
 8014ece:	f000 808d 	beq.w	8014fec <_dtoa_r+0x444>
 8014ed2:	4ac5      	ldr	r2, [pc, #788]	; (80151e8 <_dtoa_r+0x640>)
 8014ed4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8014ed8:	ed92 6b08 	vldr	d6, [r2, #32]
 8014edc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8014ee0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8014ee4:	f001 010f 	and.w	r1, r1, #15
 8014ee8:	2203      	movs	r2, #3
 8014eea:	48bf      	ldr	r0, [pc, #764]	; (80151e8 <_dtoa_r+0x640>)
 8014eec:	2900      	cmp	r1, #0
 8014eee:	d17f      	bne.n	8014ff0 <_dtoa_r+0x448>
 8014ef0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014ef4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014ef8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014efc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014efe:	2900      	cmp	r1, #0
 8014f00:	f000 80b2 	beq.w	8015068 <_dtoa_r+0x4c0>
 8014f04:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8014f08:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014f0c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f14:	f140 80a8 	bpl.w	8015068 <_dtoa_r+0x4c0>
 8014f18:	f1b9 0f00 	cmp.w	r9, #0
 8014f1c:	f000 80a4 	beq.w	8015068 <_dtoa_r+0x4c0>
 8014f20:	f1ba 0f00 	cmp.w	sl, #0
 8014f24:	dd31      	ble.n	8014f8a <_dtoa_r+0x3e2>
 8014f26:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8014f2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014f2e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014f32:	f10b 37ff 	add.w	r7, fp, #4294967295
 8014f36:	3201      	adds	r2, #1
 8014f38:	4650      	mov	r0, sl
 8014f3a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014f3e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8014f42:	ee07 2a90 	vmov	s15, r2
 8014f46:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014f4a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8014f4e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8014f52:	9c03      	ldr	r4, [sp, #12]
 8014f54:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8014f58:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8014f5c:	2800      	cmp	r0, #0
 8014f5e:	f040 8086 	bne.w	801506e <_dtoa_r+0x4c6>
 8014f62:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8014f66:	ee36 6b47 	vsub.f64	d6, d6, d7
 8014f6a:	ec42 1b17 	vmov	d7, r1, r2
 8014f6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f76:	f300 8272 	bgt.w	801545e <_dtoa_r+0x8b6>
 8014f7a:	eeb1 7b47 	vneg.f64	d7, d7
 8014f7e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f86:	f100 8267 	bmi.w	8015458 <_dtoa_r+0x8b0>
 8014f8a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8014f8e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8014f92:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014f94:	2a00      	cmp	r2, #0
 8014f96:	f2c0 8129 	blt.w	80151ec <_dtoa_r+0x644>
 8014f9a:	f1bb 0f0e 	cmp.w	fp, #14
 8014f9e:	f300 8125 	bgt.w	80151ec <_dtoa_r+0x644>
 8014fa2:	4b90      	ldr	r3, [pc, #576]	; (80151e4 <_dtoa_r+0x63c>)
 8014fa4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014fa8:	ed93 6b00 	vldr	d6, [r3]
 8014fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	f280 80c3 	bge.w	801513a <_dtoa_r+0x592>
 8014fb4:	f1b9 0f00 	cmp.w	r9, #0
 8014fb8:	f300 80bf 	bgt.w	801513a <_dtoa_r+0x592>
 8014fbc:	f040 824c 	bne.w	8015458 <_dtoa_r+0x8b0>
 8014fc0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8014fc4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8014fc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014fcc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fd4:	464c      	mov	r4, r9
 8014fd6:	464f      	mov	r7, r9
 8014fd8:	f280 8222 	bge.w	8015420 <_dtoa_r+0x878>
 8014fdc:	f8dd 8000 	ldr.w	r8, [sp]
 8014fe0:	2331      	movs	r3, #49	; 0x31
 8014fe2:	f808 3b01 	strb.w	r3, [r8], #1
 8014fe6:	f10b 0b01 	add.w	fp, fp, #1
 8014fea:	e21e      	b.n	801542a <_dtoa_r+0x882>
 8014fec:	2202      	movs	r2, #2
 8014fee:	e77c      	b.n	8014eea <_dtoa_r+0x342>
 8014ff0:	07cc      	lsls	r4, r1, #31
 8014ff2:	d504      	bpl.n	8014ffe <_dtoa_r+0x456>
 8014ff4:	ed90 6b00 	vldr	d6, [r0]
 8014ff8:	3201      	adds	r2, #1
 8014ffa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014ffe:	1049      	asrs	r1, r1, #1
 8015000:	3008      	adds	r0, #8
 8015002:	e773      	b.n	8014eec <_dtoa_r+0x344>
 8015004:	d02e      	beq.n	8015064 <_dtoa_r+0x4bc>
 8015006:	f1cb 0100 	rsb	r1, fp, #0
 801500a:	4a76      	ldr	r2, [pc, #472]	; (80151e4 <_dtoa_r+0x63c>)
 801500c:	f001 000f 	and.w	r0, r1, #15
 8015010:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015014:	ed92 7b00 	vldr	d7, [r2]
 8015018:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801501c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015020:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8015024:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8015028:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801502c:	486e      	ldr	r0, [pc, #440]	; (80151e8 <_dtoa_r+0x640>)
 801502e:	1109      	asrs	r1, r1, #4
 8015030:	2400      	movs	r4, #0
 8015032:	2202      	movs	r2, #2
 8015034:	b939      	cbnz	r1, 8015046 <_dtoa_r+0x49e>
 8015036:	2c00      	cmp	r4, #0
 8015038:	f43f af60 	beq.w	8014efc <_dtoa_r+0x354>
 801503c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015040:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015044:	e75a      	b.n	8014efc <_dtoa_r+0x354>
 8015046:	07cf      	lsls	r7, r1, #31
 8015048:	d509      	bpl.n	801505e <_dtoa_r+0x4b6>
 801504a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801504e:	ed90 7b00 	vldr	d7, [r0]
 8015052:	ee26 7b07 	vmul.f64	d7, d6, d7
 8015056:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801505a:	3201      	adds	r2, #1
 801505c:	2401      	movs	r4, #1
 801505e:	1049      	asrs	r1, r1, #1
 8015060:	3008      	adds	r0, #8
 8015062:	e7e7      	b.n	8015034 <_dtoa_r+0x48c>
 8015064:	2202      	movs	r2, #2
 8015066:	e749      	b.n	8014efc <_dtoa_r+0x354>
 8015068:	465f      	mov	r7, fp
 801506a:	4648      	mov	r0, r9
 801506c:	e765      	b.n	8014f3a <_dtoa_r+0x392>
 801506e:	ec42 1b17 	vmov	d7, r1, r2
 8015072:	4a5c      	ldr	r2, [pc, #368]	; (80151e4 <_dtoa_r+0x63c>)
 8015074:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8015078:	ed12 4b02 	vldr	d4, [r2, #-8]
 801507c:	9a00      	ldr	r2, [sp, #0]
 801507e:	1814      	adds	r4, r2, r0
 8015080:	9a08      	ldr	r2, [sp, #32]
 8015082:	b352      	cbz	r2, 80150da <_dtoa_r+0x532>
 8015084:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8015088:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801508c:	f8dd 8000 	ldr.w	r8, [sp]
 8015090:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8015094:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8015098:	ee35 7b47 	vsub.f64	d7, d5, d7
 801509c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80150a0:	ee14 2a90 	vmov	r2, s9
 80150a4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80150a8:	3230      	adds	r2, #48	; 0x30
 80150aa:	ee36 6b45 	vsub.f64	d6, d6, d5
 80150ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80150b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150b6:	f808 2b01 	strb.w	r2, [r8], #1
 80150ba:	d439      	bmi.n	8015130 <_dtoa_r+0x588>
 80150bc:	ee32 5b46 	vsub.f64	d5, d2, d6
 80150c0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80150c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150c8:	d472      	bmi.n	80151b0 <_dtoa_r+0x608>
 80150ca:	45a0      	cmp	r8, r4
 80150cc:	f43f af5d 	beq.w	8014f8a <_dtoa_r+0x3e2>
 80150d0:	ee27 7b03 	vmul.f64	d7, d7, d3
 80150d4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80150d8:	e7e0      	b.n	801509c <_dtoa_r+0x4f4>
 80150da:	f8dd 8000 	ldr.w	r8, [sp]
 80150de:	ee27 7b04 	vmul.f64	d7, d7, d4
 80150e2:	4621      	mov	r1, r4
 80150e4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80150e8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80150ec:	ee14 2a90 	vmov	r2, s9
 80150f0:	3230      	adds	r2, #48	; 0x30
 80150f2:	f808 2b01 	strb.w	r2, [r8], #1
 80150f6:	45a0      	cmp	r8, r4
 80150f8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80150fc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015100:	d118      	bne.n	8015134 <_dtoa_r+0x58c>
 8015102:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8015106:	ee37 4b05 	vadd.f64	d4, d7, d5
 801510a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801510e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015112:	dc4d      	bgt.n	80151b0 <_dtoa_r+0x608>
 8015114:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015118:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801511c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015120:	f57f af33 	bpl.w	8014f8a <_dtoa_r+0x3e2>
 8015124:	4688      	mov	r8, r1
 8015126:	3901      	subs	r1, #1
 8015128:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801512c:	2b30      	cmp	r3, #48	; 0x30
 801512e:	d0f9      	beq.n	8015124 <_dtoa_r+0x57c>
 8015130:	46bb      	mov	fp, r7
 8015132:	e02a      	b.n	801518a <_dtoa_r+0x5e2>
 8015134:	ee26 6b03 	vmul.f64	d6, d6, d3
 8015138:	e7d6      	b.n	80150e8 <_dtoa_r+0x540>
 801513a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801513e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8015142:	f8dd 8000 	ldr.w	r8, [sp]
 8015146:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801514a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801514e:	ee15 3a10 	vmov	r3, s10
 8015152:	3330      	adds	r3, #48	; 0x30
 8015154:	f808 3b01 	strb.w	r3, [r8], #1
 8015158:	9b00      	ldr	r3, [sp, #0]
 801515a:	eba8 0303 	sub.w	r3, r8, r3
 801515e:	4599      	cmp	r9, r3
 8015160:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8015164:	eea3 7b46 	vfms.f64	d7, d3, d6
 8015168:	d133      	bne.n	80151d2 <_dtoa_r+0x62a>
 801516a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801516e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015176:	dc1a      	bgt.n	80151ae <_dtoa_r+0x606>
 8015178:	eeb4 7b46 	vcmp.f64	d7, d6
 801517c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015180:	d103      	bne.n	801518a <_dtoa_r+0x5e2>
 8015182:	ee15 3a10 	vmov	r3, s10
 8015186:	07d9      	lsls	r1, r3, #31
 8015188:	d411      	bmi.n	80151ae <_dtoa_r+0x606>
 801518a:	4629      	mov	r1, r5
 801518c:	4630      	mov	r0, r6
 801518e:	f000 fad9 	bl	8015744 <_Bfree>
 8015192:	2300      	movs	r3, #0
 8015194:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8015196:	f888 3000 	strb.w	r3, [r8]
 801519a:	f10b 0301 	add.w	r3, fp, #1
 801519e:	6013      	str	r3, [r2, #0]
 80151a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	f43f ad4d 	beq.w	8014c42 <_dtoa_r+0x9a>
 80151a8:	f8c3 8000 	str.w	r8, [r3]
 80151ac:	e549      	b.n	8014c42 <_dtoa_r+0x9a>
 80151ae:	465f      	mov	r7, fp
 80151b0:	4643      	mov	r3, r8
 80151b2:	4698      	mov	r8, r3
 80151b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80151b8:	2a39      	cmp	r2, #57	; 0x39
 80151ba:	d106      	bne.n	80151ca <_dtoa_r+0x622>
 80151bc:	9a00      	ldr	r2, [sp, #0]
 80151be:	429a      	cmp	r2, r3
 80151c0:	d1f7      	bne.n	80151b2 <_dtoa_r+0x60a>
 80151c2:	9900      	ldr	r1, [sp, #0]
 80151c4:	2230      	movs	r2, #48	; 0x30
 80151c6:	3701      	adds	r7, #1
 80151c8:	700a      	strb	r2, [r1, #0]
 80151ca:	781a      	ldrb	r2, [r3, #0]
 80151cc:	3201      	adds	r2, #1
 80151ce:	701a      	strb	r2, [r3, #0]
 80151d0:	e7ae      	b.n	8015130 <_dtoa_r+0x588>
 80151d2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80151d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80151da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151de:	d1b2      	bne.n	8015146 <_dtoa_r+0x59e>
 80151e0:	e7d3      	b.n	801518a <_dtoa_r+0x5e2>
 80151e2:	bf00      	nop
 80151e4:	08018250 	.word	0x08018250
 80151e8:	08018228 	.word	0x08018228
 80151ec:	9908      	ldr	r1, [sp, #32]
 80151ee:	2900      	cmp	r1, #0
 80151f0:	f000 80d1 	beq.w	8015396 <_dtoa_r+0x7ee>
 80151f4:	9907      	ldr	r1, [sp, #28]
 80151f6:	2901      	cmp	r1, #1
 80151f8:	f300 80b4 	bgt.w	8015364 <_dtoa_r+0x7bc>
 80151fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80151fe:	2900      	cmp	r1, #0
 8015200:	f000 80ac 	beq.w	801535c <_dtoa_r+0x7b4>
 8015204:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015208:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801520c:	461c      	mov	r4, r3
 801520e:	930a      	str	r3, [sp, #40]	; 0x28
 8015210:	9b05      	ldr	r3, [sp, #20]
 8015212:	4413      	add	r3, r2
 8015214:	9305      	str	r3, [sp, #20]
 8015216:	9b06      	ldr	r3, [sp, #24]
 8015218:	2101      	movs	r1, #1
 801521a:	4413      	add	r3, r2
 801521c:	4630      	mov	r0, r6
 801521e:	9306      	str	r3, [sp, #24]
 8015220:	f000 fb4c 	bl	80158bc <__i2b>
 8015224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015226:	4607      	mov	r7, r0
 8015228:	f1b8 0f00 	cmp.w	r8, #0
 801522c:	dd0d      	ble.n	801524a <_dtoa_r+0x6a2>
 801522e:	9a06      	ldr	r2, [sp, #24]
 8015230:	2a00      	cmp	r2, #0
 8015232:	dd0a      	ble.n	801524a <_dtoa_r+0x6a2>
 8015234:	4542      	cmp	r2, r8
 8015236:	9905      	ldr	r1, [sp, #20]
 8015238:	bfa8      	it	ge
 801523a:	4642      	movge	r2, r8
 801523c:	1a89      	subs	r1, r1, r2
 801523e:	9105      	str	r1, [sp, #20]
 8015240:	9906      	ldr	r1, [sp, #24]
 8015242:	eba8 0802 	sub.w	r8, r8, r2
 8015246:	1a8a      	subs	r2, r1, r2
 8015248:	9206      	str	r2, [sp, #24]
 801524a:	b303      	cbz	r3, 801528e <_dtoa_r+0x6e6>
 801524c:	9a08      	ldr	r2, [sp, #32]
 801524e:	2a00      	cmp	r2, #0
 8015250:	f000 80a6 	beq.w	80153a0 <_dtoa_r+0x7f8>
 8015254:	2c00      	cmp	r4, #0
 8015256:	dd13      	ble.n	8015280 <_dtoa_r+0x6d8>
 8015258:	4639      	mov	r1, r7
 801525a:	4622      	mov	r2, r4
 801525c:	4630      	mov	r0, r6
 801525e:	930c      	str	r3, [sp, #48]	; 0x30
 8015260:	f000 fbe8 	bl	8015a34 <__pow5mult>
 8015264:	462a      	mov	r2, r5
 8015266:	4601      	mov	r1, r0
 8015268:	4607      	mov	r7, r0
 801526a:	4630      	mov	r0, r6
 801526c:	f000 fb3c 	bl	80158e8 <__multiply>
 8015270:	4629      	mov	r1, r5
 8015272:	900a      	str	r0, [sp, #40]	; 0x28
 8015274:	4630      	mov	r0, r6
 8015276:	f000 fa65 	bl	8015744 <_Bfree>
 801527a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801527c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801527e:	4615      	mov	r5, r2
 8015280:	1b1a      	subs	r2, r3, r4
 8015282:	d004      	beq.n	801528e <_dtoa_r+0x6e6>
 8015284:	4629      	mov	r1, r5
 8015286:	4630      	mov	r0, r6
 8015288:	f000 fbd4 	bl	8015a34 <__pow5mult>
 801528c:	4605      	mov	r5, r0
 801528e:	2101      	movs	r1, #1
 8015290:	4630      	mov	r0, r6
 8015292:	f000 fb13 	bl	80158bc <__i2b>
 8015296:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015298:	2b00      	cmp	r3, #0
 801529a:	4604      	mov	r4, r0
 801529c:	f340 8082 	ble.w	80153a4 <_dtoa_r+0x7fc>
 80152a0:	461a      	mov	r2, r3
 80152a2:	4601      	mov	r1, r0
 80152a4:	4630      	mov	r0, r6
 80152a6:	f000 fbc5 	bl	8015a34 <__pow5mult>
 80152aa:	9b07      	ldr	r3, [sp, #28]
 80152ac:	2b01      	cmp	r3, #1
 80152ae:	4604      	mov	r4, r0
 80152b0:	dd7b      	ble.n	80153aa <_dtoa_r+0x802>
 80152b2:	2300      	movs	r3, #0
 80152b4:	930a      	str	r3, [sp, #40]	; 0x28
 80152b6:	6922      	ldr	r2, [r4, #16]
 80152b8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80152bc:	6910      	ldr	r0, [r2, #16]
 80152be:	f000 faad 	bl	801581c <__hi0bits>
 80152c2:	f1c0 0020 	rsb	r0, r0, #32
 80152c6:	9b06      	ldr	r3, [sp, #24]
 80152c8:	4418      	add	r0, r3
 80152ca:	f010 001f 	ands.w	r0, r0, #31
 80152ce:	f000 808d 	beq.w	80153ec <_dtoa_r+0x844>
 80152d2:	f1c0 0220 	rsb	r2, r0, #32
 80152d6:	2a04      	cmp	r2, #4
 80152d8:	f340 8086 	ble.w	80153e8 <_dtoa_r+0x840>
 80152dc:	f1c0 001c 	rsb	r0, r0, #28
 80152e0:	9b05      	ldr	r3, [sp, #20]
 80152e2:	4403      	add	r3, r0
 80152e4:	9305      	str	r3, [sp, #20]
 80152e6:	9b06      	ldr	r3, [sp, #24]
 80152e8:	4403      	add	r3, r0
 80152ea:	4480      	add	r8, r0
 80152ec:	9306      	str	r3, [sp, #24]
 80152ee:	9b05      	ldr	r3, [sp, #20]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	dd05      	ble.n	8015300 <_dtoa_r+0x758>
 80152f4:	4629      	mov	r1, r5
 80152f6:	461a      	mov	r2, r3
 80152f8:	4630      	mov	r0, r6
 80152fa:	f000 fbf5 	bl	8015ae8 <__lshift>
 80152fe:	4605      	mov	r5, r0
 8015300:	9b06      	ldr	r3, [sp, #24]
 8015302:	2b00      	cmp	r3, #0
 8015304:	dd05      	ble.n	8015312 <_dtoa_r+0x76a>
 8015306:	4621      	mov	r1, r4
 8015308:	461a      	mov	r2, r3
 801530a:	4630      	mov	r0, r6
 801530c:	f000 fbec 	bl	8015ae8 <__lshift>
 8015310:	4604      	mov	r4, r0
 8015312:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015314:	2b00      	cmp	r3, #0
 8015316:	d06b      	beq.n	80153f0 <_dtoa_r+0x848>
 8015318:	4621      	mov	r1, r4
 801531a:	4628      	mov	r0, r5
 801531c:	f000 fc50 	bl	8015bc0 <__mcmp>
 8015320:	2800      	cmp	r0, #0
 8015322:	da65      	bge.n	80153f0 <_dtoa_r+0x848>
 8015324:	2300      	movs	r3, #0
 8015326:	4629      	mov	r1, r5
 8015328:	220a      	movs	r2, #10
 801532a:	4630      	mov	r0, r6
 801532c:	f000 fa2c 	bl	8015788 <__multadd>
 8015330:	9b08      	ldr	r3, [sp, #32]
 8015332:	f10b 3bff 	add.w	fp, fp, #4294967295
 8015336:	4605      	mov	r5, r0
 8015338:	2b00      	cmp	r3, #0
 801533a:	f000 8192 	beq.w	8015662 <_dtoa_r+0xaba>
 801533e:	4639      	mov	r1, r7
 8015340:	2300      	movs	r3, #0
 8015342:	220a      	movs	r2, #10
 8015344:	4630      	mov	r0, r6
 8015346:	f000 fa1f 	bl	8015788 <__multadd>
 801534a:	f1ba 0f00 	cmp.w	sl, #0
 801534e:	4607      	mov	r7, r0
 8015350:	f300 808e 	bgt.w	8015470 <_dtoa_r+0x8c8>
 8015354:	9b07      	ldr	r3, [sp, #28]
 8015356:	2b02      	cmp	r3, #2
 8015358:	dc51      	bgt.n	80153fe <_dtoa_r+0x856>
 801535a:	e089      	b.n	8015470 <_dtoa_r+0x8c8>
 801535c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801535e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015362:	e751      	b.n	8015208 <_dtoa_r+0x660>
 8015364:	f109 34ff 	add.w	r4, r9, #4294967295
 8015368:	42a3      	cmp	r3, r4
 801536a:	bfbf      	itttt	lt
 801536c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801536e:	1ae3      	sublt	r3, r4, r3
 8015370:	18d2      	addlt	r2, r2, r3
 8015372:	4613      	movlt	r3, r2
 8015374:	bfb7      	itett	lt
 8015376:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015378:	1b1c      	subge	r4, r3, r4
 801537a:	4623      	movlt	r3, r4
 801537c:	2400      	movlt	r4, #0
 801537e:	f1b9 0f00 	cmp.w	r9, #0
 8015382:	bfb5      	itete	lt
 8015384:	9a05      	ldrlt	r2, [sp, #20]
 8015386:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801538a:	eba2 0809 	sublt.w	r8, r2, r9
 801538e:	464a      	movge	r2, r9
 8015390:	bfb8      	it	lt
 8015392:	2200      	movlt	r2, #0
 8015394:	e73b      	b.n	801520e <_dtoa_r+0x666>
 8015396:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801539a:	9f08      	ldr	r7, [sp, #32]
 801539c:	461c      	mov	r4, r3
 801539e:	e743      	b.n	8015228 <_dtoa_r+0x680>
 80153a0:	461a      	mov	r2, r3
 80153a2:	e76f      	b.n	8015284 <_dtoa_r+0x6dc>
 80153a4:	9b07      	ldr	r3, [sp, #28]
 80153a6:	2b01      	cmp	r3, #1
 80153a8:	dc18      	bgt.n	80153dc <_dtoa_r+0x834>
 80153aa:	9b02      	ldr	r3, [sp, #8]
 80153ac:	b9b3      	cbnz	r3, 80153dc <_dtoa_r+0x834>
 80153ae:	9b03      	ldr	r3, [sp, #12]
 80153b0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80153b4:	b9a2      	cbnz	r2, 80153e0 <_dtoa_r+0x838>
 80153b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80153ba:	0d12      	lsrs	r2, r2, #20
 80153bc:	0512      	lsls	r2, r2, #20
 80153be:	b18a      	cbz	r2, 80153e4 <_dtoa_r+0x83c>
 80153c0:	9b05      	ldr	r3, [sp, #20]
 80153c2:	3301      	adds	r3, #1
 80153c4:	9305      	str	r3, [sp, #20]
 80153c6:	9b06      	ldr	r3, [sp, #24]
 80153c8:	3301      	adds	r3, #1
 80153ca:	9306      	str	r3, [sp, #24]
 80153cc:	2301      	movs	r3, #1
 80153ce:	930a      	str	r3, [sp, #40]	; 0x28
 80153d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	f47f af6f 	bne.w	80152b6 <_dtoa_r+0x70e>
 80153d8:	2001      	movs	r0, #1
 80153da:	e774      	b.n	80152c6 <_dtoa_r+0x71e>
 80153dc:	2300      	movs	r3, #0
 80153de:	e7f6      	b.n	80153ce <_dtoa_r+0x826>
 80153e0:	9b02      	ldr	r3, [sp, #8]
 80153e2:	e7f4      	b.n	80153ce <_dtoa_r+0x826>
 80153e4:	920a      	str	r2, [sp, #40]	; 0x28
 80153e6:	e7f3      	b.n	80153d0 <_dtoa_r+0x828>
 80153e8:	d081      	beq.n	80152ee <_dtoa_r+0x746>
 80153ea:	4610      	mov	r0, r2
 80153ec:	301c      	adds	r0, #28
 80153ee:	e777      	b.n	80152e0 <_dtoa_r+0x738>
 80153f0:	f1b9 0f00 	cmp.w	r9, #0
 80153f4:	dc37      	bgt.n	8015466 <_dtoa_r+0x8be>
 80153f6:	9b07      	ldr	r3, [sp, #28]
 80153f8:	2b02      	cmp	r3, #2
 80153fa:	dd34      	ble.n	8015466 <_dtoa_r+0x8be>
 80153fc:	46ca      	mov	sl, r9
 80153fe:	f1ba 0f00 	cmp.w	sl, #0
 8015402:	d10d      	bne.n	8015420 <_dtoa_r+0x878>
 8015404:	4621      	mov	r1, r4
 8015406:	4653      	mov	r3, sl
 8015408:	2205      	movs	r2, #5
 801540a:	4630      	mov	r0, r6
 801540c:	f000 f9bc 	bl	8015788 <__multadd>
 8015410:	4601      	mov	r1, r0
 8015412:	4604      	mov	r4, r0
 8015414:	4628      	mov	r0, r5
 8015416:	f000 fbd3 	bl	8015bc0 <__mcmp>
 801541a:	2800      	cmp	r0, #0
 801541c:	f73f adde 	bgt.w	8014fdc <_dtoa_r+0x434>
 8015420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015422:	f8dd 8000 	ldr.w	r8, [sp]
 8015426:	ea6f 0b03 	mvn.w	fp, r3
 801542a:	f04f 0900 	mov.w	r9, #0
 801542e:	4621      	mov	r1, r4
 8015430:	4630      	mov	r0, r6
 8015432:	f000 f987 	bl	8015744 <_Bfree>
 8015436:	2f00      	cmp	r7, #0
 8015438:	f43f aea7 	beq.w	801518a <_dtoa_r+0x5e2>
 801543c:	f1b9 0f00 	cmp.w	r9, #0
 8015440:	d005      	beq.n	801544e <_dtoa_r+0x8a6>
 8015442:	45b9      	cmp	r9, r7
 8015444:	d003      	beq.n	801544e <_dtoa_r+0x8a6>
 8015446:	4649      	mov	r1, r9
 8015448:	4630      	mov	r0, r6
 801544a:	f000 f97b 	bl	8015744 <_Bfree>
 801544e:	4639      	mov	r1, r7
 8015450:	4630      	mov	r0, r6
 8015452:	f000 f977 	bl	8015744 <_Bfree>
 8015456:	e698      	b.n	801518a <_dtoa_r+0x5e2>
 8015458:	2400      	movs	r4, #0
 801545a:	4627      	mov	r7, r4
 801545c:	e7e0      	b.n	8015420 <_dtoa_r+0x878>
 801545e:	46bb      	mov	fp, r7
 8015460:	4604      	mov	r4, r0
 8015462:	4607      	mov	r7, r0
 8015464:	e5ba      	b.n	8014fdc <_dtoa_r+0x434>
 8015466:	9b08      	ldr	r3, [sp, #32]
 8015468:	46ca      	mov	sl, r9
 801546a:	2b00      	cmp	r3, #0
 801546c:	f000 8100 	beq.w	8015670 <_dtoa_r+0xac8>
 8015470:	f1b8 0f00 	cmp.w	r8, #0
 8015474:	dd05      	ble.n	8015482 <_dtoa_r+0x8da>
 8015476:	4639      	mov	r1, r7
 8015478:	4642      	mov	r2, r8
 801547a:	4630      	mov	r0, r6
 801547c:	f000 fb34 	bl	8015ae8 <__lshift>
 8015480:	4607      	mov	r7, r0
 8015482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015484:	2b00      	cmp	r3, #0
 8015486:	d05d      	beq.n	8015544 <_dtoa_r+0x99c>
 8015488:	6879      	ldr	r1, [r7, #4]
 801548a:	4630      	mov	r0, r6
 801548c:	f000 f91a 	bl	80156c4 <_Balloc>
 8015490:	4680      	mov	r8, r0
 8015492:	b928      	cbnz	r0, 80154a0 <_dtoa_r+0x8f8>
 8015494:	4b82      	ldr	r3, [pc, #520]	; (80156a0 <_dtoa_r+0xaf8>)
 8015496:	4602      	mov	r2, r0
 8015498:	f240 21ea 	movw	r1, #746	; 0x2ea
 801549c:	f7ff bb9a 	b.w	8014bd4 <_dtoa_r+0x2c>
 80154a0:	693a      	ldr	r2, [r7, #16]
 80154a2:	3202      	adds	r2, #2
 80154a4:	0092      	lsls	r2, r2, #2
 80154a6:	f107 010c 	add.w	r1, r7, #12
 80154aa:	300c      	adds	r0, #12
 80154ac:	f7fe fe94 	bl	80141d8 <memcpy>
 80154b0:	2201      	movs	r2, #1
 80154b2:	4641      	mov	r1, r8
 80154b4:	4630      	mov	r0, r6
 80154b6:	f000 fb17 	bl	8015ae8 <__lshift>
 80154ba:	9b00      	ldr	r3, [sp, #0]
 80154bc:	3301      	adds	r3, #1
 80154be:	9305      	str	r3, [sp, #20]
 80154c0:	9b00      	ldr	r3, [sp, #0]
 80154c2:	4453      	add	r3, sl
 80154c4:	9309      	str	r3, [sp, #36]	; 0x24
 80154c6:	9b02      	ldr	r3, [sp, #8]
 80154c8:	f003 0301 	and.w	r3, r3, #1
 80154cc:	46b9      	mov	r9, r7
 80154ce:	9308      	str	r3, [sp, #32]
 80154d0:	4607      	mov	r7, r0
 80154d2:	9b05      	ldr	r3, [sp, #20]
 80154d4:	4621      	mov	r1, r4
 80154d6:	3b01      	subs	r3, #1
 80154d8:	4628      	mov	r0, r5
 80154da:	9302      	str	r3, [sp, #8]
 80154dc:	f7ff fad6 	bl	8014a8c <quorem>
 80154e0:	4603      	mov	r3, r0
 80154e2:	3330      	adds	r3, #48	; 0x30
 80154e4:	9006      	str	r0, [sp, #24]
 80154e6:	4649      	mov	r1, r9
 80154e8:	4628      	mov	r0, r5
 80154ea:	930a      	str	r3, [sp, #40]	; 0x28
 80154ec:	f000 fb68 	bl	8015bc0 <__mcmp>
 80154f0:	463a      	mov	r2, r7
 80154f2:	4682      	mov	sl, r0
 80154f4:	4621      	mov	r1, r4
 80154f6:	4630      	mov	r0, r6
 80154f8:	f000 fb7e 	bl	8015bf8 <__mdiff>
 80154fc:	68c2      	ldr	r2, [r0, #12]
 80154fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015500:	4680      	mov	r8, r0
 8015502:	bb0a      	cbnz	r2, 8015548 <_dtoa_r+0x9a0>
 8015504:	4601      	mov	r1, r0
 8015506:	4628      	mov	r0, r5
 8015508:	f000 fb5a 	bl	8015bc0 <__mcmp>
 801550c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801550e:	4602      	mov	r2, r0
 8015510:	4641      	mov	r1, r8
 8015512:	4630      	mov	r0, r6
 8015514:	920e      	str	r2, [sp, #56]	; 0x38
 8015516:	930a      	str	r3, [sp, #40]	; 0x28
 8015518:	f000 f914 	bl	8015744 <_Bfree>
 801551c:	9b07      	ldr	r3, [sp, #28]
 801551e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015520:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8015524:	ea43 0102 	orr.w	r1, r3, r2
 8015528:	9b08      	ldr	r3, [sp, #32]
 801552a:	430b      	orrs	r3, r1
 801552c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801552e:	d10d      	bne.n	801554c <_dtoa_r+0x9a4>
 8015530:	2b39      	cmp	r3, #57	; 0x39
 8015532:	d029      	beq.n	8015588 <_dtoa_r+0x9e0>
 8015534:	f1ba 0f00 	cmp.w	sl, #0
 8015538:	dd01      	ble.n	801553e <_dtoa_r+0x996>
 801553a:	9b06      	ldr	r3, [sp, #24]
 801553c:	3331      	adds	r3, #49	; 0x31
 801553e:	9a02      	ldr	r2, [sp, #8]
 8015540:	7013      	strb	r3, [r2, #0]
 8015542:	e774      	b.n	801542e <_dtoa_r+0x886>
 8015544:	4638      	mov	r0, r7
 8015546:	e7b8      	b.n	80154ba <_dtoa_r+0x912>
 8015548:	2201      	movs	r2, #1
 801554a:	e7e1      	b.n	8015510 <_dtoa_r+0x968>
 801554c:	f1ba 0f00 	cmp.w	sl, #0
 8015550:	db06      	blt.n	8015560 <_dtoa_r+0x9b8>
 8015552:	9907      	ldr	r1, [sp, #28]
 8015554:	ea41 0a0a 	orr.w	sl, r1, sl
 8015558:	9908      	ldr	r1, [sp, #32]
 801555a:	ea5a 0101 	orrs.w	r1, sl, r1
 801555e:	d120      	bne.n	80155a2 <_dtoa_r+0x9fa>
 8015560:	2a00      	cmp	r2, #0
 8015562:	ddec      	ble.n	801553e <_dtoa_r+0x996>
 8015564:	4629      	mov	r1, r5
 8015566:	2201      	movs	r2, #1
 8015568:	4630      	mov	r0, r6
 801556a:	9305      	str	r3, [sp, #20]
 801556c:	f000 fabc 	bl	8015ae8 <__lshift>
 8015570:	4621      	mov	r1, r4
 8015572:	4605      	mov	r5, r0
 8015574:	f000 fb24 	bl	8015bc0 <__mcmp>
 8015578:	2800      	cmp	r0, #0
 801557a:	9b05      	ldr	r3, [sp, #20]
 801557c:	dc02      	bgt.n	8015584 <_dtoa_r+0x9dc>
 801557e:	d1de      	bne.n	801553e <_dtoa_r+0x996>
 8015580:	07da      	lsls	r2, r3, #31
 8015582:	d5dc      	bpl.n	801553e <_dtoa_r+0x996>
 8015584:	2b39      	cmp	r3, #57	; 0x39
 8015586:	d1d8      	bne.n	801553a <_dtoa_r+0x992>
 8015588:	9a02      	ldr	r2, [sp, #8]
 801558a:	2339      	movs	r3, #57	; 0x39
 801558c:	7013      	strb	r3, [r2, #0]
 801558e:	4643      	mov	r3, r8
 8015590:	4698      	mov	r8, r3
 8015592:	3b01      	subs	r3, #1
 8015594:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8015598:	2a39      	cmp	r2, #57	; 0x39
 801559a:	d051      	beq.n	8015640 <_dtoa_r+0xa98>
 801559c:	3201      	adds	r2, #1
 801559e:	701a      	strb	r2, [r3, #0]
 80155a0:	e745      	b.n	801542e <_dtoa_r+0x886>
 80155a2:	2a00      	cmp	r2, #0
 80155a4:	dd03      	ble.n	80155ae <_dtoa_r+0xa06>
 80155a6:	2b39      	cmp	r3, #57	; 0x39
 80155a8:	d0ee      	beq.n	8015588 <_dtoa_r+0x9e0>
 80155aa:	3301      	adds	r3, #1
 80155ac:	e7c7      	b.n	801553e <_dtoa_r+0x996>
 80155ae:	9a05      	ldr	r2, [sp, #20]
 80155b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80155b2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80155b6:	428a      	cmp	r2, r1
 80155b8:	d02b      	beq.n	8015612 <_dtoa_r+0xa6a>
 80155ba:	4629      	mov	r1, r5
 80155bc:	2300      	movs	r3, #0
 80155be:	220a      	movs	r2, #10
 80155c0:	4630      	mov	r0, r6
 80155c2:	f000 f8e1 	bl	8015788 <__multadd>
 80155c6:	45b9      	cmp	r9, r7
 80155c8:	4605      	mov	r5, r0
 80155ca:	f04f 0300 	mov.w	r3, #0
 80155ce:	f04f 020a 	mov.w	r2, #10
 80155d2:	4649      	mov	r1, r9
 80155d4:	4630      	mov	r0, r6
 80155d6:	d107      	bne.n	80155e8 <_dtoa_r+0xa40>
 80155d8:	f000 f8d6 	bl	8015788 <__multadd>
 80155dc:	4681      	mov	r9, r0
 80155de:	4607      	mov	r7, r0
 80155e0:	9b05      	ldr	r3, [sp, #20]
 80155e2:	3301      	adds	r3, #1
 80155e4:	9305      	str	r3, [sp, #20]
 80155e6:	e774      	b.n	80154d2 <_dtoa_r+0x92a>
 80155e8:	f000 f8ce 	bl	8015788 <__multadd>
 80155ec:	4639      	mov	r1, r7
 80155ee:	4681      	mov	r9, r0
 80155f0:	2300      	movs	r3, #0
 80155f2:	220a      	movs	r2, #10
 80155f4:	4630      	mov	r0, r6
 80155f6:	f000 f8c7 	bl	8015788 <__multadd>
 80155fa:	4607      	mov	r7, r0
 80155fc:	e7f0      	b.n	80155e0 <_dtoa_r+0xa38>
 80155fe:	f1ba 0f00 	cmp.w	sl, #0
 8015602:	9a00      	ldr	r2, [sp, #0]
 8015604:	bfcc      	ite	gt
 8015606:	46d0      	movgt	r8, sl
 8015608:	f04f 0801 	movle.w	r8, #1
 801560c:	4490      	add	r8, r2
 801560e:	f04f 0900 	mov.w	r9, #0
 8015612:	4629      	mov	r1, r5
 8015614:	2201      	movs	r2, #1
 8015616:	4630      	mov	r0, r6
 8015618:	9302      	str	r3, [sp, #8]
 801561a:	f000 fa65 	bl	8015ae8 <__lshift>
 801561e:	4621      	mov	r1, r4
 8015620:	4605      	mov	r5, r0
 8015622:	f000 facd 	bl	8015bc0 <__mcmp>
 8015626:	2800      	cmp	r0, #0
 8015628:	dcb1      	bgt.n	801558e <_dtoa_r+0x9e6>
 801562a:	d102      	bne.n	8015632 <_dtoa_r+0xa8a>
 801562c:	9b02      	ldr	r3, [sp, #8]
 801562e:	07db      	lsls	r3, r3, #31
 8015630:	d4ad      	bmi.n	801558e <_dtoa_r+0x9e6>
 8015632:	4643      	mov	r3, r8
 8015634:	4698      	mov	r8, r3
 8015636:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801563a:	2a30      	cmp	r2, #48	; 0x30
 801563c:	d0fa      	beq.n	8015634 <_dtoa_r+0xa8c>
 801563e:	e6f6      	b.n	801542e <_dtoa_r+0x886>
 8015640:	9a00      	ldr	r2, [sp, #0]
 8015642:	429a      	cmp	r2, r3
 8015644:	d1a4      	bne.n	8015590 <_dtoa_r+0x9e8>
 8015646:	f10b 0b01 	add.w	fp, fp, #1
 801564a:	2331      	movs	r3, #49	; 0x31
 801564c:	e778      	b.n	8015540 <_dtoa_r+0x998>
 801564e:	4b15      	ldr	r3, [pc, #84]	; (80156a4 <_dtoa_r+0xafc>)
 8015650:	f7ff bb12 	b.w	8014c78 <_dtoa_r+0xd0>
 8015654:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015656:	2b00      	cmp	r3, #0
 8015658:	f47f aaee 	bne.w	8014c38 <_dtoa_r+0x90>
 801565c:	4b12      	ldr	r3, [pc, #72]	; (80156a8 <_dtoa_r+0xb00>)
 801565e:	f7ff bb0b 	b.w	8014c78 <_dtoa_r+0xd0>
 8015662:	f1ba 0f00 	cmp.w	sl, #0
 8015666:	dc03      	bgt.n	8015670 <_dtoa_r+0xac8>
 8015668:	9b07      	ldr	r3, [sp, #28]
 801566a:	2b02      	cmp	r3, #2
 801566c:	f73f aec7 	bgt.w	80153fe <_dtoa_r+0x856>
 8015670:	f8dd 8000 	ldr.w	r8, [sp]
 8015674:	4621      	mov	r1, r4
 8015676:	4628      	mov	r0, r5
 8015678:	f7ff fa08 	bl	8014a8c <quorem>
 801567c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8015680:	f808 3b01 	strb.w	r3, [r8], #1
 8015684:	9a00      	ldr	r2, [sp, #0]
 8015686:	eba8 0202 	sub.w	r2, r8, r2
 801568a:	4592      	cmp	sl, r2
 801568c:	ddb7      	ble.n	80155fe <_dtoa_r+0xa56>
 801568e:	4629      	mov	r1, r5
 8015690:	2300      	movs	r3, #0
 8015692:	220a      	movs	r2, #10
 8015694:	4630      	mov	r0, r6
 8015696:	f000 f877 	bl	8015788 <__multadd>
 801569a:	4605      	mov	r5, r0
 801569c:	e7ea      	b.n	8015674 <_dtoa_r+0xacc>
 801569e:	bf00      	nop
 80156a0:	080181b3 	.word	0x080181b3
 80156a4:	0801810c 	.word	0x0801810c
 80156a8:	08018130 	.word	0x08018130

080156ac <_localeconv_r>:
 80156ac:	4800      	ldr	r0, [pc, #0]	; (80156b0 <_localeconv_r+0x4>)
 80156ae:	4770      	bx	lr
 80156b0:	240001b4 	.word	0x240001b4

080156b4 <malloc>:
 80156b4:	4b02      	ldr	r3, [pc, #8]	; (80156c0 <malloc+0xc>)
 80156b6:	4601      	mov	r1, r0
 80156b8:	6818      	ldr	r0, [r3, #0]
 80156ba:	f000 bbe1 	b.w	8015e80 <_malloc_r>
 80156be:	bf00      	nop
 80156c0:	24000060 	.word	0x24000060

080156c4 <_Balloc>:
 80156c4:	b570      	push	{r4, r5, r6, lr}
 80156c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80156c8:	4604      	mov	r4, r0
 80156ca:	460d      	mov	r5, r1
 80156cc:	b976      	cbnz	r6, 80156ec <_Balloc+0x28>
 80156ce:	2010      	movs	r0, #16
 80156d0:	f7ff fff0 	bl	80156b4 <malloc>
 80156d4:	4602      	mov	r2, r0
 80156d6:	6260      	str	r0, [r4, #36]	; 0x24
 80156d8:	b920      	cbnz	r0, 80156e4 <_Balloc+0x20>
 80156da:	4b18      	ldr	r3, [pc, #96]	; (801573c <_Balloc+0x78>)
 80156dc:	4818      	ldr	r0, [pc, #96]	; (8015740 <_Balloc+0x7c>)
 80156de:	2166      	movs	r1, #102	; 0x66
 80156e0:	f000 fc38 	bl	8015f54 <__assert_func>
 80156e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80156e8:	6006      	str	r6, [r0, #0]
 80156ea:	60c6      	str	r6, [r0, #12]
 80156ec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80156ee:	68f3      	ldr	r3, [r6, #12]
 80156f0:	b183      	cbz	r3, 8015714 <_Balloc+0x50>
 80156f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80156f4:	68db      	ldr	r3, [r3, #12]
 80156f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80156fa:	b9b8      	cbnz	r0, 801572c <_Balloc+0x68>
 80156fc:	2101      	movs	r1, #1
 80156fe:	fa01 f605 	lsl.w	r6, r1, r5
 8015702:	1d72      	adds	r2, r6, #5
 8015704:	0092      	lsls	r2, r2, #2
 8015706:	4620      	mov	r0, r4
 8015708:	f000 fb5a 	bl	8015dc0 <_calloc_r>
 801570c:	b160      	cbz	r0, 8015728 <_Balloc+0x64>
 801570e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015712:	e00e      	b.n	8015732 <_Balloc+0x6e>
 8015714:	2221      	movs	r2, #33	; 0x21
 8015716:	2104      	movs	r1, #4
 8015718:	4620      	mov	r0, r4
 801571a:	f000 fb51 	bl	8015dc0 <_calloc_r>
 801571e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015720:	60f0      	str	r0, [r6, #12]
 8015722:	68db      	ldr	r3, [r3, #12]
 8015724:	2b00      	cmp	r3, #0
 8015726:	d1e4      	bne.n	80156f2 <_Balloc+0x2e>
 8015728:	2000      	movs	r0, #0
 801572a:	bd70      	pop	{r4, r5, r6, pc}
 801572c:	6802      	ldr	r2, [r0, #0]
 801572e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015732:	2300      	movs	r3, #0
 8015734:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015738:	e7f7      	b.n	801572a <_Balloc+0x66>
 801573a:	bf00      	nop
 801573c:	0801813d 	.word	0x0801813d
 8015740:	080181c4 	.word	0x080181c4

08015744 <_Bfree>:
 8015744:	b570      	push	{r4, r5, r6, lr}
 8015746:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015748:	4605      	mov	r5, r0
 801574a:	460c      	mov	r4, r1
 801574c:	b976      	cbnz	r6, 801576c <_Bfree+0x28>
 801574e:	2010      	movs	r0, #16
 8015750:	f7ff ffb0 	bl	80156b4 <malloc>
 8015754:	4602      	mov	r2, r0
 8015756:	6268      	str	r0, [r5, #36]	; 0x24
 8015758:	b920      	cbnz	r0, 8015764 <_Bfree+0x20>
 801575a:	4b09      	ldr	r3, [pc, #36]	; (8015780 <_Bfree+0x3c>)
 801575c:	4809      	ldr	r0, [pc, #36]	; (8015784 <_Bfree+0x40>)
 801575e:	218a      	movs	r1, #138	; 0x8a
 8015760:	f000 fbf8 	bl	8015f54 <__assert_func>
 8015764:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015768:	6006      	str	r6, [r0, #0]
 801576a:	60c6      	str	r6, [r0, #12]
 801576c:	b13c      	cbz	r4, 801577e <_Bfree+0x3a>
 801576e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015770:	6862      	ldr	r2, [r4, #4]
 8015772:	68db      	ldr	r3, [r3, #12]
 8015774:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015778:	6021      	str	r1, [r4, #0]
 801577a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801577e:	bd70      	pop	{r4, r5, r6, pc}
 8015780:	0801813d 	.word	0x0801813d
 8015784:	080181c4 	.word	0x080181c4

08015788 <__multadd>:
 8015788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801578c:	690e      	ldr	r6, [r1, #16]
 801578e:	4607      	mov	r7, r0
 8015790:	4698      	mov	r8, r3
 8015792:	460c      	mov	r4, r1
 8015794:	f101 0014 	add.w	r0, r1, #20
 8015798:	2300      	movs	r3, #0
 801579a:	6805      	ldr	r5, [r0, #0]
 801579c:	b2a9      	uxth	r1, r5
 801579e:	fb02 8101 	mla	r1, r2, r1, r8
 80157a2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80157a6:	0c2d      	lsrs	r5, r5, #16
 80157a8:	fb02 c505 	mla	r5, r2, r5, ip
 80157ac:	b289      	uxth	r1, r1
 80157ae:	3301      	adds	r3, #1
 80157b0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80157b4:	429e      	cmp	r6, r3
 80157b6:	f840 1b04 	str.w	r1, [r0], #4
 80157ba:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80157be:	dcec      	bgt.n	801579a <__multadd+0x12>
 80157c0:	f1b8 0f00 	cmp.w	r8, #0
 80157c4:	d022      	beq.n	801580c <__multadd+0x84>
 80157c6:	68a3      	ldr	r3, [r4, #8]
 80157c8:	42b3      	cmp	r3, r6
 80157ca:	dc19      	bgt.n	8015800 <__multadd+0x78>
 80157cc:	6861      	ldr	r1, [r4, #4]
 80157ce:	4638      	mov	r0, r7
 80157d0:	3101      	adds	r1, #1
 80157d2:	f7ff ff77 	bl	80156c4 <_Balloc>
 80157d6:	4605      	mov	r5, r0
 80157d8:	b928      	cbnz	r0, 80157e6 <__multadd+0x5e>
 80157da:	4602      	mov	r2, r0
 80157dc:	4b0d      	ldr	r3, [pc, #52]	; (8015814 <__multadd+0x8c>)
 80157de:	480e      	ldr	r0, [pc, #56]	; (8015818 <__multadd+0x90>)
 80157e0:	21b5      	movs	r1, #181	; 0xb5
 80157e2:	f000 fbb7 	bl	8015f54 <__assert_func>
 80157e6:	6922      	ldr	r2, [r4, #16]
 80157e8:	3202      	adds	r2, #2
 80157ea:	f104 010c 	add.w	r1, r4, #12
 80157ee:	0092      	lsls	r2, r2, #2
 80157f0:	300c      	adds	r0, #12
 80157f2:	f7fe fcf1 	bl	80141d8 <memcpy>
 80157f6:	4621      	mov	r1, r4
 80157f8:	4638      	mov	r0, r7
 80157fa:	f7ff ffa3 	bl	8015744 <_Bfree>
 80157fe:	462c      	mov	r4, r5
 8015800:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8015804:	3601      	adds	r6, #1
 8015806:	f8c3 8014 	str.w	r8, [r3, #20]
 801580a:	6126      	str	r6, [r4, #16]
 801580c:	4620      	mov	r0, r4
 801580e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015812:	bf00      	nop
 8015814:	080181b3 	.word	0x080181b3
 8015818:	080181c4 	.word	0x080181c4

0801581c <__hi0bits>:
 801581c:	0c03      	lsrs	r3, r0, #16
 801581e:	041b      	lsls	r3, r3, #16
 8015820:	b9d3      	cbnz	r3, 8015858 <__hi0bits+0x3c>
 8015822:	0400      	lsls	r0, r0, #16
 8015824:	2310      	movs	r3, #16
 8015826:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801582a:	bf04      	itt	eq
 801582c:	0200      	lsleq	r0, r0, #8
 801582e:	3308      	addeq	r3, #8
 8015830:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015834:	bf04      	itt	eq
 8015836:	0100      	lsleq	r0, r0, #4
 8015838:	3304      	addeq	r3, #4
 801583a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801583e:	bf04      	itt	eq
 8015840:	0080      	lsleq	r0, r0, #2
 8015842:	3302      	addeq	r3, #2
 8015844:	2800      	cmp	r0, #0
 8015846:	db05      	blt.n	8015854 <__hi0bits+0x38>
 8015848:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801584c:	f103 0301 	add.w	r3, r3, #1
 8015850:	bf08      	it	eq
 8015852:	2320      	moveq	r3, #32
 8015854:	4618      	mov	r0, r3
 8015856:	4770      	bx	lr
 8015858:	2300      	movs	r3, #0
 801585a:	e7e4      	b.n	8015826 <__hi0bits+0xa>

0801585c <__lo0bits>:
 801585c:	6803      	ldr	r3, [r0, #0]
 801585e:	f013 0207 	ands.w	r2, r3, #7
 8015862:	4601      	mov	r1, r0
 8015864:	d00b      	beq.n	801587e <__lo0bits+0x22>
 8015866:	07da      	lsls	r2, r3, #31
 8015868:	d424      	bmi.n	80158b4 <__lo0bits+0x58>
 801586a:	0798      	lsls	r0, r3, #30
 801586c:	bf49      	itett	mi
 801586e:	085b      	lsrmi	r3, r3, #1
 8015870:	089b      	lsrpl	r3, r3, #2
 8015872:	2001      	movmi	r0, #1
 8015874:	600b      	strmi	r3, [r1, #0]
 8015876:	bf5c      	itt	pl
 8015878:	600b      	strpl	r3, [r1, #0]
 801587a:	2002      	movpl	r0, #2
 801587c:	4770      	bx	lr
 801587e:	b298      	uxth	r0, r3
 8015880:	b9b0      	cbnz	r0, 80158b0 <__lo0bits+0x54>
 8015882:	0c1b      	lsrs	r3, r3, #16
 8015884:	2010      	movs	r0, #16
 8015886:	f013 0fff 	tst.w	r3, #255	; 0xff
 801588a:	bf04      	itt	eq
 801588c:	0a1b      	lsreq	r3, r3, #8
 801588e:	3008      	addeq	r0, #8
 8015890:	071a      	lsls	r2, r3, #28
 8015892:	bf04      	itt	eq
 8015894:	091b      	lsreq	r3, r3, #4
 8015896:	3004      	addeq	r0, #4
 8015898:	079a      	lsls	r2, r3, #30
 801589a:	bf04      	itt	eq
 801589c:	089b      	lsreq	r3, r3, #2
 801589e:	3002      	addeq	r0, #2
 80158a0:	07da      	lsls	r2, r3, #31
 80158a2:	d403      	bmi.n	80158ac <__lo0bits+0x50>
 80158a4:	085b      	lsrs	r3, r3, #1
 80158a6:	f100 0001 	add.w	r0, r0, #1
 80158aa:	d005      	beq.n	80158b8 <__lo0bits+0x5c>
 80158ac:	600b      	str	r3, [r1, #0]
 80158ae:	4770      	bx	lr
 80158b0:	4610      	mov	r0, r2
 80158b2:	e7e8      	b.n	8015886 <__lo0bits+0x2a>
 80158b4:	2000      	movs	r0, #0
 80158b6:	4770      	bx	lr
 80158b8:	2020      	movs	r0, #32
 80158ba:	4770      	bx	lr

080158bc <__i2b>:
 80158bc:	b510      	push	{r4, lr}
 80158be:	460c      	mov	r4, r1
 80158c0:	2101      	movs	r1, #1
 80158c2:	f7ff feff 	bl	80156c4 <_Balloc>
 80158c6:	4602      	mov	r2, r0
 80158c8:	b928      	cbnz	r0, 80158d6 <__i2b+0x1a>
 80158ca:	4b05      	ldr	r3, [pc, #20]	; (80158e0 <__i2b+0x24>)
 80158cc:	4805      	ldr	r0, [pc, #20]	; (80158e4 <__i2b+0x28>)
 80158ce:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80158d2:	f000 fb3f 	bl	8015f54 <__assert_func>
 80158d6:	2301      	movs	r3, #1
 80158d8:	6144      	str	r4, [r0, #20]
 80158da:	6103      	str	r3, [r0, #16]
 80158dc:	bd10      	pop	{r4, pc}
 80158de:	bf00      	nop
 80158e0:	080181b3 	.word	0x080181b3
 80158e4:	080181c4 	.word	0x080181c4

080158e8 <__multiply>:
 80158e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158ec:	4614      	mov	r4, r2
 80158ee:	690a      	ldr	r2, [r1, #16]
 80158f0:	6923      	ldr	r3, [r4, #16]
 80158f2:	429a      	cmp	r2, r3
 80158f4:	bfb8      	it	lt
 80158f6:	460b      	movlt	r3, r1
 80158f8:	460d      	mov	r5, r1
 80158fa:	bfbc      	itt	lt
 80158fc:	4625      	movlt	r5, r4
 80158fe:	461c      	movlt	r4, r3
 8015900:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8015904:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015908:	68ab      	ldr	r3, [r5, #8]
 801590a:	6869      	ldr	r1, [r5, #4]
 801590c:	eb0a 0709 	add.w	r7, sl, r9
 8015910:	42bb      	cmp	r3, r7
 8015912:	b085      	sub	sp, #20
 8015914:	bfb8      	it	lt
 8015916:	3101      	addlt	r1, #1
 8015918:	f7ff fed4 	bl	80156c4 <_Balloc>
 801591c:	b930      	cbnz	r0, 801592c <__multiply+0x44>
 801591e:	4602      	mov	r2, r0
 8015920:	4b42      	ldr	r3, [pc, #264]	; (8015a2c <__multiply+0x144>)
 8015922:	4843      	ldr	r0, [pc, #268]	; (8015a30 <__multiply+0x148>)
 8015924:	f240 115d 	movw	r1, #349	; 0x15d
 8015928:	f000 fb14 	bl	8015f54 <__assert_func>
 801592c:	f100 0614 	add.w	r6, r0, #20
 8015930:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8015934:	4633      	mov	r3, r6
 8015936:	2200      	movs	r2, #0
 8015938:	4543      	cmp	r3, r8
 801593a:	d31e      	bcc.n	801597a <__multiply+0x92>
 801593c:	f105 0c14 	add.w	ip, r5, #20
 8015940:	f104 0314 	add.w	r3, r4, #20
 8015944:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8015948:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801594c:	9202      	str	r2, [sp, #8]
 801594e:	ebac 0205 	sub.w	r2, ip, r5
 8015952:	3a15      	subs	r2, #21
 8015954:	f022 0203 	bic.w	r2, r2, #3
 8015958:	3204      	adds	r2, #4
 801595a:	f105 0115 	add.w	r1, r5, #21
 801595e:	458c      	cmp	ip, r1
 8015960:	bf38      	it	cc
 8015962:	2204      	movcc	r2, #4
 8015964:	9201      	str	r2, [sp, #4]
 8015966:	9a02      	ldr	r2, [sp, #8]
 8015968:	9303      	str	r3, [sp, #12]
 801596a:	429a      	cmp	r2, r3
 801596c:	d808      	bhi.n	8015980 <__multiply+0x98>
 801596e:	2f00      	cmp	r7, #0
 8015970:	dc55      	bgt.n	8015a1e <__multiply+0x136>
 8015972:	6107      	str	r7, [r0, #16]
 8015974:	b005      	add	sp, #20
 8015976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801597a:	f843 2b04 	str.w	r2, [r3], #4
 801597e:	e7db      	b.n	8015938 <__multiply+0x50>
 8015980:	f8b3 a000 	ldrh.w	sl, [r3]
 8015984:	f1ba 0f00 	cmp.w	sl, #0
 8015988:	d020      	beq.n	80159cc <__multiply+0xe4>
 801598a:	f105 0e14 	add.w	lr, r5, #20
 801598e:	46b1      	mov	r9, r6
 8015990:	2200      	movs	r2, #0
 8015992:	f85e 4b04 	ldr.w	r4, [lr], #4
 8015996:	f8d9 b000 	ldr.w	fp, [r9]
 801599a:	b2a1      	uxth	r1, r4
 801599c:	fa1f fb8b 	uxth.w	fp, fp
 80159a0:	fb0a b101 	mla	r1, sl, r1, fp
 80159a4:	4411      	add	r1, r2
 80159a6:	f8d9 2000 	ldr.w	r2, [r9]
 80159aa:	0c24      	lsrs	r4, r4, #16
 80159ac:	0c12      	lsrs	r2, r2, #16
 80159ae:	fb0a 2404 	mla	r4, sl, r4, r2
 80159b2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80159b6:	b289      	uxth	r1, r1
 80159b8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80159bc:	45f4      	cmp	ip, lr
 80159be:	f849 1b04 	str.w	r1, [r9], #4
 80159c2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80159c6:	d8e4      	bhi.n	8015992 <__multiply+0xaa>
 80159c8:	9901      	ldr	r1, [sp, #4]
 80159ca:	5072      	str	r2, [r6, r1]
 80159cc:	9a03      	ldr	r2, [sp, #12]
 80159ce:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80159d2:	3304      	adds	r3, #4
 80159d4:	f1b9 0f00 	cmp.w	r9, #0
 80159d8:	d01f      	beq.n	8015a1a <__multiply+0x132>
 80159da:	6834      	ldr	r4, [r6, #0]
 80159dc:	f105 0114 	add.w	r1, r5, #20
 80159e0:	46b6      	mov	lr, r6
 80159e2:	f04f 0a00 	mov.w	sl, #0
 80159e6:	880a      	ldrh	r2, [r1, #0]
 80159e8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80159ec:	fb09 b202 	mla	r2, r9, r2, fp
 80159f0:	4492      	add	sl, r2
 80159f2:	b2a4      	uxth	r4, r4
 80159f4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80159f8:	f84e 4b04 	str.w	r4, [lr], #4
 80159fc:	f851 4b04 	ldr.w	r4, [r1], #4
 8015a00:	f8be 2000 	ldrh.w	r2, [lr]
 8015a04:	0c24      	lsrs	r4, r4, #16
 8015a06:	fb09 2404 	mla	r4, r9, r4, r2
 8015a0a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8015a0e:	458c      	cmp	ip, r1
 8015a10:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015a14:	d8e7      	bhi.n	80159e6 <__multiply+0xfe>
 8015a16:	9a01      	ldr	r2, [sp, #4]
 8015a18:	50b4      	str	r4, [r6, r2]
 8015a1a:	3604      	adds	r6, #4
 8015a1c:	e7a3      	b.n	8015966 <__multiply+0x7e>
 8015a1e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d1a5      	bne.n	8015972 <__multiply+0x8a>
 8015a26:	3f01      	subs	r7, #1
 8015a28:	e7a1      	b.n	801596e <__multiply+0x86>
 8015a2a:	bf00      	nop
 8015a2c:	080181b3 	.word	0x080181b3
 8015a30:	080181c4 	.word	0x080181c4

08015a34 <__pow5mult>:
 8015a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a38:	4615      	mov	r5, r2
 8015a3a:	f012 0203 	ands.w	r2, r2, #3
 8015a3e:	4606      	mov	r6, r0
 8015a40:	460f      	mov	r7, r1
 8015a42:	d007      	beq.n	8015a54 <__pow5mult+0x20>
 8015a44:	4c25      	ldr	r4, [pc, #148]	; (8015adc <__pow5mult+0xa8>)
 8015a46:	3a01      	subs	r2, #1
 8015a48:	2300      	movs	r3, #0
 8015a4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015a4e:	f7ff fe9b 	bl	8015788 <__multadd>
 8015a52:	4607      	mov	r7, r0
 8015a54:	10ad      	asrs	r5, r5, #2
 8015a56:	d03d      	beq.n	8015ad4 <__pow5mult+0xa0>
 8015a58:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015a5a:	b97c      	cbnz	r4, 8015a7c <__pow5mult+0x48>
 8015a5c:	2010      	movs	r0, #16
 8015a5e:	f7ff fe29 	bl	80156b4 <malloc>
 8015a62:	4602      	mov	r2, r0
 8015a64:	6270      	str	r0, [r6, #36]	; 0x24
 8015a66:	b928      	cbnz	r0, 8015a74 <__pow5mult+0x40>
 8015a68:	4b1d      	ldr	r3, [pc, #116]	; (8015ae0 <__pow5mult+0xac>)
 8015a6a:	481e      	ldr	r0, [pc, #120]	; (8015ae4 <__pow5mult+0xb0>)
 8015a6c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015a70:	f000 fa70 	bl	8015f54 <__assert_func>
 8015a74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015a78:	6004      	str	r4, [r0, #0]
 8015a7a:	60c4      	str	r4, [r0, #12]
 8015a7c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015a80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015a84:	b94c      	cbnz	r4, 8015a9a <__pow5mult+0x66>
 8015a86:	f240 2171 	movw	r1, #625	; 0x271
 8015a8a:	4630      	mov	r0, r6
 8015a8c:	f7ff ff16 	bl	80158bc <__i2b>
 8015a90:	2300      	movs	r3, #0
 8015a92:	f8c8 0008 	str.w	r0, [r8, #8]
 8015a96:	4604      	mov	r4, r0
 8015a98:	6003      	str	r3, [r0, #0]
 8015a9a:	f04f 0900 	mov.w	r9, #0
 8015a9e:	07eb      	lsls	r3, r5, #31
 8015aa0:	d50a      	bpl.n	8015ab8 <__pow5mult+0x84>
 8015aa2:	4639      	mov	r1, r7
 8015aa4:	4622      	mov	r2, r4
 8015aa6:	4630      	mov	r0, r6
 8015aa8:	f7ff ff1e 	bl	80158e8 <__multiply>
 8015aac:	4639      	mov	r1, r7
 8015aae:	4680      	mov	r8, r0
 8015ab0:	4630      	mov	r0, r6
 8015ab2:	f7ff fe47 	bl	8015744 <_Bfree>
 8015ab6:	4647      	mov	r7, r8
 8015ab8:	106d      	asrs	r5, r5, #1
 8015aba:	d00b      	beq.n	8015ad4 <__pow5mult+0xa0>
 8015abc:	6820      	ldr	r0, [r4, #0]
 8015abe:	b938      	cbnz	r0, 8015ad0 <__pow5mult+0x9c>
 8015ac0:	4622      	mov	r2, r4
 8015ac2:	4621      	mov	r1, r4
 8015ac4:	4630      	mov	r0, r6
 8015ac6:	f7ff ff0f 	bl	80158e8 <__multiply>
 8015aca:	6020      	str	r0, [r4, #0]
 8015acc:	f8c0 9000 	str.w	r9, [r0]
 8015ad0:	4604      	mov	r4, r0
 8015ad2:	e7e4      	b.n	8015a9e <__pow5mult+0x6a>
 8015ad4:	4638      	mov	r0, r7
 8015ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ada:	bf00      	nop
 8015adc:	08018318 	.word	0x08018318
 8015ae0:	0801813d 	.word	0x0801813d
 8015ae4:	080181c4 	.word	0x080181c4

08015ae8 <__lshift>:
 8015ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015aec:	460c      	mov	r4, r1
 8015aee:	6849      	ldr	r1, [r1, #4]
 8015af0:	6923      	ldr	r3, [r4, #16]
 8015af2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015af6:	68a3      	ldr	r3, [r4, #8]
 8015af8:	4607      	mov	r7, r0
 8015afa:	4691      	mov	r9, r2
 8015afc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015b00:	f108 0601 	add.w	r6, r8, #1
 8015b04:	42b3      	cmp	r3, r6
 8015b06:	db0b      	blt.n	8015b20 <__lshift+0x38>
 8015b08:	4638      	mov	r0, r7
 8015b0a:	f7ff fddb 	bl	80156c4 <_Balloc>
 8015b0e:	4605      	mov	r5, r0
 8015b10:	b948      	cbnz	r0, 8015b26 <__lshift+0x3e>
 8015b12:	4602      	mov	r2, r0
 8015b14:	4b28      	ldr	r3, [pc, #160]	; (8015bb8 <__lshift+0xd0>)
 8015b16:	4829      	ldr	r0, [pc, #164]	; (8015bbc <__lshift+0xd4>)
 8015b18:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015b1c:	f000 fa1a 	bl	8015f54 <__assert_func>
 8015b20:	3101      	adds	r1, #1
 8015b22:	005b      	lsls	r3, r3, #1
 8015b24:	e7ee      	b.n	8015b04 <__lshift+0x1c>
 8015b26:	2300      	movs	r3, #0
 8015b28:	f100 0114 	add.w	r1, r0, #20
 8015b2c:	f100 0210 	add.w	r2, r0, #16
 8015b30:	4618      	mov	r0, r3
 8015b32:	4553      	cmp	r3, sl
 8015b34:	db33      	blt.n	8015b9e <__lshift+0xb6>
 8015b36:	6920      	ldr	r0, [r4, #16]
 8015b38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015b3c:	f104 0314 	add.w	r3, r4, #20
 8015b40:	f019 091f 	ands.w	r9, r9, #31
 8015b44:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015b48:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015b4c:	d02b      	beq.n	8015ba6 <__lshift+0xbe>
 8015b4e:	f1c9 0e20 	rsb	lr, r9, #32
 8015b52:	468a      	mov	sl, r1
 8015b54:	2200      	movs	r2, #0
 8015b56:	6818      	ldr	r0, [r3, #0]
 8015b58:	fa00 f009 	lsl.w	r0, r0, r9
 8015b5c:	4302      	orrs	r2, r0
 8015b5e:	f84a 2b04 	str.w	r2, [sl], #4
 8015b62:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b66:	459c      	cmp	ip, r3
 8015b68:	fa22 f20e 	lsr.w	r2, r2, lr
 8015b6c:	d8f3      	bhi.n	8015b56 <__lshift+0x6e>
 8015b6e:	ebac 0304 	sub.w	r3, ip, r4
 8015b72:	3b15      	subs	r3, #21
 8015b74:	f023 0303 	bic.w	r3, r3, #3
 8015b78:	3304      	adds	r3, #4
 8015b7a:	f104 0015 	add.w	r0, r4, #21
 8015b7e:	4584      	cmp	ip, r0
 8015b80:	bf38      	it	cc
 8015b82:	2304      	movcc	r3, #4
 8015b84:	50ca      	str	r2, [r1, r3]
 8015b86:	b10a      	cbz	r2, 8015b8c <__lshift+0xa4>
 8015b88:	f108 0602 	add.w	r6, r8, #2
 8015b8c:	3e01      	subs	r6, #1
 8015b8e:	4638      	mov	r0, r7
 8015b90:	612e      	str	r6, [r5, #16]
 8015b92:	4621      	mov	r1, r4
 8015b94:	f7ff fdd6 	bl	8015744 <_Bfree>
 8015b98:	4628      	mov	r0, r5
 8015b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b9e:	f842 0f04 	str.w	r0, [r2, #4]!
 8015ba2:	3301      	adds	r3, #1
 8015ba4:	e7c5      	b.n	8015b32 <__lshift+0x4a>
 8015ba6:	3904      	subs	r1, #4
 8015ba8:	f853 2b04 	ldr.w	r2, [r3], #4
 8015bac:	f841 2f04 	str.w	r2, [r1, #4]!
 8015bb0:	459c      	cmp	ip, r3
 8015bb2:	d8f9      	bhi.n	8015ba8 <__lshift+0xc0>
 8015bb4:	e7ea      	b.n	8015b8c <__lshift+0xa4>
 8015bb6:	bf00      	nop
 8015bb8:	080181b3 	.word	0x080181b3
 8015bbc:	080181c4 	.word	0x080181c4

08015bc0 <__mcmp>:
 8015bc0:	b530      	push	{r4, r5, lr}
 8015bc2:	6902      	ldr	r2, [r0, #16]
 8015bc4:	690c      	ldr	r4, [r1, #16]
 8015bc6:	1b12      	subs	r2, r2, r4
 8015bc8:	d10e      	bne.n	8015be8 <__mcmp+0x28>
 8015bca:	f100 0314 	add.w	r3, r0, #20
 8015bce:	3114      	adds	r1, #20
 8015bd0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015bd4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015bd8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015bdc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015be0:	42a5      	cmp	r5, r4
 8015be2:	d003      	beq.n	8015bec <__mcmp+0x2c>
 8015be4:	d305      	bcc.n	8015bf2 <__mcmp+0x32>
 8015be6:	2201      	movs	r2, #1
 8015be8:	4610      	mov	r0, r2
 8015bea:	bd30      	pop	{r4, r5, pc}
 8015bec:	4283      	cmp	r3, r0
 8015bee:	d3f3      	bcc.n	8015bd8 <__mcmp+0x18>
 8015bf0:	e7fa      	b.n	8015be8 <__mcmp+0x28>
 8015bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8015bf6:	e7f7      	b.n	8015be8 <__mcmp+0x28>

08015bf8 <__mdiff>:
 8015bf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bfc:	460c      	mov	r4, r1
 8015bfe:	4606      	mov	r6, r0
 8015c00:	4611      	mov	r1, r2
 8015c02:	4620      	mov	r0, r4
 8015c04:	4617      	mov	r7, r2
 8015c06:	f7ff ffdb 	bl	8015bc0 <__mcmp>
 8015c0a:	1e05      	subs	r5, r0, #0
 8015c0c:	d110      	bne.n	8015c30 <__mdiff+0x38>
 8015c0e:	4629      	mov	r1, r5
 8015c10:	4630      	mov	r0, r6
 8015c12:	f7ff fd57 	bl	80156c4 <_Balloc>
 8015c16:	b930      	cbnz	r0, 8015c26 <__mdiff+0x2e>
 8015c18:	4b39      	ldr	r3, [pc, #228]	; (8015d00 <__mdiff+0x108>)
 8015c1a:	4602      	mov	r2, r0
 8015c1c:	f240 2132 	movw	r1, #562	; 0x232
 8015c20:	4838      	ldr	r0, [pc, #224]	; (8015d04 <__mdiff+0x10c>)
 8015c22:	f000 f997 	bl	8015f54 <__assert_func>
 8015c26:	2301      	movs	r3, #1
 8015c28:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015c2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c30:	bfa4      	itt	ge
 8015c32:	463b      	movge	r3, r7
 8015c34:	4627      	movge	r7, r4
 8015c36:	4630      	mov	r0, r6
 8015c38:	6879      	ldr	r1, [r7, #4]
 8015c3a:	bfa6      	itte	ge
 8015c3c:	461c      	movge	r4, r3
 8015c3e:	2500      	movge	r5, #0
 8015c40:	2501      	movlt	r5, #1
 8015c42:	f7ff fd3f 	bl	80156c4 <_Balloc>
 8015c46:	b920      	cbnz	r0, 8015c52 <__mdiff+0x5a>
 8015c48:	4b2d      	ldr	r3, [pc, #180]	; (8015d00 <__mdiff+0x108>)
 8015c4a:	4602      	mov	r2, r0
 8015c4c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8015c50:	e7e6      	b.n	8015c20 <__mdiff+0x28>
 8015c52:	693e      	ldr	r6, [r7, #16]
 8015c54:	60c5      	str	r5, [r0, #12]
 8015c56:	6925      	ldr	r5, [r4, #16]
 8015c58:	f107 0114 	add.w	r1, r7, #20
 8015c5c:	f104 0914 	add.w	r9, r4, #20
 8015c60:	f100 0e14 	add.w	lr, r0, #20
 8015c64:	f107 0210 	add.w	r2, r7, #16
 8015c68:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8015c6c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8015c70:	46f2      	mov	sl, lr
 8015c72:	2700      	movs	r7, #0
 8015c74:	f859 3b04 	ldr.w	r3, [r9], #4
 8015c78:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015c7c:	fa1f f883 	uxth.w	r8, r3
 8015c80:	fa17 f78b 	uxtah	r7, r7, fp
 8015c84:	0c1b      	lsrs	r3, r3, #16
 8015c86:	eba7 0808 	sub.w	r8, r7, r8
 8015c8a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015c8e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015c92:	fa1f f888 	uxth.w	r8, r8
 8015c96:	141f      	asrs	r7, r3, #16
 8015c98:	454d      	cmp	r5, r9
 8015c9a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015c9e:	f84a 3b04 	str.w	r3, [sl], #4
 8015ca2:	d8e7      	bhi.n	8015c74 <__mdiff+0x7c>
 8015ca4:	1b2b      	subs	r3, r5, r4
 8015ca6:	3b15      	subs	r3, #21
 8015ca8:	f023 0303 	bic.w	r3, r3, #3
 8015cac:	3304      	adds	r3, #4
 8015cae:	3415      	adds	r4, #21
 8015cb0:	42a5      	cmp	r5, r4
 8015cb2:	bf38      	it	cc
 8015cb4:	2304      	movcc	r3, #4
 8015cb6:	4419      	add	r1, r3
 8015cb8:	4473      	add	r3, lr
 8015cba:	469e      	mov	lr, r3
 8015cbc:	460d      	mov	r5, r1
 8015cbe:	4565      	cmp	r5, ip
 8015cc0:	d30e      	bcc.n	8015ce0 <__mdiff+0xe8>
 8015cc2:	f10c 0203 	add.w	r2, ip, #3
 8015cc6:	1a52      	subs	r2, r2, r1
 8015cc8:	f022 0203 	bic.w	r2, r2, #3
 8015ccc:	3903      	subs	r1, #3
 8015cce:	458c      	cmp	ip, r1
 8015cd0:	bf38      	it	cc
 8015cd2:	2200      	movcc	r2, #0
 8015cd4:	441a      	add	r2, r3
 8015cd6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015cda:	b17b      	cbz	r3, 8015cfc <__mdiff+0x104>
 8015cdc:	6106      	str	r6, [r0, #16]
 8015cde:	e7a5      	b.n	8015c2c <__mdiff+0x34>
 8015ce0:	f855 8b04 	ldr.w	r8, [r5], #4
 8015ce4:	fa17 f488 	uxtah	r4, r7, r8
 8015ce8:	1422      	asrs	r2, r4, #16
 8015cea:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8015cee:	b2a4      	uxth	r4, r4
 8015cf0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8015cf4:	f84e 4b04 	str.w	r4, [lr], #4
 8015cf8:	1417      	asrs	r7, r2, #16
 8015cfa:	e7e0      	b.n	8015cbe <__mdiff+0xc6>
 8015cfc:	3e01      	subs	r6, #1
 8015cfe:	e7ea      	b.n	8015cd6 <__mdiff+0xde>
 8015d00:	080181b3 	.word	0x080181b3
 8015d04:	080181c4 	.word	0x080181c4

08015d08 <__d2b>:
 8015d08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015d0c:	4689      	mov	r9, r1
 8015d0e:	2101      	movs	r1, #1
 8015d10:	ec57 6b10 	vmov	r6, r7, d0
 8015d14:	4690      	mov	r8, r2
 8015d16:	f7ff fcd5 	bl	80156c4 <_Balloc>
 8015d1a:	4604      	mov	r4, r0
 8015d1c:	b930      	cbnz	r0, 8015d2c <__d2b+0x24>
 8015d1e:	4602      	mov	r2, r0
 8015d20:	4b25      	ldr	r3, [pc, #148]	; (8015db8 <__d2b+0xb0>)
 8015d22:	4826      	ldr	r0, [pc, #152]	; (8015dbc <__d2b+0xb4>)
 8015d24:	f240 310a 	movw	r1, #778	; 0x30a
 8015d28:	f000 f914 	bl	8015f54 <__assert_func>
 8015d2c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8015d30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015d34:	bb35      	cbnz	r5, 8015d84 <__d2b+0x7c>
 8015d36:	2e00      	cmp	r6, #0
 8015d38:	9301      	str	r3, [sp, #4]
 8015d3a:	d028      	beq.n	8015d8e <__d2b+0x86>
 8015d3c:	4668      	mov	r0, sp
 8015d3e:	9600      	str	r6, [sp, #0]
 8015d40:	f7ff fd8c 	bl	801585c <__lo0bits>
 8015d44:	9900      	ldr	r1, [sp, #0]
 8015d46:	b300      	cbz	r0, 8015d8a <__d2b+0x82>
 8015d48:	9a01      	ldr	r2, [sp, #4]
 8015d4a:	f1c0 0320 	rsb	r3, r0, #32
 8015d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8015d52:	430b      	orrs	r3, r1
 8015d54:	40c2      	lsrs	r2, r0
 8015d56:	6163      	str	r3, [r4, #20]
 8015d58:	9201      	str	r2, [sp, #4]
 8015d5a:	9b01      	ldr	r3, [sp, #4]
 8015d5c:	61a3      	str	r3, [r4, #24]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	bf14      	ite	ne
 8015d62:	2202      	movne	r2, #2
 8015d64:	2201      	moveq	r2, #1
 8015d66:	6122      	str	r2, [r4, #16]
 8015d68:	b1d5      	cbz	r5, 8015da0 <__d2b+0x98>
 8015d6a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015d6e:	4405      	add	r5, r0
 8015d70:	f8c9 5000 	str.w	r5, [r9]
 8015d74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015d78:	f8c8 0000 	str.w	r0, [r8]
 8015d7c:	4620      	mov	r0, r4
 8015d7e:	b003      	add	sp, #12
 8015d80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015d88:	e7d5      	b.n	8015d36 <__d2b+0x2e>
 8015d8a:	6161      	str	r1, [r4, #20]
 8015d8c:	e7e5      	b.n	8015d5a <__d2b+0x52>
 8015d8e:	a801      	add	r0, sp, #4
 8015d90:	f7ff fd64 	bl	801585c <__lo0bits>
 8015d94:	9b01      	ldr	r3, [sp, #4]
 8015d96:	6163      	str	r3, [r4, #20]
 8015d98:	2201      	movs	r2, #1
 8015d9a:	6122      	str	r2, [r4, #16]
 8015d9c:	3020      	adds	r0, #32
 8015d9e:	e7e3      	b.n	8015d68 <__d2b+0x60>
 8015da0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015da4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015da8:	f8c9 0000 	str.w	r0, [r9]
 8015dac:	6918      	ldr	r0, [r3, #16]
 8015dae:	f7ff fd35 	bl	801581c <__hi0bits>
 8015db2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015db6:	e7df      	b.n	8015d78 <__d2b+0x70>
 8015db8:	080181b3 	.word	0x080181b3
 8015dbc:	080181c4 	.word	0x080181c4

08015dc0 <_calloc_r>:
 8015dc0:	b513      	push	{r0, r1, r4, lr}
 8015dc2:	434a      	muls	r2, r1
 8015dc4:	4611      	mov	r1, r2
 8015dc6:	9201      	str	r2, [sp, #4]
 8015dc8:	f000 f85a 	bl	8015e80 <_malloc_r>
 8015dcc:	4604      	mov	r4, r0
 8015dce:	b118      	cbz	r0, 8015dd8 <_calloc_r+0x18>
 8015dd0:	9a01      	ldr	r2, [sp, #4]
 8015dd2:	2100      	movs	r1, #0
 8015dd4:	f7fe fa0e 	bl	80141f4 <memset>
 8015dd8:	4620      	mov	r0, r4
 8015dda:	b002      	add	sp, #8
 8015ddc:	bd10      	pop	{r4, pc}
	...

08015de0 <_free_r>:
 8015de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015de2:	2900      	cmp	r1, #0
 8015de4:	d048      	beq.n	8015e78 <_free_r+0x98>
 8015de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015dea:	9001      	str	r0, [sp, #4]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	f1a1 0404 	sub.w	r4, r1, #4
 8015df2:	bfb8      	it	lt
 8015df4:	18e4      	addlt	r4, r4, r3
 8015df6:	f000 f8ef 	bl	8015fd8 <__malloc_lock>
 8015dfa:	4a20      	ldr	r2, [pc, #128]	; (8015e7c <_free_r+0x9c>)
 8015dfc:	9801      	ldr	r0, [sp, #4]
 8015dfe:	6813      	ldr	r3, [r2, #0]
 8015e00:	4615      	mov	r5, r2
 8015e02:	b933      	cbnz	r3, 8015e12 <_free_r+0x32>
 8015e04:	6063      	str	r3, [r4, #4]
 8015e06:	6014      	str	r4, [r2, #0]
 8015e08:	b003      	add	sp, #12
 8015e0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015e0e:	f000 b8e9 	b.w	8015fe4 <__malloc_unlock>
 8015e12:	42a3      	cmp	r3, r4
 8015e14:	d90b      	bls.n	8015e2e <_free_r+0x4e>
 8015e16:	6821      	ldr	r1, [r4, #0]
 8015e18:	1862      	adds	r2, r4, r1
 8015e1a:	4293      	cmp	r3, r2
 8015e1c:	bf04      	itt	eq
 8015e1e:	681a      	ldreq	r2, [r3, #0]
 8015e20:	685b      	ldreq	r3, [r3, #4]
 8015e22:	6063      	str	r3, [r4, #4]
 8015e24:	bf04      	itt	eq
 8015e26:	1852      	addeq	r2, r2, r1
 8015e28:	6022      	streq	r2, [r4, #0]
 8015e2a:	602c      	str	r4, [r5, #0]
 8015e2c:	e7ec      	b.n	8015e08 <_free_r+0x28>
 8015e2e:	461a      	mov	r2, r3
 8015e30:	685b      	ldr	r3, [r3, #4]
 8015e32:	b10b      	cbz	r3, 8015e38 <_free_r+0x58>
 8015e34:	42a3      	cmp	r3, r4
 8015e36:	d9fa      	bls.n	8015e2e <_free_r+0x4e>
 8015e38:	6811      	ldr	r1, [r2, #0]
 8015e3a:	1855      	adds	r5, r2, r1
 8015e3c:	42a5      	cmp	r5, r4
 8015e3e:	d10b      	bne.n	8015e58 <_free_r+0x78>
 8015e40:	6824      	ldr	r4, [r4, #0]
 8015e42:	4421      	add	r1, r4
 8015e44:	1854      	adds	r4, r2, r1
 8015e46:	42a3      	cmp	r3, r4
 8015e48:	6011      	str	r1, [r2, #0]
 8015e4a:	d1dd      	bne.n	8015e08 <_free_r+0x28>
 8015e4c:	681c      	ldr	r4, [r3, #0]
 8015e4e:	685b      	ldr	r3, [r3, #4]
 8015e50:	6053      	str	r3, [r2, #4]
 8015e52:	4421      	add	r1, r4
 8015e54:	6011      	str	r1, [r2, #0]
 8015e56:	e7d7      	b.n	8015e08 <_free_r+0x28>
 8015e58:	d902      	bls.n	8015e60 <_free_r+0x80>
 8015e5a:	230c      	movs	r3, #12
 8015e5c:	6003      	str	r3, [r0, #0]
 8015e5e:	e7d3      	b.n	8015e08 <_free_r+0x28>
 8015e60:	6825      	ldr	r5, [r4, #0]
 8015e62:	1961      	adds	r1, r4, r5
 8015e64:	428b      	cmp	r3, r1
 8015e66:	bf04      	itt	eq
 8015e68:	6819      	ldreq	r1, [r3, #0]
 8015e6a:	685b      	ldreq	r3, [r3, #4]
 8015e6c:	6063      	str	r3, [r4, #4]
 8015e6e:	bf04      	itt	eq
 8015e70:	1949      	addeq	r1, r1, r5
 8015e72:	6021      	streq	r1, [r4, #0]
 8015e74:	6054      	str	r4, [r2, #4]
 8015e76:	e7c7      	b.n	8015e08 <_free_r+0x28>
 8015e78:	b003      	add	sp, #12
 8015e7a:	bd30      	pop	{r4, r5, pc}
 8015e7c:	24000324 	.word	0x24000324

08015e80 <_malloc_r>:
 8015e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e82:	1ccd      	adds	r5, r1, #3
 8015e84:	f025 0503 	bic.w	r5, r5, #3
 8015e88:	3508      	adds	r5, #8
 8015e8a:	2d0c      	cmp	r5, #12
 8015e8c:	bf38      	it	cc
 8015e8e:	250c      	movcc	r5, #12
 8015e90:	2d00      	cmp	r5, #0
 8015e92:	4606      	mov	r6, r0
 8015e94:	db01      	blt.n	8015e9a <_malloc_r+0x1a>
 8015e96:	42a9      	cmp	r1, r5
 8015e98:	d903      	bls.n	8015ea2 <_malloc_r+0x22>
 8015e9a:	230c      	movs	r3, #12
 8015e9c:	6033      	str	r3, [r6, #0]
 8015e9e:	2000      	movs	r0, #0
 8015ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ea2:	f000 f899 	bl	8015fd8 <__malloc_lock>
 8015ea6:	4921      	ldr	r1, [pc, #132]	; (8015f2c <_malloc_r+0xac>)
 8015ea8:	680a      	ldr	r2, [r1, #0]
 8015eaa:	4614      	mov	r4, r2
 8015eac:	b99c      	cbnz	r4, 8015ed6 <_malloc_r+0x56>
 8015eae:	4f20      	ldr	r7, [pc, #128]	; (8015f30 <_malloc_r+0xb0>)
 8015eb0:	683b      	ldr	r3, [r7, #0]
 8015eb2:	b923      	cbnz	r3, 8015ebe <_malloc_r+0x3e>
 8015eb4:	4621      	mov	r1, r4
 8015eb6:	4630      	mov	r0, r6
 8015eb8:	f000 f83c 	bl	8015f34 <_sbrk_r>
 8015ebc:	6038      	str	r0, [r7, #0]
 8015ebe:	4629      	mov	r1, r5
 8015ec0:	4630      	mov	r0, r6
 8015ec2:	f000 f837 	bl	8015f34 <_sbrk_r>
 8015ec6:	1c43      	adds	r3, r0, #1
 8015ec8:	d123      	bne.n	8015f12 <_malloc_r+0x92>
 8015eca:	230c      	movs	r3, #12
 8015ecc:	6033      	str	r3, [r6, #0]
 8015ece:	4630      	mov	r0, r6
 8015ed0:	f000 f888 	bl	8015fe4 <__malloc_unlock>
 8015ed4:	e7e3      	b.n	8015e9e <_malloc_r+0x1e>
 8015ed6:	6823      	ldr	r3, [r4, #0]
 8015ed8:	1b5b      	subs	r3, r3, r5
 8015eda:	d417      	bmi.n	8015f0c <_malloc_r+0x8c>
 8015edc:	2b0b      	cmp	r3, #11
 8015ede:	d903      	bls.n	8015ee8 <_malloc_r+0x68>
 8015ee0:	6023      	str	r3, [r4, #0]
 8015ee2:	441c      	add	r4, r3
 8015ee4:	6025      	str	r5, [r4, #0]
 8015ee6:	e004      	b.n	8015ef2 <_malloc_r+0x72>
 8015ee8:	6863      	ldr	r3, [r4, #4]
 8015eea:	42a2      	cmp	r2, r4
 8015eec:	bf0c      	ite	eq
 8015eee:	600b      	streq	r3, [r1, #0]
 8015ef0:	6053      	strne	r3, [r2, #4]
 8015ef2:	4630      	mov	r0, r6
 8015ef4:	f000 f876 	bl	8015fe4 <__malloc_unlock>
 8015ef8:	f104 000b 	add.w	r0, r4, #11
 8015efc:	1d23      	adds	r3, r4, #4
 8015efe:	f020 0007 	bic.w	r0, r0, #7
 8015f02:	1ac2      	subs	r2, r0, r3
 8015f04:	d0cc      	beq.n	8015ea0 <_malloc_r+0x20>
 8015f06:	1a1b      	subs	r3, r3, r0
 8015f08:	50a3      	str	r3, [r4, r2]
 8015f0a:	e7c9      	b.n	8015ea0 <_malloc_r+0x20>
 8015f0c:	4622      	mov	r2, r4
 8015f0e:	6864      	ldr	r4, [r4, #4]
 8015f10:	e7cc      	b.n	8015eac <_malloc_r+0x2c>
 8015f12:	1cc4      	adds	r4, r0, #3
 8015f14:	f024 0403 	bic.w	r4, r4, #3
 8015f18:	42a0      	cmp	r0, r4
 8015f1a:	d0e3      	beq.n	8015ee4 <_malloc_r+0x64>
 8015f1c:	1a21      	subs	r1, r4, r0
 8015f1e:	4630      	mov	r0, r6
 8015f20:	f000 f808 	bl	8015f34 <_sbrk_r>
 8015f24:	3001      	adds	r0, #1
 8015f26:	d1dd      	bne.n	8015ee4 <_malloc_r+0x64>
 8015f28:	e7cf      	b.n	8015eca <_malloc_r+0x4a>
 8015f2a:	bf00      	nop
 8015f2c:	24000324 	.word	0x24000324
 8015f30:	24000328 	.word	0x24000328

08015f34 <_sbrk_r>:
 8015f34:	b538      	push	{r3, r4, r5, lr}
 8015f36:	4d06      	ldr	r5, [pc, #24]	; (8015f50 <_sbrk_r+0x1c>)
 8015f38:	2300      	movs	r3, #0
 8015f3a:	4604      	mov	r4, r0
 8015f3c:	4608      	mov	r0, r1
 8015f3e:	602b      	str	r3, [r5, #0]
 8015f40:	f7f2 fd8e 	bl	8008a60 <_sbrk>
 8015f44:	1c43      	adds	r3, r0, #1
 8015f46:	d102      	bne.n	8015f4e <_sbrk_r+0x1a>
 8015f48:	682b      	ldr	r3, [r5, #0]
 8015f4a:	b103      	cbz	r3, 8015f4e <_sbrk_r+0x1a>
 8015f4c:	6023      	str	r3, [r4, #0]
 8015f4e:	bd38      	pop	{r3, r4, r5, pc}
 8015f50:	240013cc 	.word	0x240013cc

08015f54 <__assert_func>:
 8015f54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015f56:	4614      	mov	r4, r2
 8015f58:	461a      	mov	r2, r3
 8015f5a:	4b09      	ldr	r3, [pc, #36]	; (8015f80 <__assert_func+0x2c>)
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	4605      	mov	r5, r0
 8015f60:	68d8      	ldr	r0, [r3, #12]
 8015f62:	b14c      	cbz	r4, 8015f78 <__assert_func+0x24>
 8015f64:	4b07      	ldr	r3, [pc, #28]	; (8015f84 <__assert_func+0x30>)
 8015f66:	9100      	str	r1, [sp, #0]
 8015f68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015f6c:	4906      	ldr	r1, [pc, #24]	; (8015f88 <__assert_func+0x34>)
 8015f6e:	462b      	mov	r3, r5
 8015f70:	f000 f80e 	bl	8015f90 <fiprintf>
 8015f74:	f000 fa64 	bl	8016440 <abort>
 8015f78:	4b04      	ldr	r3, [pc, #16]	; (8015f8c <__assert_func+0x38>)
 8015f7a:	461c      	mov	r4, r3
 8015f7c:	e7f3      	b.n	8015f66 <__assert_func+0x12>
 8015f7e:	bf00      	nop
 8015f80:	24000060 	.word	0x24000060
 8015f84:	08018324 	.word	0x08018324
 8015f88:	08018331 	.word	0x08018331
 8015f8c:	0801835f 	.word	0x0801835f

08015f90 <fiprintf>:
 8015f90:	b40e      	push	{r1, r2, r3}
 8015f92:	b503      	push	{r0, r1, lr}
 8015f94:	4601      	mov	r1, r0
 8015f96:	ab03      	add	r3, sp, #12
 8015f98:	4805      	ldr	r0, [pc, #20]	; (8015fb0 <fiprintf+0x20>)
 8015f9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f9e:	6800      	ldr	r0, [r0, #0]
 8015fa0:	9301      	str	r3, [sp, #4]
 8015fa2:	f000 f84f 	bl	8016044 <_vfiprintf_r>
 8015fa6:	b002      	add	sp, #8
 8015fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8015fac:	b003      	add	sp, #12
 8015fae:	4770      	bx	lr
 8015fb0:	24000060 	.word	0x24000060

08015fb4 <__ascii_mbtowc>:
 8015fb4:	b082      	sub	sp, #8
 8015fb6:	b901      	cbnz	r1, 8015fba <__ascii_mbtowc+0x6>
 8015fb8:	a901      	add	r1, sp, #4
 8015fba:	b142      	cbz	r2, 8015fce <__ascii_mbtowc+0x1a>
 8015fbc:	b14b      	cbz	r3, 8015fd2 <__ascii_mbtowc+0x1e>
 8015fbe:	7813      	ldrb	r3, [r2, #0]
 8015fc0:	600b      	str	r3, [r1, #0]
 8015fc2:	7812      	ldrb	r2, [r2, #0]
 8015fc4:	1e10      	subs	r0, r2, #0
 8015fc6:	bf18      	it	ne
 8015fc8:	2001      	movne	r0, #1
 8015fca:	b002      	add	sp, #8
 8015fcc:	4770      	bx	lr
 8015fce:	4610      	mov	r0, r2
 8015fd0:	e7fb      	b.n	8015fca <__ascii_mbtowc+0x16>
 8015fd2:	f06f 0001 	mvn.w	r0, #1
 8015fd6:	e7f8      	b.n	8015fca <__ascii_mbtowc+0x16>

08015fd8 <__malloc_lock>:
 8015fd8:	4801      	ldr	r0, [pc, #4]	; (8015fe0 <__malloc_lock+0x8>)
 8015fda:	f000 bbf1 	b.w	80167c0 <__retarget_lock_acquire_recursive>
 8015fde:	bf00      	nop
 8015fe0:	240013d4 	.word	0x240013d4

08015fe4 <__malloc_unlock>:
 8015fe4:	4801      	ldr	r0, [pc, #4]	; (8015fec <__malloc_unlock+0x8>)
 8015fe6:	f000 bbec 	b.w	80167c2 <__retarget_lock_release_recursive>
 8015fea:	bf00      	nop
 8015fec:	240013d4 	.word	0x240013d4

08015ff0 <__sfputc_r>:
 8015ff0:	6893      	ldr	r3, [r2, #8]
 8015ff2:	3b01      	subs	r3, #1
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	b410      	push	{r4}
 8015ff8:	6093      	str	r3, [r2, #8]
 8015ffa:	da08      	bge.n	801600e <__sfputc_r+0x1e>
 8015ffc:	6994      	ldr	r4, [r2, #24]
 8015ffe:	42a3      	cmp	r3, r4
 8016000:	db01      	blt.n	8016006 <__sfputc_r+0x16>
 8016002:	290a      	cmp	r1, #10
 8016004:	d103      	bne.n	801600e <__sfputc_r+0x1e>
 8016006:	f85d 4b04 	ldr.w	r4, [sp], #4
 801600a:	f000 b94b 	b.w	80162a4 <__swbuf_r>
 801600e:	6813      	ldr	r3, [r2, #0]
 8016010:	1c58      	adds	r0, r3, #1
 8016012:	6010      	str	r0, [r2, #0]
 8016014:	7019      	strb	r1, [r3, #0]
 8016016:	4608      	mov	r0, r1
 8016018:	f85d 4b04 	ldr.w	r4, [sp], #4
 801601c:	4770      	bx	lr

0801601e <__sfputs_r>:
 801601e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016020:	4606      	mov	r6, r0
 8016022:	460f      	mov	r7, r1
 8016024:	4614      	mov	r4, r2
 8016026:	18d5      	adds	r5, r2, r3
 8016028:	42ac      	cmp	r4, r5
 801602a:	d101      	bne.n	8016030 <__sfputs_r+0x12>
 801602c:	2000      	movs	r0, #0
 801602e:	e007      	b.n	8016040 <__sfputs_r+0x22>
 8016030:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016034:	463a      	mov	r2, r7
 8016036:	4630      	mov	r0, r6
 8016038:	f7ff ffda 	bl	8015ff0 <__sfputc_r>
 801603c:	1c43      	adds	r3, r0, #1
 801603e:	d1f3      	bne.n	8016028 <__sfputs_r+0xa>
 8016040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016044 <_vfiprintf_r>:
 8016044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016048:	460d      	mov	r5, r1
 801604a:	b09d      	sub	sp, #116	; 0x74
 801604c:	4614      	mov	r4, r2
 801604e:	4698      	mov	r8, r3
 8016050:	4606      	mov	r6, r0
 8016052:	b118      	cbz	r0, 801605c <_vfiprintf_r+0x18>
 8016054:	6983      	ldr	r3, [r0, #24]
 8016056:	b90b      	cbnz	r3, 801605c <_vfiprintf_r+0x18>
 8016058:	f000 fb14 	bl	8016684 <__sinit>
 801605c:	4b89      	ldr	r3, [pc, #548]	; (8016284 <_vfiprintf_r+0x240>)
 801605e:	429d      	cmp	r5, r3
 8016060:	d11b      	bne.n	801609a <_vfiprintf_r+0x56>
 8016062:	6875      	ldr	r5, [r6, #4]
 8016064:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016066:	07d9      	lsls	r1, r3, #31
 8016068:	d405      	bmi.n	8016076 <_vfiprintf_r+0x32>
 801606a:	89ab      	ldrh	r3, [r5, #12]
 801606c:	059a      	lsls	r2, r3, #22
 801606e:	d402      	bmi.n	8016076 <_vfiprintf_r+0x32>
 8016070:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016072:	f000 fba5 	bl	80167c0 <__retarget_lock_acquire_recursive>
 8016076:	89ab      	ldrh	r3, [r5, #12]
 8016078:	071b      	lsls	r3, r3, #28
 801607a:	d501      	bpl.n	8016080 <_vfiprintf_r+0x3c>
 801607c:	692b      	ldr	r3, [r5, #16]
 801607e:	b9eb      	cbnz	r3, 80160bc <_vfiprintf_r+0x78>
 8016080:	4629      	mov	r1, r5
 8016082:	4630      	mov	r0, r6
 8016084:	f000 f96e 	bl	8016364 <__swsetup_r>
 8016088:	b1c0      	cbz	r0, 80160bc <_vfiprintf_r+0x78>
 801608a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801608c:	07dc      	lsls	r4, r3, #31
 801608e:	d50e      	bpl.n	80160ae <_vfiprintf_r+0x6a>
 8016090:	f04f 30ff 	mov.w	r0, #4294967295
 8016094:	b01d      	add	sp, #116	; 0x74
 8016096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801609a:	4b7b      	ldr	r3, [pc, #492]	; (8016288 <_vfiprintf_r+0x244>)
 801609c:	429d      	cmp	r5, r3
 801609e:	d101      	bne.n	80160a4 <_vfiprintf_r+0x60>
 80160a0:	68b5      	ldr	r5, [r6, #8]
 80160a2:	e7df      	b.n	8016064 <_vfiprintf_r+0x20>
 80160a4:	4b79      	ldr	r3, [pc, #484]	; (801628c <_vfiprintf_r+0x248>)
 80160a6:	429d      	cmp	r5, r3
 80160a8:	bf08      	it	eq
 80160aa:	68f5      	ldreq	r5, [r6, #12]
 80160ac:	e7da      	b.n	8016064 <_vfiprintf_r+0x20>
 80160ae:	89ab      	ldrh	r3, [r5, #12]
 80160b0:	0598      	lsls	r0, r3, #22
 80160b2:	d4ed      	bmi.n	8016090 <_vfiprintf_r+0x4c>
 80160b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80160b6:	f000 fb84 	bl	80167c2 <__retarget_lock_release_recursive>
 80160ba:	e7e9      	b.n	8016090 <_vfiprintf_r+0x4c>
 80160bc:	2300      	movs	r3, #0
 80160be:	9309      	str	r3, [sp, #36]	; 0x24
 80160c0:	2320      	movs	r3, #32
 80160c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80160c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80160ca:	2330      	movs	r3, #48	; 0x30
 80160cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016290 <_vfiprintf_r+0x24c>
 80160d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80160d4:	f04f 0901 	mov.w	r9, #1
 80160d8:	4623      	mov	r3, r4
 80160da:	469a      	mov	sl, r3
 80160dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80160e0:	b10a      	cbz	r2, 80160e6 <_vfiprintf_r+0xa2>
 80160e2:	2a25      	cmp	r2, #37	; 0x25
 80160e4:	d1f9      	bne.n	80160da <_vfiprintf_r+0x96>
 80160e6:	ebba 0b04 	subs.w	fp, sl, r4
 80160ea:	d00b      	beq.n	8016104 <_vfiprintf_r+0xc0>
 80160ec:	465b      	mov	r3, fp
 80160ee:	4622      	mov	r2, r4
 80160f0:	4629      	mov	r1, r5
 80160f2:	4630      	mov	r0, r6
 80160f4:	f7ff ff93 	bl	801601e <__sfputs_r>
 80160f8:	3001      	adds	r0, #1
 80160fa:	f000 80aa 	beq.w	8016252 <_vfiprintf_r+0x20e>
 80160fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016100:	445a      	add	r2, fp
 8016102:	9209      	str	r2, [sp, #36]	; 0x24
 8016104:	f89a 3000 	ldrb.w	r3, [sl]
 8016108:	2b00      	cmp	r3, #0
 801610a:	f000 80a2 	beq.w	8016252 <_vfiprintf_r+0x20e>
 801610e:	2300      	movs	r3, #0
 8016110:	f04f 32ff 	mov.w	r2, #4294967295
 8016114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016118:	f10a 0a01 	add.w	sl, sl, #1
 801611c:	9304      	str	r3, [sp, #16]
 801611e:	9307      	str	r3, [sp, #28]
 8016120:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016124:	931a      	str	r3, [sp, #104]	; 0x68
 8016126:	4654      	mov	r4, sl
 8016128:	2205      	movs	r2, #5
 801612a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801612e:	4858      	ldr	r0, [pc, #352]	; (8016290 <_vfiprintf_r+0x24c>)
 8016130:	f7ea f8f6 	bl	8000320 <memchr>
 8016134:	9a04      	ldr	r2, [sp, #16]
 8016136:	b9d8      	cbnz	r0, 8016170 <_vfiprintf_r+0x12c>
 8016138:	06d1      	lsls	r1, r2, #27
 801613a:	bf44      	itt	mi
 801613c:	2320      	movmi	r3, #32
 801613e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016142:	0713      	lsls	r3, r2, #28
 8016144:	bf44      	itt	mi
 8016146:	232b      	movmi	r3, #43	; 0x2b
 8016148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801614c:	f89a 3000 	ldrb.w	r3, [sl]
 8016150:	2b2a      	cmp	r3, #42	; 0x2a
 8016152:	d015      	beq.n	8016180 <_vfiprintf_r+0x13c>
 8016154:	9a07      	ldr	r2, [sp, #28]
 8016156:	4654      	mov	r4, sl
 8016158:	2000      	movs	r0, #0
 801615a:	f04f 0c0a 	mov.w	ip, #10
 801615e:	4621      	mov	r1, r4
 8016160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016164:	3b30      	subs	r3, #48	; 0x30
 8016166:	2b09      	cmp	r3, #9
 8016168:	d94e      	bls.n	8016208 <_vfiprintf_r+0x1c4>
 801616a:	b1b0      	cbz	r0, 801619a <_vfiprintf_r+0x156>
 801616c:	9207      	str	r2, [sp, #28]
 801616e:	e014      	b.n	801619a <_vfiprintf_r+0x156>
 8016170:	eba0 0308 	sub.w	r3, r0, r8
 8016174:	fa09 f303 	lsl.w	r3, r9, r3
 8016178:	4313      	orrs	r3, r2
 801617a:	9304      	str	r3, [sp, #16]
 801617c:	46a2      	mov	sl, r4
 801617e:	e7d2      	b.n	8016126 <_vfiprintf_r+0xe2>
 8016180:	9b03      	ldr	r3, [sp, #12]
 8016182:	1d19      	adds	r1, r3, #4
 8016184:	681b      	ldr	r3, [r3, #0]
 8016186:	9103      	str	r1, [sp, #12]
 8016188:	2b00      	cmp	r3, #0
 801618a:	bfbb      	ittet	lt
 801618c:	425b      	neglt	r3, r3
 801618e:	f042 0202 	orrlt.w	r2, r2, #2
 8016192:	9307      	strge	r3, [sp, #28]
 8016194:	9307      	strlt	r3, [sp, #28]
 8016196:	bfb8      	it	lt
 8016198:	9204      	strlt	r2, [sp, #16]
 801619a:	7823      	ldrb	r3, [r4, #0]
 801619c:	2b2e      	cmp	r3, #46	; 0x2e
 801619e:	d10c      	bne.n	80161ba <_vfiprintf_r+0x176>
 80161a0:	7863      	ldrb	r3, [r4, #1]
 80161a2:	2b2a      	cmp	r3, #42	; 0x2a
 80161a4:	d135      	bne.n	8016212 <_vfiprintf_r+0x1ce>
 80161a6:	9b03      	ldr	r3, [sp, #12]
 80161a8:	1d1a      	adds	r2, r3, #4
 80161aa:	681b      	ldr	r3, [r3, #0]
 80161ac:	9203      	str	r2, [sp, #12]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	bfb8      	it	lt
 80161b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80161b6:	3402      	adds	r4, #2
 80161b8:	9305      	str	r3, [sp, #20]
 80161ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80162a0 <_vfiprintf_r+0x25c>
 80161be:	7821      	ldrb	r1, [r4, #0]
 80161c0:	2203      	movs	r2, #3
 80161c2:	4650      	mov	r0, sl
 80161c4:	f7ea f8ac 	bl	8000320 <memchr>
 80161c8:	b140      	cbz	r0, 80161dc <_vfiprintf_r+0x198>
 80161ca:	2340      	movs	r3, #64	; 0x40
 80161cc:	eba0 000a 	sub.w	r0, r0, sl
 80161d0:	fa03 f000 	lsl.w	r0, r3, r0
 80161d4:	9b04      	ldr	r3, [sp, #16]
 80161d6:	4303      	orrs	r3, r0
 80161d8:	3401      	adds	r4, #1
 80161da:	9304      	str	r3, [sp, #16]
 80161dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161e0:	482c      	ldr	r0, [pc, #176]	; (8016294 <_vfiprintf_r+0x250>)
 80161e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80161e6:	2206      	movs	r2, #6
 80161e8:	f7ea f89a 	bl	8000320 <memchr>
 80161ec:	2800      	cmp	r0, #0
 80161ee:	d03f      	beq.n	8016270 <_vfiprintf_r+0x22c>
 80161f0:	4b29      	ldr	r3, [pc, #164]	; (8016298 <_vfiprintf_r+0x254>)
 80161f2:	bb1b      	cbnz	r3, 801623c <_vfiprintf_r+0x1f8>
 80161f4:	9b03      	ldr	r3, [sp, #12]
 80161f6:	3307      	adds	r3, #7
 80161f8:	f023 0307 	bic.w	r3, r3, #7
 80161fc:	3308      	adds	r3, #8
 80161fe:	9303      	str	r3, [sp, #12]
 8016200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016202:	443b      	add	r3, r7
 8016204:	9309      	str	r3, [sp, #36]	; 0x24
 8016206:	e767      	b.n	80160d8 <_vfiprintf_r+0x94>
 8016208:	fb0c 3202 	mla	r2, ip, r2, r3
 801620c:	460c      	mov	r4, r1
 801620e:	2001      	movs	r0, #1
 8016210:	e7a5      	b.n	801615e <_vfiprintf_r+0x11a>
 8016212:	2300      	movs	r3, #0
 8016214:	3401      	adds	r4, #1
 8016216:	9305      	str	r3, [sp, #20]
 8016218:	4619      	mov	r1, r3
 801621a:	f04f 0c0a 	mov.w	ip, #10
 801621e:	4620      	mov	r0, r4
 8016220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016224:	3a30      	subs	r2, #48	; 0x30
 8016226:	2a09      	cmp	r2, #9
 8016228:	d903      	bls.n	8016232 <_vfiprintf_r+0x1ee>
 801622a:	2b00      	cmp	r3, #0
 801622c:	d0c5      	beq.n	80161ba <_vfiprintf_r+0x176>
 801622e:	9105      	str	r1, [sp, #20]
 8016230:	e7c3      	b.n	80161ba <_vfiprintf_r+0x176>
 8016232:	fb0c 2101 	mla	r1, ip, r1, r2
 8016236:	4604      	mov	r4, r0
 8016238:	2301      	movs	r3, #1
 801623a:	e7f0      	b.n	801621e <_vfiprintf_r+0x1da>
 801623c:	ab03      	add	r3, sp, #12
 801623e:	9300      	str	r3, [sp, #0]
 8016240:	462a      	mov	r2, r5
 8016242:	4b16      	ldr	r3, [pc, #88]	; (801629c <_vfiprintf_r+0x258>)
 8016244:	a904      	add	r1, sp, #16
 8016246:	4630      	mov	r0, r6
 8016248:	f7fe f86e 	bl	8014328 <_printf_float>
 801624c:	4607      	mov	r7, r0
 801624e:	1c78      	adds	r0, r7, #1
 8016250:	d1d6      	bne.n	8016200 <_vfiprintf_r+0x1bc>
 8016252:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016254:	07d9      	lsls	r1, r3, #31
 8016256:	d405      	bmi.n	8016264 <_vfiprintf_r+0x220>
 8016258:	89ab      	ldrh	r3, [r5, #12]
 801625a:	059a      	lsls	r2, r3, #22
 801625c:	d402      	bmi.n	8016264 <_vfiprintf_r+0x220>
 801625e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016260:	f000 faaf 	bl	80167c2 <__retarget_lock_release_recursive>
 8016264:	89ab      	ldrh	r3, [r5, #12]
 8016266:	065b      	lsls	r3, r3, #25
 8016268:	f53f af12 	bmi.w	8016090 <_vfiprintf_r+0x4c>
 801626c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801626e:	e711      	b.n	8016094 <_vfiprintf_r+0x50>
 8016270:	ab03      	add	r3, sp, #12
 8016272:	9300      	str	r3, [sp, #0]
 8016274:	462a      	mov	r2, r5
 8016276:	4b09      	ldr	r3, [pc, #36]	; (801629c <_vfiprintf_r+0x258>)
 8016278:	a904      	add	r1, sp, #16
 801627a:	4630      	mov	r0, r6
 801627c:	f7fe fae0 	bl	8014840 <_printf_i>
 8016280:	e7e4      	b.n	801624c <_vfiprintf_r+0x208>
 8016282:	bf00      	nop
 8016284:	0801849c 	.word	0x0801849c
 8016288:	080184bc 	.word	0x080184bc
 801628c:	0801847c 	.word	0x0801847c
 8016290:	0801836a 	.word	0x0801836a
 8016294:	08018374 	.word	0x08018374
 8016298:	08014329 	.word	0x08014329
 801629c:	0801601f 	.word	0x0801601f
 80162a0:	08018370 	.word	0x08018370

080162a4 <__swbuf_r>:
 80162a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162a6:	460e      	mov	r6, r1
 80162a8:	4614      	mov	r4, r2
 80162aa:	4605      	mov	r5, r0
 80162ac:	b118      	cbz	r0, 80162b6 <__swbuf_r+0x12>
 80162ae:	6983      	ldr	r3, [r0, #24]
 80162b0:	b90b      	cbnz	r3, 80162b6 <__swbuf_r+0x12>
 80162b2:	f000 f9e7 	bl	8016684 <__sinit>
 80162b6:	4b21      	ldr	r3, [pc, #132]	; (801633c <__swbuf_r+0x98>)
 80162b8:	429c      	cmp	r4, r3
 80162ba:	d12b      	bne.n	8016314 <__swbuf_r+0x70>
 80162bc:	686c      	ldr	r4, [r5, #4]
 80162be:	69a3      	ldr	r3, [r4, #24]
 80162c0:	60a3      	str	r3, [r4, #8]
 80162c2:	89a3      	ldrh	r3, [r4, #12]
 80162c4:	071a      	lsls	r2, r3, #28
 80162c6:	d52f      	bpl.n	8016328 <__swbuf_r+0x84>
 80162c8:	6923      	ldr	r3, [r4, #16]
 80162ca:	b36b      	cbz	r3, 8016328 <__swbuf_r+0x84>
 80162cc:	6923      	ldr	r3, [r4, #16]
 80162ce:	6820      	ldr	r0, [r4, #0]
 80162d0:	1ac0      	subs	r0, r0, r3
 80162d2:	6963      	ldr	r3, [r4, #20]
 80162d4:	b2f6      	uxtb	r6, r6
 80162d6:	4283      	cmp	r3, r0
 80162d8:	4637      	mov	r7, r6
 80162da:	dc04      	bgt.n	80162e6 <__swbuf_r+0x42>
 80162dc:	4621      	mov	r1, r4
 80162de:	4628      	mov	r0, r5
 80162e0:	f000 f93c 	bl	801655c <_fflush_r>
 80162e4:	bb30      	cbnz	r0, 8016334 <__swbuf_r+0x90>
 80162e6:	68a3      	ldr	r3, [r4, #8]
 80162e8:	3b01      	subs	r3, #1
 80162ea:	60a3      	str	r3, [r4, #8]
 80162ec:	6823      	ldr	r3, [r4, #0]
 80162ee:	1c5a      	adds	r2, r3, #1
 80162f0:	6022      	str	r2, [r4, #0]
 80162f2:	701e      	strb	r6, [r3, #0]
 80162f4:	6963      	ldr	r3, [r4, #20]
 80162f6:	3001      	adds	r0, #1
 80162f8:	4283      	cmp	r3, r0
 80162fa:	d004      	beq.n	8016306 <__swbuf_r+0x62>
 80162fc:	89a3      	ldrh	r3, [r4, #12]
 80162fe:	07db      	lsls	r3, r3, #31
 8016300:	d506      	bpl.n	8016310 <__swbuf_r+0x6c>
 8016302:	2e0a      	cmp	r6, #10
 8016304:	d104      	bne.n	8016310 <__swbuf_r+0x6c>
 8016306:	4621      	mov	r1, r4
 8016308:	4628      	mov	r0, r5
 801630a:	f000 f927 	bl	801655c <_fflush_r>
 801630e:	b988      	cbnz	r0, 8016334 <__swbuf_r+0x90>
 8016310:	4638      	mov	r0, r7
 8016312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016314:	4b0a      	ldr	r3, [pc, #40]	; (8016340 <__swbuf_r+0x9c>)
 8016316:	429c      	cmp	r4, r3
 8016318:	d101      	bne.n	801631e <__swbuf_r+0x7a>
 801631a:	68ac      	ldr	r4, [r5, #8]
 801631c:	e7cf      	b.n	80162be <__swbuf_r+0x1a>
 801631e:	4b09      	ldr	r3, [pc, #36]	; (8016344 <__swbuf_r+0xa0>)
 8016320:	429c      	cmp	r4, r3
 8016322:	bf08      	it	eq
 8016324:	68ec      	ldreq	r4, [r5, #12]
 8016326:	e7ca      	b.n	80162be <__swbuf_r+0x1a>
 8016328:	4621      	mov	r1, r4
 801632a:	4628      	mov	r0, r5
 801632c:	f000 f81a 	bl	8016364 <__swsetup_r>
 8016330:	2800      	cmp	r0, #0
 8016332:	d0cb      	beq.n	80162cc <__swbuf_r+0x28>
 8016334:	f04f 37ff 	mov.w	r7, #4294967295
 8016338:	e7ea      	b.n	8016310 <__swbuf_r+0x6c>
 801633a:	bf00      	nop
 801633c:	0801849c 	.word	0x0801849c
 8016340:	080184bc 	.word	0x080184bc
 8016344:	0801847c 	.word	0x0801847c

08016348 <__ascii_wctomb>:
 8016348:	b149      	cbz	r1, 801635e <__ascii_wctomb+0x16>
 801634a:	2aff      	cmp	r2, #255	; 0xff
 801634c:	bf85      	ittet	hi
 801634e:	238a      	movhi	r3, #138	; 0x8a
 8016350:	6003      	strhi	r3, [r0, #0]
 8016352:	700a      	strbls	r2, [r1, #0]
 8016354:	f04f 30ff 	movhi.w	r0, #4294967295
 8016358:	bf98      	it	ls
 801635a:	2001      	movls	r0, #1
 801635c:	4770      	bx	lr
 801635e:	4608      	mov	r0, r1
 8016360:	4770      	bx	lr
	...

08016364 <__swsetup_r>:
 8016364:	4b32      	ldr	r3, [pc, #200]	; (8016430 <__swsetup_r+0xcc>)
 8016366:	b570      	push	{r4, r5, r6, lr}
 8016368:	681d      	ldr	r5, [r3, #0]
 801636a:	4606      	mov	r6, r0
 801636c:	460c      	mov	r4, r1
 801636e:	b125      	cbz	r5, 801637a <__swsetup_r+0x16>
 8016370:	69ab      	ldr	r3, [r5, #24]
 8016372:	b913      	cbnz	r3, 801637a <__swsetup_r+0x16>
 8016374:	4628      	mov	r0, r5
 8016376:	f000 f985 	bl	8016684 <__sinit>
 801637a:	4b2e      	ldr	r3, [pc, #184]	; (8016434 <__swsetup_r+0xd0>)
 801637c:	429c      	cmp	r4, r3
 801637e:	d10f      	bne.n	80163a0 <__swsetup_r+0x3c>
 8016380:	686c      	ldr	r4, [r5, #4]
 8016382:	89a3      	ldrh	r3, [r4, #12]
 8016384:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016388:	0719      	lsls	r1, r3, #28
 801638a:	d42c      	bmi.n	80163e6 <__swsetup_r+0x82>
 801638c:	06dd      	lsls	r5, r3, #27
 801638e:	d411      	bmi.n	80163b4 <__swsetup_r+0x50>
 8016390:	2309      	movs	r3, #9
 8016392:	6033      	str	r3, [r6, #0]
 8016394:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016398:	81a3      	strh	r3, [r4, #12]
 801639a:	f04f 30ff 	mov.w	r0, #4294967295
 801639e:	e03e      	b.n	801641e <__swsetup_r+0xba>
 80163a0:	4b25      	ldr	r3, [pc, #148]	; (8016438 <__swsetup_r+0xd4>)
 80163a2:	429c      	cmp	r4, r3
 80163a4:	d101      	bne.n	80163aa <__swsetup_r+0x46>
 80163a6:	68ac      	ldr	r4, [r5, #8]
 80163a8:	e7eb      	b.n	8016382 <__swsetup_r+0x1e>
 80163aa:	4b24      	ldr	r3, [pc, #144]	; (801643c <__swsetup_r+0xd8>)
 80163ac:	429c      	cmp	r4, r3
 80163ae:	bf08      	it	eq
 80163b0:	68ec      	ldreq	r4, [r5, #12]
 80163b2:	e7e6      	b.n	8016382 <__swsetup_r+0x1e>
 80163b4:	0758      	lsls	r0, r3, #29
 80163b6:	d512      	bpl.n	80163de <__swsetup_r+0x7a>
 80163b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80163ba:	b141      	cbz	r1, 80163ce <__swsetup_r+0x6a>
 80163bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80163c0:	4299      	cmp	r1, r3
 80163c2:	d002      	beq.n	80163ca <__swsetup_r+0x66>
 80163c4:	4630      	mov	r0, r6
 80163c6:	f7ff fd0b 	bl	8015de0 <_free_r>
 80163ca:	2300      	movs	r3, #0
 80163cc:	6363      	str	r3, [r4, #52]	; 0x34
 80163ce:	89a3      	ldrh	r3, [r4, #12]
 80163d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80163d4:	81a3      	strh	r3, [r4, #12]
 80163d6:	2300      	movs	r3, #0
 80163d8:	6063      	str	r3, [r4, #4]
 80163da:	6923      	ldr	r3, [r4, #16]
 80163dc:	6023      	str	r3, [r4, #0]
 80163de:	89a3      	ldrh	r3, [r4, #12]
 80163e0:	f043 0308 	orr.w	r3, r3, #8
 80163e4:	81a3      	strh	r3, [r4, #12]
 80163e6:	6923      	ldr	r3, [r4, #16]
 80163e8:	b94b      	cbnz	r3, 80163fe <__swsetup_r+0x9a>
 80163ea:	89a3      	ldrh	r3, [r4, #12]
 80163ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80163f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80163f4:	d003      	beq.n	80163fe <__swsetup_r+0x9a>
 80163f6:	4621      	mov	r1, r4
 80163f8:	4630      	mov	r0, r6
 80163fa:	f000 fa07 	bl	801680c <__smakebuf_r>
 80163fe:	89a0      	ldrh	r0, [r4, #12]
 8016400:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016404:	f010 0301 	ands.w	r3, r0, #1
 8016408:	d00a      	beq.n	8016420 <__swsetup_r+0xbc>
 801640a:	2300      	movs	r3, #0
 801640c:	60a3      	str	r3, [r4, #8]
 801640e:	6963      	ldr	r3, [r4, #20]
 8016410:	425b      	negs	r3, r3
 8016412:	61a3      	str	r3, [r4, #24]
 8016414:	6923      	ldr	r3, [r4, #16]
 8016416:	b943      	cbnz	r3, 801642a <__swsetup_r+0xc6>
 8016418:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801641c:	d1ba      	bne.n	8016394 <__swsetup_r+0x30>
 801641e:	bd70      	pop	{r4, r5, r6, pc}
 8016420:	0781      	lsls	r1, r0, #30
 8016422:	bf58      	it	pl
 8016424:	6963      	ldrpl	r3, [r4, #20]
 8016426:	60a3      	str	r3, [r4, #8]
 8016428:	e7f4      	b.n	8016414 <__swsetup_r+0xb0>
 801642a:	2000      	movs	r0, #0
 801642c:	e7f7      	b.n	801641e <__swsetup_r+0xba>
 801642e:	bf00      	nop
 8016430:	24000060 	.word	0x24000060
 8016434:	0801849c 	.word	0x0801849c
 8016438:	080184bc 	.word	0x080184bc
 801643c:	0801847c 	.word	0x0801847c

08016440 <abort>:
 8016440:	b508      	push	{r3, lr}
 8016442:	2006      	movs	r0, #6
 8016444:	f000 fa4a 	bl	80168dc <raise>
 8016448:	2001      	movs	r0, #1
 801644a:	f7f2 fa91 	bl	8008970 <_exit>
	...

08016450 <__sflush_r>:
 8016450:	898a      	ldrh	r2, [r1, #12]
 8016452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016456:	4605      	mov	r5, r0
 8016458:	0710      	lsls	r0, r2, #28
 801645a:	460c      	mov	r4, r1
 801645c:	d458      	bmi.n	8016510 <__sflush_r+0xc0>
 801645e:	684b      	ldr	r3, [r1, #4]
 8016460:	2b00      	cmp	r3, #0
 8016462:	dc05      	bgt.n	8016470 <__sflush_r+0x20>
 8016464:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016466:	2b00      	cmp	r3, #0
 8016468:	dc02      	bgt.n	8016470 <__sflush_r+0x20>
 801646a:	2000      	movs	r0, #0
 801646c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016470:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016472:	2e00      	cmp	r6, #0
 8016474:	d0f9      	beq.n	801646a <__sflush_r+0x1a>
 8016476:	2300      	movs	r3, #0
 8016478:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801647c:	682f      	ldr	r7, [r5, #0]
 801647e:	602b      	str	r3, [r5, #0]
 8016480:	d032      	beq.n	80164e8 <__sflush_r+0x98>
 8016482:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016484:	89a3      	ldrh	r3, [r4, #12]
 8016486:	075a      	lsls	r2, r3, #29
 8016488:	d505      	bpl.n	8016496 <__sflush_r+0x46>
 801648a:	6863      	ldr	r3, [r4, #4]
 801648c:	1ac0      	subs	r0, r0, r3
 801648e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016490:	b10b      	cbz	r3, 8016496 <__sflush_r+0x46>
 8016492:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016494:	1ac0      	subs	r0, r0, r3
 8016496:	2300      	movs	r3, #0
 8016498:	4602      	mov	r2, r0
 801649a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801649c:	6a21      	ldr	r1, [r4, #32]
 801649e:	4628      	mov	r0, r5
 80164a0:	47b0      	blx	r6
 80164a2:	1c43      	adds	r3, r0, #1
 80164a4:	89a3      	ldrh	r3, [r4, #12]
 80164a6:	d106      	bne.n	80164b6 <__sflush_r+0x66>
 80164a8:	6829      	ldr	r1, [r5, #0]
 80164aa:	291d      	cmp	r1, #29
 80164ac:	d82c      	bhi.n	8016508 <__sflush_r+0xb8>
 80164ae:	4a2a      	ldr	r2, [pc, #168]	; (8016558 <__sflush_r+0x108>)
 80164b0:	40ca      	lsrs	r2, r1
 80164b2:	07d6      	lsls	r6, r2, #31
 80164b4:	d528      	bpl.n	8016508 <__sflush_r+0xb8>
 80164b6:	2200      	movs	r2, #0
 80164b8:	6062      	str	r2, [r4, #4]
 80164ba:	04d9      	lsls	r1, r3, #19
 80164bc:	6922      	ldr	r2, [r4, #16]
 80164be:	6022      	str	r2, [r4, #0]
 80164c0:	d504      	bpl.n	80164cc <__sflush_r+0x7c>
 80164c2:	1c42      	adds	r2, r0, #1
 80164c4:	d101      	bne.n	80164ca <__sflush_r+0x7a>
 80164c6:	682b      	ldr	r3, [r5, #0]
 80164c8:	b903      	cbnz	r3, 80164cc <__sflush_r+0x7c>
 80164ca:	6560      	str	r0, [r4, #84]	; 0x54
 80164cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80164ce:	602f      	str	r7, [r5, #0]
 80164d0:	2900      	cmp	r1, #0
 80164d2:	d0ca      	beq.n	801646a <__sflush_r+0x1a>
 80164d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80164d8:	4299      	cmp	r1, r3
 80164da:	d002      	beq.n	80164e2 <__sflush_r+0x92>
 80164dc:	4628      	mov	r0, r5
 80164de:	f7ff fc7f 	bl	8015de0 <_free_r>
 80164e2:	2000      	movs	r0, #0
 80164e4:	6360      	str	r0, [r4, #52]	; 0x34
 80164e6:	e7c1      	b.n	801646c <__sflush_r+0x1c>
 80164e8:	6a21      	ldr	r1, [r4, #32]
 80164ea:	2301      	movs	r3, #1
 80164ec:	4628      	mov	r0, r5
 80164ee:	47b0      	blx	r6
 80164f0:	1c41      	adds	r1, r0, #1
 80164f2:	d1c7      	bne.n	8016484 <__sflush_r+0x34>
 80164f4:	682b      	ldr	r3, [r5, #0]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d0c4      	beq.n	8016484 <__sflush_r+0x34>
 80164fa:	2b1d      	cmp	r3, #29
 80164fc:	d001      	beq.n	8016502 <__sflush_r+0xb2>
 80164fe:	2b16      	cmp	r3, #22
 8016500:	d101      	bne.n	8016506 <__sflush_r+0xb6>
 8016502:	602f      	str	r7, [r5, #0]
 8016504:	e7b1      	b.n	801646a <__sflush_r+0x1a>
 8016506:	89a3      	ldrh	r3, [r4, #12]
 8016508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801650c:	81a3      	strh	r3, [r4, #12]
 801650e:	e7ad      	b.n	801646c <__sflush_r+0x1c>
 8016510:	690f      	ldr	r7, [r1, #16]
 8016512:	2f00      	cmp	r7, #0
 8016514:	d0a9      	beq.n	801646a <__sflush_r+0x1a>
 8016516:	0793      	lsls	r3, r2, #30
 8016518:	680e      	ldr	r6, [r1, #0]
 801651a:	bf08      	it	eq
 801651c:	694b      	ldreq	r3, [r1, #20]
 801651e:	600f      	str	r7, [r1, #0]
 8016520:	bf18      	it	ne
 8016522:	2300      	movne	r3, #0
 8016524:	eba6 0807 	sub.w	r8, r6, r7
 8016528:	608b      	str	r3, [r1, #8]
 801652a:	f1b8 0f00 	cmp.w	r8, #0
 801652e:	dd9c      	ble.n	801646a <__sflush_r+0x1a>
 8016530:	6a21      	ldr	r1, [r4, #32]
 8016532:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016534:	4643      	mov	r3, r8
 8016536:	463a      	mov	r2, r7
 8016538:	4628      	mov	r0, r5
 801653a:	47b0      	blx	r6
 801653c:	2800      	cmp	r0, #0
 801653e:	dc06      	bgt.n	801654e <__sflush_r+0xfe>
 8016540:	89a3      	ldrh	r3, [r4, #12]
 8016542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016546:	81a3      	strh	r3, [r4, #12]
 8016548:	f04f 30ff 	mov.w	r0, #4294967295
 801654c:	e78e      	b.n	801646c <__sflush_r+0x1c>
 801654e:	4407      	add	r7, r0
 8016550:	eba8 0800 	sub.w	r8, r8, r0
 8016554:	e7e9      	b.n	801652a <__sflush_r+0xda>
 8016556:	bf00      	nop
 8016558:	20400001 	.word	0x20400001

0801655c <_fflush_r>:
 801655c:	b538      	push	{r3, r4, r5, lr}
 801655e:	690b      	ldr	r3, [r1, #16]
 8016560:	4605      	mov	r5, r0
 8016562:	460c      	mov	r4, r1
 8016564:	b913      	cbnz	r3, 801656c <_fflush_r+0x10>
 8016566:	2500      	movs	r5, #0
 8016568:	4628      	mov	r0, r5
 801656a:	bd38      	pop	{r3, r4, r5, pc}
 801656c:	b118      	cbz	r0, 8016576 <_fflush_r+0x1a>
 801656e:	6983      	ldr	r3, [r0, #24]
 8016570:	b90b      	cbnz	r3, 8016576 <_fflush_r+0x1a>
 8016572:	f000 f887 	bl	8016684 <__sinit>
 8016576:	4b14      	ldr	r3, [pc, #80]	; (80165c8 <_fflush_r+0x6c>)
 8016578:	429c      	cmp	r4, r3
 801657a:	d11b      	bne.n	80165b4 <_fflush_r+0x58>
 801657c:	686c      	ldr	r4, [r5, #4]
 801657e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d0ef      	beq.n	8016566 <_fflush_r+0xa>
 8016586:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016588:	07d0      	lsls	r0, r2, #31
 801658a:	d404      	bmi.n	8016596 <_fflush_r+0x3a>
 801658c:	0599      	lsls	r1, r3, #22
 801658e:	d402      	bmi.n	8016596 <_fflush_r+0x3a>
 8016590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016592:	f000 f915 	bl	80167c0 <__retarget_lock_acquire_recursive>
 8016596:	4628      	mov	r0, r5
 8016598:	4621      	mov	r1, r4
 801659a:	f7ff ff59 	bl	8016450 <__sflush_r>
 801659e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80165a0:	07da      	lsls	r2, r3, #31
 80165a2:	4605      	mov	r5, r0
 80165a4:	d4e0      	bmi.n	8016568 <_fflush_r+0xc>
 80165a6:	89a3      	ldrh	r3, [r4, #12]
 80165a8:	059b      	lsls	r3, r3, #22
 80165aa:	d4dd      	bmi.n	8016568 <_fflush_r+0xc>
 80165ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80165ae:	f000 f908 	bl	80167c2 <__retarget_lock_release_recursive>
 80165b2:	e7d9      	b.n	8016568 <_fflush_r+0xc>
 80165b4:	4b05      	ldr	r3, [pc, #20]	; (80165cc <_fflush_r+0x70>)
 80165b6:	429c      	cmp	r4, r3
 80165b8:	d101      	bne.n	80165be <_fflush_r+0x62>
 80165ba:	68ac      	ldr	r4, [r5, #8]
 80165bc:	e7df      	b.n	801657e <_fflush_r+0x22>
 80165be:	4b04      	ldr	r3, [pc, #16]	; (80165d0 <_fflush_r+0x74>)
 80165c0:	429c      	cmp	r4, r3
 80165c2:	bf08      	it	eq
 80165c4:	68ec      	ldreq	r4, [r5, #12]
 80165c6:	e7da      	b.n	801657e <_fflush_r+0x22>
 80165c8:	0801849c 	.word	0x0801849c
 80165cc:	080184bc 	.word	0x080184bc
 80165d0:	0801847c 	.word	0x0801847c

080165d4 <std>:
 80165d4:	2300      	movs	r3, #0
 80165d6:	b510      	push	{r4, lr}
 80165d8:	4604      	mov	r4, r0
 80165da:	e9c0 3300 	strd	r3, r3, [r0]
 80165de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80165e2:	6083      	str	r3, [r0, #8]
 80165e4:	8181      	strh	r1, [r0, #12]
 80165e6:	6643      	str	r3, [r0, #100]	; 0x64
 80165e8:	81c2      	strh	r2, [r0, #14]
 80165ea:	6183      	str	r3, [r0, #24]
 80165ec:	4619      	mov	r1, r3
 80165ee:	2208      	movs	r2, #8
 80165f0:	305c      	adds	r0, #92	; 0x5c
 80165f2:	f7fd fdff 	bl	80141f4 <memset>
 80165f6:	4b05      	ldr	r3, [pc, #20]	; (801660c <std+0x38>)
 80165f8:	6263      	str	r3, [r4, #36]	; 0x24
 80165fa:	4b05      	ldr	r3, [pc, #20]	; (8016610 <std+0x3c>)
 80165fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80165fe:	4b05      	ldr	r3, [pc, #20]	; (8016614 <std+0x40>)
 8016600:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016602:	4b05      	ldr	r3, [pc, #20]	; (8016618 <std+0x44>)
 8016604:	6224      	str	r4, [r4, #32]
 8016606:	6323      	str	r3, [r4, #48]	; 0x30
 8016608:	bd10      	pop	{r4, pc}
 801660a:	bf00      	nop
 801660c:	08016915 	.word	0x08016915
 8016610:	08016937 	.word	0x08016937
 8016614:	0801696f 	.word	0x0801696f
 8016618:	08016993 	.word	0x08016993

0801661c <_cleanup_r>:
 801661c:	4901      	ldr	r1, [pc, #4]	; (8016624 <_cleanup_r+0x8>)
 801661e:	f000 b8af 	b.w	8016780 <_fwalk_reent>
 8016622:	bf00      	nop
 8016624:	0801655d 	.word	0x0801655d

08016628 <__sfmoreglue>:
 8016628:	b570      	push	{r4, r5, r6, lr}
 801662a:	1e4a      	subs	r2, r1, #1
 801662c:	2568      	movs	r5, #104	; 0x68
 801662e:	4355      	muls	r5, r2
 8016630:	460e      	mov	r6, r1
 8016632:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016636:	f7ff fc23 	bl	8015e80 <_malloc_r>
 801663a:	4604      	mov	r4, r0
 801663c:	b140      	cbz	r0, 8016650 <__sfmoreglue+0x28>
 801663e:	2100      	movs	r1, #0
 8016640:	e9c0 1600 	strd	r1, r6, [r0]
 8016644:	300c      	adds	r0, #12
 8016646:	60a0      	str	r0, [r4, #8]
 8016648:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801664c:	f7fd fdd2 	bl	80141f4 <memset>
 8016650:	4620      	mov	r0, r4
 8016652:	bd70      	pop	{r4, r5, r6, pc}

08016654 <__sfp_lock_acquire>:
 8016654:	4801      	ldr	r0, [pc, #4]	; (801665c <__sfp_lock_acquire+0x8>)
 8016656:	f000 b8b3 	b.w	80167c0 <__retarget_lock_acquire_recursive>
 801665a:	bf00      	nop
 801665c:	240013d8 	.word	0x240013d8

08016660 <__sfp_lock_release>:
 8016660:	4801      	ldr	r0, [pc, #4]	; (8016668 <__sfp_lock_release+0x8>)
 8016662:	f000 b8ae 	b.w	80167c2 <__retarget_lock_release_recursive>
 8016666:	bf00      	nop
 8016668:	240013d8 	.word	0x240013d8

0801666c <__sinit_lock_acquire>:
 801666c:	4801      	ldr	r0, [pc, #4]	; (8016674 <__sinit_lock_acquire+0x8>)
 801666e:	f000 b8a7 	b.w	80167c0 <__retarget_lock_acquire_recursive>
 8016672:	bf00      	nop
 8016674:	240013d3 	.word	0x240013d3

08016678 <__sinit_lock_release>:
 8016678:	4801      	ldr	r0, [pc, #4]	; (8016680 <__sinit_lock_release+0x8>)
 801667a:	f000 b8a2 	b.w	80167c2 <__retarget_lock_release_recursive>
 801667e:	bf00      	nop
 8016680:	240013d3 	.word	0x240013d3

08016684 <__sinit>:
 8016684:	b510      	push	{r4, lr}
 8016686:	4604      	mov	r4, r0
 8016688:	f7ff fff0 	bl	801666c <__sinit_lock_acquire>
 801668c:	69a3      	ldr	r3, [r4, #24]
 801668e:	b11b      	cbz	r3, 8016698 <__sinit+0x14>
 8016690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016694:	f7ff bff0 	b.w	8016678 <__sinit_lock_release>
 8016698:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801669c:	6523      	str	r3, [r4, #80]	; 0x50
 801669e:	4b13      	ldr	r3, [pc, #76]	; (80166ec <__sinit+0x68>)
 80166a0:	4a13      	ldr	r2, [pc, #76]	; (80166f0 <__sinit+0x6c>)
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80166a6:	42a3      	cmp	r3, r4
 80166a8:	bf04      	itt	eq
 80166aa:	2301      	moveq	r3, #1
 80166ac:	61a3      	streq	r3, [r4, #24]
 80166ae:	4620      	mov	r0, r4
 80166b0:	f000 f820 	bl	80166f4 <__sfp>
 80166b4:	6060      	str	r0, [r4, #4]
 80166b6:	4620      	mov	r0, r4
 80166b8:	f000 f81c 	bl	80166f4 <__sfp>
 80166bc:	60a0      	str	r0, [r4, #8]
 80166be:	4620      	mov	r0, r4
 80166c0:	f000 f818 	bl	80166f4 <__sfp>
 80166c4:	2200      	movs	r2, #0
 80166c6:	60e0      	str	r0, [r4, #12]
 80166c8:	2104      	movs	r1, #4
 80166ca:	6860      	ldr	r0, [r4, #4]
 80166cc:	f7ff ff82 	bl	80165d4 <std>
 80166d0:	68a0      	ldr	r0, [r4, #8]
 80166d2:	2201      	movs	r2, #1
 80166d4:	2109      	movs	r1, #9
 80166d6:	f7ff ff7d 	bl	80165d4 <std>
 80166da:	68e0      	ldr	r0, [r4, #12]
 80166dc:	2202      	movs	r2, #2
 80166de:	2112      	movs	r1, #18
 80166e0:	f7ff ff78 	bl	80165d4 <std>
 80166e4:	2301      	movs	r3, #1
 80166e6:	61a3      	str	r3, [r4, #24]
 80166e8:	e7d2      	b.n	8016690 <__sinit+0xc>
 80166ea:	bf00      	nop
 80166ec:	080180f8 	.word	0x080180f8
 80166f0:	0801661d 	.word	0x0801661d

080166f4 <__sfp>:
 80166f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166f6:	4607      	mov	r7, r0
 80166f8:	f7ff ffac 	bl	8016654 <__sfp_lock_acquire>
 80166fc:	4b1e      	ldr	r3, [pc, #120]	; (8016778 <__sfp+0x84>)
 80166fe:	681e      	ldr	r6, [r3, #0]
 8016700:	69b3      	ldr	r3, [r6, #24]
 8016702:	b913      	cbnz	r3, 801670a <__sfp+0x16>
 8016704:	4630      	mov	r0, r6
 8016706:	f7ff ffbd 	bl	8016684 <__sinit>
 801670a:	3648      	adds	r6, #72	; 0x48
 801670c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016710:	3b01      	subs	r3, #1
 8016712:	d503      	bpl.n	801671c <__sfp+0x28>
 8016714:	6833      	ldr	r3, [r6, #0]
 8016716:	b30b      	cbz	r3, 801675c <__sfp+0x68>
 8016718:	6836      	ldr	r6, [r6, #0]
 801671a:	e7f7      	b.n	801670c <__sfp+0x18>
 801671c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016720:	b9d5      	cbnz	r5, 8016758 <__sfp+0x64>
 8016722:	4b16      	ldr	r3, [pc, #88]	; (801677c <__sfp+0x88>)
 8016724:	60e3      	str	r3, [r4, #12]
 8016726:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801672a:	6665      	str	r5, [r4, #100]	; 0x64
 801672c:	f000 f847 	bl	80167be <__retarget_lock_init_recursive>
 8016730:	f7ff ff96 	bl	8016660 <__sfp_lock_release>
 8016734:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016738:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801673c:	6025      	str	r5, [r4, #0]
 801673e:	61a5      	str	r5, [r4, #24]
 8016740:	2208      	movs	r2, #8
 8016742:	4629      	mov	r1, r5
 8016744:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016748:	f7fd fd54 	bl	80141f4 <memset>
 801674c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016750:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016754:	4620      	mov	r0, r4
 8016756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016758:	3468      	adds	r4, #104	; 0x68
 801675a:	e7d9      	b.n	8016710 <__sfp+0x1c>
 801675c:	2104      	movs	r1, #4
 801675e:	4638      	mov	r0, r7
 8016760:	f7ff ff62 	bl	8016628 <__sfmoreglue>
 8016764:	4604      	mov	r4, r0
 8016766:	6030      	str	r0, [r6, #0]
 8016768:	2800      	cmp	r0, #0
 801676a:	d1d5      	bne.n	8016718 <__sfp+0x24>
 801676c:	f7ff ff78 	bl	8016660 <__sfp_lock_release>
 8016770:	230c      	movs	r3, #12
 8016772:	603b      	str	r3, [r7, #0]
 8016774:	e7ee      	b.n	8016754 <__sfp+0x60>
 8016776:	bf00      	nop
 8016778:	080180f8 	.word	0x080180f8
 801677c:	ffff0001 	.word	0xffff0001

08016780 <_fwalk_reent>:
 8016780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016784:	4606      	mov	r6, r0
 8016786:	4688      	mov	r8, r1
 8016788:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801678c:	2700      	movs	r7, #0
 801678e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016792:	f1b9 0901 	subs.w	r9, r9, #1
 8016796:	d505      	bpl.n	80167a4 <_fwalk_reent+0x24>
 8016798:	6824      	ldr	r4, [r4, #0]
 801679a:	2c00      	cmp	r4, #0
 801679c:	d1f7      	bne.n	801678e <_fwalk_reent+0xe>
 801679e:	4638      	mov	r0, r7
 80167a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167a4:	89ab      	ldrh	r3, [r5, #12]
 80167a6:	2b01      	cmp	r3, #1
 80167a8:	d907      	bls.n	80167ba <_fwalk_reent+0x3a>
 80167aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80167ae:	3301      	adds	r3, #1
 80167b0:	d003      	beq.n	80167ba <_fwalk_reent+0x3a>
 80167b2:	4629      	mov	r1, r5
 80167b4:	4630      	mov	r0, r6
 80167b6:	47c0      	blx	r8
 80167b8:	4307      	orrs	r7, r0
 80167ba:	3568      	adds	r5, #104	; 0x68
 80167bc:	e7e9      	b.n	8016792 <_fwalk_reent+0x12>

080167be <__retarget_lock_init_recursive>:
 80167be:	4770      	bx	lr

080167c0 <__retarget_lock_acquire_recursive>:
 80167c0:	4770      	bx	lr

080167c2 <__retarget_lock_release_recursive>:
 80167c2:	4770      	bx	lr

080167c4 <__swhatbuf_r>:
 80167c4:	b570      	push	{r4, r5, r6, lr}
 80167c6:	460e      	mov	r6, r1
 80167c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167cc:	2900      	cmp	r1, #0
 80167ce:	b096      	sub	sp, #88	; 0x58
 80167d0:	4614      	mov	r4, r2
 80167d2:	461d      	mov	r5, r3
 80167d4:	da07      	bge.n	80167e6 <__swhatbuf_r+0x22>
 80167d6:	2300      	movs	r3, #0
 80167d8:	602b      	str	r3, [r5, #0]
 80167da:	89b3      	ldrh	r3, [r6, #12]
 80167dc:	061a      	lsls	r2, r3, #24
 80167de:	d410      	bmi.n	8016802 <__swhatbuf_r+0x3e>
 80167e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80167e4:	e00e      	b.n	8016804 <__swhatbuf_r+0x40>
 80167e6:	466a      	mov	r2, sp
 80167e8:	f000 f8fa 	bl	80169e0 <_fstat_r>
 80167ec:	2800      	cmp	r0, #0
 80167ee:	dbf2      	blt.n	80167d6 <__swhatbuf_r+0x12>
 80167f0:	9a01      	ldr	r2, [sp, #4]
 80167f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80167f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80167fa:	425a      	negs	r2, r3
 80167fc:	415a      	adcs	r2, r3
 80167fe:	602a      	str	r2, [r5, #0]
 8016800:	e7ee      	b.n	80167e0 <__swhatbuf_r+0x1c>
 8016802:	2340      	movs	r3, #64	; 0x40
 8016804:	2000      	movs	r0, #0
 8016806:	6023      	str	r3, [r4, #0]
 8016808:	b016      	add	sp, #88	; 0x58
 801680a:	bd70      	pop	{r4, r5, r6, pc}

0801680c <__smakebuf_r>:
 801680c:	898b      	ldrh	r3, [r1, #12]
 801680e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016810:	079d      	lsls	r5, r3, #30
 8016812:	4606      	mov	r6, r0
 8016814:	460c      	mov	r4, r1
 8016816:	d507      	bpl.n	8016828 <__smakebuf_r+0x1c>
 8016818:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801681c:	6023      	str	r3, [r4, #0]
 801681e:	6123      	str	r3, [r4, #16]
 8016820:	2301      	movs	r3, #1
 8016822:	6163      	str	r3, [r4, #20]
 8016824:	b002      	add	sp, #8
 8016826:	bd70      	pop	{r4, r5, r6, pc}
 8016828:	ab01      	add	r3, sp, #4
 801682a:	466a      	mov	r2, sp
 801682c:	f7ff ffca 	bl	80167c4 <__swhatbuf_r>
 8016830:	9900      	ldr	r1, [sp, #0]
 8016832:	4605      	mov	r5, r0
 8016834:	4630      	mov	r0, r6
 8016836:	f7ff fb23 	bl	8015e80 <_malloc_r>
 801683a:	b948      	cbnz	r0, 8016850 <__smakebuf_r+0x44>
 801683c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016840:	059a      	lsls	r2, r3, #22
 8016842:	d4ef      	bmi.n	8016824 <__smakebuf_r+0x18>
 8016844:	f023 0303 	bic.w	r3, r3, #3
 8016848:	f043 0302 	orr.w	r3, r3, #2
 801684c:	81a3      	strh	r3, [r4, #12]
 801684e:	e7e3      	b.n	8016818 <__smakebuf_r+0xc>
 8016850:	4b0d      	ldr	r3, [pc, #52]	; (8016888 <__smakebuf_r+0x7c>)
 8016852:	62b3      	str	r3, [r6, #40]	; 0x28
 8016854:	89a3      	ldrh	r3, [r4, #12]
 8016856:	6020      	str	r0, [r4, #0]
 8016858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801685c:	81a3      	strh	r3, [r4, #12]
 801685e:	9b00      	ldr	r3, [sp, #0]
 8016860:	6163      	str	r3, [r4, #20]
 8016862:	9b01      	ldr	r3, [sp, #4]
 8016864:	6120      	str	r0, [r4, #16]
 8016866:	b15b      	cbz	r3, 8016880 <__smakebuf_r+0x74>
 8016868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801686c:	4630      	mov	r0, r6
 801686e:	f000 f8c9 	bl	8016a04 <_isatty_r>
 8016872:	b128      	cbz	r0, 8016880 <__smakebuf_r+0x74>
 8016874:	89a3      	ldrh	r3, [r4, #12]
 8016876:	f023 0303 	bic.w	r3, r3, #3
 801687a:	f043 0301 	orr.w	r3, r3, #1
 801687e:	81a3      	strh	r3, [r4, #12]
 8016880:	89a0      	ldrh	r0, [r4, #12]
 8016882:	4305      	orrs	r5, r0
 8016884:	81a5      	strh	r5, [r4, #12]
 8016886:	e7cd      	b.n	8016824 <__smakebuf_r+0x18>
 8016888:	0801661d 	.word	0x0801661d

0801688c <_raise_r>:
 801688c:	291f      	cmp	r1, #31
 801688e:	b538      	push	{r3, r4, r5, lr}
 8016890:	4604      	mov	r4, r0
 8016892:	460d      	mov	r5, r1
 8016894:	d904      	bls.n	80168a0 <_raise_r+0x14>
 8016896:	2316      	movs	r3, #22
 8016898:	6003      	str	r3, [r0, #0]
 801689a:	f04f 30ff 	mov.w	r0, #4294967295
 801689e:	bd38      	pop	{r3, r4, r5, pc}
 80168a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80168a2:	b112      	cbz	r2, 80168aa <_raise_r+0x1e>
 80168a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80168a8:	b94b      	cbnz	r3, 80168be <_raise_r+0x32>
 80168aa:	4620      	mov	r0, r4
 80168ac:	f000 f830 	bl	8016910 <_getpid_r>
 80168b0:	462a      	mov	r2, r5
 80168b2:	4601      	mov	r1, r0
 80168b4:	4620      	mov	r0, r4
 80168b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80168ba:	f000 b817 	b.w	80168ec <_kill_r>
 80168be:	2b01      	cmp	r3, #1
 80168c0:	d00a      	beq.n	80168d8 <_raise_r+0x4c>
 80168c2:	1c59      	adds	r1, r3, #1
 80168c4:	d103      	bne.n	80168ce <_raise_r+0x42>
 80168c6:	2316      	movs	r3, #22
 80168c8:	6003      	str	r3, [r0, #0]
 80168ca:	2001      	movs	r0, #1
 80168cc:	e7e7      	b.n	801689e <_raise_r+0x12>
 80168ce:	2400      	movs	r4, #0
 80168d0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80168d4:	4628      	mov	r0, r5
 80168d6:	4798      	blx	r3
 80168d8:	2000      	movs	r0, #0
 80168da:	e7e0      	b.n	801689e <_raise_r+0x12>

080168dc <raise>:
 80168dc:	4b02      	ldr	r3, [pc, #8]	; (80168e8 <raise+0xc>)
 80168de:	4601      	mov	r1, r0
 80168e0:	6818      	ldr	r0, [r3, #0]
 80168e2:	f7ff bfd3 	b.w	801688c <_raise_r>
 80168e6:	bf00      	nop
 80168e8:	24000060 	.word	0x24000060

080168ec <_kill_r>:
 80168ec:	b538      	push	{r3, r4, r5, lr}
 80168ee:	4d07      	ldr	r5, [pc, #28]	; (801690c <_kill_r+0x20>)
 80168f0:	2300      	movs	r3, #0
 80168f2:	4604      	mov	r4, r0
 80168f4:	4608      	mov	r0, r1
 80168f6:	4611      	mov	r1, r2
 80168f8:	602b      	str	r3, [r5, #0]
 80168fa:	f7f2 f829 	bl	8008950 <_kill>
 80168fe:	1c43      	adds	r3, r0, #1
 8016900:	d102      	bne.n	8016908 <_kill_r+0x1c>
 8016902:	682b      	ldr	r3, [r5, #0]
 8016904:	b103      	cbz	r3, 8016908 <_kill_r+0x1c>
 8016906:	6023      	str	r3, [r4, #0]
 8016908:	bd38      	pop	{r3, r4, r5, pc}
 801690a:	bf00      	nop
 801690c:	240013cc 	.word	0x240013cc

08016910 <_getpid_r>:
 8016910:	f7f2 b816 	b.w	8008940 <_getpid>

08016914 <__sread>:
 8016914:	b510      	push	{r4, lr}
 8016916:	460c      	mov	r4, r1
 8016918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801691c:	f000 f894 	bl	8016a48 <_read_r>
 8016920:	2800      	cmp	r0, #0
 8016922:	bfab      	itete	ge
 8016924:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016926:	89a3      	ldrhlt	r3, [r4, #12]
 8016928:	181b      	addge	r3, r3, r0
 801692a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801692e:	bfac      	ite	ge
 8016930:	6563      	strge	r3, [r4, #84]	; 0x54
 8016932:	81a3      	strhlt	r3, [r4, #12]
 8016934:	bd10      	pop	{r4, pc}

08016936 <__swrite>:
 8016936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801693a:	461f      	mov	r7, r3
 801693c:	898b      	ldrh	r3, [r1, #12]
 801693e:	05db      	lsls	r3, r3, #23
 8016940:	4605      	mov	r5, r0
 8016942:	460c      	mov	r4, r1
 8016944:	4616      	mov	r6, r2
 8016946:	d505      	bpl.n	8016954 <__swrite+0x1e>
 8016948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801694c:	2302      	movs	r3, #2
 801694e:	2200      	movs	r2, #0
 8016950:	f000 f868 	bl	8016a24 <_lseek_r>
 8016954:	89a3      	ldrh	r3, [r4, #12]
 8016956:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801695a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801695e:	81a3      	strh	r3, [r4, #12]
 8016960:	4632      	mov	r2, r6
 8016962:	463b      	mov	r3, r7
 8016964:	4628      	mov	r0, r5
 8016966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801696a:	f000 b817 	b.w	801699c <_write_r>

0801696e <__sseek>:
 801696e:	b510      	push	{r4, lr}
 8016970:	460c      	mov	r4, r1
 8016972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016976:	f000 f855 	bl	8016a24 <_lseek_r>
 801697a:	1c43      	adds	r3, r0, #1
 801697c:	89a3      	ldrh	r3, [r4, #12]
 801697e:	bf15      	itete	ne
 8016980:	6560      	strne	r0, [r4, #84]	; 0x54
 8016982:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016986:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801698a:	81a3      	strheq	r3, [r4, #12]
 801698c:	bf18      	it	ne
 801698e:	81a3      	strhne	r3, [r4, #12]
 8016990:	bd10      	pop	{r4, pc}

08016992 <__sclose>:
 8016992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016996:	f000 b813 	b.w	80169c0 <_close_r>
	...

0801699c <_write_r>:
 801699c:	b538      	push	{r3, r4, r5, lr}
 801699e:	4d07      	ldr	r5, [pc, #28]	; (80169bc <_write_r+0x20>)
 80169a0:	4604      	mov	r4, r0
 80169a2:	4608      	mov	r0, r1
 80169a4:	4611      	mov	r1, r2
 80169a6:	2200      	movs	r2, #0
 80169a8:	602a      	str	r2, [r5, #0]
 80169aa:	461a      	mov	r2, r3
 80169ac:	f7f2 f807 	bl	80089be <_write>
 80169b0:	1c43      	adds	r3, r0, #1
 80169b2:	d102      	bne.n	80169ba <_write_r+0x1e>
 80169b4:	682b      	ldr	r3, [r5, #0]
 80169b6:	b103      	cbz	r3, 80169ba <_write_r+0x1e>
 80169b8:	6023      	str	r3, [r4, #0]
 80169ba:	bd38      	pop	{r3, r4, r5, pc}
 80169bc:	240013cc 	.word	0x240013cc

080169c0 <_close_r>:
 80169c0:	b538      	push	{r3, r4, r5, lr}
 80169c2:	4d06      	ldr	r5, [pc, #24]	; (80169dc <_close_r+0x1c>)
 80169c4:	2300      	movs	r3, #0
 80169c6:	4604      	mov	r4, r0
 80169c8:	4608      	mov	r0, r1
 80169ca:	602b      	str	r3, [r5, #0]
 80169cc:	f7f2 f813 	bl	80089f6 <_close>
 80169d0:	1c43      	adds	r3, r0, #1
 80169d2:	d102      	bne.n	80169da <_close_r+0x1a>
 80169d4:	682b      	ldr	r3, [r5, #0]
 80169d6:	b103      	cbz	r3, 80169da <_close_r+0x1a>
 80169d8:	6023      	str	r3, [r4, #0]
 80169da:	bd38      	pop	{r3, r4, r5, pc}
 80169dc:	240013cc 	.word	0x240013cc

080169e0 <_fstat_r>:
 80169e0:	b538      	push	{r3, r4, r5, lr}
 80169e2:	4d07      	ldr	r5, [pc, #28]	; (8016a00 <_fstat_r+0x20>)
 80169e4:	2300      	movs	r3, #0
 80169e6:	4604      	mov	r4, r0
 80169e8:	4608      	mov	r0, r1
 80169ea:	4611      	mov	r1, r2
 80169ec:	602b      	str	r3, [r5, #0]
 80169ee:	f7f2 f80e 	bl	8008a0e <_fstat>
 80169f2:	1c43      	adds	r3, r0, #1
 80169f4:	d102      	bne.n	80169fc <_fstat_r+0x1c>
 80169f6:	682b      	ldr	r3, [r5, #0]
 80169f8:	b103      	cbz	r3, 80169fc <_fstat_r+0x1c>
 80169fa:	6023      	str	r3, [r4, #0]
 80169fc:	bd38      	pop	{r3, r4, r5, pc}
 80169fe:	bf00      	nop
 8016a00:	240013cc 	.word	0x240013cc

08016a04 <_isatty_r>:
 8016a04:	b538      	push	{r3, r4, r5, lr}
 8016a06:	4d06      	ldr	r5, [pc, #24]	; (8016a20 <_isatty_r+0x1c>)
 8016a08:	2300      	movs	r3, #0
 8016a0a:	4604      	mov	r4, r0
 8016a0c:	4608      	mov	r0, r1
 8016a0e:	602b      	str	r3, [r5, #0]
 8016a10:	f7f2 f80d 	bl	8008a2e <_isatty>
 8016a14:	1c43      	adds	r3, r0, #1
 8016a16:	d102      	bne.n	8016a1e <_isatty_r+0x1a>
 8016a18:	682b      	ldr	r3, [r5, #0]
 8016a1a:	b103      	cbz	r3, 8016a1e <_isatty_r+0x1a>
 8016a1c:	6023      	str	r3, [r4, #0]
 8016a1e:	bd38      	pop	{r3, r4, r5, pc}
 8016a20:	240013cc 	.word	0x240013cc

08016a24 <_lseek_r>:
 8016a24:	b538      	push	{r3, r4, r5, lr}
 8016a26:	4d07      	ldr	r5, [pc, #28]	; (8016a44 <_lseek_r+0x20>)
 8016a28:	4604      	mov	r4, r0
 8016a2a:	4608      	mov	r0, r1
 8016a2c:	4611      	mov	r1, r2
 8016a2e:	2200      	movs	r2, #0
 8016a30:	602a      	str	r2, [r5, #0]
 8016a32:	461a      	mov	r2, r3
 8016a34:	f7f2 f806 	bl	8008a44 <_lseek>
 8016a38:	1c43      	adds	r3, r0, #1
 8016a3a:	d102      	bne.n	8016a42 <_lseek_r+0x1e>
 8016a3c:	682b      	ldr	r3, [r5, #0]
 8016a3e:	b103      	cbz	r3, 8016a42 <_lseek_r+0x1e>
 8016a40:	6023      	str	r3, [r4, #0]
 8016a42:	bd38      	pop	{r3, r4, r5, pc}
 8016a44:	240013cc 	.word	0x240013cc

08016a48 <_read_r>:
 8016a48:	b538      	push	{r3, r4, r5, lr}
 8016a4a:	4d07      	ldr	r5, [pc, #28]	; (8016a68 <_read_r+0x20>)
 8016a4c:	4604      	mov	r4, r0
 8016a4e:	4608      	mov	r0, r1
 8016a50:	4611      	mov	r1, r2
 8016a52:	2200      	movs	r2, #0
 8016a54:	602a      	str	r2, [r5, #0]
 8016a56:	461a      	mov	r2, r3
 8016a58:	f7f1 ff94 	bl	8008984 <_read>
 8016a5c:	1c43      	adds	r3, r0, #1
 8016a5e:	d102      	bne.n	8016a66 <_read_r+0x1e>
 8016a60:	682b      	ldr	r3, [r5, #0]
 8016a62:	b103      	cbz	r3, 8016a66 <_read_r+0x1e>
 8016a64:	6023      	str	r3, [r4, #0]
 8016a66:	bd38      	pop	{r3, r4, r5, pc}
 8016a68:	240013cc 	.word	0x240013cc

08016a6c <checkint>:
 8016a6c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016a70:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8016a74:	429a      	cmp	r2, r3
 8016a76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016a78:	dd2b      	ble.n	8016ad2 <checkint+0x66>
 8016a7a:	f240 4333 	movw	r3, #1075	; 0x433
 8016a7e:	429a      	cmp	r2, r3
 8016a80:	dc25      	bgt.n	8016ace <checkint+0x62>
 8016a82:	1a9b      	subs	r3, r3, r2
 8016a84:	f1a3 0620 	sub.w	r6, r3, #32
 8016a88:	f04f 32ff 	mov.w	r2, #4294967295
 8016a8c:	fa02 f606 	lsl.w	r6, r2, r6
 8016a90:	fa02 f403 	lsl.w	r4, r2, r3
 8016a94:	f1c3 0520 	rsb	r5, r3, #32
 8016a98:	4334      	orrs	r4, r6
 8016a9a:	fa22 f505 	lsr.w	r5, r2, r5
 8016a9e:	432c      	orrs	r4, r5
 8016aa0:	409a      	lsls	r2, r3
 8016aa2:	ea20 0602 	bic.w	r6, r0, r2
 8016aa6:	ea21 0704 	bic.w	r7, r1, r4
 8016aaa:	ea56 0207 	orrs.w	r2, r6, r7
 8016aae:	f1a3 0420 	sub.w	r4, r3, #32
 8016ab2:	f1c3 0220 	rsb	r2, r3, #32
 8016ab6:	d10c      	bne.n	8016ad2 <checkint+0x66>
 8016ab8:	40d8      	lsrs	r0, r3
 8016aba:	fa01 f302 	lsl.w	r3, r1, r2
 8016abe:	4318      	orrs	r0, r3
 8016ac0:	40e1      	lsrs	r1, r4
 8016ac2:	4308      	orrs	r0, r1
 8016ac4:	f000 0301 	and.w	r3, r0, #1
 8016ac8:	f1c3 0002 	rsb	r0, r3, #2
 8016acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016ace:	2002      	movs	r0, #2
 8016ad0:	e7fc      	b.n	8016acc <checkint+0x60>
 8016ad2:	2000      	movs	r0, #0
 8016ad4:	e7fa      	b.n	8016acc <checkint+0x60>
	...

08016ad8 <pow>:
 8016ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016adc:	ed2d 8b0a 	vpush	{d8-d12}
 8016ae0:	b09b      	sub	sp, #108	; 0x6c
 8016ae2:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016ae6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8016aea:	ed8d 1b00 	vstr	d1, [sp]
 8016aee:	ea4f 5915 	mov.w	r9, r5, lsr #20
 8016af2:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016af6:	f109 30ff 	add.w	r0, r9, #4294967295
 8016afa:	f240 71fd 	movw	r1, #2045	; 0x7fd
 8016afe:	4288      	cmp	r0, r1
 8016b00:	46cc      	mov	ip, r9
 8016b02:	ea4f 5817 	mov.w	r8, r7, lsr #20
 8016b06:	d806      	bhi.n	8016b16 <pow+0x3e>
 8016b08:	f3c8 010a 	ubfx	r1, r8, #0, #11
 8016b0c:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 8016b10:	297f      	cmp	r1, #127	; 0x7f
 8016b12:	f240 81ab 	bls.w	8016e6c <pow+0x394>
 8016b16:	19b1      	adds	r1, r6, r6
 8016b18:	9104      	str	r1, [sp, #16]
 8016b1a:	eb47 0107 	adc.w	r1, r7, r7
 8016b1e:	9105      	str	r1, [sp, #20]
 8016b20:	9904      	ldr	r1, [sp, #16]
 8016b22:	f111 31ff 	adds.w	r1, r1, #4294967295
 8016b26:	460a      	mov	r2, r1
 8016b28:	9905      	ldr	r1, [sp, #20]
 8016b2a:	f141 31ff 	adc.w	r1, r1, #4294967295
 8016b2e:	460b      	mov	r3, r1
 8016b30:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 8016b34:	f06f 0001 	mvn.w	r0, #1
 8016b38:	4299      	cmp	r1, r3
 8016b3a:	bf08      	it	eq
 8016b3c:	4290      	cmpeq	r0, r2
 8016b3e:	d260      	bcs.n	8016c02 <pow+0x12a>
 8016b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016b44:	4313      	orrs	r3, r2
 8016b46:	d11a      	bne.n	8016b7e <pow+0xa6>
 8016b48:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 8016b4c:	1923      	adds	r3, r4, r4
 8016b4e:	930c      	str	r3, [sp, #48]	; 0x30
 8016b50:	eb42 0302 	adc.w	r3, r2, r2
 8016b54:	930d      	str	r3, [sp, #52]	; 0x34
 8016b56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016b5a:	4bcf      	ldr	r3, [pc, #828]	; (8016e98 <pow+0x3c0>)
 8016b5c:	2200      	movs	r2, #0
 8016b5e:	428b      	cmp	r3, r1
 8016b60:	bf08      	it	eq
 8016b62:	4282      	cmpeq	r2, r0
 8016b64:	f080 8265 	bcs.w	8017032 <pow+0x55a>
 8016b68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016b6c:	ed9d 6b00 	vldr	d6, [sp]
 8016b70:	ee37 0b06 	vadd.f64	d0, d7, d6
 8016b74:	b01b      	add	sp, #108	; 0x6c
 8016b76:	ecbd 8b0a 	vpop	{d8-d12}
 8016b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b7e:	49c7      	ldr	r1, [pc, #796]	; (8016e9c <pow+0x3c4>)
 8016b80:	2000      	movs	r0, #0
 8016b82:	428d      	cmp	r5, r1
 8016b84:	bf08      	it	eq
 8016b86:	4284      	cmpeq	r4, r0
 8016b88:	d10b      	bne.n	8016ba2 <pow+0xca>
 8016b8a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8016b8e:	19b3      	adds	r3, r6, r6
 8016b90:	930e      	str	r3, [sp, #56]	; 0x38
 8016b92:	eb42 0302 	adc.w	r3, r2, r2
 8016b96:	930f      	str	r3, [sp, #60]	; 0x3c
 8016b98:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8016b9c:	4bbe      	ldr	r3, [pc, #760]	; (8016e98 <pow+0x3c0>)
 8016b9e:	2200      	movs	r2, #0
 8016ba0:	e7dd      	b.n	8016b5e <pow+0x86>
 8016ba2:	1921      	adds	r1, r4, r4
 8016ba4:	9106      	str	r1, [sp, #24]
 8016ba6:	eb45 0105 	adc.w	r1, r5, r5
 8016baa:	9107      	str	r1, [sp, #28]
 8016bac:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8016bb0:	49bb      	ldr	r1, [pc, #748]	; (8016ea0 <pow+0x3c8>)
 8016bb2:	2000      	movs	r0, #0
 8016bb4:	42a1      	cmp	r1, r4
 8016bb6:	bf08      	it	eq
 8016bb8:	4298      	cmpeq	r0, r3
 8016bba:	d3d5      	bcc.n	8016b68 <pow+0x90>
 8016bbc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8016bc0:	428c      	cmp	r4, r1
 8016bc2:	bf08      	it	eq
 8016bc4:	4283      	cmpeq	r3, r0
 8016bc6:	d1cf      	bne.n	8016b68 <pow+0x90>
 8016bc8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8016bcc:	49b5      	ldr	r1, [pc, #724]	; (8016ea4 <pow+0x3cc>)
 8016bce:	2000      	movs	r0, #0
 8016bd0:	428c      	cmp	r4, r1
 8016bd2:	bf08      	it	eq
 8016bd4:	4283      	cmpeq	r3, r0
 8016bd6:	f000 822c 	beq.w	8017032 <pow+0x55a>
 8016bda:	49b3      	ldr	r1, [pc, #716]	; (8016ea8 <pow+0x3d0>)
 8016bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8016be0:	42a1      	cmp	r1, r4
 8016be2:	bf08      	it	eq
 8016be4:	4298      	cmpeq	r0, r3
 8016be6:	ea6f 0307 	mvn.w	r3, r7
 8016bea:	bf34      	ite	cc
 8016bec:	2201      	movcc	r2, #1
 8016bee:	2200      	movcs	r2, #0
 8016bf0:	0fdb      	lsrs	r3, r3, #31
 8016bf2:	429a      	cmp	r2, r3
 8016bf4:	f040 821a 	bne.w	801702c <pow+0x554>
 8016bf8:	ed9d 7b00 	vldr	d7, [sp]
 8016bfc:	ee27 0b07 	vmul.f64	d0, d7, d7
 8016c00:	e7b8      	b.n	8016b74 <pow+0x9c>
 8016c02:	1923      	adds	r3, r4, r4
 8016c04:	9308      	str	r3, [sp, #32]
 8016c06:	eb45 0305 	adc.w	r3, r5, r5
 8016c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8016c0c:	9b08      	ldr	r3, [sp, #32]
 8016c0e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8016c12:	9310      	str	r3, [sp, #64]	; 0x40
 8016c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c16:	f143 33ff 	adc.w	r3, r3, #4294967295
 8016c1a:	9311      	str	r3, [sp, #68]	; 0x44
 8016c1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016c20:	4299      	cmp	r1, r3
 8016c22:	bf08      	it	eq
 8016c24:	4290      	cmpeq	r0, r2
 8016c26:	d22d      	bcs.n	8016c84 <pow+0x1ac>
 8016c28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016c2c:	2c00      	cmp	r4, #0
 8016c2e:	f175 0300 	sbcs.w	r3, r5, #0
 8016c32:	ee27 0b07 	vmul.f64	d0, d7, d7
 8016c36:	da16      	bge.n	8016c66 <pow+0x18e>
 8016c38:	4630      	mov	r0, r6
 8016c3a:	4639      	mov	r1, r7
 8016c3c:	f7ff ff16 	bl	8016a6c <checkint>
 8016c40:	2801      	cmp	r0, #1
 8016c42:	d110      	bne.n	8016c66 <pow+0x18e>
 8016c44:	eeb1 0b40 	vneg.f64	d0, d0
 8016c48:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8016c4c:	4323      	orrs	r3, r4
 8016c4e:	d10c      	bne.n	8016c6a <pow+0x192>
 8016c50:	2e00      	cmp	r6, #0
 8016c52:	f177 0300 	sbcs.w	r3, r7, #0
 8016c56:	da8d      	bge.n	8016b74 <pow+0x9c>
 8016c58:	b01b      	add	sp, #108	; 0x6c
 8016c5a:	ecbd 8b0a 	vpop	{d8-d12}
 8016c5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c62:	f001 b899 	b.w	8017d98 <__math_divzero>
 8016c66:	2000      	movs	r0, #0
 8016c68:	e7ee      	b.n	8016c48 <pow+0x170>
 8016c6a:	2e00      	cmp	r6, #0
 8016c6c:	f177 0300 	sbcs.w	r3, r7, #0
 8016c70:	da80      	bge.n	8016b74 <pow+0x9c>
 8016c72:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8016c76:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8016c7a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8016c7e:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8016c82:	e777      	b.n	8016b74 <pow+0x9c>
 8016c84:	2c00      	cmp	r4, #0
 8016c86:	f175 0300 	sbcs.w	r3, r5, #0
 8016c8a:	da35      	bge.n	8016cf8 <pow+0x220>
 8016c8c:	4630      	mov	r0, r6
 8016c8e:	4639      	mov	r1, r7
 8016c90:	f7ff feec 	bl	8016a6c <checkint>
 8016c94:	b940      	cbnz	r0, 8016ca8 <pow+0x1d0>
 8016c96:	ed9d 0b02 	vldr	d0, [sp, #8]
 8016c9a:	b01b      	add	sp, #108	; 0x6c
 8016c9c:	ecbd 8b0a 	vpop	{d8-d12}
 8016ca0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ca4:	f001 b890 	b.w	8017dc8 <__math_invalid>
 8016ca8:	2801      	cmp	r0, #1
 8016caa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016cae:	bf14      	ite	ne
 8016cb0:	2000      	movne	r0, #0
 8016cb2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 8016cb6:	461d      	mov	r5, r3
 8016cb8:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 8016cbc:	f3c8 030a 	ubfx	r3, r8, #0, #11
 8016cc0:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 8016cc4:	2a7f      	cmp	r2, #127	; 0x7f
 8016cc6:	d933      	bls.n	8016d30 <pow+0x258>
 8016cc8:	4974      	ldr	r1, [pc, #464]	; (8016e9c <pow+0x3c4>)
 8016cca:	2000      	movs	r0, #0
 8016ccc:	428d      	cmp	r5, r1
 8016cce:	bf08      	it	eq
 8016cd0:	4284      	cmpeq	r4, r0
 8016cd2:	f000 81ae 	beq.w	8017032 <pow+0x55a>
 8016cd6:	f240 32bd 	movw	r2, #957	; 0x3bd
 8016cda:	4293      	cmp	r3, r2
 8016cdc:	d80e      	bhi.n	8016cfc <pow+0x224>
 8016cde:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8016ce2:	ed9d 7b00 	vldr	d7, [sp]
 8016ce6:	42a9      	cmp	r1, r5
 8016ce8:	bf08      	it	eq
 8016cea:	42a0      	cmpeq	r0, r4
 8016cec:	bf34      	ite	cc
 8016cee:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 8016cf2:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 8016cf6:	e73d      	b.n	8016b74 <pow+0x9c>
 8016cf8:	2000      	movs	r0, #0
 8016cfa:	e7df      	b.n	8016cbc <pow+0x1e4>
 8016cfc:	42a9      	cmp	r1, r5
 8016cfe:	bf08      	it	eq
 8016d00:	42a0      	cmpeq	r0, r4
 8016d02:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8016d06:	bf2c      	ite	cs
 8016d08:	2301      	movcs	r3, #1
 8016d0a:	2300      	movcc	r3, #0
 8016d0c:	4590      	cmp	r8, r2
 8016d0e:	bf8c      	ite	hi
 8016d10:	f04f 0800 	movhi.w	r8, #0
 8016d14:	f04f 0801 	movls.w	r8, #1
 8016d18:	4543      	cmp	r3, r8
 8016d1a:	f04f 0000 	mov.w	r0, #0
 8016d1e:	f000 80af 	beq.w	8016e80 <pow+0x3a8>
 8016d22:	b01b      	add	sp, #108	; 0x6c
 8016d24:	ecbd 8b0a 	vpop	{d8-d12}
 8016d28:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d2c:	f001 b82c 	b.w	8017d88 <__math_oflow>
 8016d30:	f1bc 0f00 	cmp.w	ip, #0
 8016d34:	d10e      	bne.n	8016d54 <pow+0x27c>
 8016d36:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8016e90 <pow+0x3b8>
 8016d3a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8016d3e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016d42:	ec57 6b17 	vmov	r6, r7, d7
 8016d46:	4b59      	ldr	r3, [pc, #356]	; (8016eac <pow+0x3d4>)
 8016d48:	2100      	movs	r1, #0
 8016d4a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8016d4e:	1874      	adds	r4, r6, r1
 8016d50:	eb42 0503 	adc.w	r5, r2, r3
 8016d54:	2300      	movs	r3, #0
 8016d56:	18e3      	adds	r3, r4, r3
 8016d58:	4b55      	ldr	r3, [pc, #340]	; (8016eb0 <pow+0x3d8>)
 8016d5a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8016d5e:	eb45 0303 	adc.w	r3, r5, r3
 8016d62:	1519      	asrs	r1, r3, #20
 8016d64:	ee03 1a10 	vmov	s6, r1
 8016d68:	0d1e      	lsrs	r6, r3, #20
 8016d6a:	2100      	movs	r1, #0
 8016d6c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 8016d70:	0536      	lsls	r6, r6, #20
 8016d72:	1a63      	subs	r3, r4, r1
 8016d74:	9312      	str	r3, [sp, #72]	; 0x48
 8016d76:	eb65 0306 	sbc.w	r3, r5, r6
 8016d7a:	9313      	str	r3, [sp, #76]	; 0x4c
 8016d7c:	4b4d      	ldr	r3, [pc, #308]	; (8016eb4 <pow+0x3dc>)
 8016d7e:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 8016d82:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8016d86:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 8016d8a:	eea5 6b07 	vfma.f64	d6, d5, d7
 8016d8e:	ed93 7b00 	vldr	d7, [r3]
 8016d92:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 8016d96:	ed93 4b02 	vldr	d4, [r3, #8]
 8016d9a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 8016d9e:	eea3 5b07 	vfma.f64	d5, d3, d7
 8016da2:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 8016da6:	ee36 9b05 	vadd.f64	d9, d6, d5
 8016daa:	ee35 5b49 	vsub.f64	d5, d5, d9
 8016dae:	eea3 7b04 	vfma.f64	d7, d3, d4
 8016db2:	ed93 4b04 	vldr	d4, [r3, #16]
 8016db6:	ee35 5b06 	vadd.f64	d5, d5, d6
 8016dba:	ee37 7b05 	vadd.f64	d7, d7, d5
 8016dbe:	ee26 4b04 	vmul.f64	d4, d6, d4
 8016dc2:	ed93 3b08 	vldr	d3, [r3, #32]
 8016dc6:	ee26 0b04 	vmul.f64	d0, d6, d4
 8016dca:	eeb0 8b40 	vmov.f64	d8, d0
 8016dce:	ee94 8b06 	vfnms.f64	d8, d4, d6
 8016dd2:	ed93 4b06 	vldr	d4, [r3, #24]
 8016dd6:	ee26 ab00 	vmul.f64	d10, d6, d0
 8016dda:	ee39 1b00 	vadd.f64	d1, d9, d0
 8016dde:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 8016de2:	eea6 4b03 	vfma.f64	d4, d6, d3
 8016de6:	ee39 9b41 	vsub.f64	d9, d9, d1
 8016dea:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 8016dee:	ee37 8b08 	vadd.f64	d8, d7, d8
 8016df2:	ee39 9b00 	vadd.f64	d9, d9, d0
 8016df6:	eea6 3b02 	vfma.f64	d3, d6, d2
 8016dfa:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 8016dfe:	ee38 9b09 	vadd.f64	d9, d8, d9
 8016e02:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 8016e06:	eea6 2b0c 	vfma.f64	d2, d6, d12
 8016e0a:	ed9d 6b00 	vldr	d6, [sp]
 8016e0e:	eea0 3b02 	vfma.f64	d3, d0, d2
 8016e12:	eea0 4b03 	vfma.f64	d4, d0, d3
 8016e16:	eeaa 9b04 	vfma.f64	d9, d10, d4
 8016e1a:	ee31 7b09 	vadd.f64	d7, d1, d9
 8016e1e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8016e22:	ed8d 6b02 	vstr	d6, [sp, #8]
 8016e26:	eeb0 3b46 	vmov.f64	d3, d6
 8016e2a:	ee31 1b47 	vsub.f64	d1, d1, d7
 8016e2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016e32:	ee31 9b09 	vadd.f64	d9, d1, d9
 8016e36:	ed9d 6b00 	vldr	d6, [sp]
 8016e3a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 8016e3e:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 8016e42:	193c      	adds	r4, r7, r4
 8016e44:	2c3e      	cmp	r4, #62	; 0x3e
 8016e46:	ee96 3b07 	vfnms.f64	d3, d6, d7
 8016e4a:	eea6 3b09 	vfma.f64	d3, d6, d9
 8016e4e:	d934      	bls.n	8016eba <pow+0x3e2>
 8016e50:	428c      	cmp	r4, r1
 8016e52:	da0d      	bge.n	8016e70 <pow+0x398>
 8016e54:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8016e58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016e5c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8016e60:	2800      	cmp	r0, #0
 8016e62:	f43f ae87 	beq.w	8016b74 <pow+0x9c>
 8016e66:	eeb1 0b40 	vneg.f64	d0, d0
 8016e6a:	e683      	b.n	8016b74 <pow+0x9c>
 8016e6c:	2000      	movs	r0, #0
 8016e6e:	e771      	b.n	8016d54 <pow+0x27c>
 8016e70:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 8016e74:	d920      	bls.n	8016eb8 <pow+0x3e0>
 8016e76:	2a00      	cmp	r2, #0
 8016e78:	f173 0300 	sbcs.w	r3, r3, #0
 8016e7c:	f6bf af51 	bge.w	8016d22 <pow+0x24a>
 8016e80:	b01b      	add	sp, #108	; 0x6c
 8016e82:	ecbd 8b0a 	vpop	{d8-d12}
 8016e86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e8a:	f000 bf75 	b.w	8017d78 <__math_uflow>
 8016e8e:	bf00      	nop
 8016e90:	00000000 	.word	0x00000000
 8016e94:	43300000 	.word	0x43300000
 8016e98:	fff00000 	.word	0xfff00000
 8016e9c:	3ff00000 	.word	0x3ff00000
 8016ea0:	ffe00000 	.word	0xffe00000
 8016ea4:	7fe00000 	.word	0x7fe00000
 8016ea8:	7fdfffff 	.word	0x7fdfffff
 8016eac:	fcc00000 	.word	0xfcc00000
 8016eb0:	c0196aab 	.word	0xc0196aab
 8016eb4:	080184e0 	.word	0x080184e0
 8016eb8:	460f      	mov	r7, r1
 8016eba:	4e65      	ldr	r6, [pc, #404]	; (8017050 <pow+0x578>)
 8016ebc:	ed9d 4b02 	vldr	d4, [sp, #8]
 8016ec0:	ed96 6b02 	vldr	d6, [r6, #8]
 8016ec4:	ed96 7b00 	vldr	d7, [r6]
 8016ec8:	eeb0 5b46 	vmov.f64	d5, d6
 8016ecc:	eea4 5b07 	vfma.f64	d5, d4, d7
 8016ed0:	ed8d 5b00 	vstr	d5, [sp]
 8016ed4:	ee35 6b46 	vsub.f64	d6, d5, d6
 8016ed8:	eeb0 5b44 	vmov.f64	d5, d4
 8016edc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016ee0:	ed96 7b04 	vldr	d7, [r6, #16]
 8016ee4:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 8016ee8:	eea6 5b07 	vfma.f64	d5, d6, d7
 8016eec:	eeb0 7b45 	vmov.f64	d7, d5
 8016ef0:	ed96 5b06 	vldr	d5, [r6, #24]
 8016ef4:	1849      	adds	r1, r1, r1
 8016ef6:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 8016efa:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 8016efe:	eea6 7b05 	vfma.f64	d7, d6, d5
 8016f02:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 8016f06:	ee33 3b07 	vadd.f64	d3, d3, d7
 8016f0a:	ee23 6b03 	vmul.f64	d6, d3, d3
 8016f0e:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 8016f12:	ed96 5b08 	vldr	d5, [r6, #32]
 8016f16:	ee33 7b07 	vadd.f64	d7, d3, d7
 8016f1a:	1814      	adds	r4, r2, r0
 8016f1c:	0365      	lsls	r5, r4, #13
 8016f1e:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 8016f22:	eea3 5b04 	vfma.f64	d5, d3, d4
 8016f26:	eea6 7b05 	vfma.f64	d7, d6, d5
 8016f2a:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 8016f2e:	ee26 6b06 	vmul.f64	d6, d6, d6
 8016f32:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 8016f36:	2000      	movs	r0, #0
 8016f38:	eb10 0a04 	adds.w	sl, r0, r4
 8016f3c:	eea3 5b04 	vfma.f64	d5, d3, d4
 8016f40:	eb45 0b0c 	adc.w	fp, r5, ip
 8016f44:	eea6 7b05 	vfma.f64	d7, d6, d5
 8016f48:	2f00      	cmp	r7, #0
 8016f4a:	d16a      	bne.n	8017022 <pow+0x54a>
 8016f4c:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 8016f50:	4639      	mov	r1, r7
 8016f52:	ea50 0301 	orrs.w	r3, r0, r1
 8016f56:	f04f 0300 	mov.w	r3, #0
 8016f5a:	d115      	bne.n	8016f88 <pow+0x4b0>
 8016f5c:	eb1a 0303 	adds.w	r3, sl, r3
 8016f60:	ee0b 3a10 	vmov	s22, r3
 8016f64:	4b3b      	ldr	r3, [pc, #236]	; (8017054 <pow+0x57c>)
 8016f66:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8017038 <pow+0x560>
 8016f6a:	eb4b 0303 	adc.w	r3, fp, r3
 8016f6e:	ee0b 3a90 	vmov	s23, r3
 8016f72:	eea7 bb0b 	vfma.f64	d11, d7, d11
 8016f76:	ee2b 0b00 	vmul.f64	d0, d11, d0
 8016f7a:	b01b      	add	sp, #108	; 0x6c
 8016f7c:	ecbd 8b0a 	vpop	{d8-d12}
 8016f80:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f84:	f000 bf38 	b.w	8017df8 <__math_check_oflow>
 8016f88:	eb1a 0303 	adds.w	r3, sl, r3
 8016f8c:	930a      	str	r3, [sp, #40]	; 0x28
 8016f8e:	4b32      	ldr	r3, [pc, #200]	; (8017058 <pow+0x580>)
 8016f90:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8016f94:	eb4b 0303 	adc.w	r3, fp, r3
 8016f98:	930b      	str	r3, [sp, #44]	; 0x2c
 8016f9a:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8016f9e:	ee27 6b05 	vmul.f64	d6, d7, d5
 8016fa2:	ee35 7b06 	vadd.f64	d7, d5, d6
 8016fa6:	eeb0 3bc7 	vabs.f64	d3, d7
 8016faa:	eeb4 3bc4 	vcmpe.f64	d3, d4
 8016fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fb2:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8017040 <pow+0x568>
 8016fb6:	d52b      	bpl.n	8017010 <pow+0x538>
 8016fb8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8016fbc:	ee35 5b47 	vsub.f64	d5, d5, d7
 8016fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016fc4:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 8016fc8:	ee35 6b06 	vadd.f64	d6, d5, d6
 8016fcc:	bf48      	it	mi
 8016fce:	eeb0 4b43 	vmovmi.f64	d4, d3
 8016fd2:	ee37 3b04 	vadd.f64	d3, d7, d4
 8016fd6:	ee34 5b43 	vsub.f64	d5, d4, d3
 8016fda:	ee35 7b07 	vadd.f64	d7, d5, d7
 8016fde:	ee37 7b06 	vadd.f64	d7, d7, d6
 8016fe2:	ee37 7b03 	vadd.f64	d7, d7, d3
 8016fe6:	ee37 7b44 	vsub.f64	d7, d7, d4
 8016fea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ff2:	d105      	bne.n	8017000 <pow+0x528>
 8016ff4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ff6:	463a      	mov	r2, r7
 8016ff8:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8016ffc:	ec43 2b17 	vmov	d7, r2, r3
 8017000:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 8017004:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 8017008:	ee26 6b00 	vmul.f64	d6, d6, d0
 801700c:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 8017010:	ee27 0b00 	vmul.f64	d0, d7, d0
 8017014:	b01b      	add	sp, #108	; 0x6c
 8017016:	ecbd 8b0a 	vpop	{d8-d12}
 801701a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801701e:	f000 bee2 	b.w	8017de6 <__math_check_uflow>
 8017022:	ec4b ab10 	vmov	d0, sl, fp
 8017026:	eea7 0b00 	vfma.f64	d0, d7, d0
 801702a:	e5a3      	b.n	8016b74 <pow+0x9c>
 801702c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 8017048 <pow+0x570>
 8017030:	e5a0      	b.n	8016b74 <pow+0x9c>
 8017032:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017036:	e59d      	b.n	8016b74 <pow+0x9c>
 8017038:	00000000 	.word	0x00000000
 801703c:	7f000000 	.word	0x7f000000
 8017040:	00000000 	.word	0x00000000
 8017044:	00100000 	.word	0x00100000
	...
 8017050:	080196b0 	.word	0x080196b0
 8017054:	c0f00000 	.word	0xc0f00000
 8017058:	3fe00000 	.word	0x3fe00000
 801705c:	00000000 	.word	0x00000000

08017060 <cos>:
 8017060:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017062:	eeb0 7b40 	vmov.f64	d7, d0
 8017066:	ee17 3a90 	vmov	r3, s15
 801706a:	4a1f      	ldr	r2, [pc, #124]	; (80170e8 <cos+0x88>)
 801706c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017070:	4293      	cmp	r3, r2
 8017072:	dc04      	bgt.n	801707e <cos+0x1e>
 8017074:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80170e0 <cos+0x80>
 8017078:	f000 fb1e 	bl	80176b8 <__kernel_cos>
 801707c:	e004      	b.n	8017088 <cos+0x28>
 801707e:	4a1b      	ldr	r2, [pc, #108]	; (80170ec <cos+0x8c>)
 8017080:	4293      	cmp	r3, r2
 8017082:	dd04      	ble.n	801708e <cos+0x2e>
 8017084:	ee30 0b40 	vsub.f64	d0, d0, d0
 8017088:	b005      	add	sp, #20
 801708a:	f85d fb04 	ldr.w	pc, [sp], #4
 801708e:	4668      	mov	r0, sp
 8017090:	f000 f9ce 	bl	8017430 <__ieee754_rem_pio2>
 8017094:	f000 0003 	and.w	r0, r0, #3
 8017098:	2801      	cmp	r0, #1
 801709a:	d007      	beq.n	80170ac <cos+0x4c>
 801709c:	2802      	cmp	r0, #2
 801709e:	d00e      	beq.n	80170be <cos+0x5e>
 80170a0:	b9a0      	cbnz	r0, 80170cc <cos+0x6c>
 80170a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80170a6:	ed9d 0b00 	vldr	d0, [sp]
 80170aa:	e7e5      	b.n	8017078 <cos+0x18>
 80170ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 80170b0:	ed9d 0b00 	vldr	d0, [sp]
 80170b4:	f000 fdec 	bl	8017c90 <__kernel_sin>
 80170b8:	eeb1 0b40 	vneg.f64	d0, d0
 80170bc:	e7e4      	b.n	8017088 <cos+0x28>
 80170be:	ed9d 1b02 	vldr	d1, [sp, #8]
 80170c2:	ed9d 0b00 	vldr	d0, [sp]
 80170c6:	f000 faf7 	bl	80176b8 <__kernel_cos>
 80170ca:	e7f5      	b.n	80170b8 <cos+0x58>
 80170cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80170d0:	ed9d 0b00 	vldr	d0, [sp]
 80170d4:	2001      	movs	r0, #1
 80170d6:	f000 fddb 	bl	8017c90 <__kernel_sin>
 80170da:	e7d5      	b.n	8017088 <cos+0x28>
 80170dc:	f3af 8000 	nop.w
	...
 80170e8:	3fe921fb 	.word	0x3fe921fb
 80170ec:	7fefffff 	.word	0x7fefffff

080170f0 <fabs>:
 80170f0:	ec51 0b10 	vmov	r0, r1, d0
 80170f4:	ee10 2a10 	vmov	r2, s0
 80170f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80170fc:	ec43 2b10 	vmov	d0, r2, r3
 8017100:	4770      	bx	lr
 8017102:	0000      	movs	r0, r0
 8017104:	0000      	movs	r0, r0
	...

08017108 <sin>:
 8017108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801710a:	eeb0 7b40 	vmov.f64	d7, d0
 801710e:	ee17 3a90 	vmov	r3, s15
 8017112:	4a1f      	ldr	r2, [pc, #124]	; (8017190 <sin+0x88>)
 8017114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017118:	4293      	cmp	r3, r2
 801711a:	dc05      	bgt.n	8017128 <sin+0x20>
 801711c:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8017188 <sin+0x80>
 8017120:	2000      	movs	r0, #0
 8017122:	f000 fdb5 	bl	8017c90 <__kernel_sin>
 8017126:	e004      	b.n	8017132 <sin+0x2a>
 8017128:	4a1a      	ldr	r2, [pc, #104]	; (8017194 <sin+0x8c>)
 801712a:	4293      	cmp	r3, r2
 801712c:	dd04      	ble.n	8017138 <sin+0x30>
 801712e:	ee30 0b40 	vsub.f64	d0, d0, d0
 8017132:	b005      	add	sp, #20
 8017134:	f85d fb04 	ldr.w	pc, [sp], #4
 8017138:	4668      	mov	r0, sp
 801713a:	f000 f979 	bl	8017430 <__ieee754_rem_pio2>
 801713e:	f000 0003 	and.w	r0, r0, #3
 8017142:	2801      	cmp	r0, #1
 8017144:	d008      	beq.n	8017158 <sin+0x50>
 8017146:	2802      	cmp	r0, #2
 8017148:	d00d      	beq.n	8017166 <sin+0x5e>
 801714a:	b9b0      	cbnz	r0, 801717a <sin+0x72>
 801714c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017150:	ed9d 0b00 	vldr	d0, [sp]
 8017154:	2001      	movs	r0, #1
 8017156:	e7e4      	b.n	8017122 <sin+0x1a>
 8017158:	ed9d 1b02 	vldr	d1, [sp, #8]
 801715c:	ed9d 0b00 	vldr	d0, [sp]
 8017160:	f000 faaa 	bl	80176b8 <__kernel_cos>
 8017164:	e7e5      	b.n	8017132 <sin+0x2a>
 8017166:	ed9d 1b02 	vldr	d1, [sp, #8]
 801716a:	ed9d 0b00 	vldr	d0, [sp]
 801716e:	2001      	movs	r0, #1
 8017170:	f000 fd8e 	bl	8017c90 <__kernel_sin>
 8017174:	eeb1 0b40 	vneg.f64	d0, d0
 8017178:	e7db      	b.n	8017132 <sin+0x2a>
 801717a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801717e:	ed9d 0b00 	vldr	d0, [sp]
 8017182:	f000 fa99 	bl	80176b8 <__kernel_cos>
 8017186:	e7f5      	b.n	8017174 <sin+0x6c>
	...
 8017190:	3fe921fb 	.word	0x3fe921fb
 8017194:	7fefffff 	.word	0x7fefffff

08017198 <asin>:
 8017198:	b508      	push	{r3, lr}
 801719a:	ed2d 8b04 	vpush	{d8-d9}
 801719e:	eeb0 8b40 	vmov.f64	d8, d0
 80171a2:	f000 f82d 	bl	8017200 <__ieee754_asin>
 80171a6:	4b13      	ldr	r3, [pc, #76]	; (80171f4 <asin+0x5c>)
 80171a8:	eeb0 9b40 	vmov.f64	d9, d0
 80171ac:	f993 3000 	ldrsb.w	r3, [r3]
 80171b0:	3301      	adds	r3, #1
 80171b2:	d01a      	beq.n	80171ea <asin+0x52>
 80171b4:	eeb4 8b48 	vcmp.f64	d8, d8
 80171b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171bc:	d615      	bvs.n	80171ea <asin+0x52>
 80171be:	eeb0 0b48 	vmov.f64	d0, d8
 80171c2:	f7ff ff95 	bl	80170f0 <fabs>
 80171c6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80171ca:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80171ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171d2:	dd0a      	ble.n	80171ea <asin+0x52>
 80171d4:	f7fc ffd6 	bl	8014184 <__errno>
 80171d8:	ecbd 8b04 	vpop	{d8-d9}
 80171dc:	2321      	movs	r3, #33	; 0x21
 80171de:	6003      	str	r3, [r0, #0]
 80171e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80171e4:	4804      	ldr	r0, [pc, #16]	; (80171f8 <asin+0x60>)
 80171e6:	f000 be8f 	b.w	8017f08 <nan>
 80171ea:	eeb0 0b49 	vmov.f64	d0, d9
 80171ee:	ecbd 8b04 	vpop	{d8-d9}
 80171f2:	bd08      	pop	{r3, pc}
 80171f4:	24000230 	.word	0x24000230
 80171f8:	0801835f 	.word	0x0801835f
 80171fc:	00000000 	.word	0x00000000

08017200 <__ieee754_asin>:
 8017200:	b530      	push	{r4, r5, lr}
 8017202:	ee10 5a90 	vmov	r5, s1
 8017206:	ed2d 8b06 	vpush	{d8-d10}
 801720a:	4b85      	ldr	r3, [pc, #532]	; (8017420 <__ieee754_asin+0x220>)
 801720c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8017210:	429c      	cmp	r4, r3
 8017212:	b083      	sub	sp, #12
 8017214:	dd1a      	ble.n	801724c <__ieee754_asin+0x4c>
 8017216:	ee10 3a10 	vmov	r3, s0
 801721a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801721e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8017222:	4323      	orrs	r3, r4
 8017224:	d10d      	bne.n	8017242 <__ieee754_asin+0x42>
 8017226:	ed9f 7b60 	vldr	d7, [pc, #384]	; 80173a8 <__ieee754_asin+0x1a8>
 801722a:	ed9f 6b61 	vldr	d6, [pc, #388]	; 80173b0 <__ieee754_asin+0x1b0>
 801722e:	ee20 7b07 	vmul.f64	d7, d0, d7
 8017232:	eea0 7b06 	vfma.f64	d7, d0, d6
 8017236:	eeb0 0b47 	vmov.f64	d0, d7
 801723a:	b003      	add	sp, #12
 801723c:	ecbd 8b06 	vpop	{d8-d10}
 8017240:	bd30      	pop	{r4, r5, pc}
 8017242:	ee30 7b40 	vsub.f64	d7, d0, d0
 8017246:	ee87 0b07 	vdiv.f64	d0, d7, d7
 801724a:	e7f6      	b.n	801723a <__ieee754_asin+0x3a>
 801724c:	4b75      	ldr	r3, [pc, #468]	; (8017424 <__ieee754_asin+0x224>)
 801724e:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 8017252:	429c      	cmp	r4, r3
 8017254:	dc0b      	bgt.n	801726e <__ieee754_asin+0x6e>
 8017256:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 801725a:	da56      	bge.n	801730a <__ieee754_asin+0x10a>
 801725c:	ed9f 7b56 	vldr	d7, [pc, #344]	; 80173b8 <__ieee754_asin+0x1b8>
 8017260:	ee30 7b07 	vadd.f64	d7, d0, d7
 8017264:	eeb4 7bc9 	vcmpe.f64	d7, d9
 8017268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801726c:	dce5      	bgt.n	801723a <__ieee754_asin+0x3a>
 801726e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8017272:	f7ff ff3d 	bl	80170f0 <fabs>
 8017276:	ed9f 7b52 	vldr	d7, [pc, #328]	; 80173c0 <__ieee754_asin+0x1c0>
 801727a:	ee39 0b40 	vsub.f64	d0, d9, d0
 801727e:	ee20 8b08 	vmul.f64	d8, d0, d8
 8017282:	ed9f 6b51 	vldr	d6, [pc, #324]	; 80173c8 <__ieee754_asin+0x1c8>
 8017286:	eeb0 0b48 	vmov.f64	d0, d8
 801728a:	eea8 6b07 	vfma.f64	d6, d8, d7
 801728e:	ed9f 7b50 	vldr	d7, [pc, #320]	; 80173d0 <__ieee754_asin+0x1d0>
 8017292:	eea6 7b08 	vfma.f64	d7, d6, d8
 8017296:	ed9f 6b50 	vldr	d6, [pc, #320]	; 80173d8 <__ieee754_asin+0x1d8>
 801729a:	ed9f ab51 	vldr	d10, [pc, #324]	; 80173e0 <__ieee754_asin+0x1e0>
 801729e:	eea7 6b08 	vfma.f64	d6, d7, d8
 80172a2:	ed9f 7b51 	vldr	d7, [pc, #324]	; 80173e8 <__ieee754_asin+0x1e8>
 80172a6:	eea6 7b08 	vfma.f64	d7, d6, d8
 80172aa:	ed9f 6b51 	vldr	d6, [pc, #324]	; 80173f0 <__ieee754_asin+0x1f0>
 80172ae:	eea7 ab08 	vfma.f64	d10, d7, d8
 80172b2:	ee2a ab08 	vmul.f64	d10, d10, d8
 80172b6:	ed9f 7b50 	vldr	d7, [pc, #320]	; 80173f8 <__ieee754_asin+0x1f8>
 80172ba:	eea8 7b06 	vfma.f64	d7, d8, d6
 80172be:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8017400 <__ieee754_asin+0x200>
 80172c2:	eea7 6b08 	vfma.f64	d6, d7, d8
 80172c6:	ed9f 7b50 	vldr	d7, [pc, #320]	; 8017408 <__ieee754_asin+0x208>
 80172ca:	eea6 7b08 	vfma.f64	d7, d6, d8
 80172ce:	eea7 9b08 	vfma.f64	d9, d7, d8
 80172d2:	f000 f9ed 	bl	80176b0 <__ieee754_sqrt>
 80172d6:	ee8a 4b09 	vdiv.f64	d4, d10, d9
 80172da:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80172de:	4b52      	ldr	r3, [pc, #328]	; (8017428 <__ieee754_asin+0x228>)
 80172e0:	429c      	cmp	r4, r3
 80172e2:	ed8d 0b00 	vstr	d0, [sp]
 80172e6:	dd3f      	ble.n	8017368 <__ieee754_asin+0x168>
 80172e8:	eeb0 7b40 	vmov.f64	d7, d0
 80172ec:	eea0 7b04 	vfma.f64	d7, d0, d4
 80172f0:	ed9f 0b47 	vldr	d0, [pc, #284]	; 8017410 <__ieee754_asin+0x210>
 80172f4:	eea7 0b05 	vfma.f64	d0, d7, d5
 80172f8:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80173b0 <__ieee754_asin+0x1b0>
 80172fc:	ee37 0b40 	vsub.f64	d0, d7, d0
 8017300:	2d00      	cmp	r5, #0
 8017302:	bfd8      	it	le
 8017304:	eeb1 0b40 	vnegle.f64	d0, d0
 8017308:	e797      	b.n	801723a <__ieee754_asin+0x3a>
 801730a:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 80173c0 <__ieee754_asin+0x1c0>
 801730e:	ee20 7b00 	vmul.f64	d7, d0, d0
 8017312:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 80173c8 <__ieee754_asin+0x1c8>
 8017316:	eea7 6b05 	vfma.f64	d6, d7, d5
 801731a:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 80173d0 <__ieee754_asin+0x1d0>
 801731e:	eea6 5b07 	vfma.f64	d5, d6, d7
 8017322:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 80173d8 <__ieee754_asin+0x1d8>
 8017326:	eea5 6b07 	vfma.f64	d6, d5, d7
 801732a:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 80173e8 <__ieee754_asin+0x1e8>
 801732e:	eea6 5b07 	vfma.f64	d5, d6, d7
 8017332:	ed9f 6b2b 	vldr	d6, [pc, #172]	; 80173e0 <__ieee754_asin+0x1e0>
 8017336:	ed9f 4b2e 	vldr	d4, [pc, #184]	; 80173f0 <__ieee754_asin+0x1f0>
 801733a:	eea5 6b07 	vfma.f64	d6, d5, d7
 801733e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8017342:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 80173f8 <__ieee754_asin+0x1f8>
 8017346:	eea7 5b04 	vfma.f64	d5, d7, d4
 801734a:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 8017400 <__ieee754_asin+0x200>
 801734e:	eea5 4b07 	vfma.f64	d4, d5, d7
 8017352:	ed9f 5b2d 	vldr	d5, [pc, #180]	; 8017408 <__ieee754_asin+0x208>
 8017356:	eea4 5b07 	vfma.f64	d5, d4, d7
 801735a:	eea5 9b07 	vfma.f64	d9, d5, d7
 801735e:	ee86 7b09 	vdiv.f64	d7, d6, d9
 8017362:	eea0 0b07 	vfma.f64	d0, d0, d7
 8017366:	e768      	b.n	801723a <__ieee754_asin+0x3a>
 8017368:	e9dd 2300 	ldrd	r2, r3, [sp]
 801736c:	ed9d 7b00 	vldr	d7, [sp]
 8017370:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 80173a8 <__ieee754_asin+0x1a8>
 8017374:	2200      	movs	r2, #0
 8017376:	ec43 2b16 	vmov	d6, r2, r3
 801737a:	eea6 8b46 	vfms.f64	d8, d6, d6
 801737e:	ee37 3b06 	vadd.f64	d3, d7, d6
 8017382:	ee88 7b03 	vdiv.f64	d7, d8, d3
 8017386:	eea7 0b45 	vfms.f64	d0, d7, d5
 801738a:	ed9d 7b00 	vldr	d7, [sp]
 801738e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8017392:	ee97 0b04 	vfnms.f64	d0, d7, d4
 8017396:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8017418 <__ieee754_asin+0x218>
 801739a:	eeb0 4b47 	vmov.f64	d4, d7
 801739e:	eea6 4b45 	vfms.f64	d4, d6, d5
 80173a2:	ee30 0b44 	vsub.f64	d0, d0, d4
 80173a6:	e7a9      	b.n	80172fc <__ieee754_asin+0xfc>
 80173a8:	33145c07 	.word	0x33145c07
 80173ac:	3c91a626 	.word	0x3c91a626
 80173b0:	54442d18 	.word	0x54442d18
 80173b4:	3ff921fb 	.word	0x3ff921fb
 80173b8:	8800759c 	.word	0x8800759c
 80173bc:	7e37e43c 	.word	0x7e37e43c
 80173c0:	0dfdf709 	.word	0x0dfdf709
 80173c4:	3f023de1 	.word	0x3f023de1
 80173c8:	7501b288 	.word	0x7501b288
 80173cc:	3f49efe0 	.word	0x3f49efe0
 80173d0:	b5688f3b 	.word	0xb5688f3b
 80173d4:	bfa48228 	.word	0xbfa48228
 80173d8:	0e884455 	.word	0x0e884455
 80173dc:	3fc9c155 	.word	0x3fc9c155
 80173e0:	55555555 	.word	0x55555555
 80173e4:	3fc55555 	.word	0x3fc55555
 80173e8:	03eb6f7d 	.word	0x03eb6f7d
 80173ec:	bfd4d612 	.word	0xbfd4d612
 80173f0:	b12e9282 	.word	0xb12e9282
 80173f4:	3fb3b8c5 	.word	0x3fb3b8c5
 80173f8:	1b8d0159 	.word	0x1b8d0159
 80173fc:	bfe6066c 	.word	0xbfe6066c
 8017400:	9c598ac8 	.word	0x9c598ac8
 8017404:	40002ae5 	.word	0x40002ae5
 8017408:	1c8a2d4b 	.word	0x1c8a2d4b
 801740c:	c0033a27 	.word	0xc0033a27
 8017410:	33145c07 	.word	0x33145c07
 8017414:	bc91a626 	.word	0xbc91a626
 8017418:	54442d18 	.word	0x54442d18
 801741c:	3fe921fb 	.word	0x3fe921fb
 8017420:	3fefffff 	.word	0x3fefffff
 8017424:	3fdfffff 	.word	0x3fdfffff
 8017428:	3fef3332 	.word	0x3fef3332
 801742c:	00000000 	.word	0x00000000

08017430 <__ieee754_rem_pio2>:
 8017430:	b570      	push	{r4, r5, r6, lr}
 8017432:	eeb0 7b40 	vmov.f64	d7, d0
 8017436:	ee17 5a90 	vmov	r5, s15
 801743a:	4b97      	ldr	r3, [pc, #604]	; (8017698 <__ieee754_rem_pio2+0x268>)
 801743c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8017440:	429e      	cmp	r6, r3
 8017442:	b088      	sub	sp, #32
 8017444:	4604      	mov	r4, r0
 8017446:	dc07      	bgt.n	8017458 <__ieee754_rem_pio2+0x28>
 8017448:	2200      	movs	r2, #0
 801744a:	2300      	movs	r3, #0
 801744c:	ed84 0b00 	vstr	d0, [r4]
 8017450:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8017454:	2000      	movs	r0, #0
 8017456:	e01b      	b.n	8017490 <__ieee754_rem_pio2+0x60>
 8017458:	4b90      	ldr	r3, [pc, #576]	; (801769c <__ieee754_rem_pio2+0x26c>)
 801745a:	429e      	cmp	r6, r3
 801745c:	dc3b      	bgt.n	80174d6 <__ieee754_rem_pio2+0xa6>
 801745e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8017462:	2d00      	cmp	r5, #0
 8017464:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8017658 <__ieee754_rem_pio2+0x228>
 8017468:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801746c:	dd19      	ble.n	80174a2 <__ieee754_rem_pio2+0x72>
 801746e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8017472:	429e      	cmp	r6, r3
 8017474:	d00e      	beq.n	8017494 <__ieee754_rem_pio2+0x64>
 8017476:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8017660 <__ieee754_rem_pio2+0x230>
 801747a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801747e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8017482:	ed84 5b00 	vstr	d5, [r4]
 8017486:	ee37 7b46 	vsub.f64	d7, d7, d6
 801748a:	ed84 7b02 	vstr	d7, [r4, #8]
 801748e:	2001      	movs	r0, #1
 8017490:	b008      	add	sp, #32
 8017492:	bd70      	pop	{r4, r5, r6, pc}
 8017494:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8017668 <__ieee754_rem_pio2+0x238>
 8017498:	ee37 7b46 	vsub.f64	d7, d7, d6
 801749c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8017670 <__ieee754_rem_pio2+0x240>
 80174a0:	e7eb      	b.n	801747a <__ieee754_rem_pio2+0x4a>
 80174a2:	429e      	cmp	r6, r3
 80174a4:	ee30 7b06 	vadd.f64	d7, d0, d6
 80174a8:	d00e      	beq.n	80174c8 <__ieee754_rem_pio2+0x98>
 80174aa:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8017660 <__ieee754_rem_pio2+0x230>
 80174ae:	ee37 5b06 	vadd.f64	d5, d7, d6
 80174b2:	ee37 7b45 	vsub.f64	d7, d7, d5
 80174b6:	ed84 5b00 	vstr	d5, [r4]
 80174ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 80174be:	f04f 30ff 	mov.w	r0, #4294967295
 80174c2:	ed84 7b02 	vstr	d7, [r4, #8]
 80174c6:	e7e3      	b.n	8017490 <__ieee754_rem_pio2+0x60>
 80174c8:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8017668 <__ieee754_rem_pio2+0x238>
 80174cc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80174d0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8017670 <__ieee754_rem_pio2+0x240>
 80174d4:	e7eb      	b.n	80174ae <__ieee754_rem_pio2+0x7e>
 80174d6:	4b72      	ldr	r3, [pc, #456]	; (80176a0 <__ieee754_rem_pio2+0x270>)
 80174d8:	429e      	cmp	r6, r3
 80174da:	dc6e      	bgt.n	80175ba <__ieee754_rem_pio2+0x18a>
 80174dc:	f7ff fe08 	bl	80170f0 <fabs>
 80174e0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80174e4:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8017678 <__ieee754_rem_pio2+0x248>
 80174e8:	eea0 7b06 	vfma.f64	d7, d0, d6
 80174ec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80174f0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80174f4:	ee17 0a90 	vmov	r0, s15
 80174f8:	eeb1 4b45 	vneg.f64	d4, d5
 80174fc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8017658 <__ieee754_rem_pio2+0x228>
 8017500:	eea5 0b47 	vfms.f64	d0, d5, d7
 8017504:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8017660 <__ieee754_rem_pio2+0x230>
 8017508:	281f      	cmp	r0, #31
 801750a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801750e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8017512:	dc08      	bgt.n	8017526 <__ieee754_rem_pio2+0xf6>
 8017514:	4b63      	ldr	r3, [pc, #396]	; (80176a4 <__ieee754_rem_pio2+0x274>)
 8017516:	1e42      	subs	r2, r0, #1
 8017518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801751c:	42b3      	cmp	r3, r6
 801751e:	d002      	beq.n	8017526 <__ieee754_rem_pio2+0xf6>
 8017520:	ed84 6b00 	vstr	d6, [r4]
 8017524:	e024      	b.n	8017570 <__ieee754_rem_pio2+0x140>
 8017526:	ee16 3a90 	vmov	r3, s13
 801752a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801752e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8017532:	2b10      	cmp	r3, #16
 8017534:	ea4f 5226 	mov.w	r2, r6, asr #20
 8017538:	ddf2      	ble.n	8017520 <__ieee754_rem_pio2+0xf0>
 801753a:	eeb0 6b40 	vmov.f64	d6, d0
 801753e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8017668 <__ieee754_rem_pio2+0x238>
 8017542:	eea4 6b03 	vfma.f64	d6, d4, d3
 8017546:	ee30 7b46 	vsub.f64	d7, d0, d6
 801754a:	eea4 7b03 	vfma.f64	d7, d4, d3
 801754e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8017670 <__ieee754_rem_pio2+0x240>
 8017552:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8017556:	ee36 3b47 	vsub.f64	d3, d6, d7
 801755a:	ee13 3a90 	vmov	r3, s7
 801755e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8017562:	1ad3      	subs	r3, r2, r3
 8017564:	2b31      	cmp	r3, #49	; 0x31
 8017566:	dc17      	bgt.n	8017598 <__ieee754_rem_pio2+0x168>
 8017568:	eeb0 0b46 	vmov.f64	d0, d6
 801756c:	ed84 3b00 	vstr	d3, [r4]
 8017570:	ed94 6b00 	vldr	d6, [r4]
 8017574:	2d00      	cmp	r5, #0
 8017576:	ee30 0b46 	vsub.f64	d0, d0, d6
 801757a:	ee30 7b47 	vsub.f64	d7, d0, d7
 801757e:	ed84 7b02 	vstr	d7, [r4, #8]
 8017582:	da85      	bge.n	8017490 <__ieee754_rem_pio2+0x60>
 8017584:	eeb1 6b46 	vneg.f64	d6, d6
 8017588:	ed84 6b00 	vstr	d6, [r4]
 801758c:	eeb1 7b47 	vneg.f64	d7, d7
 8017590:	4240      	negs	r0, r0
 8017592:	ed84 7b02 	vstr	d7, [r4, #8]
 8017596:	e77b      	b.n	8017490 <__ieee754_rem_pio2+0x60>
 8017598:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8017680 <__ieee754_rem_pio2+0x250>
 801759c:	eeb0 0b46 	vmov.f64	d0, d6
 80175a0:	eea4 0b03 	vfma.f64	d0, d4, d3
 80175a4:	ee36 7b40 	vsub.f64	d7, d6, d0
 80175a8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8017688 <__ieee754_rem_pio2+0x258>
 80175ac:	eea4 7b03 	vfma.f64	d7, d4, d3
 80175b0:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80175b4:	ee30 6b47 	vsub.f64	d6, d0, d7
 80175b8:	e7b2      	b.n	8017520 <__ieee754_rem_pio2+0xf0>
 80175ba:	4b3b      	ldr	r3, [pc, #236]	; (80176a8 <__ieee754_rem_pio2+0x278>)
 80175bc:	429e      	cmp	r6, r3
 80175be:	dd06      	ble.n	80175ce <__ieee754_rem_pio2+0x19e>
 80175c0:	ee30 7b40 	vsub.f64	d7, d0, d0
 80175c4:	ed80 7b02 	vstr	d7, [r0, #8]
 80175c8:	ed80 7b00 	vstr	d7, [r0]
 80175cc:	e742      	b.n	8017454 <__ieee754_rem_pio2+0x24>
 80175ce:	1532      	asrs	r2, r6, #20
 80175d0:	ee10 0a10 	vmov	r0, s0
 80175d4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80175d8:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80175dc:	ec41 0b17 	vmov	d7, r0, r1
 80175e0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80175e4:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8017690 <__ieee754_rem_pio2+0x260>
 80175e8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80175ec:	ee37 7b46 	vsub.f64	d7, d7, d6
 80175f0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80175f4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80175f8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80175fc:	a902      	add	r1, sp, #8
 80175fe:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8017602:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017606:	ed8d 6b04 	vstr	d6, [sp, #16]
 801760a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801760e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017612:	2603      	movs	r6, #3
 8017614:	4608      	mov	r0, r1
 8017616:	ed91 7b04 	vldr	d7, [r1, #16]
 801761a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801761e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017622:	4633      	mov	r3, r6
 8017624:	f1a1 0108 	sub.w	r1, r1, #8
 8017628:	f106 36ff 	add.w	r6, r6, #4294967295
 801762c:	d0f3      	beq.n	8017616 <__ieee754_rem_pio2+0x1e6>
 801762e:	491f      	ldr	r1, [pc, #124]	; (80176ac <__ieee754_rem_pio2+0x27c>)
 8017630:	9101      	str	r1, [sp, #4]
 8017632:	2102      	movs	r1, #2
 8017634:	9100      	str	r1, [sp, #0]
 8017636:	4621      	mov	r1, r4
 8017638:	f000 f8aa 	bl	8017790 <__kernel_rem_pio2>
 801763c:	2d00      	cmp	r5, #0
 801763e:	f6bf af27 	bge.w	8017490 <__ieee754_rem_pio2+0x60>
 8017642:	ed94 7b00 	vldr	d7, [r4]
 8017646:	eeb1 7b47 	vneg.f64	d7, d7
 801764a:	ed84 7b00 	vstr	d7, [r4]
 801764e:	ed94 7b02 	vldr	d7, [r4, #8]
 8017652:	e79b      	b.n	801758c <__ieee754_rem_pio2+0x15c>
 8017654:	f3af 8000 	nop.w
 8017658:	54400000 	.word	0x54400000
 801765c:	3ff921fb 	.word	0x3ff921fb
 8017660:	1a626331 	.word	0x1a626331
 8017664:	3dd0b461 	.word	0x3dd0b461
 8017668:	1a600000 	.word	0x1a600000
 801766c:	3dd0b461 	.word	0x3dd0b461
 8017670:	2e037073 	.word	0x2e037073
 8017674:	3ba3198a 	.word	0x3ba3198a
 8017678:	6dc9c883 	.word	0x6dc9c883
 801767c:	3fe45f30 	.word	0x3fe45f30
 8017680:	2e000000 	.word	0x2e000000
 8017684:	3ba3198a 	.word	0x3ba3198a
 8017688:	252049c1 	.word	0x252049c1
 801768c:	397b839a 	.word	0x397b839a
 8017690:	00000000 	.word	0x00000000
 8017694:	41700000 	.word	0x41700000
 8017698:	3fe921fb 	.word	0x3fe921fb
 801769c:	4002d97b 	.word	0x4002d97b
 80176a0:	413921fb 	.word	0x413921fb
 80176a4:	08019528 	.word	0x08019528
 80176a8:	7fefffff 	.word	0x7fefffff
 80176ac:	080195a8 	.word	0x080195a8

080176b0 <__ieee754_sqrt>:
 80176b0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80176b4:	4770      	bx	lr
	...

080176b8 <__kernel_cos>:
 80176b8:	ee10 1a90 	vmov	r1, s1
 80176bc:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80176c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80176c4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80176c8:	da05      	bge.n	80176d6 <__kernel_cos+0x1e>
 80176ca:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80176ce:	ee17 3a90 	vmov	r3, s15
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d03d      	beq.n	8017752 <__kernel_cos+0x9a>
 80176d6:	ee20 3b00 	vmul.f64	d3, d0, d0
 80176da:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8017758 <__kernel_cos+0xa0>
 80176de:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8017760 <__kernel_cos+0xa8>
 80176e2:	eea3 6b07 	vfma.f64	d6, d3, d7
 80176e6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8017768 <__kernel_cos+0xb0>
 80176ea:	eea6 7b03 	vfma.f64	d7, d6, d3
 80176ee:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8017770 <__kernel_cos+0xb8>
 80176f2:	eea7 6b03 	vfma.f64	d6, d7, d3
 80176f6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8017778 <__kernel_cos+0xc0>
 80176fa:	4b23      	ldr	r3, [pc, #140]	; (8017788 <__kernel_cos+0xd0>)
 80176fc:	eea6 7b03 	vfma.f64	d7, d6, d3
 8017700:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8017780 <__kernel_cos+0xc8>
 8017704:	4299      	cmp	r1, r3
 8017706:	eea7 6b03 	vfma.f64	d6, d7, d3
 801770a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801770e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8017712:	ee23 7b07 	vmul.f64	d7, d3, d7
 8017716:	ee21 6b40 	vnmul.f64	d6, d1, d0
 801771a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801771e:	dc04      	bgt.n	801772a <__kernel_cos+0x72>
 8017720:	ee37 6b46 	vsub.f64	d6, d7, d6
 8017724:	ee34 0b46 	vsub.f64	d0, d4, d6
 8017728:	4770      	bx	lr
 801772a:	4b18      	ldr	r3, [pc, #96]	; (801778c <__kernel_cos+0xd4>)
 801772c:	4299      	cmp	r1, r3
 801772e:	dc0d      	bgt.n	801774c <__kernel_cos+0x94>
 8017730:	2200      	movs	r2, #0
 8017732:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8017736:	ec43 2b15 	vmov	d5, r2, r3
 801773a:	ee34 0b45 	vsub.f64	d0, d4, d5
 801773e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8017742:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017746:	ee30 0b47 	vsub.f64	d0, d0, d7
 801774a:	4770      	bx	lr
 801774c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8017750:	e7f3      	b.n	801773a <__kernel_cos+0x82>
 8017752:	eeb0 0b44 	vmov.f64	d0, d4
 8017756:	4770      	bx	lr
 8017758:	be8838d4 	.word	0xbe8838d4
 801775c:	bda8fae9 	.word	0xbda8fae9
 8017760:	bdb4b1c4 	.word	0xbdb4b1c4
 8017764:	3e21ee9e 	.word	0x3e21ee9e
 8017768:	809c52ad 	.word	0x809c52ad
 801776c:	be927e4f 	.word	0xbe927e4f
 8017770:	19cb1590 	.word	0x19cb1590
 8017774:	3efa01a0 	.word	0x3efa01a0
 8017778:	16c15177 	.word	0x16c15177
 801777c:	bf56c16c 	.word	0xbf56c16c
 8017780:	5555554c 	.word	0x5555554c
 8017784:	3fa55555 	.word	0x3fa55555
 8017788:	3fd33332 	.word	0x3fd33332
 801778c:	3fe90000 	.word	0x3fe90000

08017790 <__kernel_rem_pio2>:
 8017790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017794:	ed2d 8b06 	vpush	{d8-d10}
 8017798:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 801779c:	469b      	mov	fp, r3
 801779e:	460f      	mov	r7, r1
 80177a0:	4bcf      	ldr	r3, [pc, #828]	; (8017ae0 <__kernel_rem_pio2+0x350>)
 80177a2:	99a0      	ldr	r1, [sp, #640]	; 0x280
 80177a4:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 80177a8:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 80177ac:	9000      	str	r0, [sp, #0]
 80177ae:	f112 0f14 	cmn.w	r2, #20
 80177b2:	bfa8      	it	ge
 80177b4:	2318      	movge	r3, #24
 80177b6:	f10b 31ff 	add.w	r1, fp, #4294967295
 80177ba:	bfb8      	it	lt
 80177bc:	2300      	movlt	r3, #0
 80177be:	f06f 0417 	mvn.w	r4, #23
 80177c2:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8017ac8 <__kernel_rem_pio2+0x338>
 80177c6:	bfa4      	itt	ge
 80177c8:	f1a2 0a03 	subge.w	sl, r2, #3
 80177cc:	fb9a f3f3 	sdivge	r3, sl, r3
 80177d0:	fb03 4404 	mla	r4, r3, r4, r4
 80177d4:	1a5d      	subs	r5, r3, r1
 80177d6:	4414      	add	r4, r2
 80177d8:	eb09 0601 	add.w	r6, r9, r1
 80177dc:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 80177e0:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 80177e4:	2200      	movs	r2, #0
 80177e6:	42b2      	cmp	r2, r6
 80177e8:	dd12      	ble.n	8017810 <__kernel_rem_pio2+0x80>
 80177ea:	aa18      	add	r2, sp, #96	; 0x60
 80177ec:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 80177f0:	460e      	mov	r6, r1
 80177f2:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 80177f6:	f1cb 0a01 	rsb	sl, fp, #1
 80177fa:	eb0a 0006 	add.w	r0, sl, r6
 80177fe:	4581      	cmp	r9, r0
 8017800:	db25      	blt.n	801784e <__kernel_rem_pio2+0xbe>
 8017802:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8017ac8 <__kernel_rem_pio2+0x338>
 8017806:	f8dd e000 	ldr.w	lr, [sp]
 801780a:	4615      	mov	r5, r2
 801780c:	2000      	movs	r0, #0
 801780e:	e015      	b.n	801783c <__kernel_rem_pio2+0xac>
 8017810:	42d5      	cmn	r5, r2
 8017812:	d409      	bmi.n	8017828 <__kernel_rem_pio2+0x98>
 8017814:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8017818:	ee07 0a90 	vmov	s15, r0
 801781c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017820:	eca8 7b02 	vstmia	r8!, {d7}
 8017824:	3201      	adds	r2, #1
 8017826:	e7de      	b.n	80177e6 <__kernel_rem_pio2+0x56>
 8017828:	eeb0 7b46 	vmov.f64	d7, d6
 801782c:	e7f8      	b.n	8017820 <__kernel_rem_pio2+0x90>
 801782e:	ecbe 5b02 	vldmia	lr!, {d5}
 8017832:	ed95 6b00 	vldr	d6, [r5]
 8017836:	3001      	adds	r0, #1
 8017838:	eea5 7b06 	vfma.f64	d7, d5, d6
 801783c:	4288      	cmp	r0, r1
 801783e:	f1a5 0508 	sub.w	r5, r5, #8
 8017842:	ddf4      	ble.n	801782e <__kernel_rem_pio2+0x9e>
 8017844:	eca8 7b02 	vstmia	r8!, {d7}
 8017848:	3208      	adds	r2, #8
 801784a:	3601      	adds	r6, #1
 801784c:	e7d5      	b.n	80177fa <__kernel_rem_pio2+0x6a>
 801784e:	aa04      	add	r2, sp, #16
 8017850:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8017ad0 <__kernel_rem_pio2+0x340>
 8017854:	ed9f aba0 	vldr	d10, [pc, #640]	; 8017ad8 <__kernel_rem_pio2+0x348>
 8017858:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 801785c:	9201      	str	r2, [sp, #4]
 801785e:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8017862:	464e      	mov	r6, r9
 8017864:	ab90      	add	r3, sp, #576	; 0x240
 8017866:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801786a:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 801786e:	ab04      	add	r3, sp, #16
 8017870:	4618      	mov	r0, r3
 8017872:	4632      	mov	r2, r6
 8017874:	2a00      	cmp	r2, #0
 8017876:	dc4e      	bgt.n	8017916 <__kernel_rem_pio2+0x186>
 8017878:	4620      	mov	r0, r4
 801787a:	e9cd 1302 	strd	r1, r3, [sp, #8]
 801787e:	f000 fb4b 	bl	8017f18 <scalbn>
 8017882:	eeb0 8b40 	vmov.f64	d8, d0
 8017886:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801788a:	ee28 0b00 	vmul.f64	d0, d8, d0
 801788e:	f000 fac7 	bl	8017e20 <floor>
 8017892:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8017896:	eea0 8b47 	vfms.f64	d8, d0, d7
 801789a:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801789e:	2c00      	cmp	r4, #0
 80178a0:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 80178a4:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 80178a8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80178ac:	ee17 8a90 	vmov	r8, s15
 80178b0:	dd46      	ble.n	8017940 <__kernel_rem_pio2+0x1b0>
 80178b2:	1e70      	subs	r0, r6, #1
 80178b4:	aa04      	add	r2, sp, #16
 80178b6:	f1c4 0c18 	rsb	ip, r4, #24
 80178ba:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 80178be:	fa45 f20c 	asr.w	r2, r5, ip
 80178c2:	4490      	add	r8, r2
 80178c4:	fa02 f20c 	lsl.w	r2, r2, ip
 80178c8:	1aad      	subs	r5, r5, r2
 80178ca:	aa04      	add	r2, sp, #16
 80178cc:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 80178d0:	f1c4 0217 	rsb	r2, r4, #23
 80178d4:	4115      	asrs	r5, r2
 80178d6:	2d00      	cmp	r5, #0
 80178d8:	dd41      	ble.n	801795e <__kernel_rem_pio2+0x1ce>
 80178da:	f04f 0c00 	mov.w	ip, #0
 80178de:	f108 0801 	add.w	r8, r8, #1
 80178e2:	4660      	mov	r0, ip
 80178e4:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80178e8:	4566      	cmp	r6, ip
 80178ea:	dc69      	bgt.n	80179c0 <__kernel_rem_pio2+0x230>
 80178ec:	2c00      	cmp	r4, #0
 80178ee:	dd03      	ble.n	80178f8 <__kernel_rem_pio2+0x168>
 80178f0:	2c01      	cmp	r4, #1
 80178f2:	d076      	beq.n	80179e2 <__kernel_rem_pio2+0x252>
 80178f4:	2c02      	cmp	r4, #2
 80178f6:	d07f      	beq.n	80179f8 <__kernel_rem_pio2+0x268>
 80178f8:	2d02      	cmp	r5, #2
 80178fa:	d130      	bne.n	801795e <__kernel_rem_pio2+0x1ce>
 80178fc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017900:	ee30 8b48 	vsub.f64	d8, d0, d8
 8017904:	b358      	cbz	r0, 801795e <__kernel_rem_pio2+0x1ce>
 8017906:	4620      	mov	r0, r4
 8017908:	9102      	str	r1, [sp, #8]
 801790a:	f000 fb05 	bl	8017f18 <scalbn>
 801790e:	9902      	ldr	r1, [sp, #8]
 8017910:	ee38 8b40 	vsub.f64	d8, d8, d0
 8017914:	e023      	b.n	801795e <__kernel_rem_pio2+0x1ce>
 8017916:	ee20 7b09 	vmul.f64	d7, d0, d9
 801791a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801791e:	3a01      	subs	r2, #1
 8017920:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8017924:	ad68      	add	r5, sp, #416	; 0x1a0
 8017926:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801792a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801792e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8017932:	eca0 0a01 	vstmia	r0!, {s0}
 8017936:	ed95 0b00 	vldr	d0, [r5]
 801793a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801793e:	e799      	b.n	8017874 <__kernel_rem_pio2+0xe4>
 8017940:	d105      	bne.n	801794e <__kernel_rem_pio2+0x1be>
 8017942:	1e72      	subs	r2, r6, #1
 8017944:	a804      	add	r0, sp, #16
 8017946:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 801794a:	15ed      	asrs	r5, r5, #23
 801794c:	e7c3      	b.n	80178d6 <__kernel_rem_pio2+0x146>
 801794e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8017952:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801795a:	da2f      	bge.n	80179bc <__kernel_rem_pio2+0x22c>
 801795c:	2500      	movs	r5, #0
 801795e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017966:	f040 8087 	bne.w	8017a78 <__kernel_rem_pio2+0x2e8>
 801796a:	1e73      	subs	r3, r6, #1
 801796c:	4618      	mov	r0, r3
 801796e:	f04f 0c00 	mov.w	ip, #0
 8017972:	4548      	cmp	r0, r9
 8017974:	da47      	bge.n	8017a06 <__kernel_rem_pio2+0x276>
 8017976:	f1bc 0f00 	cmp.w	ip, #0
 801797a:	d070      	beq.n	8017a5e <__kernel_rem_pio2+0x2ce>
 801797c:	aa04      	add	r2, sp, #16
 801797e:	3c18      	subs	r4, #24
 8017980:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8017984:	2a00      	cmp	r2, #0
 8017986:	d075      	beq.n	8017a74 <__kernel_rem_pio2+0x2e4>
 8017988:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801798c:	4620      	mov	r0, r4
 801798e:	9300      	str	r3, [sp, #0]
 8017990:	f000 fac2 	bl	8017f18 <scalbn>
 8017994:	9b00      	ldr	r3, [sp, #0]
 8017996:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8017ad0 <__kernel_rem_pio2+0x340>
 801799a:	461a      	mov	r2, r3
 801799c:	2a00      	cmp	r2, #0
 801799e:	f280 80ac 	bge.w	8017afa <__kernel_rem_pio2+0x36a>
 80179a2:	4619      	mov	r1, r3
 80179a4:	2000      	movs	r0, #0
 80179a6:	2900      	cmp	r1, #0
 80179a8:	f2c0 80cd 	blt.w	8017b46 <__kernel_rem_pio2+0x3b6>
 80179ac:	aa68      	add	r2, sp, #416	; 0x1a0
 80179ae:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 80179b2:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8017ac8 <__kernel_rem_pio2+0x338>
 80179b6:	4e4b      	ldr	r6, [pc, #300]	; (8017ae4 <__kernel_rem_pio2+0x354>)
 80179b8:	2200      	movs	r2, #0
 80179ba:	e0b8      	b.n	8017b2e <__kernel_rem_pio2+0x39e>
 80179bc:	2502      	movs	r5, #2
 80179be:	e78c      	b.n	80178da <__kernel_rem_pio2+0x14a>
 80179c0:	681a      	ldr	r2, [r3, #0]
 80179c2:	b948      	cbnz	r0, 80179d8 <__kernel_rem_pio2+0x248>
 80179c4:	b11a      	cbz	r2, 80179ce <__kernel_rem_pio2+0x23e>
 80179c6:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80179ca:	601a      	str	r2, [r3, #0]
 80179cc:	2201      	movs	r2, #1
 80179ce:	f10c 0c01 	add.w	ip, ip, #1
 80179d2:	3304      	adds	r3, #4
 80179d4:	4610      	mov	r0, r2
 80179d6:	e787      	b.n	80178e8 <__kernel_rem_pio2+0x158>
 80179d8:	ebae 0202 	sub.w	r2, lr, r2
 80179dc:	601a      	str	r2, [r3, #0]
 80179de:	4602      	mov	r2, r0
 80179e0:	e7f5      	b.n	80179ce <__kernel_rem_pio2+0x23e>
 80179e2:	1e72      	subs	r2, r6, #1
 80179e4:	ab04      	add	r3, sp, #16
 80179e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80179ea:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80179ee:	f10d 0c10 	add.w	ip, sp, #16
 80179f2:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 80179f6:	e77f      	b.n	80178f8 <__kernel_rem_pio2+0x168>
 80179f8:	1e72      	subs	r2, r6, #1
 80179fa:	ab04      	add	r3, sp, #16
 80179fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a00:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8017a04:	e7f3      	b.n	80179ee <__kernel_rem_pio2+0x25e>
 8017a06:	aa04      	add	r2, sp, #16
 8017a08:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8017a0c:	3801      	subs	r0, #1
 8017a0e:	ea4c 0c02 	orr.w	ip, ip, r2
 8017a12:	e7ae      	b.n	8017972 <__kernel_rem_pio2+0x1e2>
 8017a14:	3001      	adds	r0, #1
 8017a16:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8017a1a:	2a00      	cmp	r2, #0
 8017a1c:	d0fa      	beq.n	8017a14 <__kernel_rem_pio2+0x284>
 8017a1e:	eb06 020b 	add.w	r2, r6, fp
 8017a22:	ad18      	add	r5, sp, #96	; 0x60
 8017a24:	1c73      	adds	r3, r6, #1
 8017a26:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8017a2a:	4406      	add	r6, r0
 8017a2c:	429e      	cmp	r6, r3
 8017a2e:	f6ff af19 	blt.w	8017864 <__kernel_rem_pio2+0xd4>
 8017a32:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8017a36:	9d00      	ldr	r5, [sp, #0]
 8017a38:	ee07 0a90 	vmov	s15, r0
 8017a3c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017a40:	2000      	movs	r0, #0
 8017a42:	eca2 7b02 	vstmia	r2!, {d7}
 8017a46:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8017ac8 <__kernel_rem_pio2+0x338>
 8017a4a:	4694      	mov	ip, r2
 8017a4c:	4288      	cmp	r0, r1
 8017a4e:	dd09      	ble.n	8017a64 <__kernel_rem_pio2+0x2d4>
 8017a50:	a868      	add	r0, sp, #416	; 0x1a0
 8017a52:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8017a56:	ed80 7b00 	vstr	d7, [r0]
 8017a5a:	3301      	adds	r3, #1
 8017a5c:	e7e6      	b.n	8017a2c <__kernel_rem_pio2+0x29c>
 8017a5e:	9b01      	ldr	r3, [sp, #4]
 8017a60:	2001      	movs	r0, #1
 8017a62:	e7d8      	b.n	8017a16 <__kernel_rem_pio2+0x286>
 8017a64:	ecb5 5b02 	vldmia	r5!, {d5}
 8017a68:	ed3c 6b02 	vldmdb	ip!, {d6}
 8017a6c:	3001      	adds	r0, #1
 8017a6e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017a72:	e7eb      	b.n	8017a4c <__kernel_rem_pio2+0x2bc>
 8017a74:	3b01      	subs	r3, #1
 8017a76:	e781      	b.n	801797c <__kernel_rem_pio2+0x1ec>
 8017a78:	4260      	negs	r0, r4
 8017a7a:	eeb0 0b48 	vmov.f64	d0, d8
 8017a7e:	f000 fa4b 	bl	8017f18 <scalbn>
 8017a82:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8017ad8 <__kernel_rem_pio2+0x348>
 8017a86:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8017a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a8e:	db2b      	blt.n	8017ae8 <__kernel_rem_pio2+0x358>
 8017a90:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8017ad0 <__kernel_rem_pio2+0x340>
 8017a94:	ee20 7b07 	vmul.f64	d7, d0, d7
 8017a98:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8017a9c:	aa04      	add	r2, sp, #16
 8017a9e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8017aa2:	eea5 0b46 	vfms.f64	d0, d5, d6
 8017aa6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017aaa:	a904      	add	r1, sp, #16
 8017aac:	ee10 3a10 	vmov	r3, s0
 8017ab0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8017ab4:	ee17 2a10 	vmov	r2, s14
 8017ab8:	1c73      	adds	r3, r6, #1
 8017aba:	3418      	adds	r4, #24
 8017abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8017ac0:	e762      	b.n	8017988 <__kernel_rem_pio2+0x1f8>
 8017ac2:	bf00      	nop
 8017ac4:	f3af 8000 	nop.w
	...
 8017ad4:	3e700000 	.word	0x3e700000
 8017ad8:	00000000 	.word	0x00000000
 8017adc:	41700000 	.word	0x41700000
 8017ae0:	08019f60 	.word	0x08019f60
 8017ae4:	08019f20 	.word	0x08019f20
 8017ae8:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017aec:	aa04      	add	r2, sp, #16
 8017aee:	ee10 3a10 	vmov	r3, s0
 8017af2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8017af6:	4633      	mov	r3, r6
 8017af8:	e746      	b.n	8017988 <__kernel_rem_pio2+0x1f8>
 8017afa:	a804      	add	r0, sp, #16
 8017afc:	a968      	add	r1, sp, #416	; 0x1a0
 8017afe:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8017b02:	9000      	str	r0, [sp, #0]
 8017b04:	ee07 0a90 	vmov	s15, r0
 8017b08:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8017b0c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017b10:	3a01      	subs	r2, #1
 8017b12:	ee27 7b00 	vmul.f64	d7, d7, d0
 8017b16:	ee20 0b06 	vmul.f64	d0, d0, d6
 8017b1a:	ed81 7b00 	vstr	d7, [r1]
 8017b1e:	e73d      	b.n	801799c <__kernel_rem_pio2+0x20c>
 8017b20:	ecb6 5b02 	vldmia	r6!, {d5}
 8017b24:	ecb4 6b02 	vldmia	r4!, {d6}
 8017b28:	3201      	adds	r2, #1
 8017b2a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017b2e:	454a      	cmp	r2, r9
 8017b30:	dc01      	bgt.n	8017b36 <__kernel_rem_pio2+0x3a6>
 8017b32:	4290      	cmp	r0, r2
 8017b34:	daf4      	bge.n	8017b20 <__kernel_rem_pio2+0x390>
 8017b36:	aa40      	add	r2, sp, #256	; 0x100
 8017b38:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8017b3c:	ed82 7b00 	vstr	d7, [r2]
 8017b40:	3901      	subs	r1, #1
 8017b42:	3001      	adds	r0, #1
 8017b44:	e72f      	b.n	80179a6 <__kernel_rem_pio2+0x216>
 8017b46:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8017b48:	2a02      	cmp	r2, #2
 8017b4a:	dc0a      	bgt.n	8017b62 <__kernel_rem_pio2+0x3d2>
 8017b4c:	2a00      	cmp	r2, #0
 8017b4e:	dc5a      	bgt.n	8017c06 <__kernel_rem_pio2+0x476>
 8017b50:	d039      	beq.n	8017bc6 <__kernel_rem_pio2+0x436>
 8017b52:	f008 0007 	and.w	r0, r8, #7
 8017b56:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8017b5a:	ecbd 8b06 	vpop	{d8-d10}
 8017b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b62:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8017b64:	2a03      	cmp	r2, #3
 8017b66:	d1f4      	bne.n	8017b52 <__kernel_rem_pio2+0x3c2>
 8017b68:	aa40      	add	r2, sp, #256	; 0x100
 8017b6a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017b6e:	4611      	mov	r1, r2
 8017b70:	4618      	mov	r0, r3
 8017b72:	2800      	cmp	r0, #0
 8017b74:	f1a1 0108 	sub.w	r1, r1, #8
 8017b78:	dc52      	bgt.n	8017c20 <__kernel_rem_pio2+0x490>
 8017b7a:	4619      	mov	r1, r3
 8017b7c:	2901      	cmp	r1, #1
 8017b7e:	f1a2 0208 	sub.w	r2, r2, #8
 8017b82:	dc5d      	bgt.n	8017c40 <__kernel_rem_pio2+0x4b0>
 8017b84:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8017c88 <__kernel_rem_pio2+0x4f8>
 8017b88:	2b01      	cmp	r3, #1
 8017b8a:	dc69      	bgt.n	8017c60 <__kernel_rem_pio2+0x4d0>
 8017b8c:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8017b90:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8017b94:	2d00      	cmp	r5, #0
 8017b96:	d16c      	bne.n	8017c72 <__kernel_rem_pio2+0x4e2>
 8017b98:	ed87 5b00 	vstr	d5, [r7]
 8017b9c:	ed87 6b02 	vstr	d6, [r7, #8]
 8017ba0:	ed87 7b04 	vstr	d7, [r7, #16]
 8017ba4:	e7d5      	b.n	8017b52 <__kernel_rem_pio2+0x3c2>
 8017ba6:	aa40      	add	r2, sp, #256	; 0x100
 8017ba8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017bac:	ed92 6b00 	vldr	d6, [r2]
 8017bb0:	3b01      	subs	r3, #1
 8017bb2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	daf5      	bge.n	8017ba6 <__kernel_rem_pio2+0x416>
 8017bba:	b10d      	cbz	r5, 8017bc0 <__kernel_rem_pio2+0x430>
 8017bbc:	eeb1 7b47 	vneg.f64	d7, d7
 8017bc0:	ed87 7b00 	vstr	d7, [r7]
 8017bc4:	e7c5      	b.n	8017b52 <__kernel_rem_pio2+0x3c2>
 8017bc6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8017c88 <__kernel_rem_pio2+0x4f8>
 8017bca:	e7f4      	b.n	8017bb6 <__kernel_rem_pio2+0x426>
 8017bcc:	a940      	add	r1, sp, #256	; 0x100
 8017bce:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8017bd2:	ed91 7b00 	vldr	d7, [r1]
 8017bd6:	3a01      	subs	r2, #1
 8017bd8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8017bdc:	2a00      	cmp	r2, #0
 8017bde:	daf5      	bge.n	8017bcc <__kernel_rem_pio2+0x43c>
 8017be0:	b1ad      	cbz	r5, 8017c0e <__kernel_rem_pio2+0x47e>
 8017be2:	eeb1 7b46 	vneg.f64	d7, d6
 8017be6:	ed87 7b00 	vstr	d7, [r7]
 8017bea:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8017bee:	a942      	add	r1, sp, #264	; 0x108
 8017bf0:	2201      	movs	r2, #1
 8017bf2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017bf6:	4293      	cmp	r3, r2
 8017bf8:	da0c      	bge.n	8017c14 <__kernel_rem_pio2+0x484>
 8017bfa:	b10d      	cbz	r5, 8017c00 <__kernel_rem_pio2+0x470>
 8017bfc:	eeb1 7b47 	vneg.f64	d7, d7
 8017c00:	ed87 7b02 	vstr	d7, [r7, #8]
 8017c04:	e7a5      	b.n	8017b52 <__kernel_rem_pio2+0x3c2>
 8017c06:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8017c88 <__kernel_rem_pio2+0x4f8>
 8017c0a:	461a      	mov	r2, r3
 8017c0c:	e7e6      	b.n	8017bdc <__kernel_rem_pio2+0x44c>
 8017c0e:	eeb0 7b46 	vmov.f64	d7, d6
 8017c12:	e7e8      	b.n	8017be6 <__kernel_rem_pio2+0x456>
 8017c14:	ecb1 6b02 	vldmia	r1!, {d6}
 8017c18:	3201      	adds	r2, #1
 8017c1a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017c1e:	e7ea      	b.n	8017bf6 <__kernel_rem_pio2+0x466>
 8017c20:	ed91 7b00 	vldr	d7, [r1]
 8017c24:	ed91 5b02 	vldr	d5, [r1, #8]
 8017c28:	3801      	subs	r0, #1
 8017c2a:	ee37 6b05 	vadd.f64	d6, d7, d5
 8017c2e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017c32:	ed81 6b00 	vstr	d6, [r1]
 8017c36:	ee37 7b05 	vadd.f64	d7, d7, d5
 8017c3a:	ed81 7b02 	vstr	d7, [r1, #8]
 8017c3e:	e798      	b.n	8017b72 <__kernel_rem_pio2+0x3e2>
 8017c40:	ed92 7b00 	vldr	d7, [r2]
 8017c44:	ed92 5b02 	vldr	d5, [r2, #8]
 8017c48:	3901      	subs	r1, #1
 8017c4a:	ee37 6b05 	vadd.f64	d6, d7, d5
 8017c4e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017c52:	ed82 6b00 	vstr	d6, [r2]
 8017c56:	ee37 7b05 	vadd.f64	d7, d7, d5
 8017c5a:	ed82 7b02 	vstr	d7, [r2, #8]
 8017c5e:	e78d      	b.n	8017b7c <__kernel_rem_pio2+0x3ec>
 8017c60:	aa40      	add	r2, sp, #256	; 0x100
 8017c62:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017c66:	ed92 6b00 	vldr	d6, [r2]
 8017c6a:	3b01      	subs	r3, #1
 8017c6c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017c70:	e78a      	b.n	8017b88 <__kernel_rem_pio2+0x3f8>
 8017c72:	eeb1 5b45 	vneg.f64	d5, d5
 8017c76:	eeb1 6b46 	vneg.f64	d6, d6
 8017c7a:	ed87 5b00 	vstr	d5, [r7]
 8017c7e:	eeb1 7b47 	vneg.f64	d7, d7
 8017c82:	ed87 6b02 	vstr	d6, [r7, #8]
 8017c86:	e78b      	b.n	8017ba0 <__kernel_rem_pio2+0x410>
	...

08017c90 <__kernel_sin>:
 8017c90:	ee10 3a90 	vmov	r3, s1
 8017c94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017c98:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8017c9c:	da04      	bge.n	8017ca8 <__kernel_sin+0x18>
 8017c9e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8017ca2:	ee17 3a90 	vmov	r3, s15
 8017ca6:	b35b      	cbz	r3, 8017d00 <__kernel_sin+0x70>
 8017ca8:	ee20 6b00 	vmul.f64	d6, d0, d0
 8017cac:	ee20 5b06 	vmul.f64	d5, d0, d6
 8017cb0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8017d08 <__kernel_sin+0x78>
 8017cb4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8017d10 <__kernel_sin+0x80>
 8017cb8:	eea6 4b07 	vfma.f64	d4, d6, d7
 8017cbc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8017d18 <__kernel_sin+0x88>
 8017cc0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8017cc4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8017d20 <__kernel_sin+0x90>
 8017cc8:	eea7 4b06 	vfma.f64	d4, d7, d6
 8017ccc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8017d28 <__kernel_sin+0x98>
 8017cd0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8017cd4:	b930      	cbnz	r0, 8017ce4 <__kernel_sin+0x54>
 8017cd6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8017d30 <__kernel_sin+0xa0>
 8017cda:	eea6 4b07 	vfma.f64	d4, d6, d7
 8017cde:	eea4 0b05 	vfma.f64	d0, d4, d5
 8017ce2:	4770      	bx	lr
 8017ce4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8017ce8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8017cec:	eea1 7b04 	vfma.f64	d7, d1, d4
 8017cf0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8017cf4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8017d38 <__kernel_sin+0xa8>
 8017cf8:	eea5 1b07 	vfma.f64	d1, d5, d7
 8017cfc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8017d00:	4770      	bx	lr
 8017d02:	bf00      	nop
 8017d04:	f3af 8000 	nop.w
 8017d08:	5acfd57c 	.word	0x5acfd57c
 8017d0c:	3de5d93a 	.word	0x3de5d93a
 8017d10:	8a2b9ceb 	.word	0x8a2b9ceb
 8017d14:	be5ae5e6 	.word	0xbe5ae5e6
 8017d18:	57b1fe7d 	.word	0x57b1fe7d
 8017d1c:	3ec71de3 	.word	0x3ec71de3
 8017d20:	19c161d5 	.word	0x19c161d5
 8017d24:	bf2a01a0 	.word	0xbf2a01a0
 8017d28:	1110f8a6 	.word	0x1110f8a6
 8017d2c:	3f811111 	.word	0x3f811111
 8017d30:	55555549 	.word	0x55555549
 8017d34:	bfc55555 	.word	0xbfc55555
 8017d38:	55555549 	.word	0x55555549
 8017d3c:	3fc55555 	.word	0x3fc55555

08017d40 <with_errno>:
 8017d40:	b513      	push	{r0, r1, r4, lr}
 8017d42:	4604      	mov	r4, r0
 8017d44:	ed8d 0b00 	vstr	d0, [sp]
 8017d48:	f7fc fa1c 	bl	8014184 <__errno>
 8017d4c:	ed9d 0b00 	vldr	d0, [sp]
 8017d50:	6004      	str	r4, [r0, #0]
 8017d52:	b002      	add	sp, #8
 8017d54:	bd10      	pop	{r4, pc}

08017d56 <xflow>:
 8017d56:	b082      	sub	sp, #8
 8017d58:	b158      	cbz	r0, 8017d72 <xflow+0x1c>
 8017d5a:	eeb1 7b40 	vneg.f64	d7, d0
 8017d5e:	ed8d 7b00 	vstr	d7, [sp]
 8017d62:	ed9d 7b00 	vldr	d7, [sp]
 8017d66:	2022      	movs	r0, #34	; 0x22
 8017d68:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017d6c:	b002      	add	sp, #8
 8017d6e:	f7ff bfe7 	b.w	8017d40 <with_errno>
 8017d72:	eeb0 7b40 	vmov.f64	d7, d0
 8017d76:	e7f2      	b.n	8017d5e <xflow+0x8>

08017d78 <__math_uflow>:
 8017d78:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017d80 <__math_uflow+0x8>
 8017d7c:	f7ff bfeb 	b.w	8017d56 <xflow>
 8017d80:	00000000 	.word	0x00000000
 8017d84:	10000000 	.word	0x10000000

08017d88 <__math_oflow>:
 8017d88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017d90 <__math_oflow+0x8>
 8017d8c:	f7ff bfe3 	b.w	8017d56 <xflow>
 8017d90:	00000000 	.word	0x00000000
 8017d94:	70000000 	.word	0x70000000

08017d98 <__math_divzero>:
 8017d98:	b082      	sub	sp, #8
 8017d9a:	2800      	cmp	r0, #0
 8017d9c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8017da0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 8017da4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 8017da8:	ed8d 7b00 	vstr	d7, [sp]
 8017dac:	ed9d 0b00 	vldr	d0, [sp]
 8017db0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 8017dc0 <__math_divzero+0x28>
 8017db4:	2022      	movs	r0, #34	; 0x22
 8017db6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8017dba:	b002      	add	sp, #8
 8017dbc:	f7ff bfc0 	b.w	8017d40 <with_errno>
	...

08017dc8 <__math_invalid>:
 8017dc8:	eeb0 7b40 	vmov.f64	d7, d0
 8017dcc:	eeb4 7b47 	vcmp.f64	d7, d7
 8017dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dd4:	ee30 6b40 	vsub.f64	d6, d0, d0
 8017dd8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 8017ddc:	d602      	bvs.n	8017de4 <__math_invalid+0x1c>
 8017dde:	2021      	movs	r0, #33	; 0x21
 8017de0:	f7ff bfae 	b.w	8017d40 <with_errno>
 8017de4:	4770      	bx	lr

08017de6 <__math_check_uflow>:
 8017de6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8017dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dee:	d102      	bne.n	8017df6 <__math_check_uflow+0x10>
 8017df0:	2022      	movs	r0, #34	; 0x22
 8017df2:	f7ff bfa5 	b.w	8017d40 <with_errno>
 8017df6:	4770      	bx	lr

08017df8 <__math_check_oflow>:
 8017df8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8017e18 <__math_check_oflow+0x20>
 8017dfc:	eeb0 7bc0 	vabs.f64	d7, d0
 8017e00:	eeb4 7b46 	vcmp.f64	d7, d6
 8017e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e08:	dd02      	ble.n	8017e10 <__math_check_oflow+0x18>
 8017e0a:	2022      	movs	r0, #34	; 0x22
 8017e0c:	f7ff bf98 	b.w	8017d40 <with_errno>
 8017e10:	4770      	bx	lr
 8017e12:	bf00      	nop
 8017e14:	f3af 8000 	nop.w
 8017e18:	ffffffff 	.word	0xffffffff
 8017e1c:	7fefffff 	.word	0x7fefffff

08017e20 <floor>:
 8017e20:	ee10 1a90 	vmov	r1, s1
 8017e24:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017e28:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8017e2c:	2b13      	cmp	r3, #19
 8017e2e:	b530      	push	{r4, r5, lr}
 8017e30:	ee10 0a10 	vmov	r0, s0
 8017e34:	ee10 5a10 	vmov	r5, s0
 8017e38:	dc31      	bgt.n	8017e9e <floor+0x7e>
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	da15      	bge.n	8017e6a <floor+0x4a>
 8017e3e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8017ef8 <floor+0xd8>
 8017e42:	ee30 0b07 	vadd.f64	d0, d0, d7
 8017e46:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8017e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e4e:	dd07      	ble.n	8017e60 <floor+0x40>
 8017e50:	2900      	cmp	r1, #0
 8017e52:	da4e      	bge.n	8017ef2 <floor+0xd2>
 8017e54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017e58:	4318      	orrs	r0, r3
 8017e5a:	d001      	beq.n	8017e60 <floor+0x40>
 8017e5c:	4928      	ldr	r1, [pc, #160]	; (8017f00 <floor+0xe0>)
 8017e5e:	2000      	movs	r0, #0
 8017e60:	460b      	mov	r3, r1
 8017e62:	4602      	mov	r2, r0
 8017e64:	ec43 2b10 	vmov	d0, r2, r3
 8017e68:	e020      	b.n	8017eac <floor+0x8c>
 8017e6a:	4a26      	ldr	r2, [pc, #152]	; (8017f04 <floor+0xe4>)
 8017e6c:	411a      	asrs	r2, r3
 8017e6e:	ea01 0402 	and.w	r4, r1, r2
 8017e72:	4304      	orrs	r4, r0
 8017e74:	d01a      	beq.n	8017eac <floor+0x8c>
 8017e76:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8017ef8 <floor+0xd8>
 8017e7a:	ee30 0b07 	vadd.f64	d0, d0, d7
 8017e7e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8017e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e86:	ddeb      	ble.n	8017e60 <floor+0x40>
 8017e88:	2900      	cmp	r1, #0
 8017e8a:	bfbe      	ittt	lt
 8017e8c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8017e90:	fa40 f303 	asrlt.w	r3, r0, r3
 8017e94:	18c9      	addlt	r1, r1, r3
 8017e96:	ea21 0102 	bic.w	r1, r1, r2
 8017e9a:	2000      	movs	r0, #0
 8017e9c:	e7e0      	b.n	8017e60 <floor+0x40>
 8017e9e:	2b33      	cmp	r3, #51	; 0x33
 8017ea0:	dd05      	ble.n	8017eae <floor+0x8e>
 8017ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017ea6:	d101      	bne.n	8017eac <floor+0x8c>
 8017ea8:	ee30 0b00 	vadd.f64	d0, d0, d0
 8017eac:	bd30      	pop	{r4, r5, pc}
 8017eae:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8017eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8017eb6:	40e2      	lsrs	r2, r4
 8017eb8:	4202      	tst	r2, r0
 8017eba:	d0f7      	beq.n	8017eac <floor+0x8c>
 8017ebc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8017ef8 <floor+0xd8>
 8017ec0:	ee30 0b07 	vadd.f64	d0, d0, d7
 8017ec4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8017ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ecc:	ddc8      	ble.n	8017e60 <floor+0x40>
 8017ece:	2900      	cmp	r1, #0
 8017ed0:	da02      	bge.n	8017ed8 <floor+0xb8>
 8017ed2:	2b14      	cmp	r3, #20
 8017ed4:	d103      	bne.n	8017ede <floor+0xbe>
 8017ed6:	3101      	adds	r1, #1
 8017ed8:	ea20 0002 	bic.w	r0, r0, r2
 8017edc:	e7c0      	b.n	8017e60 <floor+0x40>
 8017ede:	2401      	movs	r4, #1
 8017ee0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8017ee4:	fa04 f303 	lsl.w	r3, r4, r3
 8017ee8:	4418      	add	r0, r3
 8017eea:	42a8      	cmp	r0, r5
 8017eec:	bf38      	it	cc
 8017eee:	1909      	addcc	r1, r1, r4
 8017ef0:	e7f2      	b.n	8017ed8 <floor+0xb8>
 8017ef2:	2000      	movs	r0, #0
 8017ef4:	4601      	mov	r1, r0
 8017ef6:	e7b3      	b.n	8017e60 <floor+0x40>
 8017ef8:	8800759c 	.word	0x8800759c
 8017efc:	7e37e43c 	.word	0x7e37e43c
 8017f00:	bff00000 	.word	0xbff00000
 8017f04:	000fffff 	.word	0x000fffff

08017f08 <nan>:
 8017f08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017f10 <nan+0x8>
 8017f0c:	4770      	bx	lr
 8017f0e:	bf00      	nop
 8017f10:	00000000 	.word	0x00000000
 8017f14:	7ff80000 	.word	0x7ff80000

08017f18 <scalbn>:
 8017f18:	b082      	sub	sp, #8
 8017f1a:	ed8d 0b00 	vstr	d0, [sp]
 8017f1e:	9b01      	ldr	r3, [sp, #4]
 8017f20:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8017f24:	b9a2      	cbnz	r2, 8017f50 <scalbn+0x38>
 8017f26:	9a00      	ldr	r2, [sp, #0]
 8017f28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017f2c:	4313      	orrs	r3, r2
 8017f2e:	d03a      	beq.n	8017fa6 <scalbn+0x8e>
 8017f30:	ed9f 7b35 	vldr	d7, [pc, #212]	; 8018008 <scalbn+0xf0>
 8017f34:	4b40      	ldr	r3, [pc, #256]	; (8018038 <scalbn+0x120>)
 8017f36:	ee20 7b07 	vmul.f64	d7, d0, d7
 8017f3a:	4298      	cmp	r0, r3
 8017f3c:	ed8d 7b00 	vstr	d7, [sp]
 8017f40:	da11      	bge.n	8017f66 <scalbn+0x4e>
 8017f42:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8018010 <scalbn+0xf8>
 8017f46:	ed9d 6b00 	vldr	d6, [sp]
 8017f4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017f4e:	e007      	b.n	8017f60 <scalbn+0x48>
 8017f50:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8017f54:	428a      	cmp	r2, r1
 8017f56:	d10a      	bne.n	8017f6e <scalbn+0x56>
 8017f58:	ed9d 7b00 	vldr	d7, [sp]
 8017f5c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8017f60:	ed8d 7b00 	vstr	d7, [sp]
 8017f64:	e01f      	b.n	8017fa6 <scalbn+0x8e>
 8017f66:	9b01      	ldr	r3, [sp, #4]
 8017f68:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8017f6c:	3a36      	subs	r2, #54	; 0x36
 8017f6e:	4402      	add	r2, r0
 8017f70:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017f74:	428a      	cmp	r2, r1
 8017f76:	dd0a      	ble.n	8017f8e <scalbn+0x76>
 8017f78:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8018018 <scalbn+0x100>
 8017f7c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8018020 <scalbn+0x108>
 8017f80:	eeb0 6b47 	vmov.f64	d6, d7
 8017f84:	9b01      	ldr	r3, [sp, #4]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	fe27 7b05 	vselge.f64	d7, d7, d5
 8017f8c:	e7dd      	b.n	8017f4a <scalbn+0x32>
 8017f8e:	2a00      	cmp	r2, #0
 8017f90:	dd0d      	ble.n	8017fae <scalbn+0x96>
 8017f92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017f96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017f9a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017f9e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8017fa2:	e9cd 0100 	strd	r0, r1, [sp]
 8017fa6:	ed9d 0b00 	vldr	d0, [sp]
 8017faa:	b002      	add	sp, #8
 8017fac:	4770      	bx	lr
 8017fae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017fb2:	da18      	bge.n	8017fe6 <scalbn+0xce>
 8017fb4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017fb8:	4298      	cmp	r0, r3
 8017fba:	9b01      	ldr	r3, [sp, #4]
 8017fbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017fc0:	dd09      	ble.n	8017fd6 <scalbn+0xbe>
 8017fc2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8018018 <scalbn+0x100>
 8017fc6:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8018020 <scalbn+0x108>
 8017fca:	eeb0 6b47 	vmov.f64	d6, d7
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	fe07 7b05 	vseleq.f64	d7, d7, d5
 8017fd4:	e7b9      	b.n	8017f4a <scalbn+0x32>
 8017fd6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8018010 <scalbn+0xf8>
 8017fda:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8018028 <scalbn+0x110>
 8017fde:	eeb0 6b47 	vmov.f64	d6, d7
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	e7f4      	b.n	8017fd0 <scalbn+0xb8>
 8017fe6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017fea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017fee:	3236      	adds	r2, #54	; 0x36
 8017ff0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017ff4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8017ff8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8018030 <scalbn+0x118>
 8017ffc:	ec41 0b17 	vmov	d7, r0, r1
 8018000:	e7a3      	b.n	8017f4a <scalbn+0x32>
 8018002:	bf00      	nop
 8018004:	f3af 8000 	nop.w
 8018008:	00000000 	.word	0x00000000
 801800c:	43500000 	.word	0x43500000
 8018010:	c2f8f359 	.word	0xc2f8f359
 8018014:	01a56e1f 	.word	0x01a56e1f
 8018018:	8800759c 	.word	0x8800759c
 801801c:	7e37e43c 	.word	0x7e37e43c
 8018020:	8800759c 	.word	0x8800759c
 8018024:	fe37e43c 	.word	0xfe37e43c
 8018028:	c2f8f359 	.word	0xc2f8f359
 801802c:	81a56e1f 	.word	0x81a56e1f
 8018030:	00000000 	.word	0x00000000
 8018034:	3c900000 	.word	0x3c900000
 8018038:	ffff3cb0 	.word	0xffff3cb0

0801803c <_init>:
 801803c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801803e:	bf00      	nop
 8018040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018042:	bc08      	pop	{r3}
 8018044:	469e      	mov	lr, r3
 8018046:	4770      	bx	lr

08018048 <_fini>:
 8018048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801804a:	bf00      	nop
 801804c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801804e:	bc08      	pop	{r3}
 8018050:	469e      	mov	lr, r3
 8018052:	4770      	bx	lr
